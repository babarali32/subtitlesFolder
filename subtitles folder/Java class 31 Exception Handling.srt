1
00:00:08,240 --> 00:00:10,200
They make any sense.

2
00:00:10,200 --> 00:00:21,160
So I started and got bored.

3
00:00:23,320 --> 00:00:43,920
Yep. Yep.

4
00:00:44,640 --> 00:00:47,120
The students from previous
previous batches,

5
00:00:48,080 --> 00:00:51,320
when they joined the companies,
believe me, they their brains.

6
00:00:51,320 --> 00:00:55,680
How how,
how much they stood out from syntax.

7
00:00:55,680 --> 00:00:58,320
Didn't know about Java and the industry.

8
00:00:58,320 --> 00:01:00,720
So if you guys are

9
00:01:00,720 --> 00:01:05,600
grabbing like 80 to 70 to 80% of Java,
you guys are doing great.

10
00:01:05,640 --> 00:01:08,480
One thing about me,
I will be honest. Lied to lie.

11
00:01:08,560 --> 00:01:11,240
Yep. Yep.

12
00:01:12,800 --> 00:01:16,080
Is this last Java class the Sebastian

13
00:01:16,680 --> 00:01:21,680
last regular Java class?

14
00:01:21,680 --> 00:01:24,640
And now you guys will be

15
00:01:26,280 --> 00:01:29,920
building the frameworks,
the actual products, the actual

16
00:01:30,960 --> 00:01:35,240
meat, the actual heart of automation.

17
00:01:35,360 --> 00:01:37,360
Let's do one more on January.

18
00:01:37,840 --> 00:01:40,320
January 2nd.

19
00:01:40,440 --> 00:01:43,640
Yes, Because of Christmas holidays,

20
00:01:44,520 --> 00:01:49,040
I talk to the Apple guys,
but they are on vacations, so

21
00:01:50,400 --> 00:01:54,040
they will get back to me on Monday.

22
00:01:54,640 --> 00:02:03,000
No more baby boys and baby girls. Yep.

23
00:02:03,000 --> 00:02:19,040
This should never end
like an infinite loop.

24
00:02:22,680 --> 00:02:24,600
A new open calendar

25
00:02:24,600 --> 00:02:27,520
review year.

26
00:02:32,920 --> 00:02:35,760
They should keep Java at least once

27
00:02:35,920 --> 00:02:37,960
a week.

28
00:02:42,600 --> 00:03:02,120
Yes, I agree.

29
00:03:02,120 --> 00:03:04,200
But there is no review class to model

30
00:03:07,320 --> 00:03:10,320
for to be here.

31
00:03:12,440 --> 00:03:14,760
Oh. Okay.

32
00:03:14,760 --> 00:03:15,840
So this

33
00:03:18,800 --> 00:03:20,680
today's drunk sex drive.

34
00:03:20,680 --> 00:03:24,960
So we got the review class and we're in.

35
00:03:25,680 --> 00:03:29,080
At what time all the David Review class

36
00:03:29,080 --> 00:03:33,200
the same 710.

37
00:03:33,200 --> 00:03:44,240
So time is missing.

38
00:03:47,040 --> 00:03:48,320
I will update

39
00:03:56,800 --> 00:03:57,760
availability time.

40
00:03:57,760 --> 00:03:59,880
Is there anything else

41
00:04:05,920 --> 00:04:08,040
or not by will you be not typing

42
00:04:08,040 --> 00:04:10,440
because you will definitely be
writing code

43
00:04:17,040 --> 00:04:20,800
if you are planning to work as back

44
00:04:22,200 --> 00:04:30,720
engineer.

45
00:04:31,680 --> 00:04:34,720
So we were discussing the exceptions.

46
00:04:35,480 --> 00:04:38,120
Not like developers. Yep.

47
00:04:38,120 --> 00:04:40,480
Actually the base is same.

48
00:04:40,480 --> 00:04:41,160
The basics.

49
00:04:41,160 --> 00:04:43,360
They are same for developers and testers.

50
00:04:43,920 --> 00:04:48,440
It is the tools and the frameworks
that differ.

51
00:04:49,000 --> 00:04:51,280
So for example, a developer might.

52
00:04:51,880 --> 00:04:55,760
So for example, from here
you guys will be learning the best

53
00:04:55,800 --> 00:04:58,680
indie and cucumber
a developer would learn.

54
00:04:59,280 --> 00:05:03,640
For example, Springboard
or something like that from here. But

55
00:05:05,120 --> 00:05:05,880
before this,

56
00:05:05,880 --> 00:05:08,360
the basics, they are the same for both

57
00:05:10,800 --> 00:05:11,320
developers.

58
00:05:11,320 --> 00:05:14,000
They write a lot of

59
00:05:18,120 --> 00:05:18,920
this topic.

60
00:05:18,920 --> 00:05:20,280
We just stared.

61
00:05:20,280 --> 00:05:23,520
Yup. Yup.

62
00:05:24,960 --> 00:05:28,320
So can you guys tell me about exceptions?

63
00:05:29,280 --> 00:05:31,560
What are they?

64
00:05:31,560 --> 00:05:45,440
Why they are important.

65
00:05:46,920 --> 00:05:49,040
They are classes

66
00:05:49,040 --> 00:05:52,920
for atoms.

67
00:05:52,920 --> 00:05:54,760
Knowing about that.

68
00:05:54,760 --> 00:05:57,120
Can I ask you about previous class?

69
00:05:57,160 --> 00:06:03,160
Yup. Can be built in.

70
00:06:04,760 --> 00:06:10,400
So exception is.

71
00:06:10,560 --> 00:06:12,800
And even that

72
00:06:15,760 --> 00:06:19,360
the distro the

73
00:06:19,920 --> 00:06:23,560
normal flow of

74
00:06:25,560 --> 00:06:26,560
all program.

75
00:06:26,560 --> 00:06:28,920
Right.

76
00:06:29,880 --> 00:06:33,560
So can you guys tell me
about the normal flow of a program?

77
00:06:33,920 --> 00:06:37,280
What do we expect from a normal floor?

78
00:06:38,400 --> 00:06:38,920
Mean to

79
00:06:42,520 --> 00:06:44,920
try and catch helps not point.

80
00:06:46,720 --> 00:06:49,320
So even if let's say for example

81
00:06:49,320 --> 00:06:54,040
if I have written maybe 100 lines of code,

82
00:06:54,720 --> 00:06:58,760
the normal flow should be executing
all the lines of code

83
00:06:58,760 --> 00:07:02,480
starting from line
number one to line number one.

84
00:07:02,880 --> 00:07:03,520
Right.

85
00:07:04,080 --> 00:07:08,280
And if anything goes wrong,
let's say maybe on line number 50,

86
00:07:09,000 --> 00:07:11,520
then whatever that line 50

87
00:07:11,520 --> 00:07:14,240
is doing,
that functionality should not work,

88
00:07:14,640 --> 00:07:17,520
but the rest of the code,
it should still execute right.

89
00:07:18,360 --> 00:07:21,360
So we discussed about the examples, like,

90
00:07:22,320 --> 00:07:24,760
for example, if we are using Slack

91
00:07:26,160 --> 00:07:28,440
and or some reason internet

92
00:07:30,080 --> 00:07:31,520
gets disconnected, right?

93
00:07:31,520 --> 00:07:36,960
So the slack should only show
maybe internet is not available

94
00:07:36,960 --> 00:07:43,040
or trying to connect or any, any
and any simple error message

95
00:07:43,040 --> 00:07:46,080
that everyone can understand.

96
00:07:46,120 --> 00:07:46,960
Right.

97
00:07:47,000 --> 00:07:50,120
Instead of showing

98
00:07:50,120 --> 00:07:51,960
no point that exception

99
00:07:51,960 --> 00:07:55,560
or some some kind of complicated error

100
00:07:55,560 --> 00:08:00,120
that does not make sense for normal users.

101
00:08:00,440 --> 00:08:03,680
What do we do
when we encounter any situation,

102
00:08:04,440 --> 00:08:06,560
when we encounter these exceptions?

103
00:08:07,200 --> 00:08:12,120
We convert them to simple error messages
that everyone can understand.

104
00:08:12,640 --> 00:08:16,520
So the purpose of exception
handling is first to avoid

105
00:08:16,560 --> 00:08:20,960
that abnormal termination
of the complete program.

106
00:08:21,640 --> 00:08:24,280
So let's say, for example,

107
00:08:24,280 --> 00:08:28,800
if we are trying to upload a file
to Google Drive using Google Chrome.

108
00:08:28,840 --> 00:08:29,440
Right.

109
00:08:29,440 --> 00:08:32,280
And if there is any issue with that file,

110
00:08:32,680 --> 00:08:36,360
instead of completely
shutting down Google Chrome.

111
00:08:37,000 --> 00:08:37,840
What do we say?

112
00:08:37,840 --> 00:08:43,040
Maybe that file is not
the format of that file is not supported.

113
00:08:43,080 --> 00:08:46,080
Or maybe there was an issue during the now

114
00:08:46,240 --> 00:08:49,400
upload process of that file
or any other any other issue.

115
00:08:50,000 --> 00:08:51,360
So we only

116
00:08:52,440 --> 00:08:54,480
we we make sure that the

117
00:08:54,480 --> 00:08:58,640
code that is causing the problem.

118
00:08:59,520 --> 00:09:01,760
It does not

119
00:09:01,760 --> 00:09:05,120
it does not make the complete program

120
00:09:05,120 --> 00:09:08,520
shut down or terminate abruptly.

121
00:09:08,960 --> 00:09:12,240
Maybe only that piece of functionality.

122
00:09:12,960 --> 00:09:16,920
If that piece of functionality
is not working, then maybe we can just

123
00:09:16,920 --> 00:09:21,000
show a simple error message
for only that specific part

124
00:09:21,160 --> 00:09:24,240
instead of just

125
00:09:24,240 --> 00:09:26,600
shutting down the complete program.

126
00:09:26,600 --> 00:09:29,520
We created an Excel file with one value

127
00:09:29,520 --> 00:09:32,600
How create with menu values,
for example, with Skynet.

128
00:09:33,240 --> 00:09:37,560
So with scanners
for one, as we use the loops

129
00:09:38,280 --> 00:09:40,600
to read multiple

130
00:09:41,160 --> 00:09:44,760
rules and multiple columns, we can again

131
00:09:44,760 --> 00:09:50,000
use a loop to create the multiple
all columns and multiple rows.

132
00:09:50,000 --> 00:09:53,520
So for example, using the scanner class

133
00:09:54,320 --> 00:09:56,920
first, do you have to store that data

134
00:09:58,040 --> 00:09:58,680
or you can

135
00:09:58,680 --> 00:10:01,200
insert it directly inside that Excel file.

136
00:10:01,800 --> 00:10:07,680
So I will show you an example if you want.

137
00:10:07,880 --> 00:10:11,600
So let's say, for example.

138
00:10:11,640 --> 00:10:15,800
So let's do it
at the end of and end of today's class.

139
00:10:15,800 --> 00:10:19,880
I think we will be done
with the exceptions around 2 p.m.

140
00:10:20,240 --> 00:10:23,200
and then remind me
and then I will show you how to let's say,

141
00:10:23,200 --> 00:10:26,360
for example, using the extender class,
we can insert

142
00:10:26,920 --> 00:10:30,720
multiple rows of that.

143
00:10:30,920 --> 00:10:31,640
Is it okay?

144
00:10:31,640 --> 00:10:36,840
Prince Alexi No, no, no.

145
00:10:37,760 --> 00:10:39,680
So these are exceptions.

146
00:10:39,680 --> 00:10:41,360
They are more important

147
00:10:41,360 --> 00:10:45,000
because you guys will not be inserting the
that in Excel files

148
00:10:45,000 --> 00:10:48,880
using using this kind of classes
in your frameworks and everything else.

149
00:10:49,640 --> 00:10:54,720
So let's do this part first
and then we will do that part as well.

150
00:10:56,480 --> 00:10:58,200
Everyone is scared of rappel,

151
00:10:58,200 --> 00:11:02,160
so that point to zero
nine is only for the mid Sorbonne

152
00:11:02,680 --> 00:11:05,520
and omitted and anyone else

153
00:11:06,080 --> 00:11:08,280
I like, for example, Allie.

154
00:11:09,080 --> 00:11:10,680
We can do that, right?

155
00:11:10,680 --> 00:11:12,360
Test out your lemurs.

156
00:11:12,360 --> 00:11:12,840
It's not.

157
00:11:12,840 --> 00:11:14,600
Not for you guys. Okay?

158
00:11:14,600 --> 00:11:29,240
We already finished 209.

159
00:11:29,240 --> 00:11:35,040
So an exception is an event which occurs
during the execution of program.

160
00:11:35,720 --> 00:11:37,440
So they are the exceptions.

161
00:11:37,440 --> 00:11:43,280
They are not syntax add as they are kind
of errors, but they are not syntax error.

162
00:11:43,720 --> 00:11:47,280
They occur only at runtime

163
00:11:47,280 --> 00:11:50,280
and when your application is in execution

164
00:11:51,320 --> 00:11:56,440
and no offense, but this is rude,
I know we already finished 209

165
00:11:56,480 --> 00:12:03,120
now what is the rule to zero nine?

166
00:12:03,120 --> 00:12:05,400
You guys want to

167
00:12:05,400 --> 00:12:07,160
unpublished

168
00:12:07,320 --> 00:12:08,960
or make it easier?

169
00:12:08,960 --> 00:12:13,560
Or what do you guys want instead?

170
00:12:13,560 --> 00:12:15,080
It's fine.

171
00:12:15,080 --> 00:12:17,360
So. So whatever. What is rude about this

172
00:12:20,160 --> 00:12:21,120
that only the mirror

173
00:12:21,120 --> 00:12:23,800
and for one can should cancel it.

174
00:12:24,120 --> 00:12:25,440
This is rude.

175
00:12:25,560 --> 00:12:27,000
Yes, please delete it.

176
00:12:27,000 --> 00:12:29,600
Everyone has their own capability.

177
00:12:29,600 --> 00:12:32,040
Yep. Yes.

178
00:12:32,040 --> 00:12:35,040
It's.

179
00:12:35,040 --> 00:12:44,440
I took a screenshot.

180
00:12:44,440 --> 00:12:47,640
This is a reminder of what we do not know

181
00:12:47,640 --> 00:12:51,400
about our knowledge.

182
00:12:51,400 --> 00:12:53,920
So. And I have
what is rude about this. Yes.

183
00:12:53,920 --> 00:12:57,600
Everyone has their own capability

184
00:12:58,600 --> 00:12:59,560
as part to me.

185
00:12:59,560 --> 00:13:01,320
You can't compare this students.

186
00:13:01,320 --> 00:13:03,480
This is to be moralizing.

187
00:13:03,480 --> 00:13:05,640
Oh no, this is not demoralizing.

188
00:13:05,640 --> 00:13:07,720
So what do we do?

189
00:13:09,120 --> 00:13:11,920
Let's say, for example,
when we created the exams,

190
00:13:11,920 --> 00:13:14,400
when we created the quizzes
or everything else,

191
00:13:15,240 --> 00:13:17,440
we divide it into different portions.

192
00:13:18,000 --> 00:13:21,280
So some part of that portion of Apple
is for everyone,

193
00:13:21,880 --> 00:13:24,680
then some is for the students
who are above average

194
00:13:24,680 --> 00:13:27,920
and some are all fit
are for exceptional students.

195
00:13:27,920 --> 00:13:30,840
Okay, So it does not mean
that anyone is inferior.

196
00:13:30,880 --> 00:13:34,080
It's about how much effort and time
you guys are putting.

197
00:13:34,960 --> 00:13:36,800
It's just funny. We all first, they're

198
00:13:38,760 --> 00:13:40,320
not doing it.

199
00:13:41,760 --> 00:13:43,640
So all the exams, quizzes

200
00:13:43,640 --> 00:13:46,480
and everything,
they are purposely designed in this way.

201
00:13:46,880 --> 00:13:47,760
Okay,

202
00:13:48,680 --> 00:13:51,000
so don't worry about them.

203
00:13:51,000 --> 00:13:51,640
Definitely.

204
00:13:51,640 --> 00:13:56,840
There will be some parts
that everyone will not be able to solve.

205
00:13:56,840 --> 00:13:58,480
The last bit Philosopher.

206
00:13:58,480 --> 00:14:02,400
When he grew old
he said, I know, I now know that

207
00:14:02,400 --> 00:14:07,280
I knew nothing.

208
00:14:07,280 --> 00:14:08,600
All right,

209
00:14:10,520 --> 00:14:11,040
so maybe

210
00:14:11,040 --> 00:14:14,440
next time I will try to add some hints.

211
00:14:14,440 --> 00:14:37,680
Maybe many of you were able to solve it.

212
00:14:37,680 --> 00:14:42,560
Maybe a couple of people.

213
00:14:42,560 --> 00:14:43,240
It's fine.

214
00:14:43,240 --> 00:14:55,720
It's fine.

215
00:14:55,720 --> 00:14:57,880
So there is one similarity.

216
00:14:57,880 --> 00:15:02,360
Then we add these things so that you guys
don't tell in the interviews.

217
00:15:02,680 --> 00:15:04,720
Hey, we know everything about Java.

218
00:15:04,720 --> 00:15:11,040
We can solve everything so that we know
what we know and what we don't know.

219
00:15:11,040 --> 00:15:15,480
To be celebrating this with this.

220
00:15:15,480 --> 00:15:22,440
Apparently many. All

221
00:15:23,520 --> 00:15:25,960
right, guys, then don't worry about it.

222
00:15:26,240 --> 00:15:28,360
It's fine if you guys are unable to me.

223
00:15:30,920 --> 00:15:34,880
So an exception is an event

224
00:15:35,040 --> 00:15:38,600
which occurs
during the execution of the program.

225
00:15:38,600 --> 00:15:40,560
So they are not syntax errors.

226
00:15:40,560 --> 00:15:43,200
Yes, they are still type of errors.

227
00:15:43,200 --> 00:15:45,920
It disrupts the normal flow. So what?

228
00:15:46,080 --> 00:15:48,240
What do we mean by normal flow?

229
00:15:48,240 --> 00:15:52,920
If we have written thousand line
500 lines of code, all of it

230
00:15:52,960 --> 00:15:56,360
should execute normally line by line

231
00:15:56,360 --> 00:15:59,480
starting from line one to like

232
00:15:59,480 --> 00:16:01,240
the last line

233
00:16:01,520 --> 00:16:03,160
of the program. Exception.

234
00:16:03,160 --> 00:16:04,920
So exception is an event.

235
00:16:04,920 --> 00:16:08,880
So exception
they are not something different.

236
00:16:08,880 --> 00:16:11,400
Again, everything in Java, everything

237
00:16:13,080 --> 00:16:15,400
in object oriented programing,

238
00:16:15,800 --> 00:16:20,400
programing, languages,
they are all at the end of classes

239
00:16:20,720 --> 00:16:25,040
and then we create the objects
of those classes and then we call

240
00:16:25,040 --> 00:16:29,280
the methods on those objects
to achieve different functionalities.

241
00:16:29,760 --> 00:16:31,800
You, you guys can control.

242
00:16:32,680 --> 00:16:34,920
And the hardware is you guys

243
00:16:34,920 --> 00:16:38,200
can connect to the Internet,
download files, build

244
00:16:38,200 --> 00:16:41,560
games, control
your computers or laptops, hardware.

245
00:16:42,040 --> 00:16:45,760
So they are all done
with the help of classes.

246
00:16:45,840 --> 00:16:49,560
Okay, Everything in Java is the class
and there are

247
00:16:49,600 --> 00:16:55,640
then methods inside those classes to maybe
say take the input from the keyboard

248
00:16:55,640 --> 00:17:01,480
to let's say, maybe you play a video
on the screen to play a sound.

249
00:17:01,480 --> 00:17:02,400
So everything

250
00:17:03,520 --> 00:17:05,160
in Java is also a class.

251
00:17:05,160 --> 00:17:08,200
So exceptions and the arrows,
they are also classes.

252
00:17:08,760 --> 00:17:13,600
So when we encounter
a specific scenario in the code,

253
00:17:14,160 --> 00:17:18,400
let's say we were trying to read a file
and maybe

254
00:17:19,600 --> 00:17:22,320
the user didn't specify the correct part

255
00:17:22,800 --> 00:17:27,640
or maybe the if someone deletes the file
from that part.

256
00:17:27,640 --> 00:17:32,640
So then Java will go inside that folder
looking for that file.

257
00:17:33,160 --> 00:17:35,480
It will not be able to find that file.

258
00:17:35,920 --> 00:17:40,640
So in that scenario,
look, Java is supposed to do right?

259
00:17:40,880 --> 00:17:45,840
So if you guys have not provided
any backup code

260
00:17:46,680 --> 00:17:49,920
in the catch block

261
00:17:49,920 --> 00:17:51,560
that follows, you don't mind me thinking

262
00:17:51,560 --> 00:17:54,720
I know some Java.

263
00:17:54,720 --> 00:17:59,640
So when you guys will realize

264
00:17:59,640 --> 00:18:04,200
how much you don't know, then
I will prepare you for your interviews.

265
00:18:04,200 --> 00:18:08,160
You guys will be surprised. So

266
00:18:10,600 --> 00:18:14,440
what happens is that if we are

267
00:18:15,480 --> 00:18:18,640
having that default the behavior

268
00:18:18,640 --> 00:18:21,840
so the piece of code
that is trying to read that file,

269
00:18:22,440 --> 00:18:25,400
all the code below that line,

270
00:18:25,920 --> 00:18:30,120
it will not execute
the application, will terminate

271
00:18:30,120 --> 00:18:35,240
right after that line
when he's trying to get that file.

272
00:18:35,600 --> 00:18:39,240
And it is
it terminates the complete program.

273
00:18:39,240 --> 00:18:43,440
So this is the default behavior
and we don't want this behavior.

274
00:18:43,800 --> 00:18:46,600
So let's say
if we were trying to read a file

275
00:18:46,600 --> 00:18:48,800
and that file is not found, maybe

276
00:18:49,800 --> 00:18:52,480
we should print a message to the user
that,

277
00:18:53,560 --> 00:18:57,000
hey, please
provide the correct path for the file,

278
00:18:57,000 --> 00:19:02,480
or maybe the file is not found,
or maybe our application can try

279
00:19:02,480 --> 00:19:07,480
to create new files, or maybe he can try
to download the file from the internet.

280
00:19:07,480 --> 00:19:13,400
So depending upon your business
requirements your business needs, you guys

281
00:19:14,760 --> 00:19:17,120
might have different backup plans.

282
00:19:17,120 --> 00:19:21,360
If the plan work
plan is not working right.

283
00:19:22,320 --> 00:19:25,160
So we want that behavior
in our applications.

284
00:19:26,640 --> 00:19:27,480
So what do we do?

285
00:19:27,480 --> 00:19:30,240
How do we tell the user that

286
00:19:30,880 --> 00:19:33,600
something went wrong?

287
00:19:33,640 --> 00:19:38,080
We have created so many different classes.

288
00:19:38,280 --> 00:19:42,840
The exception handling and building
exceptions are also part developers.

289
00:19:42,840 --> 00:19:45,880
Yes, but for our testers as well,

290
00:19:46,560 --> 00:19:49,280
because in real life applications

291
00:19:49,280 --> 00:19:53,040
there are so many things that can go wrong
right now.

292
00:19:53,040 --> 00:19:58,560
You guys are executing your code inside
the IDE is intelligent, right?

293
00:19:58,920 --> 00:20:00,360
So anything goes wrong.

294
00:20:00,360 --> 00:20:03,040
You guys can just look at the error,
you can fix it.

295
00:20:03,240 --> 00:20:08,400
But when you isolate your program
from intelligent execute in real life

296
00:20:08,400 --> 00:20:11,800
environments, there are so many things
that can go wrong.

297
00:20:12,320 --> 00:20:15,640
So we should be we should tell our

298
00:20:15,640 --> 00:20:19,080
Java program how to handle those issues.

299
00:20:19,480 --> 00:20:19,800
Okay.

300
00:20:19,800 --> 00:20:22,920
It should know what to do
in a certain scenario

301
00:20:22,920 --> 00:20:26,160
instead of
just completely shutting itself down

302
00:20:26,160 --> 00:20:30,520
and just throwing at us
that no one can understand.

303
00:20:30,520 --> 00:20:31,480
Easy.

304
00:20:31,840 --> 00:20:36,520
So how do we tell that we encountered
an error in Java?

305
00:20:36,520 --> 00:20:42,360
We could here
we have so far all types of errors.

306
00:20:43,920 --> 00:20:47,040
We have

307
00:20:48,760 --> 00:20:51,280
special classes in Java.

308
00:20:51,600 --> 00:20:53,840
So for example, if

309
00:20:55,000 --> 00:20:59,280
a file is not found,
there is a special class in Java file

310
00:20:59,280 --> 00:21:00,520
not found exception.

311
00:21:00,520 --> 00:21:03,360
The name of the class is file
not found exception.

312
00:21:04,040 --> 00:21:06,520
And then we create the object

313
00:21:06,520 --> 00:21:10,520
of their specific class
and we throw it using the throw keyword.

314
00:21:10,920 --> 00:21:13,960
If we are trying to call a method

315
00:21:13,960 --> 00:21:17,760
on null point, that exception on an object

316
00:21:18,000 --> 00:21:21,720
we have null point the exception
separate class for that type of error.

317
00:21:22,040 --> 00:21:25,800
If we are trying to access,

318
00:21:25,800 --> 00:21:27,840
let's say maybe an index

319
00:21:28,840 --> 00:21:32,160
and that index is out of bounds,

320
00:21:32,160 --> 00:21:35,640
we have special class
for index bound errors.

321
00:21:36,120 --> 00:21:40,320
If we are, let's say, trying
to give negative size to the address,

322
00:21:40,800 --> 00:21:43,800
we have negative size

323
00:21:43,800 --> 00:21:44,400
exception.

324
00:21:44,400 --> 00:21:50,160
So all scenarios
they are thought well by Java guys

325
00:21:50,560 --> 00:21:54,240
and they already
have created separate classes

326
00:21:55,200 --> 00:21:59,040
in case those scenarios are encountered.

327
00:21:59,040 --> 00:22:02,800
Why they did so make so that they kind of

328
00:22:02,800 --> 00:22:05,600
have standard error messages.

329
00:22:06,240 --> 00:22:10,640
And by looking at those error messages
so everyone is on the same page.

330
00:22:10,720 --> 00:22:13,880
If you guys are getting an error of file

331
00:22:13,880 --> 00:22:17,720
not found, they use a standard
and everyone knows that.

332
00:22:17,720 --> 00:22:20,800
Okay,
something is not good about that file.

333
00:22:20,800 --> 00:22:25,400
Maybe the box is not correct or the file
is not present on that specific part.

334
00:22:26,520 --> 00:22:29,520
So what they didn't allow

335
00:22:29,520 --> 00:22:33,640
is that everyone
just creating their own error messages.

336
00:22:33,680 --> 00:22:39,120
Let's say maybe I am a developer
and maybe I can just simply print out

337
00:22:39,760 --> 00:22:43,160
something went wrong with the port
and other developer.

338
00:22:43,320 --> 00:22:47,080
He might print out.

339
00:22:47,080 --> 00:22:49,800
It is not good and other developer
he might print out.

340
00:22:49,800 --> 00:22:50,640
File is not wrong.

341
00:22:50,640 --> 00:22:54,520
So instead of everyone having its own
error messages,

342
00:22:54,840 --> 00:22:59,520
Java guys made it a standard
so that everyone is on the same page.

343
00:22:59,640 --> 00:23:05,440
Everyone can quickly know what went wrong.

344
00:23:05,440 --> 00:23:09,240
So when an exception occurs, the system
generates.

345
00:23:09,240 --> 00:23:11,600
By system here we mean the Java.

346
00:23:11,760 --> 00:23:14,640
Okay, the Java runtime environment

347
00:23:15,040 --> 00:23:18,400
I saw system generates an error message.

348
00:23:19,720 --> 00:23:23,880
We can manage this using exception
handler.

349
00:23:23,880 --> 00:23:29,600
Now, they didn't only create the classes
for the errors,

350
00:23:29,600 --> 00:23:32,560
they actually developed
a complete mechanism

351
00:23:33,600 --> 00:23:36,960
to propagate that, add a right.

352
00:23:36,960 --> 00:23:40,200
For example, it can happen that

353
00:23:40,200 --> 00:23:44,120
I have written some piece of code
and then there is another developer

354
00:23:44,120 --> 00:23:49,520
who has written some piece of code
and I am using his code in my code.

355
00:23:50,000 --> 00:23:51,000
Right?

356
00:23:51,480 --> 00:23:56,280
So if the piece of code
that other developer has written,

357
00:23:56,280 --> 00:23:59,880
if that code is throwing error and error,

358
00:24:00,800 --> 00:24:04,520
they have this mechanism
that that error can propagate.

359
00:24:05,200 --> 00:24:06,960
It totally depends.

360
00:24:06,960 --> 00:24:10,120
If that developer wants to handle that
data.

361
00:24:11,080 --> 00:24:13,320
It totally is totally up to him

362
00:24:13,320 --> 00:24:17,280
or he can also propagate that error to me.

363
00:24:17,880 --> 00:24:20,440
And maybe then I can handle their data.

364
00:24:20,440 --> 00:24:22,920
Or maybe I can have the default behavior.

365
00:24:23,040 --> 00:24:24,960
And what is the default behavior?

366
00:24:24,960 --> 00:24:26,640
Completely terminated.

367
00:24:26,640 --> 00:24:28,760
I can terminate the application.

368
00:24:28,760 --> 00:24:32,920
So they designed a complete mechanism to

369
00:24:33,600 --> 00:24:36,760
generate these errors. To

370
00:24:38,080 --> 00:24:39,640
handle these errors.

371
00:24:39,640 --> 00:24:42,400
Standard error message is standard

372
00:24:42,400 --> 00:24:46,000
class is a complete mechanism,
complete ecosystem.

373
00:24:46,800 --> 00:24:50,800
So there is this other definition of

374
00:24:52,800 --> 00:24:54,360
this exception handling.

375
00:24:54,360 --> 00:24:58,000
It is the process of converting system

376
00:24:58,000 --> 00:25:02,360
error messages into user friendly error
messages.

377
00:25:02,360 --> 00:25:04,520
Now, why? Why we want to do that?

378
00:25:04,560 --> 00:25:08,600
That's why we want to convert Suspender
to system error messages

379
00:25:08,600 --> 00:25:10,760
into user friendly friendly error
messages.

380
00:25:10,760 --> 00:25:18,120
Well, how can be helpful?

381
00:25:18,120 --> 00:26:25,280
So let's say for example, for the next

382
00:26:26,160 --> 00:26:29,880
to the steps of solution to the user.

383
00:26:29,880 --> 00:26:31,960
Yes, we can also do that.

384
00:26:32,280 --> 00:26:34,800
And this is the

385
00:26:34,800 --> 00:26:36,080
best approach.

386
00:26:36,080 --> 00:26:41,720
Instead of just showing the error, please
build your framework for your develop

387
00:26:41,760 --> 00:26:45,240
your code in such a way
that you guys don't only show the problem,

388
00:26:45,680 --> 00:26:47,560
but you also tell the user

389
00:26:48,600 --> 00:26:50,800
how to fix their data.

390
00:26:50,800 --> 00:26:53,160
Okay, so it's comprehensive.

391
00:26:53,400 --> 00:26:56,600
So let's say, for example, to understand
and follow the issue.

392
00:26:57,120 --> 00:26:59,680
If I am getting an issue of something

393
00:26:59,680 --> 00:27:05,440
like this right,
if I get this kind of issue,

394
00:27:05,640 --> 00:27:08,480
if you guys print this, add it

395
00:27:09,280 --> 00:27:12,240
to a normal, normal user,

396
00:27:13,280 --> 00:27:16,240
like, for example, when you guys

397
00:27:17,760 --> 00:27:20,160
didn't know anything about Java,

398
00:27:20,160 --> 00:27:22,680
and if you guys see

399
00:27:23,400 --> 00:27:25,240
an error message like this,

400
00:27:25,240 --> 00:27:29,120
it will make
it would make no sense, right.

401
00:27:29,280 --> 00:27:31,680
To the normal users
who don't know programing.

402
00:27:32,200 --> 00:27:34,400
They don't know much about the IP.

403
00:27:34,400 --> 00:27:37,920
And if we are showing these
that are messages to those users,

404
00:27:38,880 --> 00:27:40,440
it will not make sense.

405
00:27:40,440 --> 00:27:43,160
It will not make any sense to them right.

406
00:27:43,160 --> 00:27:47,400
So we don't want to do that
insert of these error messages

407
00:27:47,600 --> 00:27:50,200
which Java is generating by default.

408
00:27:50,880 --> 00:27:53,520
We want to convert it to something
simpler.

409
00:27:53,520 --> 00:27:54,360
Right?

410
00:27:54,360 --> 00:27:58,840
So when let's say, for example,

411
00:27:58,840 --> 00:28:01,920
you guys are trying
to connect to the Internet

412
00:28:02,960 --> 00:28:04,080
using Chrome or

413
00:28:04,080 --> 00:28:08,520
any other browser,
if there is no Internet,

414
00:28:08,520 --> 00:28:11,600
then if if Google Chrome

415
00:28:11,600 --> 00:28:14,120
is trying to show
something like this to the end users,

416
00:28:14,800 --> 00:28:18,960
they will not be able to easily
figure out what is going wrong, Right?

417
00:28:18,960 --> 00:28:19,800
What is going wrong.

418
00:28:19,800 --> 00:28:24,680
So that's why we want to convert
these complex error messages

419
00:28:24,760 --> 00:28:28,120
to something simpler
that everyone can understand.

420
00:28:29,400 --> 00:28:36,040
Yes. Instead, Chrome lets
you play a dinosaur game, so this is one

421
00:28:36,120 --> 00:28:40,320
main goal of exception
handling other than avoiding

422
00:28:40,320 --> 00:28:44,880
that abrupt termination of program.

423
00:28:44,880 --> 00:28:47,920
And the second thing is that providing

424
00:28:48,120 --> 00:28:51,840
alternate solution.

425
00:28:51,840 --> 00:28:54,440
So let's say alternate
is the ultimate solution.

426
00:28:54,440 --> 00:28:58,560
In the case of Google Chrome,
if it is that can dinosaur game, right?

427
00:28:58,880 --> 00:29:02,040
If there is no internet,
you can play that game.

428
00:29:02,760 --> 00:29:06,360
So it is the alternate solution
that they came up with.

429
00:29:07,080 --> 00:29:10,360
So I hope you guys will be doing the same.

430
00:29:10,360 --> 00:29:10,680
Right.

431
00:29:10,680 --> 00:29:15,760
Something funny or that don't like, for
example, the end users there don't just

432
00:29:17,160 --> 00:29:20,840
uninstall
your application or just break it.

433
00:29:20,840 --> 00:29:23,080
They are laptops or something like that.

434
00:29:23,080 --> 00:29:28,800
They can have some kind of enjoyment
or alternate or if it is a server side

435
00:29:28,800 --> 00:29:31,520
application may be

436
00:29:32,600 --> 00:29:35,640
you guys can develop Terminator Solutions.

437
00:29:35,640 --> 00:29:40,320
For example,
let's see some of your test cases.

438
00:29:40,440 --> 00:29:42,360
They are failing, right?

439
00:29:42,360 --> 00:29:46,320
So what you guys can do,
maybe you can generate an email

440
00:29:47,520 --> 00:29:50,760
and put all the information
about their test case

441
00:29:50,760 --> 00:29:54,120
inside that email
and I can send it to yourself.

442
00:29:54,120 --> 00:29:54,720
Right?

443
00:29:54,720 --> 00:29:57,000
Because you guys are commission engineers.

444
00:29:57,000 --> 00:29:59,600
You guys will just

445
00:29:59,680 --> 00:30:01,800
start your testing framework

446
00:30:02,200 --> 00:30:05,680
and you guys will not be looking at it
all the time.

447
00:30:05,680 --> 00:30:06,960
When it is executing.

448
00:30:06,960 --> 00:30:09,000
It might take off days, weeks.

449
00:30:09,600 --> 00:30:13,440
So instead of what you guys will
do, you guys maybe will build

450
00:30:14,440 --> 00:30:17,040
those frameworks.

451
00:30:17,040 --> 00:30:19,160
Like for example,
if everything is going well,

452
00:30:20,360 --> 00:30:23,200
it's find test
cases should keep on executing

453
00:30:23,640 --> 00:30:28,920
if something goes wrong,
maybe you would generate an email

454
00:30:28,920 --> 00:30:32,120
and send it to yourself
so that you know what went wrong

455
00:30:32,640 --> 00:30:37,200
and what a lot of companies there do.

456
00:30:37,200 --> 00:30:42,480
Let's say, for example,
your application is executing on a server.

457
00:30:43,320 --> 00:30:45,800
Something goes wrong with that server.

458
00:30:45,800 --> 00:30:50,960
So what they do, they generate emails
and send them to the I.T.

459
00:30:51,000 --> 00:30:54,840
guys, the guys who are responsible
for taking care of those servers.

460
00:30:55,440 --> 00:30:58,680
Let's say that server runs out of space

461
00:30:59,040 --> 00:31:02,520
or it has internet issues,

462
00:31:02,800 --> 00:31:07,600
or maybe some files are not found on,
maybe some framework is not working.

463
00:31:07,800 --> 00:31:12,680
So they generate emails
and then they send that to corresponding

464
00:31:14,120 --> 00:31:16,840
employees
so that they can fix those issues.

465
00:31:17,080 --> 00:31:19,080
So this is also a backup plan.

466
00:31:19,080 --> 00:31:21,520
Most notably, you guys will be doing
something like this.

467
00:31:22,760 --> 00:31:23,960
How are you guys doing?

468
00:31:23,960 --> 00:31:26,880
How we can do that?

469
00:31:26,880 --> 00:31:29,880
So, Alexey, what we can do

470
00:31:34,160 --> 00:31:36,720
so you guys can write it,

471
00:31:36,760 --> 00:31:40,880
write catch block like this for the back

472
00:31:42,760 --> 00:31:45,360
can be problematic.

473
00:31:45,360 --> 00:31:48,840
And inside of this, Kurt

474
00:31:52,440 --> 00:31:55,040
So I am writing the name of the class

475
00:31:55,760 --> 00:32:00,160
whose error
I am expecting that this code will throw.

476
00:32:00,720 --> 00:32:04,040
So I write the name of the class

477
00:32:05,240 --> 00:32:07,320
whose added I am expecting.

478
00:32:07,680 --> 00:32:11,280
So I know that
what kind of issue this code for control.

479
00:32:11,280 --> 00:32:14,360
So I write the name of that sender
error message

480
00:32:14,880 --> 00:32:17,680
and then the variable name
which can be anything.

481
00:32:17,680 --> 00:32:21,840
And in here, Alexa, in here
you will write a piece of code

482
00:32:21,840 --> 00:32:30,360
that will generate that
image, sending an email to

483
00:32:34,160 --> 00:32:38,280
Alexa is both.

484
00:32:38,280 --> 00:32:42,120
He is not working hard.

485
00:32:42,520 --> 00:32:56,600
Okay, Something like that.

486
00:32:56,600 --> 00:33:01,320
So inside this cache block,
you guys can write any piece of code

487
00:33:01,560 --> 00:33:06,000
and when this catch block is executed,
it is only executed

488
00:33:06,360 --> 00:33:08,760
when something goes wrong

489
00:33:10,080 --> 00:33:11,880
inside this try block

490
00:33:11,880 --> 00:33:15,480
If there
if everything is working perfectly fine

491
00:33:15,480 --> 00:33:19,920
and you guys are not getting any issues
or errors in here,

492
00:33:20,920 --> 00:33:24,920
then this
catch block will not be executed, okay?

493
00:33:24,960 --> 00:33:30,440
It is only executed
when something goes wrong inside

494
00:33:30,440 --> 00:33:35,960
the try block okay.

495
00:33:35,960 --> 00:33:41,160
So, guys, is there any word or any term
which is not clear from this slide?

496
00:33:42,120 --> 00:33:44,080
This is clear

497
00:33:44,680 --> 00:33:46,680
what is execution of program?

498
00:33:46,680 --> 00:33:49,280
What is normal flow,

499
00:33:49,280 --> 00:33:51,520
What are objects, system

500
00:33:51,520 --> 00:33:56,920
generated messages,
what is easy can be anything.

501
00:33:56,920 --> 00:33:59,080
It's just the name of the variable. Right?

502
00:33:59,080 --> 00:34:01,680
So what happens is that when we declare a

503
00:34:03,480 --> 00:34:03,840
when we

504
00:34:03,840 --> 00:34:06,960
declare a variable,
we can give any name to that variable.

505
00:34:06,960 --> 00:34:09,960
So in here
I am declaring a variable of this class

506
00:34:10,720 --> 00:34:14,080
so that whenever the exception, whenever

507
00:34:14,080 --> 00:34:16,520
the object of this class is thrown,

508
00:34:17,840 --> 00:34:20,800
Java can store that object
inside this variable.

509
00:34:20,880 --> 00:34:24,000
Right when the null pointer
exception occurs, that

510
00:34:24,000 --> 00:34:26,040
class name you got from the console,

511
00:34:27,200 --> 00:34:29,040
the pointer exception.

512
00:34:29,040 --> 00:34:34,960
This one is the same
that I specified in here.

513
00:34:34,960 --> 00:34:39,400
So for every type of error
there is a special class

514
00:34:40,080 --> 00:34:44,680
and if you are expecting your code
to throw that specific error,

515
00:34:44,920 --> 00:34:50,480
you specify that class name
and the variable name.

516
00:34:50,480 --> 00:34:54,880
So later on I will show you that
we can have multiple catch blocks.

517
00:34:55,440 --> 00:35:03,160
I can have exception,

518
00:35:03,160 --> 00:35:05,280
I can have

519
00:35:09,640 --> 00:35:12,400
index out of bound exception.

520
00:35:12,400 --> 00:35:14,000
So if you guys are not sure

521
00:35:14,960 --> 00:35:17,760
that what kind of error that your

522
00:35:18,360 --> 00:35:23,960
your code can throw, you can specify
as many catch blocks as you want.

523
00:35:24,280 --> 00:35:28,720
If your code close and null pointer
exception this block is executed here.

524
00:35:29,000 --> 00:35:33,160
If it throws out of index out of bounds,
this code is executed.

525
00:35:33,160 --> 00:35:37,440
If it throws a general exception,
this code is executed.

526
00:35:38,240 --> 00:35:40,080
This is like overloaded catch.

527
00:35:40,080 --> 00:35:41,600
Yep. Yep.

528
00:35:41,600 --> 00:35:44,880
So only thing is different arguments.

529
00:35:45,000 --> 00:35:51,600
This kind of overloading the moment is
omni you've and this mistake variable now.

530
00:35:52,120 --> 00:35:57,280
But we should have at least one try know
at least one catch.

531
00:35:57,600 --> 00:35:59,200
We will try

532
00:36:00,520 --> 00:36:01,200
to try it.

533
00:36:01,200 --> 00:36:03,600
They are optional
if you want you can have.

534
00:36:03,600 --> 00:36:06,200
If not you, you can avoid

535
00:36:06,200 --> 00:36:09,760
works like if false. Yes.

536
00:36:09,760 --> 00:36:12,240
Can I play it safe and right? If you

537
00:36:13,720 --> 00:36:15,760
can I play it safe

538
00:36:16,960 --> 00:36:18,000
and right?

539
00:36:18,000 --> 00:36:20,440
If you like.

540
00:36:20,440 --> 00:36:23,240
Can you can you rephrase

541
00:36:23,240 --> 00:36:25,200
some by safe? What do you mean place?

542
00:36:25,200 --> 00:36:30,000
If for insurance

543
00:36:35,680 --> 00:36:37,320
like this?

544
00:36:37,320 --> 00:36:40,920
And sometimes I feel like I'm
talking to my girlfriend.

545
00:36:40,920 --> 00:36:41,760
Your words.

546
00:36:41,760 --> 00:36:44,000
They don't make any sense at all.

547
00:36:45,040 --> 00:36:47,120
Playing insurance is safe.

548
00:36:47,120 --> 00:36:48,120
What do you mean?

549
00:36:48,120 --> 00:36:56,520
And if it's

550
00:36:58,560 --> 00:37:01,920
from where this insurance comes

551
00:37:03,160 --> 00:37:08,280
in, I think it means just in case.

552
00:37:08,280 --> 00:37:11,720
Putting many options,

553
00:37:11,720 --> 00:37:13,280
insurance Sparks House.

554
00:37:13,280 --> 00:37:14,040
Yes, I agree.

555
00:37:14,040 --> 00:37:18,840
We can put as many good blocks as we you
you can write in your native language.

556
00:37:19,240 --> 00:37:19,720
Okay.

557
00:37:19,720 --> 00:37:24,360
If you can write in your native language,
someone will translate it to me.

558
00:37:24,720 --> 00:37:27,200
Yes, fine, fine. I'm just kidding.

559
00:37:27,200 --> 00:37:29,200
Don't take it serious.

560
00:37:29,200 --> 00:37:31,200
That is, don't take anything from me.

561
00:37:31,200 --> 00:37:31,800
Hideous.

562
00:37:31,800 --> 00:37:32,520
I don't know why.

563
00:37:32,520 --> 00:37:35,680
And I took it
serious about that wrapper to zero nine.

564
00:37:36,000 --> 00:37:37,520
I am never serious.

565
00:37:37,520 --> 00:37:39,240
Please don't take your policy.

566
00:37:39,240 --> 00:37:41,600
It has any of my words.

567
00:37:41,600 --> 00:37:43,520
Easy peasy is including Java.

568
00:37:43,520 --> 00:37:57,680
Please
don't take this Java as a serious. But

569
00:37:58,840 --> 00:38:02,000
I never meant to hurt anyone.

570
00:38:02,000 --> 00:38:02,600
Just.

571
00:38:02,960 --> 00:38:05,320
Just so that I can put some smile on

572
00:38:05,320 --> 00:38:09,320
your face is best All yet.

573
00:38:13,080 --> 00:38:17,680
So it's not easy to hurt us now

574
00:38:18,000 --> 00:38:21,320
because you guys are already so

575
00:38:22,440 --> 00:38:23,160
in that movie.

576
00:38:23,160 --> 00:38:26,600
He says, I warn you,

577
00:38:26,600 --> 00:38:30,960
I, I break or no word
but that that special movie

578
00:38:30,960 --> 00:38:33,720
and that the other guy said
I am already broken.

579
00:38:34,320 --> 00:38:39,920
Life is hard on this is

580
00:38:41,480 --> 00:38:43,640
so I hope this slide is clear.

581
00:38:43,640 --> 00:38:47,880
So every word
and every sentence on this slide,

582
00:38:48,840 --> 00:38:52,440
it should be super, super clear to you
because after three months

583
00:38:52,440 --> 00:38:56,520
when you guys will be revising
your concepts,

584
00:38:56,520 --> 00:39:00,240
you will not have time
to watch those fireworks videos.

585
00:39:00,800 --> 00:39:05,840
You will be referring to these slides
to revise these concepts.

586
00:39:05,840 --> 00:39:09,720
And I want to make sure that everything is
clear that is written in here.

587
00:39:10,080 --> 00:39:14,000
So if something is not clear, you guys can
always ask me in the next class.

588
00:39:14,480 --> 00:39:18,600
So for example, Nabeel told me, Nabeel,
can you tell me this slide?

589
00:39:18,600 --> 00:39:19,720
Oh, good. This one. Right.

590
00:39:20,880 --> 00:39:21,560
Glasses on.

591
00:39:21,560 --> 00:39:23,840
So it should be

592
00:39:25,560 --> 00:39:27,280
classroom

593
00:39:28,080 --> 00:39:29,320
map in here.

594
00:39:29,320 --> 00:39:34,640
All right.

595
00:39:34,640 --> 00:39:35,360
Okay.

596
00:39:35,520 --> 00:39:41,520
I think it looks good now. Yep.

597
00:39:43,440 --> 00:39:45,600
After three months

598
00:39:46,160 --> 00:39:47,680
are the year

599
00:39:47,680 --> 00:39:53,480
your third month, right?

600
00:39:53,480 --> 00:39:55,520
Or 3.5

601
00:39:59,440 --> 00:40:00,120
third,

602
00:40:00,800 --> 00:40:02,840
the fourth month, actually.

603
00:40:03,120 --> 00:40:07,520
So you guys will not even realize
how these six six months fast.

604
00:40:07,880 --> 00:40:11,680
It will be just like a blink of an eye
and you guys will be sitting

605
00:40:11,680 --> 00:40:13,600
in your interviews

606
00:40:21,240 --> 00:40:22,840
with the face.

607
00:40:22,840 --> 00:40:23,400
No, no, no.

608
00:40:23,400 --> 00:40:25,600
You guys will not be sitting
with blank piece.

609
00:40:26,000 --> 00:40:28,120
I can tell you when when we prepare,

610
00:40:28,120 --> 00:40:30,480
we will be preparing you
for your interviews.

611
00:40:30,480 --> 00:40:33,120
So our students, believe me, if you

612
00:40:34,040 --> 00:40:36,600
like, for example,
the knowledge that you have for Java,

613
00:40:37,200 --> 00:40:41,120
you can ask these questions to a person
who is working in the industry

614
00:40:41,120 --> 00:40:45,080
for five years, and believe me,
he will not be able to answer those.

615
00:40:46,160 --> 00:40:47,960
You give them the their to do it online.

616
00:40:47,960 --> 00:40:52,920
They will not be able to solve it.

617
00:40:52,920 --> 00:40:57,360
So don't think that you guys know nothing
or you are lagging behind something

618
00:40:57,360 --> 00:41:02,640
you guys are you guys will be much more
prepared than a person

619
00:41:02,640 --> 00:41:05,840
who is actually working in the industry
because what happens is that guys,

620
00:41:06,760 --> 00:41:10,480
if a company

621
00:41:10,640 --> 00:41:13,640
gets more business or more profit.

622
00:41:14,280 --> 00:41:19,200
So for example, if you are just opening
and closing a file on a daily basis

623
00:41:19,320 --> 00:41:24,960
and that is profiting the company, then
they will never bother you to teach you

624
00:41:24,960 --> 00:41:29,000
something new or they will never ask you
to learn something new.

625
00:41:29,000 --> 00:41:31,800
If that is the only thing
that is profiting that company,

626
00:41:32,040 --> 00:41:35,640
they will always want to do
the exact same thing again and again

627
00:41:35,640 --> 00:41:39,200
and again for for for tolerance
go obvious.

628
00:41:39,960 --> 00:41:42,680
So what happens is that in the industry

629
00:41:42,680 --> 00:41:46,600
you will be working on
a very, very specific part,

630
00:41:47,600 --> 00:41:49,720
on a very specific problem.

631
00:41:49,720 --> 00:41:55,120
And that's all you will be knowing
about that thing.

632
00:41:55,120 --> 00:42:00,480
Only you will you will not be knowing
all that you are learning in here.

633
00:42:00,640 --> 00:42:01,000
Okay?

634
00:42:01,000 --> 00:42:05,400
You some of the persons they don't even
know about the complete picture,

635
00:42:05,760 --> 00:42:09,880
how the best cases are executed
on servers, how servers are set up,

636
00:42:09,880 --> 00:42:13,360
how much to open and close the file simply

637
00:42:13,640 --> 00:42:19,000
under keeper and 2128 per annum. It's

638
00:42:21,000 --> 00:42:23,040
so they don't bother much about learning.

639
00:42:23,040 --> 00:42:25,800
Believe me.

640
00:42:25,800 --> 00:42:28,560
So some of our students,
they are still doing manual testing.

641
00:42:29,120 --> 00:42:33,400
They have not written a single piece
of Java code or anything like that.

642
00:42:33,560 --> 00:42:35,280
Still doing manual testing there.

643
00:42:35,280 --> 00:42:39,400
So although they are hired as automation
engineers,

644
00:42:39,400 --> 00:42:42,560
they are still doing
the manual, just checking the manual.

645
00:42:42,600 --> 00:42:46,320
If those textbooks are working
fine or not creating Excel files.

646
00:42:46,440 --> 00:42:49,320
So something like that,
you guys will be surprised to

647
00:42:50,520 --> 00:42:52,720
know that you don't mind their job.

648
00:42:52,720 --> 00:42:56,040
Believe me, you guys will like

649
00:42:56,280 --> 00:43:00,080
when you will be repeating the same thing
again and again.

650
00:43:00,080 --> 00:43:02,720
Believe me, you guys will get bored

651
00:43:03,160 --> 00:43:07,720
so quickly and you will
you will say to your managers,

652
00:43:07,920 --> 00:43:11,400
Please give me something new.

653
00:43:11,400 --> 00:43:19,880
It is so boring. Yes.

654
00:43:19,880 --> 00:43:22,200
You guys don't have to know
all three topics.

655
00:43:22,400 --> 00:43:24,840
I like worrying.

656
00:43:24,840 --> 00:43:30,000
Yes, I yes, obviously it depends on
what kind of person you are.

657
00:43:30,000 --> 00:43:34,600
Some of you might like it very much,
but I cannot do that

658
00:43:36,040 --> 00:43:39,240
if they are asking me something
to do again and again.

659
00:43:39,240 --> 00:43:43,680
Believe me, in around one week
or so I will write a software application

660
00:43:43,680 --> 00:43:44,600
for that.

661
00:43:44,600 --> 00:43:46,920
To automate it, to do it automatically.

662
00:43:47,320 --> 00:43:51,560
I can I can never do manual work again
and again, more more than one week.

663
00:43:52,000 --> 00:43:53,880
But even I think one week is more

664
00:43:55,920 --> 00:43:56,600
like,

665
00:43:59,400 --> 00:44:02,960
did I tell you I watched the video,

666
00:44:03,000 --> 00:44:06,120
I watched movies and played
video games for three months.

667
00:44:07,680 --> 00:44:11,520
So in my previous company
they gave me a task, a manual task,

668
00:44:11,520 --> 00:44:15,680
to correct the records in database

669
00:44:15,680 --> 00:44:19,720
application.

670
00:44:19,720 --> 00:44:25,080
I developed the software for that
in 15 days and I enjoyed it three months.

671
00:44:25,920 --> 00:44:27,760
And believe me, I offered that solution.

672
00:44:27,760 --> 00:44:30,600
It's not like that.
I didn't want to do that for the company.

673
00:44:30,720 --> 00:44:34,480
I offered that solution to the manager
and manager was like, Ask

674
00:44:34,920 --> 00:44:39,080
what if we introduce more issues by by,

675
00:44:40,120 --> 00:44:43,840
by taking your software
and letting it fix all the issues?

676
00:44:43,880 --> 00:44:46,120
Okay. I said,
okay, it's totally up to you.

677
00:44:46,120 --> 00:44:50,520
Like, for example, if you want me to do
is using a calculator manually one by one

678
00:44:50,520 --> 00:44:51,360
all the calculations.

679
00:44:51,360 --> 00:44:54,800
I can also do that.

680
00:44:54,800 --> 00:44:58,240
You could do that and have another part
time job or another source of income.

681
00:44:58,280 --> 00:45:00,880
All No, I learned a lot
in those three months as well.

682
00:45:00,880 --> 00:45:04,760
All those lambda expressions
and all I took like of courses from

683
00:45:05,040 --> 00:45:06,320
Lynda dot com and other

684
00:45:07,440 --> 00:45:10,760
other websites.

685
00:45:10,760 --> 00:45:16,560
So our company was following this culture
of make a mixture of development

686
00:45:16,560 --> 00:45:20,600
and best of Facebook they
they also all the same

687
00:45:21,200 --> 00:45:23,640
all the developers,
they are also the testers.

688
00:45:24,360 --> 00:45:26,720
So sometimes I am writing code,
sometimes I'm

689
00:45:26,720 --> 00:45:30,000
testing the code, but

690
00:45:30,720 --> 00:45:33,200
I never offered their solution again.

691
00:45:34,880 --> 00:45:39,320
So an exception can occur
for many different reasons.

692
00:45:39,320 --> 00:45:39,800
Right?

693
00:45:39,920 --> 00:45:42,000
There are many things that can go wrong.

694
00:45:43,040 --> 00:45:46,440
Maybe you guys have developed
an application

695
00:45:46,440 --> 00:45:49,440
which takes the input from the user and

696
00:45:51,560 --> 00:45:53,600
so Facebook does not need testers.

697
00:45:53,880 --> 00:45:56,400
I mean, if you are a good tester,
I don't know.

698
00:45:56,400 --> 00:45:58,480
But they have this mixed culture.

699
00:45:58,480 --> 00:46:03,680
They don't have separate teams for testers
and separate teams for developers.

700
00:46:04,200 --> 00:46:07,760
It's the same team
who who does the development

701
00:46:07,760 --> 00:46:12,920
and the testing work.

702
00:46:12,920 --> 00:46:16,640
So for example,
you guys have developed an application

703
00:46:17,720 --> 00:46:20,320
which takes two numbers from the user

704
00:46:22,040 --> 00:46:25,320
and it tries to divide those numbers.

705
00:46:26,320 --> 00:46:28,680
So what? What can go wrong?

706
00:46:28,680 --> 00:46:33,200
Maybe the user can is zero
for the denominator, right?

707
00:46:33,640 --> 00:46:35,880
In that case,

708
00:46:36,120 --> 00:46:37,960
the division is

709
00:46:37,960 --> 00:46:40,920
something
that is not defined for integers.

710
00:46:41,160 --> 00:46:44,320
Okay, So let's say for example, the

711
00:46:45,000 --> 00:46:47,640
you guys know that if we try to divide

712
00:46:47,640 --> 00:46:53,280
something by zero, what do we get guys?

713
00:46:54,160 --> 00:47:04,080
If we try to divide something by zero,
we get the infinity, right?

714
00:47:05,360 --> 00:47:24,840
So my math guys, they call it infinity.

715
00:47:24,840 --> 00:47:28,320
So if we say number one divided by

716
00:47:29,520 --> 00:47:31,440
number two, so can you guys

717
00:47:31,440 --> 00:47:38,440
tell me if I execute this program,
will this project

718
00:47:38,880 --> 00:47:44,680
be able to handle this issue or do still,
I will be getting that response,

719
00:47:44,680 --> 00:47:48,120
that default response
in which the application will terminate.

720
00:47:48,680 --> 00:47:52,880
So, for example,
if I have some lines of code in here

721
00:47:58,200 --> 00:48:01,080
and some lines of code

722
00:48:01,080 --> 00:48:03,960
in here, will I see this line to

723
00:48:04,040 --> 00:48:18,840
when I execute this program?

724
00:48:18,840 --> 00:48:25,240
No, I will not be able to see it. Why?

725
00:48:25,240 --> 00:48:27,560
I will not be able to see it.

726
00:48:27,560 --> 00:48:29,800
What kind of error this piece of code

727
00:48:29,800 --> 00:48:34,200
will throw guys?

728
00:48:34,200 --> 00:48:36,440
It will throw

729
00:48:36,440 --> 00:48:39,920
it will throw out
automatic exception, right?

730
00:48:40,040 --> 00:48:41,680
Divided by zero.

731
00:48:41,680 --> 00:48:42,800
What kind of error?

732
00:48:42,800 --> 00:48:45,400
And I have written inside this
catch block.

733
00:48:46,080 --> 00:48:50,000
I have written null pointer exception.

734
00:48:50,000 --> 00:48:57,080
So this catch block,
it can only get the null pointer

735
00:48:57,080 --> 00:49:03,800
exceptions if so, this will not work.

736
00:49:05,400 --> 00:49:07,440
I only see line one.

737
00:49:07,600 --> 00:49:12,600
Then I get to this
an automatic exception divided by zero.

738
00:49:13,080 --> 00:49:16,240
So I must write another catch block

739
00:49:17,000 --> 00:49:20,040
that should also

740
00:49:20,040 --> 00:49:21,680
take these arithmetic

741
00:49:21,680 --> 00:49:37,880
exceptions.

742
00:49:37,880 --> 00:49:42,360
So now I have a proper catch block

743
00:49:43,160 --> 00:49:46,640
which can handle this issue.

744
00:49:47,120 --> 00:49:56,000
So now if I execute this program,
now I see line one.

745
00:49:56,000 --> 00:49:58,560
So no issues. I still see line one then.

746
00:49:58,960 --> 00:50:03,240
So then Java, execute this line,
then this line.

747
00:50:03,680 --> 00:50:08,120
And the moment
Java tries to execute this line.

748
00:50:08,160 --> 00:50:11,640
But if we use exception,
it is universal. Yes.

749
00:50:11,640 --> 00:50:12,760
Why do the universal?

750
00:50:12,760 --> 00:50:15,120
Because the exception is the parent class

751
00:50:15,880 --> 00:50:21,400
of all the issues
that can occur at runtime.

752
00:50:21,400 --> 00:50:25,920
So you guys remember from
polymorphism and inheritance

753
00:50:27,120 --> 00:50:30,600
the variable of parent

754
00:50:31,920 --> 00:50:35,760
can hold the objects of all
any of the child classes, right?

755
00:50:36,120 --> 00:50:39,360
So we can store the object
of any of the child classes

756
00:50:39,720 --> 00:50:42,240
inside a variable
which is off type parent.

757
00:50:42,480 --> 00:50:43,280
Right?

758
00:50:43,280 --> 00:50:47,760
So their slight exception,
if we put the exception,

759
00:50:48,920 --> 00:50:53,400
it will be able to handle any
kind of issues, but then you will not know

760
00:50:53,760 --> 00:50:57,680
what went wrong in your code
if there's something to genetic right,

761
00:50:59,080 --> 00:51:02,360
So you will not be able to know
if, let's say

762
00:51:04,000 --> 00:51:06,040
there was a no pointer exception

763
00:51:06,040 --> 00:51:08,560
or there was another automatic exception.

764
00:51:09,080 --> 00:51:11,080
So that's why we want to be specific.

765
00:51:13,000 --> 00:51:15,480
So I see we call divided by zero

766
00:51:15,480 --> 00:51:18,480
and then I see line number two.

767
00:51:18,600 --> 00:51:21,440
All right. So this operation
is not defined, but what if

768
00:51:25,600 --> 00:51:27,360
I tried double numbers?

769
00:51:27,360 --> 00:51:29,640
How come? Sending email to print.

770
00:51:29,640 --> 00:51:32,280
Alexi, Boss, print out where

771
00:51:34,560 --> 00:51:35,880
it will only be printed

772
00:51:35,880 --> 00:51:39,120
when we encounter the null pointer
exception.

773
00:51:40,680 --> 00:51:42,200
Is it important for speed?

774
00:51:42,200 --> 00:51:44,400
No, it is. Didn't print out.

775
00:51:44,400 --> 00:51:45,160
Okay. Why?

776
00:51:45,160 --> 00:51:48,480
Because we didn't face
this issue, this null pointer issue.

777
00:51:48,840 --> 00:51:57,080
If I if I now execute this program.

778
00:51:57,080 --> 00:52:02,440
So now I get the infinity answer
because for doubles it is defined.

779
00:52:02,440 --> 00:52:04,400
For doubles, it is defined.

780
00:52:04,400 --> 00:52:08,640
So when it tries to execute this,
it gets infinity.

781
00:52:08,920 --> 00:52:14,360
And then and other issue occurs,
which is null pointer exception.

782
00:52:14,360 --> 00:52:17,280
So this line of code was executed
successfully.

783
00:52:17,640 --> 00:52:19,920
We got the infinity as the answer.

784
00:52:20,360 --> 00:52:23,960
Then when Java tried to execute this line,

785
00:52:24,720 --> 00:52:27,960
it encountered null pointer exception

786
00:52:27,960 --> 00:52:31,520
and then this line was executed.

787
00:52:31,560 --> 00:52:36,080
This time Java ignored
this catch BLOCK okay.

788
00:52:36,800 --> 00:52:38,640
And we see the line number two.

789
00:52:38,640 --> 00:52:42,600
So yes, we can have multiple catch blocks,

790
00:52:43,200 --> 00:52:45,760
but which bet, which

791
00:52:45,760 --> 00:52:48,120
catch block execute depends

792
00:52:48,600 --> 00:52:53,080
which kind of order
we are encountering. And

793
00:52:54,080 --> 00:52:55,440
if we encounter that

794
00:52:55,440 --> 00:52:59,720
specific type of error
and we have a cache block

795
00:52:59,720 --> 00:53:04,080
for that back at block is executed
and the rest of the code

796
00:53:05,440 --> 00:53:07,040
execution normally.

797
00:53:07,040 --> 00:53:12,600
So it's like the effects conditions,
which is specific condition, Max, only

798
00:53:12,600 --> 00:53:18,080
that part is executed and the rest of the
if blocks, they are ignored.

799
00:53:18,480 --> 00:53:22,800
Can you please repeat what changes
you did to get infinity in control?

800
00:53:22,800 --> 00:53:25,520
Oh, I can't do that. Types.

801
00:53:25,520 --> 00:53:30,160
So remember guys,
all the operations they are defined on

802
00:53:30,360 --> 00:53:33,240
that are types of data types.

803
00:53:34,680 --> 00:53:36,880
So for example, what is meant by

804
00:53:37,880 --> 00:53:40,040
plus it is defined

805
00:53:41,160 --> 00:53:44,960
in size to be that type
and what is meant by plus

806
00:53:45,800 --> 00:53:50,520
in case of the strings is defined on
in this string class.

807
00:53:50,640 --> 00:53:51,760
So is it better

808
00:53:52,800 --> 00:53:53,360
to use

809
00:53:53,360 --> 00:53:56,040
a unique try catch block
for every issue? Yes.

810
00:53:56,400 --> 00:53:58,080
So this is something like that.

811
00:53:58,080 --> 00:54:00,520
And you are having a fever.

812
00:54:00,520 --> 00:54:02,920
You go to doctor and doctor

813
00:54:03,640 --> 00:54:08,040
gives you antibiotic,
you have maybe headache.

814
00:54:08,200 --> 00:54:13,040
You again go to doctor again antibody,
you have something wrong in your stomach,

815
00:54:13,040 --> 00:54:13,880
you go to doctor.

816
00:54:13,880 --> 00:54:17,080
Are you an antibiotic
having a genetic block?

817
00:54:17,600 --> 00:54:19,360
So it is something like that.

818
00:54:19,360 --> 00:54:21,720
You should only do so.

819
00:54:21,720 --> 00:54:25,680
For example, if something is not good,
we deal with your stomach.

820
00:54:25,920 --> 00:54:30,880
You should go to the medicine
for that specific issue right?

821
00:54:30,880 --> 00:54:33,120
You should not always get something
generic

822
00:54:39,360 --> 00:54:42,240
normal practice back home
or antibiotics for everything.

823
00:54:42,720 --> 00:54:43,240
Yeah,

824
00:54:44,200 --> 00:54:47,760
but I don't go to doctor
because my wife is a doctor.

825
00:54:47,760 --> 00:54:49,520
Oh, my God.

826
00:54:49,520 --> 00:54:54,560
Oh, my God.

827
00:54:54,560 --> 00:54:55,600
And that is it.

828
00:54:55,600 --> 00:54:58,240
Good back to have your wife as a doctor?

829
00:54:58,680 --> 00:55:01,920
I heard it's not good to have your
wife as doctor.

830
00:55:01,920 --> 00:55:02,480
Is it true

831
00:55:07,320 --> 00:55:08,920
you are not feeling well?

832
00:55:08,920 --> 00:55:10,320
It is a big injection.

833
00:55:10,320 --> 00:55:11,520
You are not going to work.

834
00:55:11,520 --> 00:55:13,720
Here is a big injection.

835
00:55:13,720 --> 00:55:15,000
You are not in a good mood.

836
00:55:15,000 --> 00:55:19,840
It is a big injection.

837
00:55:19,840 --> 00:55:28,240
It's dirty
between two other doctors already.

838
00:55:28,280 --> 00:55:29,440
I still didn't get.

839
00:55:29,440 --> 00:55:31,640
How would we know which catch block to?

840
00:55:31,640 --> 00:55:32,520
Right.

841
00:55:33,160 --> 00:55:37,080
Okay, so we have to kind of guess this

842
00:55:37,800 --> 00:55:41,400
which call which block to right.

843
00:55:41,400 --> 00:55:43,880
We're going to have to guess.

844
00:55:43,880 --> 00:55:47,520
We have to guess
what kind of issues are called again. Two.

845
00:55:48,360 --> 00:55:52,440
And then we have to think about
these scenarios, about the get blocks.

846
00:55:52,440 --> 00:55:55,520
But generally speaking,
if you don't anticipate to have an ATL

847
00:55:55,840 --> 00:55:58,560
in the first place,
how can you be specific in advance?

848
00:55:58,560 --> 00:56:01,960
Yes, it comes from experience,
from practice,

849
00:56:01,960 --> 00:56:07,800
from knowledge, and that's where
I was trying to find so I can write.

850
00:56:07,840 --> 00:56:08,840
What I am like.

851
00:56:09,000 --> 00:56:12,600
If you see is it's bad to have a dog
throw a big injection.

852
00:56:12,600 --> 00:56:12,920
Yeah,

853
00:56:15,480 --> 00:56:21,320
it's if, if he if she knows

854
00:56:21,320 --> 00:56:26,280
animal B is trying to marry another girl,
it is a big injection.

855
00:56:26,760 --> 00:56:28,200
What will it ever do.

856
00:56:28,200 --> 00:56:30,560
Allow not feel anything about because

857
00:56:32,520 --> 00:56:34,920
all you all

858
00:56:36,760 --> 00:56:37,640
it is

859
00:56:38,960 --> 00:56:41,760
whatever is

860
00:56:42,960 --> 00:56:46,920
so yes this is
this is something that comes

861
00:56:46,920 --> 00:56:51,240
from practice,
from knowledge, from experience, and

862
00:56:52,400 --> 00:56:55,920
for example,
if you are writing a piece of code,

863
00:56:57,080 --> 00:57:00,240
usually, you know, with the practice,

864
00:57:00,240 --> 00:57:04,560
usually you will.

865
00:57:04,560 --> 00:57:07,640
I could not see for three days
when she learned it.

866
00:57:08,000 --> 00:57:08,760
I don't know.

867
00:57:08,760 --> 00:57:12,000
I it's so code,

868
00:57:14,400 --> 00:57:16,720
but we know what kind of issues

869
00:57:17,320 --> 00:57:26,080
the code again can, can encounter.

870
00:57:26,080 --> 00:57:28,240
So that's how we anticipate it.

871
00:57:28,640 --> 00:57:31,400
Are there other types of cat blocks?
Oh yes.

872
00:57:31,400 --> 00:57:34,560
There are thousands of types of cat blocks

873
00:57:34,880 --> 00:57:39,840
for every possible error that can exist.

874
00:57:40,120 --> 00:57:42,840
Java guys have created
a class for that inability

875
00:57:44,840 --> 00:57:47,440
to index out about negative high

876
00:57:47,640 --> 00:57:52,120
skill exception class
not followed for all the possibilities.

877
00:57:52,120 --> 00:57:54,680
They have kind of written these classes

878
00:57:55,280 --> 00:57:58,960
and if none of those classes are working,

879
00:57:58,960 --> 00:58:02,160
then yes, you can have this

880
00:58:02,160 --> 00:58:04,280
genetic catch block

881
00:58:04,280 --> 00:58:06,400
and it will catch

882
00:58:06,840 --> 00:58:09,880
all types of exceptions no matter what.

883
00:58:10,040 --> 00:58:12,480
Okay.

884
00:58:12,480 --> 00:58:15,280
So you you guys see some
some applications.

885
00:58:15,280 --> 00:58:17,520
The true this had a something went wrong.

886
00:58:18,240 --> 00:58:20,960
So this and this is where they write
this piece of code

887
00:58:21,560 --> 00:58:24,040
when they don't know

888
00:58:24,040 --> 00:58:28,920
did they write this exception block
at the end they just write something.

889
00:58:28,920 --> 00:58:32,080
You throw something went wrong.

890
00:58:32,080 --> 00:58:34,320
So you guys can also do this.

891
00:58:34,320 --> 00:58:37,400
The last remedy I get that a lot

892
00:58:38,960 --> 00:58:41,120
is there's the best word.

893
00:58:41,120 --> 00:58:43,920
So, yes, professional developers,
they also don't know

894
00:58:43,920 --> 00:58:47,160
about all the possibilities
where what can go wrong.

895
00:58:47,360 --> 00:58:52,440
So they write at the end of the right this
catch block Oops, something went wrong

896
00:58:53,680 --> 00:58:54,960
or go back and catch

897
00:58:54,960 --> 00:58:58,920
after getting that data. Yep.

898
00:58:58,920 --> 00:59:02,280
And because you guys are our testers,

899
00:59:02,280 --> 00:59:05,520
maybe you guys can put try restarting
your application.

900
00:59:06,120 --> 00:59:09,960
Need to have internet on again.

901
00:59:12,040 --> 00:59:14,800
Was not there a way to print
towards the exception left?

902
00:59:14,840 --> 00:59:15,760
Yes. Yes.

903
00:59:15,760 --> 00:59:17,800
And there is a way.

904
00:59:17,800 --> 00:59:20,080
So I will teach you about those methods.

905
00:59:20,080 --> 00:59:26,520
So for example, instead of printing out
this, you can say e dot.

906
00:59:26,520 --> 00:59:29,120
You can first of all, just directly
print this E

907
00:59:30,360 --> 00:59:32,400
system, dot, dot, print causing

908
00:59:32,400 --> 00:59:34,400
is making a good

909
00:59:35,720 --> 00:59:37,440
Oh my God.

910
00:59:37,440 --> 00:59:40,560
So now if I

911
00:59:47,160 --> 00:59:48,080
if I get

912
00:59:48,080 --> 00:59:58,800
if I execute this code,
which kind of arrival you guys,

913
00:59:58,800 --> 01:00:02,000
I am trying to divide two integers

914
01:00:02,000 --> 01:00:04,320
and the denominator is zero.

915
01:00:05,080 --> 01:00:06,880
So I will get other traumatic exceptions.

916
01:00:06,880 --> 01:00:09,280
So will this catch block

917
01:00:11,160 --> 01:00:13,720
execute or

918
01:00:13,720 --> 01:00:18,400
this one or this one.

919
01:00:18,400 --> 01:00:20,480
This one will be executed. Right.

920
01:00:20,880 --> 01:00:25,560
And in here I am directly trying to print
this error message directly.

921
01:00:25,680 --> 01:00:32,560
So let's see what happens.

922
01:00:32,560 --> 01:00:38,040
So Simon, you see dialog or planned or
to this magic exception divided by zero.

923
01:00:38,320 --> 01:00:41,160
So we can we can do that or we can see

924
01:00:43,120 --> 01:00:44,720
got to message.

925
01:00:44,720 --> 01:00:47,800
Now I will only see the message
or the class name

926
01:00:51,240 --> 01:00:53,080
divided by zero

927
01:00:53,080 --> 01:00:56,800
or you can only get the class name
or you can,

928
01:00:57,800 --> 01:01:00,720
for example, you can

929
01:01:00,720 --> 01:01:05,240
instead of this
you can say you don't put into step three.

930
01:01:05,280 --> 01:01:06,560
So there are many possible.

931
01:01:06,560 --> 01:01:08,040
It depends on you.

932
01:01:08,040 --> 01:01:10,200
Whatever you want to do with that.

933
01:01:11,240 --> 01:01:13,760
So I get the error messages,

934
01:01:13,760 --> 01:01:16,800
plus I get the lines of code

935
01:01:18,520 --> 01:01:20,280
so we will see what is the

936
01:01:20,280 --> 01:01:24,520
best way to handle these errors.

937
01:01:24,520 --> 01:01:27,800
So an exception, guys.

938
01:01:27,800 --> 01:01:30,960
Everything is making sense to law
or you guys are lost,

939
01:01:30,960 --> 01:01:42,840
confused.

940
01:01:42,840 --> 01:01:49,920
All good.

941
01:01:49,920 --> 01:01:52,680
All our errors make sense now.

942
01:01:52,680 --> 01:01:54,640
Yes, they will make much more sense.

943
01:01:54,640 --> 01:01:59,320
You guys will be able to figure out
the exact lines

944
01:01:59,320 --> 01:02:02,040
of code, exact

945
01:02:02,320 --> 01:02:06,840
causes for the issues
after learning about exception.

946
01:02:06,840 --> 01:02:10,880
So you guys don't have to
now ask are in the sports channel.

947
01:02:10,880 --> 01:02:16,080
You guys will be able
to figure it out on your own. Yes.

948
01:02:16,080 --> 01:02:20,760
So an exception can occur
for many different reasons.

949
01:02:20,760 --> 01:02:21,160
Right.

950
01:02:21,160 --> 01:02:25,960
So for example
the user is trying to input wrong

951
01:02:26,280 --> 01:02:29,400
a wrong data, right.

952
01:02:29,400 --> 01:02:30,960
The data you are trying to read

953
01:02:30,960 --> 01:02:34,800
from a file
maybe that contains invalid data.

954
01:02:35,760 --> 01:02:38,800
A file that needs to be opened
cannot be found.

955
01:02:38,800 --> 01:02:42,400
So you place some file on your computer.

956
01:02:42,400 --> 01:02:44,440
You accidentally delete that file.

957
01:02:44,880 --> 01:02:48,240
And if now you try to run your java code,

958
01:02:48,480 --> 01:02:51,600
our code will try to read the file
from that part.

959
01:02:52,200 --> 01:02:55,520
But it will not be able to do that.

960
01:02:55,520 --> 01:02:57,520
So it will throw that error

961
01:02:57,520 --> 01:03:01,240
in the middle of communication
B gave him has run out of memory.

962
01:03:01,480 --> 01:03:04,080
So can you guys tell me

963
01:03:04,080 --> 01:03:07,200
who is responsible to execute

964
01:03:07,200 --> 01:03:09,960
your Java code on your computers?

965
01:03:10,560 --> 01:03:15,080
Who is doing all of this stuff?

966
01:03:15,080 --> 01:03:20,840
Core processor,
nor specifically about Java.

967
01:03:20,840 --> 01:03:23,520
Everything is executed by processor.

968
01:03:23,520 --> 01:03:24,440
All right.

969
01:03:24,440 --> 01:03:26,160
But what about Java?

970
01:03:26,160 --> 01:03:27,960
How do Windows know?

971
01:03:27,960 --> 01:03:28,680
What is Java?

972
01:03:28,680 --> 01:03:31,000
How do Mac Operating system knows?

973
01:03:31,000 --> 01:03:32,120
What is Java?

974
01:03:32,120 --> 01:03:34,960
Who is translating
all of your requirements

975
01:03:35,760 --> 01:03:38,080
Is the Java which machine, right?

976
01:03:38,080 --> 01:03:41,120
The compiler, the Java ecosystem.

977
01:03:42,360 --> 01:03:44,840
Now what is that?

978
01:03:44,960 --> 01:03:45,920
What do you.

979
01:03:45,920 --> 01:03:48,240
So JVM is a program, okay?

980
01:03:48,240 --> 01:03:52,840
It is a program
like Google Chrome, like Microsoft Word,

981
01:03:52,840 --> 01:03:58,080
like intelligent, like Zoom
as any other program on your computer.

982
01:03:58,320 --> 01:04:03,280
Now, these programs,
they can also get issues right?

983
01:04:03,440 --> 01:04:05,560
They can also have problems itself.

984
01:04:06,000 --> 01:04:08,840
So now the guy who was executing

985
01:04:09,560 --> 01:04:13,120
your Java code,
who was translating your instructions

986
01:04:13,120 --> 01:04:16,840
to the underlying operating system, now

987
01:04:17,480 --> 01:04:20,040
it itself get to some issues, right?

988
01:04:20,480 --> 01:04:21,840
So what happens in that case?

989
01:04:21,840 --> 01:04:26,400
Again, we will be we are
program will not be we will be executed.

990
01:04:26,400 --> 01:04:30,520
For example, you have written
a piece of code that reads their file

991
01:04:30,520 --> 01:04:35,520
of maybe 20 gigabyte, but on your computer
you only have 16 gigabyte.

992
01:04:35,720 --> 01:04:41,240
So you your your JVM will run out
of memory while trying to read that file.

993
01:04:41,840 --> 01:04:45,040
So this is what it
what is meant by this code?

994
01:04:45,040 --> 01:04:46,800
What is it clear.

995
01:04:46,800 --> 01:04:50,520
So the virtual machine
yourself can have issues, right?

996
01:04:51,440 --> 01:04:53,760
And virtual machine
is the application that

997
01:04:54,520 --> 01:04:57,480
executes your program
on any of the computer.

998
01:04:59,280 --> 01:04:59,960
So one is the

999
01:04:59,960 --> 01:05:11,640
clearly third point.

1000
01:05:11,640 --> 01:05:12,360
All right.

1001
01:05:12,360 --> 01:05:15,720
So work Java guys have done

1002
01:05:16,040 --> 01:05:20,320
depending upon the type of errors

1003
01:05:20,920 --> 01:05:23,400
they have divided

1004
01:05:23,400 --> 01:05:27,680
all the errors in in three main classes
where is done

1005
01:05:27,960 --> 01:05:33,880
it has been is is three main classes.

1006
01:05:33,880 --> 01:05:37,320
So they have divided all the errors

1007
01:05:37,320 --> 01:05:41,080
in three main classes.

1008
01:05:41,080 --> 01:05:43,320
So math teacher

1009
01:05:48,920 --> 01:05:53,640
So now let's discuss about these three

1010
01:05:53,640 --> 01:05:57,720
main types of issues that we can get

1011
01:05:59,200 --> 01:06:00,480
in Java.

1012
01:06:00,800 --> 01:06:03,280
So exceptions are objects

1013
01:06:04,920 --> 01:06:07,840
and objects are defined using classes.

1014
01:06:08,600 --> 01:06:11,440
So they have created this

1015
01:06:11,440 --> 01:06:14,040
rule class for exceptions, which is called

1016
01:06:15,320 --> 01:06:18,600
Jala or Lang God pro IB Okay.

1017
01:06:19,200 --> 01:06:20,640
And then

1018
01:06:21,000 --> 01:06:24,000
we have a class called Errors Error

1019
01:06:24,760 --> 01:06:27,320
and another class called Exception.

1020
01:06:27,600 --> 01:06:30,240
And then there are multiple classes
which are

1021
01:06:31,360 --> 01:06:35,840
extending from this exception class.

1022
01:06:35,840 --> 01:06:36,840
They are

1023
01:06:37,960 --> 01:06:39,240
divided into

1024
01:06:39,240 --> 01:06:44,040
two types.

1025
01:06:44,040 --> 01:06:47,400
This, these one,
they are called jacketed exceptions

1026
01:06:54,080 --> 01:06:56,400
and these one

1027
01:06:57,400 --> 01:06:59,160
they are called unchecked

1028
01:06:59,160 --> 01:07:11,160
exceptions, iron selenium

1029
01:07:11,400 --> 01:07:14,160
input output exception.

1030
01:07:14,400 --> 01:07:17,280
You guys go this input output exception

1031
01:07:17,280 --> 01:07:21,480
in selenium.

1032
01:07:21,480 --> 01:07:24,360
Okay, So now you guys will be able to

1033
01:07:27,040 --> 01:07:28,720
avoid these issues

1034
01:07:28,720 --> 01:07:33,040
in selenium.

1035
01:07:33,040 --> 01:07:37,600
So you guys have used the thread
dog sleep in selenium.

1036
01:07:37,600 --> 01:07:38,400
Right.

1037
01:07:39,200 --> 01:07:41,360
Which type of exception.

1038
01:07:41,360 --> 01:07:43,360
And that method it throws

1039
01:07:47,800 --> 01:07:50,120
now is different.

1040
01:07:50,120 --> 01:07:51,920
That standard sleep.

1041
01:07:51,920 --> 01:07:54,720
You guys add something
to the method signature

1042
01:07:55,560 --> 01:07:58,200
when you write a third or sleep
dollar Longs

1043
01:07:58,360 --> 01:08:03,000
belongs to you about a type of adult
that get that

1044
01:08:03,000 --> 01:08:07,240
this piece of code
can cause interrupt to the exception.

1045
01:08:07,240 --> 01:08:08,040
Right?

1046
01:08:08,200 --> 01:08:10,320
So that is also a type of exception.

1047
01:08:10,320 --> 01:08:12,480
But you guys have noticed this

1048
01:08:14,920 --> 01:08:16,280
that less so for

1049
01:08:16,280 --> 01:08:19,320
example, that you guys notice this

1050
01:08:29,320 --> 01:08:31,000
for some types

1051
01:08:31,000 --> 01:08:38,320
of exceptions, GOA

1052
01:08:38,840 --> 01:08:43,080
forces us to ride the bike at block

1053
01:08:43,400 --> 01:08:45,840
for others, Java does not for us.

1054
01:08:46,360 --> 01:08:48,440
For example, if I ride

1055
01:08:50,040 --> 01:08:53,600
thread, dart sleep

1056
01:08:55,560 --> 01:08:56,800
in here,

1057
01:08:57,000 --> 01:09:01,280
if I don't try,
if either I have to add this to method

1058
01:09:01,280 --> 01:09:05,160
signature in here, which means that

1059
01:09:05,560 --> 01:09:08,640
I am saying to Java that
Hey Java, you know what?

1060
01:09:08,640 --> 01:09:13,160
I don't want to provide a try catch block
for this piece of code.

1061
01:09:13,160 --> 01:09:17,880
Yes, I know this can cause problems,
but you know what?

1062
01:09:18,320 --> 01:09:23,440
If anything goes wrong,
yes, just terminate my program abruptly.

1063
01:09:23,440 --> 01:09:25,240
I don't care. Okay?

1064
01:09:25,240 --> 01:09:28,480
This is the default behavior
that you guys have been doing until now.

1065
01:09:29,320 --> 01:09:32,040
All that the exception

1066
01:09:32,040 --> 01:09:36,320
to the whoever
is calling this main method.

1067
01:09:37,000 --> 01:09:38,840
So who calls this main method is

1068
01:09:50,120 --> 01:09:52,000
here C on the JVM, right?

1069
01:09:52,000 --> 01:09:55,280
It's also compiler translation C

1070
01:09:55,280 --> 01:09:58,680
or a source code to the bytecode.

1071
01:09:59,520 --> 01:10:02,000
You guys must you guys know you guys have

1072
01:10:02,000 --> 01:10:06,120
this all followed in here.

1073
01:10:06,120 --> 01:10:08,480
So if you open this out folder

1074
01:10:09,960 --> 01:10:14,280
for all the classes
you have kind of this replica.

1075
01:10:14,480 --> 01:10:16,000
What is this replica?

1076
01:10:16,000 --> 01:10:19,360
This replica is actually if you open this

1077
01:10:19,920 --> 01:10:22,640
so you see this D compiled from blah,
blah, blah.

1078
01:10:22,640 --> 01:10:23,360
Right.

1079
01:10:23,360 --> 01:10:29,120
But if I go inside this directory

1080
01:10:31,160 --> 01:10:33,560
opening explorer

1081
01:10:37,160 --> 01:10:39,400
and if I go inside this folder

1082
01:10:39,400 --> 01:10:44,160
and if I open this with not bad,

1083
01:10:44,160 --> 01:10:49,040
you guys will see something like this.

1084
01:10:49,040 --> 01:10:52,400
Do you guys see these weird symbols
and all that

1085
01:10:55,440 --> 01:10:57,720
is the bytecode

1086
01:10:57,720 --> 01:11:00,600
is the code that your JVM understands.

1087
01:11:01,520 --> 01:11:05,200
So what happens
is that when we click on that plus button,

1088
01:11:06,000 --> 01:11:09,680
all the code that you guys have written

1089
01:11:10,680 --> 01:11:12,240
in playing Java that

1090
01:11:12,240 --> 01:11:15,720
humans can understand, it is actually

1091
01:11:17,040 --> 01:11:21,000
translated
to this byte called super clear.

1092
01:11:21,560 --> 01:11:24,720
So for every piece of code that you write

1093
01:11:25,560 --> 01:11:32,280
in this intelligent, any other idea,
there are two versions of code

1094
01:11:32,600 --> 01:11:36,280
one that we as humans can understand
easily.

1095
01:11:36,760 --> 01:11:39,720
And the other one is the bytecode

1096
01:11:39,720 --> 01:11:42,160
that JVM can understand easily.

1097
01:11:42,880 --> 01:11:46,280
So all that code is actually converted

1098
01:11:46,280 --> 01:11:49,320
to the bytecode before Java, before

1099
01:11:49,360 --> 01:11:53,240
JVM can execute your
for your compiler alien language.

1100
01:11:53,560 --> 01:11:56,160
And so this is the job of compiler

1101
01:11:56,800 --> 01:12:00,960
converting the code
that is understandable to humans

1102
01:12:01,400 --> 01:12:05,040
to something
that is understandable to JVM.

1103
01:12:05,160 --> 01:12:07,200
This is the job of compiler.

1104
01:12:07,200 --> 01:12:10,920
JVM, on
the other hand, is a piece of program

1105
01:12:11,280 --> 01:12:15,040
that takes that bytecode

1106
01:12:15,600 --> 01:12:19,520
and converts that to binary code

1107
01:12:19,800 --> 01:12:22,960
your processor,
your operating system can understand.

1108
01:12:23,800 --> 01:12:26,880
So there's the difference
between JVM and compiler.

1109
01:12:27,000 --> 01:12:39,400
There are many more differences,
but this one is the major one.

1110
01:12:39,400 --> 01:12:43,440
So what I was saying
sometimes you guys must have noticed

1111
01:12:43,440 --> 01:12:46,760
that when you guys try to write

1112
01:12:48,520 --> 01:12:50,400
some matters

1113
01:12:50,680 --> 01:12:52,680
lot to us, to our content,

1114
01:12:52,680 --> 01:12:55,120
yes, this is what I am explaining.

1115
01:12:55,680 --> 01:12:58,120
So the type of fairness

1116
01:12:58,880 --> 01:13:02,960
for which Java will explicitly force you

1117
01:13:04,080 --> 01:13:07,720
to provide a catch block,

1118
01:13:07,720 --> 01:13:10,760
they are categorized as

1119
01:13:12,480 --> 01:13:14,640
jagged exceptions, like,

1120
01:13:15,040 --> 01:13:17,520
for example, this piece of code

1121
01:13:18,560 --> 01:13:23,040
can also call a was an issue right
this division by zero.

1122
01:13:23,520 --> 01:13:27,400
But in here
Java is not forcing me to provide that

1123
01:13:27,640 --> 01:13:32,640
try to block Java
is not giving me an error at compile time

1124
01:13:33,120 --> 01:13:37,880
if I don't provide the implementation
for this piece of code,

1125
01:13:38,240 --> 01:13:43,680
these type of errors
which are not caused by Java,

1126
01:13:44,680 --> 01:13:47,080
they are categorized as

1127
01:13:48,600 --> 01:13:51,600
unchecked exceptions.

1128
01:13:51,600 --> 01:13:54,360
So what is happening behind the scenes is

1129
01:13:54,520 --> 01:13:57,160
Java is not checking this piece of code.

1130
01:13:58,080 --> 01:13:59,880
Sorry I stepped out for a minute.

1131
01:13:59,880 --> 01:14:03,400
I though we
I thought we have to use implicit

1132
01:14:03,400 --> 01:14:08,560
we cannot use thread or sleep any more
because that was them.

1133
01:14:08,600 --> 01:14:12,600
And it also said yep,
you guys will be using the specifics.

1134
01:14:13,080 --> 01:14:17,040
So again, please
Alexievich line you want me to show again

1135
01:14:28,080 --> 01:14:30,960
from read

1136
01:14:31,080 --> 01:14:36,440
from thread? Yes.

1137
01:14:37,000 --> 01:14:39,200
So if I remove this

1138
01:14:39,600 --> 01:14:44,160
right, get in here and compile time.

1139
01:14:44,400 --> 01:14:48,480
Java gives me an error
if I don't provide the try cache block,

1140
01:14:49,560 --> 01:14:51,600
but in here I don't.

1141
01:14:51,840 --> 01:14:55,960
I am not forced by compiler to provide it
like at block.

1142
01:14:56,400 --> 01:15:01,920
Now why is this important to why
Java is forcing me here and why

1143
01:15:01,920 --> 01:15:06,800
Java is not forcing here to provide it
like all kind of why we have these

1144
01:15:08,520 --> 01:15:10,560
two exceptions

1145
01:15:10,560 --> 01:15:12,600
and until the exceptions, can you guys

1146
01:15:12,960 --> 01:15:18,360
guess why?

1147
01:15:18,360 --> 01:15:21,640
Why is forcing mean here and not in here?

1148
01:15:23,400 --> 01:15:25,160
Let me give you more examples

1149
01:15:25,160 --> 01:15:28,560
if I try to write, if I try to

1150
01:15:29,720 --> 01:15:33,600
open a file input spam

1151
01:15:37,920 --> 01:15:40,800
in here, the dialog enforces me to provide

1152
01:15:43,680 --> 01:15:44,120
again

1153
01:15:44,120 --> 01:15:47,160
say me their task
good either provided they try that block

1154
01:15:48,240 --> 01:15:50,280
or add it to the method signature.

1155
01:15:51,040 --> 01:15:54,360
But in here, let's say for example.

1156
01:15:56,240 --> 01:15:59,040
So in both cases
I will be getting an error

1157
01:15:59,040 --> 01:16:03,760
if I try to execute this program right.

1158
01:16:03,760 --> 01:16:07,720
But in some cases Java forces me to either

1159
01:16:07,720 --> 01:16:10,760
add it to the method signature

1160
01:16:10,760 --> 01:16:13,120
provide provided break at block,

1161
01:16:13,120 --> 01:16:15,840
but in some cases Java does not force me.

1162
01:16:16,560 --> 01:16:20,400
So in the cases
where I am explicitly forced

1163
01:16:20,600 --> 01:16:22,880
to provide a broadcast block,

1164
01:16:23,440 --> 01:16:26,760
they are categorized as jack exceptions.

1165
01:16:28,080 --> 01:16:32,080
And in the cases where I am not forced,

1166
01:16:32,080 --> 01:16:35,440
although this piece of code can also cause
the issue,

1167
01:16:36,960 --> 01:16:40,960
they are called untargeted exceptions.

1168
01:16:41,520 --> 01:16:43,560
Time to take a break.

1169
01:16:43,680 --> 01:16:44,880
So think about this, guys.

1170
01:16:44,880 --> 01:16:46,720
I will explain after the break.

1171
01:16:46,720 --> 01:16:48,120
Also tried to Google it.

1172
01:16:48,120 --> 01:16:51,400
Why we have jagged
and untargeted exceptions.

1173
01:16:51,400 --> 01:17:05,520
Yeah, though

1174
01:17:07,320 --> 01:17:08,040
I cannot check

1175
01:17:08,040 --> 01:17:21,040
everything for you.

1176
01:17:21,040 --> 01:17:21,440
All right.

1177
01:17:21,440 --> 01:17:25,760
But please be back in 15 minutes
and reminding me

1178
01:17:25,760 --> 01:17:49,280
about the recording.

1179
01:17:49,280 --> 01:18:16,800
All right,

1180
01:18:16,800 --> 01:18:22,680
so these two main categories
are all jagged and uncheck the exceptions.

1181
01:18:22,680 --> 01:18:25,680
They basically exist

1182
01:18:25,680 --> 01:18:30,840
because of two main type of errors
that can occur in programing.

1183
01:18:31,440 --> 01:18:34,080
One of the arrows,

1184
01:18:34,560 --> 01:18:39,680
one of the type they occur due to bad
programing practices.

1185
01:18:39,880 --> 01:18:40,600
Okay.

1186
01:18:40,920 --> 01:18:43,640
And you can avoid these issues

1187
01:18:43,800 --> 01:18:46,840
if you write your code properly.

1188
01:18:47,320 --> 01:18:52,120
So let's say, for example,

1189
01:18:52,120 --> 01:18:57,840
if I am trying to divide by the zero,
what I can do, I can first

1190
01:18:58,080 --> 01:19:01,200
declare, let's say maybe

1191
01:19:01,800 --> 01:19:09,160
two numbers.

1192
01:19:09,160 --> 01:19:14,840
And then before I try to divide these
numbers, I can write an if condition.

1193
01:19:14,960 --> 01:19:19,200
I can see if number two

1194
01:19:20,040 --> 01:19:25,640
is not equal to zero, then only

1195
01:19:26,560 --> 01:19:38,040
I want to do the video.

1196
01:19:38,040 --> 01:19:39,720
And if this is not the case,

1197
01:19:40,960 --> 01:19:43,280
I can
simply print out some error messages.

1198
01:19:43,280 --> 01:19:44,360
Maybe

1199
01:19:50,400 --> 01:19:54,040
like this.

1200
01:19:54,040 --> 01:19:58,720
And in this case I can check
if a variable is null or not.

1201
01:19:58,800 --> 01:20:05,880
So if name is equal to null,
so it's up to you guys.

1202
01:20:06,440 --> 01:20:09,000
You want to handle these errors
with the help

1203
01:20:09,000 --> 01:20:14,440
of write catch blocks,
you can use the try catch blocks

1204
01:20:14,880 --> 01:20:18,480
or if you want to avoid these issues

1205
01:20:18,480 --> 01:20:22,440
with the help of simplified effects
conditions, you can also do that

1206
01:20:33,360 --> 01:20:38,400
so only if the name is not equal to no.

1207
01:20:38,400 --> 01:20:40,960
Then I want to print this out. As

1208
01:20:42,600 --> 01:20:44,760
I can see

1209
01:20:46,600 --> 01:20:50,000
that name

1210
01:20:50,520 --> 01:20:52,480
variable able

1211
01:20:55,080 --> 01:20:58,240
is not like, okay,

1212
01:20:59,040 --> 01:21:03,960
so these under exceptions
or the exceptions

1213
01:21:03,960 --> 01:21:08,040
which are not forced by Java,

1214
01:21:08,040 --> 01:21:12,280
these exceptions you guys can think of as

1215
01:21:13,360 --> 01:21:15,960
these exceptions as something

1216
01:21:17,800 --> 01:21:19,440
lightweight exceptions,

1217
01:21:19,440 --> 01:21:22,000
these can be avoided with the help of

1218
01:21:22,440 --> 01:21:25,720
if the if seems more easier

1219
01:21:25,720 --> 01:21:28,600
because we do not need to know
the name of exception.

1220
01:21:29,600 --> 01:21:35,240
Yes, but you are missing a very important
aspect.

1221
01:21:35,240 --> 01:21:38,880
Mohamud, for example if you use the

1222
01:21:38,880 --> 01:21:41,760
if conditions,

1223
01:21:41,920 --> 01:21:44,840
you will not be able to get a bad

1224
01:21:44,960 --> 01:21:49,640
press like this
imagine there are thousands and thousands

1225
01:21:50,240 --> 01:21:54,440
lines of code
and you are getting an error.

1226
01:21:54,440 --> 01:21:57,960
And the error only says
I cannot divide by zero.

1227
01:21:58,120 --> 01:22:01,160
Now the first thing that you have to do is
you have to set

1228
01:22:01,160 --> 01:22:04,680
your complete code for this added message.

1229
01:22:05,160 --> 01:22:08,320
Then you have to find out
which line is throwing

1230
01:22:08,320 --> 01:22:09,480
this, add it,

1231
01:22:09,480 --> 01:22:11,440
then you have to find out the issue.

1232
01:22:11,440 --> 01:22:18,480
But if you use the try at block,
you will get to be standard exception

1233
01:22:18,480 --> 01:22:19,800
plus name.

1234
01:22:19,800 --> 01:22:22,560
You will get that standard error message.

1235
01:22:22,880 --> 01:22:27,160
You will get the exact line number
that is causing the problem.

1236
01:22:27,160 --> 01:22:31,200
You will get the exact name
of the method, exact

1237
01:22:31,200 --> 01:22:36,560
name of the class,
and the complete information about the.

1238
01:22:36,560 --> 01:22:40,120
So finding and fixing issues is way

1239
01:22:40,120 --> 01:22:43,520
easier in the case of break at blocks.

1240
01:22:43,520 --> 01:22:47,120
Then the if health conditions.

1241
01:22:47,120 --> 01:22:48,200
I hope it makes sense,

1242
01:22:49,560 --> 01:22:52,840
but actually
it is easy to see the type of exception

1243
01:22:52,840 --> 01:22:57,000
just to make the mistake
and copy it from the output.

1244
01:22:57,000 --> 01:22:59,120
Yes, you can also do that.

1245
01:22:59,120 --> 01:23:02,640
For example,
just write the first condition.

1246
01:23:03,480 --> 01:23:07,000
Once you get the ETA,
you guys will not be needing

1247
01:23:07,440 --> 01:23:10,600
to know about these errors.

1248
01:23:10,880 --> 01:23:13,800
You once you start cracking the code,

1249
01:23:14,040 --> 01:23:17,320
you will know what kind of issues
that piece of code can throw.

1250
01:23:17,320 --> 01:23:21,840
So don't worry
too much about these these exceptions.

1251
01:23:22,440 --> 01:23:23,520
Zoom out.

1252
01:23:23,520 --> 01:23:28,040
Okay, I did better now

1253
01:23:41,040 --> 01:23:44,120
there are famous 10 to 15 types of issues

1254
01:23:44,520 --> 01:23:47,720
which you will be getting
most of the time.

1255
01:23:48,000 --> 01:23:53,960
So I will teach you about those issues.

1256
01:23:53,960 --> 01:23:54,320
Okay.

1257
01:23:54,480 --> 01:23:59,200
Is it possible to specifically show
the line that we made errors

1258
01:24:00,240 --> 01:24:01,200
when we are

1259
01:24:02,400 --> 01:24:04,480
using the printouts in Oak

1260
01:24:07,360 --> 01:24:08,120
Line 20?

1261
01:24:08,120 --> 01:24:13,120
Must be number number divided by Yep.

1262
01:24:13,160 --> 01:24:16,200
Now. Now it should be

1263
01:24:16,200 --> 01:24:18,920
number divided by

1264
01:24:18,920 --> 01:24:20,120
numbers. So

1265
01:24:20,720 --> 01:24:25,080
yes, you are right. Yes.

1266
01:24:25,080 --> 01:24:26,400
Like that of compiled it.

1267
01:24:26,400 --> 01:24:30,440
So for example
so guys in Oak is saying their task to

1268
01:24:31,440 --> 01:24:34,560
this line number
that we get with the help of exceptions.

1269
01:24:34,880 --> 01:24:38,560
Well why can't we also like
I can also do that

1270
01:24:38,560 --> 01:24:43,080
I can put on line 23 right.

1271
01:24:43,080 --> 01:24:44,480
I can also do that.

1272
01:24:44,480 --> 01:24:47,880
It's also possible
to put into the exact line numbers,

1273
01:24:48,480 --> 01:24:52,160
but still, you know,
are you getting this information

1274
01:24:52,160 --> 01:24:56,040
out of method name,
class, name, package name?

1275
01:24:56,400 --> 01:25:01,080
And even if you put all of this
information inside a false condition,

1276
01:25:01,680 --> 01:25:04,840
the moment you try to change your order.

1277
01:25:04,840 --> 01:25:08,160
So, for example,
even if you accidentally hit an enter, now

1278
01:25:08,160 --> 01:25:13,040
this line moves to line number 24
instead of line number 23.

1279
01:25:13,040 --> 01:25:15,960
So adding a new code to the same file.

1280
01:25:16,200 --> 01:25:19,440
So for example, if you are adding
some line of code in here,

1281
01:25:20,200 --> 01:25:24,960
all the information that you insert
about the line number,

1282
01:25:24,960 --> 01:25:28,040
the entire to the 6 hours it's gone.

1283
01:25:28,040 --> 01:25:30,120
Now it is on line number 25.

1284
01:25:30,800 --> 01:25:33,920
So you cannot make changes to the code
again and again.

1285
01:25:34,440 --> 01:25:36,200
It's a very big problem.

1286
01:25:36,200 --> 01:25:43,480
You understand why we cannot put line
numbers in here.

1287
01:25:43,480 --> 01:25:44,760
I mean, automatically.

1288
01:25:46,280 --> 01:25:48,520
So this is automatically.

1289
01:25:48,520 --> 01:25:49,680
This is automatically.

1290
01:25:49,680 --> 01:25:57,040
That's why they have created,
with the exception exceptions.

1291
01:25:57,040 --> 01:25:59,080
I don't think so. There is a way that.

1292
01:25:59,280 --> 01:26:01,440
So for example,
you want to write extra up.

1293
01:26:01,440 --> 01:26:06,120
So for to get to be exact line numbers,
class numbers and all that, then why not?

1294
01:26:06,120 --> 01:26:09,280
You will do the exceptions
which are providing you all of that info

1295
01:26:12,760 --> 01:26:13,440
but would not.

1296
01:26:13,440 --> 01:26:16,440
So then why not do exceptions?

1297
01:26:16,440 --> 01:26:18,920
They are doing the exact same thing
for you.

1298
01:26:20,360 --> 01:26:28,080
Yep. So then that's not a good idea

1299
01:26:28,080 --> 01:26:32,480
to print out the line numbers
and everything on inside this house.

1300
01:26:33,080 --> 01:26:35,400
And there is one more thing, guys.

1301
01:26:36,280 --> 01:26:39,320
In professional applications,
we don't use this house,

1302
01:26:39,680 --> 01:26:42,440
we don't print things on the console.

1303
01:26:42,440 --> 01:26:45,760
When we execute the code on servers,
there is no console.

1304
01:26:46,360 --> 01:26:48,800
So we use these loggers.

1305
01:26:49,120 --> 01:26:54,080
You remember that log for there
that caused the issue on the Internet.

1306
01:26:55,840 --> 01:26:58,520
That's
actually the alternate of printouts.

1307
01:26:59,560 --> 01:27:02,200
So there is a huge

1308
01:27:02,400 --> 01:27:06,040
kind of virus thing
going on over the internet.

1309
01:27:06,640 --> 01:27:09,320
So these applications
for professional applications,

1310
01:27:09,320 --> 01:27:12,280
they use a special program

1311
01:27:12,640 --> 01:27:18,320
to print out these all of this info,
all of this info inside of the files,

1312
01:27:18,320 --> 01:27:22,160
instead of printing out the
because there are no controls

1313
01:27:23,920 --> 01:27:27,320
on the servers servers, they don't have

1314
01:27:28,440 --> 01:27:30,880
screens attached to them all this.

1315
01:27:30,920 --> 01:27:33,480
So we don't print out information
because there is

1316
01:27:33,480 --> 01:27:36,960
no one looking at these errors
when the applications are in execution.

1317
01:27:37,360 --> 01:27:40,480
Instead, we create a file

1318
01:27:40,480 --> 01:27:45,360
and we put all the lines, all the issues
and errors inside that file.

1319
01:27:45,720 --> 01:27:51,120
We keep on putting the data, we keep on
putting this out inside that file.

1320
01:27:51,600 --> 01:27:53,600
If anything goes wrong, we just

1321
01:27:54,720 --> 01:27:56,760
we just analyze those logs.

1322
01:27:56,760 --> 01:27:58,200
They are called the log files.

1323
01:27:58,200 --> 01:28:00,000
If you guys know, for example,

1324
01:28:00,000 --> 01:28:02,600
when something goes wrong,
your software is like chrome

1325
01:28:02,600 --> 01:28:05,200
and they ask you to send the report

1326
01:28:05,640 --> 01:28:08,280
to the developers

1327
01:28:08,280 --> 01:28:09,600
and those error reports.

1328
01:28:09,600 --> 01:28:13,160
So they are actually sending
all those logs to the developers

1329
01:28:13,680 --> 01:28:16,640
I knew that we will miss as our clients
wonder.

1330
01:28:16,680 --> 01:28:19,200
Yes, so professional applications,
they don't source

1331
01:28:20,880 --> 01:28:34,800
why mine is different.

1332
01:28:34,800 --> 01:28:44,640
Okay, I will just call you the

1333
01:28:52,440 --> 01:28:56,040
so what I was saying

1334
01:28:57,040 --> 01:29:00,360
that we don't prior to the line numbers

1335
01:29:00,720 --> 01:29:03,720
because changing
the code will be difficult

1336
01:29:05,640 --> 01:29:09,560
and we always try to use exceptions

1337
01:29:09,560 --> 01:29:12,600
so that we have complete information
about the errors.

1338
01:29:13,320 --> 01:29:17,600
So previously were discussing the code
and the exception,

1339
01:29:17,600 --> 01:29:21,120
so the exceptions which can be avoided

1340
01:29:21,480 --> 01:29:24,840
by just writing good code

1341
01:29:25,480 --> 01:29:29,640
or can be avoided
by writing false conditions, or

1342
01:29:30,720 --> 01:29:32,720
we can also use the

1343
01:29:32,720 --> 01:29:36,920
at blocks they are called as unchecked
exceptions.

1344
01:29:36,960 --> 01:29:40,720
Okay,
compiler is not checking these exceptions,

1345
01:29:40,720 --> 01:29:43,080
so compiler is not checking if

1346
01:29:44,240 --> 01:29:46,200
the will be able

1347
01:29:46,200 --> 01:29:49,560
to divide this number by zero or not.

1348
01:29:50,280 --> 01:29:54,600
If we will get the null pointer exception
or or not.

1349
01:29:54,600 --> 01:29:58,600
This highlighting thing is coming from
it is not from the compiler,

1350
01:29:59,040 --> 01:30:02,400
but the exceptions

1351
01:30:02,960 --> 01:30:06,520
which are checked at combined time,

1352
01:30:07,200 --> 01:30:10,680
which are not in the control
of a programmer,

1353
01:30:11,120 --> 01:30:13,720
which can not be avoided by

1354
01:30:13,720 --> 01:30:16,480
just writing if false conditions.

1355
01:30:17,120 --> 01:30:20,840
They are called

1356
01:30:21,320 --> 01:30:23,200
jagged exceptions.

1357
01:30:23,200 --> 01:30:28,640
So for example, if a file is not found

1358
01:30:29,840 --> 01:30:32,320
on a specified location,

1359
01:30:33,800 --> 01:30:36,320
can I write a piece of code that

1360
01:30:38,320 --> 01:30:41,480
maybe magically generated that file

1361
01:30:41,480 --> 01:30:44,280
and all the data are inside that file?

1362
01:30:44,720 --> 01:30:47,400
Or maybe can I write a piece of code

1363
01:30:47,400 --> 01:30:52,320
that checks if that file is not present
there to that location

1364
01:30:52,680 --> 01:30:55,760
before that specific line is executed.

1365
01:30:56,120 --> 01:31:00,840
So for example, you guys might ask
their Tasker thought widget

1366
01:31:01,000 --> 01:31:05,520
if a file is not present
at a specific location before

1367
01:31:07,400 --> 01:31:08,360
writing the file.

1368
01:31:08,360 --> 01:31:10,080
Not false claim is not.

1369
01:31:10,080 --> 01:31:11,040
There is a way.

1370
01:31:11,040 --> 01:31:13,080
So yes, there are ways, but still

1371
01:31:16,600 --> 01:31:18,880
we cannot do that.

1372
01:31:18,960 --> 01:31:28,240
So for example, why? Why?

1373
01:31:28,240 --> 01:31:32,080
Java is forcing me

1374
01:31:39,240 --> 01:31:41,440
to write it,

1375
01:31:41,440 --> 01:31:43,880
I guess. BLOCK

1376
01:31:44,960 --> 01:31:48,720
So if there is a part

1377
01:31:55,520 --> 01:31:59,200
let's say, guys, I am trying to read

1378
01:32:01,920 --> 01:32:13,400
this file.

1379
01:32:13,400 --> 01:32:19,200
So what is
what is special about this error right?

1380
01:32:19,200 --> 01:32:22,320
Can't I just check before I say

1381
01:32:22,920 --> 01:32:26,040
filing for the same

1382
01:32:26,320 --> 01:32:27,480
file in perform

1383
01:32:27,480 --> 01:32:35,040
your file in extreme.

1384
01:32:35,040 --> 01:32:37,400
So why I is forcing me? Why?

1385
01:32:37,600 --> 01:32:41,520
By saying that there either
like to try to block

1386
01:32:42,000 --> 01:32:44,880
or write this exemption
to the method signature.

1387
01:32:44,880 --> 01:32:47,400
Can't avoid this
with the health condition.

1388
01:32:47,800 --> 01:32:48,600
What do you guys think?

1389
01:32:48,600 --> 01:32:52,760
Contain avoid this check first check
if this export is

1390
01:32:52,800 --> 01:32:59,760
correct or not.

1391
01:32:59,760 --> 01:33:00,160
Nice.

1392
01:33:01,320 --> 01:33:02,520
What do you think?

1393
01:33:02,520 --> 01:33:06,080
Like I avoided the arithmetic exception.

1394
01:33:06,080 --> 01:33:09,680
Like I avoided the null point of exception
by writing.

1395
01:33:09,680 --> 01:33:15,840
If health conditions contain avoid this
exception.

1396
01:33:15,840 --> 01:33:17,560
So yes, the answer is no.

1397
01:33:17,560 --> 01:33:21,040
We cannot avoid

1398
01:33:21,040 --> 01:33:22,320
even if I it.

1399
01:33:22,320 --> 01:33:24,480
So there is this

1400
01:33:25,080 --> 01:33:28,920
file class in Java the file file new file

1401
01:33:33,840 --> 01:33:36,480
and what I can do,

1402
01:33:36,600 --> 01:33:37,360
what I can do.

1403
01:33:37,360 --> 01:33:40,920
I can say if

1404
01:33:40,920 --> 01:33:42,200
dot exists.

1405
01:33:42,200 --> 01:33:44,920
So this method it tells me

1406
01:33:45,200 --> 01:33:50,680
if a specific file exist
on a specific location or not.

1407
01:33:50,680 --> 01:33:51,920
So I can I can count.

1408
01:33:51,920 --> 01:33:54,920
I say this if file exists, then only

1409
01:33:56,960 --> 01:34:00,480
execute this code.

1410
01:34:00,480 --> 01:34:02,520
Otherwise

1411
01:34:04,600 --> 01:34:07,200
maybe print out file

1412
01:34:09,520 --> 01:34:12,400
is not president

1413
01:34:15,320 --> 01:34:16,440
export.

1414
01:34:16,600 --> 01:34:19,880
So yes,
I can still try if health condition.

1415
01:34:19,880 --> 01:34:21,320
I still have classes.

1416
01:34:21,320 --> 01:34:25,400
I can still have this mechanism
to make sure that

1417
01:34:25,680 --> 01:34:28,400
if this file exist

1418
01:34:29,880 --> 01:34:33,400
on the drive, then only

1419
01:34:34,680 --> 01:34:38,040
maybe I can say

1420
01:34:38,040 --> 01:34:41,120
yes file exist

1421
01:34:43,400 --> 01:34:46,440
will not be

1422
01:34:46,440 --> 01:34:49,080
getting any errors.

1423
01:34:49,440 --> 01:34:51,920
So what this this method is doing.

1424
01:34:51,920 --> 01:34:53,640
So let's say for example.

1425
01:34:53,640 --> 01:34:57,960
So right now I am adding this map,
this exception to this method signature

1426
01:34:58,760 --> 01:34:59,840
in here.

1427
01:35:00,720 --> 01:35:03,120
In other words, I am saying, Hey, Java,

1428
01:35:03,120 --> 01:35:06,360
I don't care
if this file is just told the error.

1429
01:35:06,360 --> 01:35:09,080
I made the application abruptly.

1430
01:35:09,240 --> 01:35:10,800
I don't want to handle the setup.

1431
01:35:10,800 --> 01:35:10,960
Okay.

1432
01:35:10,960 --> 01:35:13,120
I don't want to provide a backup code.

1433
01:35:13,120 --> 01:35:14,800
I don't care.

1434
01:35:15,600 --> 01:35:17,760
So let's say for example, guys,

1435
01:35:17,760 --> 01:35:20,920
if I delayed this file

1436
01:35:24,880 --> 01:35:26,880
and then if I execute

1437
01:35:26,880 --> 01:35:32,440
this program,

1438
01:35:32,440 --> 01:35:35,400
I get
the file is not present error this part.

1439
01:35:35,760 --> 01:35:36,480
Okay?

1440
01:35:36,560 --> 01:35:42,880
And if I undo this file
and then I execute this code

1441
01:35:45,160 --> 01:35:45,480
so it

1442
01:35:45,480 --> 01:35:48,560
says this file
exist, I will not be getting any other.

1443
01:35:48,720 --> 01:35:51,720
Is not this condition
working perfectly fine?

1444
01:35:52,200 --> 01:35:54,280
I am able to check if a file is present.

1445
01:35:54,280 --> 01:35:55,440
Then only I am reading.

1446
01:35:55,440 --> 01:36:04,360
And am I not able to avoid this error?

1447
01:36:04,360 --> 01:36:05,000
Right.

1448
01:36:06,120 --> 01:36:07,200
What do you think? Alone?

1449
01:36:07,200 --> 01:36:11,320
I'm Mohammad Moreno amount Now Google

1450
01:36:14,600 --> 01:36:22,320
Allo.

1451
01:36:22,320 --> 01:36:23,680
So it's a tricky one.

1452
01:36:23,680 --> 01:36:26,080
I think it's a tricky one.

1453
01:36:26,280 --> 01:36:29,640
So no, actually I have tried my best.

1454
01:36:29,680 --> 01:36:30,880
But you know what?

1455
01:36:30,880 --> 01:36:32,800
I can still react to this issue.

1456
01:36:32,800 --> 01:36:34,480
Let me show how.

1457
01:36:34,600 --> 01:36:37,440
So what happens is still
things can go wrong.

1458
01:36:37,920 --> 01:36:41,040
I am not able to completely avoid
this issue.

1459
01:36:41,480 --> 01:36:44,480
So what can happen
is that at the moment Java

1460
01:36:44,480 --> 01:36:48,240
is executing this piece of code.

1461
01:36:48,760 --> 01:36:52,800
What can happen
is that the file is present on the system

1462
01:36:53,440 --> 01:36:58,080
and the moment this,
if condition is passed it, it is possible

1463
01:36:58,080 --> 01:37:02,200
that someone deletes this file
at that specific moment.

1464
01:37:02,640 --> 01:37:05,480
So if let me slowly execute this code.

1465
01:37:05,760 --> 01:37:07,640
So what can go wrong still?

1466
01:37:07,640 --> 01:37:12,360
So this condition
is still not perfected. So

1467
01:37:14,880 --> 01:37:18,120
I am sorry.

1468
01:37:18,560 --> 01:37:24,640
Let me put this.

1469
01:37:24,640 --> 01:37:27,440
I am on this line right now.

1470
01:37:27,440 --> 01:37:29,560
The file is present.

1471
01:37:29,560 --> 01:37:35,880
So will this condition pass those are not.

1472
01:37:35,880 --> 01:37:37,640
It will pass. Right.

1473
01:37:37,640 --> 01:37:41,160
But watch what happens right
the moment This

1474
01:37:41,160 --> 01:37:44,840
If condition is passed.

1475
01:37:44,840 --> 01:37:49,880
What if someone deletes this file
right after this?

1476
01:37:50,400 --> 01:37:53,200
If condition is passed now,

1477
01:37:53,200 --> 01:37:55,960
if I execute this code now,

1478
01:37:56,960 --> 01:38:05,200
will I get error or not?

1479
01:38:05,200 --> 01:38:11,160
So when when Java execute in this piece,
the file was present,

1480
01:38:11,800 --> 01:38:16,560
but right after that line,
someone deletes that file.

1481
01:38:16,560 --> 01:38:21,640
I deleted that file
and if now I execute this program,

1482
01:38:22,800 --> 01:38:24,160
who can be faster then?

1483
01:38:24,160 --> 01:38:31,280
And if health condition as there can be,
I will get an error.

1484
01:38:31,280 --> 01:38:33,160
Now, back in the moment.

1485
01:38:33,160 --> 01:38:37,600
Java now tries to execute this file
file is gone

1486
01:38:38,280 --> 01:38:42,160
and now I get this added.

1487
01:38:43,400 --> 01:38:45,960
So I tried my best

1488
01:38:46,120 --> 01:38:50,600
using all of my java skills
to avoid this issue,

1489
01:38:51,560 --> 01:38:56,400
but there are still chances
that things can go wrong.

1490
01:38:57,120 --> 01:39:02,200
So what I conclude
is that in all the cases,

1491
01:39:02,960 --> 01:39:07,720
if first condition is not sufficient,
in some cases,

1492
01:39:07,720 --> 01:39:11,880
if health conditions are sufficient,
I can avoid the issues

1493
01:39:11,880 --> 01:39:16,200
completely, but not in all the cases.

1494
01:39:16,560 --> 01:39:19,320
Some cases they require

1495
01:39:19,760 --> 01:39:22,840
try cache blocks no matter what.

1496
01:39:23,760 --> 01:39:26,080
Does it make sense, guys?

1497
01:39:26,480 --> 01:39:31,400
So if I have a piece of code in here

1498
01:39:34,000 --> 01:39:35,160
and if I am using

1499
01:39:35,160 --> 01:39:39,600
if conditions not,
this code will not be executed.

1500
01:39:39,840 --> 01:39:41,120
Same issue.

1501
01:39:41,120 --> 01:39:47,520
But after termination of program
because I didn't have like x blocks.

1502
01:39:48,280 --> 01:39:50,280
So let me repeat it again.

1503
01:39:50,280 --> 01:39:53,560
Those issues

1504
01:39:54,080 --> 01:39:56,960
which can not be avoided

1505
01:39:58,360 --> 01:40:01,480
by just writing proper code

1506
01:40:02,400 --> 01:40:04,920
or if those conditions

1507
01:40:04,920 --> 01:40:07,520
which are beyond the control

1508
01:40:07,520 --> 01:40:11,960
of a programmer
are called jack and exceptions

1509
01:40:12,600 --> 01:40:15,000
and we must provide

1510
01:40:16,120 --> 01:40:18,680
dry catch blocks

1511
01:40:18,680 --> 01:40:21,360
to avoid those issues.

1512
01:40:21,360 --> 01:40:24,920
But the doors are issues
which can be avoided by writing

1513
01:40:24,920 --> 01:40:30,960
proper code or by writing
if those conditions are called unchecked.

1514
01:40:30,960 --> 01:40:35,440
The exception is,
and it is not mandatory to write it,

1515
01:40:35,560 --> 01:40:38,160
try catch block for those errors.

1516
01:40:38,760 --> 01:40:42,120
So and Java knows about these,

1517
01:40:42,120 --> 01:40:46,360
which you can not avoid completely
by writing it false condition

1518
01:40:46,680 --> 01:40:51,240
that's why java forces you devastated
hey is there I know.

1519
01:40:51,240 --> 01:40:55,680
I know you are a very good programmer
you can use the file path class.

1520
01:40:55,680 --> 01:40:58,600
You can check if a file exist.

1521
01:40:58,600 --> 01:40:59,720
But you know what?

1522
01:40:59,720 --> 01:41:01,720
I know.

1523
01:41:01,720 --> 01:41:03,480
I know better than you.

1524
01:41:03,480 --> 01:41:05,160
You can still get to this issue.

1525
01:41:05,160 --> 01:41:06,280
So please try.

1526
01:41:06,280 --> 01:41:08,360
Please write a blog.

1527
01:41:08,640 --> 01:41:11,240
You can still get issues. I am not.

1528
01:41:11,240 --> 01:41:12,480
I will not allow this.

1529
01:41:12,480 --> 01:41:14,560
Please please user try catch block. Okay.

1530
01:41:15,000 --> 01:41:17,560
So the proper way to avoid this

1531
01:41:17,800 --> 01:41:21,120
issue is to use. Yep.

1532
01:41:22,080 --> 01:41:24,040
In Java is 25 years old.

1533
01:41:24,040 --> 01:41:28,920
Java at least knows what is possible
and what is not possible

1534
01:41:29,640 --> 01:41:31,560
by writing

1535
01:41:32,760 --> 01:41:33,640
in false condition.

1536
01:41:33,640 --> 01:41:36,600
So Java Sea is hence the

1537
01:41:37,200 --> 01:41:40,440
please provide a dry

1538
01:41:40,480 --> 01:41:44,040
catch block
if you want to avoid this issue.

1539
01:41:44,040 --> 01:41:45,200
If those conditions.

1540
01:41:45,200 --> 01:41:50,440
Yes, you are a good programmer,
but I know better than you.

1541
01:41:50,440 --> 01:41:54,840
You cannot avoid this issue by writing.

1542
01:41:54,960 --> 01:41:58,440
If health condition. So write it.

1543
01:41:58,440 --> 01:42:00,240
Try a block

1544
01:42:03,680 --> 01:42:06,240
and write a proper

1545
01:42:09,040 --> 01:42:13,440
catch block.

1546
01:42:13,440 --> 01:42:16,120
Stop drinking coffee Night Programmer.

1547
01:42:16,120 --> 01:42:18,280
How does no coffee

1548
01:42:18,480 --> 01:42:43,560
night?

1549
01:42:43,560 --> 01:42:43,880
Hello.

1550
01:42:43,960 --> 01:42:46,000
You were also browsing the Facebook

1551
01:42:47,280 --> 01:42:50,600
during the break.

1552
01:42:50,600 --> 01:42:54,320
I just here this on my Facebook

1553
01:43:01,960 --> 01:43:03,320
is what I do all the time.

1554
01:43:03,320 --> 01:43:08,560
One bucket.

1555
01:43:08,560 --> 01:43:11,640
So advice is it clear now

1556
01:43:13,720 --> 01:43:18,000
why in some of the cases
Java forcing us to write.

1557
01:43:18,120 --> 01:43:20,800
So let me let me do this again. So

1558
01:43:23,200 --> 01:43:25,920
so let's say for example again,
let me do the same thing.

1559
01:43:26,200 --> 01:43:29,840
So I write

1560
01:43:29,840 --> 01:43:31,560
I again.

1561
01:43:31,560 --> 01:43:34,840
So this time I am writing at blocks
and let me

1562
01:43:36,360 --> 01:43:40,120
try to build that file

1563
01:43:41,200 --> 01:43:43,560
right after we enter

1564
01:43:47,160 --> 01:43:47,760
the try.

1565
01:43:47,760 --> 01:43:50,080
BLOCK Okay, let's see what happens.

1566
01:43:51,280 --> 01:43:55,160
So previously my program was terminated

1567
01:43:55,160 --> 01:43:59,360
abruptly and I was unable
to execute this line of code.

1568
01:43:59,360 --> 01:44:00,680
Let's let's see what happens.

1569
01:44:00,680 --> 01:44:03,200
Now I am using try get blocks.

1570
01:44:03,200 --> 01:44:05,880
So when Java was this

1571
01:44:05,880 --> 01:44:08,920
line file vice president

1572
01:44:08,920 --> 01:44:10,080
file was present.

1573
01:44:10,080 --> 01:44:10,520
We end.

1574
01:44:10,520 --> 01:44:13,960
We are inside the API now let me delete

1575
01:44:15,040 --> 01:44:16,800
this file. Okay.

1576
01:44:16,800 --> 01:44:20,280
And let's let's see how the how they try
catch

1577
01:44:21,400 --> 01:44:22,600
behaves.

1578
01:44:22,600 --> 01:44:27,600
So if I exec you to this line
file is not present

1579
01:44:27,600 --> 01:44:33,280
at this specific moment, I will be getting
a file not found exception

1580
01:44:34,280 --> 01:44:37,840
and the cache block will be executed.

1581
01:44:37,840 --> 01:44:41,040
And then after that all the code

1582
01:44:41,040 --> 01:44:45,240
will be executed as per norm well.

1583
01:44:45,360 --> 01:44:46,200
Slow.

1584
01:44:46,200 --> 01:44:48,480
Okay.

1585
01:44:48,480 --> 01:44:51,640
Previously on
this class are different episode.

1586
01:44:52,000 --> 01:44:54,600
So you guys see how. How I get blocks.

1587
01:44:54,600 --> 01:44:58,840
They are avoiding the issues
no matter, what happens?

1588
01:44:59,160 --> 01:45:02,880
But if those conditions were not able
to avoid the issues

1589
01:45:04,360 --> 01:45:07,000
in the case of try cache blocks,

1590
01:45:07,520 --> 01:45:11,000
the moment we encounter an error,

1591
01:45:12,000 --> 01:45:16,400
we enter inside the cache block,
leaving everything inside.

1592
01:45:16,400 --> 01:45:20,840
We try, but we are still able to catch
that specific issue.

1593
01:45:21,680 --> 01:45:23,360
So that's why

1594
01:45:23,760 --> 01:45:25,680
try catch blocks.

1595
01:45:25,680 --> 01:45:31,920
They are better than if those conditions
and that's why

1596
01:45:32,440 --> 01:45:35,160
Java forces us to write

1597
01:45:35,160 --> 01:45:39,040
a catch block in certain scenarios.

1598
01:45:39,480 --> 01:45:43,760
And they have created a separate category
for these errors

1599
01:45:44,200 --> 01:45:48,960
and they called it checked exceptions.

1600
01:45:48,960 --> 01:45:51,800
Does it make sense,
guys? Jack towards it unchecked

1601
01:45:59,320 --> 01:46:01,120
and then

1602
01:46:03,040 --> 01:46:04,800
there is another type

1603
01:46:04,800 --> 01:46:08,280
which are categorized as errors.

1604
01:46:09,440 --> 01:46:12,360
So adders are terrible things.

1605
01:46:13,240 --> 01:46:15,240
For example,

1606
01:46:15,720 --> 01:46:18,840
your Java program was executing something

1607
01:46:19,440 --> 01:46:23,840
and your processor fails, or maybe

1608
01:46:24,960 --> 01:46:28,240
your real program was in execution and

1609
01:46:30,160 --> 01:46:31,560
someone unplugs

1610
01:46:31,560 --> 01:46:33,600
power supply off your computer,

1611
01:46:34,560 --> 01:46:36,600
your program was in execution

1612
01:46:36,600 --> 01:46:39,720
and your JVM crashes. So

1613
01:46:40,960 --> 01:46:43,400
is is there anything

1614
01:46:43,400 --> 01:46:45,200
it can try catch?

1615
01:46:45,200 --> 01:46:48,120
BLOCK Avoid someone

1616
01:46:48,400 --> 01:46:52,600
unplugging your computer from power
can try to block do something.

1617
01:46:52,600 --> 01:47:01,560
In this case, if your processor fails,

1618
01:47:02,160 --> 01:47:11,360
cancel Java program or as a programmer,
can you do something to avoid that?

1619
01:47:11,360 --> 01:47:16,080
So those type of issues which are beyond

1620
01:47:16,080 --> 01:47:19,600
all beyond are Java's control.

1621
01:47:20,000 --> 01:47:22,080
They are categorized as errors.

1622
01:47:22,560 --> 01:47:26,040
Okay, so neither we nor Java

1623
01:47:26,280 --> 01:47:29,720
can do anything
about these type of issues.

1624
01:47:30,120 --> 01:47:33,840
So if your program encounters
these are situations

1625
01:47:34,160 --> 01:47:36,520
memory failure, hard drive, failure,

1626
01:47:37,200 --> 01:47:40,880
complete computer is destroyed,
someone unplugs

1627
01:47:40,880 --> 01:47:44,920
you from power or someone just crashed.

1628
01:47:44,920 --> 01:47:49,920
Something crashes the auditorium,
all of these issues, they are

1629
01:47:51,480 --> 01:47:53,640
called errors

1630
01:47:53,640 --> 01:47:56,280
and there
is really nothing we can do about them.

1631
01:47:56,600 --> 01:48:02,040
So we never try to get them
or try to do anything.

1632
01:48:02,040 --> 01:48:05,120
It's like someone is already dead

1633
01:48:05,600 --> 01:48:09,840
and he had maybe a kidney issue
or something.

1634
01:48:10,080 --> 01:48:11,560
Something, something.

1635
01:48:11,560 --> 01:48:14,160
And now we are trying
to replace his kidney.

1636
01:48:14,520 --> 01:48:18,840
So if that person is already dead,
then there is nothing we can do about it.

1637
01:48:18,840 --> 01:48:19,480
Right?

1638
01:48:19,640 --> 01:48:24,720
So those issues which are totally,
totally beyond our control.

1639
01:48:24,720 --> 01:48:28,960
Okay, well, we cannot do anything at all
about those issues.

1640
01:48:29,160 --> 01:48:31,440
They are categorized under address. Okay?

1641
01:48:31,680 --> 01:48:34,640
So we don't care when we encounter that

1642
01:48:34,640 --> 01:48:37,080
and we say, okay,
this is something that we cannot

1643
01:48:38,280 --> 01:48:39,800
we cannot do about anything.

1644
01:48:39,800 --> 01:48:42,960
So this is the target category
of our types of error.

1645
01:48:43,000 --> 01:48:49,080
So there are types of errors
which can be avoided by writing back core

1646
01:48:49,320 --> 01:48:52,400
if health conditions
or using breakage blocks, what are

1647
01:48:52,520 --> 01:48:55,520
what are they called guys,
what type of exceptions

1648
01:48:55,520 --> 01:49:00,160
they are called, which can be avoided
writing better code if health condition

1649
01:49:00,480 --> 01:49:04,440
or breakage
they are called unchecked exceptions.

1650
01:49:05,320 --> 01:49:08,720
The types of errors
which can only be avoided

1651
01:49:08,720 --> 01:49:11,680
by writing dry cache blocks.

1652
01:49:12,040 --> 01:49:15,000
They are called jacketed exceptions.

1653
01:49:15,000 --> 01:49:19,800
The errors which can not be avoided
by doing any of these things.

1654
01:49:19,800 --> 01:49:21,960
They are called attacks in Java.

1655
01:49:22,760 --> 01:49:26,000
I hope it is clear so both error

1656
01:49:26,000 --> 01:49:30,560
and exception are derived from Java
or landlord variable.

1657
01:49:30,560 --> 01:49:32,640
So as per the hierarchy.

1658
01:49:32,640 --> 01:49:36,880
And there is this true
which is parent of all

1659
01:49:36,880 --> 01:49:39,920
the errors classes.

1660
01:49:39,920 --> 01:49:43,480
So as per hierarchy,
the errors and the exceptions,

1661
01:49:44,040 --> 01:49:48,440
they are both derived, they are both child
classes all through it, but

1662
01:49:49,000 --> 01:49:51,880
But the main difference between error

1663
01:49:51,880 --> 01:49:55,440
and exception is the kind of error
they represent.

1664
01:49:55,960 --> 01:49:58,440
So for example, Avatar error errors

1665
01:49:58,560 --> 01:50:02,280
are serious issues and abnormal conditions

1666
01:50:03,040 --> 01:50:07,600
that most applications
should not try to handle.

1667
01:50:07,960 --> 01:50:11,080
Why be because there is really nothing
that we can do.

1668
01:50:11,760 --> 01:50:12,760
When you are there

1669
01:50:12,760 --> 01:50:16,960
that you don't know you are dead,
then pain is only felt by others.

1670
01:50:16,960 --> 01:50:19,320
The same thing
happens when you are stupid.

1671
01:50:20,480 --> 01:50:25,160
This so error defines problems

1672
01:50:25,160 --> 01:50:31,160
that are not expected to be caught
under normal circumstances.

1673
01:50:31,160 --> 01:50:36,960
This by program for example memory
at the hardware that a JVM matters.

1674
01:50:37,160 --> 01:50:44,040
We we cannot do anything about that.

1675
01:50:44,040 --> 01:50:45,760
And what are exceptions.

1676
01:50:45,760 --> 01:50:49,800
So exceptions are things
that we can handle and we should handle.

1677
01:50:50,040 --> 01:50:53,040
Are that a reasonable application

1678
01:50:53,040 --> 01:50:57,440
might want to catch or conditions
within the code?

1679
01:50:57,440 --> 01:50:59,400
A developer can handle that.

1680
01:50:59,400 --> 01:51:01,360
They are a lightweight at that.

1681
01:51:01,360 --> 01:51:03,720
What we can do, we can do something about

1682
01:51:04,520 --> 01:51:07,720
such conditions
and take necessary corrective measures.

1683
01:51:07,720 --> 01:51:08,520
Right?

1684
01:51:09,240 --> 01:51:11,120
Maybe file is not.

1685
01:51:11,120 --> 01:51:15,600
But why not check or over the internet
still not found?

1686
01:51:15,960 --> 01:51:18,000
Maybe we want to send an email to a

1687
01:51:19,000 --> 01:51:21,360
person who is responsible

1688
01:51:21,360 --> 01:51:24,960
of taking care of that file.

1689
01:51:24,960 --> 01:51:27,400
And if internet is not found, maybe

1690
01:51:27,640 --> 01:51:30,840
by printing a user friendly
message on the console

1691
01:51:31,920 --> 01:51:33,000
and something like that.

1692
01:51:33,000 --> 01:51:35,480
So errors can't be handled.

1693
01:51:35,480 --> 01:51:37,840
Example out of memory error. Right?

1694
01:51:38,160 --> 01:51:43,920
You cannot go to your Java code,
cannot go buy some RAM

1695
01:51:44,120 --> 01:51:46,960
or and then install it on your computer.

1696
01:51:46,960 --> 01:51:50,840
If you faced this out of memory error.

1697
01:51:50,840 --> 01:51:56,120
But if you face error index out of bound
exception, you you can actually check

1698
01:51:56,440 --> 01:51:59,800
Jakob that index before you

1699
01:52:00,120 --> 01:52:08,840
try to access the element on that index.

1700
01:52:08,840 --> 01:52:19,840
So these are errors and exceptions.

1701
01:52:19,840 --> 01:52:23,680
So what we can do about exceptions.

1702
01:52:23,680 --> 01:52:28,640
Well why use exception
and what is the benefit of that.

1703
01:52:28,640 --> 01:52:31,800
We get the first thing we can again

1704
01:52:31,800 --> 01:52:36,400
convert system
and over into user friendly error message

1705
01:52:37,120 --> 01:52:40,400
by using exception
handling feature of off Java,

1706
01:52:40,840 --> 01:52:43,800
we can easily

1707
01:52:43,800 --> 01:52:48,480
find a big complete set trace of the error

1708
01:52:49,400 --> 01:52:52,800
and then we can fix that.

1709
01:52:52,800 --> 01:52:54,160
Add it. Think

1710
01:52:55,800 --> 01:52:56,920
this picture Alexa.

1711
01:52:56,920 --> 01:53:02,080
You know it was sold for
thousands of dollars over the internet.

1712
01:53:02,640 --> 01:53:05,520
This This girl, it is very rich now

1713
01:53:09,120 --> 01:53:11,520
when we divide

1714
01:53:11,800 --> 01:53:14,160
I like to try doing something like this.

1715
01:53:14,400 --> 01:53:18,680
Blow up a petrol pump
and take a smiling selfie with that.

1716
01:53:18,680 --> 01:53:21,360
Maybe
you can be a millionaire in the future.

1717
01:53:22,240 --> 01:53:25,520
Do you know about updates
when we know that if one of their heads

1718
01:53:26,000 --> 01:53:30,000
it is overriding of some metadata,
just replace some files,

1719
01:53:30,240 --> 01:53:33,000
replacing the file
and overwriting the methods, but

1720
01:53:35,000 --> 01:53:41,360
it's have fun calling the help desk.

1721
01:53:41,360 --> 01:53:45,240
I unplugged your computer
just to achieve this fixes.

1722
01:53:45,240 --> 01:53:48,120
Someone will write the code for

1723
01:53:50,080 --> 01:53:51,280
when we divide.

1724
01:53:51,280 --> 01:53:54,960
But don't tell that you blow up
the petrol pump or something like that.

1725
01:53:55,200 --> 01:53:58,160
When we divide any number by zero
and then system

1726
01:53:58,160 --> 01:54:00,880
generates by zero exception.

1727
01:54:01,280 --> 01:54:06,160
So this is not understandable by a user
and we can convert this message into user

1728
01:54:06,160 --> 01:54:07,080
friendly error message

1729
01:54:07,080 --> 01:54:11,040
like don't enter a zero for denominator
or something like that.

1730
01:54:11,520 --> 01:54:14,000
So why, why learn exception.

1731
01:54:14,000 --> 01:54:16,920
Why we should know about exceptions
converting

1732
01:54:17,280 --> 01:54:20,200
complex
error messages to something simpler

1733
01:54:21,200 --> 01:54:22,720
getting the complete

1734
01:54:22,720 --> 01:54:27,000
stack press of the error by stack press
I mean getting exact line

1735
01:54:27,000 --> 01:54:30,880
numbers and method
names, class names packages and name

1736
01:54:30,920 --> 01:54:33,760
package names to find and fix your issues.

1737
01:54:35,160 --> 01:54:38,040
And then third, providing a backup core.

1738
01:54:38,600 --> 01:54:41,120
So that is the primary code fails

1739
01:54:42,640 --> 01:54:44,160
the backup code or takes

1740
01:54:44,160 --> 01:54:49,440
care of that failure.

1741
01:54:49,440 --> 01:54:53,400
So it's like you are going on a vacation,
you you have a flag tied

1742
01:54:53,680 --> 01:54:58,240
and now you have maybe a
maybe some kind of guidance in your car

1743
01:54:58,240 --> 01:55:03,120
or an extra by and you replace that tired
and you continue your journey.

1744
01:55:03,120 --> 01:55:06,600
Right? So this is something like that,

1745
01:55:06,600 --> 01:55:10,000
having that backup mode,
making things a simpler,

1746
01:55:10,520 --> 01:55:15,320
finding and fixing your issues easily.

1747
01:55:15,320 --> 01:55:18,920
So this is, again, the hierarchy.

1748
01:55:18,920 --> 01:55:23,280
So exception
a class is for exceptional conditions.

1749
01:55:23,280 --> 01:55:26,320
That program should catch some exceptions.

1750
01:55:26,320 --> 01:55:28,240
We should catch we should fix them.

1751
01:55:28,240 --> 01:55:30,880
We should convert the error messages
to something simple.

1752
01:55:31,360 --> 01:55:36,200
This class is extended to create the user
specific exception classes.

1753
01:55:36,480 --> 01:55:40,360
So for example, Java
guys created this automatic null point

1754
01:55:40,360 --> 01:55:42,080
that are other unchecked

1755
01:55:42,080 --> 01:55:45,720
exceptions, you guys can create your own
exceptions as well.

1756
01:55:45,840 --> 01:55:48,720
And today
we will create our own exceptions. That

1757
01:55:49,800 --> 01:55:50,280
runtime

1758
01:55:50,280 --> 01:55:52,880
exceptions is a subclass of exception.

1759
01:55:53,440 --> 01:55:55,480
So from exception

1760
01:55:56,800 --> 01:55:58,600
we have another class

1761
01:55:58,600 --> 01:56:01,440
that is called a runtime exception.

1762
01:56:03,040 --> 01:56:06,560
And then we have these all the

1763
01:56:08,640 --> 01:56:10,880
unchecked exception.

1764
01:56:11,440 --> 01:56:14,560
So these are runtime exception exceptions.

1765
01:56:14,560 --> 01:56:19,000
They are only at runtime
they encounter only runtime,

1766
01:56:19,000 --> 01:56:23,360
but these Java will will warm new

1767
01:56:23,880 --> 01:56:26,400
compile time as well.

1768
01:56:26,400 --> 01:56:30,880
If you try to write a piece of code
that can have these issues.

1769
01:56:31,320 --> 01:56:38,680
So that's why they are called the runtime.

1770
01:56:38,680 --> 01:56:42,120
Runtime
exception is a subclass of exception.

1771
01:56:42,120 --> 01:56:48,040
Exceptions under this class are
automatically defined for programs, right?

1772
01:56:48,080 --> 01:56:50,240
You guys don't need to provide
cache block.

1773
01:56:50,760 --> 01:56:53,280
You are not forced and it is

1774
01:56:53,280 --> 01:56:56,400
are typically ignored in code.

1775
01:56:56,400 --> 01:57:02,400
You can't really do anything
about an error.

1776
01:57:02,400 --> 01:57:06,000
Example out of memory
error will arise in this type of file.

1777
01:57:06,000 --> 01:57:11,920
It is not possible to handle in code.

1778
01:57:11,920 --> 01:57:14,040
So types of exceptions.

1779
01:57:14,920 --> 01:57:17,440
And now this is the difference
between tagged and unchecked.

1780
01:57:17,520 --> 01:57:22,240
So let me repeat again
the except actions that are mandatory

1781
01:57:23,560 --> 01:57:25,440
to handle in code

1782
01:57:25,440 --> 01:57:29,040
by providing take X block

1783
01:57:38,000 --> 01:57:40,040
and are outside

1784
01:57:40,040 --> 01:57:44,520
the control of program
but are called checked exceptions.

1785
01:57:44,520 --> 01:57:46,640
It's a very famous interview question
guys.

1786
01:57:46,960 --> 01:57:49,840
The difference between tagged
and unchecked exceptions.

1787
01:57:49,840 --> 01:57:52,440
So please, please
let me know if something is not there.

1788
01:57:53,160 --> 01:57:55,320
They are forced by compiler.

1789
01:57:55,320 --> 01:57:57,640
What do I mean by forced by compiler?

1790
01:57:58,000 --> 01:58:00,560
We will be getting an error
if we don't wrap

1791
01:58:00,840 --> 01:58:03,000
discord with the try get block

1792
01:58:04,240 --> 01:58:08,120
as the compiler checks them
during compilation to see whether

1793
01:58:08,120 --> 01:58:12,040
the programmer has handled them
or not by writing a trick at

1794
01:58:13,560 --> 01:58:17,960
then the other type
which are not mandatory to handle in code

1795
01:58:18,400 --> 01:58:23,560
and are in control of a programmer,
can be avoided by writing good code.

1796
01:58:24,200 --> 01:58:27,360
We're writing if those conditions
are checking the index before

1797
01:58:27,360 --> 01:58:33,480
you try to get the element
that that index are called unchecked.

1798
01:58:33,480 --> 01:58:37,520
Unchecked exceptions comprise of time

1799
01:58:37,560 --> 01:58:40,960
exceptions like for example
runtime and its subclass. It

1800
01:58:44,560 --> 01:58:46,880
will be had to also ask

1801
01:58:47,200 --> 01:58:55,640
like this question.

1802
01:58:55,640 --> 01:59:01,400
So these are some examples
of the exceptions

1803
01:59:01,600 --> 01:59:03,960
and it might be no point

1804
01:59:05,160 --> 01:59:08,560
at index out of bounds thing
index on the fall.

1805
01:59:08,680 --> 01:59:11,640
Negative side that is so all of them,
they can be avoided

1806
01:59:11,640 --> 01:59:14,040
by simply writing a false conditions.

1807
01:59:15,240 --> 01:59:19,320
But these ones class not found exception.

1808
01:59:19,320 --> 01:59:31,920
Do you guys remember this exception?

1809
01:59:31,920 --> 01:59:37,680
Guys, do you guys remember this class
not found exception?

1810
01:59:37,680 --> 01:59:42,600
Where When did you guys encounter this?

1811
01:59:42,600 --> 01:59:45,360
When jobs were not present. Right.

1812
01:59:45,640 --> 01:59:49,320
So can we write a piece of code
to create those jobs

1813
01:59:49,320 --> 01:59:52,280
or to avoid this issue in any other way?

1814
01:59:52,760 --> 01:59:54,040
No. Right.

1815
01:59:54,040 --> 01:59:57,400
So we can not do anything about

1816
01:59:58,440 --> 02:00:01,640
this class
not found exception by just writing.

1817
02:00:01,640 --> 02:00:05,880
If as conditions, for instance,
you will really be getting

1818
02:00:05,880 --> 02:00:09,480
to the exceptions, the most famous one
will be a school exception

1819
02:00:09,920 --> 02:00:13,720
and file
not found exception in the chapter. Once

1820
02:00:16,800 --> 02:00:18,280
this is just

1821
02:00:18,840 --> 02:00:19,640
an example.

1822
02:00:19,640 --> 02:00:21,440
So 50 dividing.

1823
02:00:21,440 --> 02:00:24,440
We are trying to divide by zeros
arithmetic exception.

1824
02:00:24,960 --> 02:00:26,960
If We have null value in a variable

1825
02:00:26,960 --> 02:00:30,840
and try to call any method
on that null pointer exception.

1826
02:00:31,560 --> 02:00:33,960
If there is an area

1827
02:00:33,960 --> 02:00:36,720
which has a size of five.

1828
02:00:36,840 --> 02:00:39,840
But I am trying to get an element
at index then.

1829
02:00:40,760 --> 02:00:42,920
So I will be getting an array

1830
02:00:42,920 --> 02:00:46,360
index out of bound exception
because I am writing bad code.

1831
02:00:46,800 --> 02:00:49,240
I am trying to get an element

1832
02:00:49,480 --> 02:00:52,760
at index ten
and that index does not exist,

1833
02:00:52,960 --> 02:00:55,800
so it's too bad for doing

1834
02:00:59,520 --> 02:01:01,080
so. This is again the same scenario.

1835
02:01:01,080 --> 02:01:06,240
We have thousands of lines of code, some
exceptions, other occurs in the middle.

1836
02:01:07,160 --> 02:01:10,160
If exception is not tangled,
then the rest of the code,

1837
02:01:10,800 --> 02:01:13,520
the moment you encounter
that issue, the code

1838
02:01:13,520 --> 02:01:16,240
after that line, it will not be executed.

1839
02:01:16,520 --> 02:01:18,600
Program will be terminated
right after that.

1840
02:01:18,600 --> 02:01:25,360
If we don't it
if if we don't handle that exception.

1841
02:01:25,360 --> 02:01:30,840
So if exception is not handled by
an exception execution abrupt forcefully.

1842
02:01:31,440 --> 02:01:34,400
If you handle exception,
then exception will be reported

1843
02:01:34,400 --> 02:01:42,080
and next code will be executed normally.

1844
02:01:42,080 --> 02:01:47,040
So how can we avoid these issues
using cache block?

1845
02:01:47,040 --> 02:01:49,480
So we have at this new construct,

1846
02:01:50,440 --> 02:01:51,280
this new block

1847
02:01:51,280 --> 02:01:54,880
of code that we call try and get.

1848
02:01:55,160 --> 02:01:57,160
So now the background is good.

1849
02:01:57,200 --> 02:01:59,360
You guys now know to add.

1850
02:01:59,360 --> 02:02:00,920
So what are exceptions?

1851
02:02:00,920 --> 02:02:03,600
What what are the types of exceptions?

1852
02:02:03,600 --> 02:02:05,520
Why we should avoid them.

1853
02:02:05,520 --> 02:02:09,200
So now let's try to learn a little bit

1854
02:02:09,200 --> 02:02:12,800
about the nitty gritty details about these

1855
02:02:14,400 --> 02:02:16,440
how this strike team works.

1856
02:02:16,440 --> 02:02:20,840
Okay, so we like to try keyword

1857
02:02:21,360 --> 02:02:24,240
then these curly brackets

1858
02:02:25,440 --> 02:02:26,440
in here

1859
02:02:26,760 --> 02:02:30,680
and the code that we think
can cause problems.

1860
02:02:30,680 --> 02:02:33,320
We put that code inside this try block

1861
02:02:34,560 --> 02:02:41,040
and we write if that code is throwing

1862
02:02:41,040 --> 02:02:46,160
only can through only one type of error,
we only write that one catch.

1863
02:02:46,160 --> 02:02:51,960
BLOCK and we specify the name of the added
the name of the class

1864
02:02:53,160 --> 02:02:56,400
that whose object will be torn

1865
02:02:56,960 --> 02:02:59,720
when we will be encountering this issue.

1866
02:03:00,240 --> 02:03:03,560
So if we if the code is controlled

1867
02:03:03,560 --> 02:03:06,800
multiple alias,
we can write a multiple get blocks

1868
02:03:07,560 --> 02:03:10,320
and which block executes

1869
02:03:10,320 --> 02:03:13,000
depends which kind of additive
we are getting.

1870
02:03:13,440 --> 02:03:17,160
So try
cache is used to handle the in Java.

1871
02:03:18,000 --> 02:03:23,040
They are also present in other programing
languages like Python and C++

1872
02:03:24,040 --> 02:03:27,840
inside
try and we tried block of statements

1873
02:03:28,680 --> 02:03:32,040
which causes execution at runtime.

1874
02:03:32,040 --> 02:03:35,880
In other words,
try block always always control

1875
02:03:36,040 --> 02:03:38,160
in the problematic code.

1876
02:03:39,280 --> 02:03:40,720
We will have a real for this.

1877
02:03:40,720 --> 02:03:43,200
Yes definitely. Definitely.

1878
02:03:44,280 --> 02:03:48,480
So we put the problematic code
inside the try block

1879
02:03:49,200 --> 02:03:51,920
and then we write the backup code

1880
02:03:51,920 --> 02:03:55,480
inside the cache blocks

1881
02:03:55,480 --> 02:03:58,040
said, Hey, is it not clear?

1882
02:03:58,040 --> 02:03:59,840
Are you confused?

1883
02:03:59,840 --> 02:04:02,840
Or maybe it's because you are seeing

1884
02:04:02,840 --> 02:04:06,320
this things for the first time.

1885
02:04:06,320 --> 02:04:21,240
You can ask
if something is not clear. Yep.

1886
02:04:21,240 --> 02:04:23,320
Yeah, it's always better, you know.

1887
02:04:23,480 --> 02:04:24,000
Right.

1888
02:04:25,160 --> 02:04:28,200
So these are some of the rules, guys.

1889
02:04:28,440 --> 02:04:30,480
Some rules about the gate block

1890
02:04:32,880 --> 02:04:36,120
Try BLOCK is used to enclose the code

1891
02:04:36,640 --> 02:04:38,760
that might throw an exception.

1892
02:04:40,040 --> 02:04:43,400
A try block is always, always.

1893
02:04:43,960 --> 02:04:47,040
So we cannot just try to we try.

1894
02:04:47,040 --> 02:04:49,600
It must have at least one catch.

1895
02:04:49,600 --> 02:04:54,000
BLOCK
So try block is always followed by a catch

1896
02:04:54,040 --> 02:04:57,720
or finally block this finally,
something else that I will teach you.

1897
02:04:58,160 --> 02:05:03,360
So which handles the exception
that occurs in the Associated Try to block

1898
02:05:04,920 --> 02:05:06,520
it. Try block must be

1899
02:05:06,520 --> 02:05:16,760
followed by a catch block
or finally block.

1900
02:05:16,760 --> 02:05:20,120
So let me first show you

1901
02:05:22,000 --> 02:05:34,200
some examples in here.

1902
02:05:34,200 --> 02:05:35,080
All right.

1903
02:05:35,080 --> 02:05:41,720
So we should always write it.

1904
02:05:41,760 --> 02:05:43,920
Try a block

1905
02:05:51,120 --> 02:05:53,840
to catch the issues

1906
02:05:54,360 --> 02:05:58,840
that are for control.

1907
02:05:58,840 --> 02:06:09,440
So, for example,

1908
02:06:09,440 --> 02:06:14,200
like this, if I am,

1909
02:06:15,480 --> 02:06:17,880
let's say, declaring an anti

1910
02:06:34,440 --> 02:06:36,920
so I can get

1911
02:06:38,080 --> 02:06:39,720
negative at a side

1912
02:06:39,720 --> 02:06:54,440
exception, if I am saying,

1913
02:06:54,440 --> 02:06:56,280
let's say

1914
02:07:27,480 --> 02:07:28,920
so, this is how I write

1915
02:07:28,920 --> 02:07:32,120
the catch blocks
and all of them can have the same name.

1916
02:07:32,280 --> 02:07:35,480
All Yes, it's just a variable name.

1917
02:07:35,480 --> 02:07:38,280
Here's a local variable
so you can have same E

1918
02:07:38,560 --> 02:07:41,680
if this is only visible
inside these brackets,

1919
02:07:41,680 --> 02:07:44,480
it's like the parameters of the methods
you remember.

1920
02:07:45,080 --> 02:07:48,040
We can have the same variable name in

1921
02:07:48,560 --> 02:07:52,840
all of the methods inside a class
because local variables

1922
02:07:52,840 --> 02:08:31,040
are only visible inside of that method.

1923
02:08:31,040 --> 02:08:33,800
So I have intentionally introduced

1924
02:08:35,120 --> 02:08:35,920
problematic

1925
02:08:35,920 --> 02:08:38,640
for I have written problematic code

1926
02:08:39,120 --> 02:08:43,040
and this is in my lines

1927
02:08:43,080 --> 02:08:44,800
above the

1928
02:08:48,000 --> 02:09:01,440
right.

1929
02:09:01,440 --> 02:09:04,600
Actually let me do this
so that you guys can easily answer

1930
02:09:04,640 --> 02:09:07,120
your line one is to

1931
02:09:16,920 --> 02:09:19,760
could be

1932
02:09:19,760 --> 02:09:24,360
who or you?

1933
02:09:24,360 --> 02:09:40,640
The 1a9

1934
02:09:49,480 --> 02:09:54,920
and and

1935
02:09:56,640 --> 02:09:58,640
let me make it smaller.

1936
02:09:58,640 --> 02:10:01,880
Is it reliable guys

1937
02:10:03,280 --> 02:10:07,280
in the three. Okay

1938
02:10:08,280 --> 02:10:13,160
so now let's try to figure out
the nitty gritty details about this drive.

1939
02:10:13,560 --> 02:10:16,680
So can you guys
tell me if I insecure this for

1940
02:10:19,440 --> 02:10:20,240
what output.

1941
02:10:20,240 --> 02:10:35,280
I agree that.

1942
02:10:35,280 --> 02:10:37,960
Then tell me the line numbers

1943
02:10:46,920 --> 02:10:47,520
eight.

1944
02:10:47,640 --> 02:10:49,680
Let me actually remove this for now

1945
02:10:50,400 --> 02:10:53,840
and I like minimal this one now.

1946
02:10:53,840 --> 02:10:56,320
Okay we will discuss what this instead.

1947
02:10:56,320 --> 02:10:57,720
Methodism,

1948
02:10:58,760 --> 02:11:01,440
just tell me the line numbers.

1949
02:11:01,440 --> 02:11:03,760
If I execute this piece of code

1950
02:11:05,000 --> 02:11:09,040
so I will be getting one.

1951
02:11:09,040 --> 02:11:10,320
I will be getting to

1952
02:11:18,120 --> 02:11:21,600
one two.

1953
02:11:21,600 --> 02:11:23,400
So seven

1954
02:11:23,760 --> 02:11:25,040
and 11 days.

1955
02:11:25,040 --> 02:11:28,440
Everyone, please try to answer this

1956
02:11:29,840 --> 02:12:08,840
1 to 711.

1957
02:12:08,840 --> 02:12:16,480
Let me execute this.

1958
02:12:16,480 --> 02:12:20,280
So we got one, two, seven and 11.

1959
02:12:20,800 --> 02:12:23,680
Why we got this

1960
02:12:23,920 --> 02:12:25,400
this output. Right?

1961
02:12:25,400 --> 02:12:30,720
So this line is outside of the dry block.

1962
02:12:30,720 --> 02:12:33,440
It is not causing any problem.

1963
02:12:33,720 --> 02:12:36,080
I will tell you. Why not why nine.

1964
02:12:36,920 --> 02:12:40,280
So I will get this line eight.

1965
02:12:40,320 --> 02:12:42,760
It doesn't have any issues
writing in all the cases.

1966
02:12:42,800 --> 02:12:46,080
Then Java enters inside this dry block.

1967
02:12:47,160 --> 02:12:49,680
Java is the key of this line. No issues.

1968
02:12:49,680 --> 02:12:53,000
So it is printed

1969
02:12:53,000 --> 02:12:54,080
in here.

1970
02:12:54,240 --> 02:12:57,120
The second line no issues
if it's printed in here.

1971
02:12:57,720 --> 02:13:00,320
When Java tries to execute this

1972
02:13:00,320 --> 02:13:04,560
line, Java encounters a problem.

1973
02:13:04,960 --> 02:13:09,360
The moment Java encountered the problem,
all the lines

1974
02:13:10,520 --> 02:13:14,880
below piece of code are ignored

1975
02:13:16,320 --> 02:13:18,600
and Java starts

1976
02:13:18,680 --> 02:13:21,840
to search for the proper catch block

1977
02:13:22,640 --> 02:13:26,360
and we get the first get block
that it encounters from top.

1978
02:13:27,400 --> 02:13:30,000
Again this handle

1979
02:13:30,080 --> 02:13:32,520
the adult that occurred above.

1980
02:13:33,240 --> 02:13:35,680
Yes this catch block

1981
02:13:36,240 --> 02:13:39,920
can handle the issue which occurred

1982
02:13:39,920 --> 02:13:43,120
in the prior block so Java will execute

1983
02:13:43,120 --> 02:13:45,840
to whatever is present inside

1984
02:13:46,440 --> 02:13:48,960
this catch block and ignores

1985
02:13:50,000 --> 02:13:52,520
the rest of the catch blocks.

1986
02:13:52,520 --> 02:13:58,120
And then this line, it is outside of the
try guys, so it will again be executed.

1987
02:13:58,440 --> 02:14:00,920
Okay, no issues. Exactly.

1988
02:14:01,000 --> 02:14:10,680
And now guys why we got one two, 711.

1989
02:14:10,680 --> 02:14:12,720
So if

1990
02:14:13,800 --> 02:14:17,040
if I comment this out,

1991
02:14:18,240 --> 02:14:20,120
can you tell me now?

1992
02:14:20,120 --> 02:14:23,800
But instead, Trace, I will tell you
you'll get to what this print trace

1993
02:14:23,800 --> 02:14:29,040
is doing.

1994
02:14:29,040 --> 02:14:32,400
Yes. It's the best practice to write

1995
02:14:33,720 --> 02:14:35,120
separate try

1996
02:14:35,120 --> 02:14:38,640
catch block for separate type of issues.

1997
02:14:39,000 --> 02:14:45,080
If you can.

1998
02:14:45,080 --> 02:14:58,320
One, two, three, eight and 11.

1999
02:14:58,320 --> 02:15:01,080
So I got one, two, three, eight, 11.

2000
02:15:01,080 --> 02:15:04,160
Is there anyone who is not sure

2001
02:15:04,160 --> 02:15:06,960
why we are getting one, two, three,
eight and 11?

2002
02:15:07,800 --> 02:15:12,600
Is there anyone confused about this?

2003
02:15:12,600 --> 02:15:16,160
Me Rena So we are getting this one

2004
02:15:17,160 --> 02:15:19,640
because it's above the catch block.

2005
02:15:19,640 --> 02:15:21,720
There is no issues in here, right?

2006
02:15:22,560 --> 02:15:27,600
It is not causing any type
of exceptions, this line of code.

2007
02:15:27,600 --> 02:15:30,640
So that's why it is executed
without any issue

2008
02:15:31,680 --> 02:15:34,000
then dollar and translate bycatch.

2009
02:15:34,080 --> 02:15:35,520
BLOCK So what do you think?

2010
02:15:35,520 --> 02:15:39,360
Which number
should not be printed in here?

2011
02:15:39,360 --> 02:15:42,680
Which number should not be printed in here

2012
02:15:54,280 --> 02:15:56,360
or which should be printed

2013
02:15:56,360 --> 02:16:01,760
instead of one, two, three, eight, and 11?

2014
02:16:01,760 --> 02:16:03,160
What should be printed instead

2015
02:16:08,920 --> 02:16:11,840
is the E is shortcut for exception.

2016
02:16:11,840 --> 02:16:14,840
No, it can be anything.

2017
02:16:14,840 --> 02:16:15,760
It can be not.

2018
02:16:15,760 --> 02:16:27,960
It is just a standard
to write E for exceptions.

2019
02:16:27,960 --> 02:16:31,760
So the problem here basically try
can only see the first letter

2020
02:16:31,760 --> 02:16:34,680
and then does not care
about other E Yes. So

2021
02:16:36,240 --> 02:16:38,600
so the try block should have one

2022
02:16:38,600 --> 02:16:41,840
problematic code
as the other lines are ignored. Yes.

2023
02:16:43,920 --> 02:16:45,120
Yes, you are right. I do not.

2024
02:16:45,120 --> 02:16:48,320
Can you tell me which line
should not be printed in the console

2025
02:16:51,080 --> 02:16:54,080
or nothing is making sense it all of it.

2026
02:16:54,360 --> 02:17:03,320
Why we are getting this one two,
three 811.

2027
02:17:03,320 --> 02:17:06,800
Are you with us? It's fine. It's fine.

2028
02:17:06,800 --> 02:17:11,840
If you don't understand
what is going on, All of it is not making

2029
02:17:11,840 --> 02:17:34,080
sense. So

2030
02:17:35,520 --> 02:17:38,320
let four we put in

2031
02:17:40,760 --> 02:17:41,520
on which line?

2032
02:17:41,520 --> 02:17:42,280
This one

2033
02:17:46,640 --> 02:17:48,600
or I'm just intentionally

2034
02:17:48,600 --> 02:17:51,880
trying to introduce an error and

2035
02:17:52,960 --> 02:17:54,960
size can be in negative.

2036
02:17:55,120 --> 02:17:55,960
Right.

2037
02:17:55,960 --> 02:17:59,240
So but I am trying
to give a negative number as this size.

2038
02:17:59,240 --> 02:18:00,480
So what will happen?

2039
02:18:00,480 --> 02:18:05,280
I will get this exception
negative area size exception.

2040
02:18:05,920 --> 02:18:09,640
So this catch block,
whatever code is present in here,

2041
02:18:09,920 --> 02:18:13,320
Java will execute that piece of code when.

2042
02:18:13,320 --> 02:18:20,240
It encounters this specific issue.

2043
02:18:20,240 --> 02:18:23,200
That's why I have intentionally done this

2044
02:18:23,200 --> 02:18:27,800
to to show you guys
that how different errors can be handled

2045
02:18:28,040 --> 02:18:31,200
in different catch blocks is there to work

2046
02:18:31,200 --> 02:18:33,840
like in peer

2047
02:18:34,680 --> 02:18:37,880
yes Audubon one so far this out of this

2048
02:18:38,160 --> 02:18:42,000
did this exception
appear for this type of error?

2049
02:18:42,440 --> 02:18:49,080
This is the exception.

2050
02:18:49,080 --> 02:18:52,520
So let me do this, guys. If I do this

2051
02:18:55,160 --> 02:18:56,040
well, what output

2052
02:18:56,040 --> 02:19:00,160
I will see.

2053
02:19:00,160 --> 02:19:13,520
So I have written this line
outside of prior block,

2054
02:19:13,520 --> 02:19:18,440
so I will only see one
because it is outside of try.

2055
02:19:19,400 --> 02:19:21,600
So only one then. Edit

2056
02:19:21,840 --> 02:19:25,440
I am because it is outside of the try
right outside of the problem.

2057
02:19:26,160 --> 02:19:33,520
And what if I do this?

2058
02:19:33,520 --> 02:19:37,800
What if I put this line of code
inside of the cat?

2059
02:19:38,600 --> 02:20:12,480
What dating what output I will do now?

2060
02:20:12,480 --> 02:20:14,760
Yes, you guys are right.

2061
02:20:14,760 --> 02:20:19,040
So because there is a no catch block

2062
02:20:20,600 --> 02:20:23,560
to catch this issue,

2063
02:20:23,560 --> 02:20:26,520
I will go to one, two, three
and then adder.

2064
02:20:27,560 --> 02:20:30,360
So if I am writing a problematic code

2065
02:20:30,360 --> 02:20:34,760
inside of the cat again, I need a separate

2066
02:20:35,960 --> 02:20:38,040
dry cat

2067
02:20:38,400 --> 02:20:40,760
to avoid that issue.

2068
02:20:40,760 --> 02:20:41,600
Okay.

2069
02:20:41,840 --> 02:20:45,480
It also possible that I can get issues

2070
02:20:46,320 --> 02:20:51,080
inside a cat block and it is also possible

2071
02:20:52,040 --> 02:20:54,680
that I

2072
02:20:54,680 --> 02:20:58,680
can write nested predicate cat blocks.

2073
02:20:58,680 --> 02:21:00,600
They are called a nested private blocks.

2074
02:21:00,600 --> 02:21:05,240
Okay.

2075
02:21:05,240 --> 02:21:09,360
It's like if health conditions
if if conditions inside the if condition,

2076
02:21:10,680 --> 02:21:15,520
I can have nested x blocks,
I can also have.

2077
02:21:17,160 --> 02:21:18,320
Yes nested.

2078
02:21:18,320 --> 02:21:21,000
Can you guys tell me the output now?

2079
02:21:21,000 --> 02:21:24,680
So me put looks and maybe well in here

2080
02:21:26,120 --> 02:21:27,000
they were fun.

2081
02:21:27,000 --> 02:21:27,920
It's also fun.

2082
02:21:27,920 --> 02:21:28,720
I show

2083
02:21:31,480 --> 02:21:35,080
it will get funny once
I introduce more nested

2084
02:21:35,320 --> 02:21:40,160
catch blocks in here.

2085
02:21:40,160 --> 02:21:43,400
The selecting minimize this

2086
02:21:52,480 --> 02:21:55,440
so this will be executed no issue one.

2087
02:21:55,440 --> 02:21:56,680
I will be getting one.

2088
02:21:56,680 --> 02:21:58,440
This will be executed. No issues.

2089
02:21:58,440 --> 02:22:01,800
I will be getting know issues
three in here.

2090
02:22:01,800 --> 02:22:04,680
I will be getting an error.

2091
02:22:04,680 --> 02:22:07,760
So code will check if we can handle this

2092
02:22:07,760 --> 02:22:10,800
here in this sketch block
cannot handle this error.

2093
02:22:10,800 --> 02:22:12,600
So the next block will be kept.

2094
02:22:13,520 --> 02:22:16,320
But inside the next block, once

2095
02:22:16,520 --> 02:22:20,360
this is executed to encounter another,
So we will be getting it well.

2096
02:22:20,480 --> 02:22:25,160
So one, two, three, and then I'll offer
that if it is executed,

2097
02:22:25,240 --> 02:22:28,920
they are ignored and then we get 11.

2098
02:22:28,920 --> 02:22:31,840
So most of your answers, all of these

2099
02:22:31,920 --> 02:22:32,920
request

2100
02:22:39,040 --> 02:22:39,720
one, two, three,

2101
02:22:39,720 --> 02:22:46,600
12, eight and 11.

2102
02:22:46,600 --> 02:22:50,560
And if I introduce it right, get in here

2103
02:22:50,680 --> 02:22:54,680
inside of the try,
maybe try, get like this

2104
02:23:08,480 --> 02:23:11,760
and you guys tell me the output. Now

2105
02:23:32,080 --> 02:23:35,040
one noise,
you have two noise, three noise.

2106
02:23:35,200 --> 02:23:37,000
So one, two, three.

2107
02:23:37,200 --> 02:23:42,200
And then we encounter an issue and then
five is printed one, two, three, and five.

2108
02:23:42,800 --> 02:23:44,080
Then four is printed.

2109
02:23:44,080 --> 02:23:46,680
No issues but this one.

2110
02:23:47,120 --> 02:23:48,680
Yes, this one is also printer.

2111
02:23:48,680 --> 02:23:50,440
Three, five, five, all issues.

2112
02:23:50,440 --> 02:23:55,040
But after that we get an IT
so this is ignored.

2113
02:23:55,920 --> 02:23:56,320
Then we

2114
02:23:57,400 --> 02:23:58,440
can discuss

2115
02:23:58,440 --> 02:24:02,240
block, handle decision
and this one handle this issue? No.

2116
02:24:02,920 --> 02:24:06,440
And this handle
yes nine one can handle this issue.

2117
02:24:06,520 --> 02:24:07,360
All right.

2118
02:24:07,520 --> 02:24:10,760
So we go inside the nine, then ten
if ignored

2119
02:24:10,760 --> 02:24:18,280
and we see the 11,

2120
02:24:18,280 --> 02:24:22,320
So we get one,
two, three, five, four, five,

2121
02:24:22,320 --> 02:24:27,520
nine and 11.

2122
02:24:27,520 --> 02:24:38,120
Is there anyone who is confused? Yes.

2123
02:24:39,160 --> 02:24:41,480
Let let me not make it more complicated.

2124
02:24:41,840 --> 02:24:42,160
Okay.

2125
02:24:42,160 --> 02:24:45,560
And let me show you this example.

2126
02:24:45,560 --> 02:24:48,840
So you guys get you got the basic idea.

2127
02:24:49,680 --> 02:24:52,320
That's all I want to do.

2128
02:24:52,360 --> 02:24:54,280
So now let's get back to the slide.

2129
02:24:54,280 --> 02:24:59,400
So important point about prior block.

2130
02:25:00,320 --> 02:25:05,520
If any exception occurs in three block,

2131
02:25:05,520 --> 02:25:10,000
then control comes out to be or comes

2132
02:25:10,000 --> 02:25:14,520
out of the prior block and executes
appropriate catch BLOCK.

2133
02:25:14,800 --> 02:25:20,920
Does this make sense nowadays, the line

2134
02:25:21,600 --> 02:25:24,960
which is causing the
issue the moment that line

2135
02:25:25,920 --> 02:25:27,760
executed that line,

2136
02:25:27,760 --> 02:25:31,560
even if there are 100 lines below
that line, all will be ignored

2137
02:25:31,560 --> 02:25:35,160
and Java will look for the appropriate
catch.

2138
02:25:35,160 --> 02:25:37,080
BLOCK Is this clear? Right.

2139
02:25:37,080 --> 02:25:42,120
This line.

2140
02:25:42,120 --> 02:25:42,600
Okay.

2141
02:25:42,600 --> 02:25:46,560
After executing appropriate catch block,

2142
02:25:47,760 --> 02:25:52,680
even though we use the runtime statement,
control

2143
02:25:52,760 --> 02:25:58,440
never goes to prior block
to execute the rest of this statement.

2144
02:25:58,440 --> 02:26:02,520
So often executing the
it will never go back to try and execute

2145
02:26:02,520 --> 02:26:03,360
the rest of the code.

2146
02:26:03,360 --> 02:26:05,520
Not this is not what order does.

2147
02:26:05,800 --> 02:26:10,600
It will then come out of the traffic as
block and execute the rest of the court.

2148
02:26:10,880 --> 02:26:14,280
It never goes back to do try

2149
02:26:15,680 --> 02:26:20,760
each and every prior
block must be immediately

2150
02:26:20,760 --> 02:26:26,480
followed by a catch block
that is no intermediate.

2151
02:26:26,520 --> 02:26:29,960
The statements are allowed
between try and catch.

2152
02:26:31,000 --> 02:26:33,520
Yes. No, we can do loops,

2153
02:26:33,520 --> 02:26:35,600
but control never goes

2154
02:26:36,000 --> 02:26:39,000
back to the line which caused the problem.

2155
02:26:39,840 --> 02:26:45,160
So this line is saying that after
they try,

2156
02:26:46,600 --> 02:26:49,400
we should immediately
have the catch blocks out.

2157
02:26:49,480 --> 02:26:51,000
Like, for example, I cannot do this.

2158
02:26:51,000 --> 02:26:54,320
I cannot just make some space, declare

2159
02:26:54,320 --> 02:26:57,560
some variables in between
or something like this or not.

2160
02:26:57,600 --> 02:27:01,200
This is not
they are attached to each other

2161
02:27:01,840 --> 02:27:06,920
and we cannot work any code between
where they try and and where to get start.

2162
02:27:07,040 --> 02:27:09,640
Okay, no code in between.

2163
02:27:09,640 --> 02:27:13,040
So each and every try block
must immediately be

2164
02:27:13,680 --> 02:27:16,320
by catch block.

2165
02:27:16,320 --> 02:27:19,400
There is no intermediate
statements are allowed

2166
02:27:19,400 --> 02:27:21,840
between try and get

2167
02:27:22,720 --> 02:27:25,280
each and every prior

2168
02:27:25,360 --> 02:27:28,680
block must contain at least one catch.

2169
02:27:28,920 --> 02:27:34,720
So if you are writing it right,
there must at least one catch block.

2170
02:27:35,520 --> 02:27:38,760
But it is highly recommended
to write multiple

2171
02:27:38,760 --> 02:27:43,680
catch blocks for generating multiple user
error messages.

2172
02:27:43,720 --> 02:27:44,480
Okay.

2173
02:27:45,000 --> 02:27:50,400
So instead all suggest printing all
the time something went wrong

2174
02:27:51,400 --> 02:27:53,520
either you should

2175
02:27:53,520 --> 02:27:56,680
create separate catch blocks for the

2176
02:27:57,120 --> 02:28:00,640
that can cause problems
and you should print separate

2177
02:28:00,640 --> 02:28:05,640
out of the messages or provide
separate fixes for those issues.

2178
02:28:06,240 --> 02:28:10,560
Okay.

2179
02:28:10,560 --> 02:28:15,560
One try blocking contain
another try block that is nested or inner.

2180
02:28:15,560 --> 02:28:18,360
Now I want you to read these containers,

2181
02:28:18,840 --> 02:28:22,720
read all of these points
and let me know if something is confusing.

2182
02:28:22,720 --> 02:28:27,920
You let me know once

2183
02:28:27,920 --> 02:28:30,000
you guys are done reading

2184
02:28:56,280 --> 02:28:56,840
and all

2185
02:28:56,840 --> 02:29:04,480
looks good,

2186
02:29:04,480 --> 02:29:08,480
let me move.

2187
02:29:08,480 --> 02:29:10,680
Here's a little bit about quick break.

2188
02:29:10,680 --> 02:29:13,440
So try getting used to handle exceptions
inside.

2189
02:29:13,440 --> 02:29:17,640
Try it inside catch block
after block of statements which generates

2190
02:29:17,640 --> 02:29:21,400
user friendly error messages
and it will contain our backup code.

2191
02:29:22,360 --> 02:29:24,960
So put the problematic code inside.

2192
02:29:24,960 --> 02:29:30,080
Try in number two, saying
almost saying would not go back like loop.

2193
02:29:30,640 --> 02:29:31,800
Yes, yes. You know

2194
02:29:33,360 --> 02:29:35,200
yes you are right

2195
02:29:35,200 --> 02:29:37,960
it it's not like going

2196
02:29:37,960 --> 02:29:41,720
to the code above the line above.

2197
02:29:42,120 --> 02:29:47,920
Once you pass through that line of code.

2198
02:29:47,920 --> 02:29:52,040
Oh my God.

2199
02:29:52,040 --> 02:29:54,920
So you saw some important points about it.

2200
02:29:54,960 --> 02:29:56,520
Get blocks

2201
02:29:58,680 --> 02:30:01,680
catch block will never execute.

2202
02:30:01,680 --> 02:30:03,760
Exceptions

2203
02:30:04,000 --> 02:30:07,560
occurs in the prior block,

2204
02:30:07,560 --> 02:30:12,200
so catch block will execute the exceptions
that occur.

2205
02:30:12,240 --> 02:30:16,440
That's how I feel that.

2206
02:30:16,440 --> 02:30:21,960
So we can write multiple catch blocks
for generating easy peasy.

2207
02:30:21,960 --> 02:30:22,320
Right.

2208
02:30:22,320 --> 02:30:25,560
I like for Java just four

2209
02:30:25,840 --> 02:30:30,120
and 85 flies and around 250.

2210
02:30:30,120 --> 02:30:32,760
That was easy peasy, right?

2211
02:30:33,040 --> 02:30:36,480
And you guys will be good.

2212
02:30:36,480 --> 02:30:39,760
So still it's a lot to
then you guys will be revising,

2213
02:30:40,560 --> 02:30:44,600
but when you guys will be revising,
everything will make much more sense.

2214
02:30:44,600 --> 02:30:49,320
And will be way easier
to go through these slides.

2215
02:30:49,360 --> 02:30:52,400
Now, once you guys are done
building your frameworks,

2216
02:30:52,840 --> 02:30:54,920
everything will make much more sense.

2217
02:30:54,920 --> 02:30:58,200
And once you I recommend actually

2218
02:30:58,200 --> 02:31:00,920
when you are on your jobs,

2219
02:31:01,440 --> 02:31:04,560
once you have spent some time,
go to three months.

2220
02:31:04,560 --> 02:31:08,280
Please go back and
and read these slides again and everything

2221
02:31:08,280 --> 02:31:13,000
will make perfect sense.

2222
02:31:13,000 --> 02:31:16,360
I am trying to read
at least one lesson for that.

2223
02:31:16,360 --> 02:31:16,960
That's good.

2224
02:31:16,960 --> 02:31:20,600
That's very good, though.

2225
02:31:20,640 --> 02:31:24,680
Yes, we can write multiple catch blocks
for generating multiple user

2226
02:31:24,680 --> 02:31:30,960
error messages
to make your application strong.

2227
02:31:30,960 --> 02:31:34,640
What has told us about your two easy,
easy peasy?

2228
02:31:34,640 --> 02:31:44,800
Third,

2229
02:31:44,800 --> 02:31:48,200
how to survive back three first month.

2230
02:31:48,200 --> 02:31:51,160
You guys have already survived
those three months

2231
02:31:51,400 --> 02:31:54,200
plus three months, right?

2232
02:31:54,200 --> 02:31:56,480
No one is dead. All of you are alive

2233
02:32:01,680 --> 02:32:03,720
at that time.

2234
02:32:03,720 --> 02:32:08,000
Only one catch block is executed.

2235
02:32:08,000 --> 02:32:14,400
Even if we have multiple cat blocks,

2236
02:32:14,400 --> 02:32:16,800
Easy has its own implementation here.

2237
02:32:18,160 --> 02:32:19,920
I don't know how I am alive

2238
02:32:19,920 --> 02:32:23,120
or dead from inside.

2239
02:32:23,120 --> 02:32:28,680
She probably mean that he meant three
months at job or they will be easy peasy.

2240
02:32:29,160 --> 02:32:33,400
Most of the companies,
they will be kind of providing you

2241
02:32:33,400 --> 02:32:36,480
trainings, giving you

2242
02:32:36,480 --> 02:32:41,000
some videos or a resource will be assigned
who will be walking

2243
02:32:41,000 --> 02:32:45,520
through your different projects
of their company

2244
02:32:46,560 --> 02:32:47,520
procedures.

2245
02:32:47,520 --> 02:32:50,280
Policy
is how everything work in that company.

2246
02:32:51,440 --> 02:32:52,200
It is.

2247
02:32:52,200 --> 02:32:55,360
This scares me

2248
02:32:56,760 --> 02:32:58,800
days here is that if it is a tape,

2249
02:33:00,320 --> 02:33:05,040
find the most patient person in your team

2250
02:33:05,760 --> 02:33:09,480
and please be that the best friend

2251
02:33:09,560 --> 02:33:12,200
of that person of your company

2252
02:33:12,840 --> 02:33:15,320
in like this one week or so okay.

2253
02:33:16,200 --> 02:33:18,840
Please have a very good friendship
with that person

2254
02:33:18,840 --> 02:33:21,880
and make sure that person
has it has a lot of patience.

2255
02:33:23,040 --> 02:33:25,080
You guys, you guys will

2256
02:33:25,360 --> 02:33:29,760
be in much more good condition
if you get lucky.

2257
02:33:29,760 --> 02:33:33,320
You could even be waiting for
two plus months to get your equipment

2258
02:33:33,320 --> 02:33:36,520
and get paid to do nothing.

2259
02:33:36,520 --> 02:33:40,520
Usually companies first one or two months,
they will not be throwing

2260
02:33:40,520 --> 02:33:41,520
the tasks at you.

2261
02:33:41,520 --> 02:33:45,480
They will be providing you
some kind of training

2262
02:33:48,960 --> 02:33:52,560
the you can offer or hey,
why not offer that

2263
02:33:52,800 --> 02:33:55,560
20% to me, man I can help you out

2264
02:33:55,560 --> 02:34:01,680
in your issues. Feel

2265
02:34:04,200 --> 02:34:07,440
three months of practice,
then two months PTO,

2266
02:34:07,440 --> 02:34:12,200
then something else sounds great.

2267
02:34:12,200 --> 02:34:12,560
Yeah.

2268
02:34:16,440 --> 02:34:17,440
All right.

2269
02:34:17,440 --> 02:34:21,680
So at the time, only one

2270
02:34:21,680 --> 02:34:26,160
catch block will execute
out of multiple cash blocks.

2271
02:34:27,720 --> 02:34:31,520
In cash rock word,
declare an object of subclass,

2272
02:34:31,520 --> 02:34:38,680
and it will be internally referenced
by JVM.

2273
02:34:38,680 --> 02:34:41,800
Yes two It actually good set of all jokes

2274
02:34:41,800 --> 02:34:44,800
result in execution of more than one
catch block.

2275
02:34:44,800 --> 02:34:47,560
No, it's not possible at one time.

2276
02:34:47,560 --> 02:34:48,600
Only one catch block

2277
02:34:49,640 --> 02:34:51,240
powder, one try block.

2278
02:34:51,240 --> 02:34:54,000
I mean, I'm not talking about nested ones.

2279
02:34:54,360 --> 02:34:58,280
If we really try hard
to an interesting error, a mix of things

2280
02:34:58,280 --> 02:35:04,040
at ABC, the error that you encounter
first year of the

2281
02:35:04,040 --> 02:35:07,320
the dollar will everything after that

2282
02:35:07,320 --> 02:35:11,440
and it will try looking for appropriate

2283
02:35:12,280 --> 02:35:16,400
catch blocks it never gets the next line

2284
02:35:16,400 --> 02:35:18,640
not even the next operation.

2285
02:35:19,920 --> 02:35:23,960
For example if you try putting
multiple operations in the same line line

2286
02:35:23,960 --> 02:35:27,840
and then they are causing the moment
first error is encountered,

2287
02:35:28,920 --> 02:35:42,480
it will stop everything off contact.

2288
02:35:42,480 --> 02:35:47,080
So this will be called without breakage.

2289
02:35:47,080 --> 02:35:49,320
We have a variable.

2290
02:35:49,320 --> 02:35:54,480
I am trying to divide it by J
and we are not finding the exception.

2291
02:35:55,480 --> 02:35:59,760
This is the code we use right blocks
we have try.

2292
02:35:59,760 --> 02:36:02,120
We put the problematic code in here.

2293
02:36:02,920 --> 02:36:11,680
You guys need a break
and then we have the cache block.

2294
02:36:11,680 --> 02:36:12,960
So just give me 2 minutes.

2295
02:36:14,640 --> 02:36:15,720
The next slide is

2296
02:36:15,720 --> 02:36:18,800
about this task and I will give you a task

2297
02:36:18,800 --> 02:36:21,720
and a longer break
so that we can have some practice as well.

2298
02:36:22,680 --> 02:36:24,840
So let me just go through this slide.

2299
02:36:25,840 --> 02:36:29,760
A method to control
more than one exceptions.

2300
02:36:30,040 --> 02:36:33,120
To handle these exceptions,
we need multiple

2301
02:36:33,120 --> 02:36:35,680
catch blocks associated with a single try.

2302
02:36:36,280 --> 02:36:42,120
So, for example, instead of writing

2303
02:36:42,120 --> 02:37:22,440
this code in here,
I can also have a method.

2304
02:37:23,280 --> 02:37:42,040
Instead of all of this. Yes.

2305
02:37:42,400 --> 02:37:46,080
And my code.

2306
02:37:46,080 --> 02:37:48,000
Let me move this for now.

2307
02:37:48,000 --> 02:37:52,560
So now if I call this method in here
guys inside this try

2308
02:37:53,400 --> 02:37:57,680
all many types of adders or exceptions

2309
02:37:57,680 --> 02:38:01,920
this method can throw it
can throw multiple types of issues, right?

2310
02:38:01,960 --> 02:38:03,360
This method.

2311
02:38:03,480 --> 02:38:05,680
So I must have multiple catch blocks

2312
02:38:05,680 --> 02:38:09,640
if I want to avoid
all the issues there. What

2313
02:38:11,160 --> 02:38:13,880
I mean in here a method to control

2314
02:38:14,280 --> 02:38:16,480
more than one exceptions

2315
02:38:17,880 --> 02:38:19,120
and the code

2316
02:38:39,240 --> 02:38:41,560
welcome manner method

2317
02:38:43,280 --> 02:38:44,320
you'll get a What do you mean?

2318
02:38:44,320 --> 02:38:47,520
By main matter you mean can men can main

2319
02:38:47,920 --> 02:38:51,600
through multiple errors?

2320
02:38:51,600 --> 02:38:55,720
Any method, any method.

2321
02:38:55,720 --> 02:38:58,400
For example, in here I am.

2322
02:38:58,400 --> 02:39:01,320
I'm simply executing a method right now.

2323
02:39:01,320 --> 02:39:04,520
If let's say this method is coming
from a library

2324
02:39:04,520 --> 02:39:08,400
like selenium or coming from a library
like Apache Point.

2325
02:39:08,400 --> 02:39:11,160
I don't know what code
they have written inside that method.

2326
02:39:11,160 --> 02:39:11,800
Right?

2327
02:39:12,800 --> 02:39:15,040
So I can have multiple blocks

2328
02:39:15,040 --> 02:39:18,080
in that case as well,
or maybe a generic one in here.

2329
02:39:18,720 --> 02:39:19,600
In here.

2330
02:39:19,680 --> 02:39:22,080
So if I know what font, what kind of

2331
02:39:23,960 --> 02:39:28,440
what kind of instructions
this method is executing,

2332
02:39:28,840 --> 02:39:33,520
I will have an idea
what kind of issues it can probe.

2333
02:39:33,520 --> 02:39:36,400
So if this is the case, if I have a method

2334
02:39:37,120 --> 02:39:40,440
that is trying a more than one type
of exception

2335
02:39:40,800 --> 02:39:44,640
to handle these exceptions,
we also multiple case blocks,

2336
02:39:46,440 --> 02:39:49,480
a single try block can have multiple
catch blocks.

2337
02:39:49,600 --> 02:39:51,320
This is required when we try.

2338
02:39:51,320 --> 02:39:55,920
BLOCK had statements that generate
different types of exceptions.

2339
02:39:55,920 --> 02:39:58,200
Okay.

2340
02:39:58,200 --> 02:40:03,120
Although this is not recommended,
you should not attach

2341
02:40:03,720 --> 02:40:06,120
multiple catch blocks

2342
02:40:06,120 --> 02:40:09,000
if you are the one
who is writing that code

2343
02:40:10,920 --> 02:40:13,120
for each try catch block.

2344
02:40:13,240 --> 02:40:14,600
You should.

2345
02:40:14,600 --> 02:40:15,160
This is this.

2346
02:40:15,160 --> 02:40:18,120
This is this is a rule of thumb.

2347
02:40:18,120 --> 02:40:21,240
It's not actually mandatory
for each break.

2348
02:40:21,480 --> 02:40:23,600
BLOCK You should create a separate method

2349
02:40:24,720 --> 02:40:28,560
and inside of that method, right,
that specify should write, that specify,

2350
02:40:28,560 --> 02:40:32,280
try and get block and then call
those methods inside that file.

2351
02:40:33,160 --> 02:40:36,400
So if first catch block contains
the exception class

2352
02:40:36,400 --> 02:40:40,160
object, then subsequent
catch blocks are never executed.

2353
02:40:40,440 --> 02:40:42,720
The moment the dowel finds the appropriate

2354
02:40:43,160 --> 02:40:45,600
catch block, it
ignores the rest of the catch blocks.

2355
02:40:46,040 --> 02:40:50,880
The last catch block and multiple
catch blocks must be an exception. One.

2356
02:40:51,200 --> 02:40:53,200
So this is the last.
This should be the last one.

2357
02:40:53,560 --> 02:40:57,960
So that if you are not handling

2358
02:40:57,960 --> 02:41:03,760
a specific area,
if you don't have a specific catch.

2359
02:41:03,760 --> 02:41:07,400
BLOCK and by any chance
you encounter that error,

2360
02:41:07,800 --> 02:41:11,200
you still have something
that can catch that at it.

2361
02:41:13,040 --> 02:41:14,560
This is because our compiler

2362
02:41:14,560 --> 02:41:18,120
gives an error saying that subsequent
catch blocks have not been reached.

2363
02:41:18,360 --> 02:41:21,520
Now, some of you can try this as well.

2364
02:41:21,520 --> 02:41:25,080
Instead of putting this exception

2365
02:41:25,080 --> 02:41:30,800
at the last, if you try to put this

2366
02:41:30,920 --> 02:41:35,280
catch block as the first block
now you will get an error.

2367
02:41:35,280 --> 02:41:36,800
Can you guys tell me why?

2368
02:41:36,800 --> 02:41:41,480
Why did Java complain
when I put the exception clause first

2369
02:41:41,840 --> 02:41:43,920
and the rest of the classes after that

2370
02:41:48,200 --> 02:41:50,200
and by the way, error says

2371
02:41:50,200 --> 02:42:12,280
exception has already been caught. Yes.

2372
02:42:12,600 --> 02:42:17,200
So now I am putting more generic class
on top and specific ones later,

2373
02:42:17,640 --> 02:42:22,840
but the java looks for the catch blocks
from top to bottom.

2374
02:42:23,400 --> 02:42:27,880
No matter what kind of error we encounter,
this exception can handle all of them.

2375
02:42:28,200 --> 02:42:28,640
Right?

2376
02:42:28,640 --> 02:42:31,480
There's the parent of all the errors,
all the exceptions.

2377
02:42:32,240 --> 02:42:35,520
So what will happen
every time this block will be

2378
02:42:36,080 --> 02:42:39,000
the dollar will never be able
to execute these blocks

2379
02:42:39,240 --> 02:42:42,320
because exception can handle
all their issues.

2380
02:42:42,720 --> 02:42:44,640
Is the parent of all.

2381
02:42:44,640 --> 02:42:48,840
You will never never be able to reach
that those specification blocks.

2382
02:42:49,480 --> 02:42:51,240
So that's why you get an error.

2383
02:42:51,240 --> 02:42:55,440
If you try to put a more generic exception

2384
02:42:55,560 --> 02:43:03,960
on top of a more specific exception.

2385
02:43:03,960 --> 02:43:07,200
So these should be in proper

2386
02:43:08,160 --> 02:43:10,880
order in in proper visibility.

2387
02:43:12,400 --> 02:43:13,960
I should not put more generic

2388
02:43:13,960 --> 02:43:19,240
ones on top.

2389
02:43:19,240 --> 02:43:25,640
Yes. The exception of all
the exceptions must be lost.

2390
02:43:25,640 --> 02:43:32,040
Okay, here is your task
and let's have a break.

2391
02:43:32,040 --> 02:43:35,840
So at work we will use the exception
mostly or none of them.

2392
02:43:36,400 --> 02:43:39,120
Plus two more specific ones, then

2393
02:43:39,160 --> 02:43:50,000
more generic ones.

2394
02:43:50,000 --> 02:43:54,360
So let me tell you how to handle
input mismatch exceptions.

2395
02:43:54,840 --> 02:43:58,200
Input mismatch exception occurs
when user tries solve.

2396
02:43:58,200 --> 02:44:01,880
Let's say for example,
you are using the scanner class too

2397
02:44:03,120 --> 02:44:06,360
big may be an integer as the input

2398
02:44:06,840 --> 02:44:09,440
and if someone to enter a string

2399
02:44:10,320 --> 02:44:13,320
dialog
will throw input mismatch exception.

2400
02:44:13,320 --> 02:44:19,720
So you guys have to write a piece of code
that's going to avoid this.

2401
02:44:19,720 --> 02:44:20,280
Okay.

2402
02:44:21,920 --> 02:44:23,640
So is this problem paradise

2403
02:44:25,560 --> 02:44:27,440
declare and

2404
02:44:27,440 --> 02:44:30,240
try to take the triangle big

2405
02:44:30,240 --> 02:44:33,280
and integer
as the input using the scanner class.

2406
02:44:33,880 --> 02:44:36,360
But instead of entering the integer

2407
02:44:36,360 --> 02:44:40,880
in your console, try to enter this thing.

2408
02:44:40,880 --> 02:44:42,520
Then you will get this exception.

2409
02:44:42,520 --> 02:44:47,040
Now you have to write a to at your block
that can avoid this issue.

2410
02:44:47,760 --> 02:44:50,200
And then you have to write

2411
02:44:50,280 --> 02:44:52,400
piece of code that can throw

2412
02:44:53,880 --> 02:44:56,040
multiple types of exceptions

2413
02:44:57,600 --> 02:45:00,720
and you have to store
those exceptions in a list

2414
02:45:00,720 --> 02:45:19,800
and then you have to return that list.

2415
02:45:19,800 --> 02:45:20,400
Okay.

2416
02:45:20,400 --> 02:45:22,600
How much time will be enough case for this

2417
02:45:24,000 --> 02:45:25,920
15 minute for the tasks and.

2418
02:45:25,920 --> 02:45:28,320
15 minutes for the break are enough.

2419
02:45:29,160 --> 02:45:31,480
BLOCK Yes.

2420
02:45:33,240 --> 02:45:36,360
And I said we only have 1.5,

2421
02:45:37,280 --> 02:45:42,000
three months.

2422
02:45:42,000 --> 02:45:42,480
Okay.

2423
02:45:42,480 --> 02:45:43,920
I will show you how to do that.

2424
02:45:43,920 --> 02:45:46,560
So then let's have a break for containers.

2425
02:45:48,240 --> 02:45:48,600
Okay.

2426
02:45:48,600 --> 02:45:50,240
So at least try one problem.

2427
02:45:50,240 --> 02:45:52,800
At least try the first one. Okay.

2428
02:45:52,800 --> 02:45:54,320
And 15 minutes for break.

2429
02:45:54,320 --> 02:45:57,000
5 minutes for the first task.
And the other one.

2430
02:45:57,000 --> 02:45:59,200
I will show you how to do that.

2431
02:45:59,200 --> 02:46:04,320
And please remind me about the reporting
and please be back by

2432
02:46:05,320 --> 02:46:13,800
143. Thank you.

2433
02:46:14,880 --> 02:46:18,360
So let's see if we have this piece. Poor

2434
02:46:20,960 --> 02:46:23,120
that is taking the integer

2435
02:46:26,800 --> 02:46:30,920
and simply printing it out.

2436
02:46:30,920 --> 02:46:44,040
And so if I try to execute this code,
if I enter integer eight, it looks fine.

2437
02:46:44,040 --> 02:46:46,280
I entered and I get back then. All right,

2438
02:46:47,760 --> 02:46:51,520
so you have designed
your application to avoid.

2439
02:46:51,520 --> 02:46:55,560
But let's say
what if So user enters maybe a string.

2440
02:46:56,320 --> 02:46:59,000
So if you try to do that,

2441
02:46:59,040 --> 02:47:02,680
you will be getting input mismatch
exception.

2442
02:47:03,120 --> 02:47:05,200
Okay.

2443
02:47:05,200 --> 02:47:09,720
So what we can do,
instead of simply writing these scanner

2444
02:47:10,160 --> 02:47:13,240
programs, now we can use

2445
02:47:14,520 --> 02:47:19,920
the exception handling, right?

2446
02:47:20,480 --> 02:47:22,760
So what we can do may be

2447
02:47:27,800 --> 02:47:33,040
we can see, try

2448
02:47:34,440 --> 02:47:39,600
and put the piece of code
that is causing the issue inside.

2449
02:47:39,600 --> 02:47:41,480
We try block

2450
02:47:41,920 --> 02:47:48,560
scan or x integer,

2451
02:47:48,560 --> 02:47:52,920
and then in the case we can see

2452
02:47:54,600 --> 02:47:58,080
input mismatch exception

2453
02:48:02,080 --> 02:48:04,560
and then we can print out anything
but a message.

2454
02:48:04,800 --> 02:48:05,800
Maybe

2455
02:48:06,600 --> 02:48:11,000
only numbers are allowed if

2456
02:48:35,400 --> 02:48:37,240
does enter the number I entered,

2457
02:48:37,240 --> 02:48:39,240
then all works fine.

2458
02:48:40,160 --> 02:48:46,000
If I tried right or anything else.

2459
02:48:46,000 --> 02:48:48,600
Then it is only numbers are okay

2460
02:48:54,560 --> 02:48:57,000
and you guys can try
to prepare the input again

2461
02:48:57,360 --> 02:49:02,280
and you can make the program more robust.

2462
02:49:02,280 --> 02:49:07,000
This is how you guys do it.

2463
02:49:07,000 --> 02:49:10,280
Yeah, but first

2464
02:49:42,280 --> 02:49:49,680
you create a static method

2465
02:49:49,880 --> 02:49:53,080
that will return a list of exceptions

2466
02:49:56,160 --> 02:49:57,520
inside your method.

2467
02:49:57,520 --> 02:50:02,400
Create objects for exception classes
using private blocks

2468
02:50:02,400 --> 02:50:05,960
and store them inside your list.

2469
02:50:06,240 --> 02:50:10,200
Call your method inside the main
and print the name and or details

2470
02:50:10,200 --> 02:50:16,240
of all the exceptions right through to.

2471
02:50:16,240 --> 02:50:20,000
By the way,
let me tell you a little bit about this.

2472
02:50:20,760 --> 02:50:24,240
Look, do you guys know how I am?

2473
02:50:24,720 --> 02:50:26,760
How can we write our own shortcuts?

2474
02:50:26,760 --> 02:50:30,120
So, for example, I am writing, writing c

2475
02:50:32,880 --> 02:50:33,480
and if I

2476
02:50:33,480 --> 02:50:36,600
hit enter, it drives public
static interior.

2477
02:50:36,600 --> 02:50:40,440
Or if I am writing public static void, it

2478
02:50:40,440 --> 02:50:48,640
drives the public static word.

2479
02:50:48,640 --> 02:50:58,360
I promise to tell you the right.

2480
02:50:58,360 --> 02:51:00,000
Okay.

2481
02:51:00,000 --> 02:51:02,000
Remind me at the end.

2482
02:51:02,640 --> 02:51:05,600
Long time ago.

2483
02:51:05,600 --> 02:51:08,320
Let me finish the exceptions then we will.

2484
02:51:08,400 --> 02:51:16,120
By the way, it's called live templates.

2485
02:51:16,120 --> 02:51:19,360
Okay, so public static void

2486
02:51:23,560 --> 02:51:25,800
and instead of void.

2487
02:51:25,800 --> 02:51:31,760
So what should be the return time, guys?

2488
02:51:31,760 --> 02:51:32,920
I didn't promise.

2489
02:51:32,920 --> 02:51:36,720
I just said that I will show you
at the end of the class.

2490
02:51:37,480 --> 02:51:40,000
I never made a promise

2491
02:51:40,080 --> 02:51:45,600
right?

2492
02:51:45,600 --> 02:51:48,400
So the requirement said that

2493
02:51:48,680 --> 02:51:52,080
it should return a list of exceptions.

2494
02:51:52,080 --> 02:51:55,520
So can I return a list of exceptions

2495
02:51:55,520 --> 02:52:04,360
if I have void?

2496
02:52:04,360 --> 02:52:07,560
Would be List of what, guys?

2497
02:52:07,560 --> 02:52:34,920
What should I put inside
the diamond operator?

2498
02:52:34,920 --> 02:52:36,880
Yes. The parent class name.

2499
02:52:36,880 --> 02:52:38,760
Right. Because that class

2500
02:52:40,800 --> 02:52:43,440
can handle can store

2501
02:52:44,840 --> 02:52:47,640
the objects of all the child classes.

2502
02:52:47,640 --> 02:52:48,320
Right.

2503
02:52:48,480 --> 02:52:49,920
So get

2504
02:52:51,840 --> 02:52:53,560
exception

2505
02:52:53,560 --> 02:53:04,080
list.

2506
02:53:04,080 --> 02:53:12,680
Okay, so I say list, I say

2507
02:53:14,160 --> 02:53:15,760
and it is

2508
02:53:17,560 --> 02:53:20,320
the exception

2509
02:53:20,400 --> 02:53:23,120
listing of new

2510
02:53:23,120 --> 02:53:25,840
entities.

2511
02:53:25,840 --> 02:53:28,000
Then I write it. Try

2512
02:53:29,080 --> 02:53:31,400
and inside the try.

2513
02:53:31,400 --> 02:53:32,760
I see.

2514
02:53:32,760 --> 02:53:36,000
Let's say
are you creating method outside? Yes.

2515
02:53:36,000 --> 02:53:38,080
It's the method outside of me

2516
02:53:42,720 --> 02:53:45,280
being name is equal to all

2517
02:53:46,880 --> 02:53:48,880
name dot

2518
02:53:54,640 --> 02:53:55,680
lowercase.

2519
02:53:55,680 --> 02:53:58,920
And if I do that with the exception,

2520
02:53:58,920 --> 02:54:00,440
I will get guys

2521
02:54:03,720 --> 02:54:04,520
starting

2522
02:54:04,760 --> 02:54:07,960
which type of exception
I will get null pointer exception.

2523
02:54:08,240 --> 02:54:11,000
So null pointer exception and e

2524
02:54:13,640 --> 02:54:16,160
and once I get to that exception,

2525
02:54:16,160 --> 02:54:20,120
the object of that exception
will be stored inside this variable.

2526
02:54:20,720 --> 02:54:24,960
So I can say at least dot add and E

2527
02:54:26,280 --> 02:54:29,600
right then I can write another try.

2528
02:54:29,600 --> 02:54:32,760
BLOCK and then maybe

2529
02:54:35,280 --> 02:54:38,240
I can see

2530
02:54:38,640 --> 02:54:41,880
and they are required

2531
02:54:42,120 --> 02:54:44,880
continue in the minus five

2532
02:54:47,040 --> 02:54:50,160
and in here this time I will be getting

2533
02:54:51,520 --> 02:54:53,800
negative at a size

2534
02:54:55,000 --> 02:54:56,680
exception.

2535
02:54:56,680 --> 02:55:00,560
So once I get the exception again,
the catch block will be executed

2536
02:55:01,080 --> 02:55:02,560
and insert the catch block.

2537
02:55:02,560 --> 02:55:05,880
I am simply adding
that exception to the list

2538
02:55:06,880 --> 02:55:09,440
and once I am done, I will return

2539
02:55:11,640 --> 02:55:12,520
the list. All right.

2540
02:55:12,520 --> 02:55:15,160
You guys can create more predicate
blocks in here.

2541
02:55:16,800 --> 02:55:18,200
So writing different bycatch

2542
02:55:18,200 --> 02:55:22,840
blocks, intentionally
introducing inside the retry blocks

2543
02:55:22,840 --> 02:55:26,400
so that Java executes the catch blocks.

2544
02:55:28,040 --> 02:55:30,360
But this time, instead

2545
02:55:30,360 --> 02:55:34,560
of printing out the error message
or something like that, the object

2546
02:55:34,560 --> 02:55:37,480
that Java is throwing,
I am adding that to a list.

2547
02:55:38,520 --> 02:55:40,760
And once I am inside

2548
02:55:42,960 --> 02:55:45,120
the main method,

2549
02:55:45,240 --> 02:55:46,920
I can get back

2550
02:55:49,120 --> 02:55:51,960
so I can write a loop for it.

2551
02:55:52,400 --> 02:56:03,320
So I can see

2552
02:56:05,640 --> 02:56:06,960
that exception.

2553
02:56:06,960 --> 02:56:11,480
He is equal to that exception list

2554
02:56:13,200 --> 02:56:16,680
and then print out

2555
02:56:20,040 --> 02:56:21,000
using the.

2556
02:56:21,000 --> 02:56:23,400
So this is not but in the place

2557
02:56:24,000 --> 02:56:26,760
if the method will print out the details.

2558
02:56:26,760 --> 02:56:27,120
Okay.

2559
02:56:27,120 --> 02:56:36,120
So printing details of exception.

2560
02:56:36,120 --> 02:56:40,480
So I get past the details
about null pointer exception.

2561
02:56:40,480 --> 02:56:45,360
Then I get the details about negativity
and you guys can add as many as you want.

2562
02:56:46,080 --> 02:56:56,000
Is it clear guys, that

2563
02:57:06,400 --> 02:57:07,440
more examples? Yes.

2564
02:57:07,440 --> 02:57:14,520
I will be releasing more apples today.

2565
02:57:14,520 --> 02:57:19,240
So these are some of the rules.

2566
02:57:19,240 --> 02:57:30,360
You guys want me to share the code,
therefore, if you guys want, I can

2567
02:57:31,600 --> 02:57:33,960
like, for example,

2568
02:57:33,960 --> 02:57:39,040
if if it is not clear, you guys can ask me
and I can explain that

2569
02:57:39,040 --> 02:57:49,200
line of code, that's way too
nice to go through this code

2570
02:57:49,200 --> 02:58:13,560
and let me know if something is not there
there.

2571
02:58:13,560 --> 02:58:21,000
Good.

2572
02:58:21,000 --> 02:58:22,080
Or it can be anything.

2573
02:58:23,720 --> 02:58:25,800
You can you can call it E.

2574
02:58:25,800 --> 02:58:40,800
There's just a variable.

2575
02:58:40,800 --> 02:58:43,680
So why do we need this just in practice

2576
02:58:43,800 --> 02:58:48,840
to make sure that you guys understand
that inside of these variables

2577
02:58:49,400 --> 02:58:52,640
we actually get the objects
of these classes

2578
02:58:53,160 --> 02:58:57,400
and we can store those objects
and can pass through other

2579
02:58:57,400 --> 02:59:01,160
methods and can get the details
in other methods as well.

2580
02:59:01,920 --> 02:59:05,280
So let's say, for example,
if you guys are not to show

2581
02:59:05,280 --> 02:59:10,000
the error messages inside this method,
you can take these objects for stored

2582
02:59:10,120 --> 02:59:13,360
the list and pass them to another method
and can handle the errors.

2583
02:59:13,360 --> 02:59:18,240
There.

2584
02:59:18,240 --> 02:59:23,400
I do not understand why we are doing list
because we want to return

2585
02:59:23,400 --> 02:59:27,280
all the added lists
can hold multiple objects.

2586
02:59:27,800 --> 02:59:33,720
So I am returning a list
and I am adding all the objects in here.

2587
02:59:33,720 --> 02:59:35,560
Can you send the first task to your

2588
02:59:39,640 --> 02:59:40,200
is just

2589
02:59:40,200 --> 02:59:43,080
a practice
to make sure that you guys understand

2590
02:59:44,360 --> 02:59:46,200
how these objects can be used

2591
02:59:46,200 --> 02:59:49,040
in other methods as well.

2592
02:59:52,160 --> 02:59:55,040
So this is again the same thing at a time.

2593
02:59:55,040 --> 02:59:57,360
Only one exception occurs.

2594
02:59:57,360 --> 03:00:00,200
And at the time one
catch block is executed.

2595
03:00:01,240 --> 03:00:01,560
Okay.

2596
03:00:01,560 --> 03:00:04,560
Yes, I will release the happens

2597
03:00:04,840 --> 03:00:07,480
and all catch blocks must be ordered

2598
03:00:07,480 --> 03:00:11,120
from most the specific to most in general.

2599
03:00:11,240 --> 03:00:14,320
I don't put more general blocks

2600
03:00:14,320 --> 03:00:17,640
on top
and then Baltimore specific after that

2601
03:00:17,640 --> 03:00:21,800
because that way
Java will always execute the first one

2602
03:00:21,800 --> 03:00:26,040
and the other ones will never be executed
and you will be getting an error. Then

2603
03:00:29,520 --> 03:00:32,040
now they finally block.

2604
03:00:32,040 --> 03:00:34,560
So as we have the catch block

2605
03:00:35,400 --> 03:00:38,360
that handles the appropriate error,

2606
03:00:39,240 --> 03:00:43,920
we also have the finally block
that we can write with the try.

2607
03:00:43,920 --> 03:00:48,000
BLOCK It's not mandatory,
but sometimes if let's say

2608
03:00:48,040 --> 03:00:53,280
you are using some resources
in your prior block,

2609
03:00:54,360 --> 03:00:54,960
you should

2610
03:00:54,960 --> 03:00:59,640
always close those resources in the cache
BLOCK You guys remember,

2611
03:00:59,640 --> 03:01:06,640
we worked with files
and the files in in files.

2612
03:01:06,640 --> 03:01:11,040
I told you to write.

2613
03:01:11,040 --> 03:01:15,120
So in our framework, we'll.

2614
03:01:15,120 --> 03:01:16,800
Is that those back in here?

2615
03:01:16,800 --> 03:01:22,320
If we go inside of the accelerator?

2616
03:01:22,320 --> 03:01:25,480
I told you to write this file.

2617
03:01:25,480 --> 03:01:28,800
Import streamed or close?

2618
03:01:29,000 --> 03:01:31,040
Yes, we are finally done with Java.

2619
03:01:31,040 --> 03:01:33,920
So I told that it is important.

2620
03:01:33,920 --> 03:01:35,480
Why? This is important, guys.

2621
03:01:35,480 --> 03:01:42,160
Why we should close the input themes.

2622
03:01:42,160 --> 03:01:45,880
Because if that file is left open,

2623
03:01:46,800 --> 03:01:51,360
others will not be able
to perform operations on that file.

2624
03:01:52,080 --> 03:01:54,680
Right. But what happens, guys?

2625
03:01:55,000 --> 03:01:58,280
So you are opening that file

2626
03:01:58,640 --> 03:02:02,080
when you write this line of code.

2627
03:02:02,080 --> 03:02:07,440
And if you get any of the exceptions
in between, if any of these

2628
03:02:07,920 --> 03:02:12,880
if any of this code is throwing any add,
it, will this line be executed

2629
03:02:17,400 --> 03:02:19,760
and the file will be left open.

2630
03:02:19,760 --> 03:02:20,640
Right.

2631
03:02:21,680 --> 03:02:24,400
So that's why I told you that

2632
03:02:24,400 --> 03:02:30,240
when we learn about API cache blocks,
we will fix these methods.

2633
03:02:30,240 --> 03:02:34,840
So instead of throwing this exception,
what should we do Now?

2634
03:02:35,640 --> 03:02:37,920
I am removing this

2635
03:02:37,920 --> 03:02:40,880
and I am placing this code

2636
03:02:44,280 --> 03:02:45,240
inside

2637
03:02:45,240 --> 03:02:50,760
a prior block.

2638
03:02:50,760 --> 03:02:54,280
So I take this code

2639
03:02:56,760 --> 03:03:01,560
and I put it inside the right block.

2640
03:03:01,800 --> 03:03:07,200
Okay, Next we make it smaller and then

2641
03:03:08,280 --> 03:03:09,280
I add. Right.

2642
03:03:09,280 --> 03:03:10,920
So now

2643
03:03:11,400 --> 03:03:15,360
if I want to make sure
that this code is accessible, this this,

2644
03:03:15,600 --> 03:03:18,520
this variable is accessible,
I should declare it

2645
03:03:20,480 --> 03:03:22,600
before the try block

2646
03:03:27,240 --> 03:03:31,800
So I wrote this try now,
I should drive proper cache.

2647
03:03:31,800 --> 03:03:35,520
BLOCK And I should.

2648
03:03:35,520 --> 03:03:38,040
So if a file is not found,

2649
03:03:39,720 --> 03:03:41,320
I will be getting file

2650
03:03:41,320 --> 03:03:45,920
not found exception right?

2651
03:03:45,920 --> 03:03:47,480
So in that case

2652
03:03:49,040 --> 03:03:51,240
I can write it dot

2653
03:03:51,840 --> 03:03:55,320
but in stack place, right

2654
03:03:56,640 --> 03:03:58,200
And if let's say

2655
03:03:58,200 --> 03:04:01,240
there happens an input output exception

2656
03:04:07,920 --> 03:04:10,320
I think they are same

2657
03:04:18,680 --> 03:04:20,320
inspector's file.

2658
03:04:20,320 --> 03:04:22,600
So let's say if they ha

2659
03:04:23,160 --> 03:04:27,480
if there is an adult deal
if files present.

2660
03:04:28,080 --> 03:04:30,960
But there was an issue

2661
03:04:30,960 --> 03:04:34,680
reading that file again,
maybe the hard drive is crap.

2662
03:04:34,880 --> 03:04:39,160
It is unable to give you the data
or anything goes

2663
03:04:39,160 --> 03:04:43,000
wrong with the operating system
and you are unable to read that file.

2664
03:04:43,000 --> 03:04:45,600
So you will be getting
input output exception

2665
03:04:45,960 --> 03:04:48,960
and you can also get this input output
exception.

2666
03:04:48,960 --> 03:04:53,360
Let's say there is not
there is no enough disk space

2667
03:04:54,000 --> 03:04:58,120
and you are trying to create a new file
on the disk.

2668
03:04:58,120 --> 03:05:01,240
So then you will also get
this input output exception.

2669
03:05:02,280 --> 03:05:06,240
So it's good now
that we are using the deprecated catalog.

2670
03:05:06,240 --> 03:05:08,840
So anything goes wrong, our complete

2671
03:05:09,480 --> 03:05:15,800
framework will not be stored,
the proper cache block will be executed.

2672
03:05:16,080 --> 03:05:18,240
But what about this closing thing? Right?

2673
03:05:18,640 --> 03:05:21,480
So I want to make sure that

2674
03:05:21,480 --> 03:05:26,640
no matter what, if the error occurs
in here, in here, in here, anywhere,

2675
03:05:27,240 --> 03:05:30,480
this code, I always want to execute.

2676
03:05:30,600 --> 03:05:34,080
So for that I have this.

2677
03:05:34,080 --> 03:05:36,760
Where this finally block

2678
03:05:36,760 --> 03:05:40,320
does is it is always executed.

2679
03:05:40,920 --> 03:05:44,040
It is always executed.

2680
03:05:44,040 --> 03:05:46,680
And we need to initialize

2681
03:05:49,880 --> 03:05:58,680
this variable in here.

2682
03:05:58,680 --> 03:06:00,160
Where is this

2683
03:06:01,520 --> 03:06:06,800
excellent.

2684
03:06:06,800 --> 03:06:10,000
We need to initialize

2685
03:06:10,000 --> 03:06:14,040
this as well outside of the car.

2686
03:06:14,040 --> 03:06:16,520
I closed this

2687
03:06:16,520 --> 03:06:18,480
so I again use prior catch block

2688
03:06:18,480 --> 03:06:21,000
because this can also throw an error

2689
03:06:21,800 --> 03:06:25,120
and I checked if it is not null

2690
03:06:31,200 --> 03:06:33,480
so that I don't get another exception.

2691
03:06:33,680 --> 03:06:34,200
Okay.

2692
03:06:34,400 --> 03:06:36,560
Then only I want to close this.

2693
03:06:36,560 --> 03:06:38,720
So now my method is perfect.

2694
03:06:38,720 --> 03:06:41,040
How it is perfect

2695
03:06:41,680 --> 03:06:43,480
if let's say I am trying

2696
03:06:43,480 --> 03:06:47,640
to use the filing for name and,
the port is not correct.

2697
03:06:48,280 --> 03:06:52,600
I will get the error right on this line
at this line party.

2698
03:06:52,840 --> 03:06:54,960
Okay. In here.

2699
03:06:55,040 --> 03:06:57,240
So nothing will be executed from here.

2700
03:06:58,280 --> 03:07:02,280
I and the improper
catch block will be executed.

2701
03:07:02,280 --> 03:07:07,680
And then this finally block is executed
and inside this, finally I am checking.

2702
03:07:07,680 --> 03:07:09,440
Your filing system is not null.

2703
03:07:09,440 --> 03:07:10,880
Then I am closing it.

2704
03:07:10,880 --> 03:07:12,720
But let's say everything goes good.

2705
03:07:12,720 --> 03:07:13,760
Everything goes well.

2706
03:07:13,760 --> 03:07:16,880
I execute all the line

2707
03:07:16,880 --> 03:07:21,720
then the cache block is aggregated,
but still finally block is executed.

2708
03:07:21,720 --> 03:07:25,640
So no matter what,
if your catch blocks are executed or not,

2709
03:07:25,640 --> 03:07:30,680
or no matter if you encounter
an added or not, if everything goes

2710
03:07:30,680 --> 03:07:36,360
well or if everything does
not go well, this finally

2711
03:07:37,320 --> 03:07:38,680
is executed.

2712
03:07:38,680 --> 03:07:41,720
Always the moment you have entered
this try,

2713
03:07:42,240 --> 03:07:44,640
go make sure that it

2714
03:07:45,760 --> 03:07:46,800
this finally block.

2715
03:07:46,800 --> 03:07:50,840
So whatever important operations

2716
03:07:50,840 --> 03:07:54,480
are there in my code,
where should I put them?

2717
03:07:54,480 --> 03:07:58,080
I should put them inside the final block.

2718
03:07:59,200 --> 03:08:00,200
Because why?

2719
03:08:00,200 --> 03:08:05,320
I cannot pull them inside the try block
Because if I get an error in on this line,

2720
03:08:05,920 --> 03:08:08,520
nothing below this line executes.

2721
03:08:08,680 --> 03:08:10,680
So it's not safe to put them in here.

2722
03:08:11,280 --> 03:08:14,040
I cannot put them inside the catch block
because catch

2723
03:08:14,040 --> 03:08:17,320
blocks are only executed
when we encounter error.

2724
03:08:17,480 --> 03:08:20,520
So it's also not safe to put them in here.

2725
03:08:21,440 --> 03:08:24,320
But this finally

2726
03:08:24,320 --> 03:08:25,920
is a block.

2727
03:08:25,920 --> 03:08:29,760
No matter if all the code executes

2728
03:08:29,760 --> 03:08:33,400
or no matter if none of this is executed.

2729
03:08:33,400 --> 03:08:37,160
Java makes all this is always executed.

2730
03:08:37,160 --> 03:08:38,040
So backslide.

2731
03:08:38,040 --> 03:08:42,040
This finally block is the right block
where I should put

2732
03:08:42,400 --> 03:08:45,280
the import code cleanup code.

2733
03:08:47,080 --> 03:08:48,680
So let me first

2734
03:08:48,680 --> 03:08:52,400
show you with another example

2735
03:08:53,240 --> 03:08:54,960
why it is important.

2736
03:08:54,960 --> 03:08:58,120
I will tell you first, let me show you

2737
03:08:58,120 --> 03:09:00,680
and show that in law seven

2738
03:09:09,560 --> 03:09:12,920
So we have this

2739
03:09:12,920 --> 03:10:00,360
five block.

2740
03:10:00,360 --> 03:10:03,120
So I have written this code, guys,

2741
03:10:04,080 --> 03:10:08,160
and we zoomed to Java
after a few review classes.

2742
03:10:08,160 --> 03:10:09,360
I was back to normal.

2743
03:10:09,360 --> 03:10:13,280
It will be fine, I think,
because I didn't give you a short demo.

2744
03:10:13,280 --> 03:10:15,200
That's why you guys got lost.

2745
03:10:15,200 --> 03:10:17,240
So the right now

2746
03:10:17,680 --> 03:10:21,840
can you guys
tell me if I execute this code which lines

2747
03:10:21,840 --> 03:10:39,200
I will see on output?

2748
03:10:39,200 --> 03:10:47,160
So if I execute this code, I get seven
and 12.

2749
03:10:48,160 --> 03:10:51,800
Let's say I got an ad,
I have written something

2750
03:10:51,840 --> 03:10:55,960
that is causing the error,
which lines I will get now

2751
03:10:59,560 --> 03:11:01,600
let me replace this with the numbers.

2752
03:11:01,600 --> 03:11:07,360
One, two,

2753
03:11:07,360 --> 03:11:14,280
three.

2754
03:11:14,280 --> 03:11:14,760
Now please.

2755
03:11:14,760 --> 03:11:17,280
Back three and four.

2756
03:11:18,040 --> 03:11:21,360
And now tell me one,

2757
03:11:22,840 --> 03:11:26,760
three and four

2758
03:11:28,120 --> 03:11:29,440
after the output of this.

2759
03:11:29,440 --> 03:11:30,800
Finally, guys.

2760
03:11:30,800 --> 03:11:35,840
So if everything goes well,
still finally block is executed.

2761
03:11:36,000 --> 03:11:39,120
If I get an exception to still

2762
03:11:39,120 --> 03:11:42,240
finally block is executed.

2763
03:11:42,480 --> 03:11:46,440
If I get an exception

2764
03:11:48,760 --> 03:11:50,680
inside the edge,

2765
03:11:50,680 --> 03:12:08,520
what are what I will get now?

2766
03:12:08,520 --> 03:12:13,960
So what we understand from this example
that once

2767
03:12:14,320 --> 03:12:17,640
Java has this try block,

2768
03:12:18,160 --> 03:12:22,920
no matter what happens in this area,

2769
03:12:23,720 --> 03:12:27,600
Java, all these always executes this part.

2770
03:12:27,880 --> 03:12:30,280
So what does this mean?

2771
03:12:30,280 --> 03:12:34,960
It means if I am opening
some critical resources,

2772
03:12:35,080 --> 03:12:38,160
which should be closed

2773
03:12:38,160 --> 03:12:40,200
before so that others can use them.

2774
03:12:40,840 --> 03:12:46,280
I should close them inside the final block
because I know

2775
03:12:46,680 --> 03:12:51,400
no matter what goes wrong,
Java will always execute

2776
03:12:51,400 --> 03:12:55,440
this finally block Do you guys understand
the point of finally why?

2777
03:12:55,440 --> 03:12:59,360
Why finally is important?

2778
03:12:59,360 --> 03:13:05,120
Like, for example, I can put some
I can try to close the files

2779
03:13:05,120 --> 03:13:09,880
inside the try block, but I can
I don't understand why not?

2780
03:13:09,880 --> 03:13:13,440
Three Because before three,
we are getting an added layer.

2781
03:13:15,120 --> 03:13:18,360
Because three, we are getting an error
the moment we, the added

2782
03:13:18,440 --> 03:13:22,760
Java does not execute anything else
and it checks for the proper

2783
03:13:22,760 --> 03:13:25,320
catch block and there is no catch block.

2784
03:13:25,960 --> 03:13:38,520
That's why it is not executing.

2785
03:13:38,520 --> 03:13:40,880
So what happens is that

2786
03:13:40,880 --> 03:13:45,480
no matter if anything,
so what is finally here?

2787
03:13:45,480 --> 03:13:50,160
In our case,
we are closing the file inside

2788
03:13:50,160 --> 03:13:54,000
of finally
why we are closing it inside the finally,

2789
03:13:54,360 --> 03:13:59,440
because know if we get any issues

2790
03:13:59,760 --> 03:14:03,280
during the process of reading the data,

2791
03:14:04,560 --> 03:14:08,040
we are still sure
that the file will be closed.

2792
03:14:08,680 --> 03:14:13,520
If let's say there are no issues,
we are still closing the file.

2793
03:14:13,880 --> 03:14:18,440
So no matter what happens,
we are always, always closing

2794
03:14:18,440 --> 03:14:20,800
the critical system resources

2795
03:14:21,520 --> 03:14:25,120
and that's why
we should use the final block.

2796
03:14:25,120 --> 03:14:28,000
This block is always executed.

2797
03:14:28,000 --> 03:14:33,480
And no matter what, no matter
if we get an exception here, in here,

2798
03:14:33,480 --> 03:14:36,400
in here, anywhere inside the traffic edge,

2799
03:14:36,840 --> 03:14:39,000
no matter where we are, the exception.

2800
03:14:39,480 --> 03:14:41,640
This is always executed.

2801
03:14:41,720 --> 03:14:46,920
Is it possible then to put finally on
the top with good cause and then try get.

2802
03:14:46,920 --> 03:14:51,080
No, no, this is not possible.

2803
03:14:51,080 --> 03:14:52,800
This is not possible.

2804
03:14:52,800 --> 03:14:55,760
Finally. Must have a try. BLOCK

2805
03:14:56,960 --> 03:15:00,480
Finally must have it right below.

2806
03:15:00,480 --> 03:15:03,000
So why Java guys created this finally?

2807
03:15:03,000 --> 03:15:09,320
BLOCK Java guys created this finally block
so that we can put important code

2808
03:15:09,320 --> 03:15:12,440
in here in the case of exceptions in

2809
03:15:12,440 --> 03:15:15,240
get in try anywhere.

2810
03:15:16,200 --> 03:15:19,280
We are always always sure that

2811
03:15:19,760 --> 03:15:22,000
this code is always executed.

2812
03:15:22,680 --> 03:15:25,800
So in here
we are getting an exception in guys,

2813
03:15:25,920 --> 03:15:29,800
we are getting an exception in try
but still Java execute.

2814
03:15:29,800 --> 03:15:31,800
They finally block.

2815
03:15:31,800 --> 03:15:34,400
So how how

2816
03:15:34,400 --> 03:15:37,800
we should use this
Finally BLOCK How I am using this finally.

2817
03:15:37,800 --> 03:15:41,640
BLOCK So so I wrote a piece of code

2818
03:15:42,440 --> 03:15:46,680
in which I was opening a file,
an Excel file.

2819
03:15:46,800 --> 03:15:49,920
Now, this is an important system resource,

2820
03:15:50,440 --> 03:15:55,560
which we should close
as soon as we are done using it

2821
03:15:55,680 --> 03:16:01,920
so that others can use it on
our computer can finally use without try.

2822
03:16:03,000 --> 03:16:04,960
No, we can use.

2823
03:16:04,960 --> 03:16:06,440
Finally we try.

2824
03:16:06,440 --> 03:16:11,480
Like for example, we can automate
the catch block, finally try.

2825
03:16:11,760 --> 03:16:13,960
And right after that
we can have finally block

2826
03:16:16,160 --> 03:16:19,160
for example, we can do this one.

2827
03:16:19,160 --> 03:16:22,760
I can remove this catch and here
I can have it.

2828
03:16:22,800 --> 03:16:27,680
And then finally, this is possible,
but you ask me that again.

2829
03:16:27,680 --> 03:16:31,320
We have the finally block of
without the try.

2830
03:16:31,440 --> 03:16:33,480
This is not possible.

2831
03:16:34,280 --> 03:16:38,800
So I was using a system resource,
a critical one,

2832
03:16:38,800 --> 03:16:41,800
an important one that I should close

2833
03:16:42,120 --> 03:16:45,000
always. Now.

2834
03:16:45,000 --> 03:16:47,400
So what I did, I created a try block.

2835
03:16:47,880 --> 03:16:50,880
I placed all the code inside in here.

2836
03:16:52,200 --> 03:16:54,280
The code it can cause issues, right?

2837
03:16:54,280 --> 03:16:55,880
This file is not found.

2838
03:16:55,880 --> 03:16:58,560
So let's say let's assume we have
this scenario.

2839
03:16:58,560 --> 03:17:00,280
File was found.

2840
03:17:00,280 --> 03:17:05,160
We we we read all the data, we read
everything we're storing.

2841
03:17:05,160 --> 03:17:06,120
Tired of the Excel.

2842
03:17:07,280 --> 03:17:09,680
And if everything goes well, these two,

2843
03:17:10,880 --> 03:17:14,360
they will never be executed right.

2844
03:17:14,360 --> 03:17:16,680
But this finally will still be executed.

2845
03:17:17,280 --> 03:17:20,600
So we come in here and we check

2846
03:17:21,360 --> 03:17:25,040
if that file input stream object
not null. Why?

2847
03:17:25,040 --> 03:17:28,600
I am checking this
because in some scenarios it can be null

2848
03:17:28,600 --> 03:17:31,280
and it will cause a null pointer
exception.

2849
03:17:31,600 --> 03:17:35,960
If I blindly try
to call a method on this object.

2850
03:17:35,960 --> 03:17:41,280
So it's always a good practice to check
your objects if they are null or not.

2851
03:17:42,480 --> 03:17:44,800
So I am checking that
and I am closed in the system.

2852
03:17:44,800 --> 03:17:47,440
Resource this file. Interesting.

2853
03:17:47,440 --> 03:17:50,280
Now let's assume there was an error
in here, right?

2854
03:17:50,280 --> 03:17:53,280
I was reading that something was wrong.

2855
03:17:53,280 --> 03:17:55,680
So this part is not executed.

2856
03:17:56,000 --> 03:17:59,680
So we get an error on this line
so this part will not be executed.

2857
03:18:00,440 --> 03:18:03,160
Java is the appropriate catch block,

2858
03:18:04,080 --> 03:18:07,000
but still this part will be executed.

2859
03:18:07,360 --> 03:18:10,840
So by putting the code that is closed

2860
03:18:10,840 --> 03:18:14,520
in that system
results in final, I am now sure

2861
03:18:15,600 --> 03:18:18,960
that in all the scenarios, my

2862
03:18:19,160 --> 03:18:23,080
important system
resource will always be closed.

2863
03:18:23,320 --> 03:18:24,000
Okay,

2864
03:18:25,080 --> 03:18:27,800
that's why we are doing this

2865
03:18:27,800 --> 03:18:29,840
and we should always have this

2866
03:18:30,280 --> 03:18:33,120
generic exception as well.

2867
03:18:33,440 --> 03:18:34,800
At the end

2868
03:18:38,080 --> 03:18:40,800
like this.

2869
03:18:40,800 --> 03:18:42,520
So is it clear right now?

2870
03:18:42,520 --> 03:18:46,800
No. Ask me if something is not clear
now, ask me why I am using finally

2871
03:18:46,800 --> 03:18:51,720
or why I am doing something like this.

2872
03:18:51,720 --> 03:18:54,720
Finally is a block
that is always executed.

2873
03:18:55,280 --> 03:18:58,920
So I put the code that I want to always

2874
03:18:58,920 --> 03:19:01,360
execute inside of the final block

2875
03:19:03,680 --> 03:19:04,560
when you guys

2876
03:19:04,560 --> 03:19:07,160
will be opening database connections.

2877
03:19:07,720 --> 03:19:10,000
That clause is just a regular clause.

2878
03:19:10,200 --> 03:19:11,640
It's just a method.

2879
03:19:11,640 --> 03:19:12,880
It is just a matter.

2880
03:19:12,880 --> 03:19:14,440
It will just close your file.

2881
03:19:14,440 --> 03:19:24,800
Yes. Disclosure Fine.

2882
03:19:24,800 --> 03:19:28,480
So finally is not mandatory,
but good to use if try. Yes.

2883
03:19:29,360 --> 03:19:31,200
Yes. It's good to use. Yes.

2884
03:19:31,200 --> 03:19:33,320
Database connections in school.

2885
03:19:33,320 --> 03:19:35,880
They are also very expensive resources,

2886
03:19:37,080 --> 03:19:37,640
so we should

2887
03:19:37,640 --> 03:19:46,880
also close them.

2888
03:19:46,880 --> 03:19:50,040
Why would then rechecking
if it is not empty?

2889
03:19:50,040 --> 03:19:53,480
So we know if our file is
what to keep know.

2890
03:19:53,680 --> 03:20:03,320
So let me let me show why I am checking
if it is not null.

2891
03:20:03,320 --> 03:20:05,440
So not just closing. Finally. Yes.

2892
03:20:06,960 --> 03:20:08,680
Eskil, is this topic cardinal?

2893
03:20:08,680 --> 03:20:09,920
It's very easy.

2894
03:20:09,920 --> 03:20:12,760
I mean, you guys will not believe me,
but this is way

2895
03:20:12,760 --> 03:20:20,320
easier than Java. Yes.

2896
03:20:20,400 --> 03:20:25,560
Let me send the guys told me.

2897
03:20:25,600 --> 03:20:30,760
What can I do?

2898
03:20:30,760 --> 03:20:31,320
APIs.

2899
03:20:31,320 --> 03:20:37,840
They are a little hard
as compared to good.

2900
03:20:37,840 --> 03:20:43,200
But what if we have error in file in
we still have file import stream in.

2901
03:20:43,200 --> 03:20:44,160
Finally.

2902
03:20:44,160 --> 03:20:47,320
Yes. Perfect So if we have an error

2903
03:20:47,320 --> 03:20:51,600
in filing for stream,
this returns in null value.

2904
03:20:51,600 --> 03:20:59,280
That's why I am checking for this
null condition in here.

2905
03:20:59,280 --> 03:21:02,520
So let me show you why

2906
03:21:02,520 --> 03:21:18,600
I am checking.

2907
03:21:18,600 --> 03:21:19,600
So let's say guys,

2908
03:21:20,880 --> 03:21:22,600
I provide a

2909
03:21:22,600 --> 03:21:28,800
wrong bar ten here.

2910
03:21:28,800 --> 03:21:31,920
I don't know why,
but my friend spent the most time

2911
03:21:32,400 --> 03:21:36,920
learning a skill,
then learning basics of programing always.

2912
03:21:36,920 --> 03:21:38,120
Because

2913
03:21:38,600 --> 03:21:41,400
as school guys, they have a separate job.

2914
03:21:41,400 --> 03:21:43,560
They are called database administrators.

2915
03:21:43,920 --> 03:21:47,720
There is a separate to in the industry
for just for school.

2916
03:21:48,000 --> 03:21:51,920
If you know school well,
you can get a separate job.

2917
03:21:51,920 --> 03:21:56,720
It's like a developer and ask that,
no, it's not that it is used instead,

2918
03:21:56,960 --> 03:22:01,200
but it's a separate role.

2919
03:22:01,200 --> 03:22:03,120
Yes, it is used in aspect.

2920
03:22:03,120 --> 03:22:05,800
It is using
maybe she is doing back and testing.

2921
03:22:05,800 --> 03:22:13,640
That's why she keeps on learning school.

2922
03:22:13,640 --> 03:22:14,440
So yes.

2923
03:22:14,440 --> 03:22:16,840
And just to observe the lesson,
you guys can also do that.

2924
03:22:16,840 --> 03:22:20,560
So, guys,
let me show you how that method is

2925
03:22:22,040 --> 03:22:23,560
is improved now.

2926
03:22:23,560 --> 03:22:36,040
So I am providing a wrong part in here.

2927
03:22:36,040 --> 03:22:46,560
Yesterday we only updated the accelerator,

2928
03:22:46,560 --> 03:22:49,800
so let me

2929
03:23:43,000 --> 03:23:46,000
right now I am providing a wrong path.

2930
03:23:47,040 --> 03:23:50,880
If I don't use try, I catch block

2931
03:23:52,040 --> 03:23:54,160
inside that accelerator.

2932
03:23:54,160 --> 03:23:57,000
What will happen guys, if I
if I provide wrong

2933
03:23:57,000 --> 03:24:01,840
path in here, will

2934
03:24:02,080 --> 03:24:05,320
I get the normal flow
or my program will terminate abruptly?

2935
03:24:05,600 --> 03:24:10,120
I am trying to use that create method
and I am not using

2936
03:24:10,440 --> 03:24:11,880
catch blocks

2937
03:24:19,840 --> 03:24:21,680
it will terminate abruptly.

2938
03:24:21,680 --> 03:24:22,520
Right.

2939
03:24:23,040 --> 03:24:25,200
So we don't want to do that at any cost.

2940
03:24:25,560 --> 03:24:27,800
So we wrote the try catch block.

2941
03:24:27,800 --> 03:24:35,200
So let's understand how that try
catch block is helping us in here.

2942
03:24:35,200 --> 03:24:37,560
So I debug discord.

2943
03:24:37,600 --> 03:24:44,160
Let's go step by step.

2944
03:24:44,160 --> 03:24:50,160
And if I want to see how execution,
how I executing all the code line by line

2945
03:24:50,160 --> 03:24:53,280
inside this method,
should I click, step over

2946
03:24:53,280 --> 03:25:02,400
or step into, step into.

2947
03:25:02,400 --> 03:25:05,160
Right. So I go in here

2948
03:25:07,320 --> 03:25:08,560
inside of that method

2949
03:25:08,560 --> 03:25:11,360
which we updated with try get block.

2950
03:25:12,240 --> 03:25:15,640
So now Java will first
create these variables.

2951
03:25:15,640 --> 03:25:20,480
Right now what is the value is null right?

2952
03:25:20,480 --> 03:25:23,320
And because we have provided a wrong path,

2953
03:25:24,000 --> 03:25:26,600
Java will not be able to find any file

2954
03:25:26,600 --> 03:25:30,200
on this spot right?

2955
03:25:30,200 --> 03:25:32,120
So lot of work will happen.

2956
03:25:32,120 --> 03:25:34,160
Nothing will be assigned

2957
03:25:35,480 --> 03:25:39,160
to this variable,
this file in pristine right.

2958
03:25:39,160 --> 03:25:41,440
Nothing will be assigned to this variable.

2959
03:25:42,240 --> 03:25:47,080
And guys see is null

2960
03:25:47,880 --> 03:25:50,360
and the Java has jumped

2961
03:25:50,360 --> 03:25:53,240
right after that to the appropriate
catch block.

2962
03:25:53,720 --> 03:26:05,640
It is clear up till this point.

2963
03:26:05,640 --> 03:26:11,040
So I got an exception
because I didn't provide proper path.

2964
03:26:11,040 --> 03:26:15,120
Then you last repeat last
then you last part, please. Yes.

2965
03:26:15,120 --> 03:26:18,000
So I didn't provide the proper path,

2966
03:26:19,320 --> 03:26:21,440
so I got the exception

2967
03:26:21,440 --> 03:26:25,000
file not found
because my path was just a random string

2968
03:26:25,840 --> 03:26:27,880
and I have bad actually jumped

2969
03:26:28,040 --> 03:26:31,080
to the catch block right.

2970
03:26:31,080 --> 03:26:33,800
So now

2971
03:26:35,160 --> 03:26:38,160
in this scenario, I never opened the file.

2972
03:26:38,480 --> 03:26:40,600
So do I need to close that file? Right?

2973
03:26:41,360 --> 03:26:46,400
If I have never opened the file,
do I need to close it?

2974
03:26:46,400 --> 03:26:48,960
No, I don't need to close it.

2975
03:26:48,960 --> 03:26:52,320
So Java will execute the appropriate block

2976
03:26:52,320 --> 03:26:56,960
and it comes inside the final block
and I am checking

2977
03:26:56,960 --> 03:27:00,960
if file theme is not null,
then only close.

2978
03:27:01,320 --> 03:27:04,040
But right now
it is not really to execute this code.

2979
03:27:04,040 --> 03:27:07,040
Close code, it will not execute it.

2980
03:27:07,360 --> 03:27:10,080
Right. So that's why I put this condition.

2981
03:27:10,360 --> 03:27:13,960
If I never open the file,
which file I should close.

2982
03:27:13,960 --> 03:27:16,000
Right. I don't to close any file.

2983
03:27:16,800 --> 03:27:19,320
So that's why I write this if condition.

2984
03:27:19,320 --> 03:27:21,840
And now let's imagine the happy scenario.

2985
03:27:22,200 --> 03:27:24,160
Okay, so we go back

2986
03:27:26,160 --> 03:27:28,200
and then let's say maybe this

2987
03:27:28,200 --> 03:27:32,200
time we provide the proper part.

2988
03:27:32,320 --> 03:27:35,080
Let me copy this

2989
03:27:37,440 --> 03:27:44,160
and let me debug it again.

2990
03:27:44,160 --> 03:27:46,280
So I press step into

2991
03:27:47,520 --> 03:27:51,360
and then I execute line by line.

2992
03:27:51,360 --> 03:27:55,360
So this time file import
stream is not null

2993
03:27:55,360 --> 03:27:58,640
and it has something in here which mean

2994
03:27:58,640 --> 03:28:01,240
the file has open file has been opened.

2995
03:28:01,680 --> 03:28:18,960
And this time after doing everything,
I get some kind of exceptions.

2996
03:28:18,960 --> 03:28:21,480
Right. But file was opened.

2997
03:28:21,480 --> 03:28:25,280
So again I an exception

2998
03:28:25,720 --> 03:28:28,080
and I get this time

2999
03:28:28,080 --> 03:28:30,080
in null pointer exception

3000
03:28:31,160 --> 03:28:35,360
so appropriate cache block is executed
and now

3001
03:28:36,520 --> 03:28:38,960
I again check if the file is open.

3002
03:28:38,960 --> 03:28:42,240
So file was opened this time but

3003
03:28:42,240 --> 03:28:45,480
we got an exception later on.

3004
03:28:45,480 --> 03:28:46,320
Right.

3005
03:28:46,320 --> 03:28:48,640
So should I close the file now, guys?

3006
03:28:49,280 --> 03:28:54,480
Do I need to close the file? Yes.

3007
03:28:54,880 --> 03:29:00,800
So again, check file is not empty,
so I closed that file and I

3008
03:29:02,840 --> 03:29:04,800
pretended did that.

3009
03:29:04,800 --> 03:29:07,320
So if file is not opened,

3010
03:29:07,760 --> 03:29:09,840
I check it with an if condition.

3011
03:29:10,400 --> 03:29:12,600
If I don't open, I don't need to close it.

3012
03:29:12,960 --> 03:29:16,120
If file is opened and I got an issue

3013
03:29:16,120 --> 03:29:19,440
later on,
that means I need to close that file.

3014
03:29:19,520 --> 03:29:23,080
So I should write it inside
the finally block.

3015
03:29:24,040 --> 03:29:29,600
No matter if all the code is executed
properly, no matter if I get errors,

3016
03:29:29,600 --> 03:29:32,560
no matter at which point I got the errors,

3017
03:29:32,960 --> 03:29:36,640
I am always making sure
that my file is closed.

3018
03:29:36,640 --> 03:29:40,880
It's a critical system resource,
so that's why I used

3019
03:29:40,920 --> 03:29:44,640
they finally
because finally BLOCK is always executed.

3020
03:29:45,000 --> 03:29:47,160
Does it make sense now

3021
03:29:47,160 --> 03:29:52,480
why we updated that file, how we used?

3022
03:29:52,480 --> 03:29:57,960
They try catch block, so that's why we

3023
03:29:59,440 --> 03:30:00,680
updated this

3024
03:30:02,680 --> 03:30:08,560
reader industry.

3025
03:30:08,560 --> 03:30:11,280
And let me check if we can

3026
03:30:13,480 --> 03:30:15,560
also do the same.

3027
03:30:15,560 --> 03:30:18,440
So tell me, guys, which so

3028
03:30:29,800 --> 03:30:30,920
let me right

3029
03:30:30,920 --> 03:30:36,240
so I am here I am again opening a file
this file input stream right.

3030
03:30:36,240 --> 03:30:44,000
So the code that can cause problems,
I put it inside,

3031
03:30:44,000 --> 03:30:48,960
they try, then I write

3032
03:30:48,960 --> 03:30:52,920
catch for example like edge file
not found exception

3033
03:30:54,080 --> 03:30:56,520
and I simply put into the error.

3034
03:30:56,520 --> 03:31:00,200
But at the same time
I don't want my application

3035
03:31:00,240 --> 03:31:02,600
to terminate abruptly.

3036
03:31:03,240 --> 03:31:07,520
And then let's say maybe I see a final.

3037
03:31:07,520 --> 03:31:11,160
So now to make sure
that I can access this variable,

3038
03:31:11,160 --> 03:31:14,400
I must declare it outside of this.

3039
03:31:14,400 --> 03:31:16,240
Try a block.

3040
03:31:16,240 --> 03:31:19,680
And that's why
I have to declare this in here.

3041
03:31:19,680 --> 03:31:22,080
That's why I change this code

3042
03:31:23,560 --> 03:31:27,040
like this.

3043
03:31:27,040 --> 03:31:30,240
So I access it inside of the.

3044
03:31:30,240 --> 03:31:33,080
Finally I checked if

3045
03:31:33,080 --> 03:31:37,560
I file import theme is not equal to null

3046
03:31:39,120 --> 03:31:43,760
then only I want to close it.

3047
03:31:44,960 --> 03:31:47,000
Then only I want to close it.

3048
03:31:47,000 --> 03:31:51,240
And I can also not access
this property file.

3049
03:31:52,040 --> 03:31:53,360
This property object.

3050
03:31:53,360 --> 03:31:56,360
This should also be outside of

3051
03:31:56,360 --> 03:31:57,680
right block

3052
03:32:01,080 --> 03:32:03,960
and I can not really clear a variable

3053
03:32:03,960 --> 03:32:08,520
and all my code looks good.

3054
03:32:08,520 --> 03:32:13,600
I have now incorporated catch
and finally blocks inside my code.

3055
03:32:14,600 --> 03:32:17,320
And I can also put this condition in here

3056
03:32:25,120 --> 03:32:25,920
like this

3057
03:32:25,920 --> 03:32:30,120
using this shorthand operator.

3058
03:32:30,120 --> 03:32:35,760
So now my please share the code,
but it will not be better

3059
03:32:35,760 --> 03:32:39,200
if I push this code
or you guys want to share it in.

3060
03:32:39,200 --> 03:33:14,080
Cool in like ten.

3061
03:33:14,080 --> 03:33:16,160
This was about to finally block

3062
03:33:17,440 --> 03:33:19,160
the code inside.

3063
03:33:19,160 --> 03:33:22,040
The finally clause will always be

3064
03:33:23,640 --> 03:33:26,120
even if an exception is thrown from

3065
03:33:26,120 --> 03:33:28,920
within the try or the catch block.

3066
03:33:30,240 --> 03:33:32,040
If your code has a latency

3067
03:33:32,040 --> 03:33:34,880
it won't entirely try or edge block.

3068
03:33:35,480 --> 03:33:38,160
The code inside of the finally block will

3069
03:33:38,160 --> 03:33:42,240
then get executed
before returning from the method.

3070
03:33:42,240 --> 03:33:45,520
So even if you are writing
the written statement, be you guys know

3071
03:33:46,040 --> 03:33:49,320
after the written statement
Java executes nothing.

3072
03:33:49,920 --> 03:33:53,880
But if you have written statement
still Java executes.

3073
03:33:53,880 --> 03:33:55,840
They finally block

3074
03:33:56,320 --> 03:33:58,640
the main usage of finally block

3075
03:33:58,640 --> 03:34:02,120
is to do cleanup job keeping cleanup.

3076
03:34:02,120 --> 03:34:06,920
And finally, block is always
a good practice when no exceptions

3077
03:34:06,920 --> 03:34:07,560
are that guard.

3078
03:34:07,560 --> 03:34:11,680
And even if the exceptions occur,
it's still good to.

3079
03:34:11,680 --> 03:34:17,280
Execute your code inside of the it,
but it's optional.

3080
03:34:17,280 --> 03:34:21,160
Sometimes you guys will be needing it,
sometimes you will not be needing it.

3081
03:34:22,560 --> 03:34:23,560
You can

3082
03:34:23,600 --> 03:34:25,760
finally block the entire program

3083
03:34:27,240 --> 03:34:29,600
or for each try block

3084
03:34:29,600 --> 03:34:33,680
There can be zero or more catch blocks,
but only one finally.

3085
03:34:34,040 --> 03:34:37,400
So I cannot have multiple finally only one
finally.

3086
03:34:37,600 --> 03:34:38,280
BLOCK

3087
03:34:39,440 --> 03:34:41,800
So there are only

3088
03:34:41,800 --> 03:34:44,760
this this this is the only scenario
where we are finally.

3089
03:34:44,760 --> 03:34:49,560
BLOCK is not executed
if we explicitly try to system or exit

3090
03:34:49,880 --> 03:34:53,760
or by causing a fatal error
that causes the process to abort,

3091
03:34:54,040 --> 03:34:56,080
which means your JVM is crashed.

3092
03:34:56,080 --> 03:34:58,480
Something has happened in that case.

3093
03:34:59,120 --> 03:35:02,280
Java will not definitely
will not be able to execute.

3094
03:35:02,280 --> 03:35:02,480
Right?

3095
03:35:02,480 --> 03:35:05,400
Because Java itself is kind of now

3096
03:35:06,240 --> 03:35:08,480
destroyed from your computer.

3097
03:35:08,480 --> 03:35:13,480
So in that case, obviously
it will not be able to do that.

3098
03:35:13,480 --> 03:35:16,800
It's just an example
finally block in here.

3099
03:35:17,680 --> 03:35:20,360
So this is an important interview
question.

3100
03:35:20,360 --> 03:35:23,640
The interviewers might try to confuse

3101
03:35:23,880 --> 03:35:26,680
you between final and finally.

3102
03:35:26,680 --> 03:35:28,920
BLOCK because they look similar.

3103
03:35:30,520 --> 03:35:31,120
So you guys

3104
03:35:31,120 --> 03:35:33,960
know, finally the keyword use
with the method

3105
03:35:35,000 --> 03:35:37,880
variables or classes.

3106
03:35:37,880 --> 03:35:42,600
And for example,
if we don't want any other class

3107
03:35:42,600 --> 03:35:44,680
to inherit from our class,
we'll use final.

3108
03:35:45,200 --> 03:35:49,040
If we don't want the method
to be overridden in the child classes

3109
03:35:49,040 --> 03:35:50,600
we use final.

3110
03:35:50,600 --> 03:35:54,720
If we don't want the value of a variable
to be changed, we use final.

3111
03:35:55,200 --> 03:35:59,000
But finally, on the other hand, it's
not a keyword, it's a block.

3112
03:35:59,720 --> 03:36:02,520
Finally is used to place important.

3113
03:36:02,520 --> 03:36:04,040
It will be executed well.

3114
03:36:04,040 --> 03:36:07,000
That exception is handled or not rendered.

3115
03:36:07,240 --> 03:36:12,720
Okay, so you can have try and directly
finally, finally the block.

3116
03:36:12,720 --> 03:36:18,400
And while final is a keeper.

3117
03:36:18,400 --> 03:36:21,040
So let me and
let me show you one more thing

3118
03:36:23,880 --> 03:36:25,640
so that you guys don't

3119
03:36:25,640 --> 03:36:47,280
get confused.

3120
03:36:47,280 --> 03:36:48,600
What do you guys think?

3121
03:36:48,600 --> 03:36:51,720
If I get an error before this try.

3122
03:36:51,720 --> 03:36:52,200
BLOCK

3123
03:36:53,280 --> 03:36:53,760
We will.

3124
03:36:53,760 --> 03:37:00,600
Will the
final block still be executed or not?

3125
03:37:00,600 --> 03:37:04,000
So this time
I'm having an issue outside of this try.

3126
03:37:04,000 --> 03:37:04,800
BLOCK

3127
03:37:07,760 --> 03:37:09,640
Yes, this time, finally.

3128
03:37:09,640 --> 03:37:13,960
BLOCK will not be executed
because we never started to try.

3129
03:37:13,960 --> 03:37:16,760
BLOCK We never entered the block.

3130
03:37:17,520 --> 03:37:20,120
So it is only executed once.

3131
03:37:20,120 --> 03:37:22,120
We are inside the try.

3132
03:37:22,120 --> 03:37:24,320
If anything is going wrong, the

3133
03:37:25,320 --> 03:37:27,600
above my piece of code,

3134
03:37:27,600 --> 03:37:30,840
I cannot make sure that my finally block
is still executed.

3135
03:37:31,200 --> 03:37:31,920
Okay?

3136
03:37:31,920 --> 03:37:35,240
It is only executed when one site entered

3137
03:37:35,240 --> 03:37:38,280
retry block because it makes sense, right?

3138
03:37:38,640 --> 03:37:43,200
If I am not executing any piece of code
that can cause problem,

3139
03:37:43,640 --> 03:37:47,040
this has been why I should execute
the finally block, right?

3140
03:37:47,520 --> 03:37:50,600
At least one
line should be executed inside the try.

3141
03:37:51,480 --> 03:37:53,800
Then it makes sense to use the finally

3142
03:37:53,800 --> 03:37:56,760
so if something is happening outside of

3143
03:37:56,760 --> 03:38:03,080
my, then it is not executed

3144
03:38:05,000 --> 03:38:06,960
and then
finally BLOCK will not be executed.

3145
03:38:06,960 --> 03:38:09,600
Is it clear right.

3146
03:38:09,600 --> 03:38:16,440
Only when I entered the applied block.

3147
03:38:16,440 --> 03:38:22,400
So then we have this throws, keyword and

3148
03:38:23,880 --> 03:38:25,800
literal keyword.

3149
03:38:26,600 --> 03:38:29,240
So let's say

3150
03:39:10,200 --> 03:39:11,880
let's say, Guys,

3151
03:39:12,440 --> 03:39:17,640
I am writing a method and what I want.

3152
03:39:18,160 --> 03:39:22,880
I don't want to write the prior
catch block inside this method,

3153
03:39:23,640 --> 03:39:27,040
but instead instead what I want
is that whoever

3154
03:39:27,480 --> 03:39:32,720
also this method should provide
should write the try again.

3155
03:39:32,720 --> 03:39:33,040
So, so.

3156
03:39:33,040 --> 03:39:35,920
So I am not sure how to handle this
exception.

3157
03:39:36,360 --> 03:39:40,920
So what instead I am doing
I want to do that once

3158
03:39:40,920 --> 03:39:45,560
the error is thrown by Java,
I simply hand that

3159
03:39:45,560 --> 03:39:48,880
over to the caller of that method.

3160
03:39:49,520 --> 03:39:52,960
So if I want to do that, then

3161
03:39:53,920 --> 03:39:57,640
instead providing the traffic edge,
I have this upset

3162
03:39:57,960 --> 03:40:01,240
option add exception to method signature

3163
03:40:02,680 --> 03:40:03,600
like abstract.

3164
03:40:03,600 --> 03:40:07,000
Yes. So I
don't want to provide the implementation.

3165
03:40:07,000 --> 03:40:09,120
I don't want that catch block.

3166
03:40:09,120 --> 03:40:13,320
I don't want to write it back because I
maybe I don't know how to handle that

3167
03:40:13,320 --> 03:40:16,840
exception
or may be someone who will be calling.

3168
03:40:16,840 --> 03:40:20,800
This method has better idea
how to handle this issue.

3169
03:40:21,240 --> 03:40:25,440
So what I can do, I can use rules, keyword

3170
03:40:27,080 --> 03:40:29,440
and the name of the exception

3171
03:40:30,040 --> 03:40:34,200
that is
that can be thrown by my piece of code.

3172
03:40:34,840 --> 03:40:37,680
Now, whoever will be calling

3173
03:40:37,680 --> 03:40:41,480
this method has to provide it.

3174
03:40:41,480 --> 03:40:43,040
Try as block.

3175
03:40:43,040 --> 03:40:43,680
Yeah.

3176
03:40:43,680 --> 03:40:46,480
So whoever is calling this matter

3177
03:40:48,080 --> 03:40:53,240
now, he must provide a prior block right.

3178
03:40:53,240 --> 03:40:55,320
So it's like I gave you some homework

3179
03:40:57,320 --> 03:40:58,680
and you gave that homework

3180
03:40:58,680 --> 03:41:17,800
for someone else.

3181
03:41:17,800 --> 03:41:19,560
So this is also possible.

3182
03:41:19,560 --> 03:41:21,800
How this is possible with the pros given.

3183
03:41:21,800 --> 03:41:24,920
And after that,
I write the name of the exception

3184
03:41:24,920 --> 03:41:28,360
and then whoever will be calling
my method.

3185
03:41:29,240 --> 03:41:30,320
Yes, temporarily.

3186
03:41:30,320 --> 03:41:36,000
The remedy will have will be providing
the implementation for that error.

3187
03:41:36,240 --> 03:41:36,880
Okay.

3188
03:41:37,000 --> 03:41:40,320
So when you guys will be working in teams,
maybe you guys want to

3189
03:41:40,320 --> 03:41:45,480
handle all of your issues in one,
so every one of you will be throwing

3190
03:41:45,480 --> 03:41:48,120
that exception
with the help of this throws keyword

3191
03:41:48,960 --> 03:41:54,480
to the caller and then the will combine
all those exceptions

3192
03:41:54,480 --> 03:41:58,680
and will write all the catch blocks
and will fix those issues.

3193
03:41:59,000 --> 03:42:01,920
So if you want, this is also possible.

3194
03:42:01,920 --> 03:42:03,960
So that's what you guys have been doing
till now.

3195
03:42:04,240 --> 03:42:09,840
You remember you have been adding this
clause to this method signature of main.

3196
03:42:09,920 --> 03:42:10,680
So you are

3197
03:42:11,880 --> 03:42:15,160
giving
this responsibility to the Java Dark Java.

3198
03:42:15,160 --> 03:42:16,520
I don't know how to handle this.

3199
03:42:16,520 --> 03:42:20,040
You handle it
and how Java was handling it by simply

3200
03:42:20,640 --> 03:42:24,120
throwing error message on the console
and terminating your program.

3201
03:42:24,720 --> 03:42:27,120
So this is how Java handles it.

3202
03:42:27,880 --> 03:42:30,360
And so let's say, for example,
if you don't want

3203
03:42:30,360 --> 03:42:35,480
to handle in here as well,
you can go again, maybe throw it to start

3204
03:42:35,480 --> 03:42:39,880
to add someone else and you can write
clause and again file not so.

3205
03:42:39,880 --> 03:42:43,840
So now Java will handle it,
but how has this default handle?

3206
03:42:44,280 --> 03:42:47,680
It? Simply trolled the error message
and closed your program there.

3207
03:42:47,720 --> 03:42:59,640
How Java handles
it just so there are all the possible.

3208
03:42:59,640 --> 03:43:02,800
So I will keep trying until unless finally

3209
03:43:02,800 --> 03:43:06,640
someone put trying to code.

3210
03:43:06,640 --> 03:43:10,320
But the program is executed
in case of thread or slave.

3211
03:43:10,320 --> 03:43:12,680
The time will be executed totally. Yep.

3212
03:43:14,520 --> 03:43:16,760
Yes. Throwing the problem at each the.

3213
03:43:17,680 --> 03:43:21,080
So how about the program is executed

3214
03:43:21,080 --> 03:43:24,840
in case of third or slip
the time will be executed to sleep? Yes.

3215
03:43:25,240 --> 03:43:28,800
So back to Trader Dart slip it throws

3216
03:43:29,360 --> 03:43:31,440
a very special unique

3217
03:43:31,920 --> 03:43:35,040
exception
and it's very rare that it occurs.

3218
03:43:35,160 --> 03:43:36,240
It's very rarity.

3219
03:43:36,240 --> 03:43:38,520
That's why you guys never had any problems

3220
03:43:39,200 --> 03:43:53,880
executing that predatory.

3221
03:43:53,880 --> 03:43:59,400
Yes. And under special case,
it happens when your processor

3222
03:44:01,680 --> 03:44:04,080
so your trader sleep
what it actually doing

3223
03:44:04,080 --> 03:44:06,440
it pulls your thread or to slip.

3224
03:44:07,440 --> 03:44:09,440
And if you have written

3225
03:44:09,440 --> 03:44:11,760
a piece of code inside the thread slave

3226
03:44:13,080 --> 03:44:17,400
which will continue slipping all the time,
then out for some time,

3227
03:44:17,400 --> 03:44:22,240
your processor will go and check,
Hey man, you have to wake after some time.

3228
03:44:22,520 --> 03:44:23,840
It's been very long.

3229
03:44:23,840 --> 03:44:25,840
You, you, you are sleeping.

3230
03:44:25,840 --> 03:44:31,800
Then your CPU will throw that
exception so that you don't

3231
03:44:32,880 --> 03:44:34,440
write to such programs.

3232
03:44:34,440 --> 03:44:38,560
We just keep on executing always and doing

3233
03:44:38,560 --> 03:44:44,040
nothing just to sleeping.

3234
03:44:44,040 --> 03:44:47,880
So clause is a keyword in java language
which is used

3235
03:44:48,000 --> 03:44:52,160
to throw exception,
which is raised in the call.

3236
03:44:52,160 --> 03:44:55,080
The method inside the calling method

3237
03:44:56,880 --> 03:45:00,280
throws keyword
always followed by a method signature.

3238
03:45:00,280 --> 03:45:03,480
We write this clause,
then the name of the exception

3239
03:45:03,480 --> 03:45:07,320
and then the name, then the brackets.

3240
03:45:08,880 --> 03:45:13,440
Pro's keyword is mainly used for handling
jacketed exceptions.

3241
03:45:13,440 --> 03:45:13,920
Okay.

3242
03:45:13,920 --> 03:45:17,160
But you can also use it for uncheck

3243
03:45:17,200 --> 03:45:20,960
and exceptions. So

3244
03:45:23,160 --> 03:45:25,400
it gives an information

3245
03:45:25,400 --> 03:45:28,680
to the programmer
that there may occur an exception.

3246
03:45:28,680 --> 03:45:32,280
So it's better for the programmer
to provide try get.

3247
03:45:32,280 --> 03:45:39,160
BLOCK Okay,
So this was a simple piece of code.

3248
03:45:39,160 --> 03:45:43,640
You wrote another method
and inside that matter now you use true

3249
03:45:43,680 --> 03:45:47,880
schema in a you are trying
this input output exception.

3250
03:45:47,880 --> 03:45:51,120
So now whoever follows
this display method has

3251
03:45:51,120 --> 03:45:54,480
to provide breakage.

3252
03:45:54,480 --> 03:45:57,720
And finally we have the true keyword

3253
03:45:59,640 --> 03:46:00,800
being baby D'Aloisio.

3254
03:46:00,800 --> 03:46:01,640
Back to

3255
03:46:04,440 --> 03:46:06,600
who? Let's say guys,

3256
03:46:06,600 --> 03:46:09,720
now you you are champions, right?

3257
03:46:09,720 --> 03:46:12,720
Professional as that ingenious.

3258
03:46:12,720 --> 03:46:15,360
Qualified as that ingenious. Right.

3259
03:46:15,840 --> 03:46:18,800
You guys can start testing
nuclear reactors

3260
03:46:20,240 --> 03:46:24,000
and they will just work fine

3261
03:46:24,080 --> 03:46:26,080
example So

3262
03:46:26,080 --> 03:46:30,200
and now you want to build
your own exceptions.

3263
03:46:30,200 --> 03:46:36,560
We will of the world.

3264
03:46:36,560 --> 03:46:38,840
Okay, So if you want to

3265
03:46:40,520 --> 03:46:42,960
write your own exceptions

3266
03:46:43,320 --> 03:46:46,120
like Java guys did like

3267
03:46:47,320 --> 03:46:49,640
so for example,

3268
03:46:49,640 --> 03:46:51,760
this file not found exception

3269
03:46:51,760 --> 03:46:53,840
if we go inside of this file,

3270
03:46:54,840 --> 03:46:58,080
you see this through new Let's say
you want to do something

3271
03:46:58,080 --> 03:47:02,000
like this,
you are building a new framework.

3272
03:47:02,000 --> 03:47:06,120
You want to have a standard mechanism
to handle data.

3273
03:47:06,200 --> 03:47:11,280
So you want to also throw the errors
like Java guys have done in the JDK.

3274
03:47:11,280 --> 03:47:14,960
Maybe you are working
or writing your own custom exceptions.

3275
03:47:15,360 --> 03:47:17,440
Then you can also do that.

3276
03:47:17,640 --> 03:47:21,000
You can create your own exceptions
and you can use this

3277
03:47:21,000 --> 03:47:24,320
through keyword.

3278
03:47:24,320 --> 03:47:26,200
So let me

3279
03:47:28,440 --> 03:47:30,800
create an account class

3280
03:47:31,080 --> 03:47:33,600
with this simple account class and

3281
03:47:35,960 --> 03:47:38,080
inside this account class

3282
03:47:38,080 --> 03:47:40,240
we have public

3283
03:47:43,280 --> 03:47:44,240
static word

3284
03:47:44,240 --> 03:47:55,920
method.

3285
03:47:55,920 --> 03:48:00,680
So how you can create your own exceptions
to create your own exceptions,

3286
03:48:01,080 --> 03:48:03,760
you guys, it's simple.

3287
03:48:03,760 --> 03:48:05,320
It's like inheritance.

3288
03:48:05,320 --> 03:48:08,160
So you create a class.

3289
03:48:08,160 --> 03:48:13,080
Let me created outside in here, let's say

3290
03:48:13,160 --> 03:48:22,760
insufficient balance.

3291
03:48:22,760 --> 03:48:24,800
And it's a kind of

3292
03:48:26,400 --> 03:48:28,880
standard to put the exception keyword

3293
03:48:29,440 --> 03:48:32,200
after the exception plus.

3294
03:48:32,200 --> 03:48:37,440
So insufficient balance exception.

3295
03:48:37,440 --> 03:48:41,480
So if you want to create your own
exceptions, you can do so

3296
03:48:41,480 --> 03:48:44,040
by extending it from the

3297
03:48:45,840 --> 03:48:49,120
exception class.

3298
03:48:49,120 --> 03:48:52,120
And then can we create on simple

3299
03:48:52,640 --> 03:48:56,400
custom
made seems with the Java after school.

3300
03:48:56,600 --> 03:48:57,840
Yes. Or one you can.

3301
03:48:57,840 --> 03:48:59,240
Yes. Yep.

3302
03:49:00,520 --> 03:49:03,840
So I write the constructor

3303
03:49:16,160 --> 03:49:17,760
and I simply call

3304
03:49:17,760 --> 03:49:22,040
and pass this message in here.

3305
03:49:22,040 --> 03:49:24,440
So I have created my own exception.

3306
03:49:25,960 --> 03:49:27,320
It's very simple.

3307
03:49:27,320 --> 03:49:30,200
You just have to

3308
03:49:30,760 --> 03:49:32,040
inherit you.

3309
03:49:32,040 --> 03:49:35,880
You just have to create a class,
make it inherited from exception class

3310
03:49:35,880 --> 03:49:39,360
and that's it. Who?

3311
03:49:39,400 --> 03:49:42,120
Now I write this

3312
03:49:48,840 --> 03:49:53,240
that this.

3313
03:49:53,240 --> 03:49:57,840
That's a good draw method.

3314
03:49:57,840 --> 03:50:07,360
So I take in number out

3315
03:50:08,600 --> 03:50:12,120
and I check if

3316
03:50:12,760 --> 03:50:14,600
if the user

3317
03:50:14,600 --> 03:50:17,920
is trying to enter in negative amount,

3318
03:50:19,360 --> 03:50:22,040
I want to throw an exception right
like java.

3319
03:50:22,040 --> 03:50:26,520
Guys are throwing exceptions on us
and if file is not found

3320
03:50:27,280 --> 03:50:29,960
and we encounter null pointer
index out of bounds.

3321
03:50:30,000 --> 03:50:35,360
So we we are also now want to build
that mechanism inside our framework.

3322
03:50:35,360 --> 03:50:38,520
So what I can see, I can see through

3323
03:50:40,680 --> 03:50:43,840
new and then the name of the custom class

3324
03:50:44,040 --> 03:50:46,200
in sufficient balance exception.

3325
03:50:47,360 --> 03:51:00,560
And I can write, render or

3326
03:51:02,560 --> 03:51:03,360
sorry

3327
03:51:05,760 --> 03:51:07,200
I'm all

3328
03:51:07,520 --> 03:51:09,200
got the

3329
03:51:09,800 --> 03:51:10,920
negative.

3330
03:51:11,240 --> 03:51:13,320
Yeah.

3331
03:51:13,320 --> 03:51:14,440
Like this.

3332
03:51:15,120 --> 03:51:17,280
And now

3333
03:51:17,680 --> 03:51:22,280
because I am throwing an exception,
I must mention it

3334
03:51:22,280 --> 03:51:24,960
inside the body clause

3335
03:51:26,400 --> 03:51:29,040
and then in sufficient badness.

3336
03:51:29,040 --> 03:51:29,600
Right.

3337
03:51:29,760 --> 03:51:33,480
So now I have also developed
this mechanism inside of my framework.

3338
03:51:34,760 --> 03:51:38,240
So what will happen now

3339
03:51:51,960 --> 03:51:54,400
if someone is using my code,

3340
03:51:54,440 --> 03:51:56,880
my API account

3341
03:51:58,320 --> 03:52:00,000
to withdraw

3342
03:52:00,120 --> 03:52:03,120
if it enters the positive amount?

3343
03:52:03,360 --> 03:52:04,480
I don't get any shows.

3344
03:52:04,480 --> 03:52:08,160
But you see
now my code is also giving an error.

3345
03:52:08,560 --> 03:52:11,480
So this is how this Java guides
have developed these APIs

3346
03:52:11,880 --> 03:52:13,560
and it says

3347
03:52:15,240 --> 03:52:17,640
surrounded with dry at block you see.

3348
03:52:17,640 --> 03:52:20,040
So I have created my own exception.

3349
03:52:20,920 --> 03:52:22,240
My own exception.

3350
03:52:22,240 --> 03:52:29,040
And now if anything goes well,
I get no issues.

3351
03:52:29,400 --> 03:52:32,120
If I say

3352
03:52:33,000 --> 03:52:34,920
I, if I try entering

3353
03:52:34,920 --> 03:52:39,160
negative numbers.

3354
03:52:39,160 --> 03:52:42,400
So I get the on the exact same pattern.

3355
03:52:42,400 --> 03:52:47,160
You see, this was the message
that I specified amount got to be negative

3356
03:52:47,400 --> 03:52:51,600
so divided by zero
file is not found all of these messages

3357
03:52:52,120 --> 03:52:56,880
how how they are based in here because

3358
03:52:58,760 --> 03:53:04,120
once so

3359
03:53:04,360 --> 03:53:07,240
once I encounter that specific scenario

3360
03:53:07,240 --> 03:53:09,720
I specify the message that I want

3361
03:53:10,320 --> 03:53:14,640
this name of the exception
glass is automatically taken by Java

3362
03:53:14,960 --> 03:53:18,040
and all this information about the ad
or the line

3363
03:53:18,040 --> 03:53:20,920
number, the package and all that.

3364
03:53:21,600 --> 03:53:24,760
That's what I was asking
earlier, showing the lines.

3365
03:53:24,800 --> 03:53:29,200
Okay, so this is how you guys
can create your own exceptions

3366
03:53:32,600 --> 03:53:35,240
and you can use the exact same framework,

3367
03:53:35,240 --> 03:53:40,440
exact same mechanism
like dialog is are doing in JDK

3368
03:53:40,440 --> 03:53:49,960
to avoid the issues.

3369
03:53:49,960 --> 03:53:54,240
So you're showing the lines of all or not

3370
03:53:54,920 --> 03:53:57,560
all one exception. So

3371
03:53:59,360 --> 03:54:01,520
so how can we create our own custom

3372
03:54:01,520 --> 03:54:03,800
exceptions, create a class,

3373
03:54:04,520 --> 03:54:07,880
make it extend from exception,

3374
03:54:07,880 --> 03:54:09,720
and then all the

3375
03:54:09,720 --> 03:54:12,960
this the super and pass
this method inside the constructor.

3376
03:54:14,080 --> 03:54:16,360
Now the template that is writing

3377
03:54:16,360 --> 03:54:21,040
and then how to use those exceptions.

3378
03:54:21,040 --> 03:54:26,560
Wherever you want to use those exceptions,
use the true keyword, create

3379
03:54:27,120 --> 03:54:30,800
the object of that class amount, be active
and throw it

3380
03:54:30,960 --> 03:54:33,640
using the pro keyword

3381
03:54:34,560 --> 03:54:36,800
amount account class.

3382
03:54:36,800 --> 03:54:39,960
Yes, this is the account class

3383
03:54:42,480 --> 03:54:44,720
and that's the task team.

3384
03:54:44,800 --> 03:54:46,600
You guys can call down your brands

3385
03:54:46,600 --> 03:54:47,760
after this

3386
03:54:50,880 --> 03:54:57,600
demo. 11.

3387
03:54:57,600 --> 03:55:00,040
So this is good demo 11

3388
03:55:04,760 --> 03:55:07,240
This would be the account,

3389
03:55:07,240 --> 03:55:07,920
right?

3390
03:55:08,160 --> 03:55:11,640
So in here
I am creating the exception in here

3391
03:55:11,720 --> 03:55:16,080
am using that exception and in here
someone is trying to use my code

3392
03:55:16,080 --> 03:55:19,080
and he is getting that exception.

3393
03:55:19,080 --> 03:55:23,960
So this is how I can use pro and throws
keyword and I can create my own

3394
03:55:23,960 --> 03:55:30,320
exceptions.

3395
03:55:30,320 --> 03:55:37,360
Are you guys alive or dead
right from inside?

3396
03:55:37,360 --> 03:55:37,960
Are dead

3397
03:55:40,560 --> 03:55:43,920
fully dead?

3398
03:55:43,920 --> 03:55:47,400
Okay, so no more Java from today.

3399
03:55:47,720 --> 03:55:53,320
Yeah,
you guys did it alive, but completely.

3400
03:55:53,320 --> 03:55:54,240
You guys.

3401
03:55:54,240 --> 03:55:57,800
You guys can be very good actors.

3402
03:55:57,800 --> 03:56:02,200
And the days of you is

3403
03:56:04,080 --> 03:56:09,400
now I will be on your Monday is as well.

3404
03:56:09,400 --> 03:56:12,840
I am sad you are to Java class.

3405
03:56:14,160 --> 03:56:14,720
Don't worry.

3406
03:56:14,720 --> 03:56:16,760
We still have classes.

3407
03:56:16,760 --> 03:56:19,320
I still have to use guys. No, I can.

3408
03:56:19,600 --> 03:56:23,400
I can better reunion review classes
than the normal classes.

3409
03:56:23,400 --> 03:56:26,600
Right?

3410
03:56:26,600 --> 03:56:29,520
I don't know how to review all Java
the list of.

3411
03:56:29,520 --> 03:56:31,200
I also don't know.

3412
03:56:31,200 --> 03:56:33,360
Maybe you can try reading the slides

3413
03:56:38,040 --> 03:56:39,160
if it's

3414
03:56:41,240 --> 03:56:41,960
working that

3415
03:56:41,960 --> 03:56:49,360
how to begin.

3416
03:56:49,360 --> 03:56:52,960
So let me quickly go through the slides
and then then I can

3417
03:56:52,960 --> 03:56:56,640
I can see your drama.

3418
03:56:56,640 --> 03:57:00,720
So in Java,
throw keyword videos to throw an exception

3419
03:57:00,720 --> 03:57:04,800
explicitly using true keyword,
we can throw Jack unchecked

3420
03:57:04,800 --> 03:57:07,920
and user defined
so we can basically throw anything.

3421
03:57:08,760 --> 03:57:11,400
We can start from the first class.

3422
03:57:11,400 --> 03:57:14,840
Actually, it's a good idea
to start from the first class. Now

3423
03:57:17,560 --> 03:57:19,600
at least maybe one class per day.

3424
03:57:19,600 --> 03:57:23,200
And I think a little bit of code

3425
03:57:23,200 --> 03:57:25,640
karaoke word is mainly used to throw

3426
03:57:25,640 --> 03:57:28,440
the custom exceptions.

3427
03:57:28,640 --> 03:57:32,480
Only object of deployable class
or subclass can be thrown.

3428
03:57:32,480 --> 03:57:35,800
So let's say for example, if you

3429
03:57:35,920 --> 03:57:39,200
generate yes, we can start all over again.

3430
03:57:40,400 --> 03:57:52,960
It's the

3431
03:57:53,480 --> 03:57:59,960
we cannot throw any other objects
like for example, instead of this,

3432
03:57:59,960 --> 03:58:07,320
if I try to set through a new account,
I cannot do that.

3433
03:58:07,320 --> 03:58:07,600
Okay.

3434
03:58:07,600 --> 03:58:08,760
Only the exception.

3435
03:58:08,760 --> 03:58:11,120
I can only use

3436
03:58:11,120 --> 03:58:14,560
this keyword with exception classes

3437
03:58:19,200 --> 03:58:19,760
program

3438
03:58:19,760 --> 03:58:23,040
execution
stops on encountering true statement

3439
03:58:23,040 --> 03:58:27,080
and the closest catch statement
is tagged for a matching.

3440
03:58:27,080 --> 03:58:31,440
So let's say for example, if there was
a cache block inside that specific matter.

3441
03:58:31,720 --> 03:58:34,040
Plus java will prefer that one.

3442
03:58:34,040 --> 03:58:40,080
If not, will check
who who called this method.

3443
03:58:40,080 --> 03:58:43,040
So if a proper cache block is present over

3444
03:58:43,080 --> 03:58:45,360
there,
it will throw that exception in there.

3445
03:58:45,360 --> 03:58:50,520
If not, then it will to check
whoever called that method.

3446
03:58:50,520 --> 03:58:52,160
Throw the Mac into the window.

3447
03:58:53,960 --> 03:58:55,040
Please don't do that.

3448
03:58:55,040 --> 03:58:56,280
We have saw and saw.

3449
03:58:56,280 --> 03:58:59,000
One can take that Mac and

3450
03:59:00,360 --> 03:59:03,440
so when someone is throwing the Mac

3451
03:59:03,800 --> 03:59:06,760
from the window,
please be outside of that window.

3452
03:59:07,240 --> 03:59:08,720
Your chance

3453
03:59:12,840 --> 03:59:14,160
program execution

3454
03:59:14,160 --> 03:59:16,800
stops on encountering the pro

3455
03:59:18,280 --> 03:59:21,720
awkward always should exist
within the method of body.

3456
03:59:21,720 --> 03:59:25,080
I can not use that with classes or const.

3457
03:59:25,080 --> 03:59:29,520
I can use it with constructor
but not with classes.

3458
03:59:29,520 --> 03:59:30,040
Okay.

3459
03:59:30,920 --> 03:59:34,080
Whenever anybody container stroke ever,
then the call

3460
03:59:34,080 --> 03:59:36,960
method should be followed by it
throws keyword.

3461
03:59:37,280 --> 03:59:37,600
Yeah.

3462
03:59:37,600 --> 03:59:40,640
So inside method we use true

3463
03:59:41,400 --> 03:59:43,920
with the header of the method
we use to rows

3464
03:59:44,040 --> 03:59:45,480
with s

3465
03:59:51,000 --> 03:59:54,160
is just an example,

3466
03:59:54,160 --> 03:59:56,200
but only work by the way you can throw

3467
03:59:58,440 --> 04:00:03,360
already building exceptions as well.

3468
04:00:03,360 --> 04:00:08,160
So it's not mandatory that you always have
to create your own exception.

3469
04:00:08,160 --> 04:00:08,400
Right.

3470
04:00:08,400 --> 04:00:12,400
We can throw arithmetic null
point about anything that

3471
04:00:15,120 --> 04:00:16,920
these are some thoughts

3472
04:00:16,920 --> 04:00:21,680
for you. Yes.

3473
04:00:21,680 --> 04:00:30,120
And I just give me one more method.

3474
04:00:30,120 --> 04:00:33,960
So throw is used inside
the method body and truth

3475
04:00:34,800 --> 04:00:50,640
with Astrobee
that is used with the header of the body.

3476
04:00:50,640 --> 04:00:54,480
So throw is used to explicitly throw
an exception.

3477
04:00:54,480 --> 04:00:56,680
Throw is followed, an instance

3478
04:00:57,680 --> 04:00:59,880
throw is used within method body.

3479
04:00:59,880 --> 04:01:03,120
You cannot throw multiple exceptions,
only one at a time.

3480
04:01:03,720 --> 04:01:06,840
True keyword can be used
in which case using java

3481
04:01:08,160 --> 04:01:11,600
proceeds user to declare an exception
to tell

3482
04:01:11,600 --> 04:01:15,440
that this method
can throw some kind of exceptions,

3483
04:01:15,440 --> 04:01:19,000
It is followed
by the name of that Class B,

3484
04:01:19,200 --> 04:01:21,240
whose exception can be thrown

3485
04:01:22,640 --> 04:01:27,240
through is used with the method signature
you can declare multiple exceptions.

3486
04:01:27,240 --> 04:01:31,320
For example, a single method
can throw multiple types of exception.

3487
04:01:31,320 --> 04:01:34,120
For example, I can write

3488
04:01:35,160 --> 04:01:36,440
comma and then

3489
04:01:36,440 --> 04:01:38,880
maybe null point of exception like this,

3490
04:01:39,600 --> 04:01:41,920
so I can specify multiple.

3491
04:01:42,040 --> 04:01:47,320
Last year I bought MacBook and I got
two laptops instead of one by accident.

3492
04:01:47,680 --> 04:01:48,840
Oh my God.

3493
04:01:48,840 --> 04:01:50,200
What is it?

3494
04:01:50,200 --> 04:01:52,320
Are you serious?

3495
04:01:52,680 --> 04:01:55,320
Inside the same box

3496
04:01:57,920 --> 04:01:58,280
rules.

3497
04:01:58,280 --> 04:02:02,440
Keyword cannot be used anywhere
except on method of declaration.

3498
04:02:02,440 --> 04:02:06,240
Lying to a different.

3499
04:02:07,440 --> 04:02:09,000
And here we go.

3500
04:02:09,000 --> 04:02:11,400
All for 180

3501
04:02:11,680 --> 04:02:15,720
485 slides.

3502
04:02:15,720 --> 04:02:20,560
And you guys are still alive, private
and ready

3503
04:02:20,560 --> 04:02:24,240
to learn the frameworks and all that.

3504
04:02:24,320 --> 04:02:27,120
Finally.

3505
04:02:27,120 --> 04:02:30,400
So two different boxes or two deliveries.

3506
04:02:31,800 --> 04:02:35,000
Also, guys, if you have any suggestions

3507
04:02:35,280 --> 04:02:39,240
this Java course, please,
please send me those suggestions.

3508
04:02:39,240 --> 04:02:41,560
You can send me a direct message.

3509
04:02:41,560 --> 04:02:42,680
What does that mean?

3510
04:02:42,680 --> 04:02:45,720
It means dancing and party

3511
04:02:45,720 --> 04:02:48,200
and having fun with your friends.

3512
04:02:48,840 --> 04:02:49,720
We are flying

3513
04:02:53,760 --> 04:02:54,200
moment.

3514
04:02:54,200 --> 04:02:59,840
Do you feel better now?

3515
04:02:59,840 --> 04:03:04,080
Just so you guys can send me the.

3516
04:03:04,600 --> 04:03:05,960
Where is Alexa?

3517
04:03:05,960 --> 04:03:09,120
Alexa, are you with us?

3518
04:03:10,840 --> 04:03:11,600
Glass bottle.

3519
04:03:11,600 --> 04:03:17,680
Does you guys still need a glass for us?

3520
04:03:17,680 --> 04:03:20,800
He was encapsulated two boxes
and one delivery.

3521
04:03:20,800 --> 04:03:24,120
First, I thought in one box, left
open opening, second one cable and so on.

3522
04:03:24,120 --> 04:03:28,920
But when I opened two boxes, I was like,
Come here, we will give you a party.

3523
04:03:28,920 --> 04:03:32,080
Is definitely if were.

3524
04:03:32,160 --> 04:03:34,200
Where is the glass for steams

3525
04:03:35,680 --> 04:03:38,360
that glass on streams
I will share of that as well.

3526
04:03:39,960 --> 04:03:42,000
That was really a perfect candle

3527
04:03:42,000 --> 04:03:45,360
for your drama glasses.

3528
04:03:45,360 --> 04:03:48,880
This glass should be
thought at least three times.

3529
04:03:48,880 --> 04:03:54,840
This section once.

3530
04:03:54,840 --> 04:03:58,240
Please display the three pages
before you end

3531
04:04:00,360 --> 04:04:01,440
this one.

3532
04:04:02,040 --> 04:04:09,600
You know this one?

3533
04:04:09,600 --> 04:04:10,960
Oh, I say it's simple.

3534
04:04:10,960 --> 04:04:15,120
It means you just have to watch this video
If you are video three

3535
04:04:15,120 --> 04:04:20,600
times, you can start working on it

3536
04:04:20,920 --> 04:04:24,840
right after I upload it.

3537
04:04:24,840 --> 04:04:26,000
Watching is different.

3538
04:04:26,000 --> 04:04:27,800
You you are two best.

3539
04:04:27,800 --> 04:04:31,160
If you were to go through that painting,

3540
04:04:31,160 --> 04:04:34,600
you let me to also go through that pain
three times.

3541
04:04:34,600 --> 04:04:39,400
The video. But

3542
04:04:42,600 --> 04:04:44,080
I'm not doing it.

3543
04:04:44,080 --> 04:04:49,360
That's why we have recordings.

3544
04:04:49,360 --> 04:04:52,280
But percentage of DOA and Java we do and

3545
04:04:53,360 --> 04:04:55,680
it's like ABC.

3546
04:04:55,680 --> 04:04:58,800
It's like alphabets of English, the Java

3547
04:04:58,800 --> 04:05:11,360
that you guys know.

3548
04:05:11,360 --> 04:05:14,840
I mean, using this knowledge,
you guys cannot build anything real

3549
04:05:14,840 --> 04:05:21,320
that can solve any real problem
if just know how to write code.

3550
04:05:23,320 --> 04:05:25,680
I mean, you guys cannot build anything
real, right?

3551
04:05:26,080 --> 04:05:31,240
Using This knowledge.

3552
04:05:31,240 --> 04:05:35,280
Can you guys build
anything that can solve a real problem?

3553
04:05:35,280 --> 04:05:38,400
Anything like Google Chrome,
Java, slide web

3554
04:05:38,400 --> 04:05:44,920
side side.

3555
04:05:44,920 --> 04:05:50,320
So it's just the basics
to know how to use libraries.

3556
04:05:50,760 --> 04:05:55,880
So the next steps from here are
if you really want to good applications.

3557
04:05:56,240 --> 04:05:59,480
The next steps are learning
about your data structures,

3558
04:06:00,160 --> 04:06:04,680
then learning about design
patterns and databases,

3559
04:06:04,680 --> 04:06:10,320
and then some frameworks which will help
you develop your applications and then

3560
04:06:11,280 --> 04:06:14,520
deploying and all that.

3561
04:06:14,520 --> 04:06:17,880
We definitely know how to create a dog
with pink

3562
04:06:17,880 --> 04:06:22,800
color.

3563
04:06:22,800 --> 04:06:26,240
How many percent did
we learn from the whole our language?

3564
04:06:27,000 --> 04:06:31,080
It's not even 1%, Nikolai.

3565
04:06:32,520 --> 04:06:34,840
It's just how to read our code.

3566
04:06:35,760 --> 04:06:39,360
The thing that you guys have learned
is it's just how to read

3567
04:06:39,800 --> 04:06:44,400
a little bit of Java.

3568
04:06:44,400 --> 04:06:48,320
Java is Java is huge
and very motivational.

3569
04:06:48,400 --> 04:06:51,120
So you guys are champion.

3570
04:06:51,120 --> 04:06:55,560
You guys can now work
with any library out there

3571
04:06:55,680 --> 04:07:01,000
and can start using that
and you can develop drawn to using Java.

3572
04:07:01,040 --> 04:07:04,640
You can program your microwave ovens,

3573
04:07:05,040 --> 04:07:07,680
you can build websites, games

3574
04:07:07,680 --> 04:07:12,720
and desktop applications
because the basics are clear now.

3575
04:07:12,960 --> 04:07:17,600
So you just now
have to learn some APIs, some libraries,

3576
04:07:17,960 --> 04:07:21,560
and then you just have to call
some specific methods

3577
04:07:21,560 --> 04:07:24,640
that those methods
will do all the stuff for you.

3578
04:07:25,080 --> 04:07:27,080
And that's how the applications are good.

3579
04:07:28,680 --> 04:07:29,840
At least we know how

3580
04:07:29,840 --> 04:07:37,800
to search on Google.

3581
04:07:37,800 --> 04:07:40,080
I mean, you guys can read Excel
files, right?

3582
04:07:40,560 --> 04:07:44,960
If if something very big reading an Excel
file, Right.

3583
04:07:44,960 --> 04:07:49,920
Great reading,
opening some websites on the

3584
04:07:50,960 --> 04:07:54,360
on the web
and then clicking on different buttons.

3585
04:07:54,920 --> 04:07:58,520
So you like you are learning selenium.

3586
04:07:58,520 --> 04:08:01,360
Now you can learn other tools

3587
04:08:02,800 --> 04:08:05,000
and with the help of Java, you will be

3588
04:08:05,360 --> 04:08:07,400
you will be able to do a much more

3589
04:08:08,760 --> 04:08:12,000
with the help of Java and that too.

3590
04:08:12,000 --> 04:08:13,800
So what is Matrix?

3591
04:08:13,800 --> 04:08:16,320
You told us we can work in nuclear reactor

3592
04:08:16,920 --> 04:08:19,320
and you said we only know zero
point to two.

3593
04:08:19,360 --> 04:08:23,000
Yes. To destroy a nuclear reactor
you just need to know

3594
04:08:23,000 --> 04:08:25,920
0.001

3595
04:08:26,520 --> 04:08:32,400
at least I know that
I don't know any Java.

3596
04:08:32,400 --> 04:08:35,160
Are you talking Gladiator Dog Day?

3597
04:08:35,360 --> 04:08:36,920
You serious now or not?

3598
04:08:36,920 --> 04:08:38,880
Please don't take me serious. No, no.

3599
04:08:38,880 --> 04:08:43,080
All of it was joke.

3600
04:08:43,080 --> 04:08:46,960
Despite learning you guys has Now
I am serious.

3601
04:08:47,320 --> 04:08:48,720
Let me. Let me be serious.

3602
04:08:50,200 --> 04:08:52,920
You guys done a marvelous job.

3603
04:08:53,720 --> 04:08:55,240
Please let me be serious.

3604
04:08:55,240 --> 04:08:58,920
Guys.

3605
04:08:58,920 --> 04:09:01,160
You guys, don't let me be serious

3606
04:09:02,120 --> 04:09:08,000
the way I always try to be serious.

3607
04:09:08,000 --> 04:09:11,920
Yeah, And we say that we know Java
now or it's not.

3608
04:09:12,120 --> 04:09:13,680
Yes, Yes, I am serious.

3609
04:09:13,680 --> 04:09:19,000
You guys know a lot.

3610
04:09:19,000 --> 04:09:26,640
He is bored at home,
so he is just making some fun with us.

3611
04:09:26,640 --> 04:09:28,800
So you guys know. All right.

3612
04:09:28,800 --> 04:09:29,760
Thank you very much.

3613
04:09:29,760 --> 04:09:31,320
You are a wonderful teacher.

3614
04:09:31,320 --> 04:09:33,800
You know how to explain
what to do in a good mode.

3615
04:09:33,800 --> 04:09:36,600
Thank you. You the three now

3616
04:09:36,600 --> 04:09:38,720
making fun of us, you mean?

3617
04:09:39,040 --> 04:09:39,600
No, no, no.

3618
04:09:39,600 --> 04:09:43,320
You guys are great, by the way,
you guys to ask me that?

3619
04:09:43,720 --> 04:09:46,520
How did compared to the previous back.

3620
04:09:46,640 --> 04:09:50,880
So you guys have done a very good job,
believe me.

3621
04:09:50,880 --> 04:09:52,120
Seriously.

3622
04:09:52,120 --> 04:09:54,560
And you guys can also

3623
04:09:54,640 --> 04:09:59,760
ask your other batch mates, like,
if you know someone in previous batches.

3624
04:09:59,960 --> 04:10:04,520
Believe me,
when they were done with Java, they were

3625
04:10:05,520 --> 04:10:07,360
barely responding to my

3626
04:10:07,360 --> 04:10:10,160
messages and these last class.

3627
04:10:10,440 --> 04:10:17,000
So I can see
still some of you are very active, happy.

3628
04:10:17,000 --> 04:10:18,280
Do we have review class?

3629
04:10:18,280 --> 04:10:20,160
Yes, we have a review class.

3630
04:10:20,160 --> 04:10:21,600
What about next class?

3631
04:10:21,600 --> 04:10:23,320
Which classes will you teach?

3632
04:10:23,320 --> 04:10:25,800
School classes actually, training.

3633
04:10:25,800 --> 04:10:26,960
You are amazing instructor.

3634
04:10:26,960 --> 04:10:28,560
I did not get bored at all.

3635
04:10:28,560 --> 04:10:30,280
Thank you.

3636
04:10:31,280 --> 04:10:33,240
Take some rest, guys, and we will

3637
04:10:33,240 --> 04:10:38,040
meet tomorrow.

3638
04:10:38,040 --> 04:10:40,320
Bye Bye.
