1
00:00:13,800 --> 00:00:14,520
I am good.

2
00:00:14,520 --> 00:00:20,760
Fortunately. On.

3
00:00:20,760 --> 00:00:24,680
Good morning, Sebastian.

4
00:00:24,680 --> 00:00:25,840
Good morning.

5
00:00:27,280 --> 00:00:29,360
I hope everyone is doing great

6
00:00:39,520 --> 00:00:42,440
and everyone in the room

7
00:00:53,120 --> 00:00:55,640
and the.

8
00:01:00,840 --> 00:01:01,480
All right.

9
00:01:01,480 --> 00:01:04,760
Let's create a new package
for today's class.

10
00:01:05,440 --> 00:01:10,440
So, you know, won't

11
00:01:11,760 --> 00:01:12,640
be one

12
00:01:23,840 --> 00:01:24,440
smart

13
00:01:25,240 --> 00:01:25,800
speaker

14
00:01:27,200 --> 00:01:27,920
on one.

15
00:01:27,920 --> 00:01:29,960
How many of you

16
00:01:30,000 --> 00:01:32,720
watched the video again?

17
00:01:32,720 --> 00:01:36,320
Because you guys couldn't
focus during the class.

18
00:01:36,720 --> 00:01:39,160
People, you are.

19
00:01:40,280 --> 00:01:47,640
I did.

20
00:01:47,640 --> 00:01:48,080
I did.

21
00:01:48,080 --> 00:01:49,960
But I am still confused.

22
00:01:49,960 --> 00:01:52,560
We will clear the confusion today.

23
00:01:53,080 --> 00:01:58,800
Do you guys understand now the overloading
and overwriting which one is hard?

24
00:02:00,120 --> 00:02:03,480
The overloading or the overriding

25
00:02:16,520 --> 00:02:18,240
overloading?

26
00:02:19,200 --> 00:02:20,280
Learning.

27
00:02:20,440 --> 00:02:22,520
How many Java classes do we have?

28
00:02:22,520 --> 00:02:23,360
More.

29
00:02:24,000 --> 00:02:27,000
I think overwriting is hard

30
00:02:27,000 --> 00:02:31,800
and you guys will be having 10
to 12 more classes.

31
00:02:31,800 --> 00:02:34,680
Make more sense out of your lottery.

32
00:02:34,720 --> 00:02:38,640
They just need to learn
how to provide in brackets and semicolons.

33
00:02:40,360 --> 00:02:41,360
They'll struggling with

34
00:02:41,360 --> 00:02:46,680
semicolons in brackets.

35
00:02:46,680 --> 00:02:50,960
Overwriting is easy to differentiate,
therefore it's easy.

36
00:02:51,000 --> 00:02:59,000
So let's start from the overloading part.

37
00:02:59,000 --> 00:03:03,000
What it was like
only is same to overwriting.

38
00:03:03,000 --> 00:03:05,640
Yes, they are very closely
related to each other.

39
00:03:06,000 --> 00:03:10,040
The older writing
actually we achieve polymorphism

40
00:03:10,040 --> 00:03:16,280
through overwriting.

41
00:03:16,280 --> 00:03:19,400
Overwriting is based
like an instance variable

42
00:03:19,800 --> 00:03:22,480
in a class, right?

43
00:03:25,680 --> 00:03:28,160
Not, not quite.

44
00:03:28,160 --> 00:03:31,800
Margaret We will discuss it, but

45
00:03:33,040 --> 00:03:38,400
so let's start from the overloading.

46
00:03:38,400 --> 00:03:43,080
Yes, start memorizing part, guys.

47
00:03:43,080 --> 00:03:46,160
I would say focus on

48
00:03:46,960 --> 00:03:49,440
only the only on the main terminologies

49
00:03:49,440 --> 00:03:52,680
and try to practice as much as possible.

50
00:03:54,000 --> 00:03:55,960
Because even if you guys

51
00:03:55,960 --> 00:04:01,080
memorize all the key words and everything,
by the end of this course,

52
00:04:01,080 --> 00:04:06,000
you guys will most probably forget
all of it.

53
00:04:06,040 --> 00:04:08,400
But the practice
that you guys will be having,

54
00:04:09,000 --> 00:04:13,320
it will help you out in your
selenium, in your cucumber

55
00:04:14,400 --> 00:04:16,760
test and API and all that.

56
00:04:17,160 --> 00:04:21,600
So I will suggest,
I will suggest to memorize these things

57
00:04:21,600 --> 00:04:25,840
if you are struggling with those still
after spending five

58
00:04:26,040 --> 00:04:29,560
4 to 5 months, if you are still struggling
with terminologies

59
00:04:30,240 --> 00:04:32,720
like construct overloading

60
00:04:32,720 --> 00:04:37,520
methods, classes off decks,
I will suggest you to revise those

61
00:04:37,520 --> 00:04:41,520
at the end of the course because you guys
will be needing them in the interview

62
00:04:41,760 --> 00:04:45,000
and once you clear the interview again,
it will all be practice

63
00:04:45,560 --> 00:04:50,760
that you guys will be doing on your jobs.

64
00:04:50,760 --> 00:04:55,520
How you you have to eat
at least for 15 days.

65
00:04:55,520 --> 00:05:01,120
And if you are married,
stay away from your wife.

66
00:05:01,120 --> 00:05:05,120
Otherwise nothing will work on you. 30

67
00:05:15,360 --> 00:05:15,960
Let's start

68
00:05:15,960 --> 00:05:26,480
from the overloading.

69
00:05:26,480 --> 00:05:28,800
No, you are right. Actually I can confirm

70
00:05:30,720 --> 00:05:33,160
that and a few tens of elements.

71
00:05:33,160 --> 00:05:36,600
So after course most of the people
are getting dogs and I will

72
00:05:38,320 --> 00:05:40,920
hopefully not the later pardon. Not

73
00:05:48,000 --> 00:05:51,480
and but it is really predictability
or that

74
00:05:51,920 --> 00:05:55,280
so where do you guys remember
about the overloading.

75
00:05:55,360 --> 00:05:58,360
So is this overloading name.

76
00:05:58,360 --> 00:06:00,280
Does it confuse you guys?

77
00:06:00,280 --> 00:06:03,720
Like we are creating multiple copies
of this of the same method,

78
00:06:03,720 --> 00:06:07,040
but we are calling it overloading
something like

79
00:06:08,240 --> 00:06:09,600
we have overloaded.

80
00:06:09,600 --> 00:06:13,400
I mean, if something can get indicated,
we have placed

81
00:06:13,400 --> 00:06:16,560
maybe 100 or one configured
in that that thing.

82
00:06:16,560 --> 00:06:17,040
Right.

83
00:06:17,480 --> 00:06:26,320
Overloaded.

84
00:06:26,320 --> 00:06:29,160
So but what is overloading

85
00:06:41,520 --> 00:06:42,600
them?

86
00:06:42,600 --> 00:06:45,800
Method name different parameters

87
00:06:46,600 --> 00:06:49,600
exceeding capacity

88
00:06:49,800 --> 00:06:53,400
method can have same name,
but different number of parameters,

89
00:06:53,400 --> 00:07:00,800
different sequence or different types.

90
00:07:00,800 --> 00:07:06,000
Name can be a same name will always be
same, but parameters should be different.

91
00:07:06,760 --> 00:07:10,200
Overloading is one of the important
concepts in Java is that

92
00:07:10,200 --> 00:07:11,880
that's a great definition of massive.

93
00:07:11,880 --> 00:07:14,280
If nothing comes in your mind,
you can always say that

94
00:07:14,840 --> 00:07:18,280
inheritance is a great concept
and important concept in Java.

95
00:07:19,600 --> 00:07:21,720
The governance
of method must be different.

96
00:07:23,400 --> 00:07:26,960
Same name format
with different parameters.

97
00:07:26,960 --> 00:07:31,000
So again, same

98
00:07:33,120 --> 00:07:34,560
method

99
00:07:34,920 --> 00:07:37,080
then same name

100
00:07:37,920 --> 00:07:40,200
Method is

101
00:07:41,160 --> 00:07:42,360
existing.

102
00:07:42,360 --> 00:07:43,320
I am writing more.

103
00:07:43,320 --> 00:07:45,800
Okay, so

104
00:07:46,040 --> 00:07:48,200
the same name method is the existing

105
00:07:49,200 --> 00:07:53,160
in a class

106
00:07:55,520 --> 00:07:58,560
multiple times

107
00:07:58,720 --> 00:08:01,400
with different

108
00:08:02,840 --> 00:08:05,000
number of

109
00:08:05,520 --> 00:08:12,120
parameters,
different number of parameters.

110
00:08:13,080 --> 00:08:15,800
Or what is this happen?

111
00:08:15,800 --> 00:08:18,840
Can guys other than number of parameters

112
00:08:20,080 --> 00:08:22,320
overloading methods

113
00:08:22,320 --> 00:08:26,040
have the same name but for same idea?

114
00:08:26,040 --> 00:08:29,760
For example, adding we can have different
parameters, but the sequence number

115
00:08:29,760 --> 00:08:33,360
should be same or

116
00:08:33,440 --> 00:08:36,080
different sequence

117
00:08:38,040 --> 00:08:42,720
or different

118
00:08:45,720 --> 00:08:51,960
data types.

119
00:08:51,960 --> 00:08:57,360
So when same name at 30
the existing in a class multiple times

120
00:08:57,360 --> 00:09:02,160
with different number of parameters
or different sequence

121
00:09:03,240 --> 00:09:06,760
of parameters or

122
00:09:08,280 --> 00:09:18,040
different types, then

123
00:09:19,560 --> 00:09:22,080
it is called

124
00:09:23,360 --> 00:09:25,160
method

125
00:09:25,520 --> 00:09:31,520
overload.

126
00:09:31,520 --> 00:09:32,360
Okay.

127
00:09:32,600 --> 00:09:35,160
And what is the benefit of method
overloading?

128
00:09:35,160 --> 00:09:37,960
Why we should use a method overloading

129
00:09:43,800 --> 00:09:47,520
clean less of the right

130
00:09:48,560 --> 00:09:51,120
call that is easy to use, right?

131
00:09:51,240 --> 00:09:53,880
Like for example
the println method. Right?

132
00:09:54,120 --> 00:09:56,200
You guys were using that method

133
00:09:57,520 --> 00:09:59,280
without noticing it, right?

134
00:09:59,280 --> 00:10:04,200
How many tasks, how many printouts
that the same method is doing for you?

135
00:10:04,640 --> 00:10:06,880
It was handling all the data types right?

136
00:10:06,880 --> 00:10:08,520
It was seamless for you.

137
00:10:08,520 --> 00:10:13,760
You were always calling the println method
for all the different data types, right?

138
00:10:13,760 --> 00:10:17,880
So did the
the people who will be using your code

139
00:10:18,200 --> 00:10:20,760
If you are writing a class

140
00:10:21,280 --> 00:10:25,560
and if you are providing
overloaded methods

141
00:10:25,680 --> 00:10:29,440
to handle all the data
types, different parameters,

142
00:10:30,800 --> 00:10:33,000
and the end user,
the people who will be using

143
00:10:33,000 --> 00:10:35,960
your code, their life will be super easy.

144
00:10:36,080 --> 00:10:39,480
Okay, so

145
00:11:10,800 --> 00:11:13,080
it's easy for any of that.

146
00:11:13,080 --> 00:11:16,360
Now let's discuss some rules

147
00:11:18,120 --> 00:11:20,880
about the

148
00:11:21,360 --> 00:11:22,520
method of

149
00:11:25,920 --> 00:11:26,680
school.

150
00:11:29,400 --> 00:11:31,320
So what are what are the rules?

151
00:11:31,320 --> 00:11:33,800
If I have to overload a method of guys,

152
00:11:34,400 --> 00:11:37,280
let's start from B from the left.

153
00:11:37,320 --> 00:11:42,120
So when we are defining a method,
what is the first thing that comes

154
00:11:42,120 --> 00:11:46,040
if we are starting from left?

155
00:11:46,040 --> 00:11:48,960
Is it the access modifier to be started?

156
00:11:49,160 --> 00:11:52,640
Non access modifier,
the return type, the method name,

157
00:11:52,640 --> 00:11:56,040
the parameter,
the signature, the access modifiers.

158
00:11:56,560 --> 00:11:58,200
So what do we do?

159
00:11:58,200 --> 00:12:02,440
What is the effect of access
modifiers on method overloading?

160
00:12:03,240 --> 00:12:21,480
Do do
do they have any effect on overloading?

161
00:12:21,480 --> 00:12:24,640
Access modifiers
help with the visibility of method,

162
00:12:24,640 --> 00:12:28,680
but do they play any role in method

163
00:12:28,680 --> 00:12:33,880
overloading? No.

164
00:12:33,920 --> 00:12:34,680
Right.

165
00:12:34,720 --> 00:12:38,280
So access modifiers

166
00:12:41,880 --> 00:12:43,560
do not

167
00:12:44,040 --> 00:12:48,680
do not play any role in

168
00:12:50,120 --> 00:12:51,560
method

169
00:12:54,640 --> 00:12:55,480
overloading.

170
00:12:56,920 --> 00:12:58,040
Yeah.

171
00:12:58,040 --> 00:13:01,120
And let me actually write

172
00:13:02,280 --> 00:13:05,880
some of them for public private.

173
00:13:06,000 --> 00:13:09,240
It's okay.

174
00:13:09,240 --> 00:13:09,640
All right.

175
00:13:09,640 --> 00:13:12,600
So after the access modifiers

176
00:13:12,960 --> 00:13:16,000
we have the non access modifiers.

177
00:13:16,040 --> 00:13:19,680
Can you guys tell me
any non access modifier

178
00:13:20,720 --> 00:13:22,080
this static. Right.

179
00:13:22,080 --> 00:13:24,440
It's a non access modifier.

180
00:13:24,440 --> 00:13:27,120
So does this static

181
00:13:28,800 --> 00:13:31,800
static modifier non access modifier.

182
00:13:31,800 --> 00:13:35,280
Does it have,
does it play any role in method

183
00:13:35,280 --> 00:13:44,520
overloading.

184
00:13:44,520 --> 00:13:46,920
Well what is the role of this static

185
00:13:48,800 --> 00:13:55,080
in method overloading?

186
00:13:55,080 --> 00:13:59,520
I mean, if I am using static
with a method, can I overloaded?

187
00:13:59,520 --> 00:14:02,520
If I am not using it with the method
and I overloaded?

188
00:14:02,760 --> 00:14:06,040
Or what is the role of this static

189
00:14:06,040 --> 00:14:08,320
in method overloading

190
00:14:09,600 --> 00:14:12,200
this again same

191
00:14:12,200 --> 00:14:12,600
again.

192
00:14:12,600 --> 00:14:17,040
It's the same
as we have the access modifiers

193
00:14:23,160 --> 00:14:24,400
so it does not play any role.

194
00:14:24,400 --> 00:14:25,440
That means it does not

195
00:14:25,440 --> 00:14:29,480
affect would be overloading
and it has nothing to do with overloading.

196
00:14:30,000 --> 00:14:32,680
You can overload static methods.

197
00:14:32,680 --> 00:14:35,240
You can overload non static
methods. Right?

198
00:14:36,120 --> 00:14:37,240
There is no issue

199
00:14:38,320 --> 00:14:40,360
or there is no rule

200
00:14:40,360 --> 00:14:45,000
about the static non excess modifier.

201
00:14:45,120 --> 00:14:48,480
Okay.

202
00:14:48,480 --> 00:14:50,480
I was not sure about this one.

203
00:14:50,480 --> 00:14:53,960
Good to know. So

204
00:14:57,360 --> 00:15:01,120
no on access modifier

205
00:15:03,000 --> 00:15:04,440
modifiers

206
00:15:07,000 --> 00:15:09,400
like start the final

207
00:15:10,840 --> 00:15:22,360
DC again.

208
00:15:23,400 --> 00:15:27,680
They also don't play any roles in method
overload.

209
00:15:27,800 --> 00:15:28,960
Is there anyone confused?

210
00:15:28,960 --> 00:15:33,120
Because a lot of you answered in the
yes when I asked about this

211
00:15:33,320 --> 00:15:36,720
finally is also a keyword,
a non access modifier.

212
00:15:37,120 --> 00:15:37,440
Hooray.

213
00:15:37,440 --> 00:15:39,680
We will learn about that.
Find this final as

214
00:15:40,760 --> 00:15:44,400
if two more methods have the same name
and the same parameter list.

215
00:15:44,400 --> 00:15:49,120
Then they cannot be defined before
and only by using static

216
00:15:49,120 --> 00:15:52,920
d keyword.

217
00:15:52,920 --> 00:16:01,080
Yes, if you are right, it's a question.

218
00:16:01,080 --> 00:16:03,720
Yes. So.

219
00:16:03,720 --> 00:16:07,400
So what happens is that

220
00:16:07,480 --> 00:16:09,560
let me actually show this as the

221
00:16:14,880 --> 00:16:17,680
or we will do the example if remind me

222
00:16:17,680 --> 00:16:21,720
when I start the example, I will show
one example about this as well.

223
00:16:21,720 --> 00:16:24,960
So what is the next thing, guys?

224
00:16:24,960 --> 00:16:31,680
When we define a method,
what is the next thing?

225
00:16:31,680 --> 00:16:34,400
Let me just write notes for you.

226
00:16:34,400 --> 00:16:36,160
The return type, right?

227
00:16:36,160 --> 00:16:39,920
We can have a return type
like integer spinning

228
00:16:39,920 --> 00:16:44,520
boolean or void.

229
00:16:44,520 --> 00:16:47,520
So do these return types.

230
00:16:48,240 --> 00:16:50,840
Do they play any role

231
00:16:51,800 --> 00:16:54,400
or can I overload a method

232
00:16:54,520 --> 00:17:03,840
by just changing your return type?

233
00:17:03,840 --> 00:17:05,760
No. Again, no.

234
00:17:05,760 --> 00:17:08,800
They also don't play
any role in overloading.

235
00:17:08,800 --> 00:17:13,800
We cannot overload by changing
only the return type.

236
00:17:13,800 --> 00:17:18,720
My question were
we need to write return type in method

237
00:17:19,040 --> 00:17:24,320
bracket or after I always get at a loop.

238
00:17:24,320 --> 00:17:29,280
We need to write a return type
in method inside the method.

239
00:17:29,800 --> 00:17:32,960
If the method is returning a data type,

240
00:17:33,480 --> 00:17:37,440
then you need to write the keyword return
and after that

241
00:17:37,560 --> 00:17:40,640
the data type that you have mentioned

242
00:17:40,640 --> 00:17:43,160
in the management method header.

243
00:17:44,040 --> 00:17:46,120
So these two things, they should be same.

244
00:17:46,920 --> 00:17:50,080
Okay, remind me
when I am doing examples, I will show

245
00:17:50,080 --> 00:17:55,000
you that. So

246
00:17:56,800 --> 00:17:58,720
method

247
00:17:59,640 --> 00:18:04,040
return types also

248
00:18:15,360 --> 00:18:19,840
play any roles in method overloading.

249
00:18:20,040 --> 00:18:21,840
We can

250
00:18:22,520 --> 00:18:33,720
overload.

251
00:18:33,720 --> 00:18:36,240
We can overload a

252
00:18:36,960 --> 00:18:39,840
method by

253
00:18:45,920 --> 00:18:49,360
okay, so we can't.

254
00:18:49,360 --> 00:18:53,240
We can't overload the method by just

255
00:18:54,920 --> 00:18:56,600
changing

256
00:18:59,080 --> 00:19:01,840
the return type.

257
00:19:01,840 --> 00:19:06,080
Yeah.

258
00:19:06,080 --> 00:19:09,520
Ward or any other return
time does not play any role.

259
00:19:09,520 --> 00:19:12,000
Yes there does not.

260
00:19:12,000 --> 00:19:14,000
You can not overload method by

261
00:19:14,200 --> 00:19:17,760
just changing its return type.

262
00:19:17,760 --> 00:19:20,400
So these three pointers, what do they say?

263
00:19:20,400 --> 00:19:25,280
And they say we cannot overload the method
by changing the access

264
00:19:25,280 --> 00:19:29,160
modifiers
like private, public or protected.

265
00:19:29,760 --> 00:19:33,000
We cannot overload it
so and will overload them better

266
00:19:33,000 --> 00:19:36,600
by changing its non access modifiers.

267
00:19:37,560 --> 00:19:40,200
Static final synchronized Abstract.

268
00:19:40,200 --> 00:19:43,440
You guys will learn about the three neat
little tricks

269
00:19:45,600 --> 00:19:47,160
in the next week.

270
00:19:47,160 --> 00:19:50,840
We cannot overload a method
by just changing the return type.

271
00:19:50,880 --> 00:19:52,760
Okay.

272
00:19:52,760 --> 00:19:56,760
So after that,
what comes after these three queries?

273
00:19:57,040 --> 00:19:58,080
Next is the

274
00:19:59,960 --> 00:20:03,600
name of the method.

275
00:20:03,600 --> 00:20:06,240
So what about the name?

276
00:20:06,240 --> 00:20:08,680
How does the name of a method

277
00:20:09,160 --> 00:20:13,640
play a role in all our loading?

278
00:20:13,640 --> 00:20:17,120
It must be same, right?

279
00:20:17,280 --> 00:20:22,560
It must be same
if we are having two different methods

280
00:20:23,040 --> 00:20:29,760
with two different names,
can I overload them? No.

281
00:20:29,760 --> 00:20:34,800
Like for example, Aisha
and Jimmy were doing yesterday, right?

282
00:20:34,880 --> 00:20:39,440
They created two separate methods
and they were thinking maybe

283
00:20:39,440 --> 00:20:44,160
that they have overloaded those methods
or they have created overloaded methods.

284
00:20:44,360 --> 00:20:47,640
So this is not overloading
the method names.

285
00:20:48,040 --> 00:20:50,280
They must be same.

286
00:20:50,280 --> 00:21:02,840
Okay, so.

287
00:21:02,840 --> 00:21:05,280
So method names

288
00:21:05,400 --> 00:21:07,200
must be same.

289
00:21:07,200 --> 00:21:10,360
No return type should not need

290
00:21:10,360 --> 00:21:14,160
not to be same.

291
00:21:14,160 --> 00:21:16,640
So method names must be same.

292
00:21:16,640 --> 00:21:18,840
If we want to

293
00:21:20,040 --> 00:21:22,680
overload a

294
00:21:23,560 --> 00:21:24,240
method.

295
00:21:24,240 --> 00:21:24,960
Okay,

296
00:21:26,000 --> 00:21:26,640
it is fine.

297
00:21:26,640 --> 00:21:29,880
Just fine.

298
00:21:29,880 --> 00:21:31,920
Don't think that you guys do something
wrong.

299
00:21:31,920 --> 00:21:35,520
Whole idea will crash with.

300
00:21:35,520 --> 00:21:36,960
Yes I do.

301
00:21:36,960 --> 00:21:39,320
The first thing that I will do when she is

302
00:21:39,600 --> 00:21:42,000
doing the job, she will restart.

303
00:21:42,400 --> 00:21:45,720
Restart all the servers, all the computers

304
00:21:45,720 --> 00:21:48,800
and everything
and she will start from scratch.

305
00:21:48,960 --> 00:21:54,960
You guys,
what did you guys watch that season on it?

306
00:21:54,960 --> 00:21:59,000
So every time the IT person
he gets a call, he always says this.

307
00:21:59,040 --> 00:22:01,240
Did you try restarting your computer?

308
00:22:02,160 --> 00:22:04,800
That's a very good season
I will send you the link

309
00:22:09,920 --> 00:22:11,440
you give me and

310
00:22:11,520 --> 00:22:14,240
I will do the name of that that season.

311
00:22:15,000 --> 00:22:15,720
Give me

312
00:22:23,560 --> 00:22:25,200
it. Cool

313
00:22:29,120 --> 00:22:33,280
you So you guys will be able
to relate your your yourself.

314
00:22:33,480 --> 00:22:40,160
Once you get a job you guys will be
it will be very relatable.

315
00:22:40,160 --> 00:22:40,640
All right.

316
00:22:40,640 --> 00:22:43,760
So method name, it must be same

317
00:22:44,920 --> 00:22:49,520
if we want to overload a method
and in the return type

318
00:22:49,560 --> 00:22:54,720
they don't matter.

319
00:22:54,720 --> 00:22:57,760
Signature must be different. Yes.

320
00:22:57,760 --> 00:23:06,120
So after the method name
we have the parameters.

321
00:23:06,120 --> 00:23:08,320
So how does the barometer.

322
00:23:08,600 --> 00:23:12,680
So you guys can say the parameters
are the actual things, right?

323
00:23:13,360 --> 00:23:16,680
That that makes a method overload.

324
00:23:16,680 --> 00:23:22,160
My computer sometimes claimed that I have
low memory, but I have 16 gigs of RAM.

325
00:23:22,160 --> 00:23:25,600
Is this
because my ID is on for a long time?

326
00:23:25,600 --> 00:23:27,560
So moment you can do this.

327
00:23:27,560 --> 00:23:29,920
If you are using windows, you can

328
00:23:31,200 --> 00:23:33,240
press the windows button

329
00:23:33,240 --> 00:23:38,280
and then if your type task manager,
most probably it's Google Chrome

330
00:23:38,920 --> 00:23:42,120
that is eating up all of your memory.

331
00:23:42,120 --> 00:23:45,960
So if you see it
and if you click on the 76%, you see

332
00:23:45,960 --> 00:23:49,520
Google Chrome
is taking about three gigs of my memory.

333
00:23:49,800 --> 00:23:53,560
Okay, I have opened the 46
tabs in Google Chrome and right now

334
00:23:53,560 --> 00:23:57,960
just taking to Google it
then is the intel that is taking 1.5

335
00:23:57,960 --> 00:24:02,280
gates, then slack and then zoom
so you can check that program,

336
00:24:02,280 --> 00:24:05,200
which program is checking more memory
and you can kill it from here.

337
00:24:05,200 --> 00:24:10,640
That's the 46 I thought I was the early

338
00:24:11,160 --> 00:24:14,840
and that they are actually right now
they are the lowest.

339
00:24:15,160 --> 00:24:19,560
I open at least 200 times
when I am programing or doing something

340
00:24:20,120 --> 00:24:24,360
so and I you guys will be doing the same
following your problem

341
00:24:24,800 --> 00:24:27,640
solving on different websites and all that

342
00:24:29,560 --> 00:24:31,360
is intelligence taking Bill Gates.

343
00:24:31,360 --> 00:24:35,400
So how does the parameters affected
the method over

344
00:24:35,400 --> 00:24:36,720
loading guys

345
00:24:46,480 --> 00:24:49,120
should not have the same parameters

346
00:24:49,120 --> 00:24:52,240
how to do that again, Windows button
and what else type?

347
00:24:52,240 --> 00:24:57,960
Task Manager Sebastian I always get time
to go over to clean the browser.

348
00:24:57,960 --> 00:24:59,600
No, the application is allowed.

349
00:24:59,600 --> 00:25:00,320
Not same.

350
00:25:00,320 --> 00:25:02,440
They need to follow different pattern

351
00:25:03,800 --> 00:25:08,440
so barometers

352
00:25:10,320 --> 00:25:12,000
should be

353
00:25:13,040 --> 00:25:16,640
different for each method

354
00:25:26,640 --> 00:25:29,120
either in

355
00:25:29,280 --> 00:25:30,560
number.

356
00:25:31,040 --> 00:25:31,720
Okay.

357
00:25:32,040 --> 00:25:32,600
All right.

358
00:25:32,600 --> 00:25:35,280
Number or in

359
00:25:36,480 --> 00:25:38,240
sequence

360
00:25:40,680 --> 00:25:42,560
or in

361
00:25:44,840 --> 00:25:46,240
back to

362
00:25:47,720 --> 00:25:53,000
high data types.

363
00:25:53,000 --> 00:25:53,840
All right.

364
00:25:54,600 --> 00:25:57,960
And then after that,
we have the method body, method, body.

365
00:25:57,960 --> 00:26:04,240
It does not affect the method overloading.

366
00:26:04,240 --> 00:26:05,240
All right.

367
00:26:05,240 --> 00:26:07,440
Now let's

368
00:26:07,440 --> 00:26:10,840
discuss about the constructors

369
00:26:11,160 --> 00:26:15,000
again, I overload a constructor so

370
00:26:43,560 --> 00:26:46,080
then I overload

371
00:26:46,320 --> 00:27:07,200
a private method.

372
00:27:07,200 --> 00:27:11,800
So all the questions,
if you guys understand these five

373
00:27:11,800 --> 00:27:14,880
first five points, now you can answer

374
00:27:15,600 --> 00:27:18,200
any interview questions
related to overloading

375
00:27:18,200 --> 00:27:20,440
if you guys have understood
these five points.

376
00:27:20,440 --> 00:27:20,880
Okay.

377
00:27:20,880 --> 00:27:23,880
Now your interviewer
will try to confuse you.

378
00:27:24,120 --> 00:27:26,880
Maybe sometimes asking
can we overload protected

379
00:27:26,880 --> 00:27:30,080
method private method instance
method starting methods.

380
00:27:30,360 --> 00:27:35,440
If you focus on these five rules,
you can answer all the questions.

381
00:27:35,560 --> 00:27:37,320
Can I overload the main method? Right?

382
00:27:38,280 --> 00:27:40,320
I mean, method is something different.

383
00:27:40,320 --> 00:27:44,160
But again, it follows
all of these rules, right?

384
00:27:44,480 --> 00:27:46,440
So why can't. Why not? Right.

385
00:27:46,440 --> 00:27:50,200
I can overload the main method as well

386
00:27:51,920 --> 00:27:55,320
so we can overload constructors,

387
00:27:56,720 --> 00:27:58,560
private investors

388
00:27:58,560 --> 00:28:06,800
main method.

389
00:28:06,800 --> 00:28:10,160
Okay. And there is no issue in there.

390
00:28:10,160 --> 00:28:10,520
All right.

391
00:28:10,520 --> 00:28:12,800
What else do you guys remember about the

392
00:28:15,160 --> 00:28:17,200
about the overloading?

393
00:28:17,200 --> 00:28:20,360
Do I need a inheritance relationship

394
00:28:20,360 --> 00:28:31,360
for overloading?

395
00:28:31,360 --> 00:28:32,680
No. Right.

396
00:28:32,760 --> 00:28:34,560
Where do I need that inheritance?

397
00:28:34,560 --> 00:28:37,000
Inheritance relationship? Guys

398
00:28:39,000 --> 00:28:42,400
costing in overloading

399
00:28:42,400 --> 00:28:46,160
what is costing and overloading

400
00:28:48,240 --> 00:28:49,480
Not all.

401
00:28:49,480 --> 00:28:50,280
What is costing?

402
00:28:50,280 --> 00:28:57,360
Overloading.

403
00:28:57,360 --> 00:29:12,240
Okay, let's do an example.

404
00:29:12,240 --> 00:29:33,720
Parent child relationship.

405
00:29:33,720 --> 00:29:37,880
All right, so the first thing

406
00:29:37,920 --> 00:29:41,160
overload from a data type
to another data type

407
00:29:41,880 --> 00:29:44,400
automatically.

408
00:29:44,560 --> 00:29:45,720
Oh, no, no, no.

409
00:29:45,720 --> 00:29:49,560
This is not overloading
and that are converting a data type

410
00:29:49,560 --> 00:29:51,560
to another decade type.
This is not overloading.

411
00:29:51,640 --> 00:29:54,160
It is simply costing.

412
00:29:55,000 --> 00:29:57,200
Overloading has nothing to do with

413
00:29:58,280 --> 00:29:59,720
costing.

414
00:30:00,600 --> 00:30:01,120
Okay.

415
00:30:02,000 --> 00:30:04,960
So the is the first rule.

416
00:30:06,720 --> 00:30:10,080
The first rule that we learned
about the overloading

417
00:30:10,080 --> 00:30:11,480
is that

418
00:30:14,040 --> 00:30:17,800
the method name they should be same.

419
00:30:17,800 --> 00:30:20,000
Okay, so let's write a method.

420
00:30:20,520 --> 00:30:20,760
Okay.

421
00:30:20,760 --> 00:30:25,840
So we are now testing all those points

422
00:30:25,840 --> 00:30:29,360
that we have just written on nodes. Okay.

423
00:30:29,400 --> 00:30:36,640
So that it is clearly
so that you guys can really see it.

424
00:30:36,640 --> 00:30:38,440
So let's say

425
00:30:45,040 --> 00:30:46,000
I have this number.

426
00:30:46,000 --> 00:30:48,640
So the first thing we discussed was

427
00:30:49,480 --> 00:30:52,680
if we are only changing

428
00:30:53,520 --> 00:30:56,560
the access modifier,

429
00:30:57,920 --> 00:31:00,120
we cannot overload a matter.

430
00:31:00,120 --> 00:31:02,920
So let's try to test that.

431
00:31:03,040 --> 00:31:06,720
Okay, So I have copied
and pasted the exact same method

432
00:31:07,240 --> 00:31:11,200
and now let me change the access modifier.

433
00:31:11,200 --> 00:31:13,680
What is the access modifier right now
with these methods?

434
00:31:13,680 --> 00:31:20,920
Guys, it's the default one, right?

435
00:31:20,920 --> 00:31:25,800
Let me put oblique in here. Why?

436
00:31:25,800 --> 00:31:26,800
I still get an error.

437
00:31:26,800 --> 00:31:32,920
Guys,

438
00:31:32,920 --> 00:31:35,920
because we are not overloading.

439
00:31:36,160 --> 00:31:36,800
Right.

440
00:31:36,800 --> 00:31:40,760
And if we don't overblow mode,
we can not have

441
00:31:41,000 --> 00:31:43,840
the exact same methods

442
00:31:45,240 --> 00:31:46,680
inside a class.

443
00:31:46,680 --> 00:31:49,560
Yeah, we will be getting this out of that.

444
00:31:49,840 --> 00:31:51,800
Maybe something is already defined.

445
00:31:51,800 --> 00:31:54,800
Okay,
so method is already defined in here.

446
00:31:55,080 --> 00:31:56,680
So java is confused.

447
00:31:56,680 --> 00:32:01,800
Java can not distinguish
between this method and this matter.

448
00:32:02,040 --> 00:32:06,000
If you try to call this method
from outside of this class

449
00:32:06,000 --> 00:32:09,920
and I will not be able to

450
00:32:10,440 --> 00:32:13,520
go, I will not be able to understand
or doubt.

451
00:32:13,560 --> 00:32:17,640
I will not be able to judge
which method you are trying to write

452
00:32:17,640 --> 00:32:21,800
for example, let's say
if I have a main method in here, here,

453
00:32:22,040 --> 00:32:35,120
and if I create the object of this class,
and if I say method

454
00:32:36,240 --> 00:32:38,160
passing this, then

455
00:32:38,160 --> 00:32:40,760
I get this at the end of phase

456
00:32:41,920 --> 00:32:44,160
order the error, say I'm on

457
00:32:45,120 --> 00:32:51,280
no, okay,

458
00:32:52,240 --> 00:32:54,960
Error does not say anything.

459
00:32:54,960 --> 00:32:57,920
So you guys got the error issued.

460
00:32:57,920 --> 00:33:00,640
Say something like ambiguous method call

461
00:33:02,440 --> 00:33:06,320
ambiguous
method code or something like that.

462
00:33:06,320 --> 00:33:13,480
So that means Java is unable to decide
when I am writing.

463
00:33:13,480 --> 00:33:17,040
This method to do drag
method is unable to decide

464
00:33:17,040 --> 00:33:20,680
whether it should call this method
or this method.

465
00:33:20,760 --> 00:33:24,200
Now in real life
ambiguous method call. Yes.

466
00:33:24,800 --> 00:33:27,160
So this is the error
that you should go to.

467
00:33:27,160 --> 00:33:30,520
So let's say, for example, what can happen
is that these two matters,

468
00:33:30,520 --> 00:33:34,560
they can be totally different, right?

469
00:33:34,560 --> 00:33:37,840
They can be totally different.

470
00:33:37,840 --> 00:33:40,440
So the Java is saying

471
00:33:41,480 --> 00:33:45,280
their tasker,
the method that you are trying to call

472
00:33:45,600 --> 00:33:47,640
I went to this class

473
00:33:48,480 --> 00:33:50,880
and when I checked, when I search,

474
00:33:51,360 --> 00:33:54,480
I found two methods in that class.

475
00:33:54,640 --> 00:33:55,360
Okay?

476
00:33:55,440 --> 00:33:57,800
And the information
that you are providing,

477
00:33:57,800 --> 00:34:03,520
you are only writing the method name and
you are only providing a data type now.

478
00:34:03,520 --> 00:34:07,360
But these two pieces of information,
you are saying that, hey,

479
00:34:07,360 --> 00:34:10,640
it's going to by only this method name
and this parameter.

480
00:34:11,040 --> 00:34:14,880
I cannot decide whether I should call this

481
00:34:14,880 --> 00:34:17,680
method or I should call this method.

482
00:34:18,160 --> 00:34:19,240
Does it make sense, guys,

483
00:34:20,280 --> 00:34:20,880
why Java

484
00:34:20,880 --> 00:34:26,120
is confused?

485
00:34:26,120 --> 00:34:29,120
So which which leads us to this point

486
00:34:29,120 --> 00:34:33,840
that access modifiers they cannot help us.

487
00:34:34,440 --> 00:34:37,240
They can not help us in method
overloading guard

488
00:34:37,720 --> 00:34:40,000
or they do not play any role

489
00:34:40,320 --> 00:34:44,200
in method overloading
what was the next thing guys?

490
00:34:44,480 --> 00:34:48,080
So next thing was the non access modifier.

491
00:34:48,120 --> 00:34:51,320
The sheriff was asking about
not known access modifiers

492
00:34:51,320 --> 00:34:54,280
that he was saying that hey. Yes.
Good. Okay.

493
00:34:54,280 --> 00:34:58,480
Changing the access modifiers
like public private.

494
00:34:58,480 --> 00:35:01,520
Okay does not make any difference.

495
00:35:01,520 --> 00:35:05,400
But what if put a static in here?

496
00:35:06,040 --> 00:35:08,720
Okay.

497
00:35:08,720 --> 00:35:11,960
So again, Sheriff Java is again confused

498
00:35:12,200 --> 00:35:16,000
because you can call a static method

499
00:35:16,960 --> 00:35:21,960
with object
and you can also call in non static

500
00:35:21,960 --> 00:35:25,560
method with the help of an object.

501
00:35:25,720 --> 00:35:28,160
So again, Java saying their task

502
00:35:29,000 --> 00:35:32,960
when you provide
only these two pieces of information.

503
00:35:33,000 --> 00:35:37,760
Still, I cannot decide
whether you are trying to call this method

504
00:35:39,520 --> 00:35:41,560
or this method.

505
00:35:42,360 --> 00:35:46,880
Yes, this will change the accessibility,
but still that type is same.

506
00:35:46,880 --> 00:35:49,160
So still will be getting an error.

507
00:35:49,600 --> 00:35:53,720
So do you guys now understand
the logic as well behind why?

508
00:35:53,720 --> 00:35:55,920
Why Java has these rules?

509
00:35:55,920 --> 00:36:00,960
Why we why we are not allowed
by changing the returns,

510
00:36:01,360 --> 00:36:05,400
by changing the return type
or by changing access modifiers

511
00:36:06,880 --> 00:36:08,680
can you give us an example?

512
00:36:08,680 --> 00:36:11,680
Example of what Sheriff

513
00:36:18,640 --> 00:36:19,120
City put?

514
00:36:19,120 --> 00:36:21,280
What are these

515
00:36:25,720 --> 00:36:28,000
are not needing them

516
00:36:30,000 --> 00:36:30,520
enough.

517
00:36:32,760 --> 00:36:34,840
I will give you give more examples.

518
00:36:35,400 --> 00:36:36,000
Okay.

519
00:36:36,280 --> 00:36:40,200
So if this is your homework
now, you have to search

520
00:36:40,200 --> 00:36:44,400
on the internet Top
ten most widely used classes in Java

521
00:36:44,640 --> 00:36:49,440
and you have to find out
method overloading in all those classes.

522
00:36:49,720 --> 00:36:56,320
You have to tell me
which methods are overloaded.

523
00:36:56,320 --> 00:36:56,520
Okay,

524
00:36:58,920 --> 00:36:59,880
I'm just getting

525
00:36:59,880 --> 00:37:04,080
by the way,
if you guys really want to learn Java,

526
00:37:04,080 --> 00:37:09,200
this is also something
this can be something very useful to

527
00:37:10,760 --> 00:37:13,520
understand the real use cases

528
00:37:13,520 --> 00:37:16,880
of all the concepts
that you guys have been learning.

529
00:37:17,360 --> 00:37:18,000
Right?

530
00:37:18,000 --> 00:37:21,760
Our top ten
most widely used classes in Java

531
00:37:22,160 --> 00:37:24,880
and try to just read through
those classes.

532
00:37:25,160 --> 00:37:29,280
I know that some of the key words,
they will not make sense at this point,

533
00:37:29,960 --> 00:37:32,400
but by the end of I guess next week,

534
00:37:33,360 --> 00:37:36,160
most the things
they will start to make sense.

535
00:37:36,160 --> 00:37:44,040
So maybe I should give this to you
later on.

536
00:37:44,040 --> 00:37:49,200
So by changing the non excess,
modify it again.

537
00:37:49,480 --> 00:37:51,960
No matter overloading. Okay.

538
00:37:52,760 --> 00:37:56,280
And then the next thing is
the return type.

539
00:37:56,800 --> 00:37:57,600
Okay. Next.

540
00:37:57,600 --> 00:38:01,880
Next thing is the return by.

541
00:38:01,880 --> 00:38:05,080
I am learning one thing
and forgetting the others.

542
00:38:06,360 --> 00:38:08,280
If the

543
00:38:08,280 --> 00:38:12,000
said if that means
you have only one CPU core in your mind.

544
00:38:12,000 --> 00:38:12,720
Okay.

545
00:38:12,720 --> 00:38:16,640
Even these days they left out
they have six pools and they can learn

546
00:38:16,640 --> 00:38:20,520
six things at the same time.

547
00:38:20,520 --> 00:38:24,200
Only one big giant core
running or running at 5 hours,

548
00:38:24,200 --> 00:38:27,320
maybe.

549
00:38:27,320 --> 00:38:29,360
I'm just kidding. Don't mind.

550
00:38:29,360 --> 00:38:30,320
Yes, yes.

551
00:38:30,320 --> 00:38:31,560
It's hard talk.

552
00:38:31,560 --> 00:38:33,880
I would not say that it's easy.

553
00:38:33,880 --> 00:38:35,040
It's it's hard.

554
00:38:35,040 --> 00:38:40,920
It requires
a lot of practice and reading. So.

555
00:38:42,200 --> 00:38:46,640
Okay, so next thing this guy next thing
is, is the return type.

556
00:38:46,640 --> 00:38:46,920
Okay.

557
00:38:46,920 --> 00:38:50,680
So the next rule says that
if we would change

558
00:38:51,600 --> 00:38:59,600
only the return type,
hopefully, inshallah.

559
00:39:00,120 --> 00:39:02,640
So the next thing is,

560
00:39:02,640 --> 00:39:06,080
if we only change the return type

561
00:39:07,920 --> 00:39:09,000
again,

562
00:39:09,920 --> 00:39:12,760
we cannot overload a matter.

563
00:39:12,760 --> 00:39:17,640
Okay, this information is not enough.

564
00:39:17,640 --> 00:39:18,920
No, no, no, no.

565
00:39:18,920 --> 00:39:20,640
That is said. If I have seen students,

566
00:39:22,080 --> 00:39:22,840
I think

567
00:39:23,120 --> 00:39:25,800
it's because of their communication
skills.

568
00:39:26,520 --> 00:39:30,600
I mean, they are below average
and they still get a job in the first

569
00:39:30,600 --> 00:39:31,800
or second weeks.

570
00:39:31,800 --> 00:39:37,320
So this communication is very,
very important to the skill

571
00:39:37,320 --> 00:39:40,680
to be able to explain

572
00:39:41,040 --> 00:39:43,680
to others about the concepts.

573
00:39:43,680 --> 00:39:52,640
It's very important.

574
00:39:52,640 --> 00:39:55,640
But whenever I put in color

575
00:39:55,640 --> 00:39:58,640
what you should if is the last one,

576
00:39:58,640 --> 00:40:00,800
you the second last one, right?

577
00:40:00,800 --> 00:40:07,920
And you have to be the last one.

578
00:40:07,920 --> 00:40:10,440
Okay, I'm just getting

579
00:40:13,440 --> 00:40:15,600
so guys the next blind.

580
00:40:15,600 --> 00:40:20,880
Is that just by changing the written type,

581
00:40:20,880 --> 00:40:24,840
I cannot overload a method, okay?

582
00:40:25,560 --> 00:40:27,280
I cannot overload a method.

583
00:40:27,280 --> 00:40:30,400
So still I get an error,
but I am getting it under.

584
00:40:30,400 --> 00:40:32,880
And that error guys, I get an error.

585
00:40:32,880 --> 00:40:37,560
It says missing the written statement
so maybe Nayak can help us in here.

586
00:40:37,560 --> 00:40:39,840
Naah. Well, what should we do?

587
00:40:39,840 --> 00:40:43,600
So do we put return statement in brackets
or outside of these break

588
00:40:43,600 --> 00:40:45,000
off these curly brackets

589
00:40:53,640 --> 00:40:54,480
outside.

590
00:40:54,480 --> 00:40:56,040
Right. Great explanation.

591
00:40:56,040 --> 00:41:00,240
So we should put the return type in here.

592
00:41:00,240 --> 00:41:01,200
Right.

593
00:41:01,440 --> 00:41:04,680
So then that's

594
00:41:04,680 --> 00:41:10,000
why you get to be at the.

595
00:41:10,920 --> 00:41:13,840
Yeah, definitely
you will be getting the error right.

596
00:41:14,040 --> 00:41:19,800
Because this is very method starts
and this is where your method ends.

597
00:41:19,960 --> 00:41:20,880
Right.

598
00:41:20,880 --> 00:41:23,840
So why, why
put this written outside of this method?

599
00:41:24,800 --> 00:41:29,200
But if I change inside, it's still error.

600
00:41:29,200 --> 00:41:31,160
No, it should not be error.

601
00:41:31,160 --> 00:41:34,560
So now we have player
should be return type.

602
00:41:34,640 --> 00:41:36,480
Right now we get another area.

603
00:41:36,480 --> 00:41:41,200
It says are expecting a semicolon
right next for the semicolon as well.

604
00:41:41,320 --> 00:41:44,440
So we are just reading the error
and following the problem.

605
00:41:44,440 --> 00:41:44,760
Okay.

606
00:41:44,760 --> 00:41:51,200
We still there the error
now we say is missing return value, right?

607
00:41:51,480 --> 00:41:54,000
Missing the return value.

608
00:41:54,360 --> 00:41:57,840
That means that means your method

609
00:41:58,400 --> 00:42:02,320
is expecting a value of type

610
00:42:02,320 --> 00:42:04,640
integer to be returned.

611
00:42:05,320 --> 00:42:06,680
Okay.

612
00:42:06,680 --> 00:42:10,080
But what we are returning
what we are returning in here now

613
00:42:18,080 --> 00:42:19,680
we are returning nothing.

614
00:42:19,680 --> 00:42:21,720
No, no, we are returning nothing.

615
00:42:21,880 --> 00:42:23,440
We are not returning nothing.

616
00:42:23,440 --> 00:42:28,800
I have replaced anything
inside these return and the semicolon.

617
00:42:28,880 --> 00:42:31,200
No, I haven't placed anything.

618
00:42:31,200 --> 00:42:35,960
So I am returning nothing so I can do this
error is just saying

619
00:42:36,280 --> 00:42:38,960
return anything Anything

620
00:42:39,480 --> 00:42:42,000
which is all type integer.

621
00:42:42,000 --> 00:42:44,960
It can be a constant number
like this. Okay.

622
00:42:45,520 --> 00:42:50,640
And it can be the number that you are
taking from the arguments like this.

623
00:42:50,640 --> 00:42:51,240
Oops.

624
00:42:52,120 --> 00:42:52,800
Okay.

625
00:42:52,800 --> 00:42:57,600
So this error,
it only says just put anything,

626
00:42:57,600 --> 00:43:00,960
any variable name,
any constant value, anything.

627
00:43:01,200 --> 00:43:03,720
We use an integer. Okay.

628
00:43:04,480 --> 00:43:10,200
And and the edit is gone.

629
00:43:10,200 --> 00:43:10,640
Yeah.

630
00:43:12,560 --> 00:43:15,320
So now

631
00:43:16,400 --> 00:43:19,200
so so guys start trying to load this up,

632
00:43:19,600 --> 00:43:25,800
start reading your answers and now
try to make try to understand those.

633
00:43:25,800 --> 00:43:28,800
What are what are these errors
What are these are saying to you.

634
00:43:28,800 --> 00:43:29,080
Okay.

635
00:43:30,840 --> 00:43:33,240
And then after six months or one months,

636
00:43:34,440 --> 00:43:38,960
if anyone will be telling you,
the anyone will be showing you

637
00:43:38,960 --> 00:43:43,360
the error, you guys will be telling them
the line numbers, the classes,

638
00:43:43,360 --> 00:43:47,920
the exact matters we are we're that
those people, they are getting the errors.

639
00:43:47,920 --> 00:43:48,480
Okay.

640
00:43:48,560 --> 00:43:52,280
So try to now go through those errors
as that.

641
00:43:52,320 --> 00:43:55,440
Okay.

642
00:43:55,440 --> 00:44:01,000
So again, so I have fulfilled
all the requirements of this method.

643
00:44:01,000 --> 00:44:02,520
I am returning a value.

644
00:44:02,520 --> 00:44:05,880
I have returned return the return keyword,

645
00:44:06,840 --> 00:44:09,920
I have placed the semicolon, but still

646
00:44:09,920 --> 00:44:14,920
I get an error that it says
method is already defined.

647
00:44:14,960 --> 00:44:18,240
Okay,
I still get the error that there is this

648
00:44:18,720 --> 00:44:21,440
ambiguous matter.

649
00:44:21,440 --> 00:44:22,040
Okay.

650
00:44:22,040 --> 00:44:28,200
So again, we cannot overload a method

651
00:44:28,560 --> 00:44:32,520
by only changing if return by.

652
00:44:32,520 --> 00:44:33,040
Okay.

653
00:44:33,080 --> 00:44:35,440
Do you guys want me to comment this out?

654
00:44:35,680 --> 00:44:39,240
Maybe for your reference
so that you guys can learn or keep

655
00:44:39,240 --> 00:44:44,400
on changing this method?

656
00:44:44,400 --> 00:44:44,720
Okay.

657
00:44:44,720 --> 00:44:49,080
So first we learned about the access
modifier, right?

658
00:44:49,080 --> 00:44:51,760
So we, we placed like this public

659
00:44:53,520 --> 00:44:54,400
works, right?

660
00:44:54,400 --> 00:44:57,880
This is the first example that we did.

661
00:44:57,880 --> 00:45:02,120
So let's comment this out
and let's put in not note in here

662
00:45:04,160 --> 00:45:05,520
in or

663
00:45:05,880 --> 00:45:07,560
overload

664
00:45:08,240 --> 00:45:10,400
by just

665
00:45:12,080 --> 00:45:14,280
changing the

666
00:45:16,800 --> 00:45:18,440
access

667
00:45:19,200 --> 00:45:23,120
modifier.

668
00:45:23,120 --> 00:45:23,560
Yeah,

669
00:45:24,920 --> 00:45:28,520
delete it
so that when you change it to public.

670
00:45:28,680 --> 00:45:29,800
Oh nice.

671
00:45:29,800 --> 00:45:33,240
Because we are trying to redefine
the same method, it's

672
00:45:33,280 --> 00:45:36,400
because of overloading.

673
00:45:36,720 --> 00:45:40,080
Okay then we discussed about this

674
00:45:40,080 --> 00:45:52,920
static one.

675
00:45:52,920 --> 00:45:56,760
My console complained
that the name of the written method

676
00:45:56,760 --> 00:45:59,840
is same as divide E.

677
00:45:59,840 --> 00:46:03,120
It can also be the reason.

678
00:46:03,240 --> 00:46:05,840
Are we going to go over overriding A Yes,

679
00:46:05,840 --> 00:46:08,720
We will go overwriting as well because

680
00:46:10,600 --> 00:46:14,400
I think a lot of you were busy
making jokes.

681
00:46:15,360 --> 00:46:17,240
I was serious yesterday.

682
00:46:17,240 --> 00:46:19,160
You this is you.

683
00:46:19,160 --> 00:46:21,440
You guys were making jokes
to each other, right?

684
00:46:21,440 --> 00:46:23,360
And you guys didn't pay any attention.

685
00:46:23,360 --> 00:46:27,360
It's all because of you
that we are spending

686
00:46:27,360 --> 00:46:30,640
the time again in here.

687
00:46:30,640 --> 00:46:34,760
So is overloading across multiple classes

688
00:46:35,680 --> 00:46:38,960
or packages
possible or off utility overload

689
00:46:38,960 --> 00:46:44,280
Thing is always in the same class.

690
00:46:44,280 --> 00:46:46,920
You are right here. So all are filed.

691
00:46:46,920 --> 00:46:50,280
So I am practicing my
for my flight of my wife.

692
00:46:50,280 --> 00:46:50,880
Right.

693
00:46:50,960 --> 00:46:53,200
How to put everything on her.

694
00:46:53,200 --> 00:46:55,680
So we put the static keyword.

695
00:46:56,360 --> 00:46:58,080
No no overloading.

696
00:46:58,080 --> 00:47:04,920
We change the excess modifier,
no overloading.

697
00:47:04,920 --> 00:47:08,480
We're talking about why
So that I am asking them

698
00:47:08,520 --> 00:47:13,800
questions today,
but because my overwriting is done

699
00:47:13,800 --> 00:47:16,800
correctly in my own work
but did not quite understand

700
00:47:16,800 --> 00:47:22,840
how to calculate the interest,
I will show you that no, no issues.

701
00:47:22,840 --> 00:47:23,280
Okay.

702
00:47:25,920 --> 00:47:28,960
So not possible

703
00:47:33,000 --> 00:47:35,760
and not overload by just changing

704
00:47:38,800 --> 00:47:42,640
non access

705
00:47:46,520 --> 00:47:47,160
modifier.

706
00:47:47,160 --> 00:47:47,680
Okay.

707
00:47:48,480 --> 00:47:51,240
And then we can also

708
00:47:51,240 --> 00:48:06,840
overload.

709
00:48:06,840 --> 00:48:10,440
Yes, definitely.

710
00:48:10,440 --> 00:48:13,200
Definitely one or two base

711
00:48:13,240 --> 00:48:15,440
in not over

712
00:48:15,440 --> 00:48:17,560
who does not love the gifts. Right.

713
00:48:17,560 --> 00:48:20,480
You guys will be bringing me
a lot of gifts right.

714
00:48:21,280 --> 00:48:24,600
Cannot overload by just

715
00:48:29,520 --> 00:48:32,480
changing that

716
00:48:36,720 --> 00:48:39,720
by just changing

717
00:48:40,560 --> 00:48:50,680
the written type.

718
00:48:50,680 --> 00:48:55,040
So how many of known access modifiers
we learn?

719
00:48:55,040 --> 00:49:01,680
So far we have only learned about this
start date one.

720
00:49:01,680 --> 00:49:04,520
All right. What is the next thing, guys?

721
00:49:04,520 --> 00:49:08,080
The next thing is
the name of the method, right?

722
00:49:08,200 --> 00:49:10,960
So let me remove this written.

723
00:49:10,960 --> 00:49:13,120
Let me put Lord in here.

724
00:49:13,680 --> 00:49:16,320
Now, if I change this method

725
00:49:16,680 --> 00:49:19,360
to method 1 a.m.

726
00:49:19,480 --> 00:49:25,360
overloading guys.

727
00:49:25,360 --> 00:49:28,480
So if we change the method names.

728
00:49:29,160 --> 00:49:32,680
No. Now this is not overloading.

729
00:49:32,680 --> 00:49:34,600
Okay. Being method name should be

730
00:49:36,760 --> 00:49:42,080
same. Yes.

731
00:49:42,080 --> 00:49:44,000
We will not be getting error because no.

732
00:49:44,000 --> 00:50:00,360
There are two separate groups.

733
00:50:00,360 --> 00:50:01,240
Okay.

734
00:50:01,480 --> 00:50:06,880
And after the name we discussed about the
about the parameters.

735
00:50:06,880 --> 00:50:07,280
Right.

736
00:50:07,280 --> 00:50:10,720
So let me let bring this one

737
00:50:12,760 --> 00:50:15,280
down in here so that you guys can compare.

738
00:50:16,960 --> 00:50:20,880
So now is the things
which effectively overloading.

739
00:50:21,240 --> 00:50:23,560
Okay, so

740
00:50:25,960 --> 00:50:28,360
let me put method back.

741
00:50:28,360 --> 00:50:29,160
So same name.

742
00:50:29,160 --> 00:50:31,440
I fulfilled the first condition.

743
00:50:31,440 --> 00:50:34,720
Now the second condition, the parameters.

744
00:50:34,720 --> 00:50:38,320
And now how do I, I overload this.

745
00:50:38,320 --> 00:50:41,240
Guys, there are three ways to overload.

746
00:50:41,280 --> 00:50:43,920
Can you guys tell me
what should I write in here

747
00:50:44,240 --> 00:50:48,880
so that I have overloaded the method?

748
00:50:48,880 --> 00:50:54,600
So first thing I say
is that we can change the data type.

749
00:50:54,600 --> 00:50:58,120
So maybe I can put a string in here

750
00:51:03,480 --> 00:51:05,200
strangling here.

751
00:51:05,200 --> 00:51:07,800
No, I also need to change this name, guys.

752
00:51:07,800 --> 00:51:11,040
The this variable name
that I put in here, or

753
00:51:11,040 --> 00:51:14,320
it can be anything.

754
00:51:14,320 --> 00:51:16,320
It can be anything. Right?

755
00:51:16,320 --> 00:51:22,080
So first thing is change the data type.

756
00:51:22,080 --> 00:51:24,280
Often I'll step parameter.

757
00:51:24,280 --> 00:51:28,160
So in here it's an integer
and here is the string, right?

758
00:51:28,560 --> 00:51:31,200
This is one of the ways
we can overload, right?

759
00:51:31,480 --> 00:51:35,120
So let me copy this method again
and let me put in here.

760
00:51:35,880 --> 00:51:38,840
What is this second thing that I can use

761
00:51:38,840 --> 00:51:42,720
to overload the method?

762
00:51:42,720 --> 00:51:44,880
Add another parameter, right?

763
00:51:45,480 --> 00:51:47,320
Add another parameter.

764
00:51:47,320 --> 00:51:52,400
So a different parameter.

765
00:51:52,400 --> 00:51:53,040
Right.

766
00:51:53,040 --> 00:51:55,640
So in here,
how many parameters were there?

767
00:51:55,720 --> 00:51:58,240
In here there was only one parameter.

768
00:51:58,680 --> 00:52:04,880
Now, in here I have two parameters,
so I am overloading now

769
00:52:04,880 --> 00:52:10,320
by changing the number of parameters
and then the third one

770
00:52:11,320 --> 00:52:12,600
I can change in

771
00:52:12,600 --> 00:52:16,640
this sequence as well,
but I can change the sequence as well.

772
00:52:16,880 --> 00:52:20,840
I can put this string

773
00:52:22,000 --> 00:52:24,400
after this integer number.

774
00:52:24,480 --> 00:52:28,240
Okay, this is the third
and this is the third.

775
00:52:28,280 --> 00:52:31,600
We of overloading it matter. Okay.

776
00:52:31,920 --> 00:52:34,120
I hope now overloading is clear.

777
00:52:34,120 --> 00:52:36,920
Is there anyone who is still confused
about

778
00:52:36,920 --> 00:52:40,000
overloading about the definition?

779
00:52:40,000 --> 00:52:54,200
Use is how to do it.

780
00:52:54,200 --> 00:52:58,640
Maybe Sharif.

781
00:52:58,640 --> 00:53:02,600
So now if we call

782
00:53:04,080 --> 00:53:05,280
this method.

783
00:53:05,280 --> 00:53:08,720
So now Java knows
that if Asgari is passing,

784
00:53:09,080 --> 00:53:13,000
maybe if it is passing it a string.

785
00:53:13,720 --> 00:53:14,400
Okay.

786
00:53:15,000 --> 00:53:17,000
So that's how I know it.

787
00:53:17,040 --> 00:53:19,320
Because I am passing
a string for our knows.

788
00:53:19,560 --> 00:53:22,760
Now I will go inside this class in
does this method

789
00:53:22,800 --> 00:53:26,760
texting Nor does this method texting. Yes.

790
00:53:26,760 --> 00:53:35,800
So Java will call this method. Okay

791
00:53:36,880 --> 00:53:38,200
then when I

792
00:53:38,200 --> 00:53:41,320
will call this method
and I will call this method.

793
00:53:41,320 --> 00:53:45,800
And if I pass, if I pass two parameters

794
00:53:46,440 --> 00:53:48,960
now I will say okay, let me set it

795
00:53:48,960 --> 00:53:53,280
in method within name method
and let me check

796
00:53:53,280 --> 00:53:58,800
if that method is taking an integer
and a string.

797
00:53:58,800 --> 00:54:01,320
Okay, so Java will start this option.

798
00:54:01,480 --> 00:54:03,360
No, it only takes one.

799
00:54:03,360 --> 00:54:04,920
Ignore it. No.

800
00:54:04,920 --> 00:54:06,840
This is also taking one parameter.

801
00:54:06,840 --> 00:54:10,640
No, this one takes two parameters.

802
00:54:10,640 --> 00:54:13,800
First day of the string
and the second one is number.

803
00:54:15,280 --> 00:54:17,520
Hmm. So.

804
00:54:17,640 --> 00:54:18,480
So parameters.

805
00:54:18,480 --> 00:54:22,840
They are same in data type,
but in which way?

806
00:54:22,880 --> 00:54:24,880
They are different days.

807
00:54:26,120 --> 00:54:30,000
They are differing in sequence.

808
00:54:30,000 --> 00:54:30,720
Okay.

809
00:54:30,720 --> 00:54:35,200
In here we are passing an integer
first and string after,

810
00:54:35,760 --> 00:54:42,560
but this method is taking a string first
and then the number would

811
00:54:42,560 --> 00:54:46,480
all this checking and looking for perfect
match would not slow the processing.

812
00:54:46,960 --> 00:54:51,560
So in the build, this matching happens
when we press this control button.

813
00:54:51,720 --> 00:54:58,120
So when we press this control button,
this is compiled to bytecode.

814
00:54:58,240 --> 00:55:02,040
Okay, so it is not happening at runtime.

815
00:55:02,040 --> 00:55:05,000
It is happening
when you are compiling your code.

816
00:55:05,000 --> 00:55:06,480
So let's say, for example,

817
00:55:07,800 --> 00:55:10,800
when I
will write a software, I will compile it

818
00:55:10,800 --> 00:55:13,720
once and I will create dot

819
00:55:13,840 --> 00:55:18,120
easy file
if I am planning to deploy it on Windows

820
00:55:18,400 --> 00:55:22,080
on a BMG file,
if I am planning to deploy it on Mac.

821
00:55:22,320 --> 00:55:26,800
So all this processing,
it will happen when I convert

822
00:55:26,840 --> 00:55:29,600
this source code to those easy

823
00:55:29,840 --> 00:55:32,440
are those BMG files for Mac.

824
00:55:33,000 --> 00:55:35,640
But once, once it is compiled,

825
00:55:35,640 --> 00:55:38,280
then it will be executed in discord.

826
00:55:39,080 --> 00:55:41,320
This is not when the Java is

827
00:55:41,320 --> 00:55:44,600
taking those decisions,
those decisions that are already taken.

828
00:55:44,600 --> 00:55:48,600
That's why it is called stack
pickle binding.

829
00:55:48,600 --> 00:55:53,080
That's why it is called gone by time
polymorphism.

830
00:55:53,080 --> 00:55:53,400
Okay.

831
00:55:53,400 --> 00:55:56,480
That's why it is called and that's why

832
00:55:56,480 --> 00:55:59,680
we have these names
because it happens at compile time.

833
00:56:00,240 --> 00:56:00,960
I am sorry.

834
00:56:00,960 --> 00:56:04,640
As you mentioned, casting in overloading
when called the matter of yesterday,

835
00:56:04,640 --> 00:56:06,040
it was overriding.

836
00:56:06,040 --> 00:56:10,000
Now it was overwriting the
with those data types.

837
00:56:10,000 --> 00:56:17,160
It was not overloading.

838
00:56:17,160 --> 00:56:18,600
All right. All right.

839
00:56:19,560 --> 00:56:19,840
Okay.

840
00:56:19,840 --> 00:56:24,600
So this is how overloading works, guys.

841
00:56:24,600 --> 00:56:28,480
I have error in line 14

842
00:56:29,800 --> 00:56:30,240
collects

843
00:56:30,240 --> 00:56:32,520
any post of the new post,
any sports channel.

844
00:56:34,000 --> 00:56:36,040
Do you have any method that takes?

845
00:56:36,160 --> 00:56:38,640
Is spring only a single string?

846
00:56:38,640 --> 00:56:42,880
Like I created this method in here
which only takes one thing.

847
00:56:43,080 --> 00:56:48,440
So then that's why I don't get any errors.

848
00:56:48,440 --> 00:56:52,880
I know the concern, but I am mixing
a few things with constructors and methods

849
00:56:52,880 --> 00:56:56,680
when are supposed to do together
and especially when need to call them

850
00:56:57,360 --> 00:57:00,160
where I can do separate practice.

851
00:57:00,360 --> 00:57:04,920
Those are lies, so I will share more with
this constructor is really simple guys.

852
00:57:05,800 --> 00:57:09,000
Don't confuse constructor with methods
because

853
00:57:09,880 --> 00:57:12,960
constructor there is only one purpose.

854
00:57:13,200 --> 00:57:15,720
The purpose is to initialize difference.

855
00:57:16,200 --> 00:57:21,120
It is automatically called
and you should only use constructor

856
00:57:21,160 --> 00:57:26,480
only slight difference for the rest of the
things always go go with matters.

857
00:57:26,480 --> 00:57:41,160
Always go with matters.

858
00:57:41,160 --> 00:57:46,200
It's fine now because we will be teaching
you how to build a framework in best

859
00:57:46,200 --> 00:57:51,440
and we will be showing you step by step
how to build our framework in Cucumber

860
00:57:52,480 --> 00:57:53,760
so you guys

861
00:57:53,760 --> 00:57:57,920
will know when to write these methods
and these frameworks.

862
00:57:57,920 --> 00:57:59,640
They are turned off.

863
00:57:59,640 --> 00:58:04,360
They are kind of general things
that you guys will be doing on your job.

864
00:58:04,600 --> 00:58:08,640
So guys will notice
where to use static methods, instance

865
00:58:08,640 --> 00:58:15,760
methods, fields, all of that.

866
00:58:15,760 --> 00:58:18,680
Also, these constructors
need to be for each object.

867
00:58:19,560 --> 00:58:20,520
In real life.

868
00:58:20,520 --> 00:58:24,400
They are always constructors,
even if you have one

869
00:58:24,720 --> 00:58:27,000
field in your class.

870
00:58:27,640 --> 00:58:33,360
So answer this kind of yes.

871
00:58:33,360 --> 00:58:35,680
If you are doing object
oriented programing,

872
00:58:35,680 --> 00:58:38,800
there will always be a constructor.

873
00:58:38,800 --> 00:58:42,280
If you are following the best practices,

874
00:58:42,280 --> 00:58:45,360
can you put a little bit up?

875
00:58:45,360 --> 00:58:47,120
You want me to scroll up in open

876
00:58:47,120 --> 00:58:52,000
here?

877
00:58:52,000 --> 00:58:52,560
Okay.

878
00:58:52,560 --> 00:58:55,200
This one, this, this can

879
00:59:05,880 --> 00:59:07,520
only if you can understand

880
00:59:07,520 --> 00:59:17,480
your dog.

881
00:59:17,480 --> 00:59:23,840
All right,
So, guys, are you guys ready to.

882
00:59:23,840 --> 00:59:26,760
It's good idea to are the best

883
00:59:27,360 --> 00:59:31,080
integer integer far greater

884
00:59:37,200 --> 00:59:39,840
intelligent all intelligent

885
00:59:40,440 --> 00:59:44,760
It's good idea to distantly human
to integrate to the GitHub.

886
00:59:45,080 --> 00:59:51,440
Oh yes, but not for now
because what can happen is your company

887
00:59:51,480 --> 00:59:55,520
they might be using Eclipse,
they might be using intelligent

888
00:59:56,040 --> 00:59:59,960
or other ID or a framework
or something like that. So

889
01:00:02,880 --> 01:00:06,080
it's it's very important
that you guys know

890
01:00:06,360 --> 01:00:08,680
how to do all this stuff

891
01:00:09,600 --> 01:00:12,240
related to great hub with that terminal.

892
01:00:12,520 --> 01:00:15,120
Because that terminal is universal.

893
01:00:15,120 --> 01:00:19,200
You will find that terminal everywhere,
but you will not you

894
01:00:19,200 --> 01:00:24,080
probably will not find intelligent Eclipse
or everything everywhere,

895
01:00:24,240 --> 01:00:27,920
but the terminal is super important.

896
01:00:27,920 --> 01:00:30,720
Yes. Remind me at the end of the class
I will show you on

897
01:00:30,720 --> 01:00:33,840
maybe after the break
or something like that.

898
01:00:35,480 --> 01:00:38,000
And also it gives me a feeling of that

899
01:00:39,280 --> 01:00:42,720
kind of the are doing something very crazy

900
01:00:42,720 --> 01:00:47,080
in front of No, no it happens when you use
terminal is nothing is not it.

901
01:00:47,280 --> 01:00:47,920
Right.

902
01:00:48,000 --> 01:00:50,200
So you usually you should do a terminal

903
01:00:52,000 --> 01:00:53,920
in front of your family member members.

904
01:00:53,920 --> 01:00:54,200
Right.

905
01:00:54,200 --> 01:00:57,600
They will be thinking
oh my God our son or daughter or wife,

906
01:00:57,720 --> 01:01:00,840
my lord, they are doing something

907
01:01:00,840 --> 01:01:06,080
super, super crazy IP config you

908
01:01:06,600 --> 01:01:13,920
I play for in front of my video.

909
01:01:13,920 --> 01:01:19,240
Then you scroll up the page please. Yes.

910
01:01:19,240 --> 01:01:40,680
So let me push this code.

911
01:01:40,680 --> 01:01:43,960
We need learn
so we can make life easy. Yes.

912
01:01:43,960 --> 01:01:47,400
Alex, at the end I'm going to show you
actually what happens

913
01:01:47,400 --> 01:01:49,680
is that I used to show that

914
01:01:50,760 --> 01:01:56,360
in the start of the classes.

915
01:01:56,360 --> 01:01:58,560
Do you have noticed it again?

916
01:01:58,920 --> 01:02:01,800
So I used to do this from Intel.

917
01:02:02,000 --> 01:02:04,960
You just need to click
two buttons and code is pushed.

918
01:02:05,000 --> 01:02:07,120
You need to click one button
and the code is closed.

919
01:02:07,520 --> 01:02:09,240
So I used to show how to do that,

920
01:02:10,440 --> 01:02:11,000
but I will

921
01:02:11,000 --> 01:02:14,200
not show because your instructors,

922
01:02:14,200 --> 01:02:18,000
they all all of them,
they complained to me that that's good.

923
01:02:18,000 --> 01:02:21,240
When you show something simple,
they will ever be learning

924
01:02:21,240 --> 01:02:24,440
something that is that is hard.

925
01:02:24,440 --> 01:02:29,280
Or maybe that is in that that might be
used in the industry in actual.

926
01:02:29,960 --> 01:02:32,080
So I'm not going to show you that.

927
01:02:32,200 --> 01:02:35,160
But once on the last class,

928
01:02:35,160 --> 01:02:39,560
I will show you all the tricks.

929
01:02:39,560 --> 01:02:41,400
I want you to struggle.

930
01:02:41,400 --> 01:02:44,600
I want you to struggle
to learn to make all those mistakes

931
01:02:44,600 --> 01:02:49,280
so that you guys are super comfortable
on your jobs.

932
01:02:49,280 --> 01:02:50,520
Now I'm in total control.

933
01:02:50,520 --> 01:02:56,040
Tell everyone
if you know how to push that,

934
01:02:56,040 --> 01:02:59,160
you can always Google it.

935
01:02:59,160 --> 01:03:00,720
That's actually great.

936
01:03:00,720 --> 01:03:03,960
If you guys can learn
something on your own, that will be great.

937
01:03:04,200 --> 01:03:07,880
But still,
I will suggest you to use the terminal.

938
01:03:08,280 --> 01:03:13,240
I would suggest to use that I'm going to.

939
01:03:13,240 --> 01:03:15,560
It's very important,
right? It's very important.

940
01:03:16,000 --> 01:03:19,120
So again, to close this file next to

941
01:03:19,120 --> 01:03:32,000
the overriding, was there any

942
01:03:33,120 --> 01:03:35,680
longer related to overloading?

943
01:03:35,680 --> 01:03:42,560
Did I post anything
related to overloading?

944
01:03:42,560 --> 01:03:43,920
Okay. Okay.

945
01:03:43,920 --> 01:03:53,600
So let's move to the override.

946
01:03:53,600 --> 01:03:58,800
I am tired or delayed to get hold
folder manually.

947
01:03:59,160 --> 01:04:00,800
Or do we need to delete?

948
01:04:00,800 --> 01:04:02,120
Yes, we don't need to delete.

949
01:04:02,120 --> 01:04:12,240
Alex.

950
01:04:12,240 --> 01:04:14,920
So tell me about the

951
01:04:17,400 --> 01:04:19,880
overriding guys

952
01:04:33,840 --> 01:04:35,400
without inheritance method.

953
01:04:35,400 --> 01:04:37,000
Overriding is not possible.

954
01:04:37,000 --> 01:04:39,720
All homework was overloading.
I did override.

955
01:04:39,840 --> 01:04:42,160
No, no homework was overriding.

956
01:04:42,160 --> 01:04:45,360
I guess the class overriding,
not overloading it correctly.

957
01:04:46,080 --> 01:04:49,880
We use overriding between parent and child
class.

958
01:04:50,760 --> 01:04:52,040
Okay. Yes.

959
01:04:52,040 --> 01:04:57,240
Needs to be with an inheritance
relationship between two classes.

960
01:04:57,760 --> 01:04:59,800
What needs to be Mohammad

961
01:05:01,320 --> 01:05:03,600
happens with parent and child class?

962
01:05:03,600 --> 01:05:06,040
What happens with the parents and child
class?

963
01:05:07,160 --> 01:05:11,560
The matters
we can only override in child class.

964
01:05:11,560 --> 01:05:14,840
The opposite of overloading are

965
01:05:16,320 --> 01:05:18,520
the rules are kind of opposite opposite.

966
01:05:18,640 --> 01:05:22,640
So at one mark overloading and
overloading, they are not opposite kind of

967
01:05:24,840 --> 01:05:25,320
the rules.

968
01:05:25,320 --> 01:05:33,720
They are kind of opposite
when we do overriding.

969
01:05:33,720 --> 01:05:37,800
If we don't like something from parent
class, we can override in the child class.

970
01:05:37,960 --> 01:05:43,400
Yes, return type must be same.

971
01:05:43,400 --> 01:05:46,400
So over

972
01:05:46,400 --> 01:05:49,520
writing just

973
01:05:50,400 --> 01:05:52,760
happens when

974
01:05:53,080 --> 01:05:55,560
same name,

975
01:05:56,560 --> 01:05:58,720
when same

976
01:05:58,920 --> 01:06:00,600
methods

977
01:06:00,960 --> 01:06:03,360
exist in

978
01:06:04,000 --> 01:06:06,400
parent and

979
01:06:08,040 --> 01:06:09,040
child classes.

980
01:06:09,040 --> 01:06:09,720
Right.

981
01:06:10,200 --> 01:06:13,000
So when we have same matter.

982
01:06:13,120 --> 01:06:16,560
So in here guys, I am not using same name.

983
01:06:16,560 --> 01:06:18,920
I am saying same method.

984
01:06:18,960 --> 01:06:22,800
That means the parameters should be
same return type,

985
01:06:22,800 --> 01:06:28,680
should be same,
the non access modifier should be same.

986
01:06:28,920 --> 01:06:34,880
And then there is this kind of flexibility
about the access modifiers,

987
01:06:34,920 --> 01:06:38,200
but rest of the things they must be

988
01:06:38,200 --> 01:06:42,080
same in overriding if a subclass

989
01:06:42,200 --> 01:06:45,200
to iron
this specific implementation of method

990
01:06:45,200 --> 01:06:49,320
that has been declared
by one of its parent class, it is not.

991
01:06:49,480 --> 01:06:52,960
It is known as overloading
definitely from Google right now.

992
01:06:53,040 --> 01:06:55,720
It can also access modify it.

993
01:06:56,840 --> 01:06:59,280
We are calling the method of parent class

994
01:07:01,800 --> 01:07:02,800
to just push the code.

995
01:07:02,800 --> 01:07:15,360
I don't see in the gear tab.

996
01:07:15,360 --> 01:07:17,160
Everything is up to date.

997
01:07:17,160 --> 01:07:20,520
So which repository you are checking?

998
01:07:20,520 --> 01:07:21,920
Sebastian

999
01:07:24,280 --> 01:07:25,440
I push to this.

1000
01:07:25,440 --> 01:07:27,040
This repository

1001
01:07:29,160 --> 01:07:31,400
request under to you

1002
01:07:31,880 --> 01:07:35,040
actually do check it
and let me know if the

1003
01:07:35,040 --> 01:07:38,880
if the code is there or not.

1004
01:07:38,880 --> 01:07:42,920
So overwriting happens
when same method exist in parent

1005
01:07:42,920 --> 01:07:51,000
and child class.

1006
01:07:51,000 --> 01:07:53,640
Okay. And

1007
01:07:55,320 --> 01:08:06,840
so what are the benefits?

1008
01:08:06,840 --> 01:08:07,520
Great.

1009
01:08:07,720 --> 01:08:15,320
Probably benefits of method overriding.

1010
01:08:15,320 --> 01:08:19,240
I think this definition is good
and object oriented programing feature

1011
01:08:19,240 --> 01:08:21,080
that enables a child class to provide

1012
01:08:21,080 --> 01:08:24,440
different information for the method
that is already defined.

1013
01:08:25,000 --> 01:08:27,240
Yes, that is also correct.

1014
01:08:27,240 --> 01:08:30,760
It is not there.

1015
01:08:30,760 --> 01:08:34,040
Okay. Let me check that. Why? I don't see

1016
01:08:45,000 --> 01:08:45,600
full.

1017
01:08:45,600 --> 01:08:49,000
I posted to the main branch

1018
01:09:21,400 --> 01:09:22,640
is the default

1019
01:09:22,640 --> 01:09:47,000
path.

1020
01:09:47,000 --> 01:10:31,280
It deleted.

1021
01:10:31,280 --> 01:10:31,680
Okay.

1022
01:10:31,680 --> 01:10:37,320
I hope you guys see the changes now.

1023
01:10:37,320 --> 01:10:39,640
Seems like I still need some virtual
classes.

1024
01:10:39,680 --> 01:10:42,960
People can help.

1025
01:10:42,960 --> 01:10:47,120
Maybe if everyone mind is so busy
thinking about lives

1026
01:10:47,120 --> 01:10:50,360
even as someone makes in a repository.

1027
01:10:50,720 --> 01:10:52,440
Oh my God.

1028
01:10:52,440 --> 01:10:56,680
That is why you guys need a terminal
if something goes wrong and fix it.

1029
01:10:56,680 --> 01:10:58,600
But you guys cannot.

1030
01:10:58,600 --> 01:11:01,640
So you guys see the update now

1031
01:11:01,840 --> 01:11:03,960
all the classes in here

1032
01:11:04,440 --> 01:11:06,600
because I created
multiple branches in here,

1033
01:11:06,960 --> 01:11:09,600
I was doing something with those classes.

1034
01:11:09,600 --> 01:11:11,680
So that's why you guys are going to see.

1035
01:11:11,680 --> 01:11:12,240
Okay.

1036
01:11:15,320 --> 01:11:16,120
All right.

1037
01:11:16,120 --> 01:11:19,000
All right.

1038
01:11:19,000 --> 01:11:25,040
Method overwriting is used to I mean,
if I would have taken five more minor

1039
01:11:25,040 --> 01:11:28,040
so you guys would have killed me
by your jokes, right?

1040
01:11:28,040 --> 01:11:30,320
I don't know how to use GitHub.

1041
01:11:30,320 --> 01:11:31,560
Show someone.

1042
01:11:31,560 --> 01:11:33,560
I forget how to do that.

1043
01:11:33,600 --> 01:11:41,560
This.

1044
01:11:41,560 --> 01:11:43,000
I think GitHub changed default

1045
01:11:43,000 --> 01:11:46,080
branch from Master Domain
because the word master was that is just

1046
01:11:48,200 --> 01:11:48,920
this last time I

1047
01:11:48,920 --> 01:11:52,280
remember I changed it to the main

1048
01:11:52,680 --> 01:11:52,960
class.

1049
01:11:52,960 --> 01:11:54,560
21 is not bad moment.

1050
01:11:54,560 --> 01:11:56,760
I will be extended. Break break. Okay.

1051
01:11:57,240 --> 01:12:00,240
This class is for full
of sarcastically but

1052
01:12:01,080 --> 01:12:04,400
not is there.

1053
01:12:04,400 --> 01:12:07,480
Here we go. He is thinking

1054
01:12:07,480 --> 01:12:09,280
so what is the benefit of overwriting?

1055
01:12:09,280 --> 01:12:14,040
Nice.

1056
01:12:14,040 --> 01:12:17,280
They give priority to the child
class shortcut

1057
01:12:17,280 --> 01:12:21,120
sometimes not good though
step by step the pass him.

1058
01:12:21,120 --> 01:12:22,240
You are right.

1059
01:12:23,320 --> 01:12:26,880
Do make it the fun and easy and fun

1060
01:12:28,440 --> 01:12:30,000
method overriding is

1061
01:12:30,000 --> 01:12:32,640
used to provide the process

1062
01:12:33,920 --> 01:12:36,400
that is already exist by parent

1063
01:12:36,400 --> 01:12:43,680
or superclass. Yes.

1064
01:12:43,920 --> 01:12:47,160
Ask the recruiter
if they ask you a question,

1065
01:12:47,640 --> 01:12:49,280
tell them that you know the answer.

1066
01:12:49,280 --> 01:12:52,800
But you guys are checking them
so they are to you.

1067
01:12:52,800 --> 01:12:54,600
You guys want to hear from them. Okay.

1068
01:12:54,600 --> 01:12:57,160
And you are not telling the answer.

1069
01:12:57,160 --> 01:12:58,680
It is okay.

1070
01:12:58,680 --> 01:13:02,520
So benefit is that we can have

1071
01:13:04,600 --> 01:13:06,960
a specific

1072
01:13:09,240 --> 01:13:12,240
implementation

1073
01:13:18,000 --> 01:13:20,840
or a method

1074
01:13:21,080 --> 01:13:25,320
that is both therapies already

1075
01:13:26,640 --> 01:13:28,440
defined

1076
01:13:29,040 --> 01:13:30,240
in the

1077
01:13:31,600 --> 01:13:32,480
parent class.

1078
01:13:32,480 --> 01:13:37,840
Okay.

1079
01:13:37,840 --> 01:13:43,080
That where we are we have this

1080
01:13:44,160 --> 01:13:46,040
let's see

1081
01:13:46,440 --> 01:13:48,120
linearity

1082
01:13:53,440 --> 01:13:54,160
there.

1083
01:13:54,960 --> 01:13:57,120
We don't

1084
01:13:57,680 --> 01:14:01,200
have to come up with

1085
01:14:04,120 --> 01:14:06,720
different names

1086
01:14:06,720 --> 01:14:11,280
if we are doing the

1087
01:14:13,160 --> 01:14:18,160
same thing again, maybe

1088
01:14:21,360 --> 01:14:23,160
sorry on this

1089
01:14:24,200 --> 01:14:33,040
one, which is.

1090
01:14:33,040 --> 01:14:36,360
And now let's discuss about the rules

1091
01:14:37,040 --> 01:14:40,240
method that already exist in overriding

1092
01:14:40,240 --> 01:14:43,680
we implement a method in a specific way.

1093
01:14:45,040 --> 01:14:49,320
The relationship
between this and super viewer is similar

1094
01:14:49,720 --> 01:14:53,880
to the relationship between overloading
and overload writing methods.

1095
01:14:53,880 --> 01:14:55,000
I think so.

1096
01:14:55,000 --> 01:14:58,440
Super is more related to overriding.

1097
01:14:59,400 --> 01:15:00,760
Super is more related.

1098
01:15:00,760 --> 01:15:04,640
Overriding super is not related to
in any way to overloading

1099
01:15:09,600 --> 01:15:10,120
already guys.

1100
01:15:10,120 --> 01:15:11,800
So let's start

1101
01:15:12,000 --> 01:15:12,680
the rules.

1102
01:15:12,680 --> 01:15:14,800
So let's start from again from the left.

1103
01:15:14,880 --> 01:15:20,760
So first we have access modifiers.

1104
01:15:20,760 --> 01:15:25,000
Can I override a method?

1105
01:15:25,600 --> 01:15:27,000
If I change the

1106
01:15:27,960 --> 01:15:30,240
can I still override a matter method?

1107
01:15:30,240 --> 01:15:33,240
If I change the access modifier

1108
01:15:41,400 --> 01:15:44,280
now, does it mean yes or no?

1109
01:15:44,280 --> 01:15:46,200
Here we go. Depends.

1110
01:15:46,200 --> 01:15:49,800
Depends is the correct answer How?

1111
01:15:49,800 --> 01:15:50,640
It depends. You guys.

1112
01:15:50,640 --> 01:15:52,840
Can you guys explain

1113
01:15:53,840 --> 01:15:56,800
guard to be more restrictive?

1114
01:15:57,760 --> 01:16:02,040
Access modifier
cannot be restricted in child class.

1115
01:16:02,240 --> 01:16:06,000
Yeah. So

1116
01:16:08,520 --> 01:16:11,040
we can change

1117
01:16:12,040 --> 01:16:14,280
the access

1118
01:16:16,160 --> 01:16:19,080
modifier in the

1119
01:16:19,080 --> 01:16:20,920
charter class.

1120
01:16:20,920 --> 01:16:25,680
We can change the access modifier
in this giant class,

1121
01:16:25,680 --> 01:16:28,480
but we can make it

1122
01:16:29,680 --> 01:16:35,160
only less

1123
01:16:36,560 --> 01:16:38,320
restrictive.

1124
01:16:38,320 --> 01:16:52,640
Yeah,

1125
01:16:52,640 --> 01:16:56,640
we can change the access modifier
in the child class,

1126
01:16:58,160 --> 01:17:01,440
but we can make it only less restricted.

1127
01:17:01,440 --> 01:17:07,680
What does this mean guys?

1128
01:17:07,680 --> 01:17:12,840
Can you guys give me an example for let's
say for example, if something is public,

1129
01:17:12,840 --> 01:17:16,200
if a method is public in the parent class,

1130
01:17:16,760 --> 01:17:19,560
can I change it

1131
01:17:19,560 --> 01:17:23,320
to a private?

1132
01:17:23,320 --> 01:17:28,720
Can I change it to default?

1133
01:17:28,720 --> 01:17:30,720
Protected? No. Why?

1134
01:17:30,720 --> 01:17:34,600
Because public has more wide
access, right?

1135
01:17:35,040 --> 01:17:40,200
The the second one is
the default is already protected.

1136
01:17:40,320 --> 01:17:42,960
Then we have the default
and then we have the private.

1137
01:17:43,200 --> 01:17:45,840
So we can go from here to here,

1138
01:17:46,440 --> 01:17:49,080
but not from here to here.

1139
01:17:49,640 --> 01:17:52,160
We can change a private

1140
01:17:52,160 --> 01:17:55,640
and default or protected to public,

1141
01:17:56,120 --> 01:18:00,880
but we cannot the public to default
or protected or private.

1142
01:18:00,880 --> 01:18:03,680
Okay, So

1143
01:18:06,640 --> 01:18:08,760
for example, we can

1144
01:18:10,320 --> 01:18:11,760
change

1145
01:18:11,960 --> 01:18:17,760
or you can change, protected

1146
01:18:19,240 --> 01:18:29,160
or default to public,

1147
01:18:29,160 --> 01:18:31,160
but we can not

1148
01:18:33,200 --> 01:18:35,280
would be reversed.

1149
01:18:35,280 --> 01:18:38,320
Can I also change the private

1150
01:18:38,400 --> 01:18:41,520
to default or public or

1151
01:18:41,680 --> 01:18:44,560
or maybe to protected?

1152
01:18:45,480 --> 01:18:49,640
I will do the same thing
just to the quarter from here to here

1153
01:18:49,640 --> 01:18:51,920
or from here to

1154
01:18:59,280 --> 01:19:02,520
that big method is bound with classes
we have.

1155
01:19:02,520 --> 01:19:07,080
This trust method is bound with an object.

1156
01:19:07,080 --> 01:19:08,080
Nasu.

1157
01:19:08,160 --> 01:19:10,160
Well,
why you are talking about the restaurant.

1158
01:19:10,160 --> 01:19:12,160
Everyone is talking about East.

1159
01:19:13,200 --> 01:19:17,840
We are discussing about access modifiers,

1160
01:19:17,840 --> 01:19:21,960
not the static keyword.

1161
01:19:21,960 --> 01:19:27,040
We can not access private outside
so it does not qualify for the first rule.

1162
01:19:27,040 --> 01:19:27,720
Guys.

1163
01:19:28,840 --> 01:19:30,640
Okay, I said I hope you don't mind.

1164
01:19:30,640 --> 01:19:34,440
So the first rule for overriding

1165
01:19:34,440 --> 01:19:40,640
is that that thing
that we are trying to override

1166
01:19:40,680 --> 01:19:44,840
must participate in inheritance,

1167
01:19:45,400 --> 01:19:48,400
Do private fears or matters.

1168
01:19:48,840 --> 01:19:55,320
Do they participate in Inheritance? No.

1169
01:19:55,360 --> 01:19:59,640
That means we cannot override them.

1170
01:19:59,840 --> 01:20:00,320
Right.

1171
01:20:00,320 --> 01:20:03,600
Because we will never be able to access

1172
01:20:03,600 --> 01:20:06,760
that in the child class here.

1173
01:20:07,680 --> 01:20:13,160
No constructors
participate in inheritance?

1174
01:20:13,160 --> 01:20:18,960
No, that means we cannot override them.

1175
01:20:19,280 --> 01:20:24,120
But the most constructors
and the private members.

1176
01:20:24,240 --> 01:20:31,920
Can we overload them guys? Yes.

1177
01:20:32,720 --> 01:20:33,280
Now going to.

1178
01:20:33,280 --> 01:20:34,200
We will do the example.

1179
01:20:34,200 --> 01:20:36,440
Does that look me frustrated?

1180
01:20:36,440 --> 01:20:37,960
Ignores. So

1181
01:20:39,840 --> 01:20:43,000
okay, so after the access modifier.

1182
01:20:44,040 --> 01:20:47,080
Okay, so that's why this class is special.

1183
01:20:47,120 --> 01:20:50,120
You remember
you guys have been waiting for class

1184
01:20:50,600 --> 01:20:54,000
or like for the past one month.

1185
01:20:54,000 --> 01:20:57,320
So we have discussed

1186
01:20:57,320 --> 01:21:00,960
the effect of access modifiers

1187
01:21:02,600 --> 01:21:06,840
on all other items,
not overloading or overriding.

1188
01:21:07,800 --> 01:21:11,640
So after the access modifiers

1189
01:21:11,640 --> 01:21:16,760
we have the non access modifiers
like static.

1190
01:21:16,760 --> 01:21:19,520
What is the effect of static on overriding
guys?

1191
01:21:20,320 --> 01:21:23,520
Can I override the method
with static keyword

1192
01:21:26,800 --> 01:21:40,200
or maybe without a static keyword?

1193
01:21:40,200 --> 01:21:43,640
So we can actually,

1194
01:21:44,160 --> 01:21:48,080
if a method is static,
all the rules they are same,

1195
01:21:49,000 --> 01:21:52,440
but we have only in new terminology.

1196
01:21:52,800 --> 01:21:57,400
Instead of overriding,
we say we are redo clearing.

1197
01:21:57,480 --> 01:22:00,840
Okay, rules are same,
everything happens the same because

1198
01:22:02,080 --> 01:22:05,520
static methods they belong to the class.

1199
01:22:05,520 --> 01:22:11,440
We say we are re declaring those matters
instead of overriding those matters.

1200
01:22:11,440 --> 01:22:14,880
Okay, I will show you the examples
about that as well. So

1201
01:22:17,520 --> 01:22:20,440
static matters

1202
01:22:20,880 --> 01:22:22,280
have the

1203
01:22:22,960 --> 01:22:25,440
same rules,

1204
01:22:25,440 --> 01:22:27,560
but we use a

1205
01:22:29,720 --> 01:22:31,080
different

1206
01:22:31,080 --> 01:22:38,480
terminology.

1207
01:22:38,480 --> 01:22:43,240
So static methods have the same rules,
but we use a different terminology.

1208
01:22:43,360 --> 01:22:47,520
We say we are re

1209
01:22:49,120 --> 01:22:51,120
declaring a method

1210
01:22:56,040 --> 01:22:57,640
instead

1211
01:22:58,400 --> 01:23:01,200
instead of

1212
01:23:04,680 --> 01:23:23,880
overriding it,

1213
01:23:25,200 --> 01:23:28,200
we will do the examples for this one
as well.

1214
01:23:28,560 --> 01:23:30,720
Public static void main

1215
01:23:31,840 --> 01:23:33,960
static cannot be overridden but can be

1216
01:23:33,960 --> 01:23:36,480
declared is just a new terminology.

1217
01:23:37,000 --> 01:23:41,520
Everything else is same
or it means if we have static we can.

1218
01:23:41,520 --> 01:23:42,480
We can't override.

1219
01:23:42,480 --> 01:23:45,080
We need to write another method
in the child class.

1220
01:23:45,120 --> 01:23:47,760
No, no.
It simply means we can override it.

1221
01:23:48,240 --> 01:23:50,400
But don't say we are overwriting.

1222
01:23:50,760 --> 01:23:53,920
We say we are re declaring that it

1223
01:23:56,000 --> 01:23:59,280
nursing.

1224
01:23:59,280 --> 01:24:02,560
So after the non access modifiers

1225
01:24:03,040 --> 01:24:06,120
we have the return types. Yes.

1226
01:24:06,120 --> 01:24:08,160
Just and just the name is different.

1227
01:24:08,160 --> 01:24:09,480
Just the name is different.

1228
01:24:10,440 --> 01:24:11,880
That overriding it.

1229
01:24:11,880 --> 01:24:17,600
It's an annotation
now it is something different.

1230
01:24:17,600 --> 01:24:20,120
Yeah. Same thing. Different class. Yes.

1231
01:24:20,640 --> 01:24:22,240
Yes. Alex

1232
01:24:22,920 --> 01:24:27,400
is just political correctness
and just no single writing.

1233
01:24:27,840 --> 01:24:29,400
Perfect example.

1234
01:24:29,400 --> 01:24:31,560
Perfect example. But

1235
01:24:34,200 --> 01:24:36,360
so we are doing the exact same thing.

1236
01:24:36,400 --> 01:24:38,880
We have different names

1237
01:24:38,880 --> 01:24:48,360
because we have to follow the terminology.

1238
01:24:48,360 --> 01:24:50,800
Okay, Do you have somebody in politics?

1239
01:24:50,800 --> 01:24:53,720
Politics.

1240
01:24:53,720 --> 01:24:57,080
Okay, so.

1241
01:24:57,080 --> 01:25:02,880
But not in size. Yes.

1242
01:25:02,880 --> 01:25:06,000
So after the non access modifier,

1243
01:25:06,000 --> 01:25:12,000
we have the return type.

1244
01:25:12,000 --> 01:25:14,560
What is the importance of return type?

1245
01:25:14,560 --> 01:25:17,160
Can I change the return types

1246
01:25:17,880 --> 01:25:26,040
when I am overriding a matter?

1247
01:25:26,040 --> 01:25:28,920
Thank you really to
so you guys can send more

1248
01:25:30,000 --> 01:25:32,600
more suggestions if if you guys

1249
01:25:33,880 --> 01:25:36,200
maybe learn something but

1250
01:25:36,800 --> 01:25:39,200
learn something better in a different way.

1251
01:25:39,840 --> 01:25:44,280
So all the return types,

1252
01:25:44,520 --> 01:25:47,560
they must be same care,

1253
01:25:47,640 --> 01:25:51,080
they must be seen in overriding.

1254
01:25:51,240 --> 01:25:53,520
They need to be salmon
overloading as well.

1255
01:25:53,520 --> 01:25:55,920
Guys.

1256
01:25:55,920 --> 01:26:00,080
Do they need to be same in
overloading as well?

1257
01:26:00,080 --> 01:26:01,680
No, they don't need to be.

1258
01:26:01,680 --> 01:26:03,840
Same in overloading. Right.

1259
01:26:03,840 --> 01:26:08,600
They they don't matter.

1260
01:26:08,600 --> 01:26:12,760
Return types must be same

1261
01:26:13,760 --> 01:26:17,520
in all variety.

1262
01:26:17,840 --> 01:26:34,720
Yeah. You.

1263
01:26:34,720 --> 01:26:38,880
After that we have the name of

1264
01:26:38,880 --> 01:26:42,120
the method as well is the first rule
phrased correctly.

1265
01:26:42,680 --> 01:26:46,840
We can change the access modifier
in child class, but we can make it

1266
01:26:46,840 --> 01:26:48,480
only less

1267
01:26:51,200 --> 01:26:52,080
restrictive.

1268
01:26:52,080 --> 01:26:54,000
For example,

1269
01:26:54,480 --> 01:26:56,280
we can change protected.

1270
01:26:56,280 --> 01:26:57,240
Yes, it is correct.

1271
01:26:57,240 --> 01:26:59,840
Is there anything wrong

1272
01:27:03,600 --> 01:27:04,040
logo?

1273
01:27:04,080 --> 01:27:05,800
You did anything wrong in the first part?

1274
01:27:05,800 --> 01:27:06,240
New Jersey.

1275
01:27:06,240 --> 01:27:11,880
Anything wrong in the first part?

1276
01:27:11,880 --> 01:27:15,240
Why is there but

1277
01:27:15,240 --> 01:27:16,360
all because.

1278
01:27:16,360 --> 01:27:17,880
So we have a logo.

1279
01:27:17,880 --> 01:27:20,840
Because from

1280
01:27:20,840 --> 01:27:24,360
protected or from default

1281
01:27:24,600 --> 01:27:28,040
we cannot we cannot go to

1282
01:27:29,400 --> 01:27:30,920
from public.

1283
01:27:30,920 --> 01:27:33,240
We cannot go to

1284
01:27:35,240 --> 01:27:37,440
protected our default on private.

1285
01:27:37,720 --> 01:27:39,480
But we can do the reverse.

1286
01:27:39,480 --> 01:27:41,280
We can go this way.

1287
01:27:41,280 --> 01:27:47,240
So from less restrictive,
we can go from more restrictive to

1288
01:27:47,240 --> 01:27:51,400
we can go less restrictive,
we can increase the visibility,

1289
01:27:51,600 --> 01:27:53,160
but we cannot decrease it.

1290
01:27:53,160 --> 01:27:54,440
That's why we have this. But

1291
01:27:55,800 --> 01:27:56,920
but I need a break.

1292
01:27:56,920 --> 01:28:00,920
But we need a break.

1293
01:28:00,920 --> 01:28:05,360
Honestly, I think a little more slipping
for the last 1.5 hours.

1294
01:28:05,720 --> 01:28:13,560
He just woke up
and now he's asking for a break.

1295
01:28:13,560 --> 01:28:16,200
Yeah. So,

1296
01:28:18,200 --> 01:28:19,960
Leslie, let's discuss the well,

1297
01:28:19,960 --> 01:28:22,800
what is the logic of maintaining
the return type?

1298
01:28:23,200 --> 01:28:27,240
So building logic will make sense

1299
01:28:28,080 --> 01:28:30,360
when we will be learning the abstraction.

1300
01:28:30,360 --> 01:28:32,760
But let me give you an hint.

1301
01:28:33,360 --> 01:28:35,160
So let's say you are

1302
01:28:35,160 --> 01:28:42,200
you have written a piece of code,
and that piece of code

1303
01:28:42,520 --> 01:28:46,720
is expecting a method to return something.

1304
01:28:47,360 --> 01:28:48,200
Okay.

1305
01:28:48,480 --> 01:28:50,800
In your child class,

1306
01:28:50,800 --> 01:28:53,360
you change that return type

1307
01:28:53,360 --> 01:28:56,160
and instead you don't return anything.

1308
01:28:56,400 --> 01:29:00,600
Now, the code which was expecting
the output from that method,

1309
01:29:01,400 --> 01:29:05,520
now if you try to use that code
with your child class, it will not work.

1310
01:29:05,760 --> 01:29:07,120
And remind me of this question

1311
01:29:07,120 --> 01:29:10,720
once we have discussed the polymorphism,
it will make perfect sense.

1312
01:29:10,720 --> 01:29:18,600
Once we have discussed the polymorphism.

1313
01:29:18,600 --> 01:29:20,600
So return types must be same.

1314
01:29:20,600 --> 01:29:24,160
And then after we have the name

1315
01:29:26,040 --> 01:29:28,960
What about the name Andy

1316
01:29:28,960 --> 01:29:39,800
and the parameters the guys,

1317
01:29:39,800 --> 01:29:48,400
the name must be same.

1318
01:29:48,400 --> 01:29:51,840
And in the last we have

1319
01:29:52,680 --> 01:29:56,240
parameters.

1320
01:29:56,240 --> 01:29:58,720
Parameters should also be

1321
01:30:00,040 --> 01:30:02,400
think, okay, but I'm also wishing

1322
01:30:03,720 --> 01:30:05,560
so. Okay.

1323
01:30:05,560 --> 01:30:07,880
Mohammad, can you check
now if you guys have

1324
01:30:07,880 --> 01:30:10,400
all the updated code integrated but not

1325
01:30:12,480 --> 01:30:15,200
Sebastian, can you check please?

1326
01:30:15,480 --> 01:30:17,040
You said before that we were going

1327
01:30:17,040 --> 01:30:20,200
to show us to combine Eclipse
and intelligent products.

1328
01:30:20,200 --> 01:30:21,960
Are we going to class

1329
01:30:22,120 --> 01:30:24,480
or did I miss something normal?

1330
01:30:25,600 --> 01:30:30,840
You didn't miss anything,
but I actually don't want to do that

1331
01:30:30,840 --> 01:30:35,400
because this polymorphism thing,
I think it's enough for you

1332
01:30:36,120 --> 01:30:39,240
for the next week to

1333
01:30:40,800 --> 01:30:42,280
do not feel well.

1334
01:30:42,280 --> 01:30:48,000
So once you guys are out of the hangover
of this polymorphism, maybe you can to

1335
01:30:49,200 --> 01:30:49,760
how to

1336
01:30:49,760 --> 01:30:52,160
move your
project from eclipse to intelligent.

1337
01:30:54,120 --> 01:31:06,560
But if you want, I can show that as well.

1338
01:31:06,560 --> 01:31:08,840
Okay.
But first we have the class controller.

1339
01:31:09,320 --> 01:31:10,640
So guys,

1340
01:31:11,520 --> 01:31:13,120
15 minutes will be enough on this

1341
01:31:13,120 --> 01:31:22,480
break, right?

1342
01:31:22,480 --> 01:31:33,560
So I have pushed the overriding notes
as well.

1343
01:31:33,560 --> 01:31:34,080
Okay.

1344
01:31:34,080 --> 01:31:37,080
Please be back by 1147 and reminding me

1345
01:31:37,080 --> 01:31:44,320
about recording.

1346
01:31:44,320 --> 01:31:58,840
Usually we will do the examples
after we are back from the break.

1347
01:31:58,840 --> 01:32:02,440
How do you guys back

1348
01:32:06,480 --> 01:32:08,160
or never left

1349
01:32:19,560 --> 01:32:30,160
or right who?

1350
01:32:30,160 --> 01:32:34,000
All right, so guys, can we

1351
01:32:34,200 --> 01:32:36,200
can we override

1352
01:32:36,200 --> 01:32:42,360
a private method?

1353
01:32:42,360 --> 01:32:46,320
Yes, we are recording.

1354
01:32:46,320 --> 01:32:51,480
Medium is still saying yes. No.

1355
01:32:52,640 --> 01:32:55,680
Why? We cannot override
your private matter

1356
01:33:02,640 --> 01:33:48,480
because it's private.

1357
01:33:48,480 --> 01:33:51,520
Because they don't
participate in inheritance.

1358
01:33:51,800 --> 01:33:52,240
Okay?

1359
01:33:52,480 --> 01:33:54,760
They are not available to be charged
class.

1360
01:33:55,440 --> 01:33:59,760
We can by reducing the restriction,

1361
01:33:59,760 --> 01:34:02,920
not reducing by any by

1362
01:34:05,080 --> 01:34:06,960
a yes.

1363
01:34:06,960 --> 01:34:09,080
By reducing the restriction, Yes.

1364
01:34:09,080 --> 01:34:11,120
Did I miss anything? No.

1365
01:34:11,120 --> 01:34:15,480
You can't access it
in an inheritance. Yes.

1366
01:34:15,880 --> 01:34:16,160
Okay.

1367
01:34:16,160 --> 01:34:18,600
Let's now do or let's do

1368
01:34:20,280 --> 01:34:29,520
the example for all of these points.

1369
01:34:29,520 --> 01:34:33,400
So let's say we have a parent class

1370
01:34:38,160 --> 01:34:39,440
and inside this

1371
01:34:39,440 --> 01:34:42,560
parent class
main method also cannot be overridden.

1372
01:34:42,560 --> 01:34:45,040
Yes, but we can really clear it.

1373
01:34:46,680 --> 01:34:47,360
Let me put it.

1374
01:34:47,360 --> 01:35:33,560
That can in the left pane here

1375
01:35:33,560 --> 01:35:37,400
we have a method again, very same method,

1376
01:35:38,000 --> 01:35:42,120
simple method, but I really love that.

1377
01:35:42,120 --> 01:35:46,400
And intelligent would just write more
and enter than the main

1378
01:35:46,400 --> 01:35:52,600
method appears.

1379
01:35:52,600 --> 01:35:54,600
One second in the note please.

1380
01:35:54,680 --> 01:35:58,240
Okay. Here

1381
01:36:03,440 --> 01:36:04,280
there are.

1382
01:36:04,360 --> 01:36:07,320
There are so many other things
that appears

1383
01:36:07,320 --> 01:36:10,600
in the intelligent picture.

1384
01:36:10,680 --> 01:36:14,680
For example, if you just write for

1385
01:36:20,040 --> 01:36:21,200
for I

1386
01:36:21,200 --> 01:36:24,240
it will create a for for loop.

1387
01:36:24,560 --> 01:36:26,400
Okay.

1388
01:36:26,400 --> 01:36:29,640
If you are writing the
if health conditions

1389
01:36:30,800 --> 01:36:34,200
like for example and

1390
01:36:34,360 --> 01:36:36,480
number is equal to

1391
01:36:36,480 --> 01:36:39,120
and if you say if

1392
01:36:41,840 --> 01:36:44,840
number four then

1393
01:36:47,160 --> 01:36:49,560
then go something.

1394
01:36:49,680 --> 01:36:52,840
I hope it works as a

1395
01:36:55,320 --> 01:36:57,880
number equal to quantity.

1396
01:36:58,880 --> 01:37:07,000
Do something else.

1397
01:37:07,000 --> 01:37:45,760
I will save the variable.

1398
01:37:45,760 --> 01:37:51,080
So you guys say replace
if we switch the fourth option.

1399
01:37:51,360 --> 01:37:54,600
So right now
I have this effective condition and

1400
01:37:55,560 --> 01:37:59,760
by just clicking on this,
if and then clicking on this ball,

1401
01:37:59,760 --> 01:38:03,160
I can replace this if condition
with this switch cases with one click.

1402
01:38:04,240 --> 01:38:06,360
There are so many things

1403
01:38:06,360 --> 01:38:09,160
that I will teach you step by step.

1404
01:38:09,520 --> 01:38:13,160
You guys will able to play with your code
just like that.

1405
01:38:13,440 --> 01:38:14,800
Very, very helpful

1406
01:38:22,320 --> 01:38:22,880
writing,

1407
01:38:22,880 --> 01:38:26,480
implementing methods, inheritance
and all that. So

1408
01:38:28,160 --> 01:38:30,720
If I place my cursor in, if

1409
01:38:33,000 --> 01:38:34,080
in here

1410
01:38:34,280 --> 01:38:36,720
and if I click on this button

1411
01:38:36,720 --> 01:38:39,240
in here, I can, I can do so many things.

1412
01:38:39,240 --> 01:38:43,840
I can revoke the conditions
inside this condition if you are reading

1413
01:38:44,040 --> 01:38:47,640
and if condition
and that if condition is tough

1414
01:38:47,960 --> 01:38:52,000
for you to understand,
you can revert all the conditions.

1415
01:38:52,000 --> 01:38:56,640
Also, if someone has written the code
using else as it's all this stuff to read.

1416
01:38:56,640 --> 01:38:57,520
If someone has written

1417
01:38:57,520 --> 01:39:01,840
if conditions using did
not operate the operators, all this stuff.

1418
01:39:01,840 --> 01:39:05,440
So you can revert all of these those to

1419
01:39:05,480 --> 01:39:10,080
to to simplify it.

1420
01:39:10,080 --> 01:39:13,080
You can modify the elseif conditions.

1421
01:39:13,080 --> 01:39:14,360
Okay. You can

1422
01:39:15,240 --> 01:39:18,440
remove the
you can convert it to switch cases

1423
01:39:19,200 --> 01:39:23,040
intelligence will also simplify your

1424
01:39:24,040 --> 01:39:26,640
your if conditions.

1425
01:39:26,640 --> 01:39:30,000
So for example,
are you guys able to convert it

1426
01:39:30,000 --> 01:39:31,840
to a C statement

1427
01:39:37,080 --> 01:39:39,840
how we go back control Z

1428
01:39:43,320 --> 01:39:45,720
or you can press on this

1429
01:39:45,720 --> 01:39:49,800
and you can replace switch
with if condition.

1430
01:39:49,800 --> 01:39:54,600
Okay, so

1431
01:39:55,440 --> 01:39:59,280
put your cursor inside the switch

1432
01:40:03,720 --> 01:40:05,160
and then

1433
01:40:05,560 --> 01:40:08,880
you can convert it back to
if conditions there is.

1434
01:40:08,880 --> 01:40:12,240
One more thing being delayed, you guys
and the other companies are working

1435
01:40:12,920 --> 01:40:13,720
to integrate it here.

1436
01:40:13,720 --> 01:40:15,160
It's called

1437
01:40:16,960 --> 01:40:19,600
GitHub Autopilot.

1438
01:40:19,600 --> 01:40:23,440
You guys just need to write
something in comments

1439
01:40:24,160 --> 01:40:27,400
and it will write methods
you automatically.

1440
01:40:28,080 --> 01:40:35,280
So there are so many types of innovations
you would just need to write one line.

1441
01:40:35,440 --> 01:40:39,560
So for example, you just need to write
an commands, create a method

1442
01:40:40,480 --> 01:40:43,800
to add two things

1443
01:40:46,920 --> 01:40:50,040
and the method will be
created for you automatically

1444
01:40:55,160 --> 01:40:55,800
locate

1445
01:40:56,560 --> 01:41:01,080
your air based.

1446
01:41:01,080 --> 01:41:03,160
So I will spend just 2 minutes in here.

1447
01:41:03,160 --> 01:41:16,720
So this guy is creating an index or this.

1448
01:41:16,720 --> 01:41:20,520
So you see that guy has just written
a function, random number

1449
01:41:21,000 --> 01:41:23,880
and all the other parameters

1450
01:41:23,880 --> 01:41:26,640
mean max written
metadata flow, blah, blah, blah.

1451
01:41:27,000 --> 01:41:31,120
And the
the idea is is showing the suggestions

1452
01:41:31,120 --> 01:41:34,120
for back to

1453
01:41:38,600 --> 01:41:39,320
your searches

1454
01:41:39,320 --> 01:41:42,440
all the solutions on the GitHub
over the internet

1455
01:41:42,800 --> 01:41:47,000
if there is a method with same name
present over the internet anywhere

1456
01:41:47,320 --> 01:41:49,560
it will bring that code to your I.D.

1457
01:41:53,680 --> 01:41:58,400
So you guys are encouraged
to watch this hour

1458
01:41:58,440 --> 01:42:01,120
during the break or some time as

1459
01:42:04,240 --> 01:42:06,640
if no comments on that

1460
01:42:06,640 --> 01:42:11,760
and that.

1461
01:42:11,760 --> 01:42:14,200
Okay. So, uh,

1462
01:42:15,360 --> 01:42:18,760
so there are so many great things
that you guys will learn.

1463
01:42:18,760 --> 01:42:22,000
If I had enough time, maybe I will spend

1464
01:42:22,000 --> 01:42:25,160
a complete session on on intelligence.

1465
01:42:25,200 --> 01:42:28,440
Once you guys are done
writing your framework,

1466
01:42:28,440 --> 01:42:32,280
then I will show you the tricks
how to navigate to big code bases

1467
01:42:32,960 --> 01:42:36,000
so that you guys don't get scare scared

1468
01:42:36,480 --> 01:42:39,080
by seeing all those course. So

1469
01:42:40,600 --> 01:42:41,840
this is also intelligent.

1470
01:42:41,840 --> 01:42:46,280
Got an can to do this so let's see if this
if you are writing and if condition

1471
01:42:47,200 --> 01:42:49,920
if number is adequate then

1472
01:42:56,400 --> 01:42:59,760
and number is greater

1473
01:42:59,760 --> 01:43:03,280
than 10%.

1474
01:43:03,480 --> 01:43:08,080
Eight signs.

1475
01:43:08,080 --> 01:43:11,600
So in here
you are writing something extra.

1476
01:43:11,840 --> 01:43:14,160
Okay. So

1477
01:43:18,600 --> 01:43:20,400
so if you see

1478
01:43:20,520 --> 01:43:25,440
I am doing
something that will always be be doing

1479
01:43:25,680 --> 01:43:29,560
if I, if I, if I replace this condition
with this condition.

1480
01:43:29,840 --> 01:43:31,800
So still it will always be true.

1481
01:43:31,800 --> 01:43:34,680
So once you guys are done
writing the code intelligible, you

1482
01:43:35,880 --> 01:43:40,320
scan all the code
and if you are writing something complex,

1483
01:43:40,360 --> 01:43:44,360
you are if you are not following
the best practices, if there

1484
01:43:44,360 --> 01:43:48,400
if there is anything that can be improved,
they will show you that.

1485
01:43:48,880 --> 01:43:51,840
I will also show you that if we have

1486
01:43:52,160 --> 01:43:59,240
if we had some time.

1487
01:43:59,240 --> 01:44:04,320
So we were discussing about
the method writing.

1488
01:44:04,320 --> 01:44:05,400
Okay, so

1489
01:44:06,480 --> 01:44:09,960
let's say I have a method

1490
01:44:11,280 --> 01:44:13,320
and here I am again passing.

1491
01:44:13,600 --> 01:44:17,400
Now, once we are done,
I will open the overloading

1492
01:44:17,400 --> 01:44:20,160
and overriding example do side by side
side.

1493
01:44:20,440 --> 01:44:31,800
For those who are still confused,
you guys can compare these to.

1494
01:44:31,800 --> 01:44:34,720
And then there is this child class.

1495
01:44:36,120 --> 01:44:39,440
Okay, I will give the example very

1496
01:44:42,360 --> 01:44:44,320
experienced

1497
01:44:44,440 --> 01:44:45,960
parent

1498
01:44:46,360 --> 01:44:49,440
and if I write void

1499
01:44:49,680 --> 01:44:53,280
I get to this suggestion to override
I click enter

1500
01:44:53,280 --> 01:45:00,720
and the method is over.

1501
01:45:00,720 --> 01:45:04,840
Okay, now let's clear the

1502
01:45:06,440 --> 01:45:10,560
first class.

1503
01:45:10,560 --> 01:45:12,240
And in here I have the amendment.

1504
01:45:12,240 --> 01:45:17,120
Okay, so now let's first discuss.

1505
01:45:17,880 --> 01:45:20,880
Let's start the rules from the very left.

1506
01:45:21,360 --> 01:45:23,880
So first we have the

1507
01:45:25,080 --> 01:45:26,360
access modifier.

1508
01:45:26,360 --> 01:45:30,120
So we discussed that in over writing.

1509
01:45:30,120 --> 01:45:36,480
We can not decrease the visibility,
but we can increase it.

1510
01:45:36,760 --> 01:45:40,920
So let's say, for example,
if something is public, okay,

1511
01:45:42,240 --> 01:45:45,080
as soon as I put public, because

1512
01:45:45,120 --> 01:45:49,800
what is the access modifier in here guys?

1513
01:45:49,800 --> 01:45:51,000
It's the default.

1514
01:45:51,000 --> 01:45:54,000
And if I change the access modifier

1515
01:45:54,000 --> 01:45:58,000
from public to default
and my increasing visibility

1516
01:45:58,000 --> 01:46:03,600
or am I decreasing the visibility,
I am decreasing it.

1517
01:46:03,600 --> 01:46:05,520
So this is not allowed.

1518
01:46:05,520 --> 01:46:09,920
Okay, This is not allowed.

1519
01:46:09,920 --> 01:46:20,000
So this is not allowed.

1520
01:46:20,000 --> 01:46:27,240
So let me put it in comments.

1521
01:46:27,240 --> 01:46:28,520
Grant

1522
01:46:29,920 --> 01:46:31,840
decrease the

1523
01:46:33,240 --> 01:46:34,560
with the

1524
01:46:35,000 --> 01:46:35,960
humility.

1525
01:46:36,240 --> 01:46:38,240
Okay.

1526
01:46:38,240 --> 01:46:48,600
Okay.

1527
01:46:48,600 --> 01:46:50,600
Okay. So this is the first thing.

1528
01:46:51,000 --> 01:46:56,760
But if I have, how did you make
the override shortcut and just type void?

1529
01:46:56,840 --> 01:46:57,960
Mohammad

1530
01:46:58,520 --> 01:47:02,760
Just type word and it will show you
the suggestion to override that

1531
01:47:03,280 --> 01:47:07,520
method in the child class.

1532
01:47:07,520 --> 01:47:10,560
So if I allow, I have

1533
01:47:10,560 --> 01:47:15,960
the default access modifier in here
and now if I

1534
01:47:16,560 --> 01:47:19,080
don't change it, no issues.

1535
01:47:20,360 --> 01:47:22,720
But if I try

1536
01:47:22,720 --> 01:47:27,760
to make it through it again,
what am I doing guys?

1537
01:47:27,960 --> 01:47:31,920
I am decreasing the visibility, right?

1538
01:47:32,880 --> 01:47:35,920
So I cannot do that,
but I can increase it.

1539
01:47:36,360 --> 01:47:40,680
I can
I can put public okay, I can put public

1540
01:47:41,440 --> 01:47:45,200
so I can increase it, but I can not decree
that this is what it is

1541
01:47:46,240 --> 01:47:46,800
meant.

1542
01:47:46,800 --> 01:47:49,600
The first one is there
anyone who is still confused Global.

1543
01:47:49,960 --> 01:47:58,800
Is it clear now?

1544
01:47:58,800 --> 01:48:02,960
So tell me if it is clear
if I put protected

1545
01:48:03,720 --> 01:48:06,440
which keywords I cannot use in here.

1546
01:48:06,440 --> 01:48:09,200
Why I'm getting an error

1547
01:48:18,560 --> 01:48:20,080
use same or public

1548
01:48:20,080 --> 01:48:23,720
because protected is more visible

1549
01:48:24,720 --> 01:48:27,120
than the default one.

1550
01:48:27,120 --> 01:48:27,720
Okay.

1551
01:48:27,720 --> 01:48:31,920
So I am decreasing from more to less,
from more to less.

1552
01:48:32,480 --> 01:48:37,080
So I can for public,
but I can not for default.

1553
01:48:38,440 --> 01:48:39,120
All right.

1554
01:48:39,120 --> 01:48:41,160
So let me

1555
01:48:49,880 --> 01:48:51,720
finally think about this.

1556
01:48:51,720 --> 01:48:54,760
Think about this in a child class.

1557
01:48:55,320 --> 01:49:00,280
Can I override
as well as overloaded method?

1558
01:49:01,240 --> 01:49:03,840
What if you make the method in parent
class private?

1559
01:49:04,840 --> 01:49:07,480
If I make it private, then

1560
01:49:07,880 --> 01:49:11,720
and the first place
it will not participate in inheritance.

1561
01:49:11,720 --> 01:49:13,280
And then it will.

1562
01:49:13,280 --> 01:49:14,640
Now nothing will happen, right?

1563
01:49:14,640 --> 01:49:18,840
If something is not participating,
then all the rules and everything

1564
01:49:18,840 --> 01:49:21,880
related to overriding is gone

1565
01:49:23,040 --> 01:49:25,160
because private members,

1566
01:49:25,480 --> 01:49:31,680
they don't participate in inheritance. So.

1567
01:49:32,800 --> 01:49:33,480
All right. Okay.

1568
01:49:33,480 --> 01:49:36,840
So after the excess modifier

1569
01:49:37,840 --> 01:49:41,960
we discussed about the non access
modifiers.

1570
01:49:43,760 --> 01:49:53,520
Okay, so what is the effect of non
access modifier?

1571
01:49:53,520 --> 01:49:54,320
You guys

1572
01:50:02,000 --> 01:50:03,480
let me put it at the top

1573
01:50:03,480 --> 01:50:08,240
so that you guys can come see it.

1574
01:50:08,240 --> 01:50:08,800
Right?

1575
01:50:09,200 --> 01:50:12,520
And so if I put static in here,

1576
01:50:13,960 --> 01:50:15,120
you guys see

1577
01:50:15,120 --> 01:50:18,640
as soon as I static I get an over,

1578
01:50:18,880 --> 01:50:22,640
I get an error on override.

1579
01:50:23,040 --> 01:50:24,120
What does this mean.

1580
01:50:24,120 --> 01:50:30,000
What does this mean guys.

1581
01:50:30,000 --> 01:50:33,920
This super conceals the override.

1582
01:50:33,920 --> 01:50:36,920
No, it calls the method

1583
01:50:36,920 --> 01:50:40,200
from the parent class.

1584
01:50:40,200 --> 01:50:42,840
So this error is saying hey is good.

1585
01:50:43,440 --> 01:50:47,920
You are saying in here on line
ten that you are overriding this.

1586
01:50:47,920 --> 01:50:51,720
We have this method,
but I see a static keyword.

1587
01:50:52,440 --> 01:50:54,840
When we have static keywords

1588
01:50:54,880 --> 01:50:59,640
we can read the clear
but can not override.

1589
01:50:59,640 --> 01:51:02,880
Okay. So remove this

1590
01:51:02,920 --> 01:51:07,000
from here
because now you are not overwriting.

1591
01:51:07,040 --> 01:51:07,640
Okay.

1592
01:51:07,800 --> 01:51:12,520
And now it says static method in bash

1593
01:51:12,520 --> 01:51:17,840
cannot be cannot
override instance method in parent.

1594
01:51:17,960 --> 01:51:19,840
Okay.

1595
01:51:19,840 --> 01:51:23,520
So we can not have a static method

1596
01:51:26,040 --> 01:51:28,080
overriding in non static.

1597
01:51:28,080 --> 01:51:28,320
Okay.

1598
01:51:29,280 --> 01:51:31,440
So if you want,

1599
01:51:32,000 --> 01:51:36,400
what should I need to do guys.

1600
01:51:36,400 --> 01:51:39,080
I need to put static in here

1601
01:51:40,200 --> 01:51:41,600
as well.

1602
01:51:41,600 --> 01:51:45,960
So now board to be met
Thursday are static rules.

1603
01:51:45,960 --> 01:51:50,160
They will be same
if now you guys call the method

1604
01:51:51,280 --> 01:51:52,800
using this.

1605
01:51:52,800 --> 01:51:53,040
Okay.

1606
01:51:53,040 --> 01:52:04,480
So let me actually show that as well.

1607
01:52:04,480 --> 01:52:08,280
So if I say child dot method, then

1608
01:52:10,080 --> 01:52:41,080
actually let me put.

1609
01:52:41,080 --> 01:52:41,480
Okay.

1610
01:52:42,760 --> 01:52:46,680
So I have this static Lloyd method.

1611
01:52:46,680 --> 01:52:50,920
The parent
and I have the same method in the child.

1612
01:52:51,240 --> 01:52:54,600
So if I say child, I do not method

1613
01:52:56,440 --> 01:53:22,040
but output, I will get case.

1614
01:53:22,040 --> 01:53:24,400
What happens
when we override something? Guys

1615
01:53:28,560 --> 01:53:32,520
so we get from child care.

1616
01:53:33,280 --> 01:53:38,160
And if I remove this method
from the child,

1617
01:53:39,560 --> 01:53:49,840
what output I will get Now.

1618
01:53:49,840 --> 01:53:50,240
Okay.

1619
01:53:51,280 --> 01:53:53,560
From parent so is an ordered same.

1620
01:53:53,800 --> 01:53:56,880
This is what happens with the instance
metadata as well.

1621
01:53:56,880 --> 01:53:59,680
Right? This is the exact same behavior.

1622
01:54:00,560 --> 01:54:06,040
So let's say for example,
if I make these methods and not static,

1623
01:54:06,600 --> 01:54:10,080
okay, If I make this
static and methods non static

1624
01:54:11,240 --> 01:54:13,920
and now if I declare an

1625
01:54:14,400 --> 01:54:18,720
object of child is equal to child,

1626
01:54:18,720 --> 01:54:21,040
and if I say child or method matter

1627
01:54:21,760 --> 01:54:24,040
what, I will get guys

1628
01:54:28,920 --> 01:54:30,480
from child, Right.

1629
01:54:30,480 --> 01:54:36,360
From child.

1630
01:54:36,360 --> 01:54:38,440
And if I remove this method
from the child,

1631
01:54:40,040 --> 01:54:43,880
then what I will get, I will get from.

1632
01:54:43,880 --> 01:54:46,640
Right. So it are not in behavior.

1633
01:54:46,760 --> 01:54:51,840
This same for static and instance methods.

1634
01:54:51,840 --> 01:54:53,640
Do you guys see any difference

1635
01:54:53,640 --> 01:54:57,480
in how the static and not static methods
they are moving?

1636
01:54:57,480 --> 01:54:59,600
There is no difference.

1637
01:54:59,840 --> 01:55:03,480
But the
but we have a different terminology.

1638
01:55:03,720 --> 01:55:04,080
Okay.

1639
01:55:04,080 --> 01:55:09,760
So the difference is
only about the terminology when we read.

1640
01:55:09,920 --> 01:55:12,760
When we need to redefine 930 in the child

1641
01:55:12,760 --> 01:55:17,160
class, we say re declaring it
instead of overwriting it.

1642
01:55:17,760 --> 01:55:21,880
When the method is instrumental,
we say we are overwriting.

1643
01:55:21,880 --> 01:55:24,000
Okay, so it's only the terminology.

1644
01:55:24,000 --> 01:55:27,720
They do exactly the same thing.

1645
01:55:27,960 --> 01:55:28,680
Okay.

1646
01:55:29,240 --> 01:55:32,840
Is it clear the name do point.

1647
01:55:32,840 --> 01:55:33,240
Okay.

1648
01:55:33,240 --> 01:55:36,520
Go do your
we can do when they launched this.

1649
01:55:36,520 --> 01:55:39,640
So this politics in Java
I'm making calls for this forward

1650
01:55:44,520 --> 01:55:45,040
thought.

1651
01:55:45,240 --> 01:55:48,000
All right so this was about

1652
01:55:48,120 --> 01:55:50,840
the static methods. Yep.

1653
01:55:51,800 --> 01:55:54,000
Yep. You guys can see the city code.

1654
01:55:54,920 --> 01:55:57,240
I have just removed the static from here
and here.

1655
01:55:57,880 --> 01:56:13,560
The behavior is exactly the same.

1656
01:56:13,560 --> 01:56:14,680
You guys good?

1657
01:56:14,680 --> 01:56:24,360
Can we move to the next point?

1658
01:56:24,360 --> 01:56:30,480
Okay,
so next point is about the return types.

1659
01:56:31,200 --> 01:56:35,120
If a method has wide return
type in the parent class,

1660
01:56:35,400 --> 01:56:40,680
can I change it to something else?

1661
01:56:40,680 --> 01:56:44,880
Then I am overwriting it.

1662
01:56:44,880 --> 01:56:49,600
No, as soon as I try to change it

1663
01:57:00,000 --> 01:57:01,920
I will get this added

1664
01:57:01,920 --> 01:57:06,160
method clashes with the method
and in attempting

1665
01:57:06,160 --> 01:57:09,480
to use in compatible return types. Okay.

1666
01:57:09,840 --> 01:57:13,400
It must to be same as the return type

1667
01:57:13,400 --> 01:57:17,400
inside the parent class.

1668
01:57:17,400 --> 01:57:20,280
Can we overload, overload and override

1669
01:57:22,680 --> 01:57:24,320
in the child classes?

1670
01:57:24,320 --> 01:57:28,480
So you guys tell me, can we do that?

1671
01:57:28,480 --> 01:57:29,200
What do I think?

1672
01:57:29,200 --> 01:57:39,240
Can we do that?

1673
01:57:39,240 --> 01:57:49,040
No, we cannot do that.

1674
01:57:49,040 --> 01:57:50,720
Well, what is this, guys?

1675
01:57:50,720 --> 01:57:56,520
What am I doing in here?

1676
01:57:56,520 --> 01:57:57,760
It's overloading.

1677
01:57:57,760 --> 01:57:59,800
And what I am doing in here and in here

1678
01:58:01,760 --> 01:58:02,840
is overriding.

1679
01:58:02,840 --> 01:58:05,320
There is no harm in overwriting
and overloading.

1680
01:58:05,320 --> 01:58:06,120
Right?

1681
01:58:06,800 --> 01:58:08,480
So we can do it.

1682
01:58:08,480 --> 01:58:09,920
We can do it

1683
01:58:10,640 --> 01:58:11,880
as soon. As far.

1684
01:58:11,880 --> 01:58:13,960
As far as if it follows the rules.

1685
01:58:14,160 --> 01:58:25,200
I can do everything.

1686
01:58:25,200 --> 01:58:29,280
Because again, Java,
I will be looking at these parameters.

1687
01:58:29,880 --> 01:58:34,240
Then Java will be looking
at these parameters if they are different.

1688
01:58:35,040 --> 01:58:39,920
Yeah, I can easily identify which method
we are trying to call in there.

1689
01:58:39,960 --> 01:58:40,800
Saved job.

1690
01:58:40,800 --> 01:58:42,840
I can call that method.

1691
01:58:42,840 --> 01:58:47,760
So the whole point of overloading
is about the this

1692
01:58:48,320 --> 01:58:51,000
the statement that gained Java.

1693
01:58:51,640 --> 01:58:54,200
I identify a method

1694
01:58:54,560 --> 01:58:59,000
from multiple meters
in the method that you are trying to call.

1695
01:58:59,000 --> 01:59:02,280
Can java identify that method If you can,

1696
01:59:03,040 --> 01:59:06,720
then you can overload.

1697
01:59:06,720 --> 01:59:07,920
But first you override.

1698
01:59:07,920 --> 01:59:11,480
Then overload is is the opposite possible?

1699
01:59:12,480 --> 01:59:12,840
We are

1700
01:59:12,840 --> 01:59:16,200
doing both of the things at the same time.

1701
01:59:16,200 --> 01:59:21,320
And what?

1702
01:59:21,320 --> 01:59:27,320
So in here I am doing it in the same class
passing who?

1703
01:59:27,600 --> 01:59:32,960
I have two meters with same names,
but but with different parameters.

1704
01:59:33,120 --> 01:59:35,160
That is called overall overloading.

1705
01:59:35,160 --> 01:59:39,200
Right now
you have same method name in parent

1706
01:59:39,200 --> 01:59:43,200
and child class with same parameter
sandwich ID and type.

1707
01:59:43,680 --> 01:59:50,880
That is called overwriting.

1708
01:59:50,880 --> 01:59:59,680
So I am fulfilling
more to the requirements.

1709
01:59:59,680 --> 02:00:03,120
Yes, they are two different things,
but by chance

1710
02:00:03,120 --> 02:00:11,360
they are happening inside the same child
class.

1711
02:00:11,360 --> 02:00:12,160
Scroll up.

1712
02:00:12,160 --> 02:00:14,400
There is nothing to scroll up. Daniel.

1713
02:00:14,760 --> 02:00:17,480
I am at the very top of this class.

1714
02:00:17,480 --> 02:00:20,640
We can use the name down.

1715
02:00:20,640 --> 02:00:21,560
Okay.

1716
02:00:22,320 --> 02:00:23,320
You are.

1717
02:00:24,040 --> 02:00:25,360
You mean this?

1718
02:00:26,000 --> 02:00:27,600
I hope you guys can read it.

1719
02:00:27,600 --> 02:00:31,200
We can use the name and method
by declaring another class is overriding.

1720
02:00:31,200 --> 02:00:31,480
Right?

1721
02:00:32,720 --> 02:00:34,360
Same name,

1722
02:00:34,480 --> 02:00:36,960
same parameters, same return

1723
02:00:36,960 --> 02:00:40,840
types, same non access modifiers.

1724
02:00:41,040 --> 02:00:44,920
Then we are overriding impact

1725
02:00:46,720 --> 02:00:50,640
and we should also take care of the

1726
02:00:52,200 --> 02:01:03,880
access modifiers.

1727
02:01:03,880 --> 02:01:09,480
Are there other questions arise?

1728
02:01:09,480 --> 02:01:11,280
Actually, this is not important. Don't.

1729
02:01:11,280 --> 02:01:15,360
Don't get confused about overloading
at all the writing in the same class.

1730
02:01:16,520 --> 02:01:20,160
I will tell you about this
at a later point of time.

1731
02:01:20,160 --> 02:01:22,360
Right now let's focus on the overriding.

1732
02:01:23,480 --> 02:01:28,560
So let me remotest.

1733
02:01:28,560 --> 02:01:32,960
Okay, so the return type,
they cannot be changed.

1734
02:01:33,920 --> 02:01:37,000
The method names.

1735
02:01:37,000 --> 02:01:41,240
If I changed the method name
and my still overriding

1736
02:01:41,240 --> 02:01:45,800
case.

1737
02:01:45,800 --> 02:01:52,840
No, I am not overwriting because I am not
having this same method names.

1738
02:01:52,840 --> 02:01:54,760
Now Okay.

1739
02:01:54,760 --> 02:01:58,760
Can I change the parameter
types in overwriting?

1740
02:01:58,760 --> 02:01:59,240
Can I.

1741
02:01:59,240 --> 02:02:09,680
Can I make it a string?

1742
02:02:09,680 --> 02:02:09,960
Yeah,

1743
02:02:11,680 --> 02:02:13,880
if I make it string.

1744
02:02:14,080 --> 02:02:17,880
And if I put that

1745
02:02:21,600 --> 02:02:23,160
override annotation again,

1746
02:02:23,160 --> 02:02:26,160
you guys will get an error.

1747
02:02:26,480 --> 02:02:28,840
Yes, but it becomes

1748
02:02:28,840 --> 02:02:30,000
right.

1749
02:02:30,200 --> 02:02:32,560
Yes. Then is it will become overloading.

1750
02:02:33,480 --> 02:02:35,960
Yes, it will become overloading

1751
02:02:35,960 --> 02:02:40,080
because when we inherit something
this method will be kind of copied in here

1752
02:02:40,080 --> 02:02:43,600
and then you will be having same
name method but with different parameters.

1753
02:02:44,040 --> 02:02:48,320
So please be.

1754
02:02:48,320 --> 02:02:50,000
Please don't confuse the other one.

1755
02:02:50,000 --> 02:02:52,800
So don't understand this point.

1756
02:02:52,800 --> 02:02:56,760
This.

1757
02:02:56,760 --> 02:03:00,600
So if I put the override
annotation in here.

1758
02:03:01,520 --> 02:03:04,520
So the it says method does not override

1759
02:03:04,560 --> 02:03:07,600
method from a superclass.

1760
02:03:07,600 --> 02:03:10,440
So which means I am not overriding.

1761
02:03:10,440 --> 02:03:12,960
I might be overloading,
I might be creating

1762
02:03:12,960 --> 02:03:16,800
a new method, I might doing anything else,
but not overriding.

1763
02:03:16,800 --> 02:03:20,360
If if I change the parameters,

1764
02:03:21,240 --> 02:03:34,200
if I change the parameters, the value

1765
02:03:34,480 --> 02:03:37,960
in the standard overriding
must be same on methods and parameters.

1766
02:03:37,960 --> 02:03:40,440
Yes, you are right.

1767
02:03:40,440 --> 02:03:42,120
Rules for overriding.

1768
02:03:42,120 --> 02:03:44,520
They are super super superscript.

1769
02:03:44,520 --> 02:03:47,120
Only thing that you guys can change

1770
02:03:47,120 --> 02:03:50,360
is the return type for the overloading.

1771
02:03:50,960 --> 02:03:55,320
You can have many different methods if
you change the parameter in simple time.

1772
02:03:55,840 --> 02:03:56,440
If you ask

1773
02:04:04,720 --> 02:04:07,280
why I have error

1774
02:04:07,280 --> 02:04:09,680
because now

1775
02:04:09,960 --> 02:04:17,000
you love errors, now

1776
02:04:17,160 --> 02:04:20,160
you are missing this equal
to sign the sequel to sign

1777
02:04:22,960 --> 02:04:27,640
child C is equal to new child.

1778
02:04:27,640 --> 02:04:31,440
So with override
we effectively have the option

1779
02:04:31,440 --> 02:04:35,240
of going with the parent method
of stay with child method if we want.

1780
02:04:35,280 --> 02:04:38,240
Yes, and you are right signature should be

1781
02:04:38,240 --> 02:04:41,800
same for overriding signature
should be different in overloading.

1782
02:04:42,200 --> 02:04:47,800
You kind of say that,
but it's not correct.

1783
02:04:47,800 --> 02:04:51,480
It's still error in start taking the main
method film in the screenshot

1784
02:04:51,480 --> 02:04:54,440
again or post in the sports channel.

1785
02:04:54,800 --> 02:04:59,320
I will help you out.

1786
02:04:59,320 --> 02:05:02,320
Okay, so

1787
02:05:04,640 --> 02:05:07,960
this is about

1788
02:05:07,960 --> 02:05:12,000
overwriting.

1789
02:05:12,000 --> 02:05:14,400
Let me just put none back.

1790
02:05:15,080 --> 02:05:17,400
If I make it private,

1791
02:05:18,040 --> 02:05:20,440
I am again not overwriting it.

1792
02:05:20,440 --> 02:05:21,000
Okay.

1793
02:05:23,280 --> 02:05:24,360
Now let's try.

1794
02:05:24,360 --> 02:05:28,680
Let's do more examples.

1795
02:05:28,680 --> 02:05:29,240
Yeah, sure.

1796
02:05:29,240 --> 02:05:32,600
Why not?

1797
02:05:32,600 --> 02:05:35,480
Let's no, let's do the homework first.

1798
02:05:35,880 --> 02:05:39,000
Then we will do 2 to 3 more examples

1799
02:05:40,080 --> 02:05:42,400
and in those examples I will

1800
02:05:42,400 --> 02:05:47,200
also try to teach you
about the polymorphism.

1801
02:05:47,200 --> 02:05:59,640
Can I move to the homework now?

1802
02:05:59,640 --> 02:06:02,240
How is the effect when we do this?

1803
02:06:03,680 --> 02:06:07,800
So in this case,
the method we are overloading

1804
02:06:07,800 --> 02:06:12,160
and overwriting at the same time?

1805
02:06:12,160 --> 02:06:38,360
If we have a method in the parent class
with the same name, no,

1806
02:06:39,880 --> 02:06:44,240
it does not matter which one comes first.

1807
02:06:44,240 --> 02:06:48,120
Yes, we can do our funding
because you see the parameters.

1808
02:06:48,200 --> 02:06:49,920
They are different.

1809
02:06:49,920 --> 02:06:53,680
If you are passing an integer you are
referring to the overridden method.

1810
02:06:53,680 --> 02:06:56,280
If you are passing a string,
you are referring to the over

1811
02:06:57,120 --> 02:07:00,120
the overloaded method.

1812
02:07:02,200 --> 02:07:03,320
I have a quick question.

1813
02:07:03,320 --> 02:07:07,120
If we want to override to matter from
parent class, can we have more than one

1814
02:07:07,120 --> 02:07:08,200
overriding child?

1815
02:07:08,200 --> 02:07:10,520
Yes, we can have thousand overrides.

1816
02:07:10,520 --> 02:07:25,320
No issues with that.

1817
02:07:27,640 --> 02:07:30,720
All right, guys, let's do the homework.

1818
02:07:30,720 --> 02:07:33,080
So can you guys send me

1819
02:07:33,080 --> 02:07:42,840
the homeworks?

1820
02:07:42,840 --> 02:07:45,400
The question,
if we are making multiple classes,

1821
02:07:45,400 --> 02:07:48,360
we need to come out of final, final

1822
02:07:49,480 --> 02:07:51,600
family bracket.

1823
02:07:51,600 --> 02:07:55,640
And if we are creating methods,
then keep inside the class.

1824
02:07:55,640 --> 02:07:58,400
Yes, you are correct.

1825
02:07:58,640 --> 02:08:04,120
Yes, you are right.

1826
02:08:04,120 --> 02:08:07,720
Create a class degree
having a method that directs.

1827
02:08:08,320 --> 02:08:13,440
So let's create a degree class.

1828
02:08:13,440 --> 02:08:33,160
Yeah.

1829
02:08:33,160 --> 02:08:35,400
So create a class degree.

1830
02:08:35,640 --> 02:08:38,520
Having him at third grade directs.

1831
02:08:38,520 --> 02:08:41,120
So let me start this Read X

1832
02:08:42,600 --> 02:08:48,600
Reward directs.

1833
02:08:48,600 --> 02:08:53,000
To get a degree,
you need high school diploma,

1834
02:08:54,040 --> 02:09:00,200
right?

1835
02:09:00,200 --> 02:09:01,560
And then

1836
02:09:01,920 --> 02:09:04,680
we have to create some classes

1837
02:09:09,720 --> 02:09:11,640
inside

1838
02:09:12,720 --> 02:09:13,560
in here. Okay.

1839
02:09:13,560 --> 02:09:16,800
There should be be child
classes of degrees.

1840
02:09:16,800 --> 02:09:23,760
So for example,
for the bachelors, we can write class

1841
02:09:27,200 --> 02:09:28,560
bachelors

1842
02:09:30,520 --> 02:09:32,600
and in here we can maybe

1843
02:09:32,600 --> 02:09:35,840
put there something like this

1844
02:09:36,720 --> 02:09:43,080
to get a degree, you need

1845
02:09:44,600 --> 02:09:49,320
to pass the high school right?

1846
02:09:49,320 --> 02:09:51,920
To get a degree, you need a maybe

1847
02:09:53,160 --> 02:09:55,680
high school

1848
02:09:57,360 --> 02:09:58,720
diploma or something that.

1849
02:09:58,720 --> 02:09:59,160
Okay.

1850
02:10:00,400 --> 02:10:02,160
And then inside the child

1851
02:10:02,160 --> 02:10:06,520
classes,

1852
02:10:06,520 --> 02:10:11,640
there should be a bachelors class.

1853
02:10:11,640 --> 02:10:16,160
So class degree has two classes,
namely bachelor's and master's

1854
02:10:16,800 --> 02:10:19,880
in masters class or worldwide math.

1855
02:10:19,880 --> 02:10:21,800
Third, get it X.

1856
02:10:21,800 --> 02:10:26,560
Okay, so in better quality method by
creating an object of each three classes.

1857
02:10:26,560 --> 02:10:29,880
So I don't need to override it

1858
02:10:29,880 --> 02:10:33,000
inside The Bachelor.

1859
02:10:33,000 --> 02:10:37,560
So I put experience
and then I put degree nursing.

1860
02:10:38,400 --> 02:10:40,800
But for the Masters

1861
02:10:40,800 --> 02:10:51,960
class, I need to override.

1862
02:10:52,320 --> 02:11:14,760
I'm going to override the method,
get direct state,

1863
02:11:14,760 --> 02:11:18,160
same method, but different message.

1864
02:11:18,360 --> 02:11:22,080
Okay, what

1865
02:11:22,080 --> 02:11:25,120
do, what do we need
if we want to have a masters degree?

1866
02:11:25,120 --> 02:11:31,320
Do we need a bachelor's degree first?

1867
02:11:31,320 --> 02:11:33,520
Right. To get a

1868
02:11:37,840 --> 02:11:42,240
masters degree? We

1869
02:11:44,440 --> 02:11:46,880
you need to have a

1870
02:11:48,200 --> 02:11:50,160
bachelors degree

1871
02:11:55,560 --> 02:11:57,200
and then

1872
02:11:57,560 --> 02:12:01,440
we can create a test for class

1873
02:12:02,760 --> 02:12:05,160
in which we have to create the objects

1874
02:12:05,160 --> 02:12:10,280
of all these three classes,
and then we have to call them.

1875
02:12:10,280 --> 02:12:12,720
So I say

1876
02:12:13,000 --> 02:12:15,120
the degree

1877
02:12:15,120 --> 02:12:19,680
degree is equal to zero in degree

1878
02:12:21,320 --> 02:12:22,560
is their degree.

1879
02:12:22,560 --> 02:12:31,080
Oops, I am missing the main

1880
02:12:31,080 --> 02:12:43,080
method, third degree

1881
02:12:43,160 --> 02:12:46,000
or get prefix.

1882
02:12:46,360 --> 02:12:51,120
Then I create the object of bachelors
class

1883
02:12:51,360 --> 02:12:55,320
left or right.

1884
02:12:55,320 --> 02:12:56,080
All right.

1885
02:12:56,080 --> 02:12:59,280
If they start the pretext

1886
02:13:00,200 --> 02:13:02,400
they are nice, they are masters

1887
02:13:03,880 --> 02:13:06,320
and masters exclude you

1888
02:13:08,160 --> 02:13:09,800
Master

1889
02:13:10,360 --> 02:13:11,280
first.

1890
02:13:11,280 --> 02:13:13,120
So that data.

1891
02:13:13,120 --> 02:13:17,040
Let me define the masters first

1892
02:13:19,520 --> 02:13:20,280
like this.

1893
02:13:20,280 --> 02:13:23,000
I am surprised I do in the right

1894
02:13:23,000 --> 02:13:29,120
way. Yes.

1895
02:13:29,840 --> 02:13:31,240
So me too.

1896
02:13:31,240 --> 02:13:35,920
One of the ones I did correctly.

1897
02:13:35,920 --> 02:13:36,600
Smart output.

1898
02:13:36,600 --> 02:13:39,800
I really got guys.

1899
02:13:39,800 --> 02:13:42,840
Is this the first task
that you guys are doing and doing

1900
02:13:43,640 --> 02:13:54,920
properly?

1901
02:13:54,920 --> 02:13:55,120
Well,

1902
02:13:56,640 --> 02:13:58,040
one of them.

1903
02:13:58,240 --> 02:14:01,600
So to get a degree
you need a high school diploma.

1904
02:14:01,600 --> 02:14:05,000
To get a masters degree,
you need to her bachelor's degree.

1905
02:14:05,000 --> 02:14:09,560
To get a degree,
you'll need a high school diploma.

1906
02:14:09,560 --> 02:14:13,880
I always doubt myself,
even after Boston give aptitudes.

1907
02:14:14,560 --> 02:14:15,120
Yeah.

1908
02:14:15,640 --> 02:14:20,320
So the previous was hallowed.

1909
02:14:23,640 --> 02:14:24,680
Are there any questions

1910
02:14:24,680 --> 02:14:35,240
about this?

1911
02:14:35,240 --> 02:14:39,040
You guys were very happy, right
when you wrote that Hello World

1912
02:14:39,040 --> 02:14:41,200
and you saw your text on the console.

1913
02:14:42,600 --> 02:14:45,640
If who knew

1914
02:14:45,760 --> 02:14:58,080
what is coming right.

1915
02:14:58,080 --> 02:15:00,160
There are a lot of questions,
but it will take

1916
02:15:02,160 --> 02:15:02,320
that.

1917
02:15:02,320 --> 02:15:04,400
We need to put that at overwriting.

1918
02:15:04,400 --> 02:15:06,440
No, it's an optional thing.

1919
02:15:06,720 --> 02:15:09,720
If you put it, compiler will help you

1920
02:15:09,920 --> 02:15:12,520
if you are making a mistake,
if you don't put it,

1921
02:15:13,280 --> 02:15:16,440
compiler will not warn you
or will not give you an error.

1922
02:15:16,440 --> 02:15:17,640
If you are making a mistake

1923
02:15:27,760 --> 02:15:28,440
to do

1924
02:15:28,440 --> 02:15:37,160
it, move to the next example.

1925
02:15:37,160 --> 02:15:55,440
Okay.

1926
02:15:55,440 --> 02:16:18,480
Here to class that ID card.

1927
02:16:18,480 --> 02:16:20,440
Oh my God.

1928
02:16:20,440 --> 02:16:24,160
You guys didn't
remind me about those girls.

1929
02:16:25,200 --> 02:16:27,320
Oh, my book.

1930
02:16:27,320 --> 02:16:30,880
Oh, sorry about that.

1931
02:16:30,880 --> 02:16:31,720
I asked.

1932
02:16:31,720 --> 02:16:36,360
I told you to remind me.

1933
02:16:36,360 --> 02:16:36,920
I told you.

1934
02:16:36,920 --> 02:16:38,560
Forget about

1935
02:16:47,200 --> 02:16:48,760
verticals.

1936
02:16:49,280 --> 02:16:50,960
What did I miss?

1937
02:16:50,960 --> 02:16:54,320
So many other parts.

1938
02:16:54,320 --> 02:16:58,360
We were busy with wedding party girls

1939
02:16:58,720 --> 02:17:08,400
from previous batch.

1940
02:17:08,400 --> 02:17:09,560
It's like.

1941
02:17:09,560 --> 02:17:12,960
Like Silva is asking me, like,

1942
02:17:13,000 --> 02:17:14,480
I like.

1943
02:17:14,480 --> 02:17:20,800
Let's not.

1944
02:17:20,800 --> 02:17:23,760
But we are the girls, right?

1945
02:17:23,960 --> 02:17:28,240
Like I only girls
and I do kind of business with gold.

1946
02:17:28,240 --> 02:17:40,000
And silver is my client that we
we are because he's

1947
02:17:45,440 --> 02:17:48,560
so cool with

1948
02:17:50,360 --> 02:17:52,760
the creative class credit card

1949
02:17:55,880 --> 02:17:59,280
Create a class credit card and define

1950
02:17:59,880 --> 02:18:03,360
variable balance and interest.

1951
02:18:03,600 --> 02:18:07,480
Okay, so double

1952
02:18:11,880 --> 02:18:14,280
balance and

1953
02:18:16,400 --> 02:18:17,480
double

1954
02:18:17,800 --> 02:18:26,040
interest.

1955
02:18:26,040 --> 02:18:30,920
Create an instance
method that will calculate

1956
02:18:31,200 --> 02:18:34,920
interest based on the given balance.

1957
02:18:35,200 --> 02:18:35,600
Yeah.

1958
02:18:35,880 --> 02:18:42,080
So any simple method, right?

1959
02:18:42,080 --> 02:18:45,120
So avoid

1960
02:18:49,040 --> 02:18:50,720
so avoid

1961
02:18:52,640 --> 02:18:55,360
calculate interest

1962
02:19:06,000 --> 02:19:08,800
and then maybe I can calculate
the interest.

1963
02:19:08,800 --> 02:19:13,640
Like interest is equal to balance

1964
02:19:14,280 --> 02:19:17,320
multiplied by 0.14.

1965
02:19:18,000 --> 02:19:19,640
Yeah.

1966
02:19:19,640 --> 02:19:21,680
And then I display

1967
02:19:22,920 --> 02:19:25,320
the interest

1968
02:19:29,480 --> 02:19:34,760
and the finance.

1969
02:19:35,160 --> 02:19:39,680
So in this example, guys,
I am having some instance fears.

1970
02:19:40,840 --> 02:19:45,400
So what I shoot
if I want to follow the best practices,

1971
02:19:45,600 --> 02:19:49,680
what should I write inside this class
other than these fears

1972
02:19:49,680 --> 02:20:02,040
and methods?

1973
02:20:02,040 --> 02:20:05,120
Yes, this is good,

1974
02:20:05,120 --> 02:20:07,160
but this is required.

1975
02:20:07,160 --> 02:20:09,360
And when I have a conflict

1976
02:20:10,320 --> 02:20:14,720
with local variables
and instance variables, is there

1977
02:20:14,960 --> 02:20:20,320
is there any conflict?

1978
02:20:20,320 --> 02:20:22,440
So what I am missing in here then

1979
02:20:24,360 --> 02:20:26,080
I should only slightly experience

1980
02:20:30,600 --> 02:20:31,240
counts.

1981
02:20:31,320 --> 02:20:33,920
Right? Right.

1982
02:20:34,320 --> 02:20:36,520
So I should have a constructor.

1983
02:20:36,560 --> 02:20:39,600
So whenever you instance fears

1984
02:20:40,520 --> 02:20:46,400
always always have the constructors
to initialize those fears.

1985
02:20:46,600 --> 02:20:53,760
You can.

1986
02:20:53,760 --> 02:20:57,000
Now I need the this keyword because now

1987
02:20:57,320 --> 02:20:59,760
I have a local variable balance

1988
02:21:00,480 --> 02:21:03,320
and an instance variable.

1989
02:21:03,320 --> 02:21:05,360
So now I need this.

1990
02:21:06,000 --> 02:21:09,480
The balance is equal to balance.

1991
02:21:09,800 --> 02:21:11,880
Yeah. Now

1992
02:21:11,880 --> 02:21:13,920
does it make sense

1993
02:21:18,280 --> 02:21:20,840
I had this, I did this.

1994
02:21:21,080 --> 02:21:23,520
Is it wrong

1995
02:21:24,240 --> 02:21:27,720
class credit card expense task two

1996
02:21:29,520 --> 02:21:33,720
or calculate
well why you are extending from task to.

1997
02:21:33,720 --> 02:21:36,680
I mean technically
it will not make any difference

1998
02:21:41,840 --> 02:21:43,960
if you initialized them.

1999
02:21:43,960 --> 02:21:48,640
True objects would not be the interest
method.

2000
02:21:48,640 --> 02:21:53,360
Also use the instance variable to
yes it will, it will use.

2001
02:21:53,520 --> 02:21:55,720
And that's what I want.

2002
02:21:55,720 --> 02:21:59,120
I did that too
and commented that out and left them.

2003
02:21:59,120 --> 02:22:02,400
There is just a signed instance
and balance

2004
02:22:02,400 --> 02:22:05,600
in the payment.

2005
02:22:05,600 --> 02:22:20,600
If you guys can do it
in one class as well.

2006
02:22:20,600 --> 02:22:23,760
So now this class is ending in here.

2007
02:22:24,640 --> 02:22:28,080
So I put in ward matter to ward,

2008
02:22:28,080 --> 02:22:31,200
calculate double balance,
double interest on that.

2009
02:22:31,200 --> 02:22:32,600
That is also correct.

2010
02:22:32,600 --> 02:22:33,480
That is also correct.

2011
02:22:33,480 --> 02:22:36,480
If you want both of the fields in here
not able to correct,

2012
02:22:37,160 --> 02:22:40,440
create a class undefined
variable balance and interest.

2013
02:22:40,840 --> 02:22:41,320
Okay.

2014
02:22:41,560 --> 02:22:45,880
So when I say define
a balance and interests this what I mean?

2015
02:22:46,400 --> 02:22:46,600
Yeah,

2016
02:22:47,720 --> 02:22:48,760
because this is where we

2017
02:22:48,760 --> 02:22:51,760
define the variables inside a class.

2018
02:22:51,760 --> 02:22:56,800
Before we made a construction, there was
no at our SO we have to put constructor

2019
02:22:57,200 --> 02:23:01,440
because if you don't put a constructor
then you have to come up

2020
02:23:01,440 --> 02:23:05,960
with a different method
to initialize the fields.

2021
02:23:05,960 --> 02:23:09,160
So what we want to do the standard way
to initialize the field

2022
02:23:11,520 --> 02:23:13,880
instead of having a separate method,

2023
02:23:14,280 --> 02:23:17,600
or maybe assigning values
by something else.

2024
02:23:18,200 --> 02:23:21,160
So the double guys have created
something special

2025
02:23:21,560 --> 02:23:24,560
to initialize the field,
so why not use that?

2026
02:23:25,080 --> 02:23:29,080
So besides being easier, does it matter
if we initialize them through constructor,

2027
02:23:29,080 --> 02:23:31,080
through variable?

2028
02:23:31,080 --> 02:23:32,640
Variable don't balance. Yes.

2029
02:23:32,640 --> 02:23:33,840
So Simon,

2030
02:23:33,840 --> 02:23:35,280
when you guys will be writing

2031
02:23:35,280 --> 02:23:39,440
real practical code,
remember you will not be having fears

2032
02:23:41,160 --> 02:23:45,520
which are public or default or protected.

2033
02:23:46,080 --> 02:23:51,080
99% of the time are the instance fields.

2034
02:23:51,080 --> 02:23:55,520
They will be private
so that no one can access those fears

2035
02:23:56,000 --> 02:24:01,000
without going through your rules,
the rules that you will be defining.

2036
02:24:01,000 --> 02:24:05,560
Because if someone can crop
to your data easily, so your classes, they

2037
02:24:05,840 --> 02:24:08,680
they have to pass the index
up to the state park

2038
02:24:08,720 --> 02:24:11,840
and the method SPARC methods
they work on state.

2039
02:24:11,840 --> 02:24:16,000
If someone has corrupted your stairs,
your methods, they will not work properly,

2040
02:24:17,240 --> 02:24:18,920
but they are not private now.

2041
02:24:18,920 --> 02:24:22,440
So it would still solve the homework
without constructor. Yes.

2042
02:24:22,680 --> 02:24:24,640
Yes you are right.

2043
02:24:24,680 --> 02:24:27,640
Yes you are right.

2044
02:24:27,640 --> 02:24:30,480
Right now you guys can solve it
without the constructor.

2045
02:24:31,600 --> 02:24:35,480
Go to initialize balance
an interest in the calculate interest.

2046
02:24:36,720 --> 02:24:39,760
You taking the parameters from outside.

2047
02:24:40,320 --> 02:24:43,640
It is taking the parameters from outside
and then assigning the values.

2048
02:24:44,000 --> 02:24:47,240
Yes, you guys can also do that. Yes.

2049
02:24:47,240 --> 02:24:48,120
Yes you can.

2050
02:24:48,120 --> 02:24:50,920
You guys can also do that.

2051
02:24:51,440 --> 02:24:52,520
So let's

2052
02:24:53,200 --> 02:24:57,680
create a class credit card
and define variable and interest.

2053
02:24:58,320 --> 02:25:00,920
Create an instance of matter so

2054
02:25:02,400 --> 02:25:04,280
that will calculate the interest

2055
02:25:04,280 --> 02:25:07,320
based on the given balance.

2056
02:25:07,320 --> 02:25:11,240
Then create two subclasses, the Visa

2057
02:25:11,240 --> 02:25:16,600
and X in its class override method.

2058
02:25:16,600 --> 02:25:19,480
Calculate interest,

2059
02:25:19,480 --> 02:25:24,240
call them at third by creating an object
of each of the three classes. Yes.

2060
02:25:24,320 --> 02:25:28,000
So I write,

2061
02:25:28,000 --> 02:25:30,600
I write X class.

2062
02:25:31,160 --> 02:25:34,920
So class X

2063
02:25:38,840 --> 02:25:40,680
I say expand.

2064
02:25:40,680 --> 02:25:45,320
I say credit card.

2065
02:25:45,320 --> 02:25:57,760
So y I get an error right?

2066
02:25:57,760 --> 02:26:01,600
So let me see
if says there is a non default

2067
02:26:01,600 --> 02:26:05,840
constructor of a label in credit class.

2068
02:26:07,320 --> 02:26:10,080
So what are you saying right now?

2069
02:26:10,080 --> 02:26:12,160
It's saying there Tasker.

2070
02:26:12,160 --> 02:26:14,520
There is a constructor

2071
02:26:14,520 --> 02:26:18,240
independent class
which is initializing a field,

2072
02:26:19,200 --> 02:26:21,480
but in the Jala class

2073
02:26:21,480 --> 02:26:25,160
you are not calling that constructor.

2074
02:26:25,160 --> 02:26:27,920
How, how the fields will be initialized.

2075
02:26:27,920 --> 02:26:30,920
Because when you inherit from a class,

2076
02:26:31,280 --> 02:26:36,000
you are technically inheriting fears
and matters and everything, right?

2077
02:26:36,280 --> 02:26:39,480
So you must also initialize

2078
02:26:39,480 --> 02:26:43,320
those fears by calling the constructor
from the parent.

2079
02:26:43,760 --> 02:26:46,760
And if we want to call the constructor
from the parent,

2080
02:26:47,440 --> 02:26:50,040
should I also create the create
a constructor

2081
02:26:50,040 --> 02:26:55,200
in the child?

2082
02:26:55,200 --> 02:27:00,960
Or I can call the constructed
inside method?

2083
02:27:00,960 --> 02:27:05,160
Then how can I call the constructor
if I don't have?

2084
02:27:05,160 --> 02:27:07,240
So you guys want me to do this like this?

2085
02:27:07,760 --> 02:27:10,480
Super low

2086
02:27:10,760 --> 02:27:12,440
credit card

2087
02:27:12,600 --> 02:27:13,160
like this?

2088
02:27:14,720 --> 02:27:15,360
I get an

2089
02:27:15,360 --> 02:27:19,360
added, I get an error.

2090
02:27:19,720 --> 02:27:22,520
That means I need a constructor

2091
02:27:23,200 --> 02:27:25,280
in the X as well.

2092
02:27:26,440 --> 02:27:31,000
And this should also take a variable

2093
02:27:34,440 --> 02:27:38,080
balance and that's how oops,

2094
02:27:39,240 --> 02:27:43,640
I will pass. Oops

2095
02:27:44,880 --> 02:27:48,240
this balance to the

2096
02:27:48,360 --> 02:27:50,040
parent books. Okay.

2097
02:27:50,040 --> 02:27:53,040
So this means that if

2098
02:27:53,800 --> 02:27:56,520
we have a constructor

2099
02:27:57,640 --> 02:28:00,040
inside of the parent class,

2100
02:28:00,880 --> 02:28:05,560
it's a must to have a matching

2101
02:28:05,560 --> 02:28:09,440
constructor in the child classes as well.

2102
02:28:10,080 --> 02:28:12,400
Okay.

2103
02:28:12,400 --> 02:28:16,000
So that we can initialize the fields
we can pass through

2104
02:28:16,000 --> 02:28:19,760
that are two different classes as that

2105
02:28:19,800 --> 02:28:21,720
about the middle class school

2106
02:28:21,720 --> 02:28:22,960
that has a

2107
02:28:26,160 --> 02:28:27,560
change extra reason,

2108
02:28:27,560 --> 02:28:30,960
but why there is no error
from public to default.

2109
02:28:31,680 --> 02:28:33,800
Public to default.

2110
02:28:33,800 --> 02:28:36,240
We is public and we is the default. Now.

2111
02:28:37,480 --> 02:28:39,600
You mean the public with credit card class

2112
02:28:39,600 --> 02:28:42,720
and default with with this x class

2113
02:28:44,280 --> 02:28:46,600
and there is no, no, there is no rules.

2114
02:28:46,800 --> 02:28:49,280
There are no rules
that were discussed about this.

2115
02:28:49,880 --> 02:28:52,040
It is no restriction on classes.

2116
02:28:52,040 --> 02:28:57,520
The restriction
the restriction is on methods.

2117
02:28:57,520 --> 02:28:59,320
There is no restriction on the class.

2118
02:28:59,320 --> 02:29:01,520
A class can have thousand other methods.

2119
02:29:01,520 --> 02:29:02,240
Right.

2120
02:29:02,600 --> 02:29:05,840
Why would someone want to restrict
the whole class?

2121
02:29:06,080 --> 02:29:09,480
If you all only overwriting one
single method,

2122
02:29:09,640 --> 02:29:13,880
there can be a thousand other fields,
2000 constructors, thousand meters.

2123
02:29:13,880 --> 02:29:16,440
Why restrict the complete class?

2124
02:29:16,440 --> 02:29:21,480
So we only restrict that only
a single method that we are overriding.

2125
02:29:21,480 --> 02:29:25,280
We don't restrict the complete class

2126
02:29:27,400 --> 02:29:38,240
here.

2127
02:29:38,240 --> 02:29:39,800
And then

2128
02:29:40,400 --> 02:29:44,760
in a class we have to override
the calculate instance as well.

2129
02:29:44,760 --> 02:29:48,960
So how can I do that?

2130
02:29:48,960 --> 02:29:52,680
I if I type wide, I see this addition

2131
02:29:53,520 --> 02:29:55,960
from the intermediate I can click on.

2132
02:29:55,960 --> 02:29:59,720
Okay and I get the method

2133
02:29:59,720 --> 02:30:03,800
override.

2134
02:30:03,800 --> 02:30:05,600
So now I can see

2135
02:30:07,360 --> 02:30:09,880
maybe this time

2136
02:30:11,880 --> 02:30:15,600
interest is equal to balance

2137
02:30:17,160 --> 02:30:21,160
multiplied by 0.05.

2138
02:30:21,160 --> 02:30:21,560
Okay.

2139
02:30:23,200 --> 02:30:25,760
And then bring down these interests.

2140
02:30:26,160 --> 02:30:31,280
So guys, can you help me?

2141
02:30:31,280 --> 02:30:33,240
I don't have this interest field.

2142
02:30:33,240 --> 02:30:36,440
I don't have this balance word
in the next class from where they are

2143
02:30:36,440 --> 02:30:40,200
coming, how

2144
02:30:40,240 --> 02:30:49,120
how I'm able to access them.

2145
02:30:49,120 --> 02:30:51,600
They are coming from here.

2146
02:30:51,880 --> 02:30:56,640
Yeah, they are coming from here
because we extended from there.

2147
02:30:56,640 --> 02:30:57,520
Plus.

2148
02:30:57,520 --> 02:31:02,960
Yeah.

2149
02:31:02,960 --> 02:31:06,080
And then let's cleared the

2150
02:31:06,360 --> 02:31:07,400
visa class.

2151
02:31:07,400 --> 02:31:10,600
It also expands from the

2152
02:31:10,600 --> 02:31:12,520
credit card

2153
02:31:13,120 --> 02:31:14,640
and why I get an error

2154
02:31:14,640 --> 02:31:20,360
guys on the middle class.

2155
02:31:20,360 --> 02:31:22,280
Again, the constructor.

2156
02:31:22,280 --> 02:31:25,400
I must create a constructor

2157
02:31:26,480 --> 02:31:28,640
which should imagine this super class.

2158
02:31:28,640 --> 02:31:33,720
I must take the balance from here

2159
02:31:33,720 --> 02:31:36,920
and I must pass it to the super.

2160
02:31:37,400 --> 02:31:37,680
Yeah.

2161
02:31:37,680 --> 02:31:42,040
Bears
how the balance field will be initialized

2162
02:31:42,680 --> 02:31:46,400
when we will be using it
for the middle class.

2163
02:31:46,400 --> 02:31:50,520
So let me let me remove
this these requirements.

2164
02:31:51,560 --> 02:31:52,280
So that you

2165
02:31:52,280 --> 02:31:55,080
can see the code from top to bottom.

2166
02:31:56,480 --> 02:31:58,680
You guys can compute it.

2167
02:31:58,680 --> 02:32:01,680
So let me make I hope it is readable.

2168
02:32:01,680 --> 02:32:24,560
So let me create test for class
in this upper class.

2169
02:32:24,560 --> 02:32:26,600
I made it like this without constructor.

2170
02:32:26,600 --> 02:32:28,640
Is that not a good approach?

2171
02:32:28,640 --> 02:32:30,040
No. No. It's also good.

2172
02:32:30,040 --> 02:32:33,520
So the main point
was to learn about the overriding.

2173
02:32:33,520 --> 02:32:44,320
So it's perfectly fine if you guys have
done this without the constructors, you're

2174
02:32:45,440 --> 02:32:46,080
It's good.

2175
02:32:46,080 --> 02:32:53,400
It's good and it's good.

2176
02:32:53,400 --> 02:32:57,200
So now clear the object, the three class,
it's like a credit card.

2177
02:32:57,240 --> 02:33:02,760
Credit card
needed words on new credit card.

2178
02:33:02,760 --> 02:33:04,800
I pass a balance of ten.

2179
02:33:05,640 --> 02:33:09,640
Oops.

2180
02:33:09,640 --> 02:33:12,960
Can you please explain lines 17 and 20?

2181
02:33:14,120 --> 02:33:18,840
So this is a constructor of this class

2182
02:33:19,960 --> 02:33:23,120
and when I write super with parentheses,

2183
02:33:23,120 --> 02:33:25,960
I am actually calling this constructor

2184
02:33:29,720 --> 02:33:32,160
and passing this balance in here.

2185
02:33:32,160 --> 02:33:35,560
And from here
this balance will be passed in here

2186
02:33:36,520 --> 02:33:39,000
and from here it will be passed in here

2187
02:33:39,040 --> 02:33:43,920
and this field will be initialized
from here

2188
02:33:43,920 --> 02:33:48,560
because I am using this field in here.

2189
02:33:49,240 --> 02:33:53,080
So I first must initialize this field

2190
02:33:53,800 --> 02:33:59,160
so that I don't get unexpected results
in tired this calculate interest method.

2191
02:33:59,160 --> 02:34:02,600
So whenever you guys will be

2192
02:34:02,600 --> 02:34:03,880
using the fields

2193
02:34:03,880 --> 02:34:07,680
from your parent class,
you must initialize them

2194
02:34:07,680 --> 02:34:10,200
through the constructor of your child

2195
02:34:10,720 --> 02:34:17,080
so that you don't get unexpected returns.

2196
02:34:17,080 --> 02:34:19,600
And then the same is happening on line 28

2197
02:34:21,120 --> 02:34:25,040
for not to make a credit card
and then double

2198
02:34:26,560 --> 02:34:28,440
X and or credit card.

2199
02:34:29,760 --> 02:34:30,760
No, no,

2200
02:34:30,760 --> 02:34:36,920
we cannot.

2201
02:34:36,920 --> 02:34:38,640
It will be something very weird.

2202
02:34:38,640 --> 02:34:39,760
X is the child.

2203
02:34:39,760 --> 02:34:42,400
Then you are using the default operator
and then you are writing

2204
02:34:42,400 --> 02:34:46,800
the name of the parent class
and then you are saying double with me.

2205
02:34:47,160 --> 02:34:49,280
Can you can you write proper code?

2206
02:34:49,280 --> 02:34:52,400
What do you mean?

2207
02:34:52,400 --> 02:35:09,400
Because this is not correct
syntactically, in this case,

2208
02:35:09,400 --> 02:35:13,160
the balance is the same for all
and just we are changing interest.

2209
02:35:13,160 --> 02:35:16,920
Using over our normal balance is different
for everyone.

2210
02:35:17,800 --> 02:35:21,000
Balances for everyone

2211
02:35:22,840 --> 02:35:25,200
because they are sending instance
failed instance.

2212
02:35:25,200 --> 02:35:28,200
First they have separate copies
for all the objects.

2213
02:35:28,200 --> 02:35:31,800
It's not a static field
like create an object

2214
02:35:31,800 --> 02:35:35,280
is passing through the constructor.

2215
02:35:35,280 --> 02:35:37,480
Like create an object inside

2216
02:35:37,480 --> 02:35:40,960
the X
to call the constructor of the parent

2217
02:35:41,360 --> 02:35:44,440
So Mohammed if you do that, remember each

2218
02:35:44,440 --> 02:35:47,120
object has its own copies.

2219
02:35:48,000 --> 02:35:51,120
If you are creating an object
inside the constructor,

2220
02:35:51,120 --> 02:35:54,480
it will only effect that specific object.

2221
02:35:55,200 --> 02:35:57,120
Each object that you create.

2222
02:35:57,120 --> 02:36:02,600
It has its own copy of the variables,
the value

2223
02:36:02,640 --> 02:36:07,080
then that I am passing in here,
it will only only effect

2224
02:36:07,080 --> 02:36:10,480
this credit card objectify create
another object

2225
02:36:10,960 --> 02:36:14,160
that the object will having
will be having its own copy.

2226
02:36:14,720 --> 02:36:19,280
This trend will not and will not
be related in any way to that object.

2227
02:36:19,840 --> 02:36:27,120
We don't want that.

2228
02:36:27,120 --> 02:36:30,560
So if I see credit card dot

2229
02:36:32,400 --> 02:36:33,040
calculate

2230
02:36:33,040 --> 02:36:41,880
interest, then we

2231
02:36:42,000 --> 02:36:45,240
maybe we pass under

2232
02:36:49,120 --> 02:36:50,960
so 15

2233
02:36:50,960 --> 02:36:54,040
is the interest rate
and under this dependance

2234
02:36:54,360 --> 02:36:57,120
if interest in convenience

2235
02:37:00,920 --> 02:37:09,360
entity.

2236
02:37:09,360 --> 02:37:13,840
So those who are confused with constructor
mode easy for me.

2237
02:37:13,840 --> 02:37:14,880
Yes, you're welcome.

2238
02:37:14,880 --> 02:37:17,320
You can do it without the constructors.

2239
02:37:17,320 --> 02:37:20,240
So let's say if I say on

2240
02:37:22,680 --> 02:37:27,720
x x is equal to new

2241
02:37:28,800 --> 02:37:33,120
x and if I boss 200

2242
02:37:33,120 --> 02:37:37,520
in here, this x start

2243
02:37:38,320 --> 02:37:41,920
calculator
interests will give me 15 or 30.

2244
02:37:43,400 --> 02:37:45,960
So to the parent class am passing this out

2245
02:37:46,640 --> 02:37:49,360
and to the child class
I am passing this to 100.

2246
02:37:50,160 --> 02:37:53,640
So will I get the interest rate 15

2247
02:37:55,560 --> 02:37:58,560
and the balance at 100 or

2248
02:37:58,560 --> 02:38:01,440
the interest rate as 30
and the balance has 200.

2249
02:38:02,040 --> 02:38:04,560
If I call this piece of code

2250
02:38:07,360 --> 02:38:09,360
30 and 200 fight

2251
02:38:09,840 --> 02:38:12,560
y, I will get 30 and 200 because

2252
02:38:15,480 --> 02:38:17,840
the 40, not 30, because in here

2253
02:38:17,840 --> 02:38:21,560
I am defining the interest rate
as far as 5%.

2254
02:38:21,840 --> 02:38:23,680
So, so it will be ten and 200.

2255
02:38:23,680 --> 02:38:26,200
Now What is happening in here?

2256
02:38:26,480 --> 02:38:27,960
This 200 that I am

2257
02:38:27,960 --> 02:38:33,600
passing in here,
it is being passed to the constructor

2258
02:38:33,720 --> 02:38:39,240
right from the inside The constructor
I am writing this super keyword,

2259
02:38:39,240 --> 02:38:42,520
which means call the constructor
from the parent.

2260
02:38:43,240 --> 02:38:45,680
So this balance will go in here

2261
02:38:46,800 --> 02:38:48,800
and all of this is happening

2262
02:38:48,800 --> 02:38:52,080
in a separate memory,
in a separate location.

2263
02:38:52,640 --> 02:38:55,560
It has nothing to do
with this piece of code.

2264
02:38:55,920 --> 02:38:57,360
Remember that

2265
02:38:57,680 --> 02:39:00,400
it has nothing to do with this object.

2266
02:39:00,400 --> 02:39:02,680
This object. Yeah.

2267
02:39:02,680 --> 02:39:05,360
So this balance will be passed in here.

2268
02:39:05,360 --> 02:39:09,720
From here
it will be assigned to this field two

2269
02:39:11,640 --> 02:39:14,120
200. Okay.

2270
02:39:14,560 --> 02:39:17,360
And then because we are using

2271
02:39:17,360 --> 02:39:20,400
this expense keyword,

2272
02:39:20,400 --> 02:39:24,240
both the figures,
they will be copied to political.

2273
02:39:24,240 --> 02:39:26,840
This is what happens
when we do the inheritance.

2274
02:39:26,840 --> 02:39:27,560
Right?

2275
02:39:27,840 --> 02:39:29,760
So I will be having a balance feared.

2276
02:39:29,760 --> 02:39:32,520
But now inside the balance sphere

2277
02:39:33,000 --> 02:39:41,160
I will having a value of 200.

2278
02:39:41,160 --> 02:39:44,920
I am done with the dark intelligence.

2279
02:39:44,920 --> 02:39:48,600
So now this 200 will be multiplied

2280
02:39:48,600 --> 02:39:52,800
by 0.05 and it
then will be stored inside in here.

2281
02:39:52,800 --> 02:39:54,360
And I am printing there.

2282
02:39:54,360 --> 02:39:56,680
That's why I get ten and then 200.

2283
02:39:58,440 --> 02:40:01,880
So yes, the values they are too fast,

2284
02:40:02,560 --> 02:40:06,080
but the objects
they have center member locations.

2285
02:40:06,080 --> 02:40:10,960
They have nothing to do with each of the.

2286
02:40:10,960 --> 02:40:11,480
Yeah.

2287
02:40:12,360 --> 02:40:16,440
Similarly, if I create an object of the

2288
02:40:18,240 --> 02:40:20,360
visa class

2289
02:40:23,920 --> 02:40:27,240
and if I pass maybe 300 in here

2290
02:40:29,000 --> 02:40:31,400
now if I say we are not

2291
02:40:31,400 --> 02:40:33,920
calculating interest

2292
02:40:38,280 --> 02:40:39,960
what I want, I will go right here.

2293
02:40:39,960 --> 02:40:45,560
And guys, it shift
for two times and type 18.

2294
02:40:45,560 --> 02:40:46,320
So do that.

2295
02:40:46,320 --> 02:40:47,560
Does this view the class?

2296
02:40:47,560 --> 02:40:53,640
Does it have its own overridden method?

2297
02:40:53,640 --> 02:40:56,200
Does it have its own calculation method

2298
02:40:57,120 --> 02:41:03,040
gives a class? No.

2299
02:41:03,400 --> 02:41:04,320
So what will happen?

2300
02:41:04,320 --> 02:41:08,400
They calculate interest from the child
class

2301
02:41:09,560 --> 02:41:13,720
will be copied inside the parent
and entirely inside the parent.

2302
02:41:13,720 --> 02:41:18,920
What we are saying we are saying whatever
is the balance multiplied with 15.

2303
02:41:18,920 --> 02:41:22,560
So we will be getting 45

2304
02:41:22,560 --> 02:41:27,360
and then 345 and then three.

2305
02:41:28,280 --> 02:41:31,560
So when we are inheriting from a class,

2306
02:41:31,560 --> 02:41:38,160
we kind of copy the structure,
but we don't copy the instance,

2307
02:41:38,160 --> 02:41:41,360
feel the values that we pass

2308
02:41:41,400 --> 02:41:44,600
when we are creating an object
of those classes.

2309
02:41:44,600 --> 02:41:46,560
It's very important.

2310
02:41:46,560 --> 02:41:49,760
Everything is happening inside
a separate member location.

2311
02:41:50,160 --> 02:41:53,200
Everything belongs to the object.

2312
02:41:53,200 --> 02:41:57,440
When it comes to instance, features
like static fields,

2313
02:41:57,440 --> 02:42:00,720
they work a little different.

2314
02:42:01,080 --> 02:42:13,480
Do you guys have any questions
from this task?

2315
02:42:13,480 --> 02:42:14,200
All right.

2316
02:42:14,200 --> 02:42:17,200
So how how you guys have solved

2317
02:42:17,200 --> 02:42:21,240
this problem
without without the constructors?

2318
02:42:21,240 --> 02:42:25,560
Do you pass the values to the new
you guys fastly values

2319
02:42:25,560 --> 02:42:30,840
directly to these methods?

2320
02:42:30,840 --> 02:42:32,720
Oh, that will be very easy. Right

2321
02:42:33,920 --> 02:42:34,320
then.

2322
02:42:34,600 --> 02:42:36,600
It must be very easy.

2323
02:42:36,600 --> 02:42:37,920
Yep, yep, yep.

2324
02:42:37,920 --> 02:42:40,960
Okay, that's also good,
because the main point

2325
02:42:40,960 --> 02:42:43,080
was about the overriding.

2326
02:42:44,880 --> 02:42:51,600
Okay, what is the third task?

2327
02:42:51,600 --> 02:43:02,560
That's all easy peasy.

2328
02:43:02,560 --> 02:43:06,360
We take a break.

2329
02:43:06,360 --> 02:43:08,520
This guy is waiting for you, Sebastian.

2330
02:43:08,840 --> 02:43:11,240
But last, last one month.

2331
02:43:11,240 --> 02:43:11,560
Naughty.

2332
02:43:11,560 --> 02:43:15,160
You want to talk to this guy?

2333
02:43:15,160 --> 02:43:21,120
So let me.

2334
02:43:21,120 --> 02:43:24,360
We had 15 more minutes,
and then you guys want to talk

2335
02:43:24,560 --> 02:43:32,800
this for this guy?

2336
02:43:32,800 --> 02:43:34,280
I mean, it's cute, right?

2337
02:43:34,280 --> 02:43:48,040
It's not that bad.

2338
02:43:48,040 --> 02:43:53,040
So do you guys want to see how machine
learning happens?

2339
02:43:53,040 --> 02:43:57,840
I am training a software
to recognize pictures of humans,

2340
02:43:58,320 --> 02:44:01,120
and I am training it for the last 3 hours

2341
02:44:01,120 --> 02:44:04,560
on my computer.

2342
02:44:04,560 --> 02:44:08,400
So this is all it is,
printing all the accuracy.

2343
02:44:08,400 --> 02:44:12,400
So right now the equity is at 78%.

2344
02:44:12,400 --> 02:44:15,480
So my model is working 78% times.

2345
02:44:15,480 --> 02:44:17,600
It is predicting the values correctly.

2346
02:44:18,520 --> 02:44:18,920
Okay.

2347
02:44:19,200 --> 02:44:27,000
And it's by time.

2348
02:44:27,000 --> 02:44:30,960
And this is how it looks like
the all the software that you see which

2349
02:44:31,480 --> 02:44:34,200
like this octave
that you use to open your are

2350
02:44:34,800 --> 02:44:37,920
your mobile phones through your face faces

2351
02:44:38,520 --> 02:44:41,040
all the software that detect automatic

2352
02:44:41,160 --> 02:44:45,120
would be our cars
that try to break the rules

2353
02:44:46,280 --> 02:44:47,040
and this is how

2354
02:44:47,040 --> 02:44:54,120
they are built.

2355
02:44:54,120 --> 02:44:58,000
So it is training I am training it
for the last 3 to 4 hours.

2356
02:44:58,000 --> 02:45:02,680
It is running, running, running
and it's learning how the images

2357
02:45:02,680 --> 02:45:06,840
of two persons, how they look like,
if they are the same person.

2358
02:45:06,840 --> 02:45:07,920
So I have fed it.

2359
02:45:07,920 --> 02:45:10,800
A lot of data about two gigabytes of data

2360
02:45:12,200 --> 02:45:15,800
and it is going through
all the images in a loop one by one,

2361
02:45:16,080 --> 02:45:19,440
and then comparing the law
and trying to understand

2362
02:45:20,200 --> 02:45:22,640
how do the images look like.

2363
02:45:22,920 --> 02:45:25,960
And then I have provided it
with this information.

2364
02:45:26,240 --> 02:45:30,600
This is by time that these two persons
they are different.

2365
02:45:30,600 --> 02:45:32,680
They they are they are the same person.

2366
02:45:32,680 --> 02:45:37,520
So now it is learning all those variables
and all that in the background.

2367
02:45:38,520 --> 02:45:40,600
And then it is testing itself.

2368
02:45:40,600 --> 02:45:45,720
So right now it's at 78%.

2369
02:45:45,720 --> 02:45:47,520
I should use iPhone.

2370
02:45:47,520 --> 02:45:50,280
I can open my sister's phone.

2371
02:45:50,280 --> 02:45:56,080
Yes, it is very funny that the computers,
they can be fooled very easily.

2372
02:45:56,080 --> 02:45:56,760
Very easily.

2373
02:45:56,760 --> 02:45:59,320
So now

2374
02:46:00,320 --> 02:46:02,520
they are state computers, Right.

2375
02:46:02,520 --> 02:46:06,720
So if you put something very similar
to the these computers,

2376
02:46:07,080 --> 02:46:14,560
they can be fooled very easily. You.

2377
02:46:14,560 --> 02:46:21,040
So I don't know how many more
of our creations will be needed.

2378
02:46:21,040 --> 02:46:26,080
Oh, it's improvement
is very slow to do in point.

2379
02:46:26,880 --> 02:46:27,480
All right, guys.

2380
02:46:27,480 --> 02:46:31,040
So let's have a break.

2381
02:46:31,040 --> 02:46:41,120
And after the break,
we will discuss the polymorphism.

2382
02:46:41,120 --> 02:46:44,400
Oh, I slept for 3 hours before this class

2383
02:46:47,520 --> 02:46:52,800
record that I was busy in my assignment.

2384
02:46:52,800 --> 02:46:54,840
I am very dark, so it goes below my eyes.

2385
02:46:54,840 --> 02:47:01,080
But hopefully things will get better
once I am done with my masters.

2386
02:47:01,080 --> 02:47:04,400
So it's one or the one or two.

2387
02:47:05,080 --> 02:47:06,720
So let's have a break.

2388
02:47:08,440 --> 02:47:09,280
15 minutes.

2389
02:47:09,280 --> 02:47:11,640
So one 117.

2390
02:47:13,200 --> 02:47:15,480
So I need at least 80% accuracy.

2391
02:47:15,480 --> 02:47:19,440
So I am just 2% behind
and my professor will be happy

2392
02:47:19,440 --> 02:47:23,160
if I get at least 80%,
which it is stuck on

2393
02:47:23,480 --> 02:47:27,160
78% for the last 3 hours,
increasing very slowly.

2394
02:47:27,960 --> 02:47:32,040
And when it is left in the deadline,
I have someone to report.

2395
02:47:32,080 --> 02:47:32,640
Well,

2396
02:47:34,800 --> 02:47:36,200
what do you think about Java?

2397
02:47:36,200 --> 02:47:40,640
Python is better for the task
that you guys are doing for development?

2398
02:47:41,080 --> 02:47:42,920
Java is perfect.

2399
02:47:42,920 --> 02:47:45,360
Python cannot replace Java in that area,

2400
02:47:46,080 --> 02:47:48,600
but machine learning tasks

2401
02:47:48,760 --> 02:47:56,120
by ton is.

2402
02:47:56,120 --> 02:47:59,400
Yes, it's 11 p.m. in here.

2403
02:47:59,400 --> 02:48:04,440
I have heard a lot about react will wake
you or use that as well in the future.

2404
02:48:04,600 --> 02:48:08,160
So you guys might be using some libraries
from the React,

2405
02:48:08,760 --> 02:48:11,600
but not quite you guys
because it for React

2406
02:48:11,600 --> 02:48:14,800
you need to understand
JavaScript TypeScript.

2407
02:48:14,800 --> 02:48:17,320
And then there are so many words
of JavaScript

2408
02:48:17,320 --> 02:48:21,400
and our script is, is crazy
and you guys will be crazy.

2409
02:48:21,720 --> 02:48:23,960
You and you guys don't want to do that.

2410
02:48:24,360 --> 02:48:26,920
And for us both, class is the best for not

2411
02:48:30,800 --> 02:48:35,360
the active JavaScript.

2412
02:48:35,360 --> 02:48:41,280
So Solomon, do you have some development
experience like the frontend?

2413
02:48:41,280 --> 02:48:41,800
I think so.

2414
02:48:41,800 --> 02:48:45,360
After this call
studies are for lifetime to keep updated.

2415
02:48:45,560 --> 02:48:48,000
Are not quite that because companies

2416
02:48:48,000 --> 02:48:51,480
they are very reluctant
to move to the new technologies.

2417
02:48:52,280 --> 02:48:55,440
So it's not like that
every year or something.

2418
02:48:55,440 --> 02:48:58,240
You guys will be learning
new programing, languages and delays.

2419
02:48:58,320 --> 02:49:00,960
Therefore from 1995

2420
02:49:01,480 --> 02:49:05,080
it's been almost 30 years, right?

2421
02:49:06,120 --> 02:49:10,080
21 and then 26 to 37 years.

2422
02:49:10,080 --> 02:49:15,000
And it has not changed
that much since then.

2423
02:49:16,080 --> 02:49:21,080
And because finding the right
skilled person from the industry

2424
02:49:21,080 --> 02:49:24,400
who can work on the technology
that you have selected for your company,

2425
02:49:24,960 --> 02:49:26,960
finding the free tools

2426
02:49:26,960 --> 02:49:31,040
because there will be thousands
of employees who will be using the i.t.

2427
02:49:31,080 --> 02:49:31,440
Right.

2428
02:49:31,440 --> 02:49:34,720
If go eclipse is not free or intelligence
aren't free,

2429
02:49:35,000 --> 02:49:36,320
you have to pay a lot of memory.

2430
02:49:36,320 --> 02:49:38,640
So there are so many factors
that are involved.

2431
02:49:38,640 --> 02:49:42,840
When You have to do the technology
if skilled personnel are available or not,

2432
02:49:43,040 --> 02:49:46,040
if you will be able to achieve
the performance or not.

2433
02:49:46,360 --> 02:49:50,880
If the tools are available freely,
not if that language or tool is better

2434
02:49:50,880 --> 02:49:52,840
tested or not. Right. You don't want to

2435
02:49:53,840 --> 02:49:56,960
be doing
experiments on thousands of customers, so

2436
02:49:56,960 --> 02:50:00,480
you want something that is super stable,
that is here for years.

2437
02:50:01,120 --> 02:50:05,120
You don't want to use new technologies
that are here for like 3 to 5 years.

2438
02:50:05,640 --> 02:50:09,840
Companies
never do that because one minute of

2439
02:50:10,920 --> 02:50:14,160
software crash or something like that,
it can cost them millions.

2440
02:50:14,160 --> 02:50:18,560
So then never do that to do,
don't worry about Java.

2441
02:50:18,600 --> 02:50:22,600
It's not going anywhere.

2442
02:50:22,600 --> 02:50:25,080
Otherwise please be back by

2443
02:50:27,240 --> 02:50:30,120
120 and reminding me about it.

2444
02:50:30,120 --> 02:50:31,200
Obviously

2445
02:50:37,160 --> 02:50:39,720
it's easy for us

2446
02:50:39,720 --> 02:50:43,280
so poly and morphs it.

2447
02:50:43,280 --> 02:50:47,000
The poly means many

2448
02:50:48,000 --> 02:50:51,000
and more means forms.

2449
02:50:51,600 --> 02:50:59,080
So what will happen?

2450
02:50:59,080 --> 02:51:01,560
So in overloading

2451
02:51:02,880 --> 02:51:06,400
we call this same method,

2452
02:51:07,640 --> 02:51:12,040
but we pass, then we pass different

2453
02:51:13,440 --> 02:51:15,400
bad meters.

2454
02:51:16,160 --> 02:51:18,120
That method,

2455
02:51:18,600 --> 02:51:21,520
it can behave totally differently.

2456
02:51:21,880 --> 02:51:22,280
Right?

2457
02:51:23,240 --> 02:51:24,120
You write a

2458
02:51:24,120 --> 02:51:27,760
totally different logic
in a method prior to you.

2459
02:51:28,080 --> 02:51:30,240
You are passing one parameter.

2460
02:51:30,240 --> 02:51:36,040
You can maybe write a loop inside
that manages many forms.

2461
02:51:36,320 --> 02:51:37,520
Alexi

2462
02:51:38,400 --> 02:51:41,480
So that is also a polymorphism.

2463
02:51:41,480 --> 02:51:44,160
It's called static polymorphism because

2464
02:51:45,360 --> 02:51:48,800
the same method, if it is speaking at it

2465
02:51:48,880 --> 02:51:52,640
taking and Eddie as the input,
it is behaving differently.

2466
02:51:52,640 --> 02:51:53,760
If the same method,

2467
02:51:53,760 --> 02:51:57,880
if it is taking an integer
as the input, it is behaving differently.

2468
02:51:58,000 --> 02:51:58,280
Right?

2469
02:51:58,280 --> 02:52:00,840
So in our real life we also do this right.

2470
02:52:01,280 --> 02:52:03,800
We behave differently with our friends.

2471
02:52:03,960 --> 02:52:06,600
Our thorn are

2472
02:52:06,600 --> 02:52:08,840
God saves whatever we do right.

2473
02:52:08,840 --> 02:52:11,440
We are a totally different person
with our friends

2474
02:52:12,120 --> 02:52:14,280
in of father or mother.

2475
02:52:14,880 --> 02:52:17,320
We are the

2476
02:52:18,400 --> 02:52:19,360
nicest.

2477
02:52:19,360 --> 02:52:23,880
We are the
the the most innocent person to all.

2478
02:52:24,480 --> 02:52:28,440
And yes, in front of our lives,
we are the most innocent persons

2479
02:52:28,680 --> 02:52:30,800
that sense of of this world right

2480
02:52:33,320 --> 02:52:33,960
When we are

2481
02:52:33,960 --> 02:52:37,440
with friends, we
are the naughtiest person in this world.

2482
02:52:37,920 --> 02:52:40,520
So but we are the same persons, right?

2483
02:52:40,880 --> 02:52:45,000
What we are doing,
we are behaving differently depending

2484
02:52:45,000 --> 02:52:46,440
upon these scenarios.

2485
02:52:46,440 --> 02:52:49,200
We are behaving differently
when we are in schools.

2486
02:52:49,360 --> 02:52:53,160
We behave differently
when are with our friends,

2487
02:52:53,160 --> 02:52:56,120
we behave differently with family,
we behave differently,

2488
02:52:56,240 --> 02:52:57,880
but we are actually the same person.

2489
02:52:57,880 --> 02:53:00,480
So same centers.

2490
02:53:00,840 --> 02:53:03,360
When we boss parameters,

2491
02:53:03,880 --> 02:53:06,160
they can also behave differently.

2492
02:53:06,440 --> 02:53:08,640
Okay, same matters

2493
02:53:09,280 --> 02:53:13,840
If they are called on different

2494
02:53:13,840 --> 02:53:16,320
objects, they can behave differently.

2495
02:53:17,240 --> 02:53:18,920
Acting smart, smarter school.

2496
02:53:18,920 --> 02:53:21,720
So in a real life, in shopping

2497
02:53:21,720 --> 02:53:24,000
malls and busses in school, that calms

2498
02:53:24,960 --> 02:53:29,920
a person can be behave differently right?

2499
02:53:29,920 --> 02:53:33,960
So we we we achieve something

2500
02:53:33,960 --> 02:53:39,720
similar in Java
with the help of polymorphism.

2501
02:53:39,720 --> 02:53:43,880
And it is the most powerful, I would say,

2502
02:53:45,600 --> 02:53:48,520
concept of object oriented programing.

2503
02:53:48,520 --> 02:53:48,960
Okay.

2504
02:53:49,600 --> 02:53:52,720
If if someone can understand it properly.

2505
02:53:53,200 --> 02:53:58,000
So polymorphism is one of the oops
features that allow

2506
02:53:59,280 --> 02:54:02,400
us to perform a single action

2507
02:54:03,640 --> 02:54:05,520
in different ways.

2508
02:54:05,520 --> 02:54:06,000
Okay.

2509
02:54:06,480 --> 02:54:09,720
So 75 actually the hard part is gone.

2510
02:54:10,440 --> 02:54:13,680
The hard part was overloading

2511
02:54:13,680 --> 02:54:19,320
and overriding
because when we when I combine

2512
02:54:19,320 --> 02:54:22,760
these two concepts, this is where
the students they confuse the most.

2513
02:54:23,120 --> 02:54:26,440
Okay,
so that part lost. That part is gone.

2514
02:54:26,440 --> 02:54:29,760
Now we only like 10% left

2515
02:54:30,360 --> 02:54:32,880
out of this overriding overloading

2516
02:54:32,880 --> 02:54:37,280
and this polymorphism thing.

2517
02:54:37,280 --> 02:54:41,040
So polymorphism

2518
02:54:41,040 --> 02:54:43,800
is the capability of a method

2519
02:54:44,880 --> 02:54:48,840
to do different things based like

2520
02:54:48,840 --> 02:54:52,680
I act as an experienced software tester
in my interview. Yes.

2521
02:54:53,400 --> 02:54:57,920
So polymorphism is the capability
of a method to do different things

2522
02:54:58,000 --> 02:55:02,960
based on the object
that is that it is acting up on

2523
02:55:04,840 --> 02:55:05,720
and important

2524
02:55:05,720 --> 02:55:09,080
usage of polymorphism occurs in rules
in how

2525
02:55:10,640 --> 02:55:14,640
a parent class refers to a child class
object.

2526
02:55:14,640 --> 02:55:15,000
Okay.

2527
02:55:15,000 --> 02:55:18,960
I hope nothing from
this slide is making sense at this point.

2528
02:55:19,200 --> 02:55:21,600
Or is it making sense?

2529
02:55:21,600 --> 02:55:28,680
Polymorphism can be achieved
in two of the following ways.

2530
02:55:28,680 --> 02:55:30,800
So first, let me show you the example.

2531
02:55:30,880 --> 02:55:31,720
Okay.

2532
02:55:32,520 --> 02:55:41,680
Let me first show you the example,

2533
02:55:41,680 --> 02:55:44,080
which example will be

2534
02:55:47,640 --> 02:55:48,240
okay.

2535
02:55:50,560 --> 02:55:51,760
Dog one

2536
02:55:52,600 --> 02:55:55,200
If you guys are not tired

2537
02:55:55,200 --> 02:56:02,240
of dogs,

2538
02:56:02,240 --> 02:56:07,160
Bird, please.

2539
02:56:07,160 --> 02:56:09,360
What about a dog that can fly?

2540
02:56:09,960 --> 02:56:11,440
I mean, we are our developers.

2541
02:56:11,440 --> 02:56:12,920
We can build anything.

2542
02:56:12,920 --> 02:56:15,040
Now we know how to create a class.

2543
02:56:15,440 --> 02:56:18,720
We start to put fields

2544
02:56:19,920 --> 02:56:23,600
a code. Yep.

2545
02:56:23,680 --> 02:56:31,600
You guys can make anything fly.

2546
02:56:31,600 --> 02:56:33,840
I used to love dog, but now we've got

2547
02:56:34,760 --> 02:56:39,280
no. Ah.

2548
02:56:40,200 --> 02:56:42,360
Okay, So let's create a car class.

2549
02:56:43,000 --> 02:56:48,600
You guys love cars.

2550
02:56:48,600 --> 02:56:50,840
Unless we have two dogs,

2551
02:56:51,800 --> 02:56:53,080
we can't do it because

2552
02:56:53,080 --> 02:56:57,800
it is polymorphism.

2553
02:56:57,800 --> 02:57:05,640
All right, so let's say guys,
we have this car class.

2554
02:57:05,960 --> 02:57:08,520
Inside the car class, we have a method

2555
02:57:09,520 --> 02:57:14,600
start.

2556
02:57:14,600 --> 02:57:20,040
Yeah, let's make it very simple.

2557
02:57:21,720 --> 02:57:24,160
It was me, not me.

2558
02:57:24,280 --> 02:57:27,240
Use is

2559
02:57:27,240 --> 02:57:32,200
to start me.

2560
02:57:32,200 --> 02:57:34,080
And then

2561
02:57:35,600 --> 02:57:38,120
or start

2562
02:57:50,160 --> 02:57:53,680
is brakes to

2563
02:58:04,440 --> 02:58:06,720
the this is the correct word right

2564
02:58:06,720 --> 02:58:09,200
break,
not the other one that I wrote first.

2565
02:58:10,120 --> 02:58:15,720
English champions.

2566
02:58:15,720 --> 02:58:16,640
Okay.

2567
02:58:16,840 --> 02:58:19,720
And avoid

2568
02:58:20,640 --> 02:58:32,440
block.

2569
02:58:32,440 --> 02:58:33,960
Ask me

2570
02:58:36,920 --> 02:58:39,760
when it gets very simple three

2571
02:58:40,720 --> 02:58:46,240
three behaviors in a class.

2572
02:58:46,240 --> 02:58:49,080
Now let's create

2573
02:58:49,080 --> 02:58:52,760
for a few more classes guys classes

2574
02:58:54,760 --> 02:58:56,560
that are that extend

2575
02:58:56,560 --> 02:59:07,320
from the start class.

2576
02:59:07,320 --> 02:59:08,760
All right.

2577
02:59:09,480 --> 02:59:12,600
Woops I right Li and w

2578
02:59:16,240 --> 02:59:18,000
that expands

2579
02:59:18,000 --> 02:59:22,520
on the class

2580
02:59:26,960 --> 02:59:29,160
and inside the BMW

2581
02:59:30,200 --> 02:59:32,280
we can write some of the math terms.

2582
02:59:32,280 --> 02:59:34,640
We can say it void start

2583
02:59:36,720 --> 02:59:38,760
to bring people so

2584
02:59:38,760 --> 02:59:41,760
animal one item separates
the bird and other centers

2585
02:59:42,480 --> 02:59:46,120
but it first to see it's to

2586
02:59:54,520 --> 02:59:57,560
use the button

2587
02:59:59,240 --> 03:00:01,360
to spark me right in BMW

2588
03:00:01,360 --> 03:00:04,080
we can have that push start feature.

2589
03:00:04,400 --> 03:00:07,560
I cannot sleep
because I am always thinking and over

2590
03:00:07,560 --> 03:00:10,880
thinking every night to find the short
the fastest solutions.

2591
03:00:12,120 --> 03:00:15,360
You will be a good programmer should if

2592
03:00:16,680 --> 03:00:19,440
and then I can also override.

2593
03:00:19,800 --> 03:00:21,960
I can also have something special

2594
03:00:22,560 --> 03:00:27,000
that is only related
to the BMW harder to override fast.

2595
03:00:27,320 --> 03:00:30,120
So you guys just have to

2596
03:00:32,920 --> 03:00:35,880
type the void
and as soon as you type word,

2597
03:00:37,560 --> 03:00:39,880
all the matters in the parent class
that have

2598
03:00:41,280 --> 03:00:43,800
the word return type,

2599
03:00:43,920 --> 03:00:48,160
they will be appeared in here,
they will appear in here.

2600
03:00:48,480 --> 03:00:51,840
And now you guys can select
any of the methods to override it.

2601
03:00:54,120 --> 03:01:04,400
Yeah, actually,

2602
03:01:04,400 --> 03:01:07,440
let's not do that.

2603
03:01:07,440 --> 03:01:11,160
Let's keep it simple.

2604
03:01:11,160 --> 03:01:13,840
What is a shortcut for the assault?

2605
03:01:14,160 --> 03:01:16,400
Is s out and then hit enter.

2606
03:01:16,840 --> 03:01:18,480
No, no worries.

2607
03:01:18,480 --> 03:01:19,560
You will be fine. Sure.

2608
03:01:19,560 --> 03:01:22,280
If you will make birdie.

2609
03:01:22,560 --> 03:01:25,160
Why I get at a

2610
03:01:25,160 --> 03:01:27,360
Maryam is not available in this sport

2611
03:01:32,640 --> 03:01:35,600
last as long

2612
03:01:36,760 --> 03:01:38,640
extends

2613
03:01:47,880 --> 03:01:50,760
wide or maybe

2614
03:01:55,320 --> 03:01:58,240
it was me use

2615
03:02:00,120 --> 03:02:02,680
we all while Apple

2616
03:02:03,960 --> 03:02:06,080
will start me

2617
03:02:08,280 --> 03:02:11,640
polymorphism allows to perform
a single action in different ways.

2618
03:02:11,640 --> 03:02:14,640
I think it's more the right way

2619
03:02:14,640 --> 03:02:19,400
and quite a short way to understand
clearly yes.

2620
03:02:20,040 --> 03:02:22,800
Don't you need examples
should if this time

2621
03:02:24,120 --> 03:02:32,280
only definition is good?

2622
03:02:32,280 --> 03:02:34,800
I'm just kidding. I hope you don't mind

2623
03:02:35,880 --> 03:02:40,240
because was a student in the previous bed
and his name was also Shelly.

2624
03:02:41,040 --> 03:02:44,680
So I made a 2 to 3 dogs jokes on him

2625
03:02:44,680 --> 03:02:57,360
and he was kind of angry with me.

2626
03:02:57,360 --> 03:03:00,360
I can I can stop that if you guys mind it.

2627
03:03:01,040 --> 03:03:04,000
I don't mind
if you guys make names out of me.

2628
03:03:04,000 --> 03:03:06,480
Don't make jokes or do anything like that.

2629
03:03:06,480 --> 03:03:10,160
I always enjoy it.

2630
03:03:10,160 --> 03:03:12,400
You you are kind of my family now, right?

2631
03:03:12,840 --> 03:03:15,920
Spending
almost more time with you than my family

2632
03:03:16,240 --> 03:03:26,160
For the past one month.

2633
03:03:26,160 --> 03:03:27,480
Forgive my sarcasm.

2634
03:03:28,680 --> 03:03:31,880
Okay, so use mobile app to start me

2635
03:03:33,480 --> 03:03:34,640
and then Tesla is.

2636
03:03:34,640 --> 03:03:36,160
Tesla. Right.

2637
03:03:36,160 --> 03:03:42,320
So it was

2638
03:03:44,960 --> 03:03:48,160
parking sensors who

2639
03:03:49,360 --> 03:03:51,960
bought me.

2640
03:03:51,960 --> 03:03:53,680
Does anyone have Tesla?

2641
03:03:53,680 --> 03:03:56,080
Oh my God.

2642
03:03:56,320 --> 03:03:58,880
And here in Pakistan,
the taxes, they are like

2643
03:03:58,880 --> 03:04:02,640
1000 passes percent on these luxury cars.

2644
03:04:02,880 --> 03:04:06,080
So someone can not even think
about those cars

2645
03:04:10,560 --> 03:04:12,960
who are like us, do not have anywhere.

2646
03:04:13,000 --> 03:04:14,880
And then we

2647
03:04:16,280 --> 03:04:18,240
if you are a parent class

2648
03:04:18,240 --> 03:04:26,600
and you are extended class child,
and then there is this for

2649
03:04:27,760 --> 03:04:32,320
Toyota, built for guys like me,

2650
03:04:32,320 --> 03:04:34,440
which has everything men will

2651
03:04:39,360 --> 03:04:39,720
like.

2652
03:04:39,760 --> 03:04:41,160
Strings

2653
03:04:41,760 --> 03:04:45,440
are, and it has nothing

2654
03:04:45,440 --> 03:04:49,520
special.

2655
03:04:49,520 --> 03:05:06,880
So let's create a Astra class.

2656
03:05:06,880 --> 03:05:13,120
And I'm just.

2657
03:05:13,120 --> 03:05:18,440
So what is happening in here,
guys, is so nice.

2658
03:05:18,840 --> 03:05:23,080
It understands that I want to show
all the code inside single file.

2659
03:05:23,080 --> 03:05:24,960
Right. You see how it are destroyed.

2660
03:05:24,960 --> 03:05:30,880
All the matters.

2661
03:05:30,880 --> 03:05:35,720
So when you guys.

2662
03:05:35,720 --> 03:05:36,560
Yes to it.

2663
03:05:36,560 --> 03:05:39,440
I know which is so you guys can see that

2664
03:05:39,600 --> 03:05:43,320
I have this stock method
then I have the start method again.

2665
03:05:43,360 --> 03:05:46,920
Then I have the stock method again and
then here I don't have the stock met them.

2666
03:05:46,920 --> 03:05:52,960
So what is happening right now?

2667
03:05:52,960 --> 03:05:55,320
I have a same method

2668
03:05:56,400 --> 03:05:59,480
and this same method is existing

2669
03:06:00,160 --> 03:06:03,160
in different classes. Now,

2670
03:06:04,200 --> 03:06:09,040
with the help of polymorphism,

2671
03:06:09,040 --> 03:06:12,600
it is auto generated moment.

2672
03:06:12,600 --> 03:06:15,720
You can click on this
plus button to expand it if you want,

2673
03:06:15,720 --> 03:06:18,720
and you can click on this minus button
to shrink it again

2674
03:06:20,760 --> 03:06:27,080
to push the car to start.

2675
03:06:27,080 --> 03:06:29,440
So what is happening in here guys?

2676
03:06:29,680 --> 03:06:31,760
I am using overwriting, right?

2677
03:06:32,200 --> 03:06:35,680
And overriding is
it is a kind of polymorphism,

2678
03:06:35,680 --> 03:06:38,040
either type of polymorphism, right?

2679
03:06:38,040 --> 03:06:44,880
So what will happen
now if I use polymorphism in here,

2680
03:06:44,880 --> 03:06:48,520
then I will be able to all,

2681
03:06:49,960 --> 03:06:53,000
all of these start matters

2682
03:06:54,360 --> 03:06:57,800
by just changing the object

2683
03:06:58,800 --> 03:07:02,200
that is the on
which these methods are acting.

2684
03:07:02,200 --> 03:07:06,480
So how it work.

2685
03:07:06,480 --> 03:07:10,920
So there is this concept of up

2686
03:07:10,920 --> 03:07:14,320
costing and down
costing in objects as well.

2687
03:07:14,480 --> 03:07:17,960
So that cost
that that concept is so simple.

2688
03:07:17,960 --> 03:07:24,120
It says that you can create a variable off

2689
03:07:24,120 --> 03:07:27,440
type player and,

2690
03:07:27,440 --> 03:07:32,040
and you can store the object of any child

2691
03:07:33,440 --> 03:07:36,720
inside that variable that

2692
03:07:36,720 --> 03:07:37,800
you guys remember.

2693
03:07:37,800 --> 03:07:41,520
In primitive typecasting, we used to store

2694
03:07:42,680 --> 03:07:44,480
inside a double.

2695
03:07:44,480 --> 03:07:51,640
We used the store integer, used to store
a long we used to store the floor.

2696
03:07:51,640 --> 03:07:55,280
We used to store
different kind of things in here.

2697
03:07:55,280 --> 03:08:00,280
This got lost is as thing like that
boolean the bigger deck type.

2698
03:08:01,200 --> 03:08:02,040
Okay.

2699
03:08:02,160 --> 03:08:06,600
And in here
you guys can think of this line as if I

2700
03:08:07,920 --> 03:08:10,920
doing the widening convergence.

2701
03:08:10,960 --> 03:08:12,600
It is automatic, right?

2702
03:08:12,600 --> 03:08:14,000
It happens automatically.

2703
03:08:14,000 --> 03:08:16,000
We just assign the variables

2704
03:08:16,960 --> 03:08:22,080
so this child can be assigned
without any errors to this parents class.

2705
03:08:22,360 --> 03:08:25,120
Yeah.

2706
03:08:25,120 --> 03:08:27,840
And what I can do

2707
03:08:28,680 --> 03:08:31,720
if I call the stock

2708
03:08:31,720 --> 03:08:34,120
method now I have two choices.

2709
03:08:35,040 --> 03:08:38,200
If I look closely,

2710
03:08:38,200 --> 03:08:42,120
I have this stock
method available inside the parent,

2711
03:08:43,200 --> 03:08:43,800
but this

2712
03:08:43,800 --> 03:08:48,120
stock method is also presented
inside the child.

2713
03:08:48,120 --> 03:08:55,000
Now question is which method should be
called when I write this piece of line.

2714
03:08:55,280 --> 03:08:56,120
So what do you guys think?

2715
03:08:56,120 --> 03:08:58,400
Which method should be called

2716
03:09:04,000 --> 03:09:07,160
B BMW one, y, BMW one.

2717
03:09:07,160 --> 03:09:09,360
Because remember,

2718
03:09:09,360 --> 03:09:14,280
I am creating the object of this child,

2719
03:09:14,440 --> 03:09:19,320
this variable in sorry, in here
it's just storing that object.

2720
03:09:19,920 --> 03:09:22,440
The object is still coming from.

2721
03:09:22,440 --> 03:09:25,600
The BMW class, it's just acting.

2722
03:09:25,600 --> 03:09:29,800
This car variable
is just acting as a container, okay?

2723
03:09:30,160 --> 03:09:31,840
It is just acting of the container.

2724
03:09:31,840 --> 03:09:35,000
I, I am storing that BMW inside this car.

2725
03:09:36,040 --> 03:09:39,520
So what will happen now

2726
03:09:40,960 --> 03:09:46,280
if I execute the score?

2727
03:09:46,280 --> 03:09:48,880
I will see. Use the button to start.

2728
03:09:48,920 --> 03:09:52,640
Stock me.

2729
03:09:52,640 --> 03:09:53,040
No, no.

2730
03:09:53,040 --> 03:09:55,320
It has everything to do with overriding.

2731
03:09:55,320 --> 03:09:58,680
If I don't override this method in here,

2732
03:10:00,440 --> 03:10:01,600
if I don't override.

2733
03:10:01,600 --> 03:10:03,200
So for example, if I.

2734
03:10:03,200 --> 03:10:05,920
If I use the Toyota

2735
03:10:05,920 --> 03:10:08,280
instead of BMW, if I say Toyota.

2736
03:10:08,280 --> 03:10:16,080
So which method will be called this?

2737
03:10:16,080 --> 03:10:21,000
So now,
because Toyota does not have any method,

2738
03:10:21,000 --> 03:10:24,480
the method from the parent
class will be called

2739
03:10:26,760 --> 03:10:31,160
here, use case to start me.

2740
03:10:31,160 --> 03:10:34,200
So now this this

2741
03:10:34,480 --> 03:10:37,960
this power of storing the child class

2742
03:10:37,960 --> 03:10:41,160
objects inside the parent

2743
03:10:41,160 --> 03:10:45,120
type variables.

2744
03:10:45,120 --> 03:10:47,280
What it allows are allowed us.

2745
03:10:47,280 --> 03:10:51,000
It allows us to create areas of objects.

2746
03:10:51,240 --> 03:10:55,680
It allows us to write
loops outside of the objects.

2747
03:10:56,120 --> 03:10:59,880
It allows us to do so many crazy things.

2748
03:10:59,880 --> 03:11:03,720
Now we can relate these objects.

2749
03:11:03,720 --> 03:11:06,000
So, for example, I can do this,

2750
03:11:07,120 --> 03:11:10,000
I can say, God, the R

2751
03:11:10,000 --> 03:11:14,720
is equal to New

2752
03:11:16,440 --> 03:11:20,200
B and W,

2753
03:11:20,200 --> 03:11:31,120
All right.

2754
03:11:31,120 --> 03:11:32,440
I can see

2755
03:11:33,520 --> 03:11:38,160
New Tesla.

2756
03:11:38,440 --> 03:11:41,400
I can see new

2757
03:11:45,760 --> 03:11:51,160
Toyota to make it smaller.

2758
03:11:51,160 --> 03:11:51,520
Yeah.

2759
03:11:51,920 --> 03:11:56,840
So if I have all the objects,

2760
03:11:57,840 --> 03:12:00,720
if I have all the loops,

2761
03:12:01,040 --> 03:12:08,680
all the objects.

2762
03:12:08,680 --> 03:12:11,800
So now what I can do?

2763
03:12:13,400 --> 03:12:14,760
I can

2764
03:12:15,280 --> 03:12:19,360
all types of child class objects

2765
03:12:20,160 --> 03:12:23,960
inside and okay.

2766
03:12:23,960 --> 03:12:26,880
And what I can also do.

2767
03:12:26,880 --> 03:12:29,640
So for example, let's say guys,

2768
03:12:29,640 --> 03:12:31,960
I have to call this stock method

2769
03:12:33,000 --> 03:12:37,000
from all the guys
that are present in here.

2770
03:12:37,720 --> 03:12:41,120
So what I have to do,
I have to do this if I don't use

2771
03:12:41,120 --> 03:12:45,240
polymorphism, I have to do this

2772
03:12:47,040 --> 03:12:47,760
Toyota.

2773
03:12:47,760 --> 03:12:51,160
Toyota is equal to
and you let me start from

2774
03:12:51,160 --> 03:12:54,120
the BMW.

2775
03:12:54,680 --> 03:12:56,920
BMW is equal for me.

2776
03:12:56,920 --> 03:13:00,800
BMW, BMW,

2777
03:13:00,800 --> 03:13:08,560
dot spark.

2778
03:13:08,560 --> 03:13:12,800
What we know

2779
03:13:12,840 --> 03:13:16,200
blue the stop

2780
03:13:16,200 --> 03:13:19,680
BMW lot

2781
03:13:19,680 --> 03:13:21,720
lot right

2782
03:13:21,960 --> 03:13:24,120
if I have to do this

2783
03:13:24,360 --> 03:13:28,960
same thing for the Tesla I have to say

2784
03:13:30,600 --> 03:13:32,160
Tesla

2785
03:13:33,680 --> 03:13:36,960
s nio

2786
03:13:36,960 --> 03:13:39,000
that's slow

2787
03:13:43,400 --> 03:13:45,320
and slow right

2788
03:13:45,320 --> 03:13:48,200
And then I have to do this same for Toyota

2789
03:13:50,040 --> 03:13:52,280
in the one

2790
03:13:55,800 --> 03:14:00,960
and small

2791
03:14:04,760 --> 03:14:05,160
block.

2792
03:14:05,160 --> 03:14:05,840
Right.

2793
03:14:06,200 --> 03:14:08,920
So I have to do this.

2794
03:14:08,920 --> 03:14:11,600
Now, imagine
don't say that inside Siberia.

2795
03:14:11,640 --> 03:14:13,720
We can boss parameters too.

2796
03:14:13,720 --> 03:14:15,840
Yes, we can.

2797
03:14:16,280 --> 03:14:17,800
So but we have do it.

2798
03:14:17,800 --> 03:14:23,920
Imagine, guys, there are 1000 matters
that are present in the child classes.

2799
03:14:24,000 --> 03:14:27,560
So you put lines from quiet routines
into like quantity.

2800
03:14:28,400 --> 03:14:29,040
Oh, no.

2801
03:14:29,040 --> 03:14:32,520
There is still a piece missing
that that is not complete.

2802
03:14:32,720 --> 03:14:40,320
So now if I take your discord,
I will see the output.

2803
03:14:40,320 --> 03:14:42,440
So now I see use the button.

2804
03:14:42,440 --> 03:14:45,520
Usually break me manually, use the mobile.

2805
03:14:45,960 --> 03:14:47,520
You will replay, blah blah, blah.

2806
03:14:47,520 --> 03:14:50,040
So I see all the
outputs from all the objects

2807
03:14:52,240 --> 03:14:54,320
we use new BMW or new

2808
03:14:54,560 --> 03:14:57,120
to change the name road
car to use same name.

2809
03:14:59,040 --> 03:15:01,440
We're now.

2810
03:15:01,440 --> 03:15:03,920
Can you tell me the line number?

2811
03:15:03,920 --> 03:15:06,680
Should we do this
or just showing variations?

2812
03:15:07,080 --> 03:15:07,800
I would do.

2813
03:15:07,800 --> 03:15:10,040
If you guys are typing

2814
03:15:10,480 --> 03:15:12,360
now, I'm using the same name.

2815
03:15:12,360 --> 03:15:18,000
There's BMW here from BMW here,
if you mean these cars.

2816
03:15:19,080 --> 03:15:22,360
Yes, because I had a car
variable previously,

2817
03:15:22,360 --> 03:15:33,240
so I can not have to duplicate variables
in a matter.

2818
03:15:33,240 --> 03:15:36,520
So instead of writing this code
and imagine

2819
03:15:36,520 --> 03:15:40,640
there are maybe 50 classes, ten classes,

2820
03:15:40,640 --> 03:15:44,720
four classes
each class having 100 meters, 200 meters.

2821
03:15:45,080 --> 03:15:46,960
What do you guys can do?

2822
03:15:46,960 --> 03:15:50,040
You guys can write a loop

2823
03:15:51,400 --> 03:15:53,160
for each loop.

2824
03:15:53,160 --> 03:15:55,360
You can see

2825
03:15:56,800 --> 03:16:01,440
Gaga from cars, oops cars,

2826
03:16:02,040 --> 03:16:04,920
and you can see car door start

2827
03:16:06,600 --> 03:16:08,760
or stop

2828
03:16:10,160 --> 03:16:12,840
car door lock.

2829
03:16:12,840 --> 03:16:16,000
And even if if if I comment this code

2830
03:16:16,000 --> 03:16:20,000
now for a moment.

2831
03:16:20,000 --> 03:16:24,360
So this piece of code is equivalent to
all the code that we have written above.

2832
03:16:24,600 --> 03:16:25,440
Above

2833
03:16:26,880 --> 03:16:28,960
we are learning
how to do something a little

2834
03:16:29,520 --> 03:16:36,000
how not You will learn.

2835
03:16:36,000 --> 03:16:38,520
So I see all the output from here.

2836
03:16:38,960 --> 03:16:39,600
Okay,

2837
03:16:40,480 --> 03:16:44,040
so with the help of polymorphism,
what is happening here?

2838
03:16:45,160 --> 03:16:49,800
This method of star is acting differently

2839
03:16:50,760 --> 03:16:56,160
when it is acting up
on this new BMW object,

2840
03:16:57,000 --> 03:16:59,800
it acts differently

2841
03:16:59,800 --> 03:17:03,160
when it X on this Tesla object,

2842
03:17:03,160 --> 03:17:07,560
it acts differently
when it acts on the Toyota object.

2843
03:17:07,560 --> 03:17:10,280
So based on the objects

2844
03:17:10,960 --> 03:17:15,320
method is behaving differently.

2845
03:17:15,320 --> 03:17:17,800
This is all polymorphism. Yes.

2846
03:17:18,760 --> 03:17:21,360
I mean, this is just a start.

2847
03:17:21,360 --> 03:17:23,800
We still have one hour and 28 or 10

2848
03:17:23,800 --> 03:17:27,840
minutes.

2849
03:17:27,840 --> 03:17:29,800
So you guys see if

2850
03:17:31,280 --> 03:17:32,040
I'm just feeling

2851
03:17:32,040 --> 03:17:35,760
that there's all five polymorphism.

2852
03:17:35,760 --> 03:17:41,760
So if you guys notice that instead
of creating the individual objects

2853
03:17:41,760 --> 03:17:46,480
and then calling the methods
on those objects,

2854
03:17:46,480 --> 03:17:50,160
what I can do,
I can store the objects in an area

2855
03:17:51,600 --> 03:17:54,040
the time type of the array will be the

2856
03:17:56,680 --> 03:18:01,720
parent type.

2857
03:18:01,720 --> 03:18:04,800
And then using the loop, I get this

2858
03:18:05,320 --> 03:18:09,360
first object I call all these tree matter.

2859
03:18:09,360 --> 03:18:12,720
I get the next object,
I store it inside the card.

2860
03:18:12,720 --> 03:18:16,440
I call again
this method by the next object,

2861
03:18:16,440 --> 03:18:21,040
and I call these methods again.

2862
03:18:21,040 --> 03:18:26,240
So Nabeel was saying why in overwriting
the return type, they they matter.

2863
03:18:26,240 --> 03:18:29,640
So Nabeel,
you see in this cards variables.

2864
03:18:29,640 --> 03:18:33,840
If one class is returning and indeed
other classes that are turning a Boolean,

2865
03:18:33,840 --> 03:18:37,640
other classes are returning
something else, this code will fail.

2866
03:18:37,760 --> 03:18:41,040
You will not be able
to generalize this in here.

2867
03:18:41,880 --> 03:18:44,960
You will not be able to call all
the methods because for one

2868
03:18:46,000 --> 03:18:46,960
method,

2869
03:18:47,760 --> 03:18:50,400
the output will be different time,
the other methods out

2870
03:18:50,480 --> 03:18:51,560
will be different time.

2871
03:18:51,560 --> 03:18:55,640
The other method output,
the different types.

2872
03:18:56,840 --> 03:19:10,200
Do you guys have any questions?

2873
03:19:10,200 --> 03:19:12,240
So let me show you one more.

2874
03:19:12,240 --> 03:19:13,840
One more example.

2875
03:19:13,840 --> 03:19:16,560
One more in
this example will make more sense.

2876
03:19:16,560 --> 03:19:18,480
So as a tester, guys,

2877
03:19:18,480 --> 03:19:21,920
you guys will be testing your applications
on Google Chrome,

2878
03:19:21,920 --> 03:19:27,720
on Firefox, on Internet Explorer,
on Spotify or something like that.

2879
03:19:27,720 --> 03:19:31,000
Right. So what do you think?

2880
03:19:31,000 --> 03:19:34,360
Will you guys be writing separate code
for all of these

2881
03:19:34,360 --> 03:19:41,520
browsers?

2882
03:19:41,520 --> 03:19:42,760
No, no.

2883
03:19:42,760 --> 03:19:45,440
If you don't learn the

2884
03:19:45,440 --> 03:19:47,240
polymorphism, definitely

2885
03:19:47,240 --> 03:19:52,280
you will have to write a different code.

2886
03:19:52,280 --> 03:19:59,800
So it'll be same place.

2887
03:19:59,800 --> 03:20:00,680
Can I see the test?

2888
03:20:00,680 --> 03:20:06,480
So for you,
let me know once you guys are done

2889
03:20:06,480 --> 03:20:33,360
typing this.

2890
03:20:33,360 --> 03:20:35,360
Yes. For the loop.

2891
03:20:35,360 --> 03:20:38,240
Because if you guys write

2892
03:20:38,240 --> 03:20:41,920
anything else like BMW,

2893
03:20:42,120 --> 03:20:47,680
you know that we can only store
BMW objects in here.

2894
03:20:47,680 --> 03:20:48,840
I have already

2895
03:20:49,920 --> 03:20:52,040
submitted it in degree,

2896
03:20:52,040 --> 03:20:55,920
but I cannot store test
like in our store prior to their slide.

2897
03:20:55,920 --> 03:21:05,360
This type it should got here
because we have just learned

2898
03:21:05,360 --> 03:21:10,400
that the dependent type object
is something bigger.

2899
03:21:10,400 --> 03:21:19,680
It can hold all of its tiles.

2900
03:21:19,680 --> 03:21:22,360
Yes, it will always be paid in class.

2901
03:21:22,400 --> 03:21:25,040
Are we recording?

2902
03:21:25,040 --> 03:21:27,720
Oh my God, Yes, we are recording.

2903
03:21:29,200 --> 03:21:39,520
Okay,

2904
03:21:39,520 --> 03:21:43,080
we moved many

2905
03:21:43,080 --> 03:21:46,080
if it is indicating that it is recording.

2906
03:21:46,120 --> 03:21:49,960
Yes, I know why

2907
03:21:49,960 --> 03:21:53,040
you guys are dividing me
after one hour or 30 minutes.

2908
03:21:53,040 --> 03:21:53,800
Right?

2909
03:21:54,560 --> 03:22:06,720
How We're recording after 30 minutes.

2910
03:22:06,720 --> 03:22:08,760
And this is my question.

2911
03:22:08,760 --> 03:22:11,720
Why it came after 30 minutes.

2912
03:22:13,040 --> 03:22:14,960
My friend has this question in interview

2913
03:22:14,960 --> 03:22:17,720
explained polymorphism.

2914
03:22:18,000 --> 03:22:21,600
Can we collect all the behaviors of two
lives in a loop?

2915
03:22:21,600 --> 03:22:22,280
Yes, but I

2916
03:22:29,760 --> 03:22:33,480
we are programed for every 30 minutes.

2917
03:22:33,480 --> 03:22:35,360
So let's do one more example, guys.

2918
03:22:35,360 --> 03:22:48,360
This example, it will make more sense.

2919
03:22:48,360 --> 03:22:52,120
So in this very first class of selenium

2920
03:22:52,440 --> 03:22:56,640
in the next week,
you guys will be using this polymorphism.

2921
03:22:57,160 --> 03:22:57,880
Okay.

2922
03:22:58,320 --> 03:23:01,560
So there will be a RAM driver class

2923
03:23:02,760 --> 03:23:04,560
that you guys will use

2924
03:23:04,560 --> 03:23:09,600
as the parent class
and all the Google guys all created

2925
03:23:09,600 --> 03:23:14,600
Chrome, all the Firefox guys,
all the Internet Explorer guys.

2926
03:23:15,240 --> 03:23:18,000
Now, by the way, they are all dead,

2927
03:23:18,000 --> 03:23:23,160
all the funny guys, they have implemented

2928
03:23:23,680 --> 03:23:26,480
this web driver interface here.

2929
03:23:27,640 --> 03:23:30,520
And inside this web driver,

2930
03:23:31,240 --> 03:23:34,320
we have defined

2931
03:23:35,360 --> 03:23:37,200
the the the selenium guys.

2932
03:23:37,200 --> 03:23:39,400
They have defined which methods

2933
03:23:40,440 --> 03:23:45,240
the Chrome should implement,
which matters.

2934
03:23:45,240 --> 03:23:47,400
The Firefox should have this
which matters.

2935
03:23:47,400 --> 03:23:51,600
The internet Explorer should have saw that
you guys

2936
03:23:52,240 --> 03:23:57,720
just changed the object
from Chrome to Firefox.

2937
03:23:59,000 --> 03:24:00,160
You execute

2938
03:24:00,160 --> 03:24:04,200
all the
methods and all the testing is done on.

2939
03:24:04,200 --> 03:24:05,840
Let me show you how it will work.

2940
03:24:05,840 --> 03:24:07,160
So what is what?

2941
03:24:07,160 --> 03:24:09,400
What happens is that

2942
03:24:09,400 --> 03:24:11,400
you will be having a method wide

2943
03:24:13,200 --> 03:24:15,720
open side

2944
03:24:37,640 --> 03:25:36,040
board.

2945
03:25:36,040 --> 03:25:38,840
Let's say you guys are writing
so many methods, right?

2946
03:25:39,240 --> 03:25:41,160
For to test something.

2947
03:25:41,160 --> 03:25:43,920
You guys will be writing
so many test cases right

2948
03:25:44,480 --> 03:25:48,440
click in here to check
if it really is working fine or not.

2949
03:25:49,520 --> 03:25:51,000
Enter the wrong password.

2950
03:25:51,000 --> 03:25:52,440
Enter the correct password.

2951
03:25:52,440 --> 03:25:55,320
Pick on that button, enter it
without entering anything.

2952
03:25:55,320 --> 03:27:45,480
So, so many variations.

2953
03:27:45,480 --> 03:27:47,880
The last.

2954
03:27:47,880 --> 03:27:48,120
Okay,

2955
03:27:49,080 --> 03:27:51,840
you guys have to do these tasks

2956
03:27:53,400 --> 03:27:55,240
on all the browsers.

2957
03:27:55,240 --> 03:27:55,800
Okay.

2958
03:27:56,840 --> 03:27:58,920
So let me know what you guys are done
typing

2959
03:27:58,920 --> 03:28:06,520
this code.

2960
03:28:06,520 --> 03:28:08,400
You guys are fast.

2961
03:28:08,400 --> 03:28:10,960
How how, how much you
guys have improved, right?

2962
03:28:12,040 --> 03:28:12,920
You guys used to

2963
03:28:12,920 --> 03:28:19,200
be very slow.

2964
03:28:19,200 --> 03:28:20,520
That's great.

2965
03:28:20,520 --> 03:28:24,600
So is it better, guys,

2966
03:28:25,200 --> 03:28:27,920
if I create the next classes
inside the same file?

2967
03:28:27,920 --> 03:28:30,080
Or should I create separate classes?

2968
03:28:30,080 --> 03:28:31,400
Which one way?

2969
03:28:31,400 --> 03:28:38,480
Which will be the better way?

2970
03:28:38,480 --> 03:28:44,760
Okay, so in here, now let me create last

2971
03:28:46,280 --> 03:28:48,280
we will Chrome

2972
03:28:50,640 --> 03:28:52,960
and that class

2973
03:28:52,960 --> 03:28:55,960
is extending from

2974
03:28:58,080 --> 03:28:59,800
web driver

2975
03:29:00,080 --> 03:29:03,600
ACP so we can see both together.

2976
03:29:03,640 --> 03:29:14,520
For me.

2977
03:29:14,520 --> 03:29:18,360
So then you guys will copy

2978
03:29:19,000 --> 03:29:22,560
this call will place it in here,

2979
03:29:22,560 --> 03:29:26,160
opening a website and

2980
03:29:27,840 --> 03:29:30,960
and you will

2981
03:29:31,080 --> 03:29:31,880
chrome

2982
03:30:01,320 --> 03:30:02,000
and Google Chrome.

2983
03:30:02,000 --> 03:30:02,400
Right.

2984
03:30:02,840 --> 03:30:05,280
So because Google Chrome

2985
03:30:05,520 --> 03:30:08,480
is a different browser,
it works differently.

2986
03:30:08,480 --> 03:30:11,880
So Google guys,
they have implemented all of these methods

2987
03:30:12,920 --> 03:30:16,560
in a different way.

2988
03:30:16,560 --> 03:30:42,080
Are you guys done typing
this code as well?

2989
03:30:42,080 --> 03:30:44,760
Then you will be having a class in which

2990
03:30:45,800 --> 03:30:46,640
Firefox

2991
03:30:46,640 --> 03:31:15,160
guys.

2992
03:31:15,160 --> 03:31:17,640
Yes, we are overwriting

2993
03:31:23,480 --> 03:31:27,920
now we have the Firefox class
that is also extending the web driver

2994
03:31:27,960 --> 03:31:32,360
and now I do all the testing in Firefox.

2995
03:31:32,360 --> 03:31:35,240
If control are

2996
03:31:35,400 --> 03:31:40,280
if you press the controller, make sure
you guys don't replace the previous code.

2997
03:31:40,920 --> 03:31:45,000
So if you press controller
it is highlighting right now this keyword.

2998
03:31:45,000 --> 03:31:46,280
Okay. So

2999
03:31:49,960 --> 03:31:52,360
if you do the replace in here

3000
03:31:52,800 --> 03:31:56,240
by pressing controller,
it will replace this keyword again,

3001
03:31:56,280 --> 03:31:59,440
make sure it is this
this keyword is highlighted in here.

3002
03:31:59,520 --> 03:32:02,880
If you have a Google Chrome in here

3003
03:32:12,560 --> 03:32:15,000
it looks create

3004
03:32:17,360 --> 03:32:19,160
40 over

3005
03:32:21,920 --> 03:32:24,120
four all these matters

3006
03:32:24,120 --> 03:32:26,960
to test different things on different
browsers.

3007
03:32:26,960 --> 03:32:29,920
They they are already written for you.

3008
03:32:30,080 --> 03:32:31,920
You guys don't have to write these
methods.

3009
03:32:31,920 --> 03:32:36,160
You guys just tell these matters
which filter to best,

3010
03:32:36,440 --> 03:32:39,480
which checkbox to check,
which in which field

3011
03:32:39,640 --> 03:32:42,480
you need to enter the data,
which page to load this method.

3012
03:32:42,520 --> 03:32:48,160
They are outdated and you guys just need
to understand how to test these methods

3013
03:33:26,280 --> 03:33:29,920
by move it to the next highlighted method.

3014
03:33:29,920 --> 03:33:35,000
So once it highlights this one,
I move it to the next, next, next.

3015
03:33:35,000 --> 03:33:38,200
And now I want to start the replacement.

3016
03:33:38,200 --> 03:33:39,000
I have a question.

3017
03:33:39,000 --> 03:33:42,360
Our class
Firefox need to be inside the main class.

3018
03:33:42,680 --> 03:33:44,920
No, it should be outside of main class.

3019
03:33:47,000 --> 03:33:47,320
Okay.

3020
03:33:47,320 --> 03:33:51,040
So now this word has been highlighted

3021
03:34:29,920 --> 03:34:31,080
as just give me one more.

3022
03:34:31,080 --> 03:34:34,200
Let me ask about
your review class on Monday.

3023
03:34:35,160 --> 03:34:38,680
If she confirms
then you guys will be having the review.

3024
03:34:38,680 --> 03:34:40,200
Otherwise

3025
03:34:55,000 --> 03:34:57,920
it so yes, you guys are having
a review class on Monday.

3026
03:34:59,040 --> 03:35:01,720
If Suhail feels better,

3027
03:35:01,720 --> 03:35:02,920
he will be doing the review.

3028
03:35:02,920 --> 03:35:08,280
But you can tell them that yes,
we are going to have.

3029
03:35:08,280 --> 03:35:15,760
So yes,
you guys are having your review on Monday.

3030
03:35:15,760 --> 03:35:17,640
I will post it on in course. And also

3031
03:35:19,280 --> 03:35:20,280
the highlighted

3032
03:35:20,280 --> 03:35:24,160
in this one is highlighted right now
housing on line 67,

3033
03:35:25,320 --> 03:35:28,880
same time. Yes.

3034
03:35:28,880 --> 03:35:31,080
Only for this week,

3035
03:35:31,080 --> 03:35:33,320
same 3 hours.

3036
03:35:33,960 --> 03:35:35,400
Yes. I tried in Thursday as well.

3037
03:35:35,400 --> 03:35:37,080
You guys will be having the classes.

3038
03:35:37,080 --> 03:35:44,640
It's only five week
because of Thanksgiving.

3039
03:35:44,640 --> 03:35:46,280
So now I can replace somebody.

3040
03:35:46,280 --> 03:35:47,920
So far each of

3041
03:35:51,960 --> 03:35:54,480
so now I have three classes

3042
03:35:55,040 --> 03:36:00,720
which are doing the exact same thing,
but in a slightly different way.

3043
03:36:01,120 --> 03:36:01,920
Okay.

3044
03:36:02,120 --> 03:36:06,280
Because if you compare to how
we browse the Web site on Google Chrome

3045
03:36:06,480 --> 03:36:09,840
versus how we write on versus

3046
03:36:09,840 --> 03:36:13,520
on Safari,
we get almost the same experience.

3047
03:36:13,520 --> 03:36:16,720
But sometimes for testing reasons,
we have to test

3048
03:36:16,720 --> 03:36:20,080
all our websites on all famous browsers.

3049
03:36:20,280 --> 03:36:25,400
Okay, So does that mean that
we have to evaluate the code for the

3050
03:36:26,760 --> 03:36:28,680
browser separately? No.

3051
03:36:28,680 --> 03:36:31,360
With the help of polymorphism,

3052
03:36:32,200 --> 03:36:37,120
you guys just need to change the object

3053
03:36:38,120 --> 03:36:40,560
and whole piece of code.

3054
03:36:40,560 --> 03:36:42,720
Even if there are 1 million lines,

3055
03:36:43,200 --> 03:36:47,120
they will be executed for a very
totally different thing.

3056
03:36:47,240 --> 03:36:57,520
Let me show. So.

3057
03:36:57,520 --> 03:37:02,960
So for example, if I create a web

3058
03:37:04,480 --> 03:37:05,920
browser over

3059
03:37:06,320 --> 03:37:27,800
faster, so if I have to test something

3060
03:37:27,800 --> 03:37:36,480
on Google Chrome, what I will do,
I will say, which

3061
03:37:37,720 --> 03:37:40,920
we will go on Google
Chrome is equal to me on

3062
03:37:42,120 --> 03:37:43,600
Google Chrome.

3063
03:37:44,160 --> 03:37:46,440
Then I

3064
03:37:49,320 --> 03:37:52,080
then I Google Chrome load

3065
03:37:54,240 --> 03:37:57,840
open website, Google Chrome Board,

3066
03:37:58,960 --> 03:38:02,240
sign up Google Chrome or

3067
03:38:03,400 --> 03:38:06,240
log in Google Chrome.

3068
03:38:06,240 --> 03:38:11,400
What Enter Username password

3069
03:38:11,400 --> 03:38:13,560
Google Chrome dot

3070
03:38:15,480 --> 03:38:19,200
Click somewhere to put on Google Chrome

3071
03:38:19,960 --> 03:38:20,800
goes about it.

3072
03:38:20,800 --> 03:38:23,160
So this completes one of my test cases.

3073
03:38:24,480 --> 03:38:27,840
We only off on Thanksgiving Day
and Friday.

3074
03:38:27,840 --> 03:38:29,640
Basically the rest of the

3075
03:38:29,640 --> 03:38:32,600
and we make it and then loop
yes we will load that as well.

3076
03:38:33,120 --> 03:38:36,160
So guys
if I am not using the polymorphism,

3077
03:38:36,320 --> 03:38:39,920
if I am creating the object
straight away, right.

3078
03:38:40,440 --> 03:38:44,720
The way I you guys have been doing,
I can write this code,

3079
03:38:44,720 --> 03:38:48,960
I can execute and all the test cases
they will be executed on Google Chrome.

3080
03:38:48,960 --> 03:38:49,600
Right?

3081
03:38:51,240 --> 03:38:52,800
So I see Google Chrome every bit.

3082
03:38:52,800 --> 03:38:53,120
Right?

3083
03:38:53,120 --> 03:38:55,600
All the test cases are executed
on Google Chrome.

3084
03:38:56,280 --> 03:38:59,040
And then if I have to do same thing

3085
03:38:59,680 --> 03:39:02,160
on Firefox,

3086
03:39:02,440 --> 03:39:06,400
I have to again

3087
03:39:06,480 --> 03:39:09,720
write this piece of code.

3088
03:39:11,680 --> 03:39:13,680
Firefox.

3089
03:39:14,240 --> 03:39:18,040
Firefox, Firefox

3090
03:39:18,240 --> 03:39:19,760
and then

3091
03:39:26,520 --> 03:39:28,040
and then I can execute

3092
03:39:28,040 --> 03:39:34,680
everything on Firefox.

3093
03:39:34,680 --> 03:39:38,400
I see Firefox, Firefox, Firefox.

3094
03:39:38,400 --> 03:39:41,840
Now imagine
there are hundreds of test cases.

3095
03:39:42,800 --> 03:39:43,400
Okay,

3096
03:39:43,400 --> 03:39:45,560
you guys
will be writing hundreds of test cases.

3097
03:39:46,360 --> 03:39:48,480
So if you want to test

3098
03:39:48,760 --> 03:39:51,720
those, test cases on Google Chrome,

3099
03:39:52,160 --> 03:39:56,640
you will be repeating
all of those under test cases.

3100
03:39:56,640 --> 03:39:58,520
Let's say for example, for Google Chrome.

3101
03:39:58,520 --> 03:40:02,120
First, then
you will create the object of Firefox.

3102
03:40:02,120 --> 03:40:05,720
You will repeat
all those 100 lines of code again,

3103
03:40:06,120 --> 03:40:08,720
then it will be executed on Firefox.

3104
03:40:08,720 --> 03:40:10,960
You will repeat again
those hundred lines of code

3105
03:40:10,960 --> 03:40:14,200
for Firefox for Safari
and then they will be executed on that.

3106
03:40:14,200 --> 03:40:18,880
But if you use the polymorphism,

3107
03:40:18,880 --> 03:40:21,760
what do you guys can do

3108
03:40:22,600 --> 03:40:23,880
elected to convert this out?

3109
03:40:23,880 --> 03:40:26,680
And let me show you
the power of polymorphism.

3110
03:40:26,680 --> 03:40:30,640
So with polymorphism,
we just say web driver

3111
03:40:31,480 --> 03:40:34,360
web driver is equal to new

3112
03:40:34,360 --> 03:40:42,360
Chrome, new

3113
03:40:42,480 --> 03:40:45,840
Google Chrome.

3114
03:40:45,840 --> 03:40:46,760
And let me

3115
03:41:00,080 --> 03:41:02,880
if you guys want to

3116
03:41:02,880 --> 03:41:04,680
execute the test cases,

3117
03:41:04,680 --> 03:41:07,760
you would simply store
Google Chrome in here.

3118
03:41:08,920 --> 03:41:11,720
All these test cases,
they will be executed for

3119
03:41:11,760 --> 03:41:16,160
Google Chrome.

3120
03:41:16,160 --> 03:41:17,840
Okay. Google Chrome, Google Chrome.

3121
03:41:17,840 --> 03:41:21,480
You want tested on Firefox
just to change this object?

3122
03:41:22,200 --> 03:41:26,040
There are one line code,
all the test cases.

3123
03:41:26,040 --> 03:41:28,720
Now they will be executed for Firefox,

3124
03:41:29,400 --> 03:41:32,120
Firefox, Firefox, Firefox.

3125
03:41:32,120 --> 03:41:34,480
You are tested safari.

3126
03:41:34,800 --> 03:41:37,480
No issues, just change this object

3127
03:41:38,400 --> 03:41:40,880
and all the test cases will be executed

3128
03:41:40,880 --> 03:41:44,320
for safari.

3129
03:41:44,320 --> 03:41:47,320
So you write the methods in here.

3130
03:41:48,680 --> 03:41:51,640
You just to change the object

3131
03:41:51,800 --> 03:41:54,360
on which those methods act.

3132
03:41:55,320 --> 03:41:59,320
And now all the methods will behave
differently

3133
03:41:59,320 --> 03:42:05,720
can behave totally differently.

3134
03:42:05,720 --> 03:42:07,320
Does it make sense, guys? Why?

3135
03:42:07,320 --> 03:42:15,080
Why? Polymorphism can be very useful.

3136
03:42:15,080 --> 03:42:19,360
So we just change the object

3137
03:42:19,800 --> 03:42:24,080
that we are storing
inside the parent by predictable.

3138
03:42:24,800 --> 03:42:29,280
And now all the methods,
they behave totally differently.

3139
03:42:29,520 --> 03:42:32,640
All of these classes
you don't have to write these classes.

3140
03:42:32,640 --> 03:42:35,640
They are already written by someone else.

3141
03:42:36,960 --> 03:42:38,120
So you guys

3142
03:42:38,120 --> 03:42:41,840
just need to know how to use effectively.

3143
03:42:42,040 --> 03:42:44,560
Okay,
if you guys don't know the polymorphism,

3144
03:42:44,880 --> 03:42:48,200
you guys will be writing a lot of thought,
a lot of thought.

3145
03:42:48,600 --> 03:42:51,400
Imagine building a framework
where there are

3146
03:42:51,400 --> 03:42:54,960
maybe 1000 test cases in thousand,
3000 test cases.

3147
03:42:55,480 --> 03:42:57,680
You have to test
those test cases on Google Chrome.

3148
03:42:58,280 --> 03:43:02,520
You write all the methods you do
clear the objects, you do everything,

3149
03:43:03,120 --> 03:43:06,280
and then you want to do it for Firefox.

3150
03:43:06,280 --> 03:43:08,560
You again redo all that stuff.

3151
03:43:08,560 --> 03:43:13,040
But in indeed in actually what
you are doing, you are simply changing

3152
03:43:14,280 --> 03:43:17,840
the object
that you are storing in that variable.

3153
03:43:17,880 --> 03:43:20,920
So if we want all the classes we use,
that is yes.

3154
03:43:20,920 --> 03:43:23,200
So now let's say

3155
03:43:23,480 --> 03:43:30,080
you want to execute all the methods
from all the browsers in a loop

3156
03:43:30,080 --> 03:43:33,400
so you guys can write a
loop, you can declare a an ad

3157
03:43:34,920 --> 03:43:37,280
lib drivers web driver

3158
03:43:38,880 --> 03:43:41,720
web drivers and see where to.

3159
03:43:41,720 --> 03:43:44,520
Then you can say new Google Chrome,

3160
03:43:45,600 --> 03:43:48,200
new Firefox,

3161
03:43:49,200 --> 03:43:56,520
new Safari.

3162
03:43:56,520 --> 03:43:59,040
You can write a loop

3163
03:43:59,040 --> 03:44:01,160
for each

3164
03:44:03,240 --> 03:44:05,280
random driver

3165
03:44:05,480 --> 03:44:08,360
or driver is included to drivers

3166
03:44:09,640 --> 03:44:11,160
in their script.

3167
03:44:11,160 --> 03:44:14,160
You copy piece of code, you put it in here

3168
03:44:21,360 --> 03:44:23,360
and now if I call this

3169
03:44:23,360 --> 03:44:27,600
call out as well,

3170
03:44:27,600 --> 03:44:31,200
it will execute all the methods
from all the classes

3171
03:44:36,000 --> 03:44:36,440
opening

3172
03:44:36,440 --> 03:44:40,520
a Google Chrome, Firefox Safari
and there can be thousands

3173
03:44:40,520 --> 03:44:45,240
of these methods
if How to change web driver to W.

3174
03:44:45,240 --> 03:44:47,440
Can you repeat the third shortcut?

3175
03:44:47,440 --> 03:44:49,080
It's not a shortcut.

3176
03:44:49,080 --> 03:44:53,400
You mean in here
or you hold down your all button

3177
03:44:54,240 --> 03:44:58,360
and then you use your left mouse click
to draw this line vertically.

3178
03:44:59,080 --> 03:45:02,440
Once you have drawn the line,
you can leave it like that

3179
03:45:03,000 --> 03:45:04,760
and then you can put anything in here.

3180
03:45:06,240 --> 03:45:08,760
It's called vertical editing.

3181
03:45:10,320 --> 03:45:12,520
If we write Neil, Google Chrome

3182
03:45:12,520 --> 03:45:15,960
click,
but summit, is it also polymorphism?

3183
03:45:15,960 --> 03:45:17,640
No, it's not polymorphism.

3184
03:45:17,640 --> 03:45:20,000
This is polymorphism.

3185
03:45:20,000 --> 03:45:21,600
This is polymorphism.

3186
03:45:21,600 --> 03:45:24,080
Same third, behaving

3187
03:45:24,120 --> 03:45:27,480
differently based on the object.

3188
03:45:27,480 --> 03:45:30,000
This is polymorphism inside this loop

3189
03:45:36,800 --> 03:45:37,600
that you can make sense.

3190
03:45:37,600 --> 03:45:45,840
Guys.

3191
03:45:45,840 --> 03:45:46,080
Okay.

3192
03:45:46,080 --> 03:45:48,960
Let's let's go to the slides once

3193
03:45:49,360 --> 03:45:54,280
and then we will do more examples.

3194
03:45:54,280 --> 03:45:57,160
So now, now I hope it will make sense.

3195
03:45:57,480 --> 03:46:00,960
Polymorphism is one of the feature

3196
03:46:02,000 --> 03:46:05,120
that allow us to perform

3197
03:46:05,120 --> 03:46:08,480
a single action in different ways.

3198
03:46:08,880 --> 03:46:10,000
Okay. And B matters.

3199
03:46:10,000 --> 03:46:15,040
They are still same same actors,
but they are acting differently

3200
03:46:16,360 --> 03:46:18,720
because we are storing different objects

3201
03:46:19,440 --> 03:46:23,680
inside that beta type variable.

3202
03:46:23,680 --> 03:46:27,880
Polymorphism is the capability of a method
to do different

3203
03:46:27,880 --> 03:46:31,960
things based on the object
and that it is acting up on.

3204
03:46:31,960 --> 03:46:37,680
Okay, we see a different object
in the variable method X differently.

3205
03:46:38,160 --> 03:46:41,040
If we store a different object,
it gets different view

3206
03:46:42,480 --> 03:46:43,600
and important.

3207
03:46:43,600 --> 03:46:47,800
The usage of polymorphism occurs
in loop in oops

3208
03:46:48,320 --> 03:46:53,920
is how it fit in the class
refers to a Charlie class,

3209
03:46:53,920 --> 03:46:57,720
so this polymorphism can be achieved
in two falling ways.

3210
03:46:57,720 --> 03:47:02,760
Compile time static bounding through
method overloading so method

3211
03:47:02,760 --> 03:47:07,520
overloading is also a type of polymorphism
same method.

3212
03:47:08,000 --> 03:47:13,200
It behaves differently
when we pass different parameters.

3213
03:47:13,200 --> 03:47:16,880
It is also a type of polymorphism,
but it is a static one.

3214
03:47:17,000 --> 03:47:18,480
It's not a dynamic one.

3215
03:47:18,480 --> 03:47:20,800
So we cannot write those loops
and all that

3216
03:47:23,600 --> 03:47:26,800
is actually methods
acts differently according to the objects.

3217
03:47:27,000 --> 03:47:31,800
And so in here
the method is acting differently

3218
03:47:31,800 --> 03:47:36,360
based on the object in compile time
polymorphism in overloading

3219
03:47:37,040 --> 03:47:41,280
a method of behaves
differently based on parameters.

3220
03:47:41,640 --> 03:47:43,640
So it is also type of polymorphism

3221
03:47:45,120 --> 03:47:45,640
runtime.

3222
03:47:45,640 --> 03:47:50,880
Polymorphism dynamic binding is true
method overriding so far

3223
03:47:50,880 --> 03:47:55,120
in that website the sequence is important
because it's like the step.

3224
03:47:55,800 --> 03:47:59,120
Yes, for best
guess is that you guys will be writing.

3225
03:47:59,120 --> 03:48:02,160
Yes, you will be following the sequence,
but it's not mandatory.

3226
03:48:02,160 --> 03:48:08,400
You can call any method in any sequence.

3227
03:48:08,400 --> 03:48:15,680
So the typecasting and our assigning

3228
03:48:15,840 --> 03:48:20,560
value of one type
to a value of another type is known as

3229
03:48:21,600 --> 03:48:22,560
typecasting.

3230
03:48:22,560 --> 03:48:24,960
Yes, I slept for 3 hours.

3231
03:48:25,800 --> 03:48:28,120
So two types of casting in Java.

3232
03:48:28,160 --> 03:48:32,200
Again,
same learning, casting, automatic up

3233
03:48:32,280 --> 03:48:35,640
casting and working
the lower that type typing to hire.

3234
03:48:36,000 --> 03:48:40,320
So when we store a a child object

3235
03:48:40,320 --> 03:48:43,280
in a parent type variable,

3236
03:48:44,440 --> 03:48:46,440
this is what we say we are doing.

3237
03:48:46,440 --> 03:48:48,040
Widening what is starting binding.

3238
03:48:48,040 --> 03:48:51,840
Starting binding is another name
for our method overloading overloading.

3239
03:48:52,200 --> 03:48:54,360
So methods need to be done in sequence.

3240
03:48:54,360 --> 03:48:56,720
Example you need to provide the password
before log.

3241
03:48:56,960 --> 03:48:58,960
Yes Mama, it's your business logic.

3242
03:48:58,960 --> 03:49:01,040
We say it's your logic.

3243
03:49:01,040 --> 03:49:04,000
We follow the business logic rules,
but polymorphism,

3244
03:49:04,000 --> 03:49:08,440
it does not have any rules
that this method should be called for us.

3245
03:49:08,480 --> 03:49:09,720
This method should be called after.

3246
03:49:09,720 --> 03:49:11,560
That is your business logic.

3247
03:49:11,560 --> 03:49:14,120
It's your business that is saying that

3248
03:49:14,120 --> 03:49:16,360
we should first enter the log in
and then click on that.

3249
03:49:16,560 --> 03:49:17,880
It's not polymorphism

3250
03:49:20,240 --> 03:49:22,360
and then we have the narrowing casting.

3251
03:49:22,360 --> 03:49:24,120
Okay, same thing.

3252
03:49:24,120 --> 03:49:28,080
The bigger data
type to this smaller one and

3253
03:49:29,440 --> 03:49:34,120
in objects in classes, the parent
or the other type,

3254
03:49:34,400 --> 03:49:37,800
they are the bigger ones, the guys,
they are the smaller ones.

3255
03:49:37,880 --> 03:49:42,840
Okay, so if we go upwards,
we are doing up costing.

3256
03:49:43,160 --> 03:49:55,680
If we go downwards,
we are going down, costing.

3257
03:49:55,680 --> 03:49:59,160
So in here,
if you see we have the parent class,

3258
03:49:59,800 --> 03:50:03,760
we create a variable and we say new child.

3259
03:50:03,760 --> 03:50:07,360
Okay, so is this up
costing or down costing?

3260
03:50:07,360 --> 03:50:10,960
Guys,
I am storing a child inside a pattern type

3261
03:50:10,960 --> 03:50:12,160
variable

3262
03:50:15,120 --> 03:50:17,160
is the up costing, right?

3263
03:50:17,160 --> 03:50:19,800
Storing a smaller thing inside
something bigger.

3264
03:50:20,520 --> 03:50:23,160
And if I store a parent inside the child

3265
03:50:24,880 --> 03:50:25,360
okay,

3266
03:50:26,880 --> 03:50:31,640
and sometimes it is not written
but it is returned but still store

3267
03:50:31,640 --> 03:50:38,200
as they don't see this list
and the downside thing.

3268
03:50:38,200 --> 03:50:44,320
So and this is not allowed
we cannot store parent inside a child

3269
03:50:45,280 --> 03:50:47,080
objects it is not allowed

3270
03:50:47,080 --> 03:50:52,320
so in primitive data types
storing a double inside

3271
03:50:52,320 --> 03:50:56,760
an integer was not allowed right.

3272
03:50:56,760 --> 03:51:02,200
We have we had that workaround
of converting that data type

3273
03:51:02,240 --> 03:51:05,480
with those parentheses. Right.

3274
03:51:05,480 --> 03:51:09,280
So in here it is allowed, but it also

3275
03:51:09,280 --> 03:51:13,080
has that parents either
something like that break in here.

3276
03:51:13,080 --> 03:51:23,560
So for example, for example,

3277
03:51:23,920 --> 03:51:26,760
if I say

3278
03:51:28,800 --> 03:51:29,880
so, this is allowed web

3279
03:51:29,880 --> 03:51:33,120
driver we can store Google Chrome,
Firefox, any body and anything.

3280
03:51:33,120 --> 03:51:35,320
But if we say

3281
03:51:36,600 --> 03:51:38,640
Google Chrome, we will.

3282
03:51:38,640 --> 03:51:41,680
Chrome is equal to new web driver,

3283
03:51:43,600 --> 03:51:45,280
then this is not allowed here.

3284
03:51:45,280 --> 03:51:47,760
We will be getting an added

3285
03:52:00,920 --> 03:52:03,960
but we can do something in here as well.

3286
03:52:04,560 --> 03:52:06,840
If let's say we have

3287
03:52:08,400 --> 03:52:12,960
a web driver web
driver if we initially store

3288
03:52:16,520 --> 03:52:18,000
Google Chrome inside

3289
03:52:18,000 --> 03:52:21,760
this variable,
then we can extract it back.

3290
03:52:22,280 --> 03:52:25,000
Okay? Then we can extract it back.

3291
03:52:25,000 --> 03:52:27,720
So, for example, in here,
the down casting will work.

3292
03:52:27,840 --> 03:52:30,360
Okay, I can see

3293
03:52:30,360 --> 03:52:31,880
Google Chrome.

3294
03:52:31,880 --> 03:52:35,080
Chrome is equal to web driver

3295
03:52:36,360 --> 03:52:40,400
and in here
I can specify these parentheses like this,

3296
03:52:41,040 --> 03:52:45,480
but it will only work if have first stored

3297
03:52:46,560 --> 03:52:49,640
Google Chrome inside
that parent type variable.

3298
03:52:49,640 --> 03:52:52,920
Then only you can down cost it,
then only it will work.

3299
03:52:52,920 --> 03:53:01,920
Otherwise will not work.

3300
03:53:01,920 --> 03:53:03,600
But why we need that?

3301
03:53:03,600 --> 03:53:05,680
Because what can happen is that

3302
03:53:06,960 --> 03:53:09,160
looks like type thing. Yep. Yep.

3303
03:53:09,160 --> 03:53:10,120
So what can happen?

3304
03:53:10,120 --> 03:53:13,560
Is that so let's say
I can store the Firefox as well in here.

3305
03:53:14,480 --> 03:53:16,560
Now again, a dog and a cat.

3306
03:53:16,560 --> 03:53:18,440
Can they be same objects?

3307
03:53:18,440 --> 03:53:23,680
Can they be same?

3308
03:53:23,680 --> 03:53:26,400
Can a car object and be a bike object?

3309
03:53:26,400 --> 03:53:27,600
Can can they be same?

3310
03:53:27,600 --> 03:53:31,560
Can I add a plane object in laptop
object big begin with same.

3311
03:53:31,560 --> 03:53:36,840
So what happened is that if you store
something else in the parent

3312
03:53:37,400 --> 03:53:40,920
and try to get something else
out of their computer,

3313
03:53:40,920 --> 03:53:49,640
So do we get any error
or should it should this code work fine.

3314
03:53:49,640 --> 03:53:54,200
So I am storing Google Chrome,
but I am trying to sorry,

3315
03:53:54,200 --> 03:53:57,960
I am storing Firefox
but I am trying to get back Google Chrome.

3316
03:53:58,480 --> 03:53:59,880
If we try to do that

3317
03:54:03,600 --> 03:54:06,120
we will get class cast exception

3318
03:54:07,400 --> 03:54:09,200
work fine Alexa.

3319
03:54:09,200 --> 03:54:11,000
It works fine for you all.

3320
03:54:11,000 --> 03:54:13,440
My you have invented something new in Java

3321
03:54:20,680 --> 03:54:21,200
initially.

3322
03:54:21,200 --> 03:54:22,440
Screenshot of your code.

3323
03:54:22,440 --> 03:54:24,000
It should not work

3324
03:54:26,960 --> 03:54:37,040
so is there any loss of information
like explicit costing?

3325
03:54:37,040 --> 03:54:41,240
Yes, there is a loss of information. Yes.

3326
03:54:41,240 --> 03:54:43,560
Are you guys ready to take
that much information?

3327
03:54:43,560 --> 03:54:46,880
By the way,
before I show you the loss of information,

3328
03:54:47,760 --> 03:54:55,320
do you guys still have patients?

3329
03:54:55,320 --> 03:54:58,480
Can you guys promise me
that you will not jump from the window

3330
03:55:04,000 --> 03:55:06,680
on promises

3331
03:55:10,160 --> 03:55:12,160
named and give time to replace?

3332
03:55:12,160 --> 03:55:12,760
Okay.

3333
03:55:12,760 --> 03:55:25,200
Yeah.

3334
03:55:25,200 --> 03:55:27,960
Polymorphism is great,
but costing is confused.

3335
03:55:27,960 --> 03:55:29,320
It will not be confusing.

3336
03:55:29,320 --> 03:55:38,560
Let give me one.

3337
03:55:38,560 --> 03:55:41,240
So down
casting does not work in polymorphism.

3338
03:55:41,240 --> 03:55:42,600
No, no. It works.

3339
03:55:42,600 --> 03:55:47,840
If it only works if you store the
same object first inside the

3340
03:55:52,320 --> 03:55:53,480
I am confused

3341
03:55:53,480 --> 03:56:05,880
at all.

3342
03:56:05,880 --> 03:56:09,240
It depends on how out of the everyones
window.

3343
03:56:09,960 --> 03:56:13,600
Okay. It's

3344
03:56:20,080 --> 03:56:20,320
awesome.

3345
03:56:20,320 --> 03:56:23,400
Let me know once you are done typing

3346
03:56:35,920 --> 03:56:36,640
which class

3347
03:56:36,640 --> 03:56:39,480
and if you want me to scroll down this one
or this one

3348
03:56:43,440 --> 03:56:45,840
after there is nothing

3349
03:56:45,840 --> 03:56:46,880
or you want to.

3350
03:56:46,880 --> 03:56:49,560
You want me to scroll up?

3351
03:56:49,640 --> 03:56:52,080
There is nothing below this

3352
03:56:59,400 --> 03:57:00,640
all Welcome.

3353
03:57:00,640 --> 03:57:03,720
So if we have stored
Google Chrome already,

3354
03:57:04,800 --> 03:57:08,680
then we can convert it back

3355
03:57:08,840 --> 03:57:10,000
another way.

3356
03:57:10,000 --> 03:57:11,200
The Google Chrome as well.

3357
03:57:11,200 --> 03:57:13,560
No, this would not be an error.

3358
03:57:13,560 --> 03:57:15,200
Can you explain line 42?

3359
03:57:15,200 --> 03:57:17,520
Is this typecasting in here

3360
03:57:18,640 --> 03:57:20,520
down casting?

3361
03:57:20,640 --> 03:57:23,720
Is there same rule
like we for short value to fit into part

3362
03:57:23,800 --> 03:57:26,280
s near it? Same

3363
03:57:28,320 --> 03:57:31,400
so web driver is bigger,
parents are better

3364
03:57:32,280 --> 03:57:37,280
and then the Google Chrome is smaller, so
we are trying to fit it a smaller amount.

3365
03:57:37,400 --> 03:57:39,120
So it's working fine. Right?

3366
03:57:39,120 --> 03:57:44,440
So one why you going the error?

3367
03:57:44,440 --> 03:57:47,520
But if we initially store something else,
then it will not work.

3368
03:57:47,520 --> 03:58:07,840
Now you guys asked about
the loss of information. You

3369
03:58:09,640 --> 03:58:10,400
have a new animals

3370
03:58:10,400 --> 03:58:42,720
or this error.

3371
03:58:42,720 --> 03:58:48,000
Make sure that you have not declared
this clone anywhere.

3372
03:58:48,000 --> 03:58:50,160
Make sure that all
the code is commented out

3373
03:58:50,800 --> 03:58:53,720
and then you do should not be getting this
said.

3374
03:58:54,120 --> 03:58:57,160
Show me the complete class code

3375
03:59:07,760 --> 03:59:11,280
so that loss of information
is not happening in here.

3376
03:59:11,760 --> 03:59:16,080
So for middle class
because in all the classes,

3377
03:59:17,280 --> 03:59:19,240
all the methods are present.

3378
03:59:19,240 --> 03:59:23,360
If some if some methods are not present,
they coming from the parent class.

3379
03:59:23,800 --> 03:59:25,600
But. Latif

3380
03:59:26,440 --> 03:59:29,320
Rice What if a child

3381
03:59:29,320 --> 03:59:32,520
class has its own?

3382
03:59:32,520 --> 03:59:38,880
Okay, what if this Google from class?

3383
03:59:38,880 --> 03:59:40,040
So right now what is happening?

3384
03:59:40,040 --> 03:59:42,800
We have all the matters
that are presented independently.

3385
03:59:42,800 --> 03:59:44,120
But what if

3386
03:59:44,560 --> 03:59:46,880
this Google Chrome class has

3387
03:59:48,520 --> 04:00:03,720
something special?

3388
04:00:03,720 --> 04:00:07,000
If this happens, if something

3389
04:00:07,000 --> 04:00:11,280
is only present in a specific
if specific child

3390
04:00:11,680 --> 04:00:16,160
guys, can we generalize this
this thing is not present in parent.

3391
04:00:16,160 --> 04:00:18,400
Everyone is inheriting from parent.

3392
04:00:18,400 --> 04:00:22,520
If a parent separately has its own thing

3393
04:00:23,080 --> 04:00:25,200
now, we cannot generalize this.

3394
04:00:25,640 --> 04:00:26,640
So what will happen

3395
04:00:28,960 --> 04:00:31,080
if I uncomment this code?

3396
04:00:32,800 --> 04:00:36,640
And if I say w d dot

3397
04:00:40,240 --> 04:00:41,520
special method?

3398
04:00:41,520 --> 04:00:43,880
I cannot call this. I cannot call this.

3399
04:00:44,640 --> 04:00:48,600
I can only call this method.

3400
04:00:48,600 --> 04:00:52,760
Okay, So let me comment this out.

3401
04:00:52,800 --> 04:00:55,080
This this one,
it will be the focus on this one, right?

3402
04:00:55,560 --> 04:01:02,760
If I am storing it inside of a driver,
do web driver class, does

3403
04:01:02,760 --> 04:01:07,800
it has any information
about our special method,

3404
04:01:07,800 --> 04:01:11,880
this first driver class,
it does not have any information

3405
04:01:12,560 --> 04:01:14,400
about

3406
04:01:15,880 --> 04:01:17,040
that special method.

3407
04:01:17,040 --> 04:01:22,440
So what will happen if we try to cast

3408
04:01:24,720 --> 04:01:25,640
that sprite?

3409
04:01:25,640 --> 04:01:27,720
That is something special

3410
04:01:28,680 --> 04:01:30,840
which is only present in a child.

3411
04:01:31,360 --> 04:01:32,800
It is gone.

3412
04:01:32,880 --> 04:01:38,640
If we wanted, we must first convert

3413
04:01:38,640 --> 04:01:43,360
a D variable back to its original form.

3414
04:01:43,360 --> 04:01:47,840
It's in the original form and then only

3415
04:01:47,840 --> 04:01:51,320
we can call that special
method from that class.

3416
04:01:52,280 --> 04:01:54,120
Yes. So

3417
04:01:54,280 --> 04:01:57,440
parent
class can hold all the child classes,

3418
04:01:58,080 --> 04:02:01,560
but only those matters and fields

3419
04:02:02,080 --> 04:02:04,080
which are present parent,

3420
04:02:05,160 --> 04:02:08,480
not the fields of the or the methods

3421
04:02:08,480 --> 04:02:16,080
which are specific to a child class.

3422
04:02:16,080 --> 04:02:19,240
So you can think of like this.

3423
04:02:19,280 --> 04:02:23,000
So this box, this wrapped driver,

3424
04:02:23,000 --> 04:02:25,320
then it will be created
inside of the memory.

3425
04:02:26,760 --> 04:02:29,320
It will be having specific features

3426
04:02:31,120 --> 04:02:33,240
to hold all the matters

3427
04:02:33,240 --> 04:02:37,520
which are coming from here,
but can be called.

3428
04:02:37,520 --> 04:02:40,560
This web driver has no information

3429
04:02:42,000 --> 04:02:44,840
because the driver has no information
about this.

3430
04:02:44,840 --> 04:02:46,600
Google Chrome.

3431
04:02:46,600 --> 04:02:50,640
This Web driver
don't know if it has to reserve a space

3432
04:02:51,240 --> 04:02:53,280
for this special method or not.

3433
04:02:53,760 --> 04:02:57,760
Grandparent does not know Grandpa
because inheritance is one way

3434
04:02:57,800 --> 04:03:03,560
we inherit from parent inspired child we
don't inherited from child inside parents.

3435
04:03:03,560 --> 04:03:05,440
It's a one way relationship.

3436
04:03:05,440 --> 04:03:08,280
So We can get all the info from the parent

3437
04:03:08,760 --> 04:03:11,680
inside a child,
but we cannot do the reverse.

3438
04:03:11,680 --> 04:03:14,400
We cannot have this information
that something is

3439
04:03:14,400 --> 04:03:17,000
something special is present inside
a child.

3440
04:03:17,400 --> 04:03:21,760
Parent can not have that information
because inheritance is one way, okay?

3441
04:03:21,800 --> 04:03:23,520
It's not a movie.

3442
04:03:23,520 --> 04:03:26,400
So when this variable driver
will be declared a

3443
04:03:26,720 --> 04:03:31,040
I will only reserve the memory
by looking at this web driver class.

3444
04:03:31,480 --> 04:03:32,920
If it has then variables.

3445
04:03:32,920 --> 04:03:34,840
It will result in memory allocation.

3446
04:03:34,840 --> 04:03:38,280
If it 100 meters,
it will reserve hundred memory location.

3447
04:03:38,280 --> 04:03:39,360
Something matters.

3448
04:03:39,360 --> 04:03:43,280
But how do this web driver
class know that it has to resolve

3449
04:03:43,280 --> 04:03:47,200
the memory location
for this variable as one? So

3450
04:03:48,200 --> 04:03:48,960
what happens is

3451
04:03:48,960 --> 04:03:51,160
that when we try to store a child

3452
04:03:51,960 --> 04:03:55,400
and if a child has something special,

3453
04:03:55,400 --> 04:03:58,640
it will be thrown out.

3454
04:03:58,640 --> 04:04:01,560
Only those matters which are present in

3455
04:04:01,560 --> 04:04:04,920
the parent will be stored inside memory

3456
04:04:05,360 --> 04:04:09,800
and this special method will be ignored.

3457
04:04:09,800 --> 04:04:13,000
Yes, the passes from parent, the child,
not from child

3458
04:04:13,000 --> 04:04:17,400
to parent.

3459
04:04:17,400 --> 04:04:27,680
Magic quarter time.

3460
04:04:27,680 --> 04:04:30,480
If I run this
I am having last gasp exceptional.

3461
04:04:32,160 --> 04:04:35,440
So let me run this

3462
04:04:40,880 --> 04:04:42,240
only present in chrome.

3463
04:04:42,240 --> 04:04:44,280
I see that method now.

3464
04:04:44,280 --> 04:04:45,840
Can you share the screenshot?

3465
04:04:45,840 --> 04:04:47,000
Please explain this.

3466
04:04:47,000 --> 04:04:49,560
Google Chrome chrome chrome Lab driver.

3467
04:04:49,920 --> 04:04:52,200
So this line

3468
04:04:52,200 --> 04:04:55,040
in here we are down casting Mustafa

3469
04:04:55,800 --> 04:04:58,440
from a parent class type variable.

3470
04:04:58,440 --> 04:05:03,400
We are converting that variable
to the child type variable.

3471
04:05:04,200 --> 04:05:07,280
So it's the same down casting

3472
04:05:07,280 --> 04:05:29,640
as we do in primitives.

3473
04:05:29,640 --> 04:05:34,920
Now comment out the above code.

3474
04:05:34,920 --> 04:05:36,880
Yes, we can have another example.

3475
04:05:36,880 --> 04:05:39,040
So down casting is not allowed.

3476
04:05:39,040 --> 04:05:41,320
Somebody are missing
down, casting is not allowed.

3477
04:05:41,320 --> 04:05:43,480
And how is this working?

3478
04:05:43,480 --> 04:05:44,160
Okay.

3479
04:05:44,160 --> 04:05:47,040
It is working because initially, initially

3480
04:05:47,040 --> 04:05:50,880
we are storing the child object
inside the dependency.

3481
04:05:50,960 --> 04:05:56,080
If I say web driver, Web driver
now, this is not allowed.

3482
04:05:56,360 --> 04:06:00,160
Okay.

3483
04:06:00,160 --> 04:06:02,880
Okay. So and now I will get an error.

3484
04:06:02,880 --> 04:06:05,560
I will go to that
exception class cast exception.

3485
04:06:07,000 --> 04:06:07,720
Okay.

3486
04:06:07,720 --> 04:06:11,520
Because a
parent cannot be converted to a child now.

3487
04:06:12,120 --> 04:06:13,960
It cannot be stored in a child.

3488
04:06:13,960 --> 04:06:15,360
But we can do the reverse.

3489
04:06:15,360 --> 04:06:18,120
We can store a chart

3490
04:06:19,200 --> 04:06:21,520
inside the parent.

3491
04:06:21,960 --> 04:06:24,680
Can we write down
casting without first line parent?

3492
04:06:24,680 --> 04:06:29,280
Plus this one.

3493
04:06:29,280 --> 04:06:31,440
Then you will be getting an error
on this variable.

3494
04:06:31,920 --> 04:06:37,760
I mean, you have to define
a variable first, right?

3495
04:06:37,760 --> 04:06:40,560
Or you can also do it in different ways.

3496
04:06:40,560 --> 04:06:44,920
Like, for example, directly converting

3497
04:06:45,360 --> 04:06:48,920
just Yes, just create the object

3498
04:06:48,920 --> 04:06:52,040
with the new keyword
and right after there, try to convert it.

3499
04:06:52,120 --> 04:07:01,800
Yes, it is also possible.

3500
04:07:01,800 --> 04:07:03,600
So let me first

3501
04:07:04,480 --> 04:07:06,840
go to the slides,

3502
04:07:06,840 --> 04:07:11,120
store up casting, casting from a subclass

3503
04:07:12,680 --> 04:07:16,080
to a superclass is called

3504
04:07:18,160 --> 04:07:21,440
up Casting.

3505
04:07:21,440 --> 04:07:25,080
So from child to parent

3506
04:07:26,280 --> 04:07:28,320
it is allowed, it looks,

3507
04:07:28,960 --> 04:07:33,720
but only I can only call those matters

3508
04:07:33,720 --> 04:07:35,880
which are present in the parent class.

3509
04:07:37,680 --> 04:07:40,080
And then we have the down casting.

3510
04:07:40,080 --> 04:07:44,960
It's the casting from a superclass
to a subclass from a parent to the child,

3511
04:07:46,440 --> 04:07:47,680
which is not allowed.

3512
04:07:47,680 --> 04:07:51,440
But if initially we store the child

3513
04:07:51,440 --> 04:07:56,200
inside the parent variable,
then we can expect that

3514
04:07:56,640 --> 04:08:00,160
object again, because in initially
we are controlling that child.

3515
04:08:00,480 --> 04:08:07,200
Okay, So you can think of like this
I create a child class object.

3516
04:08:07,560 --> 04:08:10,360
I put it inside a box of my parent

3517
04:08:11,280 --> 04:08:14,040
and on the next line extracting it back.

3518
04:08:15,240 --> 04:08:18,320
But if I initially put
something else in the box

3519
04:08:18,720 --> 04:08:22,520
and if I try to extract that child from
there, can I do that guys

3520
04:08:23,920 --> 04:08:26,080
I can only extract from the box

3521
04:08:26,280 --> 04:08:28,960
the thing that I placed
inside of that box.

3522
04:08:29,760 --> 04:08:30,480
Okay.

3523
04:08:30,560 --> 04:08:34,080
If I try putting a dog and I say,

3524
04:08:34,080 --> 04:08:37,440
can I get a cat out of that box,
that is not possible.

3525
04:08:37,440 --> 04:08:40,560
So this is what is happening in here.

3526
04:08:40,560 --> 04:08:43,320
I take this jar,

3527
04:08:43,400 --> 04:08:47,280
I put it inside this box, this box
which is of my bitter,

3528
04:08:47,600 --> 04:08:51,040
and then I get the bag
of that child again.

3529
04:08:51,040 --> 04:08:53,880
So only that thing can be extracted back,

3530
04:08:54,200 --> 04:08:57,240
which we initially inserted.

3531
04:08:57,240 --> 04:09:00,280
But initially,
if you are trying to insert a parent

3532
04:09:00,880 --> 04:09:03,320
inside a child, this is not possible.

3533
04:09:04,560 --> 04:09:05,080
Okay?

3534
04:09:05,080 --> 04:09:20,840
Only that thing is allowed
which we put inside that box.

3535
04:09:20,840 --> 04:09:33,280
Okay, so this is your task.

3536
04:09:33,280 --> 04:09:37,040
Now, there is a very small thing
that I want to show.

3537
04:09:37,040 --> 04:09:41,520
We still have contaminants.

3538
04:09:41,520 --> 04:09:44,680
So this was polymorphism
that you guys like. It

3539
04:10:14,800 --> 04:10:18,000
has potential
to be lowered so we can put parent the box

3540
04:10:18,000 --> 04:10:21,320
inside the parent box
and, take our child from that.

3541
04:10:21,800 --> 04:10:23,120
No, no, no, no.

3542
04:10:23,600 --> 04:10:27,560
This is exactly what we can not do.

3543
04:10:27,560 --> 04:10:30,400
This is exactly Alex.
This is exactly what we can do.

3544
04:10:30,520 --> 04:10:34,920
I cannot put a parent I mean, how can I do
their thinking in the real life?

3545
04:10:35,200 --> 04:10:39,240
Can I put the dog inside box
and get back out from that box?

3546
04:10:39,560 --> 04:10:42,360
Unless it's a magic box, then

3547
04:10:42,360 --> 04:10:51,320
you can do that. Yes.

3548
04:10:51,320 --> 04:10:55,600
They had our task on this as well.

3549
04:10:55,600 --> 04:11:00,160
David Copperfield box.

3550
04:11:00,160 --> 04:11:03,600
How many of you will still have

3551
04:11:03,600 --> 04:11:06,400
how many of you can still learn?

3552
04:11:07,080 --> 04:11:09,200
And something very small?

3553
04:11:10,120 --> 04:11:12,360
How many of you still have patience?

3554
04:11:12,360 --> 04:11:16,640
You can put animal in box and take out cat
What was inside Animal?

3555
04:11:16,920 --> 04:11:18,720
Yes. Yes.

3556
04:11:18,720 --> 04:11:20,520
Can you can do that? Yes.

3557
04:11:21,520 --> 04:11:25,440
Alex, if I put there is this animal box.

3558
04:11:25,440 --> 04:11:27,520
If I put cat, I get to big cat.

3559
04:11:27,600 --> 04:11:29,960
If I put dog, I can get better. Yes,

3560
04:11:31,440 --> 04:11:35,360
I can wait till 12 hours for sure.

3561
04:11:35,360 --> 04:11:38,880
If can you repeat

3562
04:11:38,880 --> 04:11:42,200
one more time How to draw a normal

3563
04:11:42,240 --> 04:11:45,360
how to draw a lot

3564
04:11:56,800 --> 04:12:00,040
when you replaced

3565
04:12:01,040 --> 04:12:02,760
that room.

3566
04:12:02,760 --> 04:12:06,400
I know you guys will say that

3567
04:12:21,840 --> 04:12:23,960
How to do vertical editing.

3568
04:12:23,960 --> 04:12:27,840
You used the button

3569
04:12:29,760 --> 04:12:30,360
like this.

3570
04:12:30,360 --> 04:12:33,920
So for example, in here you use
all the button, then you draw the line

3571
04:12:35,120 --> 04:12:37,920
and then you can select
whichever area you want,

3572
04:12:37,920 --> 04:12:45,840
and then you can replace it
with whatever value you want.

3573
04:12:45,840 --> 04:12:49,680
So tomorrow
we have a review from 7 to 10 p.m..

3574
04:12:49,680 --> 04:13:33,120
Yes. So guys, let me show you the cloning.

3575
04:13:34,600 --> 04:13:37,760
So let's say you want to clone

3576
04:13:38,960 --> 04:13:41,080
the this repository

3577
04:13:44,400 --> 04:13:47,760
so you copy this link.

3578
04:13:47,760 --> 04:13:48,280
Okay.

3579
04:13:48,280 --> 04:13:51,160
It's already a shortcut.

3580
04:13:51,480 --> 04:13:55,280
The example we did all of them,
they were a runtime polymorphism

3581
04:13:55,920 --> 04:14:00,280
compile time polymorphism happens
with the overloading, not overwriting.

3582
04:14:00,320 --> 04:14:02,520
They were all overwriting examples.

3583
04:14:03,680 --> 04:14:05,800
The compile time compile time

3584
04:14:05,800 --> 04:14:09,360
polymorphism is in order. Use

3585
04:14:09,800 --> 04:14:12,840
control is out to draw the vertical line.

3586
04:14:12,840 --> 04:14:16,760
It's r e healthy keyboard
if you guys have it on your Mac.

3587
04:14:17,080 --> 04:14:19,560
So we copy this

3588
04:14:20,200 --> 04:14:21,160
link,

3589
04:14:21,720 --> 04:14:23,800
we open the

3590
04:14:23,880 --> 04:14:25,320
get bash

3591
04:14:27,600 --> 04:14:28,960
like this

3592
04:14:30,360 --> 04:14:33,240
as to a less

3593
04:14:38,200 --> 04:14:43,480
so I don't know where I am right now so

3594
04:14:52,720 --> 04:14:55,560
the default the

3595
04:15:09,600 --> 04:15:12,600
let me clone it inside

3596
04:15:12,600 --> 04:15:14,280
this one drive.

3597
04:15:14,280 --> 04:15:25,080
Yeah so I said 31 drive

3598
04:15:25,320 --> 04:15:27,640
I see a less

3599
04:15:30,320 --> 04:15:33,440
and do you guys know how to create a

3600
04:15:33,440 --> 04:15:45,240
new folder.

3601
04:15:45,240 --> 04:15:47,400
So we say m KTAR

3602
04:15:48,760 --> 04:15:51,280
and the name of the folder

3603
04:15:51,280 --> 04:15:57,120
and then that folder will be created.

3604
04:15:57,120 --> 04:16:00,480
Okay, so I see this test folder now

3605
04:16:00,480 --> 04:16:03,480
in here.

3606
04:16:03,480 --> 04:16:05,800
The other instructor
did not want to teach us.

3607
04:16:06,920 --> 04:16:09,120
If that is the case, Simon, maybe

3608
04:16:09,120 --> 04:16:11,400
then we should not do that

3609
04:16:12,360 --> 04:16:15,080
because you guys
will definitely tell Amazon

3610
04:16:15,080 --> 04:16:19,640
that Haskell showed us this
and then was Will call me in their T.

3611
04:16:19,640 --> 04:16:23,120
S Gertrud, I told you
not to show that to the student.

3612
04:16:23,120 --> 04:16:30,960
Why are you still sure that?

3613
04:16:30,960 --> 04:16:33,120
Okay, it's fine.

3614
04:16:34,720 --> 04:16:37,480
So we can we can move to this test

3615
04:16:37,480 --> 04:16:40,840
directly like this

3616
04:16:41,680 --> 04:16:43,520
the intelligible

3617
04:16:43,800 --> 04:16:46,920
and so it is to clone your project

3618
04:16:46,920 --> 04:16:51,680
from GitHub.

3619
04:16:51,680 --> 04:16:52,440
Okay.

3620
04:16:53,520 --> 04:16:56,960
So I go to this in here and then I see

3621
04:16:58,920 --> 04:17:00,080
you get clone

3622
04:17:00,080 --> 04:17:03,600
and then I based the link in here on

3623
04:17:04,560 --> 04:17:05,400
this one.

3624
04:17:05,520 --> 04:17:07,640
So I faced

3625
04:17:07,840 --> 04:17:11,280
by the way, guys will be having
proper sessions to learn about this

3626
04:17:12,720 --> 04:17:16,840
is to copy
the code from GitHub on your computer.

3627
04:17:17,160 --> 04:17:18,600
It's called cloning.

3628
04:17:18,600 --> 04:17:27,320
Having a copy
on your local computer transfer.

3629
04:17:27,320 --> 04:17:31,080
So now if I click on Enter,
all the code has been cloned

3630
04:17:31,600 --> 04:17:34,360
and now I can see on my computer.

3631
04:17:34,880 --> 04:17:40,360
Yeah.

3632
04:17:40,360 --> 04:17:44,160
So if I go inside one drive inside

3633
04:17:44,160 --> 04:17:47,080
and first I see I start batch 11.

3634
04:17:47,760 --> 04:17:50,280
I see. So

3635
04:17:50,640 --> 04:17:53,080
I see gone syntax

3636
04:17:53,280 --> 04:17:55,960
and all the classes and all the code.

3637
04:17:56,440 --> 04:17:58,440
We can clone it from any public wrapper.

3638
04:17:58,440 --> 04:18:01,120
Yes, you guys can clone it
from any public wrapper.

3639
04:18:01,480 --> 04:18:06,200
And now this project,
you guys can open it in your eclipse

3640
04:18:06,200 --> 04:18:11,320
or intelligent as well.

3641
04:18:11,320 --> 04:18:13,920
So this is what we call cloning.

3642
04:18:14,920 --> 04:18:15,680
How to add

3643
04:18:15,680 --> 04:18:19,560
code from different folder
in same project on your tub.

3644
04:18:20,680 --> 04:18:22,200
That is a little complex.

3645
04:18:22,200 --> 04:18:25,320
Alex You guys will be having proper
sessions on merging

3646
04:18:25,320 --> 04:18:28,080
and resolving conflicts and all that.

3647
04:18:28,400 --> 04:18:31,040
So we wait for that third, try

3648
04:18:31,080 --> 04:18:39,760
to try to digest polymorphism.

3649
04:18:39,760 --> 04:18:40,560
Okay,

3650
04:18:41,480 --> 04:18:43,440
Are there any questions Deal?

3651
04:18:43,440 --> 04:18:45,600
Can you show how to push from intelligent?

3652
04:18:45,600 --> 04:18:51,840
No, that is strictly strictly not allowed.

3653
04:18:51,840 --> 04:18:55,600
I want you to use this terminal

3654
04:18:56,680 --> 04:18:58,040
guys specially build

3655
04:18:58,040 --> 04:19:07,720
this terminal for you.

3656
04:19:07,720 --> 04:19:12,240
The feeling that this terminal can give,
you know, intensity will not be giving you

3657
04:19:12,240 --> 04:19:13,000
that feeling.

3658
04:19:13,000 --> 04:19:16,400
I will show you in the last week,
by the way,

3659
04:19:16,400 --> 04:19:20,880
sheer class base to get.

3660
04:19:20,880 --> 04:19:26,880
Okay. Yes.

3661
04:19:26,880 --> 04:19:28,720
Step by step in detail.

3662
04:19:28,720 --> 04:19:52,440
What I will teach you about that. All

3663
04:19:53,400 --> 04:19:54,760
right, guys, let's call it a day.

3664
04:19:54,760 --> 04:19:56,160
Take some rest.

3665
04:19:56,160 --> 04:19:59,960
Don't be at your children or your siblings
if you have not understood

3666
04:20:00,080 --> 04:20:03,120
polymorphism, give it some time.

3667
04:20:03,240 --> 04:20:05,760
It will be fine

3668
04:20:10,920 --> 04:20:15,960
and I will see you on the s on Thursday.

3669
04:20:19,840 --> 04:20:25,120
May God help your husband.

3670
04:20:25,120 --> 04:20:25,920
All right, guys.

3671
04:20:25,920 --> 04:20:28,920
Bye bye. Take some rest.
