1
00:00:12,000 --> 00:00:15,440
I did not talk to Suhail.

2
00:00:15,680 --> 00:00:20,520
Maybe I will try to talk to him
after the class.

3
00:00:21,480 --> 00:00:26,520
Yes, I do have a few.

4
00:00:26,840 --> 00:00:28,520
I will let you know, guys.

5
00:00:28,520 --> 00:00:37,400
Maybe in the next class.

6
00:00:37,400 --> 00:00:40,920
Inheritance in to continue.

7
00:00:44,040 --> 00:00:46,640
So let's create a new package
for today's class.

8
00:00:46,920 --> 00:00:51,080
Do you guys have any questions
from yesterday's

9
00:00:51,080 --> 00:01:00,600
class or from homework?

10
00:01:02,840 --> 00:01:05,280
I am so in efficiency and I tried to.

11
00:01:05,600 --> 00:01:07,920
Quarter of your Fakhar Zaman reports on

12
00:01:09,000 --> 00:01:11,040
how you guys are doing

13
00:01:11,160 --> 00:01:13,280
what they are doing. Same thing.

14
00:01:13,400 --> 00:01:32,040
Don't worry,

15
00:01:32,040 --> 00:01:40,400
everyone.

16
00:01:43,560 --> 00:01:47,280
When the task is inherited
by B and B inherited by C,

17
00:01:47,280 --> 00:01:49,840
the main class is C, right?

18
00:01:50,480 --> 00:01:53,360
If you mean B, stop most parent.

19
00:01:53,360 --> 00:01:54,840
B Grandpa.

20
00:01:54,840 --> 00:01:56,920
Yes. B Grandpa. C

21
00:01:59,120 --> 00:02:00,120
I just wake up.

22
00:02:00,120 --> 00:02:00,960
I am sick.

23
00:02:00,960 --> 00:02:02,280
I hope you feel better.

24
00:02:02,280 --> 00:02:04,640
Sharif.

25
00:02:07,200 --> 00:02:08,680
Do you feel good now?

26
00:02:08,680 --> 00:02:12,200
I was also not feeling well.

27
00:02:18,040 --> 00:02:18,440
All right,

28
00:02:18,440 --> 00:02:21,160
guys,
can you tell me about the inheritance?

29
00:02:21,720 --> 00:02:24,200
What do we mean by inheritance in Java?

30
00:02:24,960 --> 00:02:25,640
What is it?

31
00:02:25,640 --> 00:02:28,920
How we can define it?

32
00:02:33,120 --> 00:02:33,480
Evening.

33
00:02:33,480 --> 00:02:34,440
Do you mean

34
00:02:52,040 --> 00:02:52,840
daddy class?

35
00:02:52,840 --> 00:02:54,840
Share school, maybe. Class?

36
00:02:54,920 --> 00:02:57,160
Yes, it's correct.

37
00:02:57,160 --> 00:02:58,400
Are we ready?

38
00:02:58,400 --> 00:03:00,240
Are we ready?

39
00:03:00,240 --> 00:03:01,800
Can you guys tell me what is this joke?

40
00:03:01,800 --> 00:03:02,760
I don't understand.

41
00:03:02,760 --> 00:03:07,560
This is a mechanism in which one class
requires all the properties and behaviors.

42
00:03:07,560 --> 00:03:09,640
Members of the parent class

43
00:03:11,720 --> 00:03:13,320
to handle

44
00:03:14,160 --> 00:03:23,240
the global savings.

45
00:03:27,040 --> 00:03:28,360
I mean, what do we do with it?

46
00:03:28,360 --> 00:03:31,160
I am little afraid
you will forget reporting.

47
00:03:31,240 --> 00:03:34,320
Could someone demand please report?

48
00:03:34,320 --> 00:03:35,680
I think we are recording.

49
00:03:35,680 --> 00:03:38,600
Yes. Yes, we are reporting

50
00:03:38,800 --> 00:03:39,840
inheritance in jail.

51
00:03:39,840 --> 00:03:41,400
I mean that one class years.

52
00:03:41,400 --> 00:03:44,440
All the properties
and methods of the subclass

53
00:03:51,320 --> 00:03:54,560
inheritance in Java

54
00:03:58,920 --> 00:03:59,800
is the mechanism

55
00:03:59,800 --> 00:04:03,960
in which one class acquires
all the properties and behaves.

56
00:04:03,960 --> 00:04:06,000
Matters of the

57
00:04:06,360 --> 00:04:08,160
parent class.

58
00:04:08,160 --> 00:04:10,640
After break, I hope you will report again.

59
00:04:10,680 --> 00:04:12,120
Thank you.

60
00:04:13,080 --> 00:04:17,160
Is we can create a new class
upon existing class?

61
00:04:17,760 --> 00:04:20,000
Yes. Using the existing class

62
00:04:21,200 --> 00:04:24,800
methods and fields,
we create a new class inheritance

63
00:04:24,800 --> 00:04:26,480
window on me and start one class here.

64
00:04:26,480 --> 00:04:29,200
So all of the properties
and methods of the subclass

65
00:04:37,920 --> 00:04:39,440
private

66
00:04:42,160 --> 00:04:45,240
members.

67
00:04:45,240 --> 00:04:49,040
You all better be ready

68
00:04:53,760 --> 00:04:58,920
and so.

69
00:04:59,200 --> 00:05:02,760
Well, what are the things
which are which do not participate in

70
00:05:02,760 --> 00:05:07,720
in inheritance.

71
00:05:07,720 --> 00:05:10,960
Inheritance is a mechanism
in which one class acquires

72
00:05:10,960 --> 00:05:13,520
the properties of another mixture.
That's good.

73
00:05:13,520 --> 00:05:15,360
I would not be able to attend the class.

74
00:05:15,360 --> 00:05:17,960
I have terrible headache and fever. Yes.

75
00:05:18,040 --> 00:05:22,640
If you can take some
and maybe you can watch difficulty.

76
00:05:23,120 --> 00:05:26,240
So what are the things
which do not participate in inheritance

77
00:05:26,240 --> 00:05:36,320
case?

78
00:05:36,320 --> 00:05:38,160
I think it's because together

79
00:05:38,160 --> 00:05:40,840
is changing hearts and a lot of people,
they are getting sick.

80
00:05:41,640 --> 00:05:45,840
The constructor and the private members.

81
00:05:45,960 --> 00:05:56,000
Can you guys tell me
what do I mean by private members in here?

82
00:05:56,000 --> 00:06:01,320
I experience, yes,

83
00:06:01,320 --> 00:06:04,360
and private matters

84
00:06:09,360 --> 00:06:21,840
argued. And

85
00:06:23,040 --> 00:06:25,120
what else you guys remember about

86
00:06:25,120 --> 00:06:26,880
the inheritance

87
00:06:28,720 --> 00:06:30,080
fears and matters?

88
00:06:30,080 --> 00:06:34,400
What is the keyword that we use
if we want to inherit

89
00:06:34,400 --> 00:06:37,400
from a class?

90
00:06:37,400 --> 00:06:41,040
One of the main disadvantages
of the inheritance

91
00:06:41,600 --> 00:06:44,160
exchange, right?

92
00:06:44,160 --> 00:06:48,040
We lose expand.

93
00:06:48,040 --> 00:06:50,560
You are to

94
00:06:51,800 --> 00:06:53,520
inherit

95
00:06:56,040 --> 00:06:59,440
from last.

96
00:07:01,440 --> 00:07:04,760
Now let's discuss about the benefits.

97
00:07:04,880 --> 00:07:10,120
So we how many benefits were discussed
yesterday?

98
00:07:10,120 --> 00:07:14,520
The combined subclass
Jala class and Superclass three.

99
00:07:14,520 --> 00:07:15,000
Right.

100
00:07:15,000 --> 00:07:18,680
Money and money is the benefit.

101
00:07:18,680 --> 00:07:31,640
Yes, it's actually to money.

102
00:07:31,640 --> 00:07:34,920
So the first benefit is that

103
00:07:35,960 --> 00:07:38,840
it saves time

104
00:07:39,360 --> 00:07:43,000
before right?

105
00:07:43,000 --> 00:07:46,280
And it

106
00:07:46,280 --> 00:07:49,520
takes less humanity

107
00:07:55,800 --> 00:08:00,400
and therefore time

108
00:08:00,440 --> 00:08:03,280
engineers performance

109
00:08:04,920 --> 00:08:10,760
is big time really,

110
00:08:10,760 --> 00:08:13,760
execution time

111
00:08:13,760 --> 00:08:15,480
is less

112
00:08:15,840 --> 00:08:16,600
important

113
00:08:19,200 --> 00:08:21,880
or application

114
00:08:23,480 --> 00:08:30,960
is reduced.

115
00:08:30,960 --> 00:08:34,480
And what about the

116
00:08:35,080 --> 00:08:47,040
this advantages?

117
00:08:47,040 --> 00:08:50,640
How do I open it for you to write
and also intelligent.

118
00:08:50,720 --> 00:08:51,440
So Mohammad

119
00:08:53,760 --> 00:08:54,720
inspired and you

120
00:08:54,720 --> 00:08:57,360
package like you can do or you can

121
00:08:57,840 --> 00:09:00,600
you can right click
and then you can click new

122
00:09:01,600 --> 00:09:06,280
and then you see this option
that says file.

123
00:09:06,280 --> 00:09:12,240
You give it any name and then you have
to provide the extension as that.

124
00:09:12,240 --> 00:09:17,160
So if you type, it will be a text file.

125
00:09:17,200 --> 00:09:20,800
If you want to make it a Excel file
or docs file,

126
00:09:20,800 --> 00:09:24,360
you just mentioned the dependency
and and then to do is create that void

127
00:09:27,320 --> 00:09:31,000
if pop up class and is all
the subclasses are dependent on their.

128
00:09:31,160 --> 00:09:33,600
Yes. Very dependent on each other.

129
00:09:33,600 --> 00:09:34,440
So then there is a

130
00:09:34,440 --> 00:09:38,680
there is a special keyword in Java
that we use for this behavior.

131
00:09:38,680 --> 00:09:41,480
Need to be careful
when general function and get in class

132
00:09:44,560 --> 00:09:45,880
and inheritance based class

133
00:09:45,880 --> 00:09:48,920
and are all applicable.

134
00:09:48,960 --> 00:09:52,360
And hence, if we change equal of bit
in a class, it will affect the

135
00:09:53,080 --> 00:09:57,920
all child classes.

136
00:09:57,920 --> 00:10:00,120
So this is a very big

137
00:10:00,920 --> 00:10:02,200
disadvantage,

138
00:10:02,200 --> 00:10:18,600
especially in agile environments.

139
00:10:18,600 --> 00:10:20,760
So let's say we are

140
00:10:22,080 --> 00:10:23,960
using some fields

141
00:10:23,960 --> 00:10:26,680
from the parent class inside our methods

142
00:10:27,240 --> 00:10:31,160
or let's say we are using a method
from the parent class, right?

143
00:10:31,480 --> 00:10:35,680
And there are maybe 2000 classes,
this thousand child classes.

144
00:10:35,680 --> 00:10:38,120
Now if we change that name

145
00:10:39,240 --> 00:10:44,200
to something else
or if we remove their name already,

146
00:10:44,200 --> 00:10:45,920
we didn't change that method

147
00:10:45,920 --> 00:10:50,120
or remove that method,
or if we add something to that method.

148
00:10:50,120 --> 00:10:54,040
So any modification to existing members

149
00:10:54,600 --> 00:10:59,840
will affect all the thousand classes
and we have to make changes

150
00:11:00,120 --> 00:11:06,240
to all those classes
if we want those classes to work properly.

151
00:11:06,640 --> 00:11:08,960
So this is a very big disadvantage of

152
00:11:10,680 --> 00:11:15,920
inheritance.

153
00:11:15,920 --> 00:11:17,280
All right.

154
00:11:17,400 --> 00:11:20,000
And after that we discussed all about

155
00:11:20,000 --> 00:11:23,320
the types of

156
00:11:23,320 --> 00:11:27,200
inheritance.

157
00:11:27,200 --> 00:11:30,360
How many types are there guys

158
00:11:30,360 --> 00:11:32,760
which are supported generally by most

159
00:11:32,760 --> 00:11:38,760
of the programing languages?

160
00:11:38,760 --> 00:11:42,720
So most of the programing languages,
they and they support four types

161
00:11:42,720 --> 00:11:43,920
of inheritance.

162
00:11:43,920 --> 00:11:46,920
But in Java only three types of

163
00:11:48,240 --> 00:11:50,760
inheritance inheritance are supported.

164
00:11:50,760 --> 00:11:53,000
Okay, so

165
00:11:54,960 --> 00:11:56,400
there are

166
00:11:57,800 --> 00:12:00,600
four major

167
00:12:00,600 --> 00:12:02,720
types of

168
00:12:02,960 --> 00:12:05,040
inheritance

169
00:12:10,960 --> 00:12:12,760
which are

170
00:12:15,120 --> 00:12:17,920
supported in

171
00:12:18,120 --> 00:12:20,200
most of the

172
00:12:20,440 --> 00:12:22,560
object oriented programing

173
00:12:24,000 --> 00:12:25,440
languages

174
00:12:31,640 --> 00:12:34,400
or Java.

175
00:12:34,400 --> 00:12:38,080
Only because

176
00:12:39,600 --> 00:12:41,960
the types

177
00:12:42,120 --> 00:12:45,560
with the classes
right before type is supported by

178
00:12:46,680 --> 00:12:49,560
a new concept which is called interface.

179
00:12:49,560 --> 00:12:50,800
We will learn about that.

180
00:12:50,800 --> 00:12:56,240
Techniques.

181
00:12:56,240 --> 00:12:59,120
So these are

182
00:12:59,120 --> 00:13:02,040
so the first one that is supported
by Java is

183
00:13:03,240 --> 00:13:06,360
single.

184
00:13:06,360 --> 00:13:09,320
Then we have the hierarchical

185
00:13:15,480 --> 00:13:17,280
and then

186
00:13:17,680 --> 00:13:21,000
we have the multi level

187
00:13:25,080 --> 00:13:27,200
and the fourth one

188
00:13:27,480 --> 00:13:29,440
B multiple

189
00:13:29,440 --> 00:13:34,960
of one node

190
00:13:36,360 --> 00:13:37,520
or third

191
00:13:38,920 --> 00:13:43,080
are classes in Java,

192
00:13:43,080 --> 00:13:56,400
but it is supported by interfaces.

193
00:13:56,400 --> 00:13:58,120
So let's discuss.

194
00:13:58,120 --> 00:14:01,120
This was type

195
00:14:13,680 --> 00:14:16,160
what is this single inheritance?

196
00:14:16,520 --> 00:14:33,840
Oh yes, the diamond problem.

197
00:14:33,840 --> 00:14:35,920
And because at the time

198
00:14:37,720 --> 00:14:40,360
one parent, one child, single base

199
00:14:40,360 --> 00:14:44,160
class and single drive class, single

200
00:14:44,600 --> 00:14:48,280
one parent, one charter type.

201
00:14:48,280 --> 00:14:52,080
So if we have only

202
00:14:54,160 --> 00:14:56,760
one parent and

203
00:14:58,320 --> 00:15:01,040
one child

204
00:15:14,680 --> 00:15:22,560
with all single

205
00:15:32,480 --> 00:15:34,800
so for example, if we have

206
00:15:37,200 --> 00:15:39,600
public class

207
00:15:40,080 --> 00:15:41,000
error

208
00:15:44,320 --> 00:15:46,960
and it is this

209
00:15:56,720 --> 00:15:58,920
class child

210
00:15:59,760 --> 00:16:01,200
which is

211
00:16:01,720 --> 00:16:07,920
extending from parent, then we will say

212
00:16:08,160 --> 00:16:10,920
this is single inheritance

213
00:16:11,960 --> 00:16:14,040
is the parent class and B is the child.

214
00:16:14,240 --> 00:16:18,280
Since we inherit the future
learning behavior in class.

215
00:16:19,920 --> 00:16:20,440
All right.

216
00:16:20,440 --> 00:16:22,960
And then we have the second type,

217
00:16:23,800 --> 00:16:36,080
which is hierarchical inheritance.

218
00:16:36,080 --> 00:16:39,000
One parent and multiple children

219
00:16:40,480 --> 00:16:44,640
parent w more than one subclass.

220
00:16:46,360 --> 00:16:48,240
The child has siblings.

221
00:16:48,240 --> 00:16:53,920
Yes, one parent and multiple children.

222
00:16:53,920 --> 00:16:58,280
So if we have one

223
00:17:00,920 --> 00:17:04,640
class and

224
00:17:04,640 --> 00:17:06,560
merge people

225
00:17:07,560 --> 00:17:10,080
to growing classes

226
00:17:18,960 --> 00:17:37,560
and then it is all

227
00:17:41,520 --> 00:17:46,240
an inheritance.

228
00:17:46,240 --> 00:17:49,120
So let's say here we have

229
00:17:49,120 --> 00:17:55,200
again the parent class,

230
00:17:55,200 --> 00:17:57,920
then we have maybe

231
00:18:01,080 --> 00:18:02,880
child one

232
00:18:03,240 --> 00:18:06,840
which is extending from parent
and another child

233
00:18:06,840 --> 00:18:10,520
may be trying to do extending from parent

234
00:18:11,560 --> 00:18:13,040
and then another child.

235
00:18:13,040 --> 00:18:16,520
Child
three was also extending from the parent.

236
00:18:16,520 --> 00:18:19,480
So now there are multiple classes

237
00:18:20,000 --> 00:18:22,920
or parent class is always the same.

238
00:18:22,920 --> 00:18:25,040
It's only the only one class.

239
00:18:25,280 --> 00:18:28,440
Yes, this is called

240
00:18:28,440 --> 00:18:31,520
hierarchical inheritance
lang grandpa for other children

241
00:18:31,640 --> 00:18:35,520
and of course for inheritance.

242
00:18:35,520 --> 00:18:37,840
And then we discussed about the

243
00:18:38,960 --> 00:18:41,400
multi level

244
00:18:41,400 --> 00:18:59,120
inheritance.

245
00:18:59,120 --> 00:19:03,800
And many people tried classes. Then

246
00:19:04,800 --> 00:19:07,720
as part of

247
00:19:08,600 --> 00:19:11,320
class experience to another class

248
00:19:11,320 --> 00:19:14,280
that is already extended
from another class

249
00:19:16,240 --> 00:19:18,960
experience, from another class
that is already extended

250
00:19:18,960 --> 00:19:23,080
from another.

251
00:19:23,080 --> 00:19:24,040
All right.

252
00:19:24,040 --> 00:19:29,600
So let me copy that.

253
00:19:29,600 --> 00:19:31,920
We have a class

254
00:19:32,000 --> 00:19:35,040
which is extending from another class

255
00:19:35,040 --> 00:19:38,000
that is already extended
from another class, right?

256
00:19:39,280 --> 00:19:42,840
So, for example, we have a class

257
00:19:45,600 --> 00:19:55,240
grand incident.

258
00:19:55,240 --> 00:19:57,360
Then we have another class

259
00:20:07,800 --> 00:20:12,040
event and it is extending

260
00:20:13,480 --> 00:20:16,520
all grand and

261
00:20:23,400 --> 00:20:27,800
we are

262
00:20:29,920 --> 00:20:32,120
extending all

263
00:20:35,720 --> 00:20:36,400
data.

264
00:20:36,840 --> 00:20:38,680
Then it is called

265
00:20:39,760 --> 00:20:41,120
Have an inheritance.

266
00:20:41,120 --> 00:20:46,720
Okay.

267
00:20:46,720 --> 00:20:49,200
And the last one

268
00:20:49,560 --> 00:20:53,360
is multiple inheritance.

269
00:20:53,360 --> 00:20:55,560
Okay, what is this?

270
00:20:55,560 --> 00:21:17,040
Multiple inheritance, right?

271
00:21:17,040 --> 00:21:19,560
One child and multiple parents.

272
00:21:20,080 --> 00:21:22,320
Right. It

273
00:21:32,880 --> 00:21:51,000
said we have the last one.

274
00:21:51,000 --> 00:21:54,720
You have been Who

275
00:22:02,880 --> 00:22:08,080
was so close

276
00:22:14,600 --> 00:22:15,360
parent.

277
00:22:15,840 --> 00:22:17,200
And then

278
00:22:21,120 --> 00:22:22,080
this is

279
00:22:23,040 --> 00:22:26,120
the type of inheritance
which is not spoken by Java.

280
00:22:27,240 --> 00:22:27,760
Let's see.

281
00:22:27,760 --> 00:22:28,680
Inheritance.

282
00:22:28,680 --> 00:22:33,120
The properties and behaviors of Class
B and Class C are the same level.

283
00:22:34,040 --> 00:22:36,120
So you're able to update our classes

284
00:22:36,160 --> 00:22:39,480
for C in

285
00:22:40,320 --> 00:22:44,720
which we discussed in the last class,
right?

286
00:22:45,120 --> 00:22:47,160
I hope everything is clear.

287
00:22:47,160 --> 00:22:52,440
And if you guys are confused
about anything, you can ask me.

288
00:22:53,760 --> 00:22:55,640
Miguel's next class is.

289
00:22:55,640 --> 00:23:01,920
Today's class is actually related
to this inheritance.

290
00:23:01,920 --> 00:23:04,680
Can you tell one more time?
Diamond problem.

291
00:23:04,920 --> 00:23:07,840
So diamond problem is this.

292
00:23:08,400 --> 00:23:12,920
So let's say, for example,
we have Ward three

293
00:23:14,760 --> 00:23:15,960
named

294
00:23:18,640 --> 00:23:19,800
and this

295
00:23:19,800 --> 00:23:22,280
and we have the exact same method

296
00:23:24,240 --> 00:23:26,680
inside the parent to

297
00:23:28,600 --> 00:23:30,720
that we have this is out

298
00:23:32,040 --> 00:23:34,240
here and it is

299
00:23:34,240 --> 00:23:35,320
going to

300
00:23:37,560 --> 00:23:40,840
be 1120

301
00:23:41,160 --> 00:23:42,360
here experience.

302
00:23:42,360 --> 00:23:43,240
But now

303
00:23:44,320 --> 00:23:47,160
if I create an object of this child class

304
00:23:47,840 --> 00:23:50,960
and if I call the name

305
00:23:50,960 --> 00:23:55,200
method, which method should be called
the method from the parent one

306
00:23:55,200 --> 00:24:00,040
or the parent two
or there is an ambiguity.

307
00:24:00,040 --> 00:24:15,600
Next time I will be creating these notes
after the class.

308
00:24:15,600 --> 00:24:17,560
So this is where

309
00:24:18,960 --> 00:24:21,040
the problem arises.

310
00:24:21,040 --> 00:24:23,320
So this problem is not solved in Java.

311
00:24:23,320 --> 00:24:25,280
It's not that it cannot be solved.

312
00:24:25,280 --> 00:24:28,960
Yes, it can be solved.

313
00:24:28,960 --> 00:24:32,280
Other languages like Python.

314
00:24:32,280 --> 00:24:36,840
So for example,
Python shares are solved in this example.

315
00:24:36,840 --> 00:24:41,320
Like this, if you are writing the parent
one first after this extension one,

316
00:24:41,720 --> 00:24:44,720
the priority will be given to the method
from the parent Fun.

317
00:24:46,200 --> 00:24:48,640
So this is how the python solved
this problem.

318
00:24:48,640 --> 00:24:51,800
So C++ also has a mechanism
to solve this problem.

319
00:24:52,200 --> 00:24:56,680
But Java guys, they thought that
maybe it will be creating more confusion

320
00:24:56,680 --> 00:24:59,440
and it's less beneficial, less beneficial.

321
00:24:59,800 --> 00:25:02,520
So they didn't allow

322
00:25:02,800 --> 00:25:04,160
this type of inheritance

323
00:25:04,160 --> 00:25:08,400
in classes will be a question
about multilevel attributes.

324
00:25:08,400 --> 00:25:12,400
Yes, they can be asking you
these type of questions, and

325
00:25:13,560 --> 00:25:15,280
most of the questions

326
00:25:15,280 --> 00:25:18,160
you can say 60 to 70% of the questions

327
00:25:19,720 --> 00:25:21,360
which are asked in Java,

328
00:25:21,360 --> 00:25:24,240
they are from oops again,
they are from loops

329
00:25:25,400 --> 00:25:26,040
there.

330
00:25:26,080 --> 00:25:28,480
There will always be a question
from inheritance.

331
00:25:28,480 --> 00:25:30,520
Is that important?

332
00:25:30,520 --> 00:25:33,880
There will hardly be an interview
if they are asking you from Java

333
00:25:33,880 --> 00:25:42,080
and they will definitely be asking you
from inheritance.

334
00:25:42,080 --> 00:25:45,560
So these oops concepts, they
are very important for your interviews.

335
00:25:45,880 --> 00:25:48,400
But if you guys ask me that,

336
00:25:49,800 --> 00:25:51,440
I really will be creating

337
00:25:51,440 --> 00:25:53,680
these building classes and all classes.

338
00:25:55,120 --> 00:25:57,640
I will say you will be
you might be doing it

339
00:25:57,640 --> 00:26:01,280
for like 20% of the time,
but maybe only 10% of the time.

340
00:26:01,280 --> 00:26:07,240
But the frameworks,
the JDK, the libraries on the Internet,

341
00:26:07,240 --> 00:26:10,920
the code that is already written,
they heavily use this concept.

342
00:26:11,160 --> 00:26:15,360
Okay,
So it's very important to understand.

343
00:26:15,360 --> 00:26:18,440
So let's say, for example, if I show you

344
00:26:21,760 --> 00:26:24,120
how this

345
00:26:24,120 --> 00:26:30,960
is used in JDK,
so let's discuss about the string class.

346
00:26:30,960 --> 00:26:31,520
Okay.

347
00:26:32,800 --> 00:26:35,320
So I hold on my control button again

348
00:26:35,320 --> 00:26:41,640
and I click on that class. So

349
00:26:44,720 --> 00:26:46,720
because you guys don't know
about the implements,

350
00:26:46,720 --> 00:26:49,320
let me find some other classes

351
00:26:55,160 --> 00:26:57,840
there.

352
00:26:57,840 --> 00:27:01,120
Okay, So you see the string Builder class

353
00:27:01,640 --> 00:27:04,960
is extending from Abstract String Builder.

354
00:27:05,040 --> 00:27:08,400
Okay,
If you guys hold down your control button

355
00:27:08,400 --> 00:27:12,360
and if you open this abstract
string builder

356
00:27:14,720 --> 00:27:18,120
so this implements thing
we will be learning in the next week.

357
00:27:18,120 --> 00:27:23,800
So this is the class from which
that distinguished the class is inherited.

358
00:27:23,800 --> 00:27:26,720
Similarly, if we check out the

359
00:27:30,240 --> 00:27:35,920
final class,

360
00:27:35,920 --> 00:27:43,880
which is also using the implementation,

361
00:27:43,880 --> 00:27:53,840
let me show you my class.

362
00:27:53,840 --> 00:27:56,880
So this object class is the parent

363
00:27:56,880 --> 00:28:00,200
of all the classes in Java. That's

364
00:28:02,920 --> 00:28:04,680
each class,

365
00:28:04,800 --> 00:28:06,840
whether you guys are writing it

366
00:28:06,840 --> 00:28:10,720
or whether it's a part is written
by the Java

367
00:28:10,720 --> 00:28:15,360
guys, all the classes
that they inherited from this class.

368
00:28:15,400 --> 00:28:19,640
Okay, So this class has to be

369
00:28:20,840 --> 00:28:24,960
very famous matters
and they are also off in the interview.

370
00:28:25,480 --> 00:28:30,480
So those matters are the hash code.

371
00:28:30,480 --> 00:28:37,440
Now, you guys might want to read
about these matters in here.

372
00:28:37,440 --> 00:28:39,240
Then there is this equals method.

373
00:28:39,240 --> 00:28:42,040
You guys remember that

374
00:28:42,040 --> 00:28:45,280
equals method in the string class

375
00:28:45,280 --> 00:28:47,080
so that

376
00:28:47,240 --> 00:28:51,600
equals method is actually coming from this
object class.

377
00:28:52,360 --> 00:28:54,640
Okay, this object class.

378
00:28:54,640 --> 00:28:59,400
But because every class has to extend

379
00:28:59,400 --> 00:29:02,040
from this class for Java guys has done

380
00:29:03,680 --> 00:29:04,440
that.

381
00:29:04,920 --> 00:29:07,040
You guys don't need to write

382
00:29:07,080 --> 00:29:10,400
extends keyword and then this object

383
00:29:10,680 --> 00:29:14,880
that the name of this class
it is inherited by default

384
00:29:15,840 --> 00:29:17,880
by all the classes in Java.

385
00:29:17,880 --> 00:29:35,080
So if you guys check the class,
you will not see any extents

386
00:29:35,080 --> 00:29:37,440
keyword in here.

387
00:29:37,440 --> 00:29:42,360
But still this method is available
inside the string class.

388
00:29:42,360 --> 00:29:45,240
And if you go to that

389
00:29:49,800 --> 00:29:52,360
equals method

390
00:29:52,600 --> 00:29:55,840
in here,

391
00:29:55,840 --> 00:29:59,880
so you guys will see that this equals
method.

392
00:30:00,760 --> 00:30:03,080
It is also present.

393
00:30:03,560 --> 00:30:07,040
Yes, it's kind of DNA code for Java DBAs

394
00:30:07,040 --> 00:30:09,120
for every class you guys will see that

395
00:30:11,040 --> 00:30:17,160
equals method is also present inside this
string class.

396
00:30:17,160 --> 00:30:20,280
Okay, So
and this is the topic of today's class.

397
00:30:20,760 --> 00:30:23,880
What happens if we have a method

398
00:30:25,200 --> 00:30:26,920
in the parent class

399
00:30:26,920 --> 00:30:30,120
and if we have the exact same name method

400
00:30:30,480 --> 00:30:33,720
in the child class, then how things are

401
00:30:34,920 --> 00:30:35,280
happen.

402
00:30:35,280 --> 00:30:38,120
Okay, so this is what we
will be discussing today. But

403
00:30:40,840 --> 00:30:43,800
this object class.

404
00:30:43,800 --> 00:30:47,640
So so most of the time
they will be asking you

405
00:30:47,640 --> 00:30:51,600
what is the purpose of these
three methods in the object class

406
00:30:52,680 --> 00:30:56,120
is Java uses the concept of multi multiple

407
00:30:56,160 --> 00:30:59,840
behind the scenes for this language,
but do not allow for public use yet.

408
00:30:59,840 --> 00:31:02,520
So this is called hidden for programmers.

409
00:31:03,000 --> 00:31:06,600
So some things are allowed
for only Java guys,

410
00:31:07,160 --> 00:31:10,160
but not for general programmers
like you and me.

411
00:31:10,680 --> 00:31:15,000
Okay, so behind the scene, yes,
you are right, because technically

412
00:31:15,000 --> 00:31:19,520
every class
that you are extending from another class

413
00:31:19,520 --> 00:31:22,520
by explicitly writing
that extends keyword,

414
00:31:23,640 --> 00:31:26,480
you do already
extending from this object class.

415
00:31:27,720 --> 00:31:30,360
So technically that class
already has one parent

416
00:31:30,360 --> 00:31:32,920
and then you are extending
from another parent.

417
00:31:33,240 --> 00:31:35,640
So you are extending from two classes.

418
00:31:35,640 --> 00:31:39,800
So but that is only allowed by Java base.

419
00:31:39,800 --> 00:31:40,000
Okay.

420
00:31:40,000 --> 00:31:43,080
What if we tried to extend it explicitly?

421
00:31:43,080 --> 00:31:54,000
If we tried to expand from two classes,
then we will not be applicable that.

422
00:31:54,000 --> 00:31:59,120
So I will encourage
you guys to read through these matters.

423
00:31:59,120 --> 00:32:04,680
So let me just quickly explain this
returns a hash called value for object.

424
00:32:04,800 --> 00:32:09,600
This method is supported
for the benefit of hash table,

425
00:32:09,880 --> 00:32:13,000
such as those provided by Java

426
00:32:14,000 --> 00:32:14,520
hash map.

427
00:32:14,520 --> 00:32:17,720
So there are more structures

428
00:32:17,720 --> 00:32:20,920
in Java like arrays and variables.

429
00:32:20,920 --> 00:32:23,560
So you guys have learned
about only two structures, right?

430
00:32:24,920 --> 00:32:27,240
The end is which can store
multiple values.

431
00:32:27,240 --> 00:32:31,440
The variables
which can only store one value at a time.

432
00:32:31,440 --> 00:32:37,040
But there is a whole collection
of structures and other classes

433
00:32:37,080 --> 00:32:41,440
which can store the data
in many different places.

434
00:32:41,440 --> 00:32:44,040
So this hash map is one of them.

435
00:32:44,040 --> 00:32:47,280
How can we see those methods
so we can go over them?

436
00:32:47,280 --> 00:32:50,720
So you guys have two, right?

437
00:32:50,880 --> 00:32:52,960
You guys can just type object in here

438
00:32:58,160 --> 00:32:59,000
like this.

439
00:32:59,000 --> 00:33:02,160
You hold down your control button
and then you can click on that.

440
00:33:02,240 --> 00:33:03,560
This method

441
00:33:04,240 --> 00:33:06,240
and to take you to the object

442
00:33:06,240 --> 00:33:20,480
class.

443
00:33:20,480 --> 00:33:25,640
In simple words, what you guys can see
can see is that hash code is kind of

444
00:33:28,000 --> 00:33:31,360
hashCode returns a and integer value.

445
00:33:31,840 --> 00:33:38,440
That is kind of the address of that object
in the memory.

446
00:33:38,440 --> 00:33:41,920
Okay, it's not the actual actual address,
but it is

447
00:33:43,200 --> 00:33:44,960
created using that.

448
00:33:44,960 --> 00:33:49,560
So what I learned why I am saying
that you guys see this native viewer.

449
00:33:50,480 --> 00:33:53,280
So the whole Java

450
00:33:54,000 --> 00:33:54,760
server,

451
00:33:55,080 --> 00:33:58,840
some parts of the Java, they are written
in other programing languages.

452
00:33:59,160 --> 00:34:01,440
So like, like C and C++.

453
00:34:02,040 --> 00:34:05,360
So how I do that in Eclipse.

454
00:34:05,360 --> 00:34:08,040
So Muhannad, why,
why are you still using Eclipse?

455
00:34:08,760 --> 00:34:13,080
So by the way, you're saying you,
you hold down your control button

456
00:34:13,080 --> 00:34:16,600
and you can click on that for that food
and to go to that class

457
00:34:21,760 --> 00:34:24,240
and you likes Eclipse

458
00:34:24,240 --> 00:34:28,720
So wherever you guys will see this
native keyword, which means the

459
00:34:30,040 --> 00:34:30,560
disk in

460
00:34:30,560 --> 00:34:33,320
this matter, you will see
there is no body for this method.

461
00:34:33,960 --> 00:34:36,960
So we only have this name,
this parentheses, and then there is

462
00:34:36,960 --> 00:34:37,640
this semicolon.

463
00:34:37,640 --> 00:34:40,160
So this more body of this
method is not present.

464
00:34:40,440 --> 00:34:42,480
So there is that body of this method.

465
00:34:43,160 --> 00:34:45,600
So that body of this method is actually

466
00:34:47,720 --> 00:34:51,000
written in other programing languages
like C and C++.

467
00:34:51,000 --> 00:34:56,880
I need to support
another denoted by by your JVM.

468
00:34:56,880 --> 00:35:00,680
So there are very detailed
explanations of order.

469
00:35:01,000 --> 00:35:05,600
Now there is this equal to my third,
which checks

470
00:35:06,000 --> 00:35:10,120
so the equals method in the object class.

471
00:35:10,120 --> 00:35:15,360
It only checks if two objects,
if they have the same hash code or not.

472
00:35:15,360 --> 00:35:17,520
Okay.

473
00:35:17,520 --> 00:35:20,040
So you see
this is equal to equal to object.

474
00:35:20,880 --> 00:35:23,040
And if we go to the string class, there is

475
00:35:23,760 --> 00:35:26,280
there are a lot of lines of code in here.

476
00:35:26,280 --> 00:35:29,320
Okay. So it's something very simple.

477
00:35:29,400 --> 00:35:32,240
In here
we are only checking if two objects,

478
00:35:32,240 --> 00:35:40,840
if they have the same address or not,
then we have this boosting method.

479
00:35:40,960 --> 00:35:44,880
You guys remember that two string
method arrays got to string

480
00:35:45,120 --> 00:35:47,880
or whenever we have to clear that

481
00:35:48,920 --> 00:35:51,240
and then we have to convert that builder

482
00:35:52,360 --> 00:35:55,160
class object to the string.

483
00:35:55,160 --> 00:35:58,280
We call this boosting method

484
00:35:58,560 --> 00:35:59,800
so that

485
00:36:00,240 --> 00:36:03,520
that initial value, if you guys prior

486
00:36:03,520 --> 00:36:07,600
to print out your adding without calling
that add is the same method.

487
00:36:07,920 --> 00:36:12,120
Actually this method from this object
class is being called.

488
00:36:12,440 --> 00:36:13,080
Okay.

489
00:36:13,560 --> 00:36:16,560
And that's why you,
you guys see that name of the class.

490
00:36:16,560 --> 00:36:17,880
Then this started fine

491
00:36:17,880 --> 00:36:21,760
and then these are hashCode,
okay, Those are symbols and all that.

492
00:36:22,040 --> 00:36:26,560
That's where they are coming from.

493
00:36:26,560 --> 00:36:29,920
Then this notifies the market writing
or if I also

494
00:36:30,960 --> 00:36:34,760
it is also for market threading
when you guys go going

495
00:36:34,760 --> 00:36:37,920
make you worry about now
there is this finalized method

496
00:36:39,160 --> 00:36:41,880
so whenever we create would be

497
00:36:42,200 --> 00:36:44,720
objects would declare the

498
00:36:45,360 --> 00:36:48,320
we initialize the values
through constructor.

499
00:36:49,080 --> 00:36:51,680
Now once you guys are done
using that object,

500
00:36:52,160 --> 00:36:56,040
this finalized method
by your JVM is called

501
00:36:56,320 --> 00:36:59,280
and this finalized method is where

502
00:36:59,280 --> 00:37:03,240
all the memory for your object is removed.

503
00:37:03,400 --> 00:37:05,320
Okay, Next. Clearly.

504
00:37:05,320 --> 00:37:07,480
So there is this concept of garbage
collector.

505
00:37:07,480 --> 00:37:17,160
Do you guys know about the garbage
collector? No.

506
00:37:17,520 --> 00:37:19,440
So when we write the new keyword,

507
00:37:20,400 --> 00:37:22,720
when write the new keyword,

508
00:37:22,720 --> 00:37:24,960
that's when the memory

509
00:37:24,960 --> 00:37:28,200
is declared inside your your ram file.

510
00:37:28,200 --> 00:37:30,400
That object. Okay.

511
00:37:30,400 --> 00:37:34,880
And as a programmer, for example,
in C++ language,

512
00:37:35,520 --> 00:37:38,280
the programmers are responsible

513
00:37:38,520 --> 00:37:43,000
to remove that from the memory
once they are done using that.

514
00:37:43,320 --> 00:37:43,680
Okay.

515
00:37:43,680 --> 00:37:49,640
So if a programmer in C++
is declaring an object

516
00:37:49,640 --> 00:37:53,360
or if it is declaring a variable, once

517
00:37:53,720 --> 00:37:56,520
he is done using that variable or object,

518
00:37:57,120 --> 00:38:00,120
he should delete that variable

519
00:38:00,840 --> 00:38:04,160
to release the memory from the RAM.

520
00:38:04,320 --> 00:38:05,040
Okay.

521
00:38:05,040 --> 00:38:07,560
So but in Java or Java guys did.

522
00:38:08,000 --> 00:38:11,760
And so they have tried to solve
all the problems

523
00:38:11,760 --> 00:38:15,960
that were there in C++ and C,
so they written the program

524
00:38:16,480 --> 00:38:19,800
and that program is called
The Garbage Collector,

525
00:38:19,800 --> 00:38:23,600
and they have automatic measure
of that process now in Java.

526
00:38:23,880 --> 00:38:28,560
Java automatically detects
when you are done using a certain object

527
00:38:29,000 --> 00:38:32,960
and chromatically deletes
the memory for that object from your RAM

528
00:38:34,080 --> 00:38:35,320
before deleting that memory.

529
00:38:35,320 --> 00:38:39,400
This is the finalized method
that Java will call.

530
00:38:39,600 --> 00:38:43,520
So all the classes because they will be
inheriting from the object.

531
00:38:43,760 --> 00:38:48,800
So technically every class will be having
this finalized method right?

532
00:38:48,800 --> 00:38:52,400
So if you guys want to perform
certain things

533
00:38:52,600 --> 00:38:56,360
before the index,
audio classes will be moved from the RAM.

534
00:38:56,800 --> 00:38:59,120
This is where you put that code. Okay.

535
00:38:59,520 --> 00:39:04,960
So that you are sure that before
the memory is released, before

536
00:39:04,960 --> 00:39:10,040
the object is deleted from memory,
maybe you want to send an email

537
00:39:10,040 --> 00:39:13,040
or maybe you want to save that
that's actually a file.

538
00:39:13,040 --> 00:39:16,560
Or maybe you want to send that out
to a network or whatever

539
00:39:16,560 --> 00:39:21,080
you want to do with that so that you are
sure that you will never lose data.

540
00:39:21,640 --> 00:39:22,800
So there we are.

541
00:39:22,800 --> 00:39:26,640
This finalized method is used,

542
00:39:26,640 --> 00:39:30,960
so I will repeat these things
in the next week again.

543
00:39:31,000 --> 00:39:34,400
So at this point, if you guys
don't understand all the concepts,

544
00:39:34,400 --> 00:39:36,760
I just want to give you a starter

545
00:39:37,560 --> 00:39:40,600
in this class because in the next classes
we will be discussing

546
00:39:40,600 --> 00:39:41,760
these kind of things.

547
00:39:41,760 --> 00:39:59,120
So it's fine if you guys don't understand
all the things.

548
00:39:59,120 --> 00:40:00,840
Okay, let's, let's solve the tasks

549
00:40:26,800 --> 00:40:28,960
in this and the

550
00:40:29,760 --> 00:40:32,280
statement for gospel and write a program

551
00:40:32,280 --> 00:40:49,800
for movie level inheritance.

552
00:40:49,800 --> 00:40:54,000
So write a program
for multi-level inheritance.

553
00:40:54,000 --> 00:40:57,400
We have class inherited by B

554
00:40:57,400 --> 00:41:00,440
and class B, Inherit

555
00:41:00,440 --> 00:41:01,640
class

556
00:41:02,520 --> 00:41:12,880
C, okay, so

557
00:41:13,960 --> 00:41:16,560
class A is inherited by

558
00:41:17,720 --> 00:41:19,840
B, So can you guys
tell me which one will be

559
00:41:19,840 --> 00:41:29,520
the parent class?

560
00:41:29,520 --> 00:41:31,680
Class is

561
00:41:31,680 --> 00:41:34,000
inherited by B, so the

562
00:41:34,000 --> 00:41:39,480
E will be parent.

563
00:41:39,480 --> 00:41:41,640
So let me create

564
00:41:43,080 --> 00:41:50,240
next and create a new package.

565
00:41:50,240 --> 00:41:53,000
B extends s

566
00:41:57,120 --> 00:42:00,240
So this is class A

567
00:42:02,440 --> 00:42:07,600
So there is one more thing
that I want to show you that is related

568
00:42:07,600 --> 00:42:10,800
to how the constructors are called

569
00:42:11,280 --> 00:42:13,400
when we have the

570
00:42:14,040 --> 00:42:15,400
inheritance relationship.

571
00:42:15,400 --> 00:42:21,040
So once we are done with these tasks,
remind me about that.

572
00:42:21,040 --> 00:42:23,840
There should be class B extends E?

573
00:42:24,600 --> 00:42:26,640
Yes, give me. Okay,

574
00:42:28,000 --> 00:42:30,760
so I intend that

575
00:42:41,960 --> 00:42:43,440
this is what I inherited.

576
00:42:43,440 --> 00:42:59,400
I mean, and let me,

577
00:43:00,880 --> 00:43:03,240
let me show you guys how

578
00:43:04,640 --> 00:43:07,000
I, how can we create multiple

579
00:43:07,000 --> 00:43:10,240
classes inside a single file?

580
00:43:10,400 --> 00:43:10,800
Okay.

581
00:43:10,800 --> 00:43:14,160
So you guys have not done this before,
right?

582
00:43:14,160 --> 00:43:16,880
Creating than one classes
inside the same part

583
00:43:18,000 --> 00:43:20,360
of the school that I

584
00:43:29,240 --> 00:43:29,640
recommend

585
00:43:29,640 --> 00:43:38,160
to this class from here.

586
00:43:38,160 --> 00:43:40,320
So remember this rule.

587
00:43:40,320 --> 00:43:42,880
And it is also asking in interview
some sometimes

588
00:43:43,920 --> 00:43:45,840
in a single Java file.

589
00:43:45,840 --> 00:43:50,640
We can only have one public class,
but we can have other classes

590
00:43:51,720 --> 00:43:53,200
without that public keyword.

591
00:43:53,200 --> 00:43:56,040
So for example,
if I try to put that public

592
00:43:57,840 --> 00:44:01,120
inside with this class as well,
I will be getting an error.

593
00:44:01,120 --> 00:44:03,240
Okay, so this is not allowed.

594
00:44:03,840 --> 00:44:05,760
Can you guys tell me why you do not allow

595
00:44:15,800 --> 00:44:17,320
conflict prior to Java?

596
00:44:17,320 --> 00:44:22,320
Always solving
every file that you create with distort

597
00:44:22,360 --> 00:44:25,920
Java extension
when you are executing that.

598
00:44:26,280 --> 00:44:28,520
Yes, Java gets confused

599
00:44:29,280 --> 00:44:32,360
when you are executing that file

600
00:44:32,360 --> 00:44:33,840
and with the JVM.

601
00:44:33,840 --> 00:44:36,880
So JVM first looks for the public class.

602
00:44:36,880 --> 00:44:39,280
Is this the right way?

603
00:44:39,840 --> 00:44:41,400
Yes, this can

604
00:44:41,400 --> 00:44:44,880
and this can be one of the solutions you

605
00:44:45,560 --> 00:44:47,240
it is being already

606
00:44:47,240 --> 00:44:49,520
declared as a public class. Yes.

607
00:44:50,560 --> 00:44:54,400
So then we have the spin class

608
00:44:54,560 --> 00:44:58,320
and then we can

609
00:44:59,080 --> 00:45:01,960
in yet another class, Class B

610
00:45:07,360 --> 00:45:08,640
and let me know

611
00:45:08,640 --> 00:45:11,760
if you guys want me to slow down.

612
00:45:11,760 --> 00:45:14,200
And then we have

613
00:45:16,160 --> 00:45:29,520
seen, okay, so

614
00:45:30,920 --> 00:45:32,160
let's do this.

615
00:45:32,160 --> 00:45:34,440
I don't want you to confuse.

616
00:45:34,440 --> 00:45:37,480
So let me quickly,

617
00:45:38,400 --> 00:45:43,560
can we change the statement?

618
00:45:43,560 --> 00:45:48,200
And if you whatever way you guys have used
is fine,

619
00:45:48,600 --> 00:45:53,200
because the main purpose was to make
a multiple inheritance example.

620
00:45:53,400 --> 00:45:57,640
Not if if, if you want
which class is inheriting

621
00:45:57,640 --> 00:46:01,800
from the other class. So

622
00:46:05,720 --> 00:46:09,520
in a class C

623
00:46:11,080 --> 00:46:13,160
inherits from

624
00:46:14,760 --> 00:46:17,360
Class B and

625
00:46:21,200 --> 00:46:25,080
Class B

626
00:46:26,280 --> 00:46:28,920
and from

627
00:46:30,000 --> 00:46:33,440
class, if

628
00:46:40,400 --> 00:46:42,640
so, and I want you to focus so

629
00:46:49,520 --> 00:46:53,080
all right, I stems here

630
00:46:54,280 --> 00:46:57,040
and I write

631
00:46:57,040 --> 00:46:59,440
externals B, Okay.

632
00:47:00,120 --> 00:47:02,360
Are you guys done writing this code?

633
00:47:02,360 --> 00:47:07,000
So in our task one classes, we can create
three different classes like ABC.

634
00:47:07,000 --> 00:47:11,560
We can create any number of classes,
as many classes as you want, with only one

635
00:47:11,560 --> 00:47:25,680
public class.

636
00:47:25,680 --> 00:47:32,800
And same is created on package Explorer.

637
00:47:32,800 --> 00:47:38,640
You mean in here?

638
00:47:38,640 --> 00:47:42,960
So these are
no copies are getting created?

639
00:47:44,400 --> 00:47:47,680
Yes, But you see,
this is a part of Task One or Java.

640
00:47:47,680 --> 00:48:08,440
So these classes, they are part of Task
One or Java.

641
00:48:08,440 --> 00:48:08,760
Okay.

642
00:48:08,760 --> 00:48:13,920
Yesterday there was three windows,
but it's much easier.

643
00:48:13,920 --> 00:48:16,040
Everything in one page. Yes.

644
00:48:16,040 --> 00:48:17,920
So we'll we will be using this one.

645
00:48:17,920 --> 00:48:20,840
How you create Java inside of Java.

646
00:48:22,440 --> 00:48:26,400
This is how we could here Java
and try to go

647
00:48:32,800 --> 00:48:33,360
and yes,

648
00:48:33,360 --> 00:48:51,120
let me show you.

649
00:48:51,120 --> 00:48:54,920
So let's you have to do this inside

650
00:48:56,280 --> 00:48:57,880
that task alone.

651
00:48:57,880 --> 00:49:01,960
Well this package as for the task one,
you have to write

652
00:49:02,760 --> 00:49:05,640
this class A and B and C like this

653
00:49:16,720 --> 00:49:18,840
if you still face any issues.

654
00:49:20,480 --> 00:49:23,360
So let me create

655
00:49:23,880 --> 00:49:26,360
let me create an object

656
00:49:27,840 --> 00:49:33,000
of B, class B,

657
00:49:33,360 --> 00:49:38,920
So b, B is equal to new B.

658
00:49:38,920 --> 00:49:41,880
Can you guys
tell me if I execute this code,

659
00:49:41,960 --> 00:49:44,440
how many lines I will see on output

660
00:50:24,080 --> 00:50:25,320
or digital lines?

661
00:50:25,320 --> 00:50:26,600
Nothing.

662
00:50:27,480 --> 00:50:28,360
Okay. No.

663
00:50:28,360 --> 00:50:33,040
Now, how many lines?

664
00:50:33,040 --> 00:50:37,080
Those who are saying to anyways, explain
which two lines

665
00:50:37,080 --> 00:50:40,920
I will be getting on the console and why

666
00:50:42,920 --> 00:50:48,320
experience error.

667
00:50:48,320 --> 00:50:56,640
So let me first try the security score.

668
00:50:56,640 --> 00:51:00,320
So what happens is that we first

669
00:51:00,800 --> 00:51:04,200
see this error and then we see the speed.

670
00:51:04,680 --> 00:51:08,880
So what is happening behind the scenes?

671
00:51:08,880 --> 00:51:13,080
Even though we are only creating
the object of Class B,

672
00:51:14,360 --> 00:51:15,880
the object

673
00:51:15,880 --> 00:51:20,400
and the constructor of the class,
it is also called again.

674
00:51:20,440 --> 00:51:23,880
So whenever the constructor,

675
00:51:23,880 --> 00:51:27,120
whenever the object for the child

676
00:51:27,120 --> 00:51:30,320
class is created, always, always.

677
00:51:31,000 --> 00:51:33,520
If that child

678
00:51:34,800 --> 00:51:36,680
has a parent class

679
00:51:36,680 --> 00:51:40,880
first, the object for the parent
class will be created.

680
00:51:41,040 --> 00:51:41,800
Okay.

681
00:51:42,240 --> 00:51:46,080
And to create we can the object.

682
00:51:46,240 --> 00:51:51,080
The constructor of the parent
class will be called first.

683
00:51:51,600 --> 00:51:56,120
And let's say if you have tags
and more classes in the hierarchy,

684
00:51:56,400 --> 00:51:59,360
in the level in multiple levels before a

685
00:52:00,080 --> 00:52:03,520
then all those thousand classes,

686
00:52:03,520 --> 00:52:07,600
the constructors of those classes
will be called,

687
00:52:08,280 --> 00:52:10,400
their objects will be created.

688
00:52:10,760 --> 00:52:17,160
And at the very last
the object of that child is created.

689
00:52:17,240 --> 00:52:19,560
I am getting ahead of

690
00:52:33,160 --> 00:52:34,520
so our law

691
00:52:34,520 --> 00:52:37,920
and everyone to make sure guys,
you are writing your classes

692
00:52:38,640 --> 00:52:42,040
after this
ending bracket of this task. One

693
00:52:57,720 --> 00:52:59,000
and also are

694
00:52:59,000 --> 00:53:01,280
why you are missing these parentheses.

695
00:53:02,040 --> 00:53:05,120
So after
and there are these parentheses after we

696
00:53:05,120 --> 00:53:08,120
we have these parentheses
because we are writing a constructor.

697
00:53:08,120 --> 00:53:14,880
So you should also write
these parentheses.

698
00:53:14,880 --> 00:53:21,760
Yes, that is also so put together.

699
00:53:21,760 --> 00:53:25,120
So is the other thing.

700
00:53:25,120 --> 00:53:31,120
Look.

701
00:53:31,120 --> 00:53:35,640
So let's say
if I am creating the object of class

702
00:53:35,640 --> 00:53:39,520
C, if I'm creating the

703
00:53:39,520 --> 00:53:42,560
I'll go see how many lines I will see

704
00:53:42,560 --> 00:53:44,480
on the console guys

705
00:53:47,280 --> 00:53:49,680
and in which sequence

706
00:53:53,640 --> 00:53:55,400
A, B, C,

707
00:53:55,400 --> 00:53:58,920
you can think or you can think
about the scenario like this.

708
00:53:58,920 --> 00:54:01,800
First, the grandparent is born,

709
00:54:02,640 --> 00:54:05,640
then parent is born
and then child is born.

710
00:54:06,040 --> 00:54:10,040
So first of all, the object for
the grandparent is created,

711
00:54:10,600 --> 00:54:14,240
then for the parent
and then for the child.

712
00:54:14,360 --> 00:54:16,680
My goodness,
whose life is worse than mine?

713
00:54:16,680 --> 00:54:20,640
My child is coming on.

714
00:54:20,640 --> 00:54:23,840
I still have the editor
even when I do a Russian.

715
00:54:23,840 --> 00:54:27,640
The screenshot again
and make sure you you are removing it.

716
00:54:28,080 --> 00:54:28,560
You are

717
00:54:29,520 --> 00:54:30,680
writing it after

718
00:54:30,680 --> 00:54:35,880
these parentheses.

719
00:54:35,880 --> 00:54:46,720
So now if I execute this code,

720
00:54:46,720 --> 00:54:55,760
getting error off duplication,

721
00:54:55,760 --> 00:54:57,840
can you share the screenshot
of the error from

722
00:55:05,040 --> 00:55:05,400
Is there

723
00:55:05,400 --> 00:55:09,720
no one in this channel?

724
00:55:09,720 --> 00:55:26,800
Let me show you the whole code. Yes,

725
00:55:28,000 --> 00:55:29,800
we can have only one class with one

726
00:55:29,800 --> 00:55:47,440
name.

727
00:55:47,440 --> 00:55:49,360
All this time you are missing.

728
00:55:49,360 --> 00:55:52,280
You have to type after the new keyword.

729
00:55:52,280 --> 00:55:54,720
You have type B

730
00:55:54,840 --> 00:55:55,760
and we are right.

731
00:55:55,760 --> 00:55:58,520
Also having a long day for

732
00:56:04,040 --> 00:56:06,360
Would you please explain line nine?

733
00:56:07,320 --> 00:56:07,840
Line nine.

734
00:56:07,840 --> 00:56:11,040
This one
I am creating an object of class C on line

735
00:56:11,040 --> 00:56:15,960
nine.

736
00:56:15,960 --> 00:56:18,840
I'm creating an object in line 13.

737
00:56:18,840 --> 00:56:21,120
Please. This is just a constructor.

738
00:56:21,600 --> 00:56:23,080
Constructor of class it.

739
00:56:23,080 --> 00:56:25,080
Right? Same name as the class name.

740
00:56:25,360 --> 00:56:27,480
No return type

741
00:56:27,680 --> 00:56:29,240
between two constructor

742
00:56:34,400 --> 00:56:37,040
Is this best way to use inheritance?

743
00:56:37,040 --> 00:56:39,720
I mean best practice?

744
00:56:39,720 --> 00:56:45,400
You mean they are creating the classes
inside the same file?

745
00:56:45,400 --> 00:56:47,040
No, no, no. This is not the best.

746
00:56:47,040 --> 00:56:51,040
I have just written it
because if so, this is weird.

747
00:56:51,040 --> 00:56:51,960
You should use it.

748
00:56:51,960 --> 00:56:52,680
If this.

749
00:56:52,680 --> 00:56:56,040
If you know that this class B

750
00:56:56,640 --> 00:56:58,920
only and only this task

751
00:56:59,200 --> 00:57:03,760
class will be using this class B
or class E or classy,

752
00:57:04,520 --> 00:57:07,480
then you should drive two classes
inside the same file.

753
00:57:08,000 --> 00:57:13,240
If one class is only
and only related to another class,

754
00:57:13,920 --> 00:57:16,680
then you should combine these two classes
in a single file.

755
00:57:16,680 --> 00:57:19,720
Otherwise, the best practice is to create
a separate file format.

756
00:57:19,720 --> 00:57:20,440
Class

757
00:57:21,880 --> 00:57:25,680
is the main imperative
should not be after of class.

758
00:57:25,680 --> 00:57:29,680
No, it can be anywhere.

759
00:57:29,680 --> 00:57:30,080
Really.

760
00:57:30,080 --> 00:57:33,000
You started with work with that?

761
00:57:33,000 --> 00:57:36,280
I mean with. See? No, I started with me

762
00:57:37,640 --> 00:57:37,960
class.

763
00:57:37,960 --> 00:57:39,480
I wrote B

764
00:57:40,800 --> 00:57:41,880
at my first.

765
00:57:41,880 --> 00:57:44,000
I wrote B as before.

766
00:57:44,000 --> 00:57:45,160
You told our Java code.

767
00:57:45,160 --> 00:57:48,040
I think you from top to bottom

768
00:57:48,040 --> 00:57:50,360
it executes from top to bottom

769
00:57:50,360 --> 00:57:52,560
inside methods then is.

770
00:57:53,400 --> 00:57:56,520
But here
we call C class about the classes.

771
00:57:56,520 --> 00:57:58,680
It works because it is constructor. No.

772
00:57:58,680 --> 00:58:01,280
So then is in here.

773
00:58:01,280 --> 00:58:03,600
We are defining classes.

774
00:58:03,600 --> 00:58:05,880
We are not calling these classes.

775
00:58:06,480 --> 00:58:08,400
We discussed this class.

776
00:58:08,400 --> 00:58:13,800
It will never be executed unless
and until you write it inside any method.

777
00:58:14,200 --> 00:58:18,640
So that top to bottom approach
is only followed inside the methods.

778
00:58:19,040 --> 00:58:19,520
Okay.

779
00:58:19,520 --> 00:58:23,400
Outside of that method
it does not follow down.

780
00:58:23,440 --> 00:58:24,400
Do not follow this.

781
00:58:24,400 --> 00:58:27,920
You can define variables any way
and you can define methods that wouldn't

782
00:58:27,960 --> 00:58:28,960
be any anywhere.

783
00:58:28,960 --> 00:58:45,920
You can define with any view.

784
00:58:45,920 --> 00:58:53,400
And then other questions.

785
00:58:53,400 --> 00:58:55,440
That was my question. Now understood.

786
00:58:55,640 --> 00:58:57,720
I still have the issue now.

787
00:58:57,960 --> 00:58:59,400
Can you share the screenshot here

788
00:59:00,520 --> 00:59:01,600
all our

789
00:59:01,600 --> 00:59:07,320
so this first task one,
I hope you guys were able to do this

790
00:59:07,960 --> 00:59:10,680
what the task tasks harder

791
00:59:10,680 --> 00:59:23,280
easy.

792
00:59:23,280 --> 00:59:27,240
I did not get a chance to do it

793
00:59:27,360 --> 00:59:28,520
right program

794
00:59:28,520 --> 00:59:31,520
couldn't hurt
class said that has been tough with you

795
00:59:31,520 --> 00:59:34,560
starting again on call
or we used that method

796
00:59:34,560 --> 00:59:37,400
in the class B

797
00:59:44,480 --> 00:59:46,080
I want to see the output.

798
00:59:46,080 --> 00:59:48,560
PS Yes, sure.

799
00:59:48,920 --> 00:59:49,840
This is the output.

800
00:59:49,840 --> 00:59:50,640
Give me

801
01:00:08,360 --> 01:00:09,840
all two former decode

802
01:00:09,840 --> 01:00:12,920
intelligent control all then and

803
01:00:15,240 --> 01:00:16,440
control out.

804
01:00:16,440 --> 01:00:18,680
And this one

805
01:00:24,560 --> 01:00:25,760
it gives me

806
01:00:25,760 --> 01:00:46,320
an error.

807
01:00:46,320 --> 01:00:51,040
So Mohanlal
do you have to remove the ending

808
01:00:51,080 --> 01:00:53,680
calibrated at line 29

809
01:01:01,840 --> 01:01:07,000
or do drag lines mean no?

810
01:01:07,000 --> 01:01:08,280
The intelligent process?

811
01:01:08,280 --> 01:01:28,200
Yes. Intelligent process.

812
01:01:28,200 --> 01:01:31,000
And I will make sure this

813
01:01:33,040 --> 01:01:34,080
class

814
01:01:34,080 --> 01:01:37,840
that you are writing
it is with lowercase C, not uppercase C

815
01:01:44,400 --> 01:01:47,640
if we call B and C object both.

816
01:01:48,640 --> 01:01:52,560
So first seem B for the B object.

817
01:01:53,040 --> 01:01:55,800
The constructor of A and B will be called

818
01:01:56,120 --> 01:01:58,160
because B has one parent

819
01:01:58,840 --> 01:02:03,960
and then if we call the object C, then
all three constructors will be called.

820
01:02:03,960 --> 01:02:04,200
Right?

821
01:02:04,200 --> 01:02:07,320
Because C is the child grand grandchild

822
01:02:10,320 --> 01:02:15,880
and I'm about to throw
my whole laptop off the window.

823
01:02:16,440 --> 01:02:23,360
Maybe you want to go with it as well.

824
01:02:23,360 --> 01:02:27,160
You string

825
01:02:27,280 --> 01:02:30,160
the entire loop

826
01:02:31,000 --> 01:02:38,280
does not exist.

827
01:02:38,280 --> 01:02:39,440
Homework one.

828
01:02:39,440 --> 01:02:42,440
So Areva, you are making a mistake

829
01:02:43,560 --> 01:02:45,720
in a different file.

830
01:02:46,400 --> 01:02:46,880
Okay.

831
01:02:46,880 --> 01:02:49,920
That the name of that filed by is

832
01:02:51,000 --> 01:02:56,160
capitalized w one
you have to fix that issue first.

833
01:02:56,280 --> 01:02:57,920
So it will be almost one.

834
01:02:57,920 --> 01:03:00,960
Okay, so it is the same class

835
01:03:00,960 --> 01:03:03,040
on line number three.

836
01:03:03,040 --> 01:03:04,560
Can you show line number three?

837
01:03:04,560 --> 01:03:06,040
You are doing something wrong.

838
01:03:06,040 --> 01:03:14,360
On line
number three, indicate or swing or enter.

839
01:03:14,360 --> 01:03:19,560
All does not exist.

840
01:03:19,560 --> 01:03:21,960
Not Java. The class looks good

841
01:03:32,000 --> 01:03:33,400
and that caused me yesterday.

842
01:03:33,400 --> 01:03:36,840
I had to go to class and

843
01:03:43,680 --> 01:03:45,680
if it does that we will be

844
01:03:49,120 --> 01:03:49,600
okay.

845
01:03:49,600 --> 01:03:51,960
I hope the building is only having
one floor

846
01:03:53,640 --> 01:03:55,680
and the window is not more than one

847
01:03:55,680 --> 01:03:57,160
or two feet

848
01:04:02,880 --> 01:04:04,680
and this is also been declining.

849
01:04:04,680 --> 01:04:07,760
So I am definitely in the

850
01:04:09,960 --> 01:04:11,080
the arrow.

851
01:04:11,080 --> 01:04:13,560
Well,
why are you writing the indicators swing?

852
01:04:13,560 --> 01:04:15,560
Don't interrupt nursing, blah blah, blah.

853
01:04:15,560 --> 01:04:20,800
I removed that line.

854
01:04:20,800 --> 01:04:24,360
Then I will be teaching you
on the question why I didn't do it.

855
01:04:24,360 --> 01:04:28,280
We put void on the methods.

856
01:04:28,280 --> 01:04:29,920
Mohammad, These are not matters.

857
01:04:29,920 --> 01:04:33,240
They are constructors.

858
01:04:33,240 --> 01:04:43,920
I thought I am only having a bad day.

859
01:04:43,920 --> 01:04:45,600
It automatically adds that.

860
01:04:45,600 --> 01:04:48,760
So no, it
automatically does not add that you

861
01:04:48,760 --> 01:04:52,080
you might have written something

862
01:04:52,080 --> 01:04:54,600
like the name of the
class or something like that.

863
01:04:55,920 --> 01:04:58,200
And if that class is from that package,

864
01:04:58,200 --> 01:05:00,680
then it will automatically import
that for you.

865
01:05:01,960 --> 01:05:04,440
Can you show the entire or if

866
01:05:05,800 --> 01:05:07,360
in fact

867
01:05:10,200 --> 01:05:12,840
I am getting at a on line 11.

868
01:05:13,800 --> 01:05:16,200
So we put on grand child class at the top.

869
01:05:16,200 --> 01:05:19,480
Of course, since we know
we are going to reach see at the end.

870
01:05:19,560 --> 01:05:23,960
No, no, you guys can write this in here

871
01:05:25,000 --> 01:05:26,320
like this.

872
01:05:26,800 --> 01:05:29,160
I just ordered so that

873
01:05:29,160 --> 01:05:30,960
you guys can understand it.

874
01:05:30,960 --> 01:05:38,040
Easy now.

875
01:05:38,040 --> 01:05:42,840
So the be for public is capital.

876
01:05:42,840 --> 01:05:45,000
It should not be capital

877
01:05:46,240 --> 01:05:47,120
line nine.

878
01:05:47,120 --> 01:05:48,200
I mean,

879
01:05:48,840 --> 01:05:52,760
in here
I am just creating an object of class C

880
01:05:56,400 --> 01:05:59,600
this creating an object of class

881
01:06:01,560 --> 01:06:03,400
and C can be any at all

882
01:06:03,400 --> 01:06:07,000
to shift to written word format no control

883
01:06:07,360 --> 01:06:11,840
I plus L to format and guide.

884
01:06:12,360 --> 01:06:18,680
You can also do this so those who are
having a hard time with the shortcuts

885
01:06:25,360 --> 01:06:26,280
there is this

886
01:06:26,280 --> 01:06:29,360
and there is this option for this shortcut

887
01:06:31,400 --> 01:06:34,760
and I think works

888
01:06:36,720 --> 01:06:41,000
the mapping like this.

889
01:06:41,000 --> 01:06:47,040
So if you type the map you guys can see,
do you guys see this option?

890
01:06:47,040 --> 01:06:50,960
So right now I have selected
Windows copy one for all for redo.

891
01:06:51,000 --> 01:06:54,200
Okay, so right now
I am using these set of shortcuts.

892
01:06:54,200 --> 01:06:58,120
But if you guys are more comfortable
with the shortcuts of Eclipse,

893
01:06:58,120 --> 01:07:02,640
all the shortcuts from eclipse,
you guys can also have those shortcuts.

894
01:07:02,640 --> 01:07:04,200
So you just have to select Eclipse

895
01:07:04,200 --> 01:07:07,040
and all the shortcuts
that you guys are used to having.

896
01:07:07,040 --> 01:07:10,560
Eclipse They will work in here if you want

897
01:07:14,120 --> 01:07:18,800
and if you guys are coming
from Videostudio Sublime NetBeans

898
01:07:19,000 --> 01:07:22,920
so you guys can have shortcuts
from everywhere inside the intelligent.

899
01:07:23,520 --> 01:07:25,040
How do we get there?

900
01:07:25,040 --> 01:07:27,240
So you guys have to type.

901
01:07:27,240 --> 01:07:30,280
You guys have to click
double shift quite quickly

902
01:07:32,280 --> 01:07:35,880
and then you have to type IMAP.

903
01:07:35,880 --> 01:07:38,560
My printout is a

904
01:07:38,600 --> 01:07:43,040
b A instead of a, b, c,
you know, can you share a song

905
01:07:43,040 --> 01:07:50,160
showing this screenshot?

906
01:07:50,160 --> 01:07:53,240
And you guys can create
definitely your own shortcuts, but

907
01:08:02,920 --> 01:08:04,320
let me know if

908
01:08:04,440 --> 01:08:08,840
if there are other students
are also facing some kind of issues.

909
01:08:09,520 --> 01:08:12,520
How do the yours become task one dot Java?

910
01:08:13,600 --> 01:08:15,680
Because I wrote Task one Dark Java

911
01:08:25,720 --> 01:08:29,200
and see B and you see so

912
01:08:29,600 --> 01:08:32,440
you know, you have to show me the class C

913
01:08:32,440 --> 01:08:38,400
as well.

914
01:08:38,400 --> 01:08:41,440
All this try to share complete
screenshots based

915
01:08:45,200 --> 01:08:47,000
medium B

916
01:08:47,480 --> 01:08:50,600
and the the letter C for the classes
capital

917
01:08:51,600 --> 01:08:53,960
you why are
you guys are making these mistakes

918
01:09:06,760 --> 01:09:08,880
I think people need doable

919
01:09:08,880 --> 01:09:13,400
and that's what
five days feels we are losing common sense

920
01:09:16,720 --> 01:09:18,120
and maybe it's because

921
01:09:18,120 --> 01:09:20,360
of the new environment

922
01:09:25,440 --> 01:09:30,720
you see inside the constructor
on line number 28, you have written a man

923
01:09:30,720 --> 01:09:34,520
then then should virtually printed
on the console definitely will be printed.

924
01:09:34,520 --> 01:09:35,120
Right?

925
01:09:35,120 --> 01:09:38,240
You have to type C online number 28

926
01:09:38,240 --> 01:09:44,560
if you want to CC on the console.

927
01:09:44,560 --> 01:09:46,760
I have an error in line.

928
01:09:47,840 --> 01:09:49,400
Something in B here today.

929
01:09:49,400 --> 01:09:53,960
Yes, I
I also will that I have an edit online

930
01:09:55,560 --> 01:10:05,680
then.

931
01:10:05,680 --> 01:10:10,000
So now you are writing all the classes

932
01:10:10,560 --> 01:10:14,080
inside this this main class.

933
01:10:14,080 --> 01:10:17,920
So the inside in here make sure
these classes they are outside of this

934
01:10:18,320 --> 01:10:21,320
closing curly bracket.

935
01:10:21,800 --> 01:10:26,040
Maybe I should not have shown you
this method of writing classes

936
01:10:26,040 --> 01:10:29,880
inside the same file
that they're my biggest stuff here.

937
01:10:30,240 --> 01:10:31,720
That's my big, biggest fear.

938
01:10:31,720 --> 01:10:34,240
When when I whenever
I have before something new,

939
01:10:34,240 --> 01:10:36,440
I have to think the end times.

940
01:10:37,120 --> 01:10:39,600
If you guys will be able to digest or run

941
01:10:41,320 --> 01:10:43,320
selected clicks

942
01:10:43,320 --> 01:10:52,560
thirds.

943
01:10:52,560 --> 01:10:54,040
Can you guys imagining Python?

944
01:10:54,040 --> 01:10:57,840
There are no brackets and in Python
you have to make sure that before

945
01:10:57,840 --> 01:11:00,960
this public
there are eight spaces and right now.

946
01:11:00,960 --> 01:11:04,160
I am working on Python
and every time you and I have missing

947
01:11:04,160 --> 01:11:21,240
one space, the code will not work.

948
01:11:21,240 --> 01:11:23,520
Fatima. It's just a warning.

949
01:11:23,520 --> 01:11:27,360
Just a warning that you are not using the
you are creating the variable B

950
01:11:27,360 --> 01:11:28,440
but you are not using it.

951
01:11:28,440 --> 01:11:31,360
So it's fine warnings. They are fine.

952
01:11:32,040 --> 01:11:35,160
You guys can ignore them
because it is redundant

953
01:11:35,320 --> 01:11:38,920
to put public on the constructor
since they are all in the same class.

954
01:11:38,920 --> 01:11:40,360
Yes Mohammad, you are right.

955
01:11:40,360 --> 01:11:44,280
There is no need of this public in here.

956
01:11:44,320 --> 01:11:47,520
You guys can simply remove the

957
01:11:48,960 --> 01:11:51,120
look,
not giving the output because you are

958
01:11:51,160 --> 01:11:53,240
you have not selected the console.

959
01:11:53,240 --> 01:11:54,960
Fatima, you make sure

960
01:11:57,200 --> 01:11:59,920
from here you select this one window.

961
01:11:59,920 --> 01:12:03,320
Not the total window, not the problems
window, not the messages window

962
01:12:06,000 --> 01:12:08,720
frame like that
mean when something happens these days.

963
01:12:08,840 --> 01:12:10,840
Are the repos hard?

964
01:12:10,840 --> 01:12:14,160
But I thought the rebels are easy

965
01:12:17,040 --> 01:12:19,600
and then they are easier then those loops

966
01:12:19,600 --> 01:12:23,880
and then those printing out
those combinations and.

967
01:12:23,880 --> 01:12:26,640
All that. No, it's not easy.

968
01:12:27,440 --> 01:12:30,760
Some of them, they are tricky loops
seem easier.

969
01:12:32,480 --> 01:12:35,000
What about the Helloworld show?

970
01:12:35,000 --> 01:12:47,480
Is that easy now?

971
01:12:47,480 --> 01:12:56,920
Even the Helloworld is not easy.

972
01:12:56,920 --> 01:12:59,920
Both are also would

973
01:13:02,240 --> 01:13:04,400
I saw the onset of effort in 100

974
01:13:04,800 --> 01:13:08,080
the table jokes
and it often gives us and otherwise

975
01:13:08,160 --> 01:13:11,520
so as

976
01:13:14,640 --> 01:13:17,520
intelligent more like intelligent guy.

977
01:13:18,520 --> 01:13:21,440
We're still hitting on the eclipse repo

978
01:13:21,480 --> 01:13:25,840
just made all info at one place in mind
so the rest

979
01:13:25,880 --> 01:13:32,080
of you can do it.

980
01:13:32,080 --> 01:13:32,880
Easy peasy.

981
01:13:34,080 --> 01:13:36,320
So can we move to the task to now

982
01:13:36,320 --> 01:13:43,200
if all the issues are resolved
and everyone looks good.

983
01:13:43,200 --> 01:13:44,040
All right.

984
01:13:44,640 --> 01:13:56,960
So then you guys

985
01:13:58,360 --> 01:14:00,640
send me

986
01:14:00,680 --> 01:14:04,280
the poster.

987
01:14:04,680 --> 01:14:05,280
Thank you.

988
01:14:05,280 --> 01:14:11,920
Let me so

989
01:14:14,280 --> 01:14:15,560
Java code not working.

990
01:14:15,560 --> 01:14:20,600
This struggle is read write program
to inherit class here

991
01:14:20,920 --> 01:14:25,120
that has my third plaintiff
which is static

992
01:14:26,800 --> 01:14:31,920
and call or reuse that method in class B.

993
01:14:31,960 --> 01:14:33,520
Okay, so

994
01:14:34,800 --> 01:14:39,960
let me start class here.

995
01:14:39,960 --> 01:14:48,880
In that class
it has a method of putting test ward

996
01:14:50,960 --> 01:14:52,640
reading for

997
01:15:02,640 --> 01:15:05,400
and we have to make it static

998
01:15:07,920 --> 01:15:08,120
here.

999
01:15:08,120 --> 01:15:10,440
Do make package or class.

1000
01:15:10,440 --> 01:15:13,520
Yes, I created this sub package task to

1001
01:15:17,120 --> 01:15:19,840
register date and

1002
01:15:19,840 --> 01:15:22,920
or reuse that matter into class B.

1003
01:15:23,680 --> 01:15:31,560
Okay,

1004
01:15:31,560 --> 01:15:36,760
so how can I use methods
from one class guys in another class

1005
01:15:47,880 --> 01:15:48,840
expense?

1006
01:15:48,840 --> 01:15:49,800
Write

1007
01:15:50,800 --> 01:15:52,680
only one answer.

1008
01:15:52,680 --> 01:15:52,880
What?

1009
01:15:52,880 --> 01:16:02,400
You guys feeling okay? I

1010
01:16:06,360 --> 01:16:09,720
So now

1011
01:16:09,720 --> 01:16:13,120
I can create the object of class B

1012
01:16:22,600 --> 01:16:24,600
word because this method is
start starting.

1013
01:16:24,600 --> 01:16:26,800
I don't even need

1014
01:16:27,160 --> 01:16:29,280
to create the object. Right. Right.

1015
01:16:29,360 --> 01:16:30,600
Do we need the object?

1016
01:16:30,600 --> 01:16:32,800
If I want to call a static method,

1017
01:16:34,520 --> 01:16:35,600
why static word?

1018
01:16:35,600 --> 01:16:39,400
Because most of
it was written in the requirements.

1019
01:16:39,400 --> 01:16:42,640
So can I call this print method

1020
01:16:44,040 --> 01:16:46,440
by writing only? B

1021
01:16:47,480 --> 01:16:50,240
not even B and then parentheses is yes. B

1022
01:16:52,520 --> 01:16:54,680
and then print F, Right.

1023
01:16:55,240 --> 01:16:59,280
So this is what we do for static meters
as a best practice.

1024
01:16:59,280 --> 01:17:09,800
We read the name of the class
and then we can call their method.

1025
01:17:09,800 --> 01:17:12,480
Okay, so we see

1026
01:17:14,160 --> 01:17:18,640
a phone

1027
01:17:19,800 --> 01:17:20,840
plus.

1028
01:17:21,240 --> 01:17:21,960
Okay,

1029
01:17:22,800 --> 01:17:26,840
so the point of this exercise is

1030
01:17:27,720 --> 01:17:31,560
we don't need to create an object
for static variables s moment.

1031
01:17:32,040 --> 01:17:33,720
We don't need to.

1032
01:17:33,800 --> 01:17:36,080
The point of this exercise was to show you

1033
01:17:37,040 --> 01:17:40,320
as you can inherit the instance method,

1034
01:17:41,120 --> 01:17:46,760
you can also in the static methods
as well.

1035
01:17:46,760 --> 01:17:56,520
And the same.

1036
01:17:56,520 --> 01:17:59,080
Are you creating different packages
for tasks?

1037
01:17:59,160 --> 01:17:59,960
Yes, so far.

1038
01:17:59,960 --> 01:18:04,080
Task one I created this task one package
for task to add another package.

1039
01:18:05,320 --> 01:18:07,880
If you guys to follow,
you can create new packages.

1040
01:18:07,880 --> 01:18:10,600
Otherwise
you can solve inside the packages. But

1041
01:18:19,600 --> 01:18:22,720
I did same class but named a one.

1042
01:18:24,120 --> 01:18:26,360
It's also fine

1043
01:18:26,520 --> 01:18:28,760
and that change your class name? Yep.

1044
01:18:30,280 --> 01:18:33,800
If you add s out in line 23

1045
01:18:33,840 --> 01:18:38,280
giving outcome of line 16.

1046
01:18:38,280 --> 01:18:43,560
If you add solid in line 20,
you want me to add NYA in here?

1047
01:18:43,560 --> 01:18:49,200
Do you want me to add something?

1048
01:18:49,200 --> 01:18:53,520
There's also word
we will learn about this concept.

1049
01:18:53,840 --> 01:18:57,560
Like, for example, if I have this method

1050
01:18:58,080 --> 01:19:01,120
in this class B as well, and

1051
01:19:04,200 --> 01:19:09,000
if I execute this code again.

1052
01:19:09,000 --> 01:19:13,680
So instead of render from B,
I will be seeing printer

1053
01:19:13,920 --> 01:19:18,400
from a printer from
I will be seeing graphically.

1054
01:19:18,680 --> 01:19:21,440
But this is what we will discuss
after the class.

1055
01:19:22,000 --> 01:19:24,120
I am creating new class, not package.

1056
01:19:24,120 --> 01:19:26,040
So are there other questions?

1057
01:19:26,040 --> 01:19:29,720
Life.

1058
01:19:29,720 --> 01:19:32,800
But I got an interesting error.

1059
01:19:33,200 --> 01:19:35,640
Yes. Issue that

1060
01:19:35,720 --> 01:19:36,720
no questions.

1061
01:19:36,720 --> 01:19:39,720
Should we to the next task

1062
01:20:01,560 --> 01:20:02,720
ask one class.

1063
01:20:02,720 --> 01:20:06,520
It is a duplicate for class here

1064
01:20:06,600 --> 01:20:09,800
in task to

1065
01:20:10,640 --> 01:20:13,400
all the in same package moment.

1066
01:20:14,600 --> 01:20:17,160
So we always have to create. Yes.

1067
01:20:17,160 --> 01:20:19,440
Then you can go inside one package.

1068
01:20:19,440 --> 01:20:21,480
You can only have one class
with your name.

1069
01:20:22,400 --> 01:20:24,320
Do we always have to create a new package?

1070
01:20:24,320 --> 01:20:26,880
No. This is just for organization.

1071
01:20:27,400 --> 01:20:31,440
The as you.

1072
01:20:31,440 --> 01:20:34,040
If you want,
you can create. Otherwise you can ignore

1073
01:20:35,800 --> 01:20:36,600
right in

1074
01:20:36,600 --> 01:20:40,360
Java program or teacher identifier.

1075
01:20:40,360 --> 01:20:44,640
And the behavior of that class cleared
three subclasses method

1076
01:20:44,760 --> 01:20:47,280
math, teacher,
chemistry teacher or teacher

1077
01:20:47,920 --> 01:20:52,080
that would have it there on features
and behavior

1078
01:20:52,320 --> 01:20:54,480
test all four classes

1079
01:20:57,040 --> 01:20:59,800
right now my mind

1080
01:21:04,360 --> 01:21:06,760
was not printing a there.

1081
01:21:06,760 --> 01:21:09,120
What are you going to discuss
later, right?

1082
01:21:09,120 --> 01:21:12,000
Yes, that's what we were discussing you to

1083
01:21:24,040 --> 01:21:24,600
build

1084
01:21:25,840 --> 01:21:28,640
the feature class.

1085
01:21:28,640 --> 01:21:31,880
So I class

1086
01:21:31,880 --> 01:21:33,360
feature

1087
01:21:36,800 --> 01:21:40,080
and then identify features
and behavior of this class.

1088
01:21:40,320 --> 01:21:40,640
Okay.

1089
01:21:40,640 --> 01:21:43,440
So can you guys tell me the features

1090
01:21:43,600 --> 01:21:46,800
or or behaviors of

1091
01:21:46,800 --> 01:22:01,800
a feature class?

1092
01:22:01,800 --> 01:22:05,040
Maybe only one behavior
and one one feature

1093
01:22:09,360 --> 01:22:10,600
being

1094
01:22:12,040 --> 01:22:13,200
name all the teachers.

1095
01:22:13,200 --> 01:22:21,640
They have name right?

1096
01:22:21,640 --> 01:22:26,880
And all the teachers, what do they do?

1097
01:22:26,880 --> 01:22:52,400
They teach art.

1098
01:22:52,400 --> 01:22:54,400
Let me be clear.

1099
01:22:54,480 --> 01:22:58,880
The math teacher.

1100
01:22:58,880 --> 01:23:00,480
So cross

1101
01:23:02,280 --> 01:23:06,080
math teacher.

1102
01:23:06,080 --> 01:23:06,600
Okay.

1103
01:23:10,920 --> 01:23:13,560
And then we can having have maybe

1104
01:23:14,280 --> 01:23:15,680
or did

1105
01:23:18,600 --> 01:23:19,080
we use

1106
01:23:19,080 --> 01:23:36,400
math? Why?

1107
01:23:36,400 --> 01:23:50,960
I'm having this error, guys.

1108
01:23:50,960 --> 01:23:52,560
Expenses and input.

1109
01:23:52,560 --> 01:23:56,440
Right now I can access this name field

1110
01:23:57,480 --> 01:24:01,240
in this classes but

1111
01:24:03,000 --> 01:24:05,040
then quickly

1112
01:24:05,600 --> 01:24:08,520
replicated for the chemistry teacher

1113
01:24:23,480 --> 01:24:26,120
and for the

1114
01:24:29,600 --> 01:24:31,600
piano

1115
01:24:31,800 --> 01:24:46,560
teacher.

1116
01:24:46,560 --> 01:24:51,080
Well how do we format into its control

1117
01:24:51,080 --> 01:24:53,240
art and

1118
01:24:58,720 --> 01:25:00,560
so right that our program

1119
01:25:00,560 --> 01:25:04,600
or teacher identify features
and behaviors of that class clear

1120
01:25:04,640 --> 01:25:08,840
three subclasses and that would have
their own features and behaviors

1121
01:25:09,600 --> 01:25:24,040
and test all those four classes.

1122
01:25:24,040 --> 01:25:24,760
All right.

1123
01:25:24,880 --> 01:25:27,440
So so when you combine this in same file,

1124
01:25:27,440 --> 01:25:31,200
you don't name
the teacher best of class. Yes.

1125
01:25:31,200 --> 01:25:35,600
We don't need we can we can write that
inside this to the main method.

1126
01:25:35,600 --> 01:25:37,320
Then we create administrative task to the

1127
01:25:38,400 --> 01:25:38,880
new place.

1128
01:25:38,880 --> 01:25:40,520
So the whole period, Yes.

1129
01:25:40,520 --> 01:25:45,120
I hope it is available to you guys.

1130
01:25:45,120 --> 01:25:48,600
Let me remove this
so that you guys can see it before class.

1131
01:25:49,600 --> 01:25:50,560
So this is the whole class.

1132
01:25:50,560 --> 01:25:53,880
Let me know what you guys are done typing

1133
01:26:21,360 --> 01:26:22,120
then.

1134
01:26:23,400 --> 01:26:25,560
Okay ask the method

1135
01:26:26,960 --> 01:26:29,880
and see

1136
01:26:33,600 --> 01:26:36,560
that we couldn't as

1137
01:26:45,880 --> 01:26:48,600
I don't dare should be teaches piano

1138
01:26:53,880 --> 01:27:00,360
to one minute.

1139
01:27:00,360 --> 01:27:02,000
So now what we can do?

1140
01:27:02,000 --> 01:27:04,640
We can clear the objects by writing

1141
01:27:06,360 --> 01:27:08,400
math teacher,

1142
01:27:08,440 --> 01:27:13,240
teacher easy for the new math teacher
Who is the math teacher in our class?

1143
01:27:13,240 --> 01:27:17,440
Guys, the math teacher dog name is

1144
01:27:19,360 --> 01:27:20,440
in here.

1145
01:27:20,440 --> 01:27:20,880
Yeah.

1146
01:27:22,720 --> 01:27:24,480
And then we can see that

1147
01:27:24,480 --> 01:27:49,320
teacher dog statement right?

1148
01:27:49,320 --> 01:27:53,720
And also is also a math teacher.

1149
01:27:53,720 --> 01:28:02,160
And then we can create the objects
in the same way.

1150
01:28:02,160 --> 01:28:04,080
By the way, let me show you something

1151
01:28:09,080 --> 01:28:11,120
new. We have the

1152
01:28:11,120 --> 01:28:21,040
chemistry teacher as well.

1153
01:28:21,040 --> 01:28:27,840
So in an intelligent guys,
if you have, let's say,

1154
01:28:27,840 --> 01:28:31,000
multiple classes,

1155
01:28:31,000 --> 01:28:34,080
you want to change something

1156
01:28:34,080 --> 01:28:37,040
so you can enter to do things
in vertical fashion as well.

1157
01:28:37,280 --> 01:28:39,720
Yes, I wondered that
when you took all method, but

1158
01:28:40,240 --> 01:28:42,280
so you can hold on the art

1159
01:28:42,840 --> 01:28:46,120
and then you can select all the things
vertically

1160
01:28:47,160 --> 01:28:48,040
at once.

1161
01:28:48,040 --> 01:28:50,400
You can remove them
and you can replace them

1162
01:28:52,440 --> 01:28:57,360
like this.

1163
01:28:57,360 --> 01:29:01,000
So vertical anything is also possible.

1164
01:29:01,040 --> 01:29:02,440
Intelligent.

1165
01:29:02,440 --> 01:29:05,520
So hold down your art button

1166
01:29:05,520 --> 01:29:09,520
and then place the vertical line

1167
01:29:09,640 --> 01:29:13,760
with the help of your mouse,
the left click, and then select

1168
01:29:15,040 --> 01:29:17,840
keeping holding down your art button.

1169
01:29:17,840 --> 01:29:20,040
And then you can select
whichever you want,

1170
01:29:20,760 --> 01:29:24,120
you can remove, and basically
you can edit things in vertical

1171
01:29:34,560 --> 01:29:35,080
any place.

1172
01:29:35,080 --> 01:29:35,880
Scroll down.

1173
01:29:35,880 --> 01:29:43,040
Yes, it is same.

1174
01:29:43,120 --> 01:29:48,000
We have the all button on Mac right?

1175
01:29:48,000 --> 01:29:51,480
Or it's the option button in Mac.

1176
01:29:51,480 --> 01:29:56,920
There is no artwork on.

1177
01:29:56,920 --> 01:29:58,760
Oh, okay.

1178
01:29:58,760 --> 01:30:01,760
So there are so many weird things.

1179
01:30:01,760 --> 01:30:07,480
I mean the Mac is or the window by the way

1180
01:30:07,480 --> 01:30:12,760
they can have the same buttons
but I don't know why they do that.

1181
01:30:12,840 --> 01:30:15,160
There is also a

1182
01:30:15,160 --> 01:30:17,000
kind of law in the protocol.

1183
01:30:17,000 --> 01:30:20,160
So the Europeans, they and the Europeans

1184
01:30:20,160 --> 01:30:23,880
and the Americans, so they are technically

1185
01:30:23,880 --> 01:30:27,000
doing the same things,
but for the same things.

1186
01:30:27,000 --> 01:30:28,440
They have different names.

1187
01:30:28,440 --> 01:30:32,040
And just to make things different,

1188
01:30:32,040 --> 01:30:35,280
I mean, literally,
they introduce so much complexity.

1189
01:30:35,280 --> 01:30:39,000
So when I was learning networking,
they introduced so much complexity

1190
01:30:39,280 --> 01:30:40,680
in networking and protocols.

1191
01:30:41,920 --> 01:30:42,520
And and

1192
01:30:42,520 --> 01:30:46,720
the same is the case with the players
in the in the United States.

1193
01:30:46,720 --> 01:30:49,760
You guys write the month first
and then the day, right?

1194
01:30:49,920 --> 01:30:51,640
And then the year

1195
01:30:52,040 --> 01:30:54,640
and then in the other parts of the world.

1196
01:30:54,640 --> 01:30:56,960
Then they don't follow this
this approach. Right.

1197
01:30:57,160 --> 01:30:58,200
I'm going to why, why, why?

1198
01:30:58,200 --> 01:31:00,480
They cannot have the same

1199
01:31:00,480 --> 01:31:02,880
outline 30 word wide.

1200
01:31:03,040 --> 01:31:04,760
Each piano is more suitable.

1201
01:31:04,760 --> 01:31:06,000
I think.

1202
01:31:06,000 --> 01:31:11,760
Oh, yes.

1203
01:31:11,760 --> 01:31:14,520
So that's
why copy pasting is not a good idea.

1204
01:31:14,640 --> 01:31:17,920
It introduces a lot of issues

1205
01:31:18,840 --> 01:31:21,560
and it was actually a rule in my company
index.

1206
01:31:22,040 --> 01:31:25,520
Don't copy and paste the code

1207
01:31:28,400 --> 01:31:29,440
and we can do the same

1208
01:31:29,440 --> 01:31:32,280
for the driving left
and you can buy it can be from.

1209
01:31:32,440 --> 01:31:33,920
Yep. Yeah.

1210
01:31:33,960 --> 01:31:38,520
I mean how much complex it will be for
for for the person as well

1211
01:31:39,240 --> 01:31:43,240
because the person cannot become
comfortable if one have been writing

1212
01:31:44,400 --> 01:31:46,440
left and then

1213
01:31:46,440 --> 01:31:49,040
he or she has to switch to write.

1214
01:31:49,040 --> 01:31:51,760
And then for the benefactors
as well, in one country

1215
01:31:51,760 --> 01:31:54,960
they are building cars for the left
and then the other ones that are.

1216
01:31:54,960 --> 01:31:55,560
Right.

1217
01:31:58,400 --> 01:31:58,960
All right. Okay.

1218
01:31:58,960 --> 01:32:00,160
So let's have a break.

1219
01:32:00,160 --> 01:32:02,520
And after the break, we will start our

1220
01:32:03,960 --> 01:32:14,320
topic Neural topic.

1221
01:32:14,320 --> 01:32:16,200
Yes, the super keyword.

1222
01:32:16,200 --> 01:32:19,160
So please be back by 850.

1223
01:32:19,160 --> 01:32:23,600
And if I don't come back,
you guys can assume I went to sleep.

1224
01:32:23,600 --> 01:32:29,160
And you guys can also take some rest
and we will see the concepts on the

1225
01:32:29,280 --> 01:32:33,240
on the set for this class.

1226
01:32:33,240 --> 01:32:35,160
Guys. Remind me about the recording.

1227
01:32:35,160 --> 01:32:36,880
If I forget

1228
01:32:40,760 --> 01:32:42,440
the third text

1229
01:32:42,440 --> 01:32:44,880
that that issue is actually this.

1230
01:32:45,240 --> 01:32:52,840
So let's say, for example,

1231
01:32:52,840 --> 01:32:55,840
I am using this math class and I

1232
01:32:57,600 --> 01:33:01,360
misspell this, okay, so now

1233
01:33:06,480 --> 01:33:10,080
or maybe we should

1234
01:33:16,560 --> 01:33:19,320
the sometimes Oriental idea is doing

1235
01:33:19,320 --> 01:33:22,280
if a piece of code is causing an issue

1236
01:33:23,400 --> 01:33:26,560
so intelligible, sure, you That

1237
01:33:31,040 --> 01:33:33,120
that link to that class.

1238
01:33:33,120 --> 01:33:36,160
So let me

1239
01:33:39,040 --> 01:33:45,000
try to create the here
we have already this issue.

1240
01:33:45,000 --> 01:33:48,360
So in here
it is saying two related problems.

1241
01:33:48,360 --> 01:33:51,720
Now this piece of code
that you have written in there,

1242
01:33:51,720 --> 01:33:55,680
it is causing problems
in other under classes.

1243
01:33:56,120 --> 01:34:00,200
And if you want to check we have that
problem is you can click on this to

1244
01:34:00,720 --> 01:34:01,800
a related problem.

1245
01:34:01,800 --> 01:34:05,480
The different text,
and then it will show you

1246
01:34:06,960 --> 01:34:08,360
this related issue.

1247
01:34:08,360 --> 01:34:13,720
You see in the
in the recap class on the on the class 16.

1248
01:34:14,120 --> 01:34:16,440
So in here,

1249
01:34:17,240 --> 01:34:20,160
this recap is having
this integer number in here.

1250
01:34:20,440 --> 01:34:24,400
This recap is having this circle
standing here.

1251
01:34:24,720 --> 01:34:27,280
So what is happening in there?

1252
01:34:27,960 --> 01:34:28,480
Because

1253
01:34:29,600 --> 01:34:31,120
this piece of code

1254
01:34:31,120 --> 01:34:35,160
is causing problem in other classes
so intelligent is

1255
01:34:36,280 --> 01:34:40,440
telling you that link that where this code
is causing that problem.

1256
01:34:40,440 --> 01:34:42,640
So if you make a mistake in one

1257
01:34:42,640 --> 01:34:46,560
and if other classes are impacted
by that mistake, it can tell you

1258
01:34:46,560 --> 01:34:50,320
that link that which classes are affected
by changing this piece of code,

1259
01:34:50,680 --> 01:34:55,120
you can click on, click on that text
and it will take you to the class we are.

1260
01:34:55,120 --> 01:34:57,600
The problem can happen
because of this code.

1261
01:34:57,960 --> 01:34:59,520
So you you can ignore that.

1262
01:34:59,520 --> 01:35:03,480
You can ignore that because right now
if see, I have multiple classes and I have

1263
01:35:03,480 --> 01:35:08,880
multiple issues in those classes, but
I have excluded them from the compilation.

1264
01:35:09,440 --> 01:35:15,040
So you guys need to worry about that.

1265
01:35:15,040 --> 01:35:17,160
But if there's something very useful.

1266
01:35:17,160 --> 01:35:21,760
So when you guys will be working
on big projects, finding the classes

1267
01:35:21,760 --> 01:35:24,840
and inside the classes,
finding the specific meters

1268
01:35:26,040 --> 01:35:27,200
which are which,

1269
01:35:27,200 --> 01:35:30,840
which are affected by that change, it's
a very tough job.

1270
01:35:30,960 --> 01:35:35,320
Okay, So this creates those links
and you can click on that link

1271
01:35:35,320 --> 01:35:37,440
and it will take you to the end of that
line number.

1272
01:35:37,600 --> 01:35:39,400
And the problem is happening.

1273
01:35:39,400 --> 01:35:42,240
So it would not be present for us for now.

1274
01:35:42,280 --> 01:35:43,520
You can ignore that.

1275
01:35:43,520 --> 01:35:46,480
Okay, but it's very useful.

1276
01:35:46,480 --> 01:35:48,160
Big projects

1277
01:35:48,880 --> 01:35:50,840
and you guys might have also noticed

1278
01:35:50,840 --> 01:35:52,880
this that

1279
01:35:53,880 --> 01:35:55,440
with each method

1280
01:35:55,440 --> 01:35:58,520
or with each class,
you have these, these signs

1281
01:35:58,520 --> 01:36:02,480
and if you click on that,
you will see this class error.

1282
01:36:02,640 --> 01:36:07,000
Then three doors and then curly back there
so you can shrink some pieces of code

1283
01:36:07,560 --> 01:36:08,040
in here.

1284
01:36:08,040 --> 01:36:10,280
I don't know if we can do that
indicates or not.

1285
01:36:10,720 --> 01:36:13,960
So and by default in the intelligent
shrinks

1286
01:36:14,320 --> 01:36:18,160
some some matters and classes
and if you guys want to have a look,

1287
01:36:18,160 --> 01:36:19,800
you can click on these three doors

1288
01:36:19,800 --> 01:36:22,360
and it will expand that code
or you can keep on shrinking.

1289
01:36:22,360 --> 01:36:26,480
Now, if you have a very long file
and you have some meters

1290
01:36:26,480 --> 01:36:30,240
and you are calling these matters
in other matters and you want to check

1291
01:36:30,240 --> 01:36:33,360
how that code is working,
maybe you want to shrink that

1292
01:36:35,120 --> 01:36:36,600
the code that is in between.

1293
01:36:36,600 --> 01:36:36,840
Okay.

1294
01:36:36,840 --> 01:36:40,560
And also was also helpful in
in reading long files.

1295
01:36:41,520 --> 01:36:43,880
So do not get confused about

1296
01:36:44,040 --> 01:36:50,080
about these three doors as well.

1297
01:36:50,080 --> 01:36:54,320
And then one more thing I have noticed
is that there are all these

1298
01:36:56,120 --> 01:36:58,760
expand all at fault button.

1299
01:36:58,760 --> 01:37:02,040
So if you have messy project
Explorer like this

1300
01:37:02,440 --> 01:37:06,440
and you quickly want to shrink it,
you can click on this shrink call

1301
01:37:06,720 --> 01:37:10,920
and then everything will be shrink
and then you can expand

1302
01:37:11,480 --> 01:37:14,040
whichever classes
you want to span from here.

1303
01:37:14,320 --> 01:37:14,880
Okay.

1304
01:37:15,840 --> 01:37:19,200
And if you are on a file

1305
01:37:19,200 --> 01:37:23,160
and you are unable to locate the back
end of that

1306
01:37:23,160 --> 01:37:27,000
file or well, that file is located,
you guys click on this round icon

1307
01:37:27,280 --> 01:37:29,320
and will show you the class

1308
01:37:30,200 --> 01:37:33,560
which is open inside the editor right now.

1309
01:37:33,600 --> 01:37:34,200
Okay,

1310
01:37:34,560 --> 01:37:37,280
so because now you guys
will be building the framework

1311
01:37:37,280 --> 01:37:39,600
and you guys will be writing a lot of code
for these things,

1312
01:37:39,600 --> 01:37:42,840
they will be very useful for you
and I in each class almost.

1313
01:37:43,160 --> 01:37:47,000
I will keep on
I will keep on telling you about this

1314
01:37:47,200 --> 01:37:51,240
class and all that.

1315
01:37:51,240 --> 01:37:52,720
All right. Okay. So today's

1316
01:37:55,880 --> 01:37:57,480
topic is about crew.

1317
01:37:57,480 --> 01:38:00,120
This class is about the super keyword.

1318
01:38:00,120 --> 01:38:04,640
Now, super keyword is just like the

1319
01:38:04,920 --> 01:38:07,880
this keyword that you guys learned.

1320
01:38:08,200 --> 01:38:29,080
So again, you guys tell me
what was the purpose of this keyword?

1321
01:38:29,080 --> 01:38:31,320
What were the use cases?

1322
01:38:31,320 --> 01:38:34,840
And so if there is a there is

1323
01:38:36,160 --> 01:38:38,040
between local variables

1324
01:38:38,040 --> 01:38:41,160
and instance variables,

1325
01:38:41,280 --> 01:38:43,440
we can use the this keyword

1326
01:38:43,600 --> 01:38:47,640
to distinguish these variables.

1327
01:38:47,640 --> 01:38:48,360
Right?

1328
01:38:48,840 --> 01:38:53,800
I tried to create com dog syntax,
dog class and the same line and it changed

1329
01:38:53,800 --> 01:38:57,120
one package
and two packages, class 18 and 19 y.

1330
01:38:58,240 --> 01:38:59,880
So I showed this,

1331
01:39:00,720 --> 01:39:04,640
this part
and that is the part that you are writing.

1332
01:39:04,640 --> 01:39:08,480
This com dot syntax is actually

1333
01:39:08,480 --> 01:39:12,360
the base package and intelligent ask

1334
01:39:12,360 --> 01:39:15,800
feel about this base package
when you create a project.

1335
01:39:16,440 --> 01:39:17,040
Okay.

1336
01:39:17,080 --> 01:39:20,160
And then after that
you only write the sub packages.

1337
01:39:20,440 --> 01:39:24,120
So you have already created that base
package and you are trying clear that base

1338
01:39:24,120 --> 01:39:24,960
package again.

1339
01:39:24,960 --> 01:39:27,720
But in Java only three.

1340
01:39:27,960 --> 01:39:30,520
So you can go down to three levels.

1341
01:39:30,520 --> 01:39:32,920
So let's say for example, if

1342
01:39:33,880 --> 01:39:37,040
I tried to create a package in here

1343
01:39:43,040 --> 01:39:53,680
and then inside this,

1344
01:39:53,680 --> 01:39:55,920
so you see after this,

1345
01:39:56,760 --> 01:40:00,480
it does not matter how many packages
I create inside this

1346
01:40:00,480 --> 01:40:04,240
task, it will start appending those names
with this door.

1347
01:40:04,240 --> 01:40:05,400
Fine. Okay.

1348
01:40:05,400 --> 01:40:07,600
So you can go only up to three levels.

1349
01:40:08,120 --> 01:40:11,040
So that's why you are facing that issue.

1350
01:40:12,320 --> 01:40:17,800
Okay First, for the current

1351
01:40:17,800 --> 01:40:21,840
object can be used for that
for immediate parentheses, just variable.

1352
01:40:21,840 --> 01:40:22,240
Okay.

1353
01:40:22,240 --> 01:40:28,400
So the functionality of this keyword
is related to the current class.

1354
01:40:28,560 --> 01:40:32,760
By current class I mean the class
in which we are writing that piece.

1355
01:40:32,760 --> 01:40:37,440
Of course this is used to create
constructor features,

1356
01:40:38,240 --> 01:40:41,920
so now there is no such thing
as constructor field.

1357
01:40:42,040 --> 01:40:42,480
Okay.

1358
01:40:42,480 --> 01:40:49,760
The first they belong to the class,
so let's say nice.

1359
01:40:49,800 --> 01:40:56,400
I have.

1360
01:40:56,400 --> 01:40:59,280
And do you guys are you guys okay? Great.

1361
01:40:59,280 --> 01:41:06,600
One more example.

1362
01:41:06,600 --> 01:41:10,200
Go. Okay,

1363
01:41:12,400 --> 01:41:13,440
let's create

1364
01:41:13,440 --> 01:41:19,560
a class.

1365
01:41:19,560 --> 01:41:22,280
So and

1366
01:41:22,640 --> 01:41:26,040
and the all the pairs they will be having

1367
01:41:30,680 --> 01:41:31,800
names, right?

1368
01:41:31,800 --> 01:41:37,640
I will keep things very simple. Read

1369
01:41:40,880 --> 01:41:42,120
color

1370
01:41:46,720 --> 01:41:49,280
and page.

1371
01:41:49,280 --> 01:41:51,560
So let's say this is my parent class

1372
01:41:54,080 --> 01:41:58,160
and I have some fears in here.

1373
01:41:58,160 --> 01:42:01,880
Mejorar Lola, I mean, Vaughn's argument,

1374
01:42:02,080 --> 01:42:04,960
this is used for that.

1375
01:42:04,960 --> 01:42:07,320
Oh, no, You can also use this in

1376
01:42:07,680 --> 01:42:12,240
in the methods as well.

1377
01:42:12,240 --> 01:42:17,200
So with the help of this keyword, I can
all be constructors of this same class.

1378
01:42:17,400 --> 01:42:20,960
We if I write those parentheses,
I can distinguish

1379
01:42:20,960 --> 01:42:24,760
between local variables
and instance variables.

1380
01:42:25,280 --> 01:42:27,840
And, and the third thing

1381
01:42:27,840 --> 01:42:30,560
that we do don't focus that much was

1382
01:42:30,800 --> 01:42:34,200
we can also call meters from that class.

1383
01:42:35,880 --> 01:42:41,280
Now. Now let's discuss
the use cases of the super

1384
01:42:42,360 --> 01:42:42,720
keyword.

1385
01:42:42,720 --> 01:42:46,240
So this keyword
super is also a reference variable.

1386
01:42:46,240 --> 01:42:50,320
This was also a reference variable
by reference variables

1387
01:42:50,760 --> 01:42:56,080
mean a variable through which I can refer
to or add the variable through

1388
01:42:56,080 --> 01:43:00,760
which I can access the fears, methods
or constructors of a class.

1389
01:43:01,200 --> 01:43:05,760
Okay, so in the case of this,
we were accessing the fears, methods

1390
01:43:05,760 --> 01:43:10,360
and constructors of this same class
in which we were writing that.

1391
01:43:10,360 --> 01:43:13,800
The super keyword, however, is used

1392
01:43:13,840 --> 01:43:17,080
to refer to the immediate parent class.

1393
01:43:17,240 --> 01:43:22,320
Okay, so let's say for example,

1394
01:43:22,320 --> 01:43:25,000
I have these fears here

1395
01:43:26,840 --> 01:43:30,080
inside this class

1396
01:43:33,400 --> 01:43:36,960
and I have another class

1397
01:43:38,240 --> 01:43:46,320
or, or dog.

1398
01:43:46,320 --> 01:43:49,840
And inside your dog

1399
01:43:51,720 --> 01:43:57,840
I am simply

1400
01:44:00,480 --> 01:44:02,760
putting things in me

1401
01:44:06,640 --> 01:44:07,960
along

1402
01:44:11,200 --> 01:44:14,080
with me.

1403
01:44:14,080 --> 01:44:16,360
And from fact

1404
01:44:18,560 --> 01:44:19,040
like this.

1405
01:44:19,040 --> 01:44:20,520
Okay, now I don't have index

1406
01:44:26,760 --> 01:44:28,880
and then

1407
01:44:29,840 --> 01:44:33,240
let's have a character

1408
01:44:33,960 --> 01:44:36,200
expand that

1409
01:44:38,280 --> 01:44:40,800
and maybe

1410
01:44:41,720 --> 01:44:44,400
I am sprinting

1411
01:44:44,400 --> 01:44:46,560
edge in here

1412
01:44:56,440 --> 01:44:58,840
like this.

1413
01:44:58,840 --> 01:45:01,440
And then

1414
01:45:17,280 --> 01:45:18,760
so I hope did this.

1415
01:45:18,760 --> 01:45:20,800
This is better

1416
01:45:22,240 --> 01:45:25,480
from what we did yesterday
in the last class.

1417
01:45:25,480 --> 01:45:28,560
So I have some fears, guys,

1418
01:45:29,400 --> 01:45:31,680
in this super class

1419
01:45:31,680 --> 01:45:34,000
and I am using those fears

1420
01:45:34,560 --> 01:45:37,120
inside of my child classes. Now.

1421
01:45:37,760 --> 01:45:41,760
How do I initialize the school fields
if I am using some fields

1422
01:45:41,760 --> 01:45:45,560
from the parent class, how can I
initialize them in the child class

1423
01:45:47,480 --> 01:45:49,320
on what should be the best approach

1424
01:45:49,320 --> 01:46:00,560
to initialize those fields?

1425
01:46:00,560 --> 01:46:02,320
Import class?

1426
01:46:02,320 --> 01:46:04,400
How do we initialize the fields
in a class?

1427
01:46:04,800 --> 01:46:06,120
Constructors. Right.

1428
01:46:06,120 --> 01:46:08,760
We use the constructors right?

1429
01:46:08,760 --> 01:46:12,400
So what I can do,

1430
01:46:12,400 --> 01:46:17,040
I can create a constructor.

1431
01:46:17,040 --> 01:46:20,160
All right. I can write

1432
01:46:21,800 --> 01:46:25,080
the names.

1433
01:46:25,080 --> 01:46:37,720
Oops,

1434
01:46:37,720 --> 01:46:44,760
grade and

1435
01:46:45,920 --> 01:46:51,400
then an integer H.

1436
01:46:51,400 --> 01:46:55,080
And then I can say this dot

1437
01:46:56,040 --> 01:47:00,000
name is equal to name.

1438
01:47:00,000 --> 01:47:02,360
This ought

1439
01:47:02,440 --> 01:47:05,240
read is equal to read.

1440
01:47:06,240 --> 01:47:08,120
Is there a shortcut to generate E?

1441
01:47:08,120 --> 01:47:09,120
Yep, yep.

1442
01:47:09,120 --> 01:47:11,520
There is also a shortcut.
I will tell you about that.

1443
01:47:11,560 --> 01:47:13,480
Just give me one more.

1444
01:47:13,760 --> 01:47:17,600
This is for

1445
01:47:21,840 --> 01:47:23,320
and then

1446
01:47:23,760 --> 01:47:25,520
they start it.

1447
01:47:25,520 --> 01:47:28,480
Usually for h

1448
01:47:28,480 --> 01:47:30,760
in the intelligentsia what you guys can do

1449
01:47:31,200 --> 01:47:36,040
place your cursor inside that class
for which you want to create something.

1450
01:47:36,040 --> 01:47:37,920
Right click and then click.

1451
01:47:37,920 --> 01:47:41,240
I'll click on Generate.

1452
01:47:41,240 --> 01:47:51,000
Do I see this option?

1453
01:47:51,000 --> 01:47:54,440
You can do it and then you can
select the constructor like this

1454
01:48:02,240 --> 01:48:05,880
and generate

1455
01:48:10,840 --> 01:48:13,320
constructor and here you will see it.

1456
01:48:13,560 --> 01:48:18,240
So because there are no fields inside
this class, so there slide,

1457
01:48:19,520 --> 01:48:22,520
it is not giving you an option
to generate with fears.

1458
01:48:22,760 --> 01:48:27,520
Okay, so

1459
01:48:27,520 --> 01:48:31,640
now if I have to initialize
these fields form the get as well

1460
01:48:31,680 --> 01:48:34,800
because it is also using these fears,
what should I do?

1461
01:48:34,800 --> 01:48:42,440
Indicate class.

1462
01:48:42,440 --> 01:48:46,160
So it is already extending

1463
01:48:50,280 --> 01:48:51,440
extend from dog.

1464
01:48:51,440 --> 01:48:54,960
But constructors,
they don't participate in inheritance.

1465
01:48:55,000 --> 01:48:57,800
That means even though I inherited

1466
01:48:59,400 --> 01:49:03,600
from that class I will not be able to use
to use that constructor.

1467
01:49:03,720 --> 01:49:08,160
Remember this.

1468
01:49:08,160 --> 01:49:12,000
So the only way is I rewrite this

1469
01:49:12,000 --> 01:49:15,360
constructor again

1470
01:49:16,280 --> 01:49:18,600
inside the car class.

1471
01:49:18,600 --> 01:49:19,080
Okay.

1472
01:49:19,080 --> 01:49:22,840
Like this.

1473
01:49:22,840 --> 01:49:24,640
But tell me guys,

1474
01:49:25,520 --> 01:49:27,800
tell me if

1475
01:49:27,840 --> 01:49:32,840
if I have maybe 5060 100 child classes

1476
01:49:34,440 --> 01:49:36,560
and if I am following this approach

1477
01:49:37,480 --> 01:49:39,560
and I am rewriting this constructor

1478
01:49:39,560 --> 01:49:43,480
again and again, is it a good practice

1479
01:49:45,960 --> 01:49:48,600
or do you guys see some kind

1480
01:49:48,600 --> 01:49:57,120
of code duplication? Yes.

1481
01:49:57,560 --> 01:50:01,760
So even so now really saying
why don't we create this constructor

1482
01:50:03,240 --> 01:50:08,960
inside, inside the class,
inside the parent.

1483
01:50:10,160 --> 01:50:15,400
So yes, we can create the constructor
inside of the parent,

1484
01:50:15,400 --> 01:50:20,000
but because constructors
don't participate in inheritance, so

1485
01:50:20,000 --> 01:50:23,480
still it will not be a part of this class.

1486
01:50:23,840 --> 01:50:30,560
But what I can do,
instead of rewriting this call,

1487
01:50:31,200 --> 01:50:34,880
I can write super

1488
01:50:36,600 --> 01:50:40,640
and then I can pass this information

1489
01:50:42,160 --> 01:50:46,200
like this to the parent class
and I can do the same.

1490
01:50:46,200 --> 01:50:48,400
I can remove

1491
01:50:48,600 --> 01:50:52,080
this, I can write super with parentheses

1492
01:50:53,640 --> 01:50:58,000
and I can pass this information
to the parent constructor.

1493
01:50:59,000 --> 01:51:02,040
That way I don't have to repeat

1494
01:51:03,240 --> 01:51:07,280
these constructors
for all the child classes

1495
01:51:07,360 --> 01:51:11,520
now what I am doing because constructors
don't participate in inheritance,

1496
01:51:12,120 --> 01:51:16,440
but we can call the constructor
of the parent class

1497
01:51:17,400 --> 01:51:18,480
by writing this

1498
01:51:18,480 --> 01:51:21,520
super and then these parentheses.

1499
01:51:22,640 --> 01:51:26,240
Yes. If we remove this constructor
from this banner.

1500
01:51:27,360 --> 01:51:28,360
No, no.

1501
01:51:28,360 --> 01:51:32,880
Where this where the super is referring
to, there is nothing in the parent, right?

1502
01:51:33,520 --> 01:51:36,480
So you remember using the this keyword

1503
01:51:37,040 --> 01:51:40,680
we used to refer to a constructor, right?

1504
01:51:41,080 --> 01:51:46,440
If there is there is no constructor,
then then how we refer to that constructor

1505
01:51:46,440 --> 01:51:50,360
whether is if the discovered
or the or the super keyword.

1506
01:51:50,880 --> 01:51:51,560
Okay.

1507
01:51:51,600 --> 01:51:55,560
So again in here I am just calling.

1508
01:51:56,000 --> 01:52:00,160
So I call the the constructors
or using the

1509
01:52:00,160 --> 01:52:04,640
this keyword
with those identities of the same class.

1510
01:52:04,640 --> 01:52:06,840
I am doing exactly the same thing.

1511
01:52:07,120 --> 01:52:12,200
But in here super is calling
the constructor of the parent class.

1512
01:52:12,560 --> 01:52:16,200
There's the only difference.

1513
01:52:16,200 --> 01:52:17,280
Yeah, super easy.

1514
01:52:17,280 --> 01:52:21,480
You can say it's kind of a shortcut
to access the constructor

1515
01:52:21,480 --> 01:52:23,760
of the parent class.

1516
01:52:23,760 --> 01:52:26,000
Is this similar as this?

1517
01:52:26,000 --> 01:52:27,680
So yes, you can say that

1518
01:52:28,800 --> 01:52:33,840
now. Good.

1519
01:52:33,840 --> 01:52:38,400
Because we use the this keyword
to call the constructor

1520
01:52:38,400 --> 01:52:43,800
and we are also using the super keyword
to call the constructor.

1521
01:52:44,040 --> 01:52:48,720
The difference is that this calls
the constructor off this same class,

1522
01:52:49,640 --> 01:52:54,720
but super keyword calls
the constructors of the parent class

1523
01:52:55,320 --> 01:52:58,920
so that we don't have to repeat
the constructors

1524
01:52:59,320 --> 01:53:02,640
in all the child classes which are using

1525
01:53:02,960 --> 01:53:17,760
the fears of parent class.

1526
01:53:17,760 --> 01:53:23,680
But what do we call dog
and the B parameters?

1527
01:53:23,680 --> 01:53:26,440
This is also a constructor

1528
01:53:26,920 --> 01:53:28,160
to the also constructor.

1529
01:53:28,160 --> 01:53:33,640
If does that instead of initializing
the fears, instead of initializing

1530
01:53:33,640 --> 01:53:38,280
the fears,
I am calling the constructor of beta

1531
01:53:38,840 --> 01:53:43,320
to use this piece of code.

1532
01:53:43,320 --> 01:53:46,560
Yes, the same rules. The data types.

1533
01:53:46,560 --> 01:53:51,840
They must be
same as the data types of the parent class

1534
01:53:59,040 --> 01:54:01,080
and we use it for method and variables.

1535
01:54:01,080 --> 01:54:03,960
Yes, this is what we will discuss next.
We can do this.

1536
01:54:03,960 --> 01:54:05,960
All the methods and the variables.

1537
01:54:05,960 --> 01:54:09,840
Well, so effectively

1538
01:54:09,840 --> 01:54:13,040
constructors are inherited
with the use of super keyword.

1539
01:54:15,200 --> 01:54:16,680
We got this.

1540
01:54:16,680 --> 01:54:19,440
This will not be correct to say
that they are

1541
01:54:21,160 --> 01:54:22,200
inherited.

1542
01:54:22,200 --> 01:54:24,520
We are calling in here.

1543
01:54:25,480 --> 01:54:27,560
So there is something

1544
01:54:27,560 --> 01:54:31,080
like for example,
we have well, when we define something

1545
01:54:31,400 --> 01:54:35,440
and when we call something, when we define
a method and where we call in method.

1546
01:54:35,760 --> 01:54:39,360
So in inheritance, if you have defined
something in a parent class

1547
01:54:39,360 --> 01:54:42,480
and if that thing
participates in inheritance,

1548
01:54:42,840 --> 01:54:46,680
it will be copied
as it is inspired by child class.

1549
01:54:46,680 --> 01:54:49,480
But in here we are
calling that constructor.

1550
01:54:50,320 --> 01:54:53,320
We've combined
all last three topics together

1551
01:54:53,320 --> 01:54:56,600
expense classes, methods and constructors.

1552
01:54:56,600 --> 01:55:06,240
Yes, right.

1553
01:55:08,000 --> 01:55:11,120
So now what I can do,

1554
01:55:11,160 --> 01:55:14,480
I can create the object of,

1555
01:55:14,480 --> 01:55:47,960
the class,
and now I can use all the fields

1556
01:55:48,080 --> 01:55:49,320
from the

1557
01:55:55,480 --> 01:55:56,240
from the parent

1558
01:55:56,240 --> 01:56:02,040
class.

1559
01:56:02,040 --> 01:56:08,840
And I am not writing
those lines to initially size.

1560
01:56:09,160 --> 01:56:13,840
They something.

1561
01:56:13,840 --> 01:56:18,600
So what is happening right
now, these fields,

1562
01:56:19,200 --> 01:56:21,960
this data that we are writing in here,
first

1563
01:56:21,960 --> 01:56:24,680
it is being passed

1564
01:56:25,840 --> 01:56:28,240
to the constructor of dog

1565
01:56:28,240 --> 01:56:30,960
inside these variables.

1566
01:56:30,960 --> 01:56:34,440
Then it is being transferred

1567
01:56:34,840 --> 01:56:37,480
to the parent class constructor

1568
01:56:38,880 --> 01:56:40,760
with the help of this super keyword.

1569
01:56:40,760 --> 01:56:44,960
So this name then is going in here.

1570
01:56:44,960 --> 01:56:47,400
We see it in here,

1571
01:56:48,000 --> 01:56:50,200
in here, and then breathe in here.

1572
01:56:50,720 --> 01:56:53,400
And then it is being assigned

1573
01:56:53,400 --> 01:56:59,320
to the variables of this.

1574
01:56:59,320 --> 01:57:04,280
And then because we are extending
and technically these all these fields,

1575
01:57:04,280 --> 01:57:09,640
they are available inside the dog class,
but they are,

1576
01:57:09,720 --> 01:57:12,880
they are having separate copies
in their file.

1577
01:57:13,680 --> 01:57:21,120
When we see a dog not print,
we see the name inside this field,

1578
01:57:22,440 --> 01:57:26,520
then we will hold constructor for one.

1579
01:57:26,520 --> 01:57:28,320
You mean invoke whole constructor.

1580
01:57:28,320 --> 01:57:38,240
So we are invoking a whole constructor.

1581
01:57:38,560 --> 01:57:41,760
Are you guys done piping the score?

1582
01:57:41,760 --> 01:57:44,800
So this is the first use
of the super keyword.

1583
01:57:45,760 --> 01:57:47,160
Does it make sense guys?

1584
01:57:47,160 --> 01:57:48,600
Can you guys tell the benefit?

1585
01:57:48,600 --> 01:57:52,480
Well, what is the problem
that this super keyword is solving

1586
01:57:52,920 --> 01:57:56,320
with our parameters? Yes.

1587
01:57:56,320 --> 01:57:58,720
Yes. We can call the.

1588
01:57:58,720 --> 01:58:01,160
So let's say for example,
for one is saying

1589
01:58:02,200 --> 01:58:04,560
if we have a constructor, oops.

1590
01:58:04,720 --> 01:58:09,240
If we have a constructor,
we doubt that entity.

1591
01:58:09,360 --> 01:58:09,880
Okay.

1592
01:58:10,440 --> 01:58:14,320
So yes,

1593
01:58:14,320 --> 01:58:17,160
we can call that constructor as a

1594
01:58:21,840 --> 01:58:25,080
we can call any of the constructor
less calling.

1595
01:58:25,080 --> 01:58:30,120
So again, we are avoiding duplication.

1596
01:58:30,280 --> 01:58:35,520
If there is a parent class,
that parent class has maybe 100 fields

1597
01:58:36,120 --> 01:58:41,040
and we need to initialize those fields.

1598
01:58:41,040 --> 01:58:46,240
And if the child classes
are using those fears so every child class

1599
01:58:46,240 --> 01:58:49,960
has to write a constructor
to initialize those fields.

1600
01:58:50,120 --> 01:58:55,040
Okay, so in every class we will be writing
separate, separate constructors work

1601
01:58:55,040 --> 01:58:59,040
we can do, we can define a constructor

1602
01:58:59,640 --> 01:59:02,040
inside the parent class

1603
01:59:02,040 --> 01:59:04,320
and with the help of super keyword,

1604
01:59:05,040 --> 01:59:07,440
we can call that constructor

1605
01:59:07,440 --> 01:59:19,440
of the parent class.

1606
01:59:19,440 --> 01:59:24,440
Most of all,
make sure that this first list,

1607
01:59:24,440 --> 01:59:28,160
this dog class,
is outside of this bracket.

1608
01:59:29,160 --> 01:59:39,840
Yeah. Yes.

1609
01:59:39,840 --> 01:59:41,280
I think this is this is your issue.

1610
01:59:41,280 --> 01:59:44,120
You are writing the class

1611
01:59:45,400 --> 01:59:47,160
inside in here

1612
01:59:47,160 --> 01:59:51,920
inside this method,

1613
01:59:51,920 --> 01:59:54,080
the class bracket

1614
02:00:01,440 --> 02:00:03,400
and the Yes now is also right.

1615
02:00:03,400 --> 02:00:07,560
You need to pass
two more values to this constructor.

1616
02:00:07,560 --> 02:00:12,600
So this dog is expecting for Max,
but you are only passing

1617
02:00:12,600 --> 02:00:17,960
two arguments.

1618
02:00:17,960 --> 02:00:40,760
Is there anyone else
who is facing any issues?

1619
02:00:40,760 --> 02:00:43,400
So this is the first use
of super keyword life

1620
02:00:49,320 --> 02:00:52,680
when the parent class
has multiple constructors with super peak

1621
02:00:52,680 --> 02:00:56,480
on the right one using condition
sequence of variable number of variables.

1622
02:00:56,520 --> 02:00:57,760
Yes mom, you are right.

1623
02:00:57,760 --> 02:01:00,160
Same rules apply

1624
02:01:00,320 --> 02:01:05,880
if there are multiple constructors,

1625
02:01:05,880 --> 02:01:20,880
I will decide based on the parameters
which constructor to call.

1626
02:01:20,880 --> 02:01:22,600
Can I move to the next example?

1627
02:01:22,600 --> 02:01:24,160
If you guys are

1628
02:01:25,520 --> 02:01:26,440
done writing

1629
02:01:26,440 --> 02:01:29,080
this code, you don't have any questions.

1630
02:01:29,520 --> 02:01:32,400
So perfect and super the you are right

1631
02:01:33,720 --> 02:01:34,320
and super.

1632
02:01:34,320 --> 02:01:38,160
They are same things.

1633
02:01:38,160 --> 02:01:38,640
All right.

1634
02:01:38,640 --> 02:01:41,920
So the next example it's not giving me

1635
02:01:41,920 --> 02:01:45,000
option and read

1636
02:01:45,000 --> 02:01:45,880
loops

1637
02:01:48,480 --> 02:01:50,840
and you need a comma

1638
02:01:50,840 --> 02:01:57,800
and after name.

1639
02:01:57,800 --> 02:01:59,960
So let's say guys, we have

1640
02:02:02,520 --> 02:02:04,440
this class

1641
02:02:05,400 --> 02:02:06,520
employee

1642
02:02:14,880 --> 02:02:18,640
and inside this class we have an

1643
02:02:19,760 --> 02:02:21,320
integer

1644
02:02:22,800 --> 02:02:24,440
with salary.

1645
02:02:24,440 --> 02:02:31,960
Yes. And let's say base

1646
02:02:31,960 --> 02:02:54,520
salary is 30.

1647
02:02:54,520 --> 02:02:59,520
Now you don't need to type name, column
and then Bobby and all that,

1648
02:02:59,680 --> 02:03:02,160
except it's a feature of intelligence.

1649
02:03:03,600 --> 02:03:04,200
Yeah.

1650
02:03:04,320 --> 02:03:06,720
It's just it's giving you a suggestion.

1651
02:03:06,720 --> 02:04:11,760
You don't have to time that.

1652
02:04:11,760 --> 02:04:19,920
Can you please go back for a second? Yes.

1653
02:04:19,920 --> 02:04:22,680
By the way,
guys, you can press control and

1654
02:04:23,720 --> 02:04:28,240
to switch back and forth between
the windows that you were editing last

1655
02:04:32,480 --> 02:04:40,360
like this,

1656
02:04:40,360 --> 02:04:43,240
I am looking for seven days off in a week

1657
02:04:43,800 --> 02:04:50,760
type for job.

1658
02:04:50,760 --> 02:04:53,880
And I want
I keep on telling you these shortcuts

1659
02:04:54,680 --> 02:04:58,120
slowly, slowly,
but and I want you to practice them.

1660
02:04:58,120 --> 02:04:58,800
Anything else?

1661
02:04:58,800 --> 02:05:01,960
We don't know. I will teach you.

1662
02:05:02,320 --> 02:05:03,520
Can you repeat the shortcut?

1663
02:05:03,520 --> 02:05:06,240
First control and then the tab button

1664
02:05:06,600 --> 02:05:08,960
to switch back and forth
between the windows

1665
02:05:10,240 --> 02:05:11,480
that you guys open last.

1666
02:05:11,480 --> 02:05:16,200
And if you exactly want to check
the cursor location

1667
02:05:17,600 --> 02:05:19,640
where your cursor location was

1668
02:05:19,640 --> 02:05:24,040
before you place your cursor in here,
you can press

1669
02:05:24,600 --> 02:05:29,280
control our back arrow to go to the last.

1670
02:05:29,280 --> 02:05:31,320
Why aren't we where your cursor was?

1671
02:05:31,880 --> 02:05:34,760
It can be in different
filed in different packages

1672
02:05:35,080 --> 02:05:37,800
and you can use the right title to move

1673
02:05:37,800 --> 02:05:41,000
to the next position
where you placed your cursor.

1674
02:05:41,000 --> 02:05:43,200
So you can even do that to your cursor,

1675
02:05:44,160 --> 02:05:46,040
your history of cursors,

1676
02:05:46,040 --> 02:05:51,720
where you place your cursor.

1677
02:05:51,720 --> 02:06:03,000
It will be very helpful in when you will
be debugging large amounts of bug out.

1678
02:06:03,000 --> 02:06:06,880
If we screw something up
and you want to go back a step

1679
02:06:07,320 --> 02:06:10,720
so you can press

1680
02:06:10,880 --> 02:06:13,960
control, easy to undo it.

1681
02:06:14,000 --> 02:06:16,280
You can now press control.

1682
02:06:16,280 --> 02:06:23,400
I left Arrow to check the last line
that the last line that you edited

1683
02:06:23,920 --> 02:06:27,560
you can press control tab to switch and

1684
02:06:28,760 --> 02:06:31,800
to switch
between the windows back and forth here.

1685
02:06:31,800 --> 02:06:34,160
So right now

1686
02:06:34,680 --> 02:06:37,680
it's 7:24 a.m.

1687
02:06:37,680 --> 02:06:41,000
was writing Undo control

1688
02:06:41,000 --> 02:06:44,160
or Bad arrow

1689
02:06:47,160 --> 02:06:51,400
and Intel also keeps

1690
02:06:52,680 --> 02:06:56,120
a history of your files

1691
02:06:57,560 --> 02:07:00,800
so for example other than GitHub Intel

1692
02:07:00,800 --> 02:07:03,760
is also keeping a local history of your

1693
02:07:06,480 --> 02:07:09,600
so if you right click
you will see this local history

1694
02:07:09,600 --> 02:07:14,200
if you accidentally delete a file
or if you do something wrong,

1695
02:07:14,680 --> 02:07:19,160
you can go to the history
and all the files

1696
02:07:19,160 --> 02:07:22,720
and everything that I have been
editing on this Intel year

1697
02:07:23,600 --> 02:07:26,160
almost from I started using it

1698
02:07:26,480 --> 02:07:29,640
from ten nine, so nine out of

1699
02:07:30,800 --> 02:07:32,160
the last month

1700
02:07:32,160 --> 02:07:36,600
so I can check out those files
and all the history.

1701
02:07:36,600 --> 02:07:41,640
Okay, so you guys can get back
your files from here as well.

1702
02:07:42,000 --> 02:07:42,240
Yeah.

1703
02:07:42,240 --> 02:07:46,120
So you guys can have a backup on your tab,
but Intel

1704
02:07:46,360 --> 02:07:51,120
also keeps a backup on your computer.

1705
02:07:51,120 --> 02:07:54,200
Actually, you are not using it

1706
02:07:54,200 --> 02:07:57,880
before.

1707
02:07:57,880 --> 02:08:02,880
You mean the intelligent global?

1708
02:08:02,880 --> 02:08:06,360
I was not writing code
inside of this project.

1709
02:08:06,840 --> 02:08:08,480
I have other projects.

1710
02:08:08,480 --> 02:08:11,720
I mean, there are so many projects
I always use.

1711
02:08:12,240 --> 02:08:15,360
So if you see my recent news
are all my projects,

1712
02:08:16,560 --> 02:08:19,080
I always use intelligence.

1713
02:08:19,480 --> 02:08:22,200
I have never used Eclipse in my job.

1714
02:08:23,680 --> 02:08:26,200
And can you show it one more time?

1715
02:08:26,720 --> 02:08:32,280
What do you guys want me
to show one more time?

1716
02:08:32,280 --> 02:08:35,960
History.

1717
02:08:35,960 --> 02:08:37,720
Oh, it's right click.

1718
02:08:37,720 --> 02:08:48,400
And then local history.

1719
02:08:48,400 --> 02:08:53,720
All right, so let's move to the example.

1720
02:08:53,720 --> 02:08:54,880
We got example.

1721
02:08:54,880 --> 02:08:59,280
Here we go.

1722
02:08:59,280 --> 02:09:02,040
And then I have them at third. Avoid

1723
02:09:07,480 --> 02:09:21,840
salary.

1724
02:09:21,840 --> 02:09:24,000
So tired

1725
02:09:45,880 --> 02:09:48,120
either B off with one F

1726
02:09:48,960 --> 02:09:50,880
or we double F

1727
02:09:52,480 --> 02:09:55,200
English grammar masters.

1728
02:09:55,960 --> 02:09:57,480
Then you tell me

1729
02:10:02,040 --> 02:10:06,000
in one F, right.

1730
02:10:06,000 --> 02:10:10,320
Remove one from here and one here

1731
02:10:14,840 --> 02:10:23,240
and two FS.

1732
02:10:23,240 --> 02:10:26,280
Okay, let me put it back

1733
02:10:28,600 --> 02:10:31,880
and do you guys

1734
02:10:31,880 --> 02:10:47,160
sure.

1735
02:10:47,160 --> 02:10:48,240
And let's see.

1736
02:10:48,240 --> 02:10:51,240
So this is the best class.

1737
02:10:51,720 --> 02:10:57,480
Stop thinking about cheap calls. Ask.

1738
02:10:57,480 --> 02:11:00,120
So let's say I have

1739
02:11:00,120 --> 02:11:03,240
now a manager class

1740
02:11:12,360 --> 02:11:14,760
and in this organization

1741
02:11:14,760 --> 02:11:18,800
every class is extending from the class

1742
02:11:22,040 --> 02:11:24,360
and then

1743
02:11:27,840 --> 02:11:29,880
so many years

1744
02:11:29,880 --> 02:11:33,440
the pay scale of managers is

1745
02:11:33,440 --> 02:11:37,200
is in companies is a little different.

1746
02:11:37,320 --> 02:11:41,360
So let's say
they also shared some kind of bonus

1747
02:11:41,880 --> 02:11:44,280
other than the

1748
02:11:44,400 --> 02:12:03,440
other than the base salary
and then some kind of allows.

1749
02:12:03,440 --> 02:12:08,880
And if and then if we have to
calculate the salary of manager.

1750
02:12:08,880 --> 02:12:14,800
So obviously it will be different
than the salary of other employees.

1751
02:12:14,800 --> 02:12:16,320
Right. So

1752
02:12:20,360 --> 02:12:22,440
with me changes to potentially

1753
02:12:25,320 --> 02:12:26,040
Okay.

1754
02:12:26,480 --> 02:12:39,800
So so

1755
02:12:45,160 --> 02:12:47,640
it's always different
will always be different.

1756
02:12:48,680 --> 02:12:49,000
Yeah.

1757
02:12:49,160 --> 02:12:53,520
So let's see now this is how we calculate
the salary for the manager.

1758
02:12:53,520 --> 02:12:55,480
Okay it's just an example.

1759
02:12:55,480 --> 02:13:04,160
So we take the base salary,

1760
02:13:04,160 --> 02:13:10,040
but we want to use the base salary value
from the parent class.

1761
02:13:10,160 --> 02:13:11,000
Okay,

1762
02:13:11,680 --> 02:13:13,720
So but

1763
02:13:13,720 --> 02:13:18,240
because there is no.

1764
02:13:18,240 --> 02:13:21,600
So first let me let me show you only

1765
02:13:21,600 --> 02:13:26,160
only the methods.

1766
02:13:26,160 --> 02:13:30,120
So I want to have this basic salary.

1767
02:13:30,240 --> 02:13:33,480
So I have this function,
the basic function

1768
02:13:33,480 --> 02:13:36,640
inside class.

1769
02:13:36,640 --> 02:13:40,560
And then I want to have the same function,

1770
02:13:40,880 --> 02:13:44,400
the same name function in my child class.

1771
02:13:44,400 --> 02:13:45,120
Okay?

1772
02:13:45,400 --> 02:13:50,360
And then what I want to do,
I want to combine the functionality

1773
02:13:50,360 --> 02:13:54,960
of the parent class
method inside of the child class.

1774
02:13:55,560 --> 02:13:59,520
Now, for that,
what I can do, I can write super

1775
02:14:01,240 --> 02:14:04,440
and then I can write

1776
02:14:04,440 --> 02:14:10,000
the name of the method
that I want to use from the parent. Now,

1777
02:14:10,000 --> 02:14:13,720
because there is this conflict of names

1778
02:14:14,160 --> 02:14:17,440
so is exactly doing the same thing. B

1779
02:14:19,240 --> 02:14:21,840
as we used this keyword

1780
02:14:21,840 --> 02:14:25,880
to distinguish between a local variable
and instance variable.

1781
02:14:27,320 --> 02:14:29,640
And here we are using super keyword

1782
02:14:29,640 --> 02:14:33,560
to distinguish between a method

1783
02:14:35,120 --> 02:14:37,680
from the parent class and child class.

1784
02:14:37,680 --> 02:14:43,760
If if we have same name method

1785
02:14:44,280 --> 02:14:47,880
in parent and child class, if there is

1786
02:14:48,120 --> 02:14:52,120
there are no same name methods,
then we don't need that super keyword.

1787
02:14:52,400 --> 02:14:55,640
It's only needed
when we have same name methods

1788
02:14:55,640 --> 02:14:58,800
in the parent and in the in the child.

1789
02:14:58,800 --> 02:15:02,400
And for some reason we want to use

1790
02:15:02,920 --> 02:15:07,200
those letters from the parent class
inside the child class.

1791
02:15:07,320 --> 02:15:07,640
Okay.

1792
02:15:09,120 --> 02:15:10,920
Yes. Like this.

1793
02:15:11,280 --> 02:15:14,480
So now I can write

1794
02:15:14,480 --> 02:15:17,280
super dot print salary and

1795
02:15:20,000 --> 02:15:22,520
I can write

1796
02:15:23,280 --> 02:15:25,040
bonus multiplied

1797
02:15:25,040 --> 02:15:28,200
by traveling allowance like this.

1798
02:15:29,040 --> 02:15:32,960
So now I have some piece of functionality

1799
02:15:33,120 --> 02:15:35,760
that I am using from my business class.

1800
02:15:36,360 --> 02:15:37,200
Okay.

1801
02:15:37,360 --> 02:15:40,920
And then I am adding that functionality

1802
02:15:41,480 --> 02:15:45,680
inside, inside the exact same method.

1803
02:15:46,520 --> 02:15:52,520
So now what will happen
when I execute you?

1804
02:15:52,680 --> 02:15:54,840
Can you print that at your notes?

1805
02:15:54,840 --> 02:15:58,720
So everything is written on the slides
and I will put back on the notes

1806
02:15:59,120 --> 02:16:05,520
in the next class and then we will be
reasonably sizing things.

1807
02:16:05,520 --> 02:16:08,160
So let's say if we have a

1808
02:16:13,640 --> 02:16:16,400
Y multiply

1809
02:16:16,400 --> 02:16:19,040
or yes,

1810
02:16:19,400 --> 02:16:21,640
I want to, I want to reward

1811
02:16:22,040 --> 02:16:24,440
many days as much as I can.

1812
02:16:24,840 --> 02:16:29,480
Let's talk about how you multiply
the time instead of adding

1813
02:16:39,760 --> 02:16:41,760
Let me add this

1814
02:16:51,800 --> 02:16:54,120
just to make things simple.

1815
02:16:54,120 --> 02:16:56,160
Let me give values directly.

1816
02:16:57,720 --> 02:17:04,040
So these variables, energies

1817
02:17:04,040 --> 02:17:12,320
are always based.

1818
02:17:12,320 --> 02:17:15,680
The manager manager
is equal to new manager

1819
02:17:17,480 --> 02:17:20,760
and and I'll see if I see a manager dot

1820
02:17:21,880 --> 02:17:23,640
print salary.

1821
02:17:23,640 --> 02:17:24,920
So what will happen?

1822
02:17:24,920 --> 02:17:27,280
Must be

1823
02:17:27,760 --> 02:17:29,400
from the

1824
02:17:30,320 --> 02:17:33,440
class will be called.

1825
02:17:33,440 --> 02:17:37,200
And then this line after

1826
02:17:37,200 --> 02:17:45,520
this will be printed.

1827
02:17:45,520 --> 02:17:47,680
Okay, so 3000

1828
02:17:48,800 --> 02:17:51,120
from this method

1829
02:17:51,120 --> 02:17:54,880
which is present inside the parent class

1830
02:17:55,520 --> 02:17:59,840
with the help of super keyword, and
then I can write anything for back method.

1831
02:17:59,840 --> 02:18:03,040
So this is helpful
when let's say for example,

1832
02:18:03,840 --> 02:18:05,880
you have a method in your parent class

1833
02:18:06,560 --> 02:18:10,680
and it is doing maybe 60, 70 of the work

1834
02:18:12,000 --> 02:18:13,000
already, right?

1835
02:18:13,000 --> 02:18:16,040
And you want to add
maybe some new functionality

1836
02:18:16,040 --> 02:18:18,840
to the method
and you don't want to change the names.

1837
02:18:19,160 --> 02:18:20,840
So about

1838
02:18:23,320 --> 02:18:23,960
about

1839
02:18:23,960 --> 02:18:27,280
scenario scenarios, for example, managers,
they also get paid.

1840
02:18:27,280 --> 02:18:29,720
They also take days off, right?

1841
02:18:29,720 --> 02:18:31,200
So they are also getting paid.

1842
02:18:31,200 --> 02:18:36,120
They are also they also have days off
developers to the same right.

1843
02:18:36,320 --> 02:18:41,440
There may be other employees in the
in the company that we be doing the same.

1844
02:18:41,440 --> 02:18:44,200
So instead of coming up

1845
02:18:44,200 --> 02:18:46,440
with different names

1846
02:18:46,440 --> 02:18:49,760
for all these child
classes, what we can do,

1847
02:18:50,520 --> 02:18:52,880
we can have the same names

1848
02:18:52,880 --> 02:18:56,600
entire to be paid in class and entire day,
child class.

1849
02:18:57,000 --> 02:19:00,760
And if for some reason
you guys want to use

1850
02:19:00,760 --> 02:19:04,080
the method from the parent,
you right super with that.

1851
02:19:04,520 --> 02:19:07,840
If you want to use the method
from the child you don't need, don't

1852
02:19:07,840 --> 02:19:12,600
write anything same as you do
with instance variable and local variable.

1853
02:19:12,800 --> 02:19:17,360
If there is a conflict,
we write this with the instance variable.

1854
02:19:17,680 --> 02:19:20,080
We don't write anything
with the local variable.

1855
02:19:20,080 --> 02:19:20,800
Okay.

1856
02:19:20,840 --> 02:19:24,080
How to remove compiler
to check all classes.

1857
02:19:24,080 --> 02:19:26,760
What I have and check one method.

1858
02:19:28,440 --> 02:19:31,200
Alexi You mean you are facing some issues

1859
02:19:31,200 --> 02:19:34,320
and you want to exclude those files
from compilation

1860
02:19:41,040 --> 02:19:41,760
is it?

1861
02:19:41,760 --> 02:19:45,520
Didn't make sense guys
how the super keyword can be used

1862
02:19:45,520 --> 02:19:48,920
for the for the for to call the methods

1863
02:19:49,760 --> 02:19:52,000
or testers bonus will be minus one

1864
02:19:52,000 --> 02:19:54,480
program collapses

1865
02:19:55,360 --> 02:19:56,600
sure will please.

1866
02:19:56,600 --> 02:19:57,080
Okay.

1867
02:19:57,080 --> 02:20:00,760
I have a lot of classes
and have to check all my mistakes

1868
02:20:01,080 --> 02:20:05,520
so no Alex, you can
you can exclude the packages as well.

1869
02:20:06,000 --> 02:20:08,200
So instead of selecting
individual classes,

1870
02:20:08,280 --> 02:20:16,000
selectively packages,
but we cannot calculate or to celebrate.

1871
02:20:16,000 --> 02:20:17,560
No, we can.

1872
02:20:17,560 --> 02:20:20,200
We can.

1873
02:20:20,200 --> 02:20:23,680
We can. So,

1874
02:20:23,680 --> 02:20:27,040
so let's say for example,
instead of using this,

1875
02:20:27,040 --> 02:20:28,240
but instead of being attorney,

1876
02:20:28,240 --> 02:20:31,640
you want to use to salary directly,
you can do you can do that.

1877
02:20:31,680 --> 02:20:32,560
You can see

1878
02:20:34,800 --> 02:20:35,280
would be a

1879
02:20:35,280 --> 02:20:37,280
salary like this to calculate the

1880
02:20:39,920 --> 02:20:43,480
I don't like it how to change anyone else

1881
02:20:45,560 --> 02:20:46,920
or do you want to change?

1882
02:20:46,920 --> 02:20:54,280
I show my classes are showing
horizontally.

1883
02:20:54,280 --> 02:20:56,840
Okay. Can you repeat please?

1884
02:20:56,840 --> 02:20:58,880
Can you data total pay?

1885
02:20:58,880 --> 02:21:01,800
Yes, we can prepare.

1886
02:21:01,800 --> 02:21:04,760
Can you have more than one
method under super?

1887
02:21:06,800 --> 02:21:08,000
Under super. Like this?

1888
02:21:08,000 --> 02:21:09,920
No, only. Only.

1889
02:21:09,920 --> 02:21:14,280
So, for example, let's say

1890
02:21:16,160 --> 02:21:18,360
you are calling this method in here.

1891
02:21:18,360 --> 02:21:22,360
So for example, let's

1892
02:21:22,360 --> 02:21:26,160
assume there is this based off method.

1893
02:21:27,920 --> 02:21:30,640
And so did you.

1894
02:21:30,640 --> 02:21:36,440
Me If if said if you your question
that if you can use this print off

1895
02:21:36,480 --> 02:21:40,520
method with the super keyword
as well after this point salary.

1896
02:21:40,600 --> 02:21:42,200
Yes we can do it.

1897
02:21:42,200 --> 02:21:46,080
But if you try to do
with the constructors,

1898
02:21:46,080 --> 02:21:47,720
you will not be able to do this.

1899
02:21:47,720 --> 02:21:51,680
So constructors allow only one line.

1900
02:21:51,680 --> 02:21:57,760
You're still printing only the base
salary.

1901
02:21:57,760 --> 02:22:00,760
Maybe we need to close it. Let me try.

1902
02:22:00,800 --> 02:22:04,320
I think the classes
they will still be opening horizontally.

1903
02:22:04,480 --> 02:22:05,680
I don't know. But

1904
02:22:06,680 --> 02:22:08,760
if you
close the intelligent entry opening.

1905
02:22:08,760 --> 02:22:20,440
So instead of tried to close
the only the only default.

1906
02:22:20,440 --> 02:22:23,320
So this is how we can distinguish

1907
02:22:23,720 --> 02:22:26,600
between the between the methods.

1908
02:22:26,600 --> 02:22:30,280
Now let's say guys,

1909
02:22:30,280 --> 02:22:34,640
let me make same variables as well.

1910
02:22:34,680 --> 02:22:36,880
So instead of base salary,

1911
02:22:38,400 --> 02:22:41,240
let me make a salary.

1912
02:22:41,520 --> 02:22:48,000
Okay,

1913
02:22:48,000 --> 02:22:51,200
so let's say a B basic salary
for the employees

1914
02:22:51,200 --> 02:22:55,200
is, is this.

1915
02:22:55,200 --> 02:23:00,120
And then we have the basic salary inside

1916
02:23:02,160 --> 02:23:08,080
the child classes as well, like this.

1917
02:23:09,880 --> 02:23:11,760
So now

1918
02:23:12,160 --> 02:23:14,000
if you guys want to use

1919
02:23:14,000 --> 02:23:18,840
the variable from the parent,
this salary variable, can you guys tell me

1920
02:23:19,720 --> 02:23:23,840
how can I use this variable
inside this method?

1921
02:23:23,840 --> 02:23:26,520
If I want to refer to the parent
class function?

1922
02:23:26,960 --> 02:23:30,440
So I want to use this 30,000
instead of the salary.

1923
02:23:30,440 --> 02:23:31,120
So right now,

1924
02:23:32,720 --> 02:23:33,680
right now,

1925
02:23:33,680 --> 02:23:37,320
if I write, if

1926
02:23:37,320 --> 02:23:41,280
I write salary, then

1927
02:23:50,520 --> 02:23:51,400
then I see this

1928
02:23:51,400 --> 02:23:55,840
50,000 plus ten plus 250 210.

1929
02:23:56,040 --> 02:23:57,440
Okay. Like this.

1930
02:23:57,440 --> 02:24:02,600
But if I want to use this base
salary from the parent, I again need

1931
02:24:03,680 --> 02:24:05,760
super and then daughter.

1932
02:24:05,760 --> 02:24:06,440
Okay.

1933
02:24:06,600 --> 02:24:08,960
And Now if I execute deferred

1934
02:24:12,920 --> 02:24:16,000
so now I see 38,250.

1935
02:24:16,200 --> 02:24:19,000
Okay so same as we case

1936
02:24:19,680 --> 02:24:23,880
with that with the with the case with that
this keyword here

1937
02:24:24,240 --> 02:24:27,680
if you want to use the variables

1938
02:24:28,600 --> 02:24:32,640
from the parent class you can write super.

1939
02:24:33,360 --> 02:24:36,560
If you want to use the variables
from the same class,

1940
02:24:37,440 --> 02:24:39,720
you can use simply

1941
02:24:39,720 --> 02:24:43,040
the name of those variables.

1942
02:24:43,040 --> 02:24:43,520
Okay.

1943
02:24:43,520 --> 02:24:47,040
And on this list there is another example
that will make more sense.

1944
02:24:47,040 --> 02:24:57,680
So let's say, for example.

1945
02:24:57,680 --> 02:25:00,000
So what is this super keyword?

1946
02:25:00,000 --> 02:25:03,800
Super keyword in Java is again
a reference variable.

1947
02:25:03,800 --> 02:25:08,840
This was also
this keyword was also a reference variable

1948
02:25:09,600 --> 02:25:13,400
which is used to refer to immediate
parent class.

1949
02:25:13,480 --> 02:25:15,360
What does this immediate period class
mean?

1950
02:25:15,360 --> 02:25:20,400
Guys, if I have a grade
A grandparent class, can I refer to

1951
02:25:20,400 --> 02:25:24,600
the variables of that grandparent
with the help of super keyword?

1952
02:25:24,800 --> 02:25:27,480
If I have grandparent, then parent
and then child,

1953
02:25:28,080 --> 02:25:31,560
and if I am, if
I am writing the code inside the child

1954
02:25:31,560 --> 02:25:35,720
class, can I Part of the variables
of grandparent?

1955
02:25:35,720 --> 02:25:36,800
I can not. Okay.

1956
02:25:36,800 --> 02:25:40,000
So immediate parent class means I

1957
02:25:40,000 --> 02:25:43,680
can only use or I can only

1958
02:25:44,920 --> 02:25:47,560
access the variables of the parent class.

1959
02:25:47,560 --> 02:25:51,680
So not more than that. Yes.

1960
02:25:51,680 --> 02:25:54,000
Just one level up

1961
02:25:54,000 --> 02:25:56,720
before use of java support keyword

1962
02:25:56,720 --> 02:26:00,280
so super can be used to refer

1963
02:26:00,640 --> 02:26:04,240
immediate parent class instance variables.

1964
02:26:04,560 --> 02:26:05,280
Okay.

1965
02:26:05,640 --> 02:26:07,880
Remember that you should use

1966
02:26:08,200 --> 02:26:11,560
double super for that. Yes.

1967
02:26:11,840 --> 02:26:12,120
Okay.

1968
02:26:12,120 --> 02:26:16,000
So a super can be used to refer
to the immediate

1969
02:26:17,600 --> 02:26:20,320
parent class instance to super.

1970
02:26:21,080 --> 02:26:26,040
Super can be used to invoke immediate
be it in class methods as well.

1971
02:26:26,160 --> 02:26:28,520
So fees plus method

1972
02:26:29,640 --> 02:26:33,000
and the constructor as well.

1973
02:26:33,520 --> 02:26:34,240
Okay.

1974
02:26:34,400 --> 02:26:40,320
So now I have more control over our
how I to write my code.

1975
02:26:40,320 --> 02:26:45,360
I can use now the constructors as well
from the parent class.

1976
02:26:45,600 --> 02:26:46,080
Yeah.

1977
02:26:46,160 --> 02:26:51,080
And if I have any conflict
I now know how to resolve that conflict.

1978
02:26:51,120 --> 02:26:51,720
Right.

1979
02:26:51,720 --> 02:26:54,920
Let's say for example,
someone has written a class like we get

1980
02:26:54,920 --> 02:26:57,920
Java guys
because we cannot edit that class.

1981
02:26:58,200 --> 02:27:01,440
So now don't need to come up
with the different names

1982
02:27:01,480 --> 02:27:04,560
for the methods
and fields in our child classes.

1983
02:27:04,560 --> 02:27:09,320
We can have the same name methods.

1984
02:27:09,320 --> 02:27:10,600
Super is used to that

1985
02:27:10,600 --> 02:27:14,560
for the immediate parent class, so it's
only works for hierarchical inheritance.

1986
02:27:14,600 --> 02:27:16,840
No, it will work for single as well

1987
02:27:23,480 --> 02:27:24,600
and for

1988
02:27:24,600 --> 02:27:28,120
multi-level
as well, but only until one level,

1989
02:27:29,000 --> 02:27:30,840
only one level up

1990
02:27:41,960 --> 02:27:45,560
can super be changed.

1991
02:27:45,560 --> 02:27:50,880
What do you mean by changed?

1992
02:27:50,880 --> 02:27:53,640
Can we make more examples with super? Yes.

1993
02:27:53,640 --> 02:27:55,400
So Alexa, right now I have.

1994
02:27:55,400 --> 02:27:57,480
I only have 15 minutes.

1995
02:27:58,080 --> 02:28:00,600
So first let me
so this is another example.

1996
02:28:00,600 --> 02:28:02,000
First let me go to this slide

1997
02:28:02,000 --> 02:28:06,600
and if we are left with time,
we will do more examples.

1998
02:28:06,600 --> 02:28:13,200
Can you explain the immediate
one more time?

1999
02:28:13,200 --> 02:28:16,560
So under if there is this class error

2000
02:28:19,920 --> 02:28:23,280
and here if we have an integer variable,

2001
02:28:24,440 --> 02:28:28,560
some, then there is this class

2002
02:28:29,600 --> 02:28:34,640
B, then

2003
02:28:34,640 --> 02:28:37,320
there is this class C.

2004
02:28:37,920 --> 02:28:39,920
Now inside C

2005
02:28:39,920 --> 02:28:43,040
I cannot access this integer S

2006
02:28:43,280 --> 02:28:45,680
If this B is extending

2007
02:28:48,920 --> 02:28:52,320
from here and this C is extending

2008
02:28:57,000 --> 02:28:59,680
from B,
okay, so now I have a class in between.

2009
02:29:00,000 --> 02:29:05,400
I cannot access this some
because this is not the immediate parent.

2010
02:29:05,520 --> 02:29:07,760
The immediate parent is the class B

2011
02:29:08,760 --> 02:29:12,240
and that parent class
has a super to another parent class

2012
02:29:13,560 --> 02:29:18,000
and their parent parent class has is super

2013
02:29:18,880 --> 02:29:22,280
to another parent
like immediate family members.

2014
02:29:22,280 --> 02:29:28,120
Yes. Of the you can see that.

2015
02:29:28,120 --> 02:29:38,560
But in inheritance, it's
a little different.

2016
02:29:38,560 --> 02:29:41,520
So let's show you guys this.
I have this for each of the class.

2017
02:29:41,520 --> 02:29:43,320
Then there is this

2018
02:29:43,440 --> 02:29:45,600
class, which is extending from fun nature.

2019
02:29:45,960 --> 02:29:51,200
Now, both the classes are
they have this color variable.

2020
02:29:51,640 --> 02:29:54,080
Okay, They have this color variable.

2021
02:29:54,080 --> 02:29:59,080
And if I want to print the color

2022
02:30:01,360 --> 02:30:02,160
of the Kir

2023
02:30:02,160 --> 02:30:05,880
class, I can simply write
this variable name color.

2024
02:30:05,880 --> 02:30:07,920
It will refer to this black.

2025
02:30:07,920 --> 02:30:14,400
But if I want the value of this,
I need to write super. Then

2026
02:30:15,520 --> 02:30:18,000
go back over

2027
02:30:18,360 --> 02:30:21,000
to this color variable in here and now.

2028
02:30:21,000 --> 02:30:25,480
If you print this
then you will see first black

2029
02:30:27,840 --> 02:30:30,720
and then you will see that

2030
02:30:35,760 --> 02:30:38,760
super can be used to invoke weird in class
method as well.

2031
02:30:39,000 --> 02:30:41,920
If you have same name third in the parent

2032
02:30:41,920 --> 02:30:44,040
class and in child class.

2033
02:30:45,000 --> 02:30:48,440
So now again
you will be having an ambiguity

2034
02:30:48,560 --> 02:30:51,520
because as is the case

2035
02:30:51,520 --> 02:30:54,240
with the local variables,

2036
02:30:54,720 --> 02:30:57,360
dollar always prefers by default.

2037
02:30:57,480 --> 02:31:00,400
Now I always prefer the local variables.

2038
02:31:00,400 --> 02:31:05,640
So same is the case with the meters and
the variables in here in child classes.

2039
02:31:06,080 --> 02:31:07,320
Always, always.

2040
02:31:07,320 --> 02:31:10,400
The methods from the child
classes will be preferred

2041
02:31:10,920 --> 02:31:13,920
the fields from the child
classes will be preferred.

2042
02:31:14,400 --> 02:31:19,280
But if you for any reason want to use
the parent class methods and figures,

2043
02:31:19,920 --> 02:31:25,520
you can this super keyword like
for example, and it's a super big change.

2044
02:31:25,520 --> 02:31:29,400
Like basic class
C has a super that refers to method

2045
02:31:29,400 --> 02:31:33,680
found in class B
and the method in class B has a super.

2046
02:31:33,680 --> 02:31:35,520
That is a reference to the method.

2047
02:31:35,520 --> 02:31:37,640
Yes, Mom. Well, you can do that
if I comment.

2048
02:31:37,640 --> 02:31:40,840
Our super keyword is still working.

2049
02:31:41,080 --> 02:31:42,360
How so?

2050
02:31:42,360 --> 02:31:46,200
Yes, it will work because it will refer
to the same class variable.

2051
02:31:46,440 --> 02:31:47,120
Okay.

2052
02:31:47,120 --> 02:31:49,920
But it will always be printing
that those results.

2053
02:31:49,920 --> 02:31:52,320
It will never be printing the results
from the parent.

2054
02:31:52,360 --> 02:32:14,240
Well, now,

2055
02:32:14,760 --> 02:32:34,120
does it make sense?

2056
02:32:34,120 --> 02:32:39,440
The only way to access
A jumping B is to use for.

2057
02:32:39,440 --> 02:32:40,680
No, we cannot.

2058
02:32:40,680 --> 02:32:43,640
We cannot jump on B,
you know, this is what I am.

2059
02:32:43,840 --> 02:32:47,400
I am trying to convey.
We cannot force this.

2060
02:32:47,400 --> 02:32:50,400
Maybe even with help of super keyword,

2061
02:32:50,720 --> 02:32:55,800
we can only access the variables of class
B with the super keyword,

2062
02:32:55,800 --> 02:33:00,880
not the variables of class
E If we are inside B, class C

2063
02:33:02,120 --> 02:33:03,760
or okay, so we use the super.

2064
02:33:03,760 --> 02:33:08,160
If same name is yes,
this condition should be there.

2065
02:33:08,160 --> 02:33:10,160
Otherwise it's pretty much same.

2066
02:33:10,560 --> 02:33:15,000
Otherwise it will not matter if you use
super or if you don't use super.

2067
02:33:15,240 --> 02:33:18,600
If there is no conflict,
if there is no same

2068
02:33:19,160 --> 02:33:22,080
variables or same name matters. Okay.

2069
02:33:22,320 --> 02:33:25,320
Otherwise it will be same
because you are actually adapting

2070
02:33:25,320 --> 02:33:28,440
to the same variable.

2071
02:33:28,440 --> 02:33:32,200
Super keyword also used to access
the methods of parent class.

2072
02:33:32,200 --> 02:33:33,360
We can also do that.

2073
02:33:33,360 --> 02:33:36,120
So let's say for example,

2074
02:33:36,440 --> 02:33:38,720
in the furniture class we have this color

2075
02:33:38,800 --> 02:33:41,480
in this year class,
we have also a color method.

2076
02:33:43,120 --> 02:33:44,440
And then

2077
02:33:45,080 --> 02:33:47,840
there is this wide working method in which

2078
02:33:48,000 --> 02:33:50,840
want to use the functionality
of both methods.

2079
02:33:50,840 --> 02:33:55,160
Okay, I want the
the color method from the parent class

2080
02:33:55,920 --> 02:33:59,160
and I want to.

2081
02:33:59,160 --> 02:34:03,240
So if you don't write the super,
the color from the child

2082
02:34:03,240 --> 02:34:06,000
class will be used inside
this work method.

2083
02:34:06,520 --> 02:34:09,960
But if we super the color from the parent

2084
02:34:09,960 --> 02:34:14,160
class will be used.

2085
02:34:14,160 --> 02:34:17,200
And this is the example of calling

2086
02:34:17,200 --> 02:34:20,720
the constructor of the parent class.

2087
02:34:21,320 --> 02:34:25,720
So in here we have the constructor
inside the furniture inside of it here,

2088
02:34:26,000 --> 02:34:31,680
and we are using super keyword
to call this constructor from the parent

2089
02:34:34,680 --> 02:34:37,480
or to the books

2090
02:34:57,320 --> 02:34:59,320
of like specific inheritance.

2091
02:34:59,320 --> 02:35:02,640
And super is always
the parent is super is always the better.

2092
02:35:02,960 --> 02:35:07,560
If I am in class C with the help of super,
I can only work with class B

2093
02:35:08,040 --> 02:35:08,920
with the class.

2094
02:35:08,920 --> 02:35:10,920
I will not be able to love ESL.

2095
02:35:10,920 --> 02:35:11,200
Okay.

2096
02:35:11,200 --> 02:35:16,800
You are right.

2097
02:35:16,800 --> 02:35:20,640
So this is the difference between super
when you use

2098
02:35:20,920 --> 02:35:24,480
without the parentheses
and independent to do so.

2099
02:35:24,560 --> 02:35:27,800
But it used to call the super class
variables

2100
02:35:27,800 --> 02:35:30,360
with our dependencies and

2101
02:35:31,640 --> 02:35:36,000
objects
when they are overridden by subclass.

2102
02:35:36,000 --> 02:35:42,480
So this new keyword overridden
it means if we have same name, methods or,

2103
02:35:42,480 --> 02:35:48,600
same name fears in the child class,
we also call it overriding the child.

2104
02:35:48,600 --> 02:35:53,440
The class is overriding the fields
or the methods from the parent class.

2105
02:35:53,440 --> 02:35:56,760
Okay, so let's say
you don't like something from your parents

2106
02:35:58,040 --> 02:35:59,840
and now you are independent.

2107
02:35:59,840 --> 02:36:01,760
You are more than 18.

2108
02:36:01,760 --> 02:36:05,640
So you can that okay,
you can have your own on

2109
02:36:07,160 --> 02:36:09,640
own thing on top of your parents.

2110
02:36:09,640 --> 02:36:10,240
Okay.

2111
02:36:10,320 --> 02:36:13,400
Well then if they are allowed
to live in their house or not,

2112
02:36:13,400 --> 02:36:17,000
it totally depends on them.

2113
02:36:17,000 --> 02:36:20,200
And then we have this super

2114
02:36:20,200 --> 02:36:24,840
is used to call super class constructor
from the base class.

2115
02:36:24,840 --> 02:36:25,080
Okay.

2116
02:36:25,080 --> 02:36:27,520
So inside you are inside the child class

2117
02:36:28,040 --> 02:36:32,000
and you don't want to rewrite
the constructor again and again

2118
02:36:32,000 --> 02:36:36,320
to initialize the fields
so you can use the super with parentheses

2119
02:36:37,000 --> 02:36:40,320
to call the constructor of the parent

2120
02:36:40,360 --> 02:36:45,800
class.

2121
02:36:45,800 --> 02:36:49,960
This is this keyword is used to refer
to the current class

2122
02:36:50,920 --> 02:36:54,880
instance as well as static members.

2123
02:36:54,880 --> 02:37:00,480
Okay, so Buddy is used to refer
to this super class instance as well as

2124
02:37:01,200 --> 02:37:03,800
static members or

2125
02:37:07,720 --> 02:37:09,440
we can use be

2126
02:37:09,440 --> 02:37:13,480
this as well as super animate
except this static area.

2127
02:37:13,480 --> 02:37:17,640
So let's say for example,
if I have a static method, I cannot use

2128
02:37:18,640 --> 02:37:21,080
super in there, I cannot use this,

2129
02:37:21,080 --> 02:37:24,600
I cannot use any instance variable
and because it

2130
02:37:24,640 --> 02:37:28,400
super and this they are always
referring to instance variable.

2131
02:37:28,400 --> 02:37:38,160
So it is not allowed.

2132
02:37:38,160 --> 02:37:38,680
All right.

2133
02:37:38,680 --> 02:37:42,000
So tomorrow it's a very simple thing.

2134
02:37:42,000 --> 02:37:46,280
You guys have already done this,
by the way,

2135
02:37:46,280 --> 02:37:50,880
this method overloading it
because I already know about this.

2136
02:37:51,840 --> 02:37:54,280
Also, we can cover

2137
02:37:54,360 --> 02:37:57,680
more than that.

2138
02:37:57,680 --> 02:38:15,840
Tomorrow is a review.

2139
02:38:15,840 --> 02:38:20,920
So next week is the week
for which all of you are waiting.

2140
02:38:21,360 --> 02:38:25,280
Okay, so you see this keyword

2141
02:38:33,120 --> 02:38:34,400
we were

2142
02:38:41,920 --> 02:38:44,160
and then everything will be easy peasy.

2143
02:38:45,240 --> 02:38:50,480
The reality is come out.

2144
02:38:50,480 --> 02:38:52,360
I need a major recap

2145
02:38:55,520 --> 02:39:00,200
so worth the period you

2146
02:39:00,720 --> 02:39:03,800
Maryam, I will ask you in the next week
or so after

2147
02:39:04,000 --> 02:39:06,520
after the class on Sunday

2148
02:39:08,160 --> 02:39:11,880
if it is the new joke for me

2149
02:39:14,760 --> 02:39:17,880
be is equal to two years.

2150
02:39:17,880 --> 02:39:20,080
So are you guys revising

2151
02:39:23,000 --> 02:39:24,240
the slides?

2152
02:39:24,240 --> 02:39:39,400
Maybe 2 to 3 slides per day?

2153
02:39:39,400 --> 02:39:41,520
Syntax Explainer Because

2154
02:39:45,280 --> 02:39:47,680
I think you will be having.

2155
02:39:48,920 --> 02:39:51,680
Okay, so you, you just have one more week

2156
02:39:54,640 --> 02:39:57,400
and then you guys will start

2157
02:39:57,600 --> 02:40:00,400
with the selenium classes, Okay?

2158
02:40:01,160 --> 02:40:04,680
From part B of this

2159
02:40:05,720 --> 02:40:06,120
year.

2160
02:40:06,120 --> 02:40:10,640
And yeah, so here is super slides.

2161
02:40:10,720 --> 02:40:13,880
So there have already been shared
before this class.

2162
02:40:14,800 --> 02:40:18,960
Yes. On Thanksgiving
there will be no class on 25th next week.

2163
02:40:20,480 --> 02:40:21,920
We are almost done with Java.

2164
02:40:21,920 --> 02:40:34,440
Yes, 8 to 10 more classes.

2165
02:40:34,440 --> 02:40:37,680
So here
the fun will start the selenium classes

2166
02:40:38,200 --> 02:40:40,800
because you guys will be using
all the knowledge.

2167
02:40:40,800 --> 02:40:42,880
All the knowledge you are.

2168
02:40:44,040 --> 02:40:45,600
So how are they doing this class, guys?

2169
02:40:45,600 --> 02:40:52,080
Well, they're tough, easy.

2170
02:40:52,080 --> 02:40:54,080
It'd be weird, this topic bit weird.

2171
02:40:54,080 --> 02:40:55,760
He said, We will cry.

2172
02:40:55,760 --> 02:40:57,400
No, no, no, no.

2173
02:40:57,400 --> 02:40:59,120
Listen to them.

2174
02:40:59,120 --> 02:41:00,600
They are discussing something else.

2175
02:41:00,600 --> 02:41:02,160
Is Selenium as hard as Java?

2176
02:41:02,160 --> 02:41:05,280
No, no, no. Selenium is super easy

2177
02:41:05,640 --> 02:41:08,520
in this whole course, if you ask me.

2178
02:41:08,520 --> 02:41:09,280
Most only. Sure.

2179
02:41:09,280 --> 02:41:14,200
And this is the feedback from them
that Java is the hardest thing

2180
02:41:14,200 --> 02:41:20,960
in this course.

2181
02:41:20,960 --> 02:41:24,080
No easier to solve there.

2182
02:41:24,080 --> 02:41:26,840
So Selenium is not a software
you can think of.

2183
02:41:26,840 --> 02:41:30,000
Selenium is all all Java

2184
02:41:30,000 --> 02:41:31,280
will talk about.

2185
02:41:31,280 --> 02:41:34,520
It's not easy to remember
when you need to use odd coding

2186
02:41:36,720 --> 02:41:47,120
or asking about selenium.

2187
02:41:47,120 --> 02:41:51,760
It's it was not
but now need to focus on punctuations

2188
02:41:51,800 --> 02:41:53,400
and keeping all things one place

2189
02:41:55,080 --> 02:41:56,040
nurse me right

2190
02:41:56,040 --> 02:41:59,840
now the name is very fancy
I thought it is a software

2191
02:42:00,120 --> 02:42:02,640
so it's a library, it's a framework.

2192
02:42:03,840 --> 02:42:07,720
It's actually a lot of things
is a lot of pain collection of

2193
02:42:07,720 --> 02:42:13,640
so many tools and techniques that you guys
can use to manipulate your browser.

2194
02:42:13,640 --> 02:42:18,560
You guys will learn about the frameworks,
the collection of a lot of classes,

2195
02:42:18,560 --> 02:42:33,200
solving something.

2196
02:42:33,200 --> 02:42:36,320
All right, So let's call it

2197
02:42:36,320 --> 02:42:40,080
a day or night.

2198
02:42:40,080 --> 02:42:43,160
I have already shared this slides
for my part overloading

2199
02:42:43,680 --> 02:42:46,320
and I will share the videos as well

2200
02:42:48,040 --> 02:42:50,560
and I hope you guys are

2201
02:42:52,800 --> 02:42:53,480
okay.

2202
02:42:55,680 --> 02:42:58,000
You guys will revise

2203
02:42:58,000 --> 02:43:02,440
all the Java slides before
before your selenium classes.

2204
02:43:02,440 --> 02:43:04,720
Then there
there are some very, very important

2205
02:43:09,280 --> 02:43:10,040
the slides.

2206
02:43:10,040 --> 02:43:13,520
I will share the notes and record
right after the class.

2207
02:43:13,640 --> 02:43:15,920
Bye bye. Take care.
