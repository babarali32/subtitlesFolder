1
00:00:09,360 --> 00:00:12,160
No question, Sebastian.

2
00:00:12,520 --> 00:00:12,960
Good.

3
00:00:14,240 --> 00:00:14,840
All right, guys.

4
00:00:14,840 --> 00:00:16,680
So let's start from the region.

5
00:00:16,680 --> 00:00:23,280
And I hope now the hard days are gone
and now you guys will start enjoying.

6
00:00:23,320 --> 00:00:24,080
Thank you.

7
00:00:24,080 --> 00:00:26,880
You guys will start enjoying your Java
and all your.

8
00:00:27,240 --> 00:00:29,680
And you will be combining it
with selenium best.

9
00:00:29,680 --> 00:00:33,000
And you could come by our Excel files
text file.

10
00:00:33,000 --> 00:00:37,200
So you guys will now be able
to do much more fun with Java

11
00:00:37,200 --> 00:00:42,040
instead of just learning those dog
classes and cat classes and all that.

12
00:00:42,640 --> 00:00:44,400
Mm hmm.

13
00:00:48,160 --> 00:00:49,640
Um, today's

14
00:00:49,640 --> 00:00:54,720
class number 25.

15
00:00:54,720 --> 00:00:58,160
Oops. What class?

16
00:00:58,160 --> 00:01:03,360
And you guys are using intel,

17
00:01:03,600 --> 00:01:06,840
right?

18
00:01:11,600 --> 00:01:14,760
I feel like in addition, when we do
selenium.

19
00:01:14,800 --> 00:01:15,640
Yep. Yep.

20
00:01:15,640 --> 00:01:17,760
You guys will be like magicians.

21
00:01:17,760 --> 00:01:19,880
You guys will be able to do much more.

22
00:01:20,640 --> 00:01:22,920
Oh, my God. How many are there?

23
00:01:22,920 --> 00:01:26,000
I just know Selenium.
Oh, there are so many.

24
00:01:26,000 --> 00:01:26,720
So many.

25
00:01:28,040 --> 00:01:30,840
We will be creating year dogs and cats

26
00:01:32,080 --> 00:01:34,360
looking worried or

27
00:01:34,360 --> 00:01:46,880
looking worried.

28
00:01:46,880 --> 00:01:51,360
So. So last class,
we discussed all about interfaces

29
00:01:52,680 --> 00:01:54,520
and the differences

30
00:01:54,520 --> 00:01:57,720
between interfaces and abstract classes.

31
00:01:57,720 --> 00:02:02,240
And we also went through the encapsulation
part.

32
00:02:02,240 --> 00:02:03,080
Right?

33
00:02:03,480 --> 00:02:07,120
So what do you guys remember

34
00:02:07,120 --> 00:02:11,720
from that?

35
00:02:11,720 --> 00:02:14,240
Let's start from the abstract classes.

36
00:02:15,120 --> 00:02:17,320
So if someone asked you

37
00:02:18,360 --> 00:02:23,120
if someone asks you in your interview,
what is an abstract class,

38
00:02:23,760 --> 00:02:26,520
how would you guys define an abstract
class?

39
00:02:26,520 --> 00:02:30,480
Let's say
you are explaining it to an interviewer

40
00:02:36,000 --> 00:02:38,240
and don't use Google not finished.

41
00:02:38,640 --> 00:02:42,960
Don't try to come up with
your own explanation so that you guys know

42
00:02:43,560 --> 00:02:48,320
how much more prep you guys need before
you are ready for the interview.

43
00:02:48,320 --> 00:02:49,840
Don't look at your notes.

44
00:02:49,840 --> 00:02:52,080
Don't look at your lot, look at Google.

45
00:02:52,440 --> 00:02:55,200
Try to explain it
in your own understanding,

46
00:02:55,200 --> 00:02:59,680
in your own words.

47
00:02:59,680 --> 00:03:02,160
Every class participates in inheritance.

48
00:03:02,160 --> 00:03:04,200
Every class participates in inheritance.

49
00:03:04,560 --> 00:03:07,840
Okay?

50
00:03:07,840 --> 00:03:10,960
Every abstract class
participates in inheritance.

51
00:03:11,040 --> 00:03:15,000
This abstraction means
hiding the implementation, but showing

52
00:03:15,000 --> 00:03:17,160
only the functionality to the user.

53
00:03:18,960 --> 00:03:20,320
So now you guys

54
00:03:20,320 --> 00:03:22,520
should be able to explain these things,
right?

55
00:03:23,400 --> 00:03:27,480
It's class
without ways of how to implement.

56
00:03:28,240 --> 00:03:29,520
Okay.

57
00:03:29,640 --> 00:03:32,440
To completely,
you need to create a subclass

58
00:03:33,480 --> 00:03:37,800
in the class where we can have implemented
and some unimplemented method.

59
00:03:37,800 --> 00:03:41,280
That's also a good definition

60
00:03:41,720 --> 00:03:52,000
and they are classes
with the abstract keyword that we use.

61
00:03:52,000 --> 00:03:55,200
Then we are not sure how to implement
the meters.

62
00:03:55,440 --> 00:03:56,880
Perfect. Perfect.

63
00:03:56,880 --> 00:04:00,640
So let me copy that collection
of some defined end and define.

64
00:04:01,040 --> 00:04:03,760
So all of your explanations.

65
00:04:03,760 --> 00:04:05,800
They they are good. They are great.

66
00:04:05,800 --> 00:04:08,400
If you guys are coming up

67
00:04:08,400 --> 00:04:10,320
with these explanations on your own.

68
00:04:10,320 --> 00:04:13,400
But what most of you are doing,

69
00:04:13,400 --> 00:04:16,680
some of you are discussing the properties
of the abstract classes.

70
00:04:17,080 --> 00:04:20,680
Some of you are discussing
how the abstract classes are implemented.

71
00:04:21,240 --> 00:04:25,360
Some of you are discussing how
what does the abstract classes contain.

72
00:04:25,360 --> 00:04:31,200
So all of these are good, but try to put
more things to your explanation. So

73
00:04:32,480 --> 00:04:34,040
the more you explain to the

74
00:04:34,040 --> 00:04:38,160
interviewer, the more they know that
that you know more.

75
00:04:38,160 --> 00:04:38,960
Right?

76
00:04:39,240 --> 00:04:42,400
And if you guys are not sure
about something, let's say

77
00:04:42,840 --> 00:04:48,360
70% or 80% sure,
then you guys can say I am 70 to 80% sure.

78
00:04:48,360 --> 00:04:50,880
This is what an abstract class looks like.

79
00:04:51,280 --> 00:04:55,560
And if you are just 50% sure,
I would say don't

80
00:04:56,280 --> 00:05:00,000
even discuss that concept
because interviews

81
00:05:00,760 --> 00:05:03,800
there will be starting
from a simple question.

82
00:05:04,360 --> 00:05:07,520
Then you once you answer that question,
they will.

83
00:05:07,520 --> 00:05:09,600
The next question
will be from your answer.

84
00:05:10,200 --> 00:05:16,080
So be careful how you explain
to the interviewer your answers.

85
00:05:16,080 --> 00:05:21,360
Don't use terminologies or things
that you guys are not sure about.

86
00:05:21,360 --> 00:05:26,040
Every abstract class should have a method,
but we cannot instantiate it

87
00:05:26,040 --> 00:05:30,440
without creating a subclass.

88
00:05:30,440 --> 00:05:35,280
So abstract classes they are classes
with abstract keyword right

89
00:05:37,240 --> 00:05:38,280
that we can use.

90
00:05:38,280 --> 00:05:40,440
Then we are not sure how to implement

91
00:05:45,160 --> 00:05:47,280
some or all

92
00:05:50,160 --> 00:05:53,280
methods right.

93
00:05:53,280 --> 00:05:58,320
So this is a very simple, difficult

94
00:05:58,400 --> 00:06:00,440
definition of the abstract class. Now

95
00:06:05,200 --> 00:06:07,080
rules, right?

96
00:06:07,080 --> 00:06:10,600
So now tell me about the rules
that you guys remember

97
00:06:10,600 --> 00:06:13,440
about the abstract classes

98
00:06:16,440 --> 00:06:17,040
extend

99
00:06:17,040 --> 00:06:24,120
skyward.

100
00:06:24,120 --> 00:06:27,480
Yes, Alexia, can you try to explain more

101
00:06:30,440 --> 00:06:31,280
extensively

102
00:06:31,280 --> 00:06:34,560
what do you guys mean by extend scalar?

103
00:06:34,560 --> 00:06:36,600
Abstract classes need to have abstract

104
00:06:36,600 --> 00:06:39,760
methods, guys.

105
00:06:40,160 --> 00:06:43,800
So nice saying abstract
classes need to have abstract methods.

106
00:06:44,160 --> 00:06:45,480
Is it true?

107
00:06:45,480 --> 00:06:48,600
Can they have a class and abstract

108
00:06:48,600 --> 00:06:50,760
class without any abstract method

109
00:06:51,800 --> 00:06:54,400
must participate in inheritance

110
00:06:54,400 --> 00:06:59,000
right.

111
00:06:59,000 --> 00:07:01,320
So rule number one

112
00:07:04,720 --> 00:07:06,840
must participate in inheritance.

113
00:07:07,800 --> 00:07:13,000
Otherwise we will not be able

114
00:07:14,400 --> 00:07:16,560
to use any

115
00:07:18,680 --> 00:07:20,640
methods

116
00:07:22,800 --> 00:07:25,440
or any

117
00:07:27,200 --> 00:07:29,840
instance, methods

118
00:07:29,840 --> 00:07:33,840
or peers.

119
00:07:34,520 --> 00:07:39,840
Can I use the static methods
and static fields from abstract classes?

120
00:07:39,840 --> 00:07:43,480
If I don't have that in?

121
00:07:44,160 --> 00:07:49,160
So the inheritance relationship,

122
00:07:49,160 --> 00:07:53,920
if there are some static methods
and static fears inside an abstract class

123
00:07:54,600 --> 00:07:57,240
and I am not making

124
00:07:57,240 --> 00:08:00,200
any other class inherit from that abstract
class,

125
00:08:00,240 --> 00:08:07,200
can I still use those?

126
00:08:07,200 --> 00:08:09,480
Yes, I can use those. Right.

127
00:08:09,480 --> 00:08:11,280
Because abstract matters

128
00:08:12,520 --> 00:08:13,320
and abstract

129
00:08:13,320 --> 00:08:17,320
fears, they don't require
an object of a class, right?

130
00:08:17,320 --> 00:08:19,440
They don't require an object of a class.

131
00:08:20,480 --> 00:08:24,840
So that's why I have only mentioned
about the instance

132
00:08:24,840 --> 00:08:27,640
methods and instance fields in here.

133
00:08:27,840 --> 00:08:30,240
If we are not participating
in inheritance,

134
00:08:30,880 --> 00:08:35,000
we will not be able to use instance
spheres and instance methods.

135
00:08:35,000 --> 00:08:38,160
But still we can use the static fields

136
00:08:38,160 --> 00:08:41,400
and static methods.

137
00:08:41,400 --> 00:08:48,120
Abstract is a non excess modifier
for classes methods, but not variables.

138
00:08:48,120 --> 00:08:50,040
It is used to achieve abstraction.

139
00:08:50,040 --> 00:08:53,080
Yes, if you are perfectly

140
00:08:55,320 --> 00:08:58,520
right, child class
must give the implementation

141
00:08:58,520 --> 00:09:02,280
of abstract methods from after class
if inheriting from that class.

142
00:09:03,360 --> 00:09:08,720
So definition cannot be final. Yes.

143
00:09:09,840 --> 00:09:13,640
So. So second thing

144
00:09:16,560 --> 00:09:18,240
so must participate in inheritance.

145
00:09:18,240 --> 00:09:20,080
Otherwise we will not be able to do

146
00:09:23,800 --> 00:09:26,440
abstract class can

147
00:09:27,400 --> 00:09:29,520
have zero

148
00:09:31,200 --> 00:09:34,080
or any number of

149
00:09:36,160 --> 00:09:37,960
abstract

150
00:09:38,280 --> 00:09:42,720
methods.

151
00:09:42,720 --> 00:09:47,560
As soon as one method of the abstract
de class needs to be declared

152
00:09:47,560 --> 00:09:56,880
as abstract, perfect.

153
00:09:56,880 --> 00:09:59,480
So rule number three

154
00:10:03,680 --> 00:10:07,560
as soon as one method is

155
00:10:09,960 --> 00:10:11,400
declared

156
00:10:13,280 --> 00:10:14,800
its abstract,

157
00:10:14,800 --> 00:10:23,880
the class needs to be declared
as abstract.

158
00:10:23,880 --> 00:10:27,720
We can have non abstract matters as well.

159
00:10:27,720 --> 00:10:42,320
Inside the abstract class, right?

160
00:10:42,320 --> 00:10:47,400
We can declare a class as

161
00:10:49,720 --> 00:10:56,080
class, even

162
00:10:58,320 --> 00:11:01,240
without any

163
00:11:01,600 --> 00:11:11,080
abstract methods.

164
00:11:11,080 --> 00:11:15,880
All right or not,
we find an abstract keyword cannot be used

165
00:11:16,080 --> 00:11:20,520
with fields and constructors not be final.

166
00:11:20,600 --> 00:11:26,880
LSC see cannot be final, a class cannot be
final and abstract at the same time.

167
00:11:26,880 --> 00:11:31,680
This is what you mean.

168
00:11:31,680 --> 00:11:33,320
Okay, please don't do this.

169
00:11:33,320 --> 00:11:37,040
And in your interviews,

170
00:11:37,040 --> 00:11:41,280
if they if they are asking you, define
the abstract class known.

171
00:11:41,280 --> 00:11:44,040
Tell them abstract class

172
00:11:44,920 --> 00:11:47,200
is an abstract class.

173
00:11:47,200 --> 00:11:48,600
Try to explain more

174
00:11:50,920 --> 00:11:53,400
abstract class inheritance,

175
00:11:54,120 --> 00:11:57,760
abstract class final abstract class

176
00:11:58,080 --> 00:12:02,520
not final and abstract.

177
00:12:02,520 --> 00:12:07,320
We need a child class to provide
implementation of abstract class.

178
00:12:08,520 --> 00:12:13,240
Yes, Alexia,
if you are not comfortable with English,

179
00:12:13,480 --> 00:12:17,040
you can type in your native language

180
00:12:23,000 --> 00:12:25,800
is Ukrainian
or what is your native language

181
00:12:25,800 --> 00:12:29,640
cannot make object
of abstract class directly

182
00:12:31,320 --> 00:12:33,600
and we will consider the gap.

183
00:12:33,600 --> 00:12:37,560
So we need egide class to provide

184
00:12:37,560 --> 00:12:41,800
the implementation
of the abstract matters.

185
00:12:42,080 --> 00:12:42,600
Right?

186
00:12:42,600 --> 00:12:43,680
The abstract matters.

187
00:12:43,680 --> 00:12:45,840
Now, can I do this, guys?

188
00:12:45,840 --> 00:12:50,000
Can I have a chart class
which is only providing implementation?

189
00:12:50,000 --> 00:12:51,960
Let's say, let's say my parent class.

190
00:12:51,960 --> 00:12:53,200
Is that an abstract class?

191
00:12:53,200 --> 00:12:57,280
It has been abstract matters
and in the general class

192
00:12:57,280 --> 00:13:00,840
I only want to provide
maybe the implementation for five meters.

193
00:13:00,840 --> 00:13:16,120
Can I do that?

194
00:13:16,120 --> 00:13:18,520
Oh, yes. No. Yes. 5050.

195
00:13:19,080 --> 00:13:21,560
Yes, yes, yes, yes.

196
00:13:21,880 --> 00:13:24,200
But turn it to be abstract, too.

197
00:13:24,360 --> 00:13:29,000
Yes. No.

198
00:13:29,000 --> 00:13:30,840
You just have to make the class.
Absolutely.

199
00:13:30,840 --> 00:13:32,600
Yes, we can do that.

200
00:13:32,600 --> 00:13:35,400
I if I have a parent class

201
00:13:36,120 --> 00:13:38,480
that has been abstract matters

202
00:13:39,240 --> 00:13:42,040
in my child class, I can provide

203
00:13:42,040 --> 00:13:44,680
maybe the implementation for one method,

204
00:13:45,240 --> 00:13:48,240
no matter no, no implementation,
not at all.

205
00:13:48,560 --> 00:13:52,000
On maybe all the implementation
for all the matters.

206
00:13:52,400 --> 00:13:53,320
But in case

207
00:13:54,600 --> 00:13:57,000
if I am not providing implementation

208
00:13:58,800 --> 00:14:02,560
for my one

209
00:14:02,560 --> 00:14:06,600
method, right,
even if there is one single method

210
00:14:06,600 --> 00:14:09,320
for which
I am not providing the implementation

211
00:14:10,320 --> 00:14:15,240
which child class must be declared
as abstract as well?

212
00:14:16,440 --> 00:14:20,400
When we extend an abstract class,
we must either do implementation

213
00:14:20,400 --> 00:14:24,400
of all unimplemented methods
or we must declare that class.

214
00:14:24,400 --> 00:14:30,560
Abstract Also, no, not all the.

215
00:14:31,280 --> 00:14:32,040
Yes, yes, yes.

216
00:14:32,040 --> 00:14:37,480
Actually, actually you are right.

217
00:14:37,480 --> 00:14:41,600
So when we extend an abstract class,

218
00:14:41,600 --> 00:14:45,600
we must either do
the implementation of all.

219
00:14:45,960 --> 00:14:47,320
We must

220
00:14:49,000 --> 00:14:49,640
provide

221
00:14:49,640 --> 00:14:52,560
the implementation
of all unimplemented methods,

222
00:14:53,280 --> 00:14:56,640
or we must declare that child class.

223
00:14:56,640 --> 00:14:57,360
Abstract.

224
00:14:57,360 --> 00:14:59,960
All right. Okay. Perfect.

225
00:15:00,720 --> 00:15:03,160
It rules What else you guys remember?

226
00:15:03,160 --> 00:15:06,320
Can I have constructors
inside of the abstract

227
00:15:06,320 --> 00:15:12,720
classes?

228
00:15:12,720 --> 00:15:14,520
If there is anything else,

229
00:15:15,480 --> 00:15:18,360
you guys can also give me feedback.

230
00:15:18,360 --> 00:15:21,560
Let's say
if you guys want me to go more flow.

231
00:15:22,800 --> 00:15:25,440
I can also do that right if you guys want.

232
00:15:25,480 --> 00:15:27,160
It totally depends on you.

233
00:15:27,160 --> 00:15:35,680
How you guys want to learn.

234
00:15:35,680 --> 00:15:42,000
We can't use abstract class.

235
00:15:42,000 --> 00:15:45,840
Oh, there is someone who can understand

236
00:15:54,960 --> 00:15:57,160
so you can mother

237
00:15:59,000 --> 00:15:59,800
like three.

238
00:15:59,800 --> 00:16:01,280
You are saying you

239
00:16:05,520 --> 00:16:08,520
or it's the Google who is translating.

240
00:16:08,520 --> 00:16:10,720
You do something wrong.

241
00:16:10,920 --> 00:16:14,840
You mean the parent class so you can

242
00:16:15,040 --> 00:16:17,000
like Google.

243
00:16:17,000 --> 00:16:20,720
Not all this model smart

244
00:16:26,480 --> 00:16:30,160
be mother class Google ask bug

245
00:16:30,160 --> 00:16:33,040
if the fashion.

246
00:16:33,040 --> 00:16:35,520
Okay, let's let's not use the class later.

247
00:16:35,920 --> 00:16:39,360
It needs more machine learning

248
00:16:41,640 --> 00:16:44,800
so we can extend only one

249
00:16:44,800 --> 00:16:49,800
abstract class.

250
00:16:49,800 --> 00:16:54,960
Yes, we can actually let
let's put it this way we can extend

251
00:16:56,280 --> 00:17:00,120
only one

252
00:17:00,120 --> 00:17:01,320
class

253
00:17:02,080 --> 00:17:03,640
in Java

254
00:17:04,840 --> 00:17:06,400
abstract

255
00:17:07,000 --> 00:17:21,560
or non.

256
00:17:21,560 --> 00:17:24,320
It's really bad.

257
00:17:24,320 --> 00:17:25,840
You need two tools.

258
00:17:25,840 --> 00:17:37,560
Ukrainian authorities
translating from Russian.

259
00:17:37,560 --> 00:17:39,720
Yes, you can have.

260
00:17:39,720 --> 00:17:41,840
Okay, perfect

261
00:17:44,680 --> 00:17:47,680
can create is equal to non abstract. Yes.

262
00:17:47,680 --> 00:17:52,400
And oh actually
actually let's not put it this way

263
00:17:52,400 --> 00:17:56,080
because there can be
other types of classes as well.

264
00:17:57,520 --> 00:17:59,800
There can be so many things in Java

265
00:18:01,200 --> 00:18:06,000
Anonymous classes in all classes
that big classes I can keep on naming.

266
00:18:06,040 --> 00:18:09,560
I am and I don't even know
how many types of that we have.

267
00:18:09,560 --> 00:18:12,800
In other words, are different
was about to get to

268
00:18:12,800 --> 00:18:18,720
a very wrong way.

269
00:18:18,720 --> 00:18:21,000
Always coming? Yes. Every six months

270
00:18:22,040 --> 00:18:24,160
they have data classes, silly classes

271
00:18:25,200 --> 00:18:26,840
and all that. So

272
00:18:27,280 --> 00:18:29,840
and now they have a release cycle in which

273
00:18:29,840 --> 00:18:33,560
they are losing new things and color
and articulate it.

274
00:18:33,920 --> 00:18:38,480
Not uncle and auntie,
but they are friend classes in C++.

275
00:18:39,120 --> 00:18:42,160
Friend class is going to access
your private members and other.

276
00:18:42,160 --> 00:18:47,400
There is a lot lot lot of story
then all that other programing languages

277
00:19:03,160 --> 00:19:04,600
those brands

278
00:19:09,600 --> 00:19:13,080
so can you please explain rule number nine

279
00:19:16,320 --> 00:19:19,160
or you're about inheritance

280
00:19:19,160 --> 00:19:22,720
it's it's about
I cannot have multiple inheritance in Java

281
00:19:23,760 --> 00:19:27,120
rule number nine you guys remember
there can only be one one

282
00:19:27,120 --> 00:19:30,320
there can only one parent in Java.

283
00:19:31,080 --> 00:19:32,400
It's about that.

284
00:19:32,400 --> 00:19:33,720
The parent can be abstract.

285
00:19:33,720 --> 00:19:36,920
That parent can be non abstract.

286
00:19:37,080 --> 00:19:40,440
I have just written it in a different with

287
00:19:42,400 --> 00:19:44,720
it is clear.

288
00:19:44,720 --> 00:19:55,960
Rule number nine.

289
00:19:55,960 --> 00:20:00,080
Okay, so is there any relative class
who just find out

290
00:20:00,080 --> 00:20:03,760
better than a class
that does not even exist? No.

291
00:20:05,040 --> 00:20:07,080
You have to find your editor on your own.

292
00:20:08,720 --> 00:20:11,600
So then we discussed

293
00:20:11,640 --> 00:20:22,760
about the interfaces, right?

294
00:20:22,760 --> 00:20:25,920
So what is an interface guide

295
00:20:29,720 --> 00:20:32,720
outline for the class for fact?

296
00:20:32,760 --> 00:20:33,680
Perfect.

297
00:20:34,200 --> 00:20:36,640
All right. How how many meters

298
00:20:37,760 --> 00:20:38,160
will a

299
00:20:38,160 --> 00:20:41,520
class
have if that class in that intersect?

300
00:20:41,520 --> 00:20:44,880
So it's kind of an outline blueprint

301
00:20:44,880 --> 00:20:47,520
of a class on.

302
00:20:48,720 --> 00:20:50,400
Yes. You can see it there.

303
00:20:50,400 --> 00:20:51,480
Doesn't

304
00:20:57,720 --> 00:21:00,800
can have only unimplemented methods.

305
00:21:01,000 --> 00:21:05,000
No I, I guess I told you from Java eight

306
00:21:05,080 --> 00:21:07,200
they can have static method

307
00:21:09,480 --> 00:21:10,600
from Java nine.

308
00:21:10,600 --> 00:21:14,880
They can have private matter,
they can have default matters,

309
00:21:15,520 --> 00:21:17,880
They can have so many types
of methods Now,

310
00:21:18,480 --> 00:21:23,320
before Java apps there there
they used to contain

311
00:21:23,320 --> 00:21:25,520
only unimplemented methods.

312
00:21:27,120 --> 00:21:30,920
He has started and abstract mementos

313
00:21:32,160 --> 00:21:34,960
unrelated systems meet.

314
00:21:36,640 --> 00:21:39,080
It can only have abstract methods.

315
00:21:39,080 --> 00:21:39,480
No, no.

316
00:21:39,480 --> 00:21:45,840
It can have many different types
of methods.

317
00:21:45,840 --> 00:21:48,320
You can have many different interfaces.

318
00:21:48,320 --> 00:21:51,640
A collection of public static
final variable and public

319
00:21:51,640 --> 00:21:58,720
abstract methods.

320
00:21:58,720 --> 00:22:01,320
So you guys can start your explanation
from here.

321
00:22:01,320 --> 00:22:04,560
Interface is a collection of public static
final variables and public

322
00:22:04,560 --> 00:22:09,600
static methods.

323
00:22:09,600 --> 00:22:11,400
Here's a

324
00:22:12,360 --> 00:22:14,160
contract

325
00:22:14,360 --> 00:22:17,760
that a class has to

326
00:22:18,800 --> 00:22:20,360
implement.

327
00:22:21,000 --> 00:22:30,080
It's the public static final variable.

328
00:22:30,080 --> 00:22:35,480
This is put up and public abstract
methods, plus

329
00:22:37,240 --> 00:22:39,440
a static

330
00:22:39,480 --> 00:22:41,880
default and

331
00:22:41,880 --> 00:22:44,800
private methods

332
00:22:45,040 --> 00:22:48,600
from Java eight and nine.

333
00:22:49,160 --> 00:22:53,160
So you guys can add this as well.

334
00:22:53,160 --> 00:22:57,560
And most probably be
and most probably your interviewer.

335
00:22:57,560 --> 00:23:00,320
They will be surprised

336
00:23:00,440 --> 00:23:05,200
to know that that you guys know
that there are, there are private

337
00:23:05,200 --> 00:23:09,640
methods as well in interfaces
because believe me in the industry,

338
00:23:10,680 --> 00:23:14,160
they, they just keep
on using the old technologies.

339
00:23:14,160 --> 00:23:17,640
They don't even know
if there is something that is introduced

340
00:23:18,840 --> 00:23:20,960
in languages.

341
00:23:21,080 --> 00:23:22,560
So I'm

342
00:23:25,200 --> 00:23:25,920
interface

343
00:23:25,920 --> 00:23:28,800
have only static final or default methods

344
00:23:29,720 --> 00:23:32,120
and they can have private
as well from java nine

345
00:23:32,760 --> 00:23:35,040
and God knows what from Java

346
00:23:35,680 --> 00:23:39,400
16 or 17 interface is an abstract

347
00:23:40,440 --> 00:23:43,200
used to declare. So

348
00:23:45,360 --> 00:23:49,000
every interface in Java
by default is an abstract class,

349
00:23:49,280 --> 00:23:52,080
but is an abstract class.

350
00:23:52,080 --> 00:23:54,120
We are not supposed to write abstract.

351
00:23:54,120 --> 00:23:56,520
You work with interface.

352
00:23:56,520 --> 00:24:00,240
It's not an abstract class of the

353
00:24:00,240 --> 00:24:03,120
every interfacing
Java by default is abstract.

354
00:24:03,120 --> 00:24:04,840
You can say that

355
00:24:05,240 --> 00:24:07,280
they don't don't use this class schema

356
00:24:07,920 --> 00:24:12,440
interface cannot be extended by class
but implemented by a class.

357
00:24:13,040 --> 00:24:16,640
All right, so let's discuss the rules

358
00:24:17,280 --> 00:24:19,120
for the interface

359
00:24:22,160 --> 00:24:26,000
so the famous rule can only have

360
00:24:27,360 --> 00:24:28,920
public

361
00:24:30,120 --> 00:24:30,640
spare.

362
00:24:30,640 --> 00:24:32,960
The final feels right?

363
00:24:33,000 --> 00:24:38,240
No instance fears,
no private fears and no protected fields.

364
00:24:38,280 --> 00:24:41,280
Nothing. Only public static final fields.

365
00:24:41,280 --> 00:24:44,760
Right.

366
00:24:44,760 --> 00:24:45,840
Can interfaces?

367
00:24:45,840 --> 00:24:56,320
Can they have constructors?

368
00:24:56,320 --> 00:25:00,680
So as there are no

369
00:25:01,720 --> 00:25:03,640
instance

370
00:25:04,000 --> 00:25:06,040
fields in

371
00:25:06,200 --> 00:25:08,040
interfaces?

372
00:25:08,280 --> 00:25:14,400
Yes. They don't have

373
00:25:17,760 --> 00:25:19,680
constructors as well.

374
00:25:20,760 --> 00:25:22,920
Okay.

375
00:25:22,920 --> 00:25:23,640
All right.

376
00:25:23,640 --> 00:25:28,720
So if they don't have constructors,
can I create an object

377
00:25:28,720 --> 00:25:43,080
of an interface? Yes.

378
00:25:44,760 --> 00:25:47,720
So urban,
we can create an object of interface.

379
00:25:47,720 --> 00:25:49,840
We cannot create

380
00:25:52,880 --> 00:25:55,720
objects or interfaces

381
00:25:56,680 --> 00:25:59,280
because they can have

382
00:26:01,320 --> 00:26:03,720
an implemented

383
00:26:06,120 --> 00:26:07,520
desired is the same story

384
00:26:07,520 --> 00:26:10,560
that is with the abstract classes.

385
00:26:10,800 --> 00:26:13,720
If there are unimplemented matters,

386
00:26:14,760 --> 00:26:19,920
then and you are allowed to create
the object, then there can be a problem.

387
00:26:19,920 --> 00:26:20,680
Right?

388
00:26:20,680 --> 00:26:24,200
If someone or someone tries
to call and unimplemented

389
00:26:24,200 --> 00:26:27,040
method,
it will not know which method to call,

390
00:26:28,200 --> 00:26:29,760
which method to call. Right.

391
00:26:29,760 --> 00:26:32,400
Because it's something incomplete, right?

392
00:26:32,400 --> 00:26:33,600
Incomplete. Sorry.

393
00:26:33,600 --> 00:26:35,880
So let's say, for example, it's a card

394
00:26:35,880 --> 00:26:39,400
that has only maybe the Indian
and there are no tiles, Right.

395
00:26:39,560 --> 00:26:42,920
So can you drive that car
or you should you be driving that God

396
00:26:44,120 --> 00:26:45,280
is about.

397
00:26:45,280 --> 00:26:48,800
It's like any anything that is incomplete.

398
00:26:48,800 --> 00:26:52,720
You think of mobile phones, maybe
the mobile phone does not have batteries,

399
00:26:52,720 --> 00:26:56,280
maybe it does not have implementation
of how to make calls,

400
00:26:56,280 --> 00:26:59,160
how to send text messages,
how to use Internet.

401
00:26:59,560 --> 00:27:01,040
Should you be allowed to use that?

402
00:27:01,040 --> 00:27:04,840
No, because it be misbehave
or the user will be at least frustrated.

403
00:27:04,840 --> 00:27:05,440
Right.

404
00:27:06,080 --> 00:27:10,080
So in real life as well,
if something is incomplete.

405
00:27:10,080 --> 00:27:10,760
Right.

406
00:27:10,760 --> 00:27:14,720
If if something is incomplete,
you should not be using that thing.

407
00:27:14,760 --> 00:27:15,280
Right.

408
00:27:15,600 --> 00:27:19,040
So that's why these these classes

409
00:27:19,040 --> 00:27:22,640
and these interfaces,
they are not allowed to have objects.

410
00:27:22,640 --> 00:27:23,080
Right.

411
00:27:23,080 --> 00:27:27,680
Because if once you have the object,
what if you try to call some matters

412
00:27:27,720 --> 00:27:30,880
which you do not have
body so it can be a problem.

413
00:27:32,800 --> 00:27:33,360
All right, guys,

414
00:27:33,360 --> 00:27:36,560
what else
do you remember about the interfaces

415
00:27:36,560 --> 00:27:40,680
you could use to achieve loose coupling?

416
00:27:40,680 --> 00:27:44,040
Rule cannot extend to a class.

417
00:27:45,080 --> 00:27:50,360
So it a class then. Now

418
00:27:51,920 --> 00:27:56,280
extend an interface right

419
00:27:58,360 --> 00:27:59,400
again.

420
00:27:59,520 --> 00:28:00,600
Again

421
00:28:01,440 --> 00:28:02,880
and interface.

422
00:28:02,880 --> 00:28:11,000
Extend and other interface guys.

423
00:28:11,000 --> 00:28:13,400
But it is

424
00:28:13,920 --> 00:28:16,960
implemented by

425
00:28:17,880 --> 00:28:18,840
a class.

426
00:28:18,840 --> 00:28:22,080
Instead of extending, we will implement

427
00:28:22,080 --> 00:28:24,640
the interfaces

428
00:28:25,680 --> 00:28:31,720
so an interface can

429
00:28:32,880 --> 00:28:34,880
extend it.

430
00:28:35,560 --> 00:28:37,160
And another

431
00:28:37,920 --> 00:28:39,360
interface

432
00:28:39,960 --> 00:28:42,360
and interfaces can

433
00:28:42,360 --> 00:28:45,120
they have multiple inheritance

434
00:28:47,240 --> 00:28:49,920
in interface
can extend multiple interfaces

435
00:28:49,920 --> 00:28:52,600
between interfaces for multiple

436
00:28:54,040 --> 00:28:56,160
inheritance. Yes.

437
00:28:56,160 --> 00:28:59,120
You're correct. So

438
00:29:03,480 --> 00:29:06,560
an interface can extend
multiple interfaces.

439
00:29:06,560 --> 00:29:13,160
It means interface board, multiple

440
00:29:13,560 --> 00:29:21,280
inheritance, right.

441
00:29:21,280 --> 00:29:25,960
There is the use are.

442
00:29:25,960 --> 00:29:31,160
No, not quite because there are so many
other uses of the interfaces as well.

443
00:29:31,640 --> 00:29:33,960
So if you are looking to the JDK,

444
00:29:34,400 --> 00:29:38,800
you guys will find
if there is only one method

445
00:29:38,800 --> 00:29:44,440
or only two methods are there
that are unrelated to each other selector.

446
00:29:44,440 --> 00:29:48,360
For example, there are multiple classes
which are not related to each other

447
00:29:48,360 --> 00:29:49,600
in any way.

448
00:29:49,600 --> 00:29:53,520
For example, a laptop class
is not related to a class, right?

449
00:29:53,600 --> 00:29:56,120
There are no attributes which are

450
00:29:56,120 --> 00:29:59,400
common or not that many attributes
which are common.

451
00:29:59,400 --> 00:30:04,000
So what you guys can do
instead of creating a parent class

452
00:30:04,000 --> 00:30:08,080
and putting the common features
inside that parent class, you go for the

453
00:30:08,080 --> 00:30:12,520
interfaces, you create an interface,
you do find the common methods in there,

454
00:30:13,800 --> 00:30:14,800
and then

455
00:30:14,800 --> 00:30:18,600
you make those child classes
implement those methods.

456
00:30:18,600 --> 00:30:24,080
So if you do classes on and they are
related, you go with a parent class.

457
00:30:24,080 --> 00:30:28,360
If two classes are not related
to each other, you go with an interface.

458
00:30:28,760 --> 00:30:31,440
Can you show an example of rule
five and six?

459
00:30:32,200 --> 00:30:36,040
And interface
cannot extend another interface or.

460
00:30:36,040 --> 00:30:38,280
Yes, it's very simple.

461
00:30:38,280 --> 00:30:49,360
For example, if we saw this

462
00:30:49,360 --> 00:30:52,200
rule five, it's saying that

463
00:30:52,800 --> 00:30:56,440
if it class instead of implementation,

464
00:30:56,440 --> 00:31:00,360
if it says expense,
you will be getting an error.

465
00:31:00,360 --> 00:31:02,960
This is a rule five, this is rule five.

466
00:31:03,400 --> 00:31:07,560
With classes and interfaces,
we don't use the expense.

467
00:31:08,040 --> 00:31:10,800
Whether we use the implements

468
00:31:10,800 --> 00:31:11,880
to fight

469
00:31:12,480 --> 00:31:17,600
and the next one was an interface
connection

470
00:31:17,600 --> 00:31:19,680
to multiple interfaces or this one.

471
00:31:20,640 --> 00:31:23,240
So I think in the example three would this

472
00:31:27,880 --> 00:31:32,880
now in we go

473
00:31:33,600 --> 00:31:37,080
this class is implementing
multiple interfaces.

474
00:31:37,240 --> 00:31:37,720
Okay.

475
00:31:38,680 --> 00:31:40,360
More than one.

476
00:31:40,360 --> 00:31:43,760
And there was another example
I guess this one

477
00:31:48,240 --> 00:31:49,200
in which one

478
00:31:49,200 --> 00:31:53,760
interface, this interface syntax employed
was extending

479
00:31:53,760 --> 00:31:57,600
from multiple interfaces.

480
00:31:57,600 --> 00:32:01,560
So that's how the multiple
inheritance is allowed.

481
00:32:01,560 --> 00:32:04,000
Can you guys tell me which shorter
time using right now?

482
00:32:04,360 --> 00:32:07,320
So I am switching back and forth
between the files

483
00:32:11,000 --> 00:32:12,600
and is your

484
00:32:12,960 --> 00:32:15,040
paper model working now or you're still

485
00:32:15,040 --> 00:32:18,880
misbehaving?

486
00:32:18,880 --> 00:32:25,640
So it's control plus tab.

487
00:32:25,640 --> 00:32:28,800
What are the differences
between externals and implements?

488
00:32:28,800 --> 00:32:30,600
Can you explain one more time?

489
00:32:30,600 --> 00:32:33,840
The only difference is that with classes
we use the extent.

490
00:32:33,840 --> 00:32:36,360
With interfaces, we use implements.

491
00:32:36,360 --> 00:32:41,960
When we need to use an interface,
we should be using the interfaces

492
00:32:42,480 --> 00:32:47,840
when there are two unrelated classes
which have something in common.

493
00:32:48,480 --> 00:32:49,600
Mine is working.

494
00:32:49,600 --> 00:32:52,840
I am not using it like an eclipse.

495
00:32:52,840 --> 00:32:54,240
Like an eclipse.

496
00:32:54,240 --> 00:32:54,840
What do you mean?

497
00:32:54,840 --> 00:32:58,680
Someone like an eclipse?

498
00:32:58,680 --> 00:33:05,920
What?

499
00:33:05,920 --> 00:33:07,400
Switching tabs? Yes.

500
00:33:08,920 --> 00:33:11,080
All right. And

501
00:33:11,320 --> 00:33:13,080
what else do you remember
about the interface?

502
00:33:13,080 --> 00:33:17,120
You guys?

503
00:33:17,120 --> 00:33:17,600
Well,

504
00:33:18,440 --> 00:33:20,160
all variables are final.

505
00:33:20,160 --> 00:33:21,760
Yes, Yes, we.

506
00:33:21,760 --> 00:33:30,240
We have our ribbon in here.

507
00:33:30,240 --> 00:33:32,440
All right,
You guys don't remember anything else?

508
00:33:33,760 --> 00:33:36,160
I also don't remember anything else.

509
00:33:36,160 --> 00:33:44,440
So let's discuss about the encapsulation
that.

510
00:33:44,440 --> 00:33:45,400
So what?

511
00:33:45,400 --> 00:33:48,120
What is encapsulation, guys

512
00:33:59,160 --> 00:34:00,200
are doing that

513
00:34:00,200 --> 00:34:03,360
encapsulation is using that variable
sphere

514
00:34:03,920 --> 00:34:07,720
and board matters together
as a single unit.

515
00:34:07,800 --> 00:34:08,480
Perfect.

516
00:34:08,480 --> 00:34:14,440
Perfect.

517
00:34:14,440 --> 00:34:17,520
So can you guys tell me where we are?

518
00:34:17,520 --> 00:34:21,320
This encapsulation Also, you guys
have been doing this encapsulation

519
00:34:21,320 --> 00:34:22,440
all the time.

520
00:34:22,440 --> 00:34:25,400
Can you guys tell me how you guys
were doing encapsulation

521
00:34:25,400 --> 00:34:29,840
all the time?

522
00:34:29,840 --> 00:34:32,000
Main method

523
00:34:33,680 --> 00:34:35,040
storing and giving

524
00:34:35,040 --> 00:34:37,640
combined variable
and methods for a single content.

525
00:34:38,080 --> 00:34:43,880
So what is it called in Java?

526
00:34:43,880 --> 00:34:46,080
What is what is it called?

527
00:34:46,080 --> 00:34:48,920
Endo It's called creating a class, right?

528
00:34:48,920 --> 00:34:49,960
It's a class.

529
00:34:49,960 --> 00:34:53,360
Class has the meters and

530
00:34:54,640 --> 00:34:56,160
and variables, right?

531
00:34:56,160 --> 00:35:00,640
So whenever we create a class,
we are actually using encapsulation,

532
00:35:00,640 --> 00:35:01,280
right?

533
00:35:01,760 --> 00:35:03,360
And more

534
00:35:03,800 --> 00:35:07,800
refined implementation of this
encapsulation is when we make our fields

535
00:35:07,800 --> 00:35:11,440
private and have getters and setters

536
00:35:11,880 --> 00:35:15,120
for those fields. So

537
00:35:17,560 --> 00:35:19,320
yes, yes,

538
00:35:19,320 --> 00:35:24,680
you are right.

539
00:35:24,680 --> 00:35:26,880
So be it.

540
00:35:26,880 --> 00:35:29,000
Your fears

541
00:35:30,880 --> 00:35:34,240
private and

542
00:35:34,240 --> 00:35:36,400
make getter

543
00:35:37,400 --> 00:35:39,840
start the methods to

544
00:35:41,600 --> 00:35:44,480
access those fields.

545
00:35:44,800 --> 00:35:47,480
So the last task in your

546
00:35:49,160 --> 00:35:52,320
in last week
when I shared the task the last task

547
00:35:52,880 --> 00:35:56,000
in the list of task was about

548
00:35:56,000 --> 00:35:57,360
encapsulation. Right?

549
00:35:57,360 --> 00:36:02,320
You guys created both email method
and then all the fields were private.

550
00:36:02,320 --> 00:36:05,760
And then you guys said
the value of using those methods

551
00:36:06,000 --> 00:36:11,200
and you guys tell me,
what are these getter setter methods?

552
00:36:11,200 --> 00:36:14,520
Yes, getter and setter to access
and update

553
00:36:14,520 --> 00:36:25,560
the value of their private.

554
00:36:25,560 --> 00:36:26,840
So there are certain methods

555
00:36:30,840 --> 00:36:31,800
we use to

556
00:36:31,800 --> 00:36:34,160
access and update the value of a private.

557
00:36:35,600 --> 00:36:38,040
Is there anything else
which is confusing you

558
00:36:38,040 --> 00:36:41,600
or if you guys want me to ask
before we start the

559
00:36:43,080 --> 00:36:45,080
project, ask

560
00:37:20,160 --> 00:37:23,160
today we will do project of Yes.

561
00:37:23,560 --> 00:37:26,680
You guys don't want to do them.

562
00:37:26,680 --> 00:37:27,120
By the way.

563
00:37:27,120 --> 00:37:29,680
How log the task were easy or hard.

564
00:37:30,840 --> 00:37:34,560
We used encapsulation for control of class
attributes and method.

565
00:37:34,560 --> 00:37:38,840
Yes, you are right.

566
00:37:38,840 --> 00:37:41,040
Yes, we can do them.

567
00:37:41,040 --> 00:37:43,280
Okay, My Highness, let me.

568
00:37:44,200 --> 00:37:47,480
Let me do the doc

569
00:37:47,520 --> 00:37:48,600
moment

570
00:38:01,800 --> 00:38:02,760
in the

571
00:38:07,080 --> 00:38:07,360
create

572
00:38:07,360 --> 00:38:14,280
a new package.

573
00:38:14,280 --> 00:38:14,920
Okay.

574
00:38:14,960 --> 00:38:19,400
We did them all and push them
to create co-branded non fourth dimension

575
00:38:19,680 --> 00:38:23,240
because you told us not to

576
00:38:24,480 --> 00:38:25,400
group.

577
00:38:26,760 --> 00:38:27,760
Okay, that's great.

578
00:38:27,760 --> 00:38:29,800
So now you guys can compare this solution.

579
00:38:29,800 --> 00:38:34,440
A reminder to go over the
specific steps in account so

580
00:38:36,400 --> 00:38:37,920
again, I mean,

581
00:38:37,920 --> 00:38:41,440
I was surprised why it has confused you.

582
00:38:41,880 --> 00:38:44,520
So it was somewhere here.

583
00:38:45,000 --> 00:38:53,720
Let me check with the class.

584
00:38:53,720 --> 00:38:55,360
So it's a contest.

585
00:38:55,360 --> 00:38:59,640
All right. We

586
00:39:00,880 --> 00:39:03,280
So can you tell me now
what was confusing you?

587
00:39:03,280 --> 00:39:05,920
Because it's really be
super clear in here.

588
00:39:06,720 --> 00:39:09,240
But we are doing on line

589
00:39:09,240 --> 00:39:12,120
five, we are creating an object.

590
00:39:12,720 --> 00:39:18,120
Then I am calling this segment third,

591
00:39:18,120 --> 00:39:21,520
who set the value

592
00:39:22,640 --> 00:39:25,320
of this name field.

593
00:39:25,320 --> 00:39:29,320
And then here I am
calling to get my third value.

594
00:39:29,320 --> 00:39:33,240
Now, if you are not setting the value
first

595
00:39:33,960 --> 00:39:37,800
and try to access the value,
you will be getting a null.

596
00:39:38,480 --> 00:39:42,240
So it makes sense
to first certainly values

597
00:39:42,720 --> 00:39:46,160
and then all the getter matters
to get P values.

598
00:39:47,040 --> 00:39:50,080
This is what will last this confusing you

599
00:39:50,280 --> 00:39:53,160
and we please do one more example of later
seconds.

600
00:39:53,160 --> 00:39:59,640
Yes, we will be doing another example.

601
00:39:59,640 --> 00:40:02,880
So this is how we
we should call it in the same sequence

602
00:40:02,880 --> 00:40:08,920
in which I have written in here.

603
00:40:08,920 --> 00:40:11,400
It was the two constructor.

604
00:40:12,240 --> 00:40:15,640
This one.

605
00:40:15,640 --> 00:40:19,760
Okay, so if you have multiple constructors

606
00:40:20,120 --> 00:40:24,560
in a class,
that means who whoever has created

607
00:40:24,640 --> 00:40:31,800
this class is giving you the flexibility
that you can create an object

608
00:40:31,800 --> 00:40:35,000
without forcing
any data to the constructor.

609
00:40:35,360 --> 00:40:37,640
Or if you know

610
00:40:38,000 --> 00:40:42,600
about all the fields
that are present inside the class.

611
00:40:43,040 --> 00:40:46,320
If you want to initialize all the fields

612
00:40:46,600 --> 00:40:49,920
of this account class, then you should be
calling the other constructor.

613
00:40:50,440 --> 00:40:54,320
So it depends on you
how you want to create an object,

614
00:40:54,320 --> 00:41:00,400
passing all the values
or without putting all the values, almost

615
00:41:00,600 --> 00:41:04,560
all the classes in Java, they will be
giving you this function flexibility.

616
00:41:06,000 --> 00:41:08,040
Create an object by passing.

617
00:41:08,120 --> 00:41:11,320
I think confused
because you tried to first get turned off

618
00:41:11,320 --> 00:41:14,400
and then drive to set.

619
00:41:14,400 --> 00:41:16,680
No certain is first O in here.

620
00:41:16,800 --> 00:41:17,960
In here.

621
00:41:18,360 --> 00:41:21,600
So in here the sequence does not matter.

622
00:41:21,600 --> 00:41:22,640
I can buy etc.

623
00:41:22,640 --> 00:41:25,400
First I can try to get the sequence
does not matter,

624
00:41:26,480 --> 00:41:28,440
the sequence matters.

625
00:41:28,440 --> 00:41:30,720
Funny, when we are calling,

626
00:41:31,920 --> 00:41:34,960
the sequence matters
when we are inside the method.

627
00:41:35,360 --> 00:41:39,400
Let me put this in sequence matters
when we are inside.

628
00:41:39,960 --> 00:41:41,400
This method can mean method.

629
00:41:41,400 --> 00:41:43,600
This method can be a construct.

630
00:41:43,600 --> 00:41:45,360
This this can be a method.

631
00:41:45,360 --> 00:41:48,440
Sets the sequence methods
when we are inside the method.

632
00:41:48,760 --> 00:41:52,080
When we are inside a class,

633
00:41:52,080 --> 00:41:54,560
I can define these fears at the bottom.

634
00:41:54,560 --> 00:41:56,760
I can define this method in here.

635
00:41:56,760 --> 00:41:58,440
In here the sequence does not matter.

636
00:41:59,400 --> 00:42:00,480
We are now

637
00:42:07,960 --> 00:42:14,360
well clear.

638
00:42:14,360 --> 00:42:25,200
Is there anyone else
we have confused about anything? Yes.

639
00:42:25,200 --> 00:42:26,840
We will be doing a lot of examples.

640
00:42:26,840 --> 00:42:28,920
Don't worry about that

641
00:42:31,080 --> 00:42:38,280
then if you are also confused.

642
00:42:38,280 --> 00:42:42,000
I am a bit confused about all the Java
that we have learned

643
00:42:42,360 --> 00:42:44,480
from the day one and now

644
00:42:45,760 --> 00:42:54,520
only a little confused right.

645
00:42:54,520 --> 00:42:55,320
Okay. Don't worry.

646
00:42:55,320 --> 00:43:00,280
I am also confused
about so many things in Java. Yes.

647
00:43:00,280 --> 00:43:05,600
Can we start over again?

648
00:43:05,600 --> 00:43:08,720
It will take years to understand
all the concepts.

649
00:43:08,720 --> 00:43:09,000
Okay.

650
00:43:09,000 --> 00:43:13,720
It's not something that is learned over
our months or something like that.

651
00:43:14,040 --> 00:43:17,760
So still I am looking for the answers
for some things.

652
00:43:17,760 --> 00:43:19,320
I still don't know the answers.

653
00:43:19,320 --> 00:43:23,440
I do a lot of research, read
a lot of blogs.

654
00:43:23,440 --> 00:43:25,680
Why double guides
have created some things.

655
00:43:26,640 --> 00:43:27,280
Many things.

656
00:43:27,280 --> 00:43:31,920
Looks very strange to me, so I have to
do a lot of research and then I find it.

657
00:43:31,920 --> 00:43:32,600
And so

658
00:43:34,200 --> 00:43:37,200
you guys don't need to know everything to
to code.

659
00:43:37,280 --> 00:43:40,120
If something is working,
you, you just don't. Bastard.

660
00:43:40,160 --> 00:43:41,120
Copy paste time.

661
00:43:41,120 --> 00:43:43,240
This is the first rule of program.

662
00:43:43,240 --> 00:43:45,440
Do you guys know the first rule
of programing today?

663
00:43:45,440 --> 00:43:52,240
So you would be first rule
of programing? No.

664
00:43:52,480 --> 00:43:54,280
Oh my God.

665
00:43:54,280 --> 00:43:58,120
You guys don't know the first rule

666
00:44:10,240 --> 00:44:12,160
of being a rule.

667
00:44:12,200 --> 00:44:21,080
So this is the first rule of programing.

668
00:44:21,080 --> 00:44:23,640
If something is working,

669
00:44:23,880 --> 00:44:25,560
don't let it in.

670
00:44:25,560 --> 00:44:30,080
Whichever way someone has written
that code, whether it is

671
00:44:30,080 --> 00:44:32,960
walking by legs or whatever.

672
00:44:33,320 --> 00:44:35,440
Yes, don't try to use it.

673
00:44:35,440 --> 00:44:36,560
And then

674
00:44:47,960 --> 00:44:51,080
we can state
apply to p m position to any company.

675
00:44:52,200 --> 00:44:52,920
You mean the Prime

676
00:44:52,920 --> 00:45:00,440
Minister position? Yes.

677
00:45:00,520 --> 00:45:02,760
You can be a prime Minister
after the need.

678
00:45:02,760 --> 00:45:09,240
Never.

679
00:45:09,240 --> 00:45:12,160
Project manager. Ah, I don't think so.

680
00:45:12,320 --> 00:45:16,680
I think you should spend
like four six months in a company

681
00:45:17,000 --> 00:45:20,480
first to check out how things work,
and then maybe

682
00:45:20,480 --> 00:45:23,240
you can be a good product manager
or a project manager.

683
00:45:23,880 --> 00:45:53,120
In my opinion, the parts of the company,

684
00:45:53,120 --> 00:46:01,680
the programmers.

685
00:46:01,680 --> 00:46:07,120
Okay,
so the first task was to create a shape

686
00:46:07,120 --> 00:46:09,600
interface. I

687
00:46:38,080 --> 00:46:39,560
And are you guys

688
00:46:39,560 --> 00:46:49,680
also done uploading your videos?

689
00:46:49,680 --> 00:46:55,720
Not yet.

690
00:46:55,720 --> 00:46:59,160
I will do it during break.

691
00:46:59,160 --> 00:47:00,720
I have one request for

692
00:47:00,720 --> 00:47:02,840
for ladies it can you.

693
00:47:03,920 --> 00:47:06,960
I don't know why you guys looked
so different in pictures.

694
00:47:06,960 --> 00:47:11,960
And when I see you in your real videos,
literally I am unable to identify

695
00:47:12,000 --> 00:47:15,720
many of you.

696
00:47:15,720 --> 00:47:18,960
So can you please try to look see

697
00:47:19,920 --> 00:47:24,320
even me?

698
00:47:24,320 --> 00:47:26,800
I don't know what kind of magic
you guys use.

699
00:47:27,280 --> 00:47:31,520
The power make of it. Yes.

700
00:47:31,520 --> 00:47:38,840
Can you guys please?

701
00:47:38,840 --> 00:47:41,280
We are widening one of our preventers.

702
00:47:41,280 --> 00:47:50,920
Either
get good look, identify who they are.

703
00:47:50,920 --> 00:47:54,520
So I was just kidding.
I hope you guys are.

704
00:47:54,560 --> 00:48:00,120
Have introduce yourself
before the before the before you.

705
00:48:00,120 --> 00:48:01,920
Start explaining.

706
00:48:02,120 --> 00:48:04,240
I will indicate that we would like

707
00:48:07,160 --> 00:48:09,440
to create an interface shape

708
00:48:10,680 --> 00:48:14,520
with undefined methods as calculate area.

709
00:48:14,600 --> 00:48:15,560
Right.

710
00:48:16,000 --> 00:48:19,520
So I i during class

711
00:48:19,520 --> 00:48:21,720
we are all tired and never look more

712
00:48:23,280 --> 00:48:27,360
so I see

713
00:48:31,800 --> 00:48:34,400
calculate area and calculate parameter

714
00:48:34,440 --> 00:48:37,680
be two classes that we implement
functionality defining shape.

715
00:48:38,520 --> 00:48:38,760
Okay.

716
00:48:38,760 --> 00:48:43,280
So did you guys created the wide matters
or the matters

717
00:48:43,280 --> 00:48:45,880
that that done something

718
00:48:49,920 --> 00:48:52,840
so both of them are correct
if you guys created wide there

719
00:48:52,920 --> 00:48:55,920
also good if you guys are
going to create a wide X also

720
00:48:57,720 --> 00:48:59,960
so calculate area

721
00:49:01,240 --> 00:49:03,360
and did you guys boss any parameters

722
00:49:03,600 --> 00:49:07,520
if you want to see us the same way
we are on our profile pictures anyway.

723
00:49:07,840 --> 00:49:10,800
Invite us to party, not to go to project.

724
00:49:12,040 --> 00:49:13,800
Oh, I thought there are two ladies.

725
00:49:13,800 --> 00:49:14,480
They are.

726
00:49:14,480 --> 00:49:19,840
They never want to look bad in any picture
or in any video or anything like that.

727
00:49:19,920 --> 00:49:23,680
I in my opinion,
I think the ladies, they are always they

728
00:49:23,760 --> 00:49:27,240
they want to be on top of that in that
they'll always want to look good,

729
00:49:27,960 --> 00:49:30,040
not in all cases,

730
00:49:30,480 --> 00:49:32,160
especially when when they are presenting.

731
00:49:32,160 --> 00:49:33,760
Not anymore.

732
00:49:33,840 --> 00:49:40,440
My God. So.

733
00:49:40,440 --> 00:49:42,480
So let's use a double.

734
00:49:43,520 --> 00:49:46,320
Did you check Sebastian
profile picture? Yes.

735
00:49:46,320 --> 00:49:55,560
Did. Oh, well, why?

736
00:49:55,560 --> 00:49:58,480
I'm getting an error, guys.

737
00:49:58,480 --> 00:50:01,160
Not roster for me. Sebastian,
this is not fair.

738
00:50:01,160 --> 00:50:15,120
I love rosters, no implementation.

739
00:50:15,120 --> 00:50:17,640
So inside the interface

740
00:50:18,280 --> 00:50:23,400
I cannot have an instance
method with the body guard.

741
00:50:23,760 --> 00:50:26,720
So I must remove that in here.

742
00:50:26,760 --> 00:50:28,600
Right. So I should.

743
00:50:28,600 --> 00:50:28,880
Okay.

744
00:50:28,880 --> 00:50:30,360
Can I put private in here?

745
00:50:30,360 --> 00:50:32,680
Guys, can I clear this method as private

746
00:50:36,480 --> 00:50:38,640
or. I also used to have that roster,

747
00:50:38,640 --> 00:50:43,400
but I don't know where it has gone off
without parameters also.

748
00:50:43,400 --> 00:50:45,840
Okay.

749
00:50:45,840 --> 00:50:49,440
No, without parameters
then how you guys will be able to pick.

750
00:50:49,760 --> 00:50:53,760
So all the formula, like for example,
to calculate the area

751
00:50:53,800 --> 00:50:57,680
parameter,
you need some kind of input, right?

752
00:50:58,080 --> 00:51:02,680
So how you guys have passed that input,
if you guys didn't create these parameters

753
00:51:02,680 --> 00:51:08,360
in here,

754
00:51:08,360 --> 00:51:11,280
okay, I will request
more them to not eat it alone.

755
00:51:12,080 --> 00:51:13,280
Invite me as well.

756
00:51:13,280 --> 00:51:15,720
Did anyone have experience? Why?

757
00:51:16,480 --> 00:51:20,280
They showed different pictures,
but if you meet them in person for coffee

758
00:51:20,280 --> 00:51:24,240
or something with you
never being expected,

759
00:51:24,240 --> 00:51:27,960
something like that.

760
00:51:27,960 --> 00:51:31,200
All you have to do to the values
hard coding is

761
00:51:31,320 --> 00:51:34,800
is never a good idea
then is always always.

762
00:51:34,800 --> 00:51:38,680
Try to write genetic code
that can work with any type of input.

763
00:51:38,760 --> 00:51:43,840
It will always be a better piece of code.

764
00:51:43,840 --> 00:51:46,320
Okay, so can I put private in here, guys?

765
00:51:46,600 --> 00:51:48,560
Can I. Can I make this method private?

766
00:51:49,960 --> 00:51:54,120
Can I make it protected?

767
00:51:54,120 --> 00:51:58,800
Can I make it public?

768
00:51:58,800 --> 00:52:06,840
Can I make it public?

769
00:52:06,840 --> 00:52:09,880
So yes, it is

770
00:52:09,880 --> 00:52:11,120
already public.

771
00:52:11,120 --> 00:52:12,360
Okay. It is already public.

772
00:52:12,360 --> 00:52:16,480
So we're going to do that.

773
00:52:16,480 --> 00:52:17,000
All right.

774
00:52:17,000 --> 00:52:20,000
So calculate area and then define

775
00:52:20,000 --> 00:52:23,560
calculate parameter as

776
00:52:23,560 --> 00:52:27,440
the void, calculate parameter,

777
00:52:28,960 --> 00:52:30,360
and then

778
00:52:30,920 --> 00:52:33,840
double it.

779
00:52:36,160 --> 00:52:38,640
So then create two classes

780
00:52:38,960 --> 00:52:44,120
that will implement functionality
defined in shape interface.

781
00:52:44,120 --> 00:52:45,960
Test your goal.

782
00:52:45,960 --> 00:52:49,200
Okay, So oops,

783
00:52:49,960 --> 00:52:53,600
let me create maybe a circle class.

784
00:52:54,040 --> 00:52:56,280
So class

785
00:52:56,440 --> 00:52:58,600
circle

786
00:53:03,000 --> 00:53:05,400
which keyword
I should use to implement this interface.

787
00:53:05,400 --> 00:53:13,960
Guys, the implements, right?

788
00:53:14,360 --> 00:53:18,840
We don't use the extended keyword in here
and then I add I shape

789
00:53:19,880 --> 00:53:22,200
and now I get error.

790
00:53:22,320 --> 00:53:23,160
Right? Why?

791
00:53:23,160 --> 00:53:26,360
I get error because I must implement

792
00:53:26,600 --> 00:53:29,640
the methods.

793
00:53:29,640 --> 00:53:32,920
Yeah. So I have pressed all plus enter

794
00:53:34,320 --> 00:53:35,280
so that

795
00:53:35,280 --> 00:53:38,520
are that so that intelligent
automatically right.

796
00:53:38,520 --> 00:53:42,400
The bodies for me
entire the set of class. Okay

797
00:53:44,200 --> 00:53:47,240
so to calculate the area of

798
00:53:48,840 --> 00:53:50,560
of a circle

799
00:53:52,000 --> 00:53:52,800
in the middle

800
00:53:52,800 --> 00:54:03,600
what is the formula for the area.

801
00:54:03,600 --> 00:54:06,480
But we need the radius

802
00:54:13,440 --> 00:54:18,960
and it is by so now you guys have learned
about the classes.

803
00:54:19,720 --> 00:54:23,040
Let me tell you
about some building classes

804
00:54:23,040 --> 00:54:26,640
which will help you
solve your mathematical problem.

805
00:54:26,640 --> 00:54:29,440
So there is this math class in Java

806
00:54:30,200 --> 00:54:32,680
and there are so many

807
00:54:32,680 --> 00:54:36,640
building matters
that are present inside this class.

808
00:54:36,920 --> 00:54:40,800
So, for example, if you have to calculate
the power of something,

809
00:54:41,200 --> 00:54:45,840
okay, if you want to build the absolute
if you want to calculate the cosines,

810
00:54:46,760 --> 00:54:50,120
if you want to check out
the exact additions,

811
00:54:50,400 --> 00:54:53,320
sine tangent,

812
00:54:53,320 --> 00:54:56,880
the ceiling, copy sine, blah blah, blah,
cosmos hyperbolic.

813
00:54:56,880 --> 00:55:00,400
And all of these matters
are useful matters.

814
00:55:01,080 --> 00:55:04,240
They all present inside of this class.

815
00:55:04,240 --> 00:55:07,320
So you guys can now start
using these classes.

816
00:55:07,560 --> 00:55:10,440
Yeah, log in, log B, blah blah blah.

817
00:55:10,440 --> 00:55:11,760
All that.

818
00:55:11,760 --> 00:55:15,360
So in this class
we also have this value of pi, right?

819
00:55:15,360 --> 00:55:16,440
And is

820
00:55:18,360 --> 00:55:19,560
we can use it like this.

821
00:55:19,560 --> 00:55:21,320
It's a static fear.

822
00:55:21,320 --> 00:55:23,880
And can you guys tell me,
should this by feel,

823
00:55:23,880 --> 00:55:25,800
should it be final

824
00:55:27,240 --> 00:55:29,040
for it to be final or static

825
00:55:29,040 --> 00:55:31,200
or what should be the type

826
00:55:33,200 --> 00:55:34,440
and why it makes sense.

827
00:55:34,440 --> 00:55:37,680
So if I hold down the control button
and if I click on this,

828
00:55:37,680 --> 00:55:42,600
you guys will find out
it's a static and final key lie.

829
00:55:43,440 --> 00:55:44,760
No, no, it's fine.

830
00:55:44,760 --> 00:55:45,800
It's fine.

831
00:55:46,760 --> 00:55:47,720
It's fine.

832
00:55:47,760 --> 00:55:51,840
Because this value is
it is a constant value, right?

833
00:55:53,760 --> 00:55:56,680
If we are referring
it is one of the constants.

834
00:55:56,880 --> 00:56:02,040
So that's where you should be using
the final keyword with your variable.

835
00:56:02,040 --> 00:56:05,000
The things which don't change.

836
00:56:05,760 --> 00:56:09,400
You see, this
e is also a mathematical constant,

837
00:56:09,800 --> 00:56:12,720
so it is also defined as final

838
00:56:13,480 --> 00:56:16,240
Y because it should not be changed
otherwise.

839
00:56:16,240 --> 00:56:19,920
Your calculations
they they made the result a wrong result.

840
00:56:20,640 --> 00:56:26,000
So. So that's how we use
the final with the fields.

841
00:56:27,040 --> 00:56:28,560
If something

842
00:56:28,560 --> 00:56:31,320
stays
constant, we should be using find it.

843
00:56:31,320 --> 00:56:34,200
Okay and

844
00:56:40,560 --> 00:56:43,960
so so the idea of the of the circle was

845
00:56:47,960 --> 00:56:57,840
by asking right.

846
00:56:57,840 --> 00:57:01,640
So if my are
and what I can do, I can again

847
00:57:01,640 --> 00:57:05,080
use the math class map not w

848
00:57:08,480 --> 00:57:11,880
yeah I passed the value

849
00:57:11,880 --> 00:57:15,720
and then the power of that value
like this.

850
00:57:16,280 --> 00:57:19,560
Do you guys understand
what I am doing in here?

851
00:57:19,560 --> 00:57:25,840
Do you guys understand this piece of code?

852
00:57:25,840 --> 00:57:35,840
So okay,

853
00:57:35,840 --> 00:57:37,880
then to calculate the parameter

854
00:57:49,920 --> 00:57:56,880
again, the parameter

855
00:57:56,880 --> 00:58:01,160
is to buy into radius, right?

856
00:58:01,400 --> 00:58:03,240
So to

857
00:58:05,760 --> 00:58:08,520
then buy

858
00:58:09,120 --> 00:58:10,680
and then

859
00:58:11,200 --> 00:58:26,920
oops, then the value

860
00:58:29,120 --> 00:58:29,840
of it

861
00:58:30,680 --> 00:58:32,280
like this. Right.

862
00:58:32,320 --> 00:58:36,040
So we have to find some letters in here.

863
00:58:36,080 --> 00:58:39,240
All right. And then we are

864
00:58:39,240 --> 00:58:42,080
providing the implementation in here

865
00:58:42,080 --> 00:58:44,760
and let's create a

866
00:58:47,200 --> 00:58:49,120
sphere class as

867
00:58:53,800 --> 00:58:54,600
that class

868
00:58:54,600 --> 00:58:57,960
also implements the shape interface

869
00:58:59,200 --> 00:59:01,560
and I am pressing art and enter

870
00:59:01,880 --> 00:59:07,080
and implement map and selecting letters
that I want, but increment and then press.

871
00:59:07,080 --> 00:59:10,080
Okay.

872
00:59:10,080 --> 00:59:12,480
So the

873
00:59:19,080 --> 00:59:21,360
the idea of a

874
00:59:25,600 --> 00:59:27,960
maybe let's, let's,
let's say it's a length

875
00:59:28,760 --> 00:59:31,200
so area of

876
00:59:31,920 --> 00:59:35,360
the square is

877
00:59:37,840 --> 00:59:38,840
then we can collect it

878
00:59:38,840 --> 00:59:41,640
calculated in this length

879
00:59:44,760 --> 00:59:50,640
and then the parameter
is for into any side.

880
00:59:50,640 --> 00:59:51,080
Right.

881
00:59:51,080 --> 00:59:54,680
So let's use

882
00:59:57,160 --> 00:59:59,760
for into

883
01:00:01,720 --> 01:00:05,080
length.

884
01:00:05,080 --> 01:00:05,680
Okay.

885
01:00:08,080 --> 01:00:11,080
So these are some of the examples
of these classes.

886
01:00:11,080 --> 01:00:11,640
Okay.

887
01:00:12,480 --> 01:00:14,960
Is it here you guys did the same way

888
01:00:14,960 --> 01:00:17,560
or you guys used a different approach?

889
01:00:18,360 --> 01:00:20,880
What kind of classes
you guys created squared circle

890
01:00:21,320 --> 01:00:29,080
or something else?

891
01:00:29,080 --> 01:00:31,640
I didn't use the math methods is fine.

892
01:00:31,680 --> 01:00:32,960
It's fine. You

893
01:00:38,840 --> 01:00:39,280
right.

894
01:00:40,240 --> 01:00:42,080
So now during

895
01:00:42,080 --> 01:00:44,600
the break,
I will give you five X from inner

896
01:00:45,160 --> 01:00:49,880
and I want every one of you
to explore this math class.

897
01:00:49,880 --> 01:00:50,520
Okay?

898
01:00:51,120 --> 01:00:57,920
I want you to explore this class.

899
01:00:57,920 --> 01:01:00,840
And there is one more assignment,

900
01:01:00,840 --> 01:01:03,960
because now you guys are familiar
with all the concepts,

901
01:01:03,960 --> 01:01:08,520
almost all the concepts,
all the keyword search on the Internet,

902
01:01:08,760 --> 01:01:14,000
the top ten most widely used classes in
Java.

903
01:01:14,000 --> 01:01:14,760
Okay.

904
01:01:15,040 --> 01:01:18,720
And I want you to go through
those classes, explode those classes.

905
01:01:18,880 --> 01:01:22,480
What kind of methods are prevalent
in those classes

906
01:01:23,040 --> 01:01:31,720
in to try to have a look
inside those classes?

907
01:01:31,720 --> 01:01:34,920
Okay. So this is how

908
01:01:34,920 --> 01:01:38,240
this is one of the ways to solve the task.

909
01:01:38,520 --> 01:01:53,640
One, okay, there
there can be many different grades.

910
01:01:53,640 --> 01:02:04,000
Are you guys following me
or just watching me?

911
01:02:04,000 --> 01:02:06,000
It's always good to follow

912
01:02:06,000 --> 01:02:09,440
because the more practice you have with
Java, the more code you write

913
01:02:11,160 --> 01:02:13,040
in, more better.

914
01:02:13,040 --> 01:02:14,280
You will get

915
01:02:14,840 --> 01:02:16,840
the at writing code.

916
01:02:16,840 --> 01:02:18,120
So it's always good to follow.

917
01:02:18,120 --> 01:02:21,440
Even if you have written
that piece of code

918
01:02:23,160 --> 01:02:31,960
already, we do step by step.

919
01:02:32,880 --> 01:02:34,880
Okay, so

920
01:02:35,440 --> 01:02:38,680
if I say shape

921
01:02:39,720 --> 01:02:42,560
circle is equal to new circle,

922
01:02:43,040 --> 01:02:46,640
will I be able to call all the methods
from the circle class

923
01:02:48,880 --> 01:02:51,760
I did the Yes, that is also correct.

924
01:02:51,760 --> 01:02:52,680
For one.

925
01:02:52,760 --> 01:02:56,680
That is also correct.

926
01:02:56,680 --> 01:03:01,520
But in here inside these methods
we are passing different parameters.

927
01:03:01,680 --> 01:03:03,040
But it's it's fun.

928
01:03:03,040 --> 01:03:06,080
That's fun.

929
01:03:06,080 --> 01:03:08,080
I think you love it.

930
01:03:08,080 --> 01:03:11,920
You really love polymorphism. So

931
01:03:11,960 --> 01:03:13,680
so will I be able to call

932
01:03:13,680 --> 01:03:17,400
all the matters around circle? Yes.

933
01:03:17,400 --> 01:03:20,000
Because they are only law matters.

934
01:03:20,000 --> 01:03:25,040
And both of them, they are defined inside
this ship interface. So

935
01:03:28,840 --> 01:03:30,960
I love it because I understand it better.

936
01:03:31,640 --> 01:03:33,760
So circle dot calculator area.

937
01:03:33,800 --> 01:03:36,840
So let me pass five

938
01:03:37,440 --> 01:03:39,960
circle dot calculate parameters.

939
01:03:39,960 --> 01:03:44,720
Let me pass again five.

940
01:03:44,720 --> 01:03:48,840
And now if I execute this code.

941
01:03:48,840 --> 01:03:50,520
Oh, here we go.

942
01:03:50,760 --> 01:03:54,160
Let me use the polymorphism

943
01:03:54,160 --> 01:03:57,840
here as well.

944
01:03:57,840 --> 01:04:00,600
So now you guys see I see

945
01:04:00,960 --> 01:04:03,920
a values of many decimal places.

946
01:04:05,000 --> 01:04:08,440
So after the break, I want you to tell me

947
01:04:08,440 --> 01:04:12,240
how can I limit this
to only two decimal places?

948
01:04:12,480 --> 01:04:13,800
Or you can do it right now.

949
01:04:13,800 --> 01:04:19,040
Search on the Google
how to limit the decimal

950
01:04:19,040 --> 01:04:22,640
input only two decimal places
and tell me the method name.

951
01:04:23,360 --> 01:04:24,320
And here is the E.

952
01:04:24,320 --> 01:04:25,000
Here is the hint.

953
01:04:25,000 --> 01:04:38,160
It is present inside math class.

954
01:04:38,160 --> 01:04:41,640
Oh, I thought that.

955
01:04:41,640 --> 01:04:43,080
But tell me, how can I do that?

956
01:04:43,080 --> 01:04:47,280
I don't want to get
all of these decimal places.

957
01:04:48,920 --> 01:04:49,640
I only want

958
01:04:49,640 --> 01:04:53,400
maybe two of them.

959
01:04:53,400 --> 01:04:55,440
Mad Dog Brown.

960
01:04:55,600 --> 01:04:58,200
Okay,

961
01:04:58,320 --> 01:05:01,160
so if I say

962
01:05:03,760 --> 01:05:06,640
math, not

963
01:05:06,840 --> 01:05:10,560
wrong. Mm.

964
01:05:11,360 --> 01:05:15,880
This mismatched dog Brown.

965
01:05:15,880 --> 01:05:19,000
If I do this

966
01:05:20,960 --> 01:05:22,240
and if I execute

967
01:05:22,240 --> 01:05:28,680
this code again, I only get

968
01:05:29,760 --> 01:05:32,240
I only get

969
01:05:32,240 --> 01:05:35,920
the integer part known decimal part

970
01:05:35,920 --> 01:05:40,120
at all.

971
01:05:40,120 --> 01:05:41,440
So this is your homework.

972
01:05:41,440 --> 01:05:45,240
You guys have to find out how we can limit

973
01:05:45,480 --> 01:05:47,800
the output

974
01:05:49,320 --> 01:05:51,600
to only two decimal places.

975
01:05:51,600 --> 01:05:54,760
We can use the format.

976
01:05:55,040 --> 01:05:57,760
You mean when we are printing out
the output?

977
01:05:57,760 --> 01:06:02,000
You guys want to use the format?

978
01:06:02,000 --> 01:06:05,120
What if I want to use these
in further calculations?

979
01:06:05,520 --> 01:06:19,120
I don't only want to print it,
but if please give me this output.

980
01:06:19,120 --> 01:06:22,240
So it's a little tricky.

981
01:06:22,520 --> 01:06:25,560
It's a little tricky,
but I hope you guys will be able to do it.

982
01:06:25,920 --> 01:06:31,240
I don't want to print it, only
I want to use these calculations.

983
01:06:31,240 --> 01:06:32,200
Maybe in

984
01:06:33,240 --> 01:06:35,560
in some somewhere else in code.

985
01:06:36,240 --> 01:06:37,440
Then I can not use this.

986
01:06:37,440 --> 01:06:38,400
Use out.

987
01:06:39,520 --> 01:06:43,840
So you guys have to find out
how we can do that only.

988
01:06:44,280 --> 01:06:46,440
And that method should be generic.

989
01:06:46,960 --> 01:06:49,200
If if I pass today, it should print three.

990
01:06:49,200 --> 01:06:55,280
If I pass it to print four five like this.

991
01:06:55,280 --> 01:06:57,880
No, no.

992
01:06:58,480 --> 01:07:00,720
I don't want to use the print
or print alone.

993
01:07:00,840 --> 01:07:02,200
I don't want to print it.

994
01:07:02,200 --> 01:07:05,040
I want it to store inside a double.

995
01:07:05,040 --> 01:07:09,480
And only two values
should be stored inside of that variable.

996
01:07:10,200 --> 01:07:12,440
And this is your task.

997
01:07:12,440 --> 01:07:16,240
So let me remove this.

998
01:07:16,400 --> 01:07:18,520
Let the not wrong meters.

999
01:07:18,600 --> 01:07:20,760
This is not working.

1000
01:07:20,760 --> 01:07:23,440
But my expectations

1001
01:07:26,800 --> 01:07:29,760
here.

1002
01:07:29,760 --> 01:07:30,080
Okay.

1003
01:07:31,040 --> 01:07:35,120
All right.

1004
01:07:35,120 --> 01:07:37,160
So this is

1005
01:07:37,520 --> 01:07:41,520
just another way to do
it, is using the polymorphism

1006
01:07:44,840 --> 01:07:48,480
in and then

1007
01:07:48,480 --> 01:07:51,480
we get the idea of this and learn
all of that.

1008
01:07:52,560 --> 01:07:53,080
Okay.

1009
01:07:53,240 --> 01:08:05,880
Are there any questions, guys,
from the staff?

1010
01:08:05,880 --> 01:08:08,680
What was the shortcut shortcut forward

1011
01:08:09,160 --> 01:08:26,560
in Mac?

1012
01:08:26,560 --> 01:08:32,040
I forgot if I have to limit it
to three decimal points.

1013
01:08:32,040 --> 01:08:32,760
Here we go.

1014
01:08:32,760 --> 01:08:34,800
The more and more generic method, right?

1015
01:08:36,240 --> 01:08:38,720
Double value in the decimal point

1016
01:08:39,600 --> 01:08:41,960
method or power of.

1017
01:08:41,960 --> 01:08:44,160
So actually inside Java

1018
01:08:46,280 --> 01:08:47,760
is. No, actually

1019
01:08:47,760 --> 01:08:50,880
there is no specific method
to achieve this directly.

1020
01:08:50,920 --> 01:09:07,000
So we have to use some kind of logic
to achieve this.

1021
01:09:07,000 --> 01:09:09,280
So here is the method from

1022
01:09:12,560 --> 01:09:26,000
emit.

1023
01:09:26,000 --> 01:09:28,360
So guys, tell me this is a static method.

1024
01:09:28,680 --> 01:09:32,120
Can I use this static method inside this

1025
01:09:32,120 --> 01:09:41,040
calculator area?

1026
01:09:41,040 --> 01:09:43,880
How did you bring line 16 frontier?

1027
01:09:44,720 --> 01:09:46,040
Oh, it's all done.

1028
01:09:46,040 --> 01:09:49,040
Enter alternate end so you extend option

1029
01:09:49,040 --> 01:09:53,200
and enter on Mac.

1030
01:09:53,200 --> 01:09:57,560
So tell me, can I use this
method inside this instance method

1031
01:09:57,720 --> 01:10:00,600
This is a start taking method
and I use it inside a static

1032
01:10:00,600 --> 01:10:09,040
mapper.

1033
01:10:09,040 --> 01:10:09,720
Yes or no

1034
01:10:16,120 --> 01:10:16,800
can I use?

1035
01:10:16,800 --> 01:10:17,880
I don't know.

1036
01:10:18,480 --> 01:10:22,800
I think I have repeated this
at least ten times.

1037
01:10:22,800 --> 01:10:24,320
You guys still don't know.

1038
01:10:24,320 --> 01:10:26,320
It's a very famous interview question.

1039
01:10:26,320 --> 01:10:27,720
Math guy.

1040
01:10:27,720 --> 01:10:30,600
This is a very famous interview question,
I think.

1041
01:10:30,600 --> 01:11:30,920
No, we can

1042
01:11:47,640 --> 01:11:49,880
and I do the other way

1043
01:12:08,240 --> 01:12:12,120
and I use an instance method inside

1044
01:12:13,440 --> 01:12:15,440
a static method

1045
01:12:30,160 --> 01:12:31,920
static with static non static

1046
01:12:31,920 --> 01:12:39,520
starting a non static. Yes.

1047
01:12:40,320 --> 01:12:59,600
You your right.

1048
01:12:59,600 --> 01:13:03,000
Here we go right now or I only see

1049
01:13:03,600 --> 01:13:05,880
output output two decimal places

1050
01:13:06,600 --> 01:13:09,720
if I want to see the output of four, maybe

1051
01:13:09,720 --> 01:13:16,640
four decimal places.

1052
01:13:16,640 --> 01:13:18,880
So I can also do that. Okay.

1053
01:13:19,560 --> 01:13:22,600
So that's the this is how your

1054
01:13:23,640 --> 01:13:26,360
this is how you guys
will be using your subject skills.

1055
01:13:26,760 --> 01:13:28,200
What was this question?

1056
01:13:28,200 --> 01:13:31,040
How can I make this matter?

1057
01:13:31,040 --> 01:13:35,120
Return to decimal quiet three decimal
points for the decimal fires?

1058
01:13:36,560 --> 01:13:39,160
I don't
have a method of change in my ISCA.

1059
01:13:39,200 --> 01:13:42,240
Well, it's not present in intelligent.

1060
01:13:42,240 --> 01:13:44,760
You have to write it on your own.

1061
01:13:44,760 --> 01:13:49,920
So I might send me this from the internet.

1062
01:13:49,920 --> 01:13:50,760
Here, Here.

1063
01:13:50,800 --> 01:14:01,680
If you guys want to have this textbook.

1064
01:14:01,680 --> 01:14:04,320
All right, So do we move to the next task?

1065
01:14:04,680 --> 01:14:20,840
Do you guys have any other questions?

1066
01:14:20,840 --> 01:14:22,560
I need one minute.

1067
01:14:22,560 --> 01:14:26,720
Okay.

1068
01:14:26,720 --> 01:14:29,600
Do you guys want me to go slow

1069
01:14:33,640 --> 01:14:58,560
or always add

1070
01:14:58,560 --> 01:15:03,840
as far as we're asked
if you have any questions

1071
01:15:03,840 --> 01:15:15,280
questions, go slow.

1072
01:15:15,280 --> 01:15:21,400
Otherwise you will be issued
a speed decode.

1073
01:15:21,400 --> 01:15:24,720
Can you repeat the question on static
and not static? No.

1074
01:15:26,040 --> 01:15:29,400
Do you guys want me to go to a mental
hospital?

1075
01:15:29,400 --> 01:15:32,960
I already repeated that at least 50 times.

1076
01:15:33,720 --> 01:15:36,560
It will be in in my dreams if I repeat it.

1077
01:15:36,560 --> 01:15:39,360
One word I can.

1078
01:15:39,360 --> 01:15:40,680
Yes, please.

1079
01:15:40,680 --> 01:15:46,480
So because static methods are fields,
they belong to the class.

1080
01:15:46,520 --> 01:15:52,400
They have same values
for all the instances of that class,

1081
01:15:53,160 --> 01:15:55,760
we can use them inside static

1082
01:15:55,960 --> 01:16:00,400
or instance spheres in certain instances
instance methods,

1083
01:16:00,400 --> 01:16:05,560
but because instance methods
or instance fear,

1084
01:16:06,120 --> 01:16:09,800
they can be defined and they can behave

1085
01:16:09,800 --> 01:16:13,200
different for each object.

1086
01:16:14,360 --> 01:16:16,840
And because static is something universal.

1087
01:16:17,160 --> 01:16:21,600
So that's why we can not use a,
an instance

1088
01:16:21,600 --> 01:16:24,720
field or instance method inside

1089
01:16:24,720 --> 01:16:26,960
a specific method

1090
01:16:29,680 --> 01:16:32,000
is how to learn the when

1091
01:16:38,320 --> 01:16:39,000
we really go

1092
01:16:39,000 --> 01:17:05,000
there first, then we get a break

1093
01:17:05,000 --> 01:17:06,360
where reasonable

1094
01:17:12,880 --> 01:17:15,080
do it

1095
01:17:17,320 --> 01:17:21,080
with the only subject

1096
01:17:21,080 --> 01:17:25,560
which was making me to leave
the class lost Java.

1097
01:17:25,560 --> 01:17:28,680
So to change decimal upper to apply it,
we have to enter line

1098
01:17:29,120 --> 01:17:31,560
50 onwards.

1099
01:17:31,800 --> 01:17:34,480
You have to define this method

1100
01:17:34,480 --> 01:17:38,560
and then you to call this method
on on the output for which

1101
01:17:38,560 --> 01:17:42,960
you want to change it to load two
decimal places or three or four or five.

1102
01:17:44,200 --> 01:17:47,200
So during the break
I will give you five extra minutes.

1103
01:17:47,600 --> 01:17:51,360
Your task is to search on the internet
before

1104
01:17:51,640 --> 01:17:55,320
ten most widely used Java classes

1105
01:17:55,880 --> 01:17:59,400
and tell me at least about three methods

1106
01:17:59,440 --> 01:18:02,600
that you guys have learned from these top
ten classes.

1107
01:18:02,600 --> 01:18:04,920
Tell me how you can use three methods.

1108
01:18:04,920 --> 01:18:08,120
So the name of the method
and a short description about that method

1109
01:18:08,720 --> 01:18:09,520
after the break.

1110
01:18:10,760 --> 01:18:11,880
Okay, if you guys

1111
01:18:11,880 --> 01:18:16,400
have understood how to use that method,
so three methods from any of both top

1112
01:18:16,440 --> 01:18:19,640
and Java classes
and you guys have to tell me

1113
01:18:19,640 --> 01:18:23,360
how to use that matter or why
that method is present in that class.

1114
01:18:23,360 --> 01:18:25,680
What is the of dark matter?

1115
01:18:25,680 --> 01:18:33,160
Okay.

1116
01:18:33,160 --> 01:18:34,800
Okay, perfect.

1117
01:18:35,800 --> 01:18:39,600
So let me give you 3045

1118
01:18:44,520 --> 01:18:47,920
and 50.

1119
01:18:47,920 --> 01:18:48,520
Okay?

1120
01:18:48,520 --> 01:18:50,640
And you guys have to tell me
about three matters,

1121
01:18:52,120 --> 01:18:52,440
okay?

1122
01:18:52,440 --> 01:18:55,720
And please remind me about the recording
and be back before

1123
01:18:55,720 --> 01:19:09,120
11 5050.

1124
01:19:09,120 --> 01:19:09,720
All right.

1125
01:19:09,720 --> 01:19:18,400
Bye bye.

1126
01:19:18,400 --> 01:19:19,320
Yes, stop.

1127
01:19:19,320 --> 01:19:20,520
And they didn't change.

1128
01:19:20,520 --> 01:19:24,720
So from this top ten classes,
you guys already know

1129
01:19:24,760 --> 01:19:28,680
about the string class

1130
01:19:28,880 --> 01:19:30,440
and then the object class, right?

1131
01:19:30,440 --> 01:19:35,040
The parent of all the classes
and the remaining six classes, we will be.

1132
01:19:35,760 --> 01:19:38,160
We will discuss these classes from today.

1133
01:19:38,160 --> 01:19:40,920
So today
we will discuss about the ArrayList.

1134
01:19:42,000 --> 01:19:44,720
Then this hash map,

1135
01:19:44,760 --> 01:19:47,800
then exceptions, the iterator.

1136
01:19:47,800 --> 01:19:49,720
So we will be discussing these classes.

1137
01:19:49,720 --> 01:19:53,800
So can you guys name Dementors
the three methods that you explored

1138
01:19:53,800 --> 01:20:25,160
from these classes?

1139
01:20:25,160 --> 01:20:26,800
Bring class methods.

1140
01:20:26,800 --> 01:20:29,360
Any methods from these three classes
that you guys looked

1141
01:20:29,560 --> 01:20:30,600
during the

1142
01:20:33,600 --> 01:20:34,200
but in the line

1143
01:20:34,200 --> 01:20:37,640
method, you guys have also used
your system class right

1144
01:20:38,000 --> 01:20:40,120
to set the properties of your driver

1145
01:20:48,000 --> 01:20:48,880
worker.

1146
01:20:48,960 --> 01:20:51,280
So I want you to explore these classes.

1147
01:20:51,280 --> 01:20:51,520
Okay.

1148
01:20:51,520 --> 01:20:55,360
If you guys haven't explored
this, it's fine,

1149
01:20:56,400 --> 01:20:58,480
but you guys
will be needing these classes,

1150
01:20:58,840 --> 01:21:09,520
so you guys should know
the methods to uppercase.

1151
01:21:09,520 --> 01:21:12,480
So we have already discussed these
methods. Right.

1152
01:21:12,480 --> 01:21:16,080
I want you to explore
three in those three methods,

1153
01:21:16,080 --> 01:21:20,040
which we haven't discussed.

1154
01:21:20,040 --> 01:21:22,720
Okay, So

1155
01:21:24,320 --> 01:21:30,640
break statement.

1156
01:21:30,640 --> 01:21:45,360
So let's solve the task two.

1157
01:21:45,360 --> 01:21:47,560
Or why? The way I.

1158
01:21:47,560 --> 01:21:52,120
I forget, I forgot about
I wanted to show you

1159
01:21:52,800 --> 01:21:55,640
about how to move your classes
from eclipse to intelligent.

1160
01:21:56,520 --> 01:22:00,760
So after we are done with this task so
remind me I will show you how to do that

1161
01:22:01,640 --> 01:22:06,840
and how to have multiple projects
in one window inside the intelligent

1162
01:22:23,040 --> 01:22:25,440
also previous reptiles disappeared.

1163
01:22:25,440 --> 01:22:27,360
No, no, that they didn't disappear.

1164
01:22:27,360 --> 01:22:30,120
Then you guys have to actually scroll down

1165
01:22:31,200 --> 01:22:33,440
to check those wrappers.

1166
01:22:33,440 --> 01:22:36,160
So let me show you.

1167
01:22:36,160 --> 01:22:55,960
They didn't disappear.

1168
01:22:55,960 --> 01:22:59,000
They see problem one, two,

1169
01:22:59,000 --> 01:23:02,000
three, four, five.

1170
01:23:02,000 --> 01:23:03,800
And then you have

1171
01:23:03,960 --> 01:23:06,040
131 3135.

1172
01:23:06,040 --> 01:23:10,320
So all of them, they are,
I mean, my own solutions.

1173
01:23:10,320 --> 01:23:19,560
Did you upload those solutions to canvas?

1174
01:23:19,560 --> 01:23:25,800
You mean they disappeared from it?

1175
01:23:25,800 --> 01:23:31,440
Okay,

1176
01:23:31,440 --> 01:23:41,840
They should not disappear, but

1177
01:23:43,800 --> 01:23:53,680
they are available here.

1178
01:23:53,680 --> 01:24:04,320
Oh, now
the solutions are available in here.

1179
01:24:04,320 --> 01:24:05,040
Clear solution.

1180
01:24:05,040 --> 01:24:08,880
So I will create the solutions
inside these proposals.

1181
01:24:08,880 --> 01:24:10,560
Maybe so.

1182
01:24:10,560 --> 01:24:12,240
How many of you don't see your wrappers?

1183
01:24:12,240 --> 01:24:13,920
Wrapper number one, two, three.

1184
01:24:13,920 --> 01:24:18,120
Can you guys check with the
Do you need to log out

1185
01:24:18,120 --> 01:24:21,520
and then log in again?

1186
01:24:21,520 --> 01:24:30,960
Or maybe clear the caches of cookies off
your browser? Yes.

1187
01:24:30,960 --> 01:24:35,320
You guys should see all of them.

1188
01:24:35,320 --> 01:24:38,040
You see, Abdul is working on 139.

1189
01:24:38,040 --> 01:24:40,280
Catrina is working Monday night, working

1190
01:24:41,160 --> 01:24:45,000
the one night, working.

1191
01:24:45,000 --> 01:24:45,360
Okay.

1192
01:24:47,760 --> 01:24:50,600
So they should be there should be

1193
01:24:59,920 --> 01:25:03,160
so in the in this
how long we will have an access to

1194
01:25:03,160 --> 01:25:06,360
videos class recording on Google die
after completion of.

1195
01:25:06,360 --> 01:25:09,960
The course are I think in the contract.

1196
01:25:09,960 --> 01:25:13,440
It is mentioned for about one month,
but I don't think so.

1197
01:25:13,440 --> 01:25:16,120
We remove the access to Google right?

1198
01:25:16,120 --> 01:25:17,720
Even after one month?

1199
01:25:17,720 --> 01:25:18,480
I don't think so.

1200
01:25:18,480 --> 01:25:20,280
We ever remove the access,

1201
01:25:20,280 --> 01:25:23,480
you will always be able to access
those you do, in my opinion.

1202
01:25:23,840 --> 01:25:27,400
But I have to check with Patreon.

1203
01:25:27,400 --> 01:25:34,040
Okay.

1204
01:25:34,040 --> 01:25:36,440
No, I think you can still access them.

1205
01:25:36,440 --> 01:25:38,880
I can. I think so. But I have to ask.

1206
01:25:38,880 --> 01:25:40,160
I have lost.

1207
01:25:40,160 --> 01:25:41,720
I'm not sure

1208
01:25:47,960 --> 01:25:51,440
what I heard six months or to get it all.

1209
01:25:52,240 --> 01:26:02,640
All right.

1210
01:26:02,640 --> 01:26:04,760
But to be honest,
at the end of this course,

1211
01:26:04,760 --> 01:26:08,720
you guys will not be having time to watch

1212
01:26:09,720 --> 01:26:10,640
those five

1213
01:26:10,640 --> 01:26:14,440
or 3 hours of videos
you guys will be needing.

1214
01:26:14,440 --> 01:26:17,560
Only you guys will have time
to go to the slides on

1215
01:26:21,200 --> 01:26:23,840
and you guys will be

1216
01:26:25,920 --> 01:26:28,920
you guys will be able to test your

1217
01:26:28,920 --> 01:26:31,200
let's say, for example,
if something is not clear,

1218
01:26:31,200 --> 01:26:36,120
you guys will be good enough
to find resource from YouTube or Google

1219
01:26:36,240 --> 01:26:39,760
because then you will be knowing all the
terminology is how everything works. So

1220
01:26:41,000 --> 01:26:42,840
you guys will be able
to find everything on

1221
01:26:42,840 --> 01:26:47,800
the Google as well.

1222
01:26:47,800 --> 01:26:50,080
Just the

1223
01:26:52,960 --> 01:26:53,400
initiative.

1224
01:26:53,400 --> 01:26:55,280
Don't worry,
don't worry, don't worry about it.

1225
01:26:55,280 --> 01:26:58,480
So we have to calculate the percentage

1226
01:26:58,720 --> 01:27:01,760
of marks obtained in three subjects,

1227
01:27:02,880 --> 01:27:06,000
each out of under my student A

1228
01:27:07,320 --> 01:27:09,840
and in four subjects each of our 100.

1229
01:27:09,840 --> 01:27:13,800
By student we create class marks
with an abstract method

1230
01:27:13,800 --> 01:27:17,920
of get percentage. So

1231
01:27:19,080 --> 01:27:21,600
let's create award get percentage

1232
01:27:26,640 --> 01:27:29,600
in Why I'm getting another guys

1233
01:27:34,160 --> 01:27:36,200
because now

1234
01:27:36,200 --> 01:27:39,360
I am not providing the body
to this method.

1235
01:27:39,360 --> 01:27:43,320
So first thing,
I should declare this method as abstract.

1236
01:27:44,600 --> 01:27:47,400
And if I have one abstract

1237
01:27:47,400 --> 01:27:51,760
method in my class,
that class must be declared

1238
01:27:55,320 --> 01:28:02,280
as abstract.

1239
01:28:02,280 --> 01:28:04,920
Yeah. Now the other goes with it.

1240
01:28:04,920 --> 01:28:07,560
So there will be three

1241
01:28:20,640 --> 01:28:23,320
which will be used by both these students.

1242
01:28:23,320 --> 01:28:24,360
So let's be clear.

1243
01:28:24,360 --> 01:28:26,240
Those fields

1244
01:28:27,200 --> 01:28:30,280
inside the parent class.

1245
01:28:30,280 --> 01:28:32,640
So A and B

1246
01:28:32,640 --> 01:28:35,760
class A and B, each
having a method with the same name

1247
01:28:35,760 --> 01:28:41,960
which returns
the percentage of the students.

1248
01:28:41,960 --> 01:28:44,400
So it should return the percentage, right?

1249
01:28:44,480 --> 01:28:50,400
So instead of Ward,
let me make it integer.

1250
01:28:50,400 --> 01:28:53,440
It is inherited by class
A and B each having a method

1251
01:28:53,440 --> 01:28:55,960
with the same name with returns
the person data student.

1252
01:28:56,600 --> 01:28:59,480
The constructor of the marks in three

1253
01:28:59,480 --> 01:29:03,520
subjects are parameters
and marks for and okay so

1254
01:29:05,040 --> 01:29:06,600
plus error

1255
01:29:07,000 --> 01:29:08,640
expense

1256
01:29:08,800 --> 01:29:13,280
marks.

1257
01:29:13,280 --> 01:29:16,240
And let me create a construct

1258
01:29:16,560 --> 01:29:19,680
as well in here to initialize B fields.

1259
01:29:20,200 --> 01:29:22,200
Okay. And how can I do it

1260
01:29:23,240 --> 01:29:23,800
quickly?

1261
01:29:23,800 --> 01:29:28,080
I can click on generate and then construct

1262
01:29:28,760 --> 01:29:31,040
and then select these three foods.

1263
01:29:32,560 --> 01:29:35,880
So now the constructors created

1264
01:29:36,240 --> 01:29:40,240
and now I should provide a matching
constructor

1265
01:29:40,800 --> 01:29:43,920
inside my child classes.

1266
01:29:44,440 --> 01:29:46,920
Yeah.

1267
01:29:46,920 --> 01:29:50,880
And I should provide the implementation
for this method.

1268
01:29:51,240 --> 01:29:53,280
Now all the arrows to go of it.

1269
01:29:53,280 --> 01:30:04,320
Just give me all.

1270
01:30:04,320 --> 01:30:05,120
Okay,

1271
01:30:05,760 --> 01:30:08,320
so this is class A,

1272
01:30:08,320 --> 01:30:12,640
then let's define
class B also extends from

1273
01:30:13,400 --> 01:30:15,240
marks

1274
01:30:17,640 --> 01:30:20,320
and I have near the constructor

1275
01:30:23,360 --> 01:30:25,440
and I have to implement

1276
01:30:30,560 --> 01:30:32,400
that test.

1277
01:30:32,400 --> 01:30:35,960
And this class B
actually it requires one more fig

1278
01:30:37,920 --> 01:30:41,160
because student has student visas for

1279
01:30:43,200 --> 01:30:44,960
subjects

1280
01:30:46,360 --> 01:30:48,400
and then

1281
01:30:52,120 --> 01:30:53,520
double

1282
01:30:54,160 --> 01:30:55,480
or four,

1283
01:30:56,960 --> 01:30:58,200
and then

1284
01:30:59,760 --> 01:31:02,800
they start cause four is equal to

1285
01:31:03,840 --> 01:31:05,320
or four.

1286
01:31:06,240 --> 01:31:08,720
And how can we calculate the percentage?

1287
01:31:08,720 --> 01:31:11,520
We can calculate the percentage by

1288
01:31:12,600 --> 01:31:16,120
adding the first one plus

1289
01:31:17,560 --> 01:31:20,280
of course, to plus

1290
01:31:20,280 --> 01:31:24,080
or three, and then

1291
01:31:24,080 --> 01:31:26,000
dividing that third

1292
01:31:26,000 --> 01:31:31,560
by three.

1293
01:31:31,560 --> 01:31:34,680
If we make it double.

1294
01:31:34,680 --> 01:31:38,160
Otherwise we have to cast it

1295
01:32:06,000 --> 01:32:08,960
linguistically,
because how you guys implement

1296
01:32:09,480 --> 01:32:13,040
these classes,

1297
01:32:13,040 --> 01:32:26,840
how do you guys do something different?

1298
01:32:26,840 --> 01:32:28,280
What effect would

1299
01:32:34,440 --> 01:32:36,960
the Now let me create a test for class

1300
01:32:53,480 --> 01:32:54,840
E Let me look

1301
01:32:54,840 --> 01:32:57,600
and just think you that change it to

1302
01:32:59,240 --> 01:32:59,960
fourth

1303
01:33:12,520 --> 01:33:17,120
A is equal to nil here.

1304
01:33:17,120 --> 01:33:21,960
Then I pass maybe 95, 96, 92

1305
01:33:23,920 --> 01:33:28,040
and I call it out

1306
01:33:28,920 --> 01:33:34,640
and get percentage.

1307
01:33:34,640 --> 01:33:36,840
So I want
you also use polymorphism in here

1308
01:33:38,040 --> 01:33:40,920
b b is equal to a new B

1309
01:33:43,680 --> 01:33:46,440
is if

1310
01:33:46,440 --> 01:33:50,280
I do two 9495

1311
01:33:51,840 --> 01:34:00,240
minus different days of trial, not

1312
01:34:01,720 --> 01:34:03,800
also fine, it's also fine.

1313
01:34:04,080 --> 01:34:07,760
But usually what we do,
we only pull those things

1314
01:34:07,760 --> 01:34:10,960
which are common in
both D classes inside of the parent class.

1315
01:34:10,960 --> 01:34:14,080
We only put those things
which are common in

1316
01:34:14,080 --> 01:34:21,360
both the classes.

1317
01:34:21,360 --> 01:34:27,280
So it's also good.

1318
01:34:27,280 --> 01:34:30,600
And then we can use
the polymorphism in here.

1319
01:34:30,840 --> 01:35:24,360
Let me copy the code from NYA.

1320
01:35:24,360 --> 01:35:27,000
Now if I execute this

1321
01:35:33,000 --> 01:35:36,840
either 94, 94 and 97

1322
01:35:40,960 --> 01:35:43,080
for marks more

1323
01:35:47,680 --> 01:35:53,160
percentage.

1324
01:35:53,160 --> 01:35:57,600
So you guys see
I can also use that same method that way.

1325
01:35:58,000 --> 01:36:01,680
That only gives me values
up to two decimal points.

1326
01:36:02,320 --> 01:36:04,600
So you guys will be needing it.

1327
01:36:04,760 --> 01:36:06,560
So I am planning off.

1328
01:36:06,560 --> 01:36:08,760
So try to create a class inside your

1329
01:36:09,720 --> 01:36:12,840
inside your project and

1330
01:36:12,840 --> 01:36:13,960
let me call it.

1331
01:36:13,960 --> 01:36:17,880
So in projects
you guys will be having a UTILS package

1332
01:36:19,080 --> 01:36:23,680
and inside of those packages,

1333
01:36:23,680 --> 01:36:27,040
those things
that you guys will be using frequently

1334
01:36:29,800 --> 01:36:32,720
and which are not present inside of Java,

1335
01:36:33,640 --> 01:36:36,120
you guys will be creating the matters

1336
01:36:41,000 --> 01:36:43,200
for example, map util

1337
01:36:44,640 --> 01:36:48,080
and then you guys will be defining
those common methods in there

1338
01:36:48,800 --> 01:36:52,720
and we put public static work in here.

1339
01:36:52,840 --> 01:36:53,400
Okay.

1340
01:36:53,600 --> 01:36:56,680
So this is how you guys
will be creating your own framework.

1341
01:36:57,000 --> 01:37:01,320
Okay. Yes.

1342
01:37:02,000 --> 01:37:05,960
So I can use

1343
01:37:10,840 --> 01:37:12,880
I can use this is how

1344
01:37:14,160 --> 01:37:15,680
the frameworks are derived.

1345
01:37:15,680 --> 01:37:19,080
So let's say, for example, I can

1346
01:37:24,720 --> 01:37:27,120
I can use that

1347
01:37:33,600 --> 01:37:36,120
Matt util

1348
01:37:36,120 --> 01:37:38,560
dot change in here as but

1349
01:37:53,120 --> 01:37:55,840
and then I need
to pass, let's say maybe two

1350
01:37:57,240 --> 01:37:58,880
and let me

1351
01:38:00,280 --> 01:38:02,080
rename it to

1352
01:38:03,240 --> 01:38:08,040
Rob. Yeah. So

1353
01:38:10,400 --> 01:38:11,640
now let me

1354
01:38:11,640 --> 01:38:16,680
and I need to gain.

1355
01:38:16,680 --> 01:38:19,680
So now
I only get after two decimal places.

1356
01:38:21,160 --> 01:38:23,560
So this is how the frameworks
are developed

1357
01:38:24,480 --> 01:38:29,200
and you guys will see in around two weeks
how to develop your own framework in test

1358
01:38:29,200 --> 01:38:33,880
and then give them the.

1359
01:38:33,880 --> 01:38:35,400
What do you share this code?

1360
01:38:35,400 --> 01:38:41,160
Yes, I will post this course
right after the class.

1361
01:38:41,160 --> 01:38:46,440
So from now on, guys, if you are repeating
something again and again,

1362
01:38:46,440 --> 01:38:50,320
make and method for that
and create a class

1363
01:38:50,720 --> 01:38:54,200
in meaningful having a meaningful name
and for that matter

1364
01:38:54,240 --> 01:38:58,360
as a static matter,
if method is not using the instance feels

1365
01:39:00,480 --> 01:39:04,760
and then put those matters in there,
where should we create the packet?

1366
01:39:04,760 --> 01:39:08,040
You you you can create your inside
your project like for example,

1367
01:39:08,040 --> 01:39:19,880
like neutral utils in here.

1368
01:39:19,880 --> 01:39:23,280
So this is how all the classes in
they are developed

1369
01:39:23,280 --> 01:39:26,160
as, as the time passed as the day

1370
01:39:26,600 --> 01:39:31,080
as the encountered different problem,
they kept on creating new methods.

1371
01:39:31,680 --> 01:39:34,080
Make it public
so you can execute from anywhere.

1372
01:39:34,120 --> 01:39:36,120
Yes, I made it public.

1373
01:39:36,120 --> 01:39:41,400
I did make it inside the project.

1374
01:39:41,400 --> 01:40:12,680
All right, guys,
are there any questions from this task?

1375
01:40:12,680 --> 01:40:13,000
Okay.

1376
01:40:13,000 --> 01:40:34,720
Should we move to the next task?

1377
01:40:34,720 --> 01:40:52,600
Right.

1378
01:40:52,600 --> 01:40:55,200
Just to clarify,
it might be a stupid question.

1379
01:40:55,200 --> 01:40:57,720
These util package public

1380
01:40:58,440 --> 01:41:02,200
so there is no public or private package.

1381
01:41:02,200 --> 01:41:03,800
The public and private teams,

1382
01:41:03,800 --> 01:41:08,040
they are used with classes, methods
and figures available in my project.

1383
01:41:08,160 --> 01:41:10,280
How others get accessible.

1384
01:41:10,280 --> 01:41:11,960
It depends on method.

1385
01:41:11,960 --> 01:41:14,720
I mean, yes, you have to project public
than anyone can use it.

1386
01:41:14,800 --> 01:41:19,200
Not sure if you mentioned it already,
but if a method has multiple parameters

1387
01:41:19,200 --> 01:41:23,040
like method
in, would it also serve Benetti? Yes.

1388
01:41:23,640 --> 01:41:25,600
Yes I am.
And you can also pass. And adding

1389
01:41:30,360 --> 01:41:34,080
it's in the overloading class I guess

1390
01:41:34,560 --> 01:41:35,840
if you guys want to revise

1391
01:41:35,840 --> 01:41:44,240
something.

1392
01:41:44,240 --> 01:41:50,000
But the our task in the tar

1393
01:41:50,040 --> 01:41:53,040
dos you guys had to create a registration
class

1394
01:42:22,440 --> 01:42:24,440
weird registration class

1395
01:42:24,440 --> 01:42:28,800
in which you would have variables
as username

1396
01:42:28,800 --> 01:42:33,840
and password that have an access scope
only within its own class.

1397
01:42:34,680 --> 01:42:38,360
So task three was about the car

1398
01:42:39,440 --> 01:42:41,840
was about the car.

1399
01:42:42,480 --> 01:42:43,920
Okay, let's do it after this.

1400
01:42:43,920 --> 01:42:45,160
This task

1401
01:42:45,920 --> 01:42:47,240
because one

1402
01:42:47,840 --> 01:42:54,040
if it don't work,
it's about encapsulation.

1403
01:42:54,040 --> 01:42:57,880
So those who were asking
about the encapsulation, this

1404
01:42:57,960 --> 01:43:06,600
this is where you should use
the encapsulation.

1405
01:43:06,600 --> 01:43:10,840
So create a registration class
in which you would have variables

1406
01:43:10,840 --> 01:43:14,800
as email, username and password
and that have an access scope within

1407
01:43:15,120 --> 01:43:15,920
that class only.

1408
01:43:15,920 --> 01:43:18,960
So guys, can you tell me
which access modified I should use

1409
01:43:19,680 --> 01:43:22,000
if I want to restrict the visibility

1410
01:43:22,000 --> 01:43:28,320
only to this class?

1411
01:43:28,320 --> 01:43:28,800
Okay.

1412
01:43:28,880 --> 01:43:33,200
But I we tried
private means only and only accessible.

1413
01:43:33,800 --> 01:43:36,640
And what should really default
access modifier

1414
01:43:36,640 --> 01:43:38,920
that I should try to use with my fear.

1415
01:43:39,160 --> 01:43:41,640
Well what is the preferred access
modifier?

1416
01:43:41,640 --> 01:43:45,920
Five feels
that I should always try to you.

1417
01:43:45,920 --> 01:43:46,680
It's the

1418
01:44:10,200 --> 01:44:12,360
oh, sorry for the interruption.

1419
01:44:12,360 --> 01:44:22,200
I don't know what went wrong.

1420
01:44:22,200 --> 01:44:30,200
Let me start the recording.

1421
01:44:30,200 --> 01:44:32,080
Yeah. Yes.

1422
01:44:32,080 --> 01:44:36,360
It was something related to the internet.

1423
01:44:36,360 --> 01:44:41,040
Can you guys hear me?

1424
01:44:41,040 --> 01:44:42,360
Actors

1425
01:44:42,960 --> 01:44:46,920
Hey, I like so private

1426
01:44:48,440 --> 01:44:50,000
and then

1427
01:44:50,240 --> 01:44:52,160
string

1428
01:44:52,800 --> 01:44:57,680
email, perfect private

1429
01:44:59,240 --> 01:45:04,440
string username.

1430
01:45:04,440 --> 01:45:06,200
Private

1431
01:45:06,480 --> 01:45:08,120
string

1432
01:45:08,800 --> 01:45:09,760
password.

1433
01:45:09,760 --> 01:45:17,280
Right? Yes.

1434
01:45:17,640 --> 01:45:19,760
Because the

1435
01:45:19,760 --> 01:45:22,040
Ukrainian they have the famous calls

1436
01:45:22,120 --> 01:45:24,960
and the Russians,
they have the famous hackers in the world.

1437
01:45:25,440 --> 01:45:27,840
And then now the Chinese,
they are also getting famous

1438
01:45:31,720 --> 01:45:32,640
after creating

1439
01:45:32,640 --> 01:45:37,920
an object of the class, you should be able
to call the methods and in each method

1440
01:45:37,920 --> 01:45:40,920
separately, password use to set the user

1441
01:45:40,920 --> 01:45:44,640
email, username and password.

1442
01:45:44,640 --> 01:45:46,800
Valid email consider to be only.

1443
01:45:47,680 --> 01:45:51,280
Oh. Did I miss something

1444
01:45:52,080 --> 01:45:53,920
only gmail once

1445
01:45:53,920 --> 01:45:58,440
valid user and password cannot be empty
and should be offline.

1446
01:45:58,560 --> 01:45:58,840
Okay.

1447
01:45:58,840 --> 01:46:04,600
So these are the requirements are
hackers are always working for government?

1448
01:46:04,600 --> 01:46:05,280
No. No.

1449
01:46:05,280 --> 01:46:12,320
They don't work for governments.

1450
01:46:12,320 --> 01:46:14,840
It was Yahoo and I did it. Okay.

1451
01:46:15,720 --> 01:46:19,000
Well, only Yahoo or Gmail,

1452
01:46:19,000 --> 01:46:23,880
but both the email and Yahoo!

1453
01:46:23,880 --> 01:46:25,920
Actually let me put Yahoo!

1454
01:46:26,280 --> 01:46:30,240
And is there anything else
that is different from the task

1455
01:46:30,240 --> 01:46:39,560
that I shared?

1456
01:46:39,560 --> 01:46:41,040
Okay, perfect. So

1457
01:46:42,880 --> 01:46:45,400
this is the registration class.

1458
01:46:45,400 --> 01:46:48,480
And now inside this registration class,

1459
01:46:48,480 --> 01:46:51,600
I have to set the values to this field.

1460
01:46:51,600 --> 01:46:56,960
But I have some requirements
before anyone can set the values.

1461
01:46:56,960 --> 01:46:59,440
So what should be my approach?
What should I do?

1462
01:46:59,440 --> 01:47:05,480
Guys, getters and setter methods right?

1463
01:47:05,480 --> 01:47:07,480
Then how can I quickly create them?

1464
01:47:08,960 --> 01:47:12,040
I can click on Generate getter
sector methods,

1465
01:47:12,600 --> 01:47:15,480
select all the features indexes right?

1466
01:47:15,880 --> 01:47:17,160
And now

1467
01:47:18,240 --> 01:47:20,440
I can write the rules.

1468
01:47:20,440 --> 01:47:23,400
I can write the rules for this method.

1469
01:47:23,400 --> 01:47:27,320
So only valid email is the Yahoo!

1470
01:47:27,720 --> 01:47:29,400
Email. Right.

1471
01:47:29,400 --> 01:47:33,600
So how can I check if if an email contains

1472
01:47:35,040 --> 01:47:37,000
is Yahoo

1473
01:47:38,480 --> 01:47:41,160
was M has a lot of organic rosters

1474
01:47:46,680 --> 01:47:49,200
contains right if

1475
01:47:51,320 --> 01:47:54,720
if email log contains

1476
01:47:59,640 --> 01:48:05,120
the Yahoo writes in
I should do one more thing.

1477
01:48:05,120 --> 01:48:06,240
I should say

1478
01:48:08,560 --> 01:48:12,240
a spring not to

1479
01:48:17,320 --> 01:48:19,000
so email,

1480
01:48:19,000 --> 01:48:22,240
not to lowercase

1481
01:48:24,680 --> 01:48:26,920
and then not contains Yahoo.

1482
01:48:26,960 --> 01:48:29,640
I check it in single method.

1483
01:48:30,320 --> 01:48:33,240
In single method.

1484
01:48:33,240 --> 01:48:34,440
Uh, and what?

1485
01:48:34,440 --> 01:48:44,760
What do you mean in single method?

1486
01:48:44,760 --> 01:48:45,720
Else?

1487
01:48:45,720 --> 01:48:48,520
Let's print out something.

1488
01:48:48,520 --> 01:48:50,400
Not a

1489
01:48:51,760 --> 01:48:53,200
nor a

1490
01:48:54,520 --> 01:48:59,760
valid email.

1491
01:48:59,760 --> 01:49:01,880
Oh, you mean signing method.

1492
01:49:01,880 --> 01:49:04,080
Okay, sign in method.

1493
01:49:04,080 --> 01:49:05,840
Or where is that signing method?

1494
01:49:05,840 --> 01:49:07,800
Do we have to clear defining method?

1495
01:49:07,800 --> 01:49:10,800
Was there some kind of requirement
for the sign in method

1496
01:49:13,320 --> 01:49:14,000
highest good.

1497
01:49:14,000 --> 01:49:15,480
Heis you are

1498
01:49:33,360 --> 01:49:35,200
password cannot be empty of any land.

1499
01:49:35,200 --> 01:49:39,240
Also valid password cannot continue user
name Can you send me complete requirement?

1500
01:49:39,240 --> 01:49:41,640
Maybe I don't have the complete
requirements.

1501
01:49:41,640 --> 01:49:50,320
Then.

1502
01:49:50,320 --> 01:49:54,840
So in getter setters we don't need
curly brackets after a failed.

1503
01:49:54,880 --> 01:49:57,000
No, no. If you want you can put.

1504
01:49:57,000 --> 01:50:00,120
But because I only have one line of code
after else.

1505
01:50:00,120 --> 01:50:01,520
If that's why I didn't put

1506
01:50:02,480 --> 01:50:04,440
much, let me follow the best practice

1507
01:50:04,440 --> 01:50:09,280
you guys should always put to be curly
brackets.

1508
01:50:09,280 --> 01:50:10,520
You guys should always.

1509
01:50:10,520 --> 01:50:12,800
You declare back later to use bugs.

1510
01:50:13,680 --> 01:50:28,040
So this is

1511
01:50:28,040 --> 01:50:31,720
this is the recommended approach.

1512
01:50:31,720 --> 01:50:36,840
So this is how we can set the value
to the email.

1513
01:50:37,320 --> 01:50:40,880
And then for the username

1514
01:50:47,040 --> 01:50:48,840
and password cannot be fast.

1515
01:50:48,840 --> 01:50:52,040
They can not be empty
and should be of length

1516
01:50:52,040 --> 01:50:55,280
larger than six.

1517
01:50:55,280 --> 01:51:00,840
And also valid
passwords can not be so in here, guys.

1518
01:51:01,640 --> 01:51:02,880
In here

1519
01:51:04,440 --> 01:51:08,120
I am trying to do the same thing

1520
01:51:08,880 --> 01:51:11,760
inside both the methods.

1521
01:51:11,760 --> 01:51:15,640
I want to check inside the both methods
that they cannot be empty.

1522
01:51:15,640 --> 01:51:19,200
Then they
they are larger than six characters. So

1523
01:51:20,520 --> 01:51:23,040
I see there is no sign in the requirements

1524
01:51:23,040 --> 01:51:26,160
like Miranda for the step.

1525
01:51:26,160 --> 01:51:29,520
I question how we know
conditions are need to pass and get

1526
01:51:29,520 --> 01:51:32,840
Rosetta
condition need to be passing a setter.

1527
01:51:33,800 --> 01:51:36,720
I am not putting any condition in
get rosetta now.

1528
01:51:36,720 --> 01:51:49,080
What do we mean?

1529
01:51:49,080 --> 01:51:54,920
So inside this charter I should say
valid username can not be empty

1530
01:51:54,960 --> 01:51:58,920
and should be of length
larger than six characters.

1531
01:51:58,920 --> 01:52:03,240
Right. So.

1532
01:52:03,240 --> 01:52:09,040
So if a user name dot

1533
01:52:09,320 --> 01:52:11,480
is empty

1534
01:52:12,120 --> 01:52:14,480
or user

1535
01:52:14,560 --> 01:52:23,680
name dot length is less than six,

1536
01:52:23,680 --> 01:52:32,240
so less than equal to six,

1537
01:52:32,240 --> 01:52:36,080
then we should printout

1538
01:52:36,080 --> 01:52:39,840
user cannot be

1539
01:52:39,920 --> 01:52:41,360
empty

1540
01:52:44,520 --> 01:52:49,200
or less than six

1541
01:52:50,400 --> 01:52:51,960
characters.

1542
01:52:52,840 --> 01:52:57,920
It's else

1543
01:53:01,960 --> 01:53:05,200
also valid passwords cannot continue
then else

1544
01:53:05,520 --> 01:53:09,080
we can set the username

1545
01:53:09,080 --> 01:53:10,480
to this value. Right.

1546
01:53:10,480 --> 01:53:13,200
But it's better to do it
at the rate of Yahoo!

1547
01:53:13,200 --> 01:53:15,600
No at that.
It will be common with everything

1548
01:53:15,720 --> 01:53:18,960
with Gmail, with Yahoo
will be the Hotmail entry.

1549
01:53:18,960 --> 01:53:21,800
It be everywhere, right?

1550
01:53:21,800 --> 01:53:23,960
Dot com will be everywhere.

1551
01:53:23,960 --> 01:53:28,080
But that's why we don't need this right
and dot com.

1552
01:53:28,480 --> 01:53:29,720
I can be anything

1553
01:53:31,760 --> 01:53:40,320
on so

1554
01:53:41,760 --> 01:53:43,560
guys in here Intel

1555
01:53:43,560 --> 01:53:48,600
is saying something intelligent
saying their tasker the condition username

1556
01:53:48,600 --> 01:53:54,080
is empty covered by subsequent condition
the introducing the task good.

1557
01:53:54,080 --> 01:53:57,200
If you are checking this condition,
you know what you are

1558
01:53:57,200 --> 01:54:00,840
already checking this condition
so you don't need this condition.

1559
01:54:01,160 --> 01:54:06,480
Do you want me to simplify this and I see
this remove unnecessary user name.

1560
01:54:06,480 --> 01:54:09,800
Dot is empty
and now it has simplified my if condition.

1561
01:54:10,320 --> 01:54:15,600
So when you guys will be writing complex
conditions intelligible simplified those

1562
01:54:15,600 --> 01:54:20,840
when you will be using wrong concepts,
it will be it will help you out.

1563
01:54:21,080 --> 01:54:27,320
Try to do that in eclipse and eclipse is
super is okay with everything.

1564
01:54:27,360 --> 01:54:29,920
You don't write anything
you will not complete.

1565
01:54:30,680 --> 01:54:34,160
How about nested if conditions
if for two conditions?

1566
01:54:34,840 --> 01:54:37,360
Yes, you can use the nested as well.

1567
01:54:37,360 --> 01:54:42,640
I mean user can in the name
where the Yahoo is.

1568
01:54:42,640 --> 01:54:47,920
I mean user can in its name
the Yahoo word.

1569
01:54:47,920 --> 01:54:49,560
Oh yes. Organ. Yes. Yes.

1570
01:54:49,560 --> 01:54:50,560
You are right.

1571
01:54:50,560 --> 01:54:53,160
Yes some someone can can do that as well.

1572
01:54:53,440 --> 01:54:55,240
You will be a good test of you.

1573
01:54:55,240 --> 01:54:56,720
You cover all the edges.

1574
01:54:56,720 --> 01:55:00,560
Guess this is.

1575
01:55:00,560 --> 01:55:01,920
Yes, you are right.

1576
01:55:01,920 --> 01:55:07,640
Let me prove that you
you will be a good test.

1577
01:55:07,640 --> 01:55:10,560
So you see Google test
and they cover all the cases.

1578
01:55:11,240 --> 01:55:18,240
Why can't they know?

1579
01:55:18,240 --> 01:55:21,840
As long as it does not give us error
we use if or

1580
01:55:22,440 --> 01:55:26,360
and instead conditions.

1581
01:55:26,360 --> 01:55:29,600
So like now I was asking
how do we know where

1582
01:55:29,600 --> 01:55:33,200
to implement
implementation setter or getter?

1583
01:55:33,600 --> 01:55:35,760
You should always
implement setter and getter.

1584
01:55:37,080 --> 01:55:39,120
You should
always implement a good translator.

1585
01:55:39,120 --> 01:55:43,320
Always try to make your fears
private, implement together and setter.

1586
01:55:43,360 --> 01:55:47,280
Never ever allow anyone
to set the values to your feels bad.

1587
01:55:47,640 --> 01:55:51,240
That's why it's the fourth pillar
of object oriented programing

1588
01:55:52,000 --> 01:55:55,800
they have given this
this concept a complete pillar.

1589
01:55:55,800 --> 01:55:57,840
It's a complete pillar in loops.

1590
01:55:57,840 --> 01:56:01,280
There is a reason Is a pillar.

1591
01:56:01,280 --> 01:56:04,400
If name should be less
greater than six required.

1592
01:56:04,400 --> 01:56:08,520
Or do we still need code for check,
empty or not? Yes.

1593
01:56:08,520 --> 01:56:13,640
Then you will be needing because are not
know if length is greater than six.

1594
01:56:14,000 --> 01:56:16,880
You is understood that this this

1595
01:56:18,000 --> 01:56:21,120
this name is not empty right?

1596
01:56:21,120 --> 01:56:25,440
If something is greater than having a
length greater than six, then it means the

1597
01:56:25,600 --> 01:56:26,880
third thing is not empty.

1598
01:56:28,560 --> 01:56:30,160
But it also depends on your condition.

1599
01:56:30,160 --> 01:56:32,280
Why is user
name door is empty and necessity?

1600
01:56:32,760 --> 01:56:36,480
Because even if so, even if this length

1601
01:56:36,960 --> 01:56:39,920
this username is empty is still
this condition will be true.

1602
01:56:40,440 --> 01:56:43,080
So this condition is covering
both the conditions.

1603
01:56:43,680 --> 01:56:52,800
You do not need to explicitly write
that condition.

1604
01:56:52,800 --> 01:56:53,600
Less code.

1605
01:56:53,600 --> 01:56:58,000
Better code.

1606
01:56:58,000 --> 01:57:00,240
And then for the password

1607
01:57:01,320 --> 01:57:03,120
I can also do the same.

1608
01:57:03,120 --> 01:57:09,080
If password

1609
01:57:10,920 --> 01:57:12,880
not length

1610
01:57:12,880 --> 01:57:21,360
is less than six,

1611
01:57:21,360 --> 01:57:24,920
we are going to be great developers,
hopefully inshallah

1612
01:57:26,600 --> 01:57:28,760
because you guys have me right. Why?

1613
01:57:28,760 --> 01:57:30,840
Why not developers? User

1614
01:57:33,000 --> 01:57:34,680
password

1615
01:57:35,240 --> 01:57:37,880
cannot be empty
or less than six characters

1616
01:57:38,640 --> 01:57:40,520
otherwise

1617
01:57:42,160 --> 01:57:47,560
we oops.

1618
01:57:47,560 --> 01:57:51,760
We have to
but we have to check another condition

1619
01:57:51,760 --> 01:57:56,280
in the in the
in the in the case of password so if

1620
01:57:58,440 --> 01:58:00,360
if my

1621
01:58:00,360 --> 01:58:02,960
password contains

1622
01:58:04,200 --> 01:58:06,240
username

1623
01:58:15,600 --> 01:58:19,560
then one more printout

1624
01:58:19,880 --> 01:58:22,240
password cannot

1625
01:58:22,240 --> 01:58:24,400
contain the username.

1626
01:58:24,520 --> 01:58:25,200
All right.

1627
01:58:26,040 --> 01:58:28,760
That sounded so not optimistic us

1628
01:58:28,800 --> 01:58:32,160
that you are not sure about us

1629
01:58:32,600 --> 01:58:33,520
if. No, no.

1630
01:58:33,520 --> 01:58:36,560
I am hundred percent
sure you guys are doing much better

1631
01:58:36,560 --> 01:58:44,840
as compared to batch then believe me,

1632
01:58:44,840 --> 01:58:49,200
I actually don't tell this to students
because then the students they get lazy.

1633
01:58:49,200 --> 01:58:57,160
So I always tell them
you guys are doing very bad.

1634
01:58:57,160 --> 01:58:59,400
We cannot both conditions in the first.

1635
01:58:59,400 --> 01:59:02,880
If we can, we can,

1636
01:59:02,880 --> 01:59:03,600
we can.

1637
01:59:03,600 --> 01:59:07,320
But then if any of the conditions is met.

1638
01:59:07,680 --> 01:59:11,720
AMR, the user will not be able

1639
01:59:11,720 --> 01:59:16,280
to find out easily
which condition are was not met.

1640
01:59:16,280 --> 01:59:18,560
That's
why he or she is getting that error.

1641
01:59:18,960 --> 01:59:21,720
So yes, you can put multiple conditions
in here as well.

1642
01:59:22,160 --> 01:59:26,880
But but it's always better to check
conditions separately

1643
01:59:27,040 --> 01:59:30,960
and then print out separate messages
for each of the conditions

1644
01:59:30,960 --> 01:59:34,680
so that whenever the other developers
or testers,

1645
01:59:34,680 --> 01:59:39,040
whenever they will be using your code,
they can instantly find out what is

1646
01:59:39,720 --> 01:59:45,640
what were what went wrong,
but not the best batch.

1647
01:59:45,640 --> 01:59:46,720
Right?

1648
01:59:46,720 --> 01:59:49,200
So best batch, it will depend

1649
01:59:49,800 --> 01:59:53,120
once you guys are done with your cucumber.

1650
01:59:53,120 --> 01:59:57,360
So we will be giving you projects
and you guys

1651
01:59:57,640 --> 02:00:01,000
will be working in beams and you guys
will be implementing your projects.

1652
02:00:01,120 --> 02:00:05,880
Then I can tell you if you are the best
or not, that that's have

1653
02:00:05,880 --> 02:00:09,960
the actual test is is there a difference
between elseif and else?

1654
02:00:10,200 --> 02:00:13,520
If yes, if you are.

1655
02:00:14,120 --> 02:00:15,360
And so in here,

1656
02:00:16,360 --> 02:00:18,480
if you are not using the brackets,

1657
02:00:18,480 --> 02:00:22,360
then we can only write one statement.

1658
02:00:22,360 --> 02:00:24,240
So the second approach

1659
02:00:24,240 --> 02:00:27,720
in which you are using these parentheses,
this one is the recommended one.

1660
02:00:27,720 --> 02:00:30,240
You should always use this one.

1661
02:00:30,240 --> 02:00:31,520
So we still have a chance.

1662
02:00:31,520 --> 02:00:47,120
Yes, you guys still have 3 to 4 weeks.

1663
02:00:47,120 --> 02:00:49,200
What two alone is?

1664
02:00:49,200 --> 02:00:51,240
Those projects will be in Java.

1665
02:00:51,440 --> 02:00:53,400
Definitely they will be in Java.

1666
02:00:53,400 --> 02:00:55,040
No they, they will be in Arabic.

1667
02:00:55,040 --> 02:00:58,720
Said if all those projects
they will be in Arabic.

1668
02:00:58,720 --> 02:01:07,240
I am changing my code completely,

1669
02:01:07,240 --> 02:01:12,840
but only if you will repeat
static question each class.

1670
02:01:12,840 --> 02:01:14,880
I am not repeating that question

1671
02:01:17,120 --> 02:01:18,040
before.

1672
02:01:19,560 --> 02:01:21,240
So are there any questions guys

1673
02:01:21,240 --> 02:01:26,920
ready to this task?

1674
02:01:26,920 --> 02:01:28,320
I am sure it is.

1675
02:01:28,320 --> 02:01:32,600
Still, if I ask that question again,
50% to 50% of

1676
02:01:32,600 --> 02:01:41,200
you will answer it wrong wrong.

1677
02:01:41,200 --> 02:01:44,040
NOI as a class,
you guys are doing great, by the way.

1678
02:01:44,240 --> 02:01:46,640
I'm not kidding. As a class,
you guys are doing great.

1679
02:01:46,920 --> 02:01:49,960
The responses that I get from you.

1680
02:01:49,960 --> 02:01:53,760
So other than Sorbonne
and Maryam is not available in here

1681
02:01:53,760 --> 02:01:58,680
and now they are the fastest, but they are
most of the time they are wrong.

1682
02:01:58,840 --> 02:02:01,480
So there is a dojo on this as well.

1683
02:02:01,480 --> 02:02:04,480
So in the interview,
the guy asked you What is your

1684
02:02:05,600 --> 02:02:06,240
best skill?

1685
02:02:06,240 --> 02:02:09,920
The the candidate says, I am very far,

1686
02:02:09,920 --> 02:02:13,080
very fast at the Met.

1687
02:02:13,080 --> 02:02:16,160
The interview say what is 2345 into 59?

1688
02:02:16,920 --> 02:02:19,400
The candidate replies, It's 23.

1689
02:02:20,520 --> 02:02:23,520
Then the interviewer said, It's
not even close.

1690
02:02:23,680 --> 02:02:27,040
So then then candidate says,
But it was fast, right?

1691
02:02:27,360 --> 02:02:30,720
So you guys are at least fast
you guys are responding fast.

1692
02:02:30,720 --> 02:02:35,000
It does not matter
if it's very fast in wrong answer

1693
02:02:36,040 --> 02:02:44,520
It gets.

1694
02:02:44,520 --> 02:02:46,440
So it's also a skill, right?

1695
02:02:46,440 --> 02:02:49,080
It's also a skill at least.

1696
02:02:49,240 --> 02:02:53,480
At least it gives encouragement to
the instructor that someone is responding.

1697
02:02:53,480 --> 02:02:54,120
Right.

1698
02:02:54,360 --> 02:02:59,440
The still that is good.

1699
02:02:59,440 --> 02:03:01,640
And those who condition is right,

1700
02:03:02,880 --> 02:03:07,240
they would not know the right answer
either if they are making it up.

1701
02:03:07,240 --> 02:03:09,320
So any close answer would do that.

1702
02:03:10,680 --> 02:03:12,720
Yes. Then we met interviewers.

1703
02:03:12,720 --> 02:03:14,760
They they usually have the answers

1704
02:03:14,760 --> 02:03:18,240
in front of them
when they are sitting in the interviews.

1705
02:03:18,240 --> 02:03:23,280
Are we fast or or we are fast?

1706
02:03:23,280 --> 02:03:24,960
Okay, so should we move to the next stop?

1707
02:03:24,960 --> 02:03:35,560
They look.

1708
02:03:35,640 --> 02:03:57,480
It was fast right?

1709
02:03:57,480 --> 02:04:07,560
Fast and furious. So.

1710
02:04:07,960 --> 02:04:10,640
Okay, let's move to the next oh,

1711
02:04:10,640 --> 02:04:13,560
it's already 1235 and we have to cover

1712
02:04:14,520 --> 02:04:17,040
some concepts as well.

1713
02:04:17,040 --> 02:04:34,080
Did you guys like the videos that I hear?

1714
02:04:34,080 --> 02:04:36,960
Yeah. So for at least make sense.

1715
02:04:37,040 --> 02:04:40,920
Sorry, I actually
I didn't want to post it earlier because

1716
02:04:42,000 --> 02:04:45,000
I thought there will be so many postings
related to selenium

1717
02:04:45,000 --> 02:04:47,760
and the video will be

1718
02:04:48,280 --> 02:04:50,440
but under something

1719
02:04:50,440 --> 02:04:52,960
under these code
and these, these announcements.

1720
02:04:53,400 --> 02:04:57,200
But then I forgot and forgot about that
and then that's why I didn't

1721
02:04:57,960 --> 02:05:17,480
posted.

1722
02:05:17,480 --> 02:05:25,640
So let's create a car class.

1723
02:05:25,640 --> 02:05:29,480
You always show us the simple way,
then show us the smarter way

1724
02:05:29,480 --> 02:05:31,080
like the edit in the earliest.

1725
02:05:31,080 --> 02:05:37,400
Yes, incremental step by step.

1726
02:05:37,400 --> 02:05:39,120
Not feeling too well.

1727
02:05:39,120 --> 02:05:42,000
Kids and I are sick.

1728
02:05:43,560 --> 02:05:45,160
May or may you feel better?

1729
02:05:45,160 --> 02:05:45,880
Give me

1730
02:05:50,280 --> 02:05:53,040
when you told me that you just don't need

1731
02:05:53,160 --> 02:05:54,560
all the words

1732
02:06:02,560 --> 02:06:10,240
like the best interest

1733
02:06:10,280 --> 02:06:13,080
in our selenium class yet

1734
02:06:17,120 --> 02:06:19,320
so create a class car

1735
02:06:19,320 --> 02:06:23,720
that would have the following four years
car price and color.

1736
02:06:24,000 --> 02:06:27,240
So let me put double

1737
02:06:29,760 --> 02:06:33,480
car rise

1738
02:06:33,600 --> 02:06:37,080
and by the way,

1739
02:06:37,080 --> 02:06:41,360
did you guys ask them before
making names on their names on him?

1740
02:06:41,760 --> 02:06:45,240
I don't know about the other instructors,
whether they like the names

1741
02:06:45,240 --> 02:06:46,760
on them or not.

1742
02:06:46,760 --> 02:06:48,160
I am totally fine with that.

1743
02:06:48,160 --> 02:06:53,280
But I ask these instructors
before you do that, it

1744
02:06:54,640 --> 02:06:56,560
is fine to

1745
02:06:59,440 --> 02:07:01,360
I have saved some work for them.

1746
02:07:01,360 --> 02:07:03,840
He already did mean for himself.

1747
02:07:04,200 --> 02:07:10,680
He said they like me
and when they are not about to.

1748
02:07:10,680 --> 02:07:15,360
And so create a car price, color
and method.

1749
02:07:15,960 --> 02:07:18,680
Calculate sales price

1750
02:07:38,840 --> 02:07:42,120
as long as
we have got the best in group instructors,

1751
02:07:42,240 --> 02:07:49,960
but not tons.

1752
02:07:49,960 --> 02:07:53,040
Did you guys create created
this method as void

1753
02:07:53,040 --> 02:07:59,400
or double, but you didn't ask us before

1754
02:07:59,520 --> 02:08:04,200
and bring those reports straight.

1755
02:08:04,200 --> 02:08:08,240
Yes, it for that is

1756
02:08:14,720 --> 02:08:17,440
a little

1757
02:08:20,640 --> 02:08:22,800
let's have a default implementation

1758
02:08:23,040 --> 02:08:25,920
in which we only

1759
02:08:25,920 --> 02:08:28,920
return the car price without anything.

1760
02:08:28,920 --> 02:08:31,920
And let me also create a constructor

1761
02:08:33,080 --> 02:08:35,480
generated constructor

1762
02:08:38,400 --> 02:08:41,160
and let's now create the

1763
02:08:43,760 --> 02:08:45,320
Apprize of God.

1764
02:08:45,320 --> 02:08:46,480
Create two subclasses.

1765
02:08:46,480 --> 02:08:48,600
So Don and Truck

1766
02:08:48,920 --> 02:08:52,760
will not be better
if we create this instead of this car.

1767
02:08:52,760 --> 02:08:57,200
If we say vehicle, class or trucks,
They also fall

1768
02:08:57,200 --> 02:09:13,320
under the car category.

1769
02:09:13,320 --> 02:09:14,840
They are also fallen into the category.

1770
02:09:14,840 --> 02:09:19,200
You are the master
personal truck is calling car vehicle.

1771
02:09:19,200 --> 02:09:21,480
What we have I think what he is better

1772
02:09:23,400 --> 02:09:24,200
let me change

1773
02:09:24,200 --> 02:09:29,040
to recap.

1774
02:09:29,040 --> 02:09:31,080
Oh, actually I'm not the master of cars

1775
02:09:32,400 --> 02:09:44,280
This in my opinion,

1776
02:09:44,280 --> 02:09:56,760
this is better.

1777
02:09:56,760 --> 02:09:59,520
The default implementation

1778
02:10:01,240 --> 02:10:08,480
then we have to create two classes
sedan and truck.

1779
02:10:08,760 --> 02:10:12,560
The truck class has filled as wait

1780
02:10:12,560 --> 02:10:17,040
and have its own implementation
of calculate cars.

1781
02:10:17,160 --> 02:10:19,600
Okay so

1782
02:10:20,960 --> 02:10:23,960
class and then so your don.

1783
02:10:23,960 --> 02:10:26,800
But we didn't use color for the folder

1784
02:10:28,080 --> 02:10:30,160
you guys didn't use color
in any of the features

1785
02:10:35,680 --> 02:10:36,280
you guys didn't

1786
02:10:36,280 --> 02:10:48,120
use the spirit.

1787
02:10:48,120 --> 02:10:50,680
Okay let's remove this

1788
02:10:50,680 --> 02:10:52,600
and unnecessary

1789
02:10:53,200 --> 02:11:15,960
and looking to move it from as well.

1790
02:11:15,960 --> 02:11:19,240
But so

1791
02:11:21,360 --> 02:11:24,800
it expands the rear he girl

1792
02:11:26,240 --> 02:11:29,160
he only in the start

1793
02:11:32,000 --> 02:11:34,920
suburban but you would want from me

1794
02:11:35,080 --> 02:11:39,920
you want me to retain that a little feel
you want me to remove that will

1795
02:11:41,280 --> 02:11:43,480
actually
let me read the all the requirements

1796
02:11:44,560 --> 02:11:48,600
So down track the class has filled
as we can has its own implementation

1797
02:11:48,720 --> 02:11:51,000
of the person
that are going to be in place.

1798
02:11:53,200 --> 02:11:54,720
So what?

1799
02:11:54,720 --> 02:11:56,480
We don't need that

1800
02:11:57,320 --> 02:11:57,640
right.

1801
02:11:57,640 --> 02:12:00,760
But don't use it's useless.

1802
02:12:00,760 --> 02:12:04,560
And in in this class
why I'm getting an guys

1803
02:12:12,600 --> 02:12:14,520
in this sedan class Why

1804
02:12:14,520 --> 02:12:17,160
why I'm getting another great

1805
02:12:20,080 --> 02:12:22,480
need matching constructor.

1806
02:12:24,320 --> 02:12:25,560
You need a matching

1807
02:12:25,560 --> 02:12:28,680
constructor as individual class and.

1808
02:12:28,680 --> 02:12:33,800
There is is there any additional field
in the in the sedan class?

1809
02:12:33,800 --> 02:12:36,120
Yes, it's the

1810
02:12:38,480 --> 02:12:39,360
length fill.

1811
02:12:39,360 --> 02:12:58,480
Right.

1812
02:12:58,480 --> 02:13:01,600
This door blend is equal

1813
02:13:01,600 --> 02:13:06,760
to length.

1814
02:13:06,760 --> 02:13:12,360
My messages long standing.

1815
02:13:12,360 --> 02:13:12,960
Okay.

1816
02:13:12,960 --> 02:13:18,600
And then I have to provide
my own implementation for the sedan class.

1817
02:13:18,600 --> 02:13:27,400
How can I do that?

1818
02:13:27,400 --> 02:13:28,120
What is the

1819
02:13:29,880 --> 02:13:30,920
override?

1820
02:13:30,920 --> 02:13:36,680
Right,
I, I can override that, calculate my.

1821
02:13:36,680 --> 02:13:40,920
And inside this method
I have the requirements.

1822
02:13:40,920 --> 02:13:46,520
If length is greater than 20,
then the item

1823
02:13:46,520 --> 02:13:51,960
car price should include 5% discount,
otherwise 10% discount.

1824
02:13:52,680 --> 02:13:59,200
So if land is greater than 20, then
5% discount. How?

1825
02:13:59,200 --> 02:14:01,920
How can I calculate the discount based

1826
02:14:20,200 --> 02:14:25,520
the return?

1827
02:14:25,520 --> 02:14:27,560
Only the

1828
02:14:27,760 --> 02:14:30,760
95% of the original price

1829
02:14:32,120 --> 02:14:51,600
ls return 90%.

1830
02:14:51,600 --> 02:14:53,640
And then we have

1831
02:14:56,720 --> 02:15:00,360
the class rock

1832
02:15:01,560 --> 02:15:03,480
extends

1833
02:15:05,880 --> 02:15:07,800
the magical

1834
02:15:08,720 --> 02:15:12,000
have to provide a matching constructor

1835
02:15:12,840 --> 02:15:15,200
should have its own fear

1836
02:15:30,480 --> 02:15:33,000
like this.

1837
02:15:33,000 --> 02:15:34,600
And in here I have.

1838
02:15:34,600 --> 02:15:37,040
I want to again override this

1839
02:15:38,160 --> 02:15:40,480
and the conditions are

1840
02:15:44,880 --> 02:15:47,840
if rate is more than 2000,

1841
02:15:47,840 --> 02:15:50,920
then return
price would include 10% discount.

1842
02:15:50,920 --> 02:15:52,360
Otherwise 20%.

1843
02:15:52,360 --> 02:15:54,400
So if we wait

1844
02:15:58,800 --> 02:15:59,480
is greater

1845
02:15:59,480 --> 02:16:07,240
than 2000.

1846
02:16:07,240 --> 02:16:08,280
Looking at the copied

1847
02:16:17,960 --> 02:16:22,080
word and 2090

1848
02:16:24,360 --> 02:16:26,680
Otherwise, if the

1849
02:16:31,080 --> 02:16:32,520
or you are using

1850
02:16:32,520 --> 02:16:37,280
the shorthand operator for the
if conditions.

1851
02:16:37,280 --> 02:16:39,800
I didn't teach you about that. Right.

1852
02:16:40,440 --> 02:16:43,400
Do you guys want to learn that

1853
02:16:47,160 --> 02:16:51,520
so yes that there's also good

1854
02:16:51,840 --> 02:16:54,520
I think there is
there must be an option in here

1855
02:16:54,520 --> 02:17:18,480
as well.

1856
02:17:18,480 --> 02:17:19,520
Oh, here we go.

1857
02:17:19,520 --> 02:17:23,080
Replace if else, with this shorthand

1858
02:17:23,080 --> 02:17:26,160
operator.

1859
02:17:26,160 --> 02:17:28,160
Oh, intelligent has old.

1860
02:17:28,160 --> 02:17:34,080
So this is called the shorthand operator
for the effects condition.

1861
02:17:34,080 --> 02:17:38,520
So if you are you guys see in your here
we are writing four lines

1862
02:17:38,520 --> 02:17:41,680
for to five lines
but these can be replaced

1863
02:17:43,400 --> 02:17:45,040
by the short hand operator

1864
02:17:45,040 --> 02:17:49,480
and how this works.

1865
02:17:49,480 --> 02:17:53,160
How did you do that?

1866
02:17:53,160 --> 02:17:57,600
Let me let me first explain it
and then I will tell you how to do that.

1867
02:17:57,880 --> 02:18:03,160
So in here we are checking
if it is greater than 2000.

1868
02:18:03,160 --> 02:18:07,720
And then this question mark,
then we are saying do this operation.

1869
02:18:08,920 --> 02:18:09,320
If this

1870
02:18:09,320 --> 02:18:12,400
condition is true, this condition
that we are mentioning before

1871
02:18:12,400 --> 02:18:16,880
this question, mark, if that condition
is true, execute this part.

1872
02:18:17,440 --> 02:18:20,120
Otherwise, we are specifying this column.

1873
02:18:20,120 --> 02:18:22,840
Specify this block, okay.

1874
02:18:23,200 --> 02:18:25,080
And return this value.

1875
02:18:25,080 --> 02:18:27,680
And this value will be returned
from this method. So

1876
02:18:32,960 --> 02:18:36,400
if you select this piece of code
and if you click on this button

1877
02:18:36,480 --> 02:18:50,160
icon, then you will see

1878
02:18:50,200 --> 02:18:54,440
this option that says replace
if else with question mark and short.

1879
02:18:54,440 --> 02:18:58,240
Then you make a command old one

1880
02:18:58,240 --> 02:19:02,200
and copy it and convert short
once a week and see both.

1881
02:19:02,480 --> 02:19:05,040
Oh yes, yes. Let me do that.

1882
02:19:05,040 --> 02:19:12,640
So this is the old one.

1883
02:19:12,640 --> 02:19:15,360
This is the new one I select.

1884
02:19:15,360 --> 02:19:21,280
Oops,

1885
02:19:21,280 --> 02:19:24,840
I select this

1886
02:19:24,840 --> 02:19:27,320
oops.

1887
02:19:27,320 --> 02:19:30,040
And then I click on this. Well,

1888
02:19:31,800 --> 02:19:32,240
let me

1889
02:19:32,240 --> 02:19:40,280
do double.

1890
02:19:40,280 --> 02:19:41,440
Oh, no, no.

1891
02:19:41,760 --> 02:19:43,800
I don't want this

1892
02:19:53,520 --> 02:19:55,960
to be the last line

1893
02:19:55,960 --> 02:20:05,760
or it is not fit.

1894
02:20:05,760 --> 02:20:09,880
Remove press is on

1895
02:20:10,080 --> 02:20:12,000
and then

1896
02:20:14,320 --> 02:20:14,920
let me

1897
02:20:14,920 --> 02:20:23,960
exclude boot.

1898
02:20:23,960 --> 02:20:26,640
No or not

1899
02:20:28,800 --> 02:20:30,240
extract my third one.

1900
02:20:30,240 --> 02:20:33,000
Yes, I

1901
02:20:37,320 --> 02:20:48,000
or it is not appearing now.

1902
02:20:48,000 --> 02:20:49,920
So do you guys.

1903
02:20:50,280 --> 02:20:52,880
I think you should select
the upper bracket as well.

1904
02:20:54,120 --> 02:21:01,120
No, I don't think so.

1905
02:21:01,120 --> 02:21:03,800
Okay, let's do it manually.

1906
02:21:03,800 --> 02:21:08,560
So let me comment this out
and then for me,

1907
02:21:09,480 --> 02:21:12,000
there must be something wrong
in my intelligence.

1908
02:21:12,320 --> 02:21:15,640
So and this is how we can specify this.

1909
02:21:15,840 --> 02:21:20,000
So let's for example,
I have a double variable.

1910
02:21:20,880 --> 02:21:23,160
Mine is same in walk

1911
02:21:23,160 --> 02:21:29,080
and on on on base on on
if I want to write an effect condition.

1912
02:21:29,600 --> 02:21:30,320
Okay.

1913
02:21:30,480 --> 02:21:33,560
So what I can do, the condition

1914
02:21:33,560 --> 02:21:38,920
that I was specifying in here,
I can copy this condition here

1915
02:21:39,360 --> 02:21:42,600
and then I need to write

1916
02:21:42,600 --> 02:21:44,960
a question mark like this

1917
02:21:45,680 --> 02:21:51,480
and then I specify this part
which I have to write inside

1918
02:21:53,240 --> 02:21:54,200
the if part.

1919
02:21:54,200 --> 02:21:54,480
Okay.

1920
02:21:54,480 --> 02:21:58,240
If the if condition is true,
whatever I want to do inside

1921
02:21:58,240 --> 02:22:01,760
that,
I write that line in here, then Colon,

1922
02:22:02,880 --> 02:22:07,920
and then I write the as part in there.

1923
02:22:08,120 --> 02:22:11,560
Now this if condition will be evaluated
and whatever

1924
02:22:11,600 --> 02:22:15,640
the results are,
they will be stored inside this.

1925
02:22:15,640 --> 02:22:16,360
Okay?

1926
02:22:16,360 --> 02:22:20,520
And if you are only returning this value,
you guys don't need to store it

1927
02:22:20,520 --> 02:22:22,920
in a variable.
You can directly return this as that.

1928
02:22:23,320 --> 02:22:26,600
So these results,
they are returned by this operator.

1929
02:22:27,120 --> 02:22:27,760
Okay.

1930
02:22:28,200 --> 02:22:31,560
And you can return it from the method
or you can store it inside a variable.

1931
02:22:31,560 --> 02:22:33,520
Can we add more else conditions?

1932
02:22:33,520 --> 02:22:37,440
No. I mean, yes, inside this
you can write.

1933
02:22:38,280 --> 02:22:41,600
And so, for example,
you can write in here,

1934
02:22:41,960 --> 02:22:47,560
you can write if then is greater than 20,
you can write like this.

1935
02:22:47,560 --> 02:22:51,240
And then you are the question mark.

1936
02:22:51,560 --> 02:22:54,600
And then you can
specify something like. This

1937
02:22:57,560 --> 02:22:58,200
in here.

1938
02:22:58,200 --> 02:23:01,000
If you if this is the case,
you want to maybe

1939
02:23:02,240 --> 02:23:04,560
assign you want to do maybe something

1940
02:23:04,560 --> 02:23:14,160
with the vehicle, otherwise
you want to do something else in here.

1941
02:23:14,160 --> 02:23:19,040
So yes, you can have the nested
if felt conditions as well like this.

1942
02:23:19,040 --> 02:23:21,920
Oops.

1943
02:23:21,920 --> 02:23:22,320
Yeah.

1944
02:23:23,080 --> 02:23:27,920
So now if this condition is true, first
this part will be executed.

1945
02:23:27,920 --> 02:23:31,640
If this condition is not true now,
I will check this condition.

1946
02:23:31,640 --> 02:23:36,120
If this is true, this part will be
executed or otherwise this part executed.

1947
02:23:36,360 --> 02:23:37,000
Okay.

1948
02:23:37,520 --> 02:23:42,000
But I don't suggest to write nested
if conditions this shorthand operator.

1949
02:23:42,000 --> 02:23:44,800
Without it, it will not be that readable.

1950
02:23:44,880 --> 02:23:51,560
It will be less less readable.

1951
02:23:51,560 --> 02:23:53,040
And there is one more thing.

1952
02:23:53,040 --> 02:23:57,120
Maybe not everyone in your team
can understand this, this syntax.

1953
02:23:57,360 --> 02:24:01,440
So we always try write
easy code that everyone understands

1954
02:24:02,200 --> 02:24:05,160
and the shorthand operator is also not

1955
02:24:05,160 --> 02:24:08,440
present in other programing languages,
but this is false condition.

1956
02:24:08,440 --> 02:24:19,640
It is present everywhere.

1957
02:24:19,640 --> 02:24:23,560
And those who don't understand
this, it's not for you.

1958
02:24:24,840 --> 02:24:35,480
This isn't hard to understand.

1959
02:24:36,480 --> 02:24:38,840
Just just curious.

1960
02:24:38,840 --> 02:24:40,320
If it is hard to understand.

1961
02:24:40,320 --> 02:24:42,480
It's all because of dummy. Okay?

1962
02:24:42,720 --> 02:24:46,560
You're not me at the he.

1963
02:24:46,920 --> 02:24:51,120
He asked me to do this
if when you nested the

1964
02:24:51,120 --> 02:24:55,360
if you lost me, that

1965
02:24:55,360 --> 02:24:58,880
that's why I didn't
want you to have nested conditions

1966
02:25:06,040 --> 02:25:07,600
in Java with cover.

1967
02:25:07,600 --> 02:25:09,880
It is hard, but we will see it somewhere.

1968
02:25:09,880 --> 02:25:12,640
It is good to know. Yes. Yes. It's
a very good part.

1969
02:25:12,640 --> 02:25:15,560
I actually used to teach this
to previous batches.

1970
02:25:16,480 --> 02:25:20,720
Who did the review for ifthe conditions?

1971
02:25:20,720 --> 02:25:22,760
Did I do
the review for effects conditions?

1972
02:25:23,240 --> 02:25:25,480
Maybe I should have shown you this

1973
02:25:25,760 --> 02:25:28,360
in that review class

1974
02:25:29,520 --> 02:25:30,400
as well,

1975
02:25:31,480 --> 02:25:34,200
because I always try to put
these kind of things in

1976
02:25:34,240 --> 02:25:38,840
in the review classes,
not in the actual classes anyway.

1977
02:25:38,840 --> 02:25:40,200
Let's let's move forward.

1978
02:25:40,200 --> 02:25:42,560
But we have spent too much time

1979
02:25:43,920 --> 02:25:46,080
on this task and everything.

1980
02:25:46,080 --> 02:25:49,760
So this is how we implement
the lexical class

1981
02:25:49,760 --> 02:25:54,440
and let's create a test for class.

1982
02:25:54,440 --> 02:25:59,160
No one showed it.

1983
02:25:59,160 --> 02:26:01,520
And what you will do review for next batch

1984
02:26:02,680 --> 02:26:04,920
is so

1985
02:26:11,600 --> 02:26:14,160
in you guys sending me the code for test
for class quickly

1986
02:26:14,840 --> 02:26:17,160
so that we can forward

1987
02:26:21,440 --> 02:26:35,840
to you.

1988
02:26:36,520 --> 02:26:39,840
You guys are going to see a lot of things
and then you guys will be

1989
02:26:39,840 --> 02:26:41,040
searching on Google.

1990
02:26:41,040 --> 02:26:45,400
What is what is meant by
so what is meant by question

1991
02:26:45,400 --> 02:26:48,600
Mark ten weeks
and then putting conditions.

1992
02:26:48,760 --> 02:26:52,720
You will be setting something like that
because you guys will not be knowing

1993
02:26:52,720 --> 02:26:56,160
the proper terminology on the Google maps.

1994
02:26:56,720 --> 02:26:59,280
I am coming to Turkey in my shared
love experience.

1995
02:26:59,320 --> 02:27:04,640
That's great.

1996
02:27:04,640 --> 02:27:05,400
Me too.

1997
02:27:05,400 --> 02:27:12,560
AM In June or July.

1998
02:27:12,560 --> 02:27:15,480
Okay.
And what if you are hosting a party then?

1999
02:27:15,480 --> 02:27:19,920
I am also planning to do with the turkey.

2000
02:27:19,920 --> 02:27:22,440
Can you scroll up the parent class?

2001
02:27:22,440 --> 02:27:26,400
Yes, Emre can.

2002
02:27:26,400 --> 02:27:29,680
Dammit.

2003
02:27:29,680 --> 02:27:32,920
Nice time to list all I heard on the news.

2004
02:27:32,920 --> 02:27:34,160
There is some kind of

2005
02:27:35,480 --> 02:27:38,640
thunderstorm
or I don't know, some kind of bad,

2006
02:27:38,640 --> 02:27:53,240
very bad weather in Turkey these days.

2007
02:27:53,240 --> 02:27:55,680
I heard the winds are

2008
02:27:55,680 --> 02:28:01,840
a 150 mph or more than that.

2009
02:28:01,840 --> 02:28:04,120
Let's have a jello party.

2010
02:28:04,120 --> 02:28:06,640
Well, what is going on in what

2011
02:28:06,640 --> 02:28:07,280
we're going on?

2012
02:28:07,280 --> 02:28:09,920
Interesting days.

2013
02:28:09,960 --> 02:28:24,960
Can you send me the desperate class?

2014
02:28:24,960 --> 02:28:26,280
It's a picture here.

2015
02:28:26,280 --> 02:28:30,280
There was a storm last two days,
but It all calmed down.

2016
02:28:31,560 --> 02:28:32,640
Oh, my God.

2017
02:28:32,640 --> 02:28:53,440
Again, Polymorphism.

2018
02:28:53,440 --> 02:28:54,240
Yeah.

2019
02:28:54,240 --> 02:29:21,000
So let me quickly add security.

2020
02:29:21,000 --> 02:29:24,400
Yeah, you see, we can use that

2021
02:29:24,960 --> 02:29:27,520
around the method again in here
if we want.

2022
02:29:28,200 --> 02:29:29,400
So let's do.

2023
02:29:29,400 --> 02:29:31,400
That's all right.

2024
02:29:31,400 --> 02:29:33,720
Are there other tasks

2025
02:29:40,240 --> 02:29:41,440
one more

2026
02:29:41,880 --> 02:29:43,360
seriously

2027
02:29:43,960 --> 02:29:47,640
the picture on all my

2028
02:29:47,800 --> 02:29:51,200
okay let's let's do that in the next class

2029
02:29:52,720 --> 02:29:54,680
I get as we will be spending

2030
02:29:54,680 --> 02:29:58,200
all the time on those products
and will not be learning anything new.

2031
02:29:58,240 --> 02:30:01,160
Remind me in the next class.
I will do that in the next clip.

2032
02:30:02,160 --> 02:30:03,960
So let's have a break

2033
02:30:03,960 --> 02:30:07,600
and I'm giving you a 20 minute break
because I want you to watch those videos.

2034
02:30:07,680 --> 02:30:10,000
I think they are hardly 5 to 6 minutes.

2035
02:30:10,000 --> 02:30:15,680
Where do you.

2036
02:30:15,680 --> 02:30:19,880
Okay.

2037
02:30:19,880 --> 02:30:22,560
That's what I said
when you centered in the first time

2038
02:30:24,960 --> 02:30:27,080
you do, you go to.

2039
02:30:27,080 --> 02:30:31,320
No, actually, I am running out of time
and I have to teach the class as well.

2040
02:30:31,600 --> 02:30:34,560
So that's why otherwise I always love

2041
02:30:34,560 --> 02:30:39,120
coding.

2042
02:30:39,120 --> 02:30:42,400
So please be back by 123
and watch those videos guys, please.

2043
02:30:42,600 --> 02:30:56,480
And reminding me about the recording.

2044
02:30:56,480 --> 02:31:00,720
All right, so let me close

2045
02:31:00,720 --> 02:31:25,520
these classes.

2046
02:31:25,520 --> 02:31:27,920
Are we going to repeat ArrayList?

2047
02:31:29,760 --> 02:31:38,360
Did you guys do you guys know about the.

2048
02:31:38,360 --> 02:31:40,280
Did I teach you about the list?

2049
02:31:40,280 --> 02:31:41,880
No, of course.

2050
02:31:41,880 --> 02:31:43,520
We will be learning about the ArrayList.

2051
02:31:43,520 --> 02:31:44,680
We not be repeating,

2052
02:31:46,120 --> 02:31:47,920
but it's

2053
02:32:01,640 --> 02:32:02,160
all right.

2054
02:32:02,160 --> 02:32:04,880
So today we will be starting the

2055
02:32:06,680 --> 02:32:09,080
collections framework.

2056
02:32:09,080 --> 02:32:13,800
And before I teach you
about the collection, some framework.

2057
02:32:13,840 --> 02:32:14,160
Nice.

2058
02:32:14,160 --> 02:32:19,000
Tell me if I have to score a single value

2059
02:32:20,400 --> 02:32:24,760
in Java, what should I use?

2060
02:32:24,760 --> 02:32:27,720
If I have to store a single value?
It can be a string.

2061
02:32:27,720 --> 02:32:30,480
It can be an integer double.

2062
02:32:31,240 --> 02:32:33,760
I use variables. All right.

2063
02:32:33,760 --> 02:32:40,840
So let's say for example,
if I have to store the name, I can use

2064
02:32:42,600 --> 02:32:44,760
a variable right like this.

2065
02:32:45,720 --> 02:32:50,880
But if I have to, all the names

2066
02:32:52,840 --> 02:32:55,440
of the students
that are present in this class,

2067
02:32:57,240 --> 02:32:59,760
will it be

2068
02:32:59,760 --> 02:33:03,760
a good idea to use variables

2069
02:33:03,760 --> 02:33:10,040
or should I use something else?

2070
02:33:10,040 --> 02:33:15,760
So if I have to store multiple
names, it's not a good idea.

2071
02:33:15,800 --> 02:33:20,520
Not a good idea to use the variables

2072
02:33:21,000 --> 02:33:23,840
because each time

2073
02:33:23,840 --> 02:33:26,960
I have to come up with a different name
and essentially

2074
02:33:27,160 --> 02:33:31,760
I am doing I am always storing the names
of these students, right?

2075
02:33:32,080 --> 02:33:34,840
So in that case, I should be going

2076
02:33:40,280 --> 02:33:43,080
with adding right

2077
02:33:52,080 --> 02:33:56,880
like this.

2078
02:33:56,880 --> 02:33:58,480
So can you guys tell me?

2079
02:33:58,480 --> 02:34:00,720
Okay, so the add ins, they look good,

2080
02:34:00,720 --> 02:34:03,520
but there are some issues
as well with the ads.

2081
02:34:03,520 --> 02:34:05,600
Can you guys me the issues with the ads,

2082
02:34:05,760 --> 02:34:08,800
maybe there are some limitations
or maybe you guys

2083
02:34:09,960 --> 02:34:15,640
can point out
some deficiencies in the ads.

2084
02:34:15,640 --> 02:34:18,640
Can I can I store

2085
02:34:19,760 --> 02:34:20,960
single type?

2086
02:34:20,960 --> 02:34:23,960
You need the index

2087
02:34:23,960 --> 02:34:25,280
number to print.

2088
02:34:25,280 --> 02:34:28,800
So is it
is it a limitation that we have to

2089
02:34:30,680 --> 02:34:32,680
know the index to print out?

2090
02:34:33,720 --> 02:34:34,480
Here we go.

2091
02:34:34,480 --> 02:34:37,440
They are fixed in size, right?

2092
02:34:38,120 --> 02:34:48,240
So for this size of this.

2093
02:34:48,240 --> 02:34:51,520
So that index is also a problem,
but we will discuss that later.

2094
02:34:51,880 --> 02:34:54,720
Mohammad was mentioning this in the index.

2095
02:34:54,720 --> 02:34:57,840
So if I try

2096
02:34:58,520 --> 02:35:00,840
to store

2097
02:35:02,280 --> 02:35:03,720
a new element

2098
02:35:04,880 --> 02:35:05,920
inside this

2099
02:35:05,920 --> 02:35:13,080
area, will I

2100
02:35:13,080 --> 02:35:15,480
be able to do that? Guys

2101
02:35:20,240 --> 02:35:27,640
know if I execute the score,

2102
02:35:27,640 --> 02:35:32,520
I will be getting an exception
because areas

2103
02:35:54,360 --> 02:35:58,080
it is are fixed in size.

2104
02:35:58,080 --> 02:36:00,760
Okay.

2105
02:36:00,760 --> 02:36:03,040
Well, what are the other limitations
that you guys see

2106
02:36:35,240 --> 02:36:37,720
to change an area?

2107
02:36:37,720 --> 02:36:39,480
You have to do it manually.

2108
02:36:39,480 --> 02:36:40,800
What do you mean by change?

2109
02:36:40,800 --> 02:36:42,480
And at a moment

2110
02:36:45,200 --> 02:36:48,680
to remove

2111
02:36:48,680 --> 02:36:58,640
or add?

2112
02:36:58,640 --> 02:37:05,880
So, for example,
if so, the more limitations are

2113
02:37:05,920 --> 02:37:09,680
if I have a certain element
from this area,

2114
02:37:11,160 --> 02:37:13,840
what I have to do, guys,
if I have a certain element

2115
02:37:13,840 --> 02:37:23,280
from this area,

2116
02:37:23,280 --> 02:37:26,240
so either I should know the index

2117
02:37:27,280 --> 02:37:30,360
or I have to write a far

2118
02:37:30,360 --> 02:37:39,760
look to search element
from this area right.

2119
02:37:39,760 --> 02:37:41,320
And what if

2120
02:37:43,960 --> 02:37:46,840
I want to replace an element

2121
02:37:48,120 --> 02:37:48,840
again?

2122
02:37:48,840 --> 02:37:54,240
First I have to search that element,
then I have to find that element out,

2123
02:37:54,240 --> 02:37:56,360
and then I have to replace that element.

2124
02:37:57,560 --> 02:38:00,080
And imagine this, guys.

2125
02:38:00,080 --> 02:38:02,920
Imagine you are an event planner.

2126
02:38:02,920 --> 02:38:05,280
So the ad is they are fixed in size.

2127
02:38:05,280 --> 02:38:08,400
If let's say you are expecting 200 guests

2128
02:38:08,920 --> 02:38:11,640
and if there are

2129
02:38:12,240 --> 02:38:16,440
210 guests shows up,
then you will be having an issue.

2130
02:38:16,440 --> 02:38:21,960
Let's say you arrange only for 200 guests,
but now there are 210 people right?

2131
02:38:21,960 --> 02:38:23,240
So you will be having an issue

2132
02:38:23,240 --> 02:38:27,600
or if you arrange for 200 people
and there are only 100

2133
02:38:27,600 --> 02:38:33,360
people are in the party,
so the 100 spaces they will be visited.

2134
02:38:33,840 --> 02:38:37,400
So for example, if you are using AD is

2135
02:38:38,440 --> 02:38:43,040
and you are declaring the so let's say you
don't know about decides in advance and

2136
02:38:44,920 --> 02:38:45,760
you declare the

2137
02:38:45,760 --> 02:38:48,160
size of the array, let's say maybe 1000,

2138
02:38:49,000 --> 02:38:52,520
but in actual
you are only using maybe, let's say

2139
02:38:52,520 --> 02:38:58,600
100 fields or 200 fields,
those 800 fields, they will be wasted.

2140
02:38:58,600 --> 02:39:01,320
The memory will be wasted
for those fields.

2141
02:39:01,320 --> 02:39:06,760
On the other hand, if you are, let's say,
having a size of 500 elements

2142
02:39:06,760 --> 02:39:10,600
inside an area and now you have to store

2143
02:39:10,600 --> 02:39:14,680
seven or 800, now you cannot do that.

2144
02:39:14,880 --> 02:39:18,960
You because the ad is they are full
and feared that a fixed in size.

2145
02:39:19,640 --> 02:39:25,880
So because of these major issues
and there is there is this third issue.

2146
02:39:25,880 --> 02:39:30,000
There are no matters building meters

2147
02:39:30,640 --> 02:39:36,480
already written methods that you guys
can use for example to certain element

2148
02:39:36,480 --> 02:39:40,320
or to insert something in between
or to remove an element

2149
02:39:40,320 --> 02:39:43,640
from a certain location
and this kind of thing. So

2150
02:39:45,040 --> 02:39:45,720
due to these

2151
02:39:45,720 --> 02:39:49,120
limitations, Java guys have created
something

2152
02:39:49,480 --> 02:39:54,920
known as ADD Alias and it's present
inside the collection framework.

2153
02:39:55,800 --> 02:39:58,320
And those really is

2154
02:39:58,320 --> 02:40:01,560
before we discussed the ArrayList
or the collection frame.

2155
02:40:01,560 --> 02:40:06,000
But can you repeat line
16, Line 16 in here,

2156
02:40:06,000 --> 02:40:08,760
the NCAI is lost two loops

2157
02:40:09,320 --> 02:40:12,360
and I was trying to store a third element

2158
02:40:13,560 --> 02:40:15,080
in here then.

2159
02:40:15,080 --> 02:40:19,760
That's why I got the error, the

2160
02:40:21,560 --> 02:40:26,040
common practice of our culture.

2161
02:40:26,040 --> 02:40:28,840
So what I can do

2162
02:40:30,280 --> 02:40:32,480
instead of using ADD is

2163
02:40:32,640 --> 02:40:35,080
I can have something

2164
02:40:35,680 --> 02:40:39,800
known as add a list
and this is how we declare the ADD.

2165
02:40:40,000 --> 02:40:42,320
So it's a class.

2166
02:40:42,320 --> 02:40:45,800
So I can say ArrayList and I use.

2167
02:40:45,840 --> 02:40:55,560
Have you guys seen these angle brackets
before?

2168
02:40:55,560 --> 02:40:57,920
Okay, it

2169
02:40:58,920 --> 02:41:01,200
so these are called a genetics.

2170
02:41:01,760 --> 02:41:03,440
These are called genetics.

2171
02:41:03,440 --> 02:41:06,280
And in this collection

2172
02:41:06,280 --> 02:41:10,440
framework, it uses genetics heavily.

2173
02:41:10,440 --> 02:41:12,960
This would be
this is also called a diamond operator.

2174
02:41:12,960 --> 02:41:15,000
So this is a diamond operator.

2175
02:41:15,000 --> 02:41:20,880
So for example, with the added
we specify the data type, the type of data

2176
02:41:20,880 --> 02:41:26,200
that we will be sporting in the edit,
we specify it before, before

2177
02:41:27,360 --> 02:41:28,960
name of the addy.

2178
02:41:28,960 --> 02:41:32,400
But in ArrayList
we have to specify this data

2179
02:41:32,400 --> 02:41:39,240
type inside this diamond operator,
and then

2180
02:41:41,040 --> 02:41:43,560
we give the name to our ArrayList.

2181
02:41:43,560 --> 02:41:46,160
Okay, maybe let's call it

2182
02:41:48,760 --> 02:41:50,760
list of names.

2183
02:41:51,080 --> 02:41:54,400
Okay. Diamond.

2184
02:41:54,400 --> 02:41:57,560
Now you get to the girls.

2185
02:41:57,560 --> 02:42:02,040
And then again, same way
we use the new keyword,

2186
02:42:02,040 --> 02:42:06,120
and then we will write
the name of the class in here.

2187
02:42:06,440 --> 02:42:07,120
Okay?

2188
02:42:07,120 --> 02:42:11,840
So same as if I am creating the object
of this ArrayList class.

2189
02:42:12,120 --> 02:42:14,680
But new thing in here are these

2190
02:42:15,440 --> 02:42:19,400
diamond operators.

2191
02:42:19,400 --> 02:42:22,440
Okay, so

2192
02:42:22,440 --> 02:42:25,320
this is how we create an error list.

2193
02:42:25,320 --> 02:42:27,800
And now why we are discussing this.

2194
02:42:28,040 --> 02:42:33,160
Is this at least
it has this property that it can grow

2195
02:42:33,160 --> 02:42:36,360
and it can shrink its size at

2196
02:42:37,960 --> 02:42:42,160
if you insert and element,
if you keep on inserting the elements

2197
02:42:42,160 --> 02:42:47,360
inside this,
at least it will keep on increasing your.

2198
02:42:47,360 --> 02:42:51,760
If you remove some elements,
it will automatically decrease your size.

2199
02:42:51,760 --> 02:42:54,680
And you guys don't have to do any of this.

2200
02:42:54,760 --> 02:42:57,240
It is all automatic.

2201
02:42:57,240 --> 02:43:02,640
So for example, I am not specifying
any size in here inside this list.

2202
02:43:02,920 --> 02:43:04,880
Okay. But

2203
02:43:06,120 --> 02:43:07,440
once I so

2204
02:43:07,440 --> 02:43:12,360
and if right now, if I print out the size

2205
02:43:13,560 --> 02:43:16,320
of this edit list,

2206
02:43:17,480 --> 02:43:19,800
if I print out the size right now

2207
02:43:22,800 --> 02:43:24,400
the size of zero.

2208
02:43:24,400 --> 02:43:36,920
Okay, let me put it. So

2209
02:43:38,240 --> 02:43:42,680
right now this size is zero.

2210
02:43:42,680 --> 02:43:44,600
Yeah, size is zero.

2211
02:43:44,600 --> 02:43:48,360
But as soon as I insert

2212
02:43:48,800 --> 02:43:52,200
an element
and this is how we insert the elements,

2213
02:43:52,200 --> 02:43:56,880
at least as soon as we use this, add
the matter because this is the class,

2214
02:43:57,280 --> 02:44:00,840
it does not have those square brackets,
it has meters.

2215
02:44:00,840 --> 02:44:02,800
So we have to call methods.

2216
02:44:02,800 --> 02:44:05,400
So we call this add method.

2217
02:44:05,400 --> 02:44:08,320
If we have to add any element in here.

2218
02:44:09,880 --> 02:44:11,720
And as soon as we

2219
02:44:11,720 --> 02:44:15,560
in certain element
and check the size of this analyst.

2220
02:44:15,920 --> 02:44:20,360
Now you guys will see
now the size will increase to one

2221
02:44:21,320 --> 02:44:21,960
you see

2222
02:44:21,960 --> 02:44:25,440
the size has been increased to one.

2223
02:44:25,440 --> 02:44:29,160
And if you add more elements
like for example,

2224
02:44:29,160 --> 02:44:32,920
if I add three elements, so now

2225
02:44:34,160 --> 02:44:37,240
the size will automatically be change

2226
02:44:38,480 --> 02:44:39,920
2 to 3.

2227
02:44:39,920 --> 02:44:48,320
Okay,

2228
02:44:48,320 --> 02:44:52,080
two sides has been taken
and there are other methods as well.

2229
02:44:52,080 --> 02:44:57,240
So let's say, for example,
if you want to remove something,

2230
02:44:58,560 --> 02:44:59,240
okay,

2231
02:45:00,520 --> 02:45:04,400
so if I remove something,
I need to call this remove matter.

2232
02:45:04,720 --> 02:45:08,520
And after that, if I print out this size

2233
02:45:14,280 --> 02:45:17,160
besides has been shrink automatically.

2234
02:45:17,600 --> 02:45:20,360
So if you keep on adding the elements

2235
02:45:20,560 --> 02:45:23,040
it will keep on increasing your size.

2236
02:45:23,520 --> 02:45:27,040
If you removing some
if you want to remove some elements,

2237
02:45:27,040 --> 02:45:28,720
you also have this flexibility.

2238
02:45:28,720 --> 02:45:30,600
You call the remove method.

2239
02:45:30,600 --> 02:45:34,680
That element is removed
and the size is shrink again.

2240
02:45:35,280 --> 02:45:41,720
Is not it great guys?

2241
02:45:41,720 --> 02:45:44,680
So does it mean that the ADD is
they are useless

2242
02:45:44,920 --> 02:45:47,760
or there is some kind of
benefit of the add

2243
02:45:47,760 --> 02:46:00,720
is as well?

2244
02:46:00,720 --> 02:46:01,840
What do you think?

2245
02:46:02,040 --> 02:46:04,400
Does it mean they
add if they are useless and

2246
02:46:16,880 --> 02:46:17,840
I think

2247
02:46:17,840 --> 02:46:21,480
no on the arrays they are not useless.

2248
02:46:21,480 --> 02:46:25,240
The areas they are super, super fast

2249
02:46:25,920 --> 02:46:27,960
and the ADD is they occupy

2250
02:46:28,280 --> 02:46:31,600
very less memory inside your computer.

2251
02:46:31,640 --> 02:46:36,600
If you are sure about something,
if you are sure about the size

2252
02:46:36,600 --> 02:46:40,080
of something, always always use ADD is

2253
02:46:40,400 --> 02:46:44,400
they will occupy very less memory
and they will be

2254
02:46:44,400 --> 02:46:48,240
super super fast
in all the games and intensive works.

2255
02:46:48,240 --> 02:46:51,440
Like if you have to implement complex

2256
02:46:51,440 --> 02:46:53,880
people, they always prefer arrays,

2257
02:46:54,280 --> 02:46:57,720
they always prefer at and and if you guys

2258
02:46:58,560 --> 02:47:01,560
all down your controller

2259
02:47:01,560 --> 02:47:04,040
and click on this class name

2260
02:47:08,520 --> 02:47:10,560
and use your structure window

2261
02:47:17,040 --> 02:47:20,400
so you guys will see

2262
02:47:20,400 --> 02:47:23,600
inside the fields

2263
02:47:23,760 --> 02:47:25,920
internally

2264
02:47:26,040 --> 02:47:28,080
the array list

2265
02:47:28,080 --> 02:47:30,440
it also uses eddies

2266
02:47:31,360 --> 02:47:35,400
so all the logic to increase
and decrease the size

2267
02:47:35,640 --> 02:47:38,400
it the ArrayList they are still using.

2268
02:47:38,400 --> 02:47:43,080
The ADD is internally,
but These Java guys,

2269
02:47:43,080 --> 02:47:48,960
they have written all that knowledge,
all that code to achieve this shrinkage

2270
02:47:48,960 --> 02:47:53,880
and this growing of size and of these add
the method removal method.

2271
02:47:54,200 --> 02:47:57,440
But internally they are also using arrays.

2272
02:47:57,640 --> 02:48:01,080
So the ADD is they are based,
they are primitives.

2273
02:48:01,080 --> 02:48:04,000
Everything in Java is
built on top of that.

2274
02:48:04,200 --> 02:48:09,520
They, they are not useless in gaming,
in algorithms wherever you will be needing

2275
02:48:09,520 --> 02:48:14,240
performance and less memory,
you will always be using the arrays.

2276
02:48:14,240 --> 02:48:14,840
Okay.

2277
02:48:14,840 --> 02:48:15,960
But as a tester

2278
02:48:15,960 --> 02:48:19,640
and as a programmer, because these days
computers are super, super fast.

2279
02:48:20,040 --> 02:48:26,760
So 90% of the time
you guys will be using endless.

2280
02:48:26,760 --> 02:48:30,560
Can we use a red list instead at eight
if we know the exact site is yes.

2281
02:48:31,040 --> 02:48:33,120
So in at least as well,

2282
02:48:33,600 --> 02:48:36,840
you can pass the size in here.

2283
02:48:37,320 --> 02:48:39,440
So if you know the size.

2284
02:48:40,200 --> 02:48:41,720
So what is happening in here?

2285
02:48:41,720 --> 02:48:43,680
What is happening internally?

2286
02:48:43,680 --> 02:48:48,120
So let me tell you what is happening
internally when you guys so

2287
02:48:48,120 --> 02:48:51,240
there is a default size in the edit list

2288
02:48:51,840 --> 02:48:55,560
when you guys don't specify any in here.

2289
02:48:55,960 --> 02:49:00,320
So Java is creating an array internally,

2290
02:49:00,520 --> 02:49:07,360
let's say, of size ten.

2291
02:49:07,360 --> 02:49:09,360
When you call this add the method.

2292
02:49:10,120 --> 02:49:11,760
This element is added here.

2293
02:49:11,760 --> 02:49:13,600
The next element is added here.

2294
02:49:13,600 --> 02:49:15,360
Add here, here, here.

2295
02:49:15,360 --> 02:49:17,440
Once the ArrayList is full

2296
02:49:18,440 --> 02:49:20,960
in new, add a list of bigger

2297
02:49:20,960 --> 02:49:24,720
size is created internally

2298
02:49:33,040 --> 02:49:36,720
and all the data
from the previous list is copied

2299
02:49:36,720 --> 02:49:39,920
to this new list
in here, element by element.

2300
02:49:41,400 --> 02:49:44,080
And then new list is used once.

2301
02:49:44,080 --> 02:49:47,120
The size of this list is also used

2302
02:49:47,160 --> 02:49:51,480
completely,
even a bigger add of bigger size

2303
02:49:51,480 --> 02:49:55,080
will be declared
and all the data will be copied in here.

2304
02:49:55,520 --> 02:49:58,800
When you delete an element,

2305
02:49:58,800 --> 02:50:01,880
the elements will be removed
at a certain point.

2306
02:50:01,880 --> 02:50:06,120
But once the size of the once,
once you have removed

2307
02:50:06,120 --> 02:50:09,360
half of the elements again
and new array will be declared

2308
02:50:10,200 --> 02:50:12,520
and the remaining element
will be copied in here.

2309
02:50:12,520 --> 02:50:14,840
So there is a lot of computation left.

2310
02:50:14,880 --> 02:50:17,960
There is a lot of code
that is going behind the scenes

2311
02:50:18,520 --> 02:50:23,800
to achieve this flexibility,
this automatic shrinkage.

2312
02:50:23,800 --> 02:50:30,280
You see this ensure capacity, internal
size plus one, and then you see this.

2313
02:50:30,280 --> 02:50:33,920
This is internally still
we are using element that our size

2314
02:50:33,960 --> 02:50:37,800
plus plus and then we are splitting
this element in here and then return true.

2315
02:50:38,400 --> 02:50:43,160
So still internally they are areas
but there is this ensure capacity method

2316
02:50:43,680 --> 02:50:46,520
which is doing these calculations,
which is checking

2317
02:50:46,520 --> 02:50:49,240
if mini capacity is less than minus size.

2318
02:50:49,240 --> 02:50:51,840
Then you see this group method.

2319
02:50:51,840 --> 02:50:54,840
It is increasing this size it is checking

2320
02:50:54,840 --> 02:50:58,600
if the capacity is full,
then grow this size.

2321
02:50:58,600 --> 02:51:03,240
If you guys check this group method,
you see new capacity all capacity

2322
02:51:03,240 --> 02:51:06,320
plus all the capacity greater than one
then mean capacity,

2323
02:51:06,320 --> 02:51:09,760
max size and new capacity, huge capacity.

2324
02:51:09,760 --> 02:51:14,280
All of these could it is achieving that

2325
02:51:14,480 --> 02:51:18,320
automatic growing and shrinking mechanism.

2326
02:51:18,480 --> 02:51:23,600
So if you guys are interested in learning
how Java guys are achieving all of this

2327
02:51:24,760 --> 02:51:25,680
shrinking and

2328
02:51:25,680 --> 02:51:28,920
a growing thing,
you guys can look inside these methods.

2329
02:51:29,320 --> 02:51:31,680
Can we say that
if we give size to ArrayList,

2330
02:51:31,680 --> 02:51:35,760
this is another way to declare ArrayList
as array, which have fit size?

2331
02:51:35,760 --> 02:51:37,800
No, we cannot say that.

2332
02:51:37,800 --> 02:51:40,240
But if you initially give decide.

2333
02:51:40,240 --> 02:51:41,520
So if

2334
02:51:42,360 --> 02:51:49,000
let me show you.

2335
02:51:49,000 --> 02:51:54,560
So if you go inside this class.

2336
02:51:54,560 --> 02:51:58,200
So there is this default capacity element
that are in here.

2337
02:51:58,200 --> 02:52:05,880
So there is this default capacity in here,
which is in Java,

2338
02:52:06,000 --> 02:52:08,400
which is in this,
and this implementation is ten,

2339
02:52:08,880 --> 02:52:12,120
which means after each had been elements

2340
02:52:12,960 --> 02:52:17,760
the size of a new array will be created
once you insert the ten elements and new

2341
02:52:17,760 --> 02:52:21,640
array will be created, those ten elements
will be copied to the new, bigger

2342
02:52:21,680 --> 02:52:24,960
add A and that's
how it will keep on increasing the size.

2343
02:52:24,960 --> 02:52:29,680
But if you specify so if you specify,
decide internally what will happen.

2344
02:52:30,160 --> 02:52:34,800
Let's say you know that least at least
there will be 2000 elements.

2345
02:52:35,880 --> 02:52:36,840
So Java will

2346
02:52:36,840 --> 02:52:39,960
not declare this initial at all size,

2347
02:52:39,960 --> 02:52:43,480
then it will declare
that initial size of thousand

2348
02:52:44,280 --> 02:52:48,000
and then once that thousand locations

2349
02:52:48,000 --> 02:52:51,640
are filled,
then a new add will be declared.

2350
02:52:51,640 --> 02:52:54,560
So you guys will be saving
a lot of computation

2351
02:52:55,200 --> 02:52:57,720
if you know the size before hand.

2352
02:52:57,880 --> 02:53:01,080
Otherwise, after each ten element,

2353
02:53:01,080 --> 02:53:04,440
the Java will be growing,
the size it will be increasing.

2354
02:53:04,440 --> 02:53:08,600
Besides declaring new array, copying
all the elements to the new elements,

2355
02:53:08,920 --> 02:53:11,640
and there will be a lot of computations.

2356
02:53:11,640 --> 02:53:14,480
But if you specify the size

2357
02:53:16,000 --> 02:53:17,440
initially,

2358
02:53:17,520 --> 02:53:21,080
then you are saving a lot of computations.

2359
02:53:21,080 --> 02:53:26,000
Is is this being used for Instagram
followers since you're so flexible?

2360
02:53:26,720 --> 02:53:29,240
Yes. All of these real life applications,

2361
02:53:29,240 --> 02:53:31,680
they are built using ArrayList
or something like that.

2362
02:53:32,320 --> 02:53:36,240
Does it make sense to guys
that if you initially give the size,

2363
02:53:36,800 --> 02:53:44,360
how you can save
a lot of computations, but

2364
02:53:49,000 --> 02:53:52,440
so it's always, always a good practice

2365
02:53:53,000 --> 02:53:56,000
to specify the initial size

2366
02:53:57,080 --> 02:54:01,280
when you are declaring an array
so that you guys can save a lot of code.

2367
02:54:01,560 --> 02:54:04,080
And if I show you the removal method,

2368
02:54:05,680 --> 02:54:07,240
you that there are

2369
02:54:07,240 --> 02:54:10,280
so many things
that are going behind the scene.

2370
02:54:10,840 --> 02:54:13,560
Force remove index index is equal

2371
02:54:13,560 --> 02:54:16,640
to equal to null.

2372
02:54:16,640 --> 02:54:20,120
And if we go inside the false,
when will we check?

2373
02:54:20,400 --> 02:54:23,760
All the computations for
this size are going in?

2374
02:54:23,920 --> 02:54:26,120
Then you see this add a copy.

2375
02:54:26,120 --> 02:54:31,440
So after each removal we are copying
the old saw all the elements.

2376
02:54:31,440 --> 02:54:35,280
We are kind of shifting
all the elements and.

2377
02:54:35,280 --> 02:54:37,680
We are doing a lot of computations.

2378
02:54:38,040 --> 02:54:40,160
Okay, So

2379
02:54:41,000 --> 02:54:42,960
yes, they are flexible.

2380
02:54:42,960 --> 02:54:46,120
Yes, we have building methods, achieve
many things,

2381
02:54:46,720 --> 02:54:49,560
but they should be used with the gear.
Okay.

2382
02:54:49,720 --> 02:54:51,400
They should be used with gear.

2383
02:54:51,400 --> 02:54:53,600
So this is the

2384
02:54:55,840 --> 02:54:57,560
start of the collections framework.

2385
02:54:57,560 --> 02:55:02,160
So this ArrayList is the first class
that we will be learning.

2386
02:55:02,480 --> 02:55:04,160
But before we learn that.

2387
02:55:04,160 --> 02:55:10,360
So is the complete collections framework.

2388
02:55:10,360 --> 02:55:11,560
So we will be learning.

2389
02:55:11,560 --> 02:55:14,880
I want to cry every time you open
those methods and calls.

2390
02:55:15,680 --> 02:55:18,360
Don't worry, you guys will be comfortable
with those course.

2391
02:55:18,720 --> 02:55:22,040
So we will be learning
about all of these classes

2392
02:55:23,640 --> 02:55:25,200
except for you.

2393
02:55:25,920 --> 02:55:29,160
Okay, We will be not learning about

2394
02:55:30,560 --> 02:55:32,160
this class

2395
02:55:34,160 --> 02:55:36,840
and we will be learning rational.

2396
02:55:37,240 --> 02:55:41,120
Let's say we put initial size ten,
but input, let's say eight names.

2397
02:55:41,720 --> 02:55:44,880
It still runs,
does not need as much computer

2398
02:55:44,880 --> 02:55:47,760
part as if we didn't
put the initial size. Yes.

2399
02:55:47,880 --> 02:55:51,480
So if you all already know
that there will be eight elements

2400
02:55:51,840 --> 02:55:54,760
specified, it still it can grow.

2401
02:55:54,760 --> 02:55:58,320
If you add more elements
still it will increase your size

2402
02:55:58,600 --> 02:56:00,920
and it can decrease this side as well.

2403
02:56:00,920 --> 02:56:02,960
But you are saving a lot of computation

2404
02:56:08,520 --> 02:56:10,840
now to learn this complete.

2405
02:56:11,240 --> 02:56:13,560
And they are not all the classes.

2406
02:56:13,560 --> 02:56:16,840
I think there are more than 100 classes
inside the collection

2407
02:56:16,840 --> 02:56:19,400
framework,
but we will be learning only these.

2408
02:56:19,880 --> 02:56:23,360
So to use this collections
framework to use

2409
02:56:23,400 --> 02:56:27,960
all the classes, to use everything
that is present inside of this framework,

2410
02:56:27,960 --> 02:56:32,600
we need to learn about the wrapper
classes.

2411
02:56:32,600 --> 02:56:35,720
Okay, so what are wrapper classes and why

2412
02:56:35,720 --> 02:56:58,680
we need them?

2413
02:56:58,680 --> 02:57:05,760
So you guys have learned
about the primitives, right?

2414
02:57:05,760 --> 02:57:08,680
So you guys started from byte

2415
02:57:12,680 --> 02:57:16,040
and then are

2416
02:57:24,880 --> 02:57:27,640
embedded in beta

2417
02:57:28,920 --> 02:57:29,560
and those were

2418
02:57:29,560 --> 02:57:35,320
the good old days.

2419
02:57:35,320 --> 02:57:45,480
Then float.

2420
02:57:45,480 --> 02:57:47,920
Oh, I forget about the long

2421
02:58:00,120 --> 02:58:09,520
and then about the boolean, but

2422
02:58:12,240 --> 02:58:13,280
writable

2423
02:58:13,280 --> 02:58:24,280
and then about the right.

2424
02:58:24,280 --> 02:58:28,440
So these are the primitive data types.

2425
02:58:28,440 --> 02:58:34,520
Now, the benefit of using these primitive
data types is that they occupy

2426
02:58:35,920 --> 02:58:39,120
less memory
inside your computer, inside your RAM.

2427
02:58:39,760 --> 02:58:43,440
But the downside of these primitives is

2428
02:58:44,040 --> 02:58:46,400
there are no building methods

2429
02:58:47,680 --> 02:58:49,480
present inside of these primitives.

2430
02:58:49,480 --> 02:58:53,000
So let's say, for example, if I have to

2431
02:58:54,160 --> 02:58:55,680
convert

2432
02:58:59,200 --> 02:59:02,040
their safe, I have to I have a string then

2433
02:59:03,000 --> 02:59:05,400
and I want to convert it to an integer.

2434
02:59:05,880 --> 02:59:10,200
Are there any present inside
these primitive primitives

2435
02:59:10,200 --> 02:59:18,600
to convert this number? No.

2436
02:59:19,080 --> 02:59:23,800
So these wrapper classes,
they are not primitives.

2437
02:59:23,800 --> 02:59:25,440
For each wrapper.

2438
02:59:25,440 --> 02:59:29,480
Java guides have created wrapper classes
and they.

2439
02:59:30,320 --> 02:59:33,600
They have the same names
almost always have the same names.

2440
02:59:33,600 --> 02:59:41,040
So for byte two, we have our object type.

2441
02:59:41,040 --> 02:59:42,960
We have a class. So this is not a class.

2442
02:59:42,960 --> 02:59:47,200
This might is not a class, but this B
with capital beat is the class actually.

2443
02:59:47,520 --> 02:59:51,720
And if you hold down your control button
and if you click on that bite,

2444
02:59:52,280 --> 02:59:55,040
you guys will see that it's the class

2445
02:59:55,040 --> 02:59:58,400
that is extending number,
implementing compatible.

2446
02:59:59,280 --> 03:00:00,000
There is this

2447
03:00:01,920 --> 03:00:05,400
constraint
inside this class that tells you

2448
03:00:05,400 --> 03:00:08,040
what is the minimum value
that you can store,

2449
03:00:08,040 --> 03:00:10,800
what is the maximum value
that you guys can store?

2450
03:00:12,840 --> 03:00:15,240
And then there are some matters

2451
03:00:16,280 --> 03:00:19,840
like value of method pass

2452
03:00:19,840 --> 03:00:27,720
by method,
overloaded methods, value of the code.

2453
03:00:27,720 --> 03:00:29,360
So there are so many methods.

2454
03:00:29,360 --> 03:00:32,680
Why it's a class because of capital B no.

2455
03:00:32,680 --> 03:00:34,760
Yes. Classes. They have capitals.

2456
03:00:34,760 --> 03:00:37,760
They have their first letters
as capitals, but

2457
03:00:38,000 --> 03:00:40,040
they are

2458
03:00:41,160 --> 03:00:44,520
separately created classes
for each primitive

2459
03:00:45,000 --> 03:00:50,960
Java guys have created a class Y classes
because collections framework

2460
03:00:51,400 --> 03:00:55,400
does not work
with the primitive data types.

2461
03:00:55,440 --> 03:00:57,920
It requires a class type.

2462
03:00:58,240 --> 03:01:02,000
So for example, in the previous example,

2463
03:01:02,000 --> 03:01:05,720
if instead of starting
if I tried to specify integer

2464
03:01:06,760 --> 03:01:08,880
so it will say die

2465
03:01:08,960 --> 03:01:12,600
argument cannot be of primitive type.

2466
03:01:12,800 --> 03:01:15,400
That means yes, the collections.

2467
03:01:15,400 --> 03:01:20,360
They are very powerful,
but we cannot use primitive

2468
03:01:20,440 --> 03:01:25,040
data types with these collections
inside these angle brackets.

2469
03:01:25,040 --> 03:01:28,640
We cannot use any of the primitive types
that we learned before.

2470
03:01:29,560 --> 03:01:31,920
So to this issue,

2471
03:01:33,120 --> 03:01:35,360
for each primitive type,

2472
03:01:35,560 --> 03:01:40,400
Java guys created a class by an object
or type

2473
03:01:41,080 --> 03:01:43,880
so far by it, we have a bite class

2474
03:01:44,120 --> 03:01:49,480
far short.

2475
03:01:49,480 --> 03:01:52,160
Is it like because
there are no hidden methods in those?

2476
03:01:52,160 --> 03:01:55,080
Yes, I show you are right

2477
03:01:57,680 --> 03:01:59,840
for and we have integer

2478
03:01:59,840 --> 03:02:02,960
instead of capital. I

2479
03:02:04,440 --> 03:02:06,760
then for long we have long

2480
03:02:09,600 --> 03:02:10,680
for float.

2481
03:02:10,680 --> 03:02:14,560
We have a float with capital F

2482
03:02:17,080 --> 03:02:20,200
or double.

2483
03:02:20,200 --> 03:02:23,840
We have a double with capital D

2484
03:02:28,800 --> 03:02:31,280
for boolean
we have a boolean with capital B

2485
03:02:35,360 --> 03:02:36,360
and for Char

2486
03:02:36,360 --> 03:02:42,120
we have that character.

2487
03:02:42,120 --> 03:02:47,160
So for each primitive type
because because collections framework

2488
03:02:47,160 --> 03:02:51,960
does not work with primitive types,
we have a class type, we have a class.

2489
03:02:51,960 --> 03:02:55,480
Java guys have created a class

2490
03:03:07,600 --> 03:03:11,080
like this.

2491
03:03:11,080 --> 03:03:13,160
And what is the benefit of these classes?

2492
03:03:13,160 --> 03:03:17,400
Now let's say, for example,
I want to convert

2493
03:03:17,520 --> 03:03:20,520
this number string to an integer so

2494
03:03:21,680 --> 03:03:22,760
there is a building

2495
03:03:22,760 --> 03:03:26,800
method available
inside the integer class to do that.

2496
03:03:27,040 --> 03:03:29,160
So for example, if I have an integer

2497
03:03:30,520 --> 03:03:32,040
number,

2498
03:03:32,640 --> 03:03:35,680
I can say integer dot

2499
03:03:37,640 --> 03:03:40,400
boss in and if I pass

2500
03:03:41,600 --> 03:03:55,720
number declared,
I can use these building methods.

2501
03:03:55,720 --> 03:03:57,400
So this is just one of the examples.

2502
03:03:57,400 --> 03:04:02,840
I can use this passing method
to convert this spring to a number.

2503
03:04:03,400 --> 03:04:06,480
And for all the primitives
I have this method

2504
03:04:06,480 --> 03:04:10,640
to convert a number from one letter type
to another data type.

2505
03:04:10,640 --> 03:04:17,160
I have methods for in all the classes to
convert a bite into a corresponding type.

2506
03:04:17,160 --> 03:04:26,760
So for example,
if I show you the integer class.

2507
03:04:26,760 --> 03:04:28,800
So we have these fields

2508
03:04:28,800 --> 03:04:32,560
and we also don't have those fields guys
inside the primitives.

2509
03:04:32,560 --> 03:04:35,680
We don't even have those fields
right in here.

2510
03:04:35,680 --> 03:04:40,840
We have this information that we what
is the minimum value that we can store?

2511
03:04:40,840 --> 03:04:46,680
You guys remember, I used this min value
and max value fields in your group task

2512
03:04:46,680 --> 03:04:51,400
when I showed you the solution,
I use these fields, right?

2513
03:04:51,840 --> 03:04:56,040
So they are,
they were coming from this integer class.

2514
03:04:56,960 --> 03:04:59,880
And then there is this map

2515
03:05:00,600 --> 03:05:05,240
to convert these integers
from other data types.

2516
03:05:05,240 --> 03:05:08,160
In here there are those string matters.

2517
03:05:08,160 --> 03:05:12,280
For example, if you want to convert
a number to a string, so you can also

2518
03:05:12,520 --> 03:05:15,400
that as well.

2519
03:05:15,400 --> 03:05:19,680
So unsigned, unsigned, and
I can convert it to other number systems.

2520
03:05:20,000 --> 03:05:22,680
So how many of you know
about the hexadecimal system?

2521
03:05:23,280 --> 03:05:33,200
Hexadecimal system of numbers?

2522
03:05:33,200 --> 03:05:35,600
Do you guys know
about the hexadecimal numbers

2523
03:05:43,080 --> 03:05:43,680
or only

2524
03:05:43,680 --> 03:05:51,880
the MIRNAS?

2525
03:05:51,880 --> 03:05:53,240
Okay. No, no issues.

2526
03:05:53,240 --> 03:05:56,760
So they are dated in most the time.

2527
03:05:56,760 --> 03:06:02,320
You guys must have seen the numbers
that all the numbers that are represented.

2528
03:06:02,520 --> 03:06:04,880
I don't know how it is in English.

2529
03:06:04,920 --> 03:06:07,040
So you guys know that is awful.

2530
03:06:07,560 --> 03:06:11,320
But the numbers that you guys are
specifying, they are octal write them mir.

2531
03:06:12,000 --> 03:06:14,440
They are octal, not hexadecimal.

2532
03:06:14,840 --> 03:06:15,720
Hexadecimal.

2533
03:06:15,720 --> 03:06:19,800
They have 16 unique characters

2534
03:06:19,800 --> 03:06:22,080
to represent the numbers.

2535
03:06:23,160 --> 03:06:26,880
They are used in computers a lot
and they are binary numbers

2536
03:06:26,880 --> 03:06:28,920
which only have two characters

2537
03:06:28,920 --> 03:06:32,960
like zero and one to represent
all the calculations in this world.

2538
03:06:32,960 --> 03:06:38,280
So different systems,
they use different numbers systems,

2539
03:06:38,280 --> 03:06:42,720
but in real life
you guys must have only seen the numbers.

2540
03:06:43,200 --> 03:06:45,480
029 right?

2541
03:06:45,640 --> 03:06:49,920
We represent all the
all the counts and everything

2542
03:06:51,480 --> 03:06:52,320
using those

2543
03:06:52,320 --> 03:06:55,320
unique nine and ten characters
is 029 byte.

2544
03:06:56,040 --> 03:06:58,200
But there are other number
systems as well.

2545
03:06:58,200 --> 03:06:59,840
And if you want to convert

2546
03:06:59,840 --> 03:07:02,880
a decimal number to a hexadecimal
or if you want to perform

2547
03:07:02,880 --> 03:07:06,600
a conversion between these,
then there are methods for that as well.

2548
03:07:07,080 --> 03:07:09,880
You see two octal, two heads

2549
03:07:09,880 --> 03:07:12,160
supporting the binary.

2550
03:07:13,000 --> 03:07:16,560
But what you guys
don't need to worry about.

2551
03:07:16,560 --> 03:07:19,560
So there, there are so many things

2552
03:07:19,680 --> 03:07:22,520
which Java guys have already done

2553
03:07:24,720 --> 03:07:26,720
to perform these calculations,

2554
03:07:26,720 --> 03:07:29,320
to convert between different numbers
systems,

2555
03:07:30,040 --> 03:07:34,000
to achieve many other different tasks
and bills.

2556
03:07:34,040 --> 03:07:39,680
All of those matters, they are present
inside these wrapper classes

2557
03:07:40,320 --> 03:07:43,640
and that's the reason why collections
framework uses

2558
03:07:43,680 --> 03:07:48,000
these wrapper types
Instead of putting with this primitive.

2559
03:07:48,000 --> 03:07:50,760
They don't have any fear,
they don't have methods.

2560
03:07:51,040 --> 03:07:54,240
Then the collection framework
does not work with the primitives.

2561
03:07:54,240 --> 03:07:56,920
So that's why we
have the wrapper classes and

2562
03:07:58,640 --> 03:07:59,640
there is a concept.

2563
03:07:59,640 --> 03:08:03,120
So now you guys know that. So

2564
03:08:04,440 --> 03:08:06,080
guys, what if I have to?

2565
03:08:06,080 --> 03:08:10,680
What if I have to convert this, buy
to this, this, this class type?

2566
03:08:10,680 --> 03:08:12,880
Right. They are classes,
They are putting motives.

2567
03:08:13,160 --> 03:08:14,920
I cannot do that. Right.

2568
03:08:14,920 --> 03:08:18,800
I cannot store a primitive in an object
type variable.

2569
03:08:18,840 --> 03:08:19,560
Right.

2570
03:08:19,560 --> 03:08:24,400
So for example, if I have a string class
or car class or dog class,

2571
03:08:24,440 --> 03:08:31,920
can I store other objects
inside those variables?

2572
03:08:31,920 --> 03:08:36,480
I can only store the objects of that type.

2573
03:08:36,480 --> 03:08:37,400
Right?

2574
03:08:37,720 --> 03:08:42,480
So for example, if I have a car class,
I can store objects of car inside there.

2575
03:08:43,320 --> 03:08:48,160
So. So what if I need a
what if I need about if I have my data

2576
03:08:48,160 --> 03:08:52,160
in primitives that I have,
I have to use collections framework.

2577
03:08:52,440 --> 03:08:56,120
Does it mean that every time
I have to use a collection framework,

2578
03:08:56,120 --> 03:09:06,600
I have to convert my data
to these classes?

2579
03:09:06,600 --> 03:09:11,920
So technically, technically,
if we should be converting these types to

2580
03:09:12,160 --> 03:09:18,240
this one right, because they are classes
and they are primitives.

2581
03:09:18,840 --> 03:09:22,320
So but so Java guys realized this, guys

2582
03:09:22,320 --> 03:09:26,240
realize this and a day
they made our life easier.

2583
03:09:26,240 --> 03:09:28,560
Okay. They assert that. Hey, hey guys.

2584
03:09:28,840 --> 03:09:34,920
If you are working with primitives
and you want to use a collection

2585
03:09:34,920 --> 03:09:39,400
framework, you guys don't have to convert
your primitives to these.

2586
03:09:39,400 --> 03:09:42,160
Are these non primitives.

2587
03:09:42,360 --> 03:09:45,720
What you guys can instead use is a concept

2588
03:09:45,720 --> 03:09:48,240
of boxing and unboxing.

2589
03:09:49,000 --> 03:09:52,320
So Java guys allowed us
to convert this type

2590
03:09:52,320 --> 03:09:56,040
to this byte
with the of boxing and boxing.

2591
03:09:56,040 --> 03:10:05,000
So for example, if I have a bar, it

2592
03:10:06,040 --> 03:10:08,520
looks like me using if I have an interior

2593
03:10:09,600 --> 03:10:18,920
number,

2594
03:10:18,920 --> 03:10:23,000
if I have a primitive number to set, then
and now

2595
03:10:23,040 --> 03:10:37,880
I want to convert it to a class type,

2596
03:10:37,880 --> 03:10:40,400
then I can simply do this.

2597
03:10:40,920 --> 03:10:44,560
I can see primitive is, equal
to class number.

2598
03:10:44,960 --> 03:10:47,040
I don't have to call any methods.

2599
03:10:47,040 --> 03:10:48,840
I don't have to convert anything.

2600
03:10:48,840 --> 03:10:50,880
I don't need to do anything.

2601
03:10:51,600 --> 03:10:56,000
All the convergence internally
will be happened automatically.

2602
03:10:56,000 --> 03:10:59,840
And I can
I can directly assign these numbers

2603
03:11:04,640 --> 03:11:09,000
to the other types.

2604
03:11:09,000 --> 03:11:17,520
Okay.

2605
03:11:17,520 --> 03:11:20,400
And I can start using them
inside collections for them.

2606
03:11:20,800 --> 03:11:24,040
So I still got them right.

2607
03:11:24,040 --> 03:11:28,360
So if you have a primitive
and you have a non primitive

2608
03:11:28,840 --> 03:11:31,680
corresponding non primitive, remember
I cannot do that.

2609
03:11:31,680 --> 03:11:34,760
I cannot store in beta inside,
but this is not possible.

2610
03:11:36,160 --> 03:11:39,360
So if I have this then I can

2611
03:11:39,760 --> 03:11:45,160
easily convert it to a class number
and I can convert it back as well.

2612
03:11:45,160 --> 03:11:48,360
So I can say primitive

2613
03:11:48,360 --> 03:11:50,880
is equal to

2614
03:11:51,760 --> 03:11:53,040
plus number.

2615
03:11:53,040 --> 03:11:55,680
Okay, so

2616
03:11:55,680 --> 03:11:59,160
this is called auto boxing and boxing.

2617
03:11:59,160 --> 03:12:03,960
What we are doing, we are picking it
primitive and we are putting

2618
03:12:03,960 --> 03:12:07,080
that primitive in the box inside

2619
03:12:07,080 --> 03:12:10,200
the object of the corresponding type.

2620
03:12:10,440 --> 03:12:15,560
So in here
I am picking this primitive bin.

2621
03:12:15,560 --> 03:12:16,840
So let me give you a more example.

2622
03:12:16,840 --> 03:12:17,520
One more example.

2623
03:12:17,520 --> 03:12:21,240
So technically, when we have to, yes,
the results will be

2624
03:12:21,240 --> 03:12:25,960
same when we have to, let's say, create
an object.

2625
03:12:25,960 --> 03:12:27,720
This is what we do, right?

2626
03:12:27,720 --> 03:12:30,040
We write the name of the class variable

2627
03:12:30,040 --> 03:12:34,520
name, new keyword, and then we

2628
03:12:34,520 --> 03:12:39,800
call the constructor. So

2629
03:12:40,760 --> 03:12:41,720
Bastian, this is not

2630
03:12:41,720 --> 03:12:44,960
work, but believe me, right now
I am starving.

2631
03:12:44,960 --> 03:12:49,480
And the first thing that will do
after this, this class

2632
03:12:50,200 --> 03:12:53,840
I like this.

2633
03:12:56,160 --> 03:12:57,480
And I was planning

2634
03:12:57,480 --> 03:13:00,520
of having a zinger burger.

2635
03:13:00,520 --> 03:13:03,600
So class number is a variable.

2636
03:13:03,600 --> 03:13:07,600
It is this class
and this is an object with the

2637
03:13:08,800 --> 03:13:12,080
you may be already answer this question,
but what the purpose of this?

2638
03:13:12,360 --> 03:13:16,560
Oh, because primitives don't work
with the collections framework

2639
03:13:17,360 --> 03:13:21,160
and now we are learning the collection
framework.

2640
03:13:21,160 --> 03:13:24,640
We have to learn the wrapper
classes as well because

2641
03:13:24,720 --> 03:13:28,320
collection framework
only work with the wrapper classes.

2642
03:13:28,320 --> 03:13:31,320
These are called by the wrapper classes,

2643
03:13:31,320 --> 03:13:35,000
object types, class types

2644
03:13:35,840 --> 03:13:36,480
dominate it.

2645
03:13:36,480 --> 03:13:37,120
Clear.

2646
03:13:37,880 --> 03:13:39,000
I see. Sebastian.

2647
03:13:39,000 --> 03:13:42,600
Why you have a row or why your weight
is that much?

2648
03:13:43,520 --> 03:13:44,800
It's.

2649
03:13:44,800 --> 03:13:48,680
Is this manipulation
only available to enable wrapper classes?

2650
03:13:49,440 --> 03:13:51,840
Can we make our own class
that would retain

2651
03:13:51,840 --> 03:13:55,640
invariant value
when it's instance is called?

2652
03:13:55,640 --> 03:13:57,840
Instead of making a method like get value?

2653
03:13:58,880 --> 03:14:00,040
No assignment?

2654
03:14:00,040 --> 03:14:01,040
I don't think so.

2655
03:14:01,040 --> 03:14:03,040
You can do it with your classes.

2656
03:14:03,640 --> 03:14:05,880
It's only possible

2657
03:14:06,000 --> 03:14:07,200
with the wrapper classes.

2658
03:14:07,200 --> 03:14:09,000
Building classes.

2659
03:14:10,000 --> 03:14:10,680
Yeah.

2660
03:14:10,680 --> 03:14:15,520
So we converted the variable
to the object of the class,

2661
03:14:15,520 --> 03:14:19,200
and that is automatic.

2662
03:14:19,200 --> 03:14:22,280
So this, this is how we create the object
of a class,

2663
03:14:22,280 --> 03:14:25,560
right.

2664
03:14:25,560 --> 03:14:27,880
But Java guys said that.

2665
03:14:27,880 --> 03:14:29,520
Hey, good. Hey, guys.

2666
03:14:29,520 --> 03:14:30,720
Hey, Batch.

2667
03:14:30,720 --> 03:14:32,040
Then you guys can.

2668
03:14:32,040 --> 03:14:34,040
You guys do not need to do extra

2669
03:14:35,040 --> 03:14:35,760
again.

2670
03:14:36,960 --> 03:14:39,040
I don't understand
what is the use of this?

2671
03:14:40,200 --> 03:14:42,280
The use of this is that

2672
03:14:44,280 --> 03:14:45,600
better level?

2673
03:14:45,920 --> 03:14:48,000
We cannot use primitives

2674
03:14:48,280 --> 03:14:52,560
we cannot use integer long short
inside the collections frame.

2675
03:14:52,560 --> 03:14:56,400
But we can only use these object types.

2676
03:14:56,400 --> 03:14:59,880
Inside of that use are the best that

2677
03:14:59,880 --> 03:15:00,320
okay.

2678
03:15:00,320 --> 03:15:02,400
Maybe because now

2679
03:15:03,400 --> 03:15:04,600
because of Sebastian

2680
03:15:05,640 --> 03:15:08,200
I was already storing and now

2681
03:15:12,320 --> 03:15:19,720
he is.

2682
03:15:19,720 --> 03:15:21,920
So that's why
we have to learn these wrapper classes.

2683
03:15:21,920 --> 03:15:29,400
And how do I think I am one of those?

2684
03:15:29,680 --> 03:15:35,640
Like for example, if the food in my home,
it is an art of my I will never eat it.

2685
03:15:35,640 --> 03:15:38,080
I will just go to bed
without eating that big.

2686
03:15:38,640 --> 03:15:42,720
But if even if I have just had my dinner
or breakfast

2687
03:15:42,720 --> 03:15:46,200
or lunch or whatever,
I see something that is off my drive.

2688
03:15:46,480 --> 03:15:49,440
I can again need the act

2689
03:15:49,560 --> 03:15:52,600
as a good texture
and a friend to make nice dinner for you.

2690
03:15:52,600 --> 03:15:53,800
You do that a

2691
03:15:54,760 --> 03:15:58,480
So let me show you
what kind of dignity that I am

2692
03:15:59,000 --> 03:16:02,400
expecting from our thing.

2693
03:16:04,960 --> 03:16:08,040
This is what I will be getting from
a surely.

2694
03:16:08,080 --> 03:16:14,440
First you see, you
see does not know how to cook.

2695
03:16:14,440 --> 03:16:29,720
So I am preparing myself mentally.

2696
03:16:29,720 --> 03:16:32,600
Looks like I wouldn't think that

2697
03:16:34,080 --> 03:16:34,680
you guys

2698
03:16:34,680 --> 03:16:42,680
are different.

2699
03:16:42,680 --> 03:16:51,000
Okay, so what Java guys have done for us,
they have given us this flexibility

2700
03:16:51,080 --> 03:16:54,080
that if I have

2701
03:16:55,120 --> 03:16:58,320
a primitive in here and a primitive

2702
03:16:59,520 --> 03:17:02,600
instead of doing this number dot

2703
03:17:04,400 --> 03:17:05,280
input value.

2704
03:17:05,280 --> 03:17:08,760
So instead of why this is

2705
03:17:08,880 --> 03:17:12,120
because it's
unnecessary, it's unnecessary.

2706
03:17:12,520 --> 03:17:15,240
Java guys have already done this for us.

2707
03:17:15,240 --> 03:17:22,480
So intelligence
saying you guys don't have to do that.

2708
03:17:22,480 --> 03:17:26,240
You guys want me to end this class
right now and eat something

2709
03:17:26,240 --> 03:17:30,840
first?

2710
03:17:30,840 --> 03:17:31,320
Let's

2711
03:17:40,640 --> 03:17:42,840
to call for an ice cream.

2712
03:17:42,840 --> 03:17:46,320
So this is how we declare an object,
right?

2713
03:17:47,400 --> 03:17:50,520
If there is a class
and if I have to clear the object,

2714
03:17:50,520 --> 03:17:54,880
that class, we do this like, Oh,
we cannot be object like this.

2715
03:17:54,880 --> 03:17:57,960
Right?

2716
03:17:57,960 --> 03:18:05,240
Nice. But

2717
03:18:06,480 --> 03:18:09,440
in Java, guys, what Java guys have done
Guys said that.

2718
03:18:09,440 --> 03:18:12,760
Hey, guys, you can simply.

2719
03:18:12,800 --> 03:18:14,800
You guys remember the string class?

2720
03:18:15,200 --> 03:18:18,360
In string class,
we we store the value directly.

2721
03:18:18,360 --> 03:18:19,880
We're inside the double core.

2722
03:18:19,880 --> 03:18:23,520
We also don't create the
we also don't use that new keyword

2723
03:18:23,520 --> 03:18:26,680
and then call the constructor and then
pass the value first things as that.

2724
03:18:27,240 --> 03:18:32,600
So those classes, which are a widely
in Java, they have created this shortcut.

2725
03:18:32,600 --> 03:18:36,000
So for example, I can

2726
03:18:37,680 --> 03:18:39,160
I can directly do this.

2727
03:18:39,160 --> 03:18:42,480
I don't need this new,
I don't need this integer.

2728
03:18:42,480 --> 03:18:45,240
This if I can directly

2729
03:18:45,680 --> 03:18:48,120
an inside in here,
the results will be same.

2730
03:18:49,080 --> 03:18:51,280
The results will be same.

2731
03:18:51,680 --> 03:18:53,760
So this

2732
03:18:54,320 --> 03:19:02,400
this is called boxing.

2733
03:19:02,400 --> 03:19:04,160
Will being a

2734
03:19:04,640 --> 03:19:06,080
primitive

2735
03:19:07,800 --> 03:19:09,840
inside

2736
03:19:14,040 --> 03:19:15,360
a wrapper.

2737
03:19:15,880 --> 03:19:18,000
This is called boxing.

2738
03:19:18,000 --> 03:19:20,680
Okay. This is the long, long way. Okay.

2739
03:19:21,000 --> 03:19:22,320
It is not recommended way.

2740
03:19:22,320 --> 03:19:22,640
But what?

2741
03:19:22,640 --> 03:19:27,200
This is how you guys will be doing
if you are creating your own classes

2742
03:19:27,200 --> 03:19:30,280
assignment, this is what you have to do
for your own classes.

2743
03:19:30,280 --> 03:19:32,920
But Java guys have given this shortcut

2744
03:19:33,400 --> 03:19:37,040
that instead of writing new and an integer

2745
03:19:37,040 --> 03:19:41,200
and all that,

2746
03:19:41,200 --> 03:19:45,320
you guys can use something called auto

2747
03:19:46,680 --> 03:20:10,800
in boxing.

2748
03:20:10,800 --> 03:20:12,120
Do you guys see

2749
03:20:12,560 --> 03:20:15,240
in here we are using a shortcut.

2750
03:20:15,240 --> 03:20:19,000
We don't have to buy a new and indeed,
every time

2751
03:20:19,000 --> 03:20:22,800
we have to store a primitive inside

2752
03:20:24,200 --> 03:20:25,640
inside a box which

2753
03:20:25,640 --> 03:20:30,320
is off type.

2754
03:20:30,320 --> 03:20:33,040
So this is called boxing.

2755
03:20:33,040 --> 03:20:35,400
We're being a primitive
inside the wrapper.

2756
03:20:35,520 --> 03:20:40,080
If we are using this shortcut,
it is called auto Bolt auto in boxing.

2757
03:20:40,320 --> 03:20:43,480
If we are using the longer way
it is called boxing,

2758
03:20:43,680 --> 03:20:49,040
and when we have to get back
the primitive from that object type,

2759
03:20:49,680 --> 03:20:53,160
it is called on boxing

2760
03:20:57,560 --> 03:21:02,440
and it is also possible which shorter we.

2761
03:21:02,440 --> 03:21:07,240
So we just can assign this number directly
instead of writing number

2762
03:21:07,240 --> 03:21:08,520
than dot in the value.

2763
03:21:08,520 --> 03:21:12,040
Instead of calling this method,
we can do the shorter curly

2764
03:21:12,040 --> 03:21:14,240
and if we are doing it the shorter way,

2765
03:21:15,120 --> 03:21:23,960
it is called auto in boxing.

2766
03:21:23,960 --> 03:21:28,360
But on boxing,
can you please repeat line 14

2767
03:21:28,960 --> 03:21:32,040
is on boxing, right? We are

2768
03:21:33,160 --> 03:21:34,320
extracting the

2769
03:21:34,320 --> 03:21:37,680
value from an integer, which is an object.

2770
03:21:37,680 --> 03:21:39,720
I beg a primitive type.

2771
03:21:40,080 --> 03:21:44,280
So putting a primitive inside
the object type boxing.

2772
03:21:44,760 --> 03:21:48,080
If we are using the longer
weights called boxing, if we are using the

2773
03:21:48,480 --> 03:21:53,520
it is called octagon boxing,
and once we have to get back

2774
03:21:53,520 --> 03:21:57,160
the primitive from that box,
then it is called unboxing.

2775
03:21:57,520 --> 03:22:02,240
Okay Or if we are using the shorter way
it is called Octagon Boxing Charter.

2776
03:22:02,240 --> 03:22:10,640
We here is line nine necessity.

2777
03:22:11,800 --> 03:22:15,240
No, I just wanted to show you
that we can convert

2778
03:22:15,240 --> 03:22:21,240
between these variables
by just assigning them to each other.

2779
03:22:21,240 --> 03:22:25,200
This is not possible for ordinary
Java classes or other classes,

2780
03:22:25,200 --> 03:22:29,120
but this is possible for wrapper
classes and primitives

2781
03:22:30,120 --> 03:22:32,600
and the the only thing that I want to show

2782
03:22:36,120 --> 03:22:38,600
Can you
guys now explain what is boxing in one?

2783
03:22:38,840 --> 03:22:41,120
So it's a very famous interview question.

2784
03:22:41,120 --> 03:22:45,360
What is our goal in boxing
and what is boxing?

2785
03:22:45,360 --> 03:22:51,920
Can you guys now explain this?

2786
03:22:51,920 --> 03:23:04,000
Let's go boxing after this class.

2787
03:23:04,000 --> 03:23:08,760
Okay, perfect.

2788
03:23:08,760 --> 03:23:13,640
Primitive sporting object is boxing
and getting back that primitive is

2789
03:23:14,640 --> 03:23:24,720
unboxing their suit.

2790
03:23:24,720 --> 03:23:29,400
So let me go to the titty boxing,
putting primitive inside wrapper longer.

2791
03:23:29,400 --> 03:23:31,800
Why we're not welcome and yes, longer.

2792
03:23:31,800 --> 03:23:34,120
Wait Not not needed. Not recommended.

2793
03:23:34,600 --> 03:24:03,200
Yes, the wrapper classes

2794
03:24:03,200 --> 03:24:08,280
provide a way to use primitive data types.

2795
03:24:08,600 --> 03:24:11,400
So let me repeat wrapper classes,

2796
03:24:12,920 --> 03:24:16,800
but a wide array to use primitive
that are types

2797
03:24:16,800 --> 03:24:20,400
like for example integer boolean APC as

2798
03:24:22,040 --> 03:24:24,600
okay, they can now have matters.

2799
03:24:24,600 --> 03:24:26,400
You can call the construct,

2800
03:24:26,400 --> 03:24:30,360
you can create the object and all that
that you can do would be classes

2801
03:24:30,960 --> 03:24:34,920
when we put primitive inside
the wrapper is boxing and putting it

2802
03:24:34,960 --> 03:24:39,080
and getting it back to primitive is on
boxing chart cards are auto boxing

2803
03:24:39,080 --> 03:24:40,280
and boxing. Yes. And have

2804
03:24:41,400 --> 03:24:45,320
so wrapper classes in Java provides.

2805
03:24:45,560 --> 03:24:45,840
They are.

2806
03:24:45,840 --> 03:24:48,120
And they are called the wrapper classes.
Okay.

2807
03:24:48,360 --> 03:24:50,480
The object types for primitive
they are called

2808
03:24:51,360 --> 03:24:54,560
the wrapper class in provides
the mechanism

2809
03:24:54,560 --> 03:24:59,080
to convert the primitive
into object and object into primitive.

2810
03:24:59,080 --> 03:25:00,160
So we can do both.

2811
03:25:00,160 --> 03:25:04,320
We can go both load sides
from primitive to non primitive

2812
03:25:04,680 --> 03:25:07,880
wrapper type
and from wrapper type to primitive type.

2813
03:25:08,960 --> 03:25:12,480
Sometime We must use the wrapper classes,

2814
03:25:12,480 --> 03:25:16,080
for example,
when working with collections object.

2815
03:25:16,320 --> 03:25:19,120
So that's why we are learning it.

2816
03:25:19,120 --> 03:25:21,960
Sometimes We must use

2817
03:25:21,960 --> 03:25:26,280
the wrapper classes for example,
when working with collections slide

2818
03:25:26,280 --> 03:25:29,000
because collections
they don't work with primitives

2819
03:25:30,920 --> 03:25:32,760
such as at least we are putting.

2820
03:25:32,760 --> 03:25:36,560
The two types cannot be lost
and that's why we need these primitives.

2821
03:25:36,680 --> 03:25:40,000
And in these wrappers clear one
when we need the

2822
03:25:40,440 --> 03:25:50,760
why we are learning about the wrappers.

2823
03:25:50,760 --> 03:25:56,040
Each java primitive has a corresponding
wrapper class so far.

2824
03:25:56,040 --> 03:25:59,760
Boolean
we have boolean with capital B bar byte.

2825
03:25:59,760 --> 03:26:02,440
We have a byte with the capital and offer
all these.

2826
03:26:02,600 --> 03:26:05,280
ArrayList is the only collection object
we covered, correct?

2827
03:26:05,360 --> 03:26:06,160
Yes, ma'am.

2828
03:26:06,160 --> 03:26:08,920
But what we have have not covered that.

2829
03:26:09,000 --> 03:26:12,120
I will teaching you
about all the metadata, brethren.

2830
03:26:12,120 --> 03:26:13,920
How can you have them and all that?

2831
03:26:13,920 --> 03:26:18,240
So I have just just give you
a glimpse of the in this class.

2832
03:26:18,240 --> 03:26:20,200
We have not covered that.

2833
03:26:20,200 --> 03:26:25,360
So this is just a kind of it's
wrong in in this jar.

2834
03:26:25,360 --> 03:26:27,240
It should be correct. It's not just

2835
03:26:28,560 --> 03:26:30,360
Rasta looks good.

2836
03:26:31,400 --> 03:26:34,360
So boxing refers to convert

2837
03:26:34,360 --> 03:26:39,200
being a primitive value
in into responding to wrapper object.

2838
03:26:39,200 --> 03:26:41,440
This is what we call as boxing.

2839
03:26:43,320 --> 03:26:45,600
When a wrapper object is unwrapped

2840
03:26:45,720 --> 03:26:49,720
into primitive value,
then it is called unboxing simple, right?

2841
03:26:50,520 --> 03:26:54,520
So converting this,
this is the longer way putting wrapping

2842
03:26:54,520 --> 03:26:57,560
new keyword, dropping
the name of the class, and then passing

2843
03:26:57,560 --> 03:27:00,200
that value inside the constructor
This is the sharper way

2844
03:27:02,480 --> 03:27:03,560
in here.

2845
03:27:04,760 --> 03:27:07,400
So this is the longer we in,
this is the factory.

2846
03:27:08,240 --> 03:27:10,960
And then on when unboxing,
this is the longer way

2847
03:27:12,080 --> 03:27:21,000
and then this is the shorter.

2848
03:27:21,000 --> 03:27:24,440
So that that that was all about it
upper classes.

2849
03:27:24,800 --> 03:27:27,240
So now let's discuss about the collection
framework.

2850
03:27:27,240 --> 03:27:31,320
Collection framework in general provides
an architecture

2851
03:27:32,320 --> 03:27:36,160
to store and manipulate the group objects.

2852
03:27:36,160 --> 03:27:40,040
This storage part was there with the edit
as well, but the manipulation part,

2853
03:27:40,040 --> 03:27:43,920
we had to write that part always
whenever we had to do something

2854
03:27:45,720 --> 03:27:48,600
that represented as a single unit.

2855
03:27:50,040 --> 03:27:51,720
This framework has several

2856
03:27:51,720 --> 03:27:57,400
useful classes which have tons of useful,
which then makes it programmers

2857
03:27:57,720 --> 03:28:00,240
life task super super easy.

2858
03:28:00,520 --> 03:28:03,800
Okay,
I will teach you about those matters.

2859
03:28:04,600 --> 03:28:09,360
Java Collection Framework is a collection
of interfaces and classes

2860
03:28:09,480 --> 03:28:14,120
which help in supporting
processing your data efficiently.

2861
03:28:14,120 --> 03:28:17,400
Large amounts of data collections are used

2862
03:28:18,120 --> 03:28:21,360
almost in every programing language.

2863
03:28:21,360 --> 03:28:28,360
The most frequently used for
the best automation are list set map.

2864
03:28:28,960 --> 03:28:33,800
But the map is not a collection,
but it is used heavily with collection.

2865
03:28:33,800 --> 03:28:36,000
So this is just a picture
of all the classes

2866
03:28:36,000 --> 03:28:40,800
and interfaces that we will be learning.

2867
03:28:40,800 --> 03:28:42,800
And these are the commonly used methods.

2868
03:28:42,800 --> 03:28:45,720
And you guys have learned about the and

2869
03:28:46,680 --> 03:28:49,440
let's now learn about more

2870
03:28:50,400 --> 03:28:52,160
methods

2871
03:28:54,480 --> 03:28:56,280
from this collection stream.

2872
03:28:56,280 --> 03:28:56,840
Let's

2873
03:29:15,360 --> 03:29:18,040
go let's say we

2874
03:29:18,040 --> 03:29:20,280
we want to instead of add,

2875
03:29:20,280 --> 03:29:23,880
we want to have that flexibility
and now we are calling the

2876
03:29:25,240 --> 03:29:26,280
ArrayList class.

2877
03:29:26,280 --> 03:29:28,000
We are using the ArrayList.

2878
03:29:28,000 --> 03:29:30,840
So these are called
this is called Diamond Operator.

2879
03:29:30,840 --> 03:29:45,960
And inside here I specify in here, guys,
I specify the data type.

2880
03:29:45,960 --> 03:29:50,600
If I have the store integer,
then I writing well, while why

2881
03:29:50,640 --> 03:29:52,680
I am getting an out of

2882
03:29:58,000 --> 03:29:58,520
well, I'm

2883
03:29:58,520 --> 03:30:03,720
getting an error on print,

2884
03:30:03,720 --> 03:30:07,560
I must specify integer right

2885
03:30:10,440 --> 03:30:12,400
then I will not be having any issues

2886
03:30:12,400 --> 03:30:15,320
so I can say numbers dot and

2887
03:30:16,440 --> 03:30:21,720
then oops, numbers

2888
03:30:21,720 --> 03:30:27,520
don't add on the right
and then I can print out all the numbers.

2889
03:30:27,520 --> 03:30:32,120
And in here we also don't need any loop
or something like that to print that.

2890
03:30:32,160 --> 03:30:35,200
I can just write
the name of this ArrayList

2891
03:30:35,640 --> 03:30:40,800
and it will be printed on the console.

2892
03:30:40,800 --> 03:30:48,000
See then in complete,
these are the elements inside my it.

2893
03:30:48,000 --> 03:30:49,120
Okay.

2894
03:30:50,480 --> 03:30:53,760
If I have to store, maybe

2895
03:30:57,120 --> 03:30:58,640
booleans

2896
03:30:59,520 --> 03:31:02,560
I specify boolean

2897
03:31:12,120 --> 03:31:14,640
and then I can specify

2898
03:31:17,120 --> 03:31:24,360
who was

2899
03:31:30,520 --> 03:31:32,760
any value that I like

2900
03:31:36,760 --> 03:31:40,440
and then I can print to solve

2901
03:31:43,200 --> 03:31:46,440
who falls who in the clear days.

2902
03:31:46,680 --> 03:31:48,160
Are you guys done typing the score?

2903
03:31:48,160 --> 03:32:06,760
Super, super easy right?

2904
03:32:06,760 --> 03:32:10,440
Is making an ArrayList
without data type bad practice?

2905
03:32:10,440 --> 03:32:12,360
Yes, it's a bad practice. Simon.

2906
03:32:12,360 --> 03:32:14,280
I will teach you why it's about practice.

2907
03:32:14,280 --> 03:32:18,960
So first thing.

2908
03:32:18,960 --> 03:32:22,440
So let's say

2909
03:32:22,640 --> 03:32:26,840
that I am not specifying

2910
03:32:30,360 --> 03:32:32,680
this the data type in here.

2911
03:32:33,320 --> 03:32:36,240
I can also do that. Okay.

2912
03:32:36,240 --> 03:32:42,040
And now what I can do,

2913
03:32:42,040 --> 03:32:45,360
I can add maybe

2914
03:32:45,360 --> 03:32:47,400
Simon in here.

2915
03:32:47,520 --> 03:32:49,640
I add maybe. Oops

2916
03:32:55,360 --> 03:32:57,480
and number in here.

2917
03:32:58,160 --> 03:33:01,720
I can add, maybe this was

2918
03:33:02,040 --> 03:33:06,680
so this is how the areas were before
Java file.

2919
03:33:07,040 --> 03:33:09,680
This diamond operator was introduced
in Java Phi

2920
03:33:10,480 --> 03:33:16,200
before that I could have saved
any value inside my editor.

2921
03:33:16,440 --> 03:33:18,640
This is how programmers
used to write the pronouns.

2922
03:33:18,640 --> 03:33:20,520
But the issue with this approach is that

2923
03:33:21,840 --> 03:33:24,440
so? Let's say, for example,

2924
03:33:24,440 --> 03:33:27,360
I am writing a loop

2925
03:33:28,120 --> 03:33:30,160
ArrayList here.

2926
03:33:30,360 --> 03:33:48,240
If it were to add a ArrayList.

2927
03:33:48,240 --> 03:33:52,000
So now the issue with these approaches
that I have to keep track

2928
03:33:52,680 --> 03:33:55,880
of all the elements
that I am storing inside this list.

2929
03:33:55,880 --> 03:34:00,920
So for example, I know
that the first element is of type string.

2930
03:34:00,920 --> 03:34:03,240
So what I can do,

2931
03:34:03,640 --> 03:34:06,600
I can convert it back

2932
03:34:06,600 --> 03:34:09,680
to a string

2933
03:34:11,680 --> 03:34:13,800
and then maybe if I want to call

2934
03:34:13,800 --> 03:34:19,760
some methods from the string class,
like for example, and I can do that,

2935
03:34:20,400 --> 03:34:26,040
but can I do that with the number as well?

2936
03:34:26,040 --> 03:34:32,760
Do I have a length
method on the number as well?

2937
03:34:32,760 --> 03:34:34,080
So what will happen?

2938
03:34:34,080 --> 03:34:38,920
And so you are not getting any attacks
on compile time.

2939
03:34:39,440 --> 03:34:43,200
What will
you will get an error on runtime.

2940
03:34:43,680 --> 03:34:47,200
So Java will try to convert this
then to a string

2941
03:34:47,200 --> 03:34:50,240
and then I will try to gossip
to this twisting.

2942
03:34:50,240 --> 03:34:53,320
You will be getting an error at runtime.

2943
03:34:53,880 --> 03:34:57,920
Now think about this and tell me guys,
are the errors on

2944
03:34:57,920 --> 03:35:01,920
runtime better
or the add on compile time better?

2945
03:35:03,240 --> 03:35:04,680
Which type of items are better?

2946
03:35:04,680 --> 03:35:07,480
Compile time or runtime

2947
03:35:08,920 --> 03:35:11,880
compile time at outside of Baghdad? Why?

2948
03:35:11,880 --> 03:35:15,440
Because the running times add out
what happens when the user

2949
03:35:15,480 --> 03:35:20,840
they are already using the app
and if you have to fix those runtime

2950
03:35:20,840 --> 03:35:24,000
errors, there is a longer way
that you have to go through.

2951
03:35:24,000 --> 03:35:29,400
You have to go through development
and then testing staging production

2952
03:35:29,400 --> 03:35:33,120
and then if you are getting a compile time
error and the developers,

2953
03:35:33,120 --> 03:35:34,320
they can fix it right away.

2954
03:35:34,320 --> 03:35:38,480
So what Java guys did,
they realized that programmers were making

2955
03:35:38,480 --> 03:35:41,160
so many mistakes using this approach
because they have to

2956
03:35:41,160 --> 03:35:44,960
keep track of the elements
and there are no restriction.

2957
03:35:44,960 --> 03:35:47,400
Anyone could add any type of element.

2958
03:35:47,880 --> 03:35:51,440
So they introduced this diamond operator
and now once the

2959
03:35:51,440 --> 03:35:52,960
diamond operator is there,

2960
03:35:54,320 --> 03:35:57,760
if now you try to add a in here,

2961
03:35:58,280 --> 03:36:01,480
you will get an edit right away
at compile time.

2962
03:36:02,160 --> 03:36:02,680
Okay.

2963
03:36:02,840 --> 03:36:05,760
You will get the error right away.

2964
03:36:06,000 --> 03:36:08,680
Yes. Mean,
it means you filled out your testing.

2965
03:36:09,120 --> 03:36:11,840
So that's why these that

2966
03:36:12,080 --> 03:36:15,040
this diamond operator
was introduced in here.

2967
03:36:15,040 --> 03:36:16,600
There was no restriction.

2968
03:36:16,600 --> 03:36:22,440
Anyone can add anything and you will be
facing a lot of errors at runtime.

2969
03:36:22,600 --> 03:36:26,080
Imagine
a list is passed through your method

2970
03:36:26,360 --> 03:36:28,800
and you have to write the logic
for that matter.

2971
03:36:29,320 --> 03:36:31,600
So someone is passing
some data to your method.

2972
03:36:31,840 --> 03:36:33,960
You have to write a logic for that.

2973
03:36:34,720 --> 03:36:37,200
You have to write a lot of checks

2974
03:36:37,200 --> 03:36:40,600
if you have to use any building
method for that class.

2975
03:36:42,360 --> 03:36:45,880
So that's
why type safety is there in Java.

2976
03:36:45,880 --> 03:36:49,840
That's why Java is called a strongly
DI programing language,

2977
03:36:49,840 --> 03:36:52,840
because all the variables
for all the variables you do,

2978
03:36:52,840 --> 03:36:57,160
you know the data type, you know what
you can do, you know what you can do.

2979
03:36:57,160 --> 03:37:00,160
If you have to do something extra,
you convert it and you do it.

2980
03:37:00,640 --> 03:37:05,240
You you don't program blindly.

2981
03:37:05,240 --> 03:37:07,800
Or this is
there is another way of saying this that

2982
03:37:09,240 --> 03:37:10,840
your programs, they are

2983
03:37:10,840 --> 03:37:15,600
independent of the of the type of data
that that is passed.

2984
03:37:16,000 --> 03:37:20,160
So it's very important
if your program is failing

2985
03:37:20,160 --> 03:37:24,800
on certain types of data, you you
you are a bad programmer.

2986
03:37:24,800 --> 03:37:27,240
You should always cater
for these kind of features.

2987
03:37:27,240 --> 03:37:32,520
That's
why dysfunctional programing is so famous.

2988
03:37:32,520 --> 03:37:36,560
So that's why it is it's
not it's not a good practice.

2989
03:37:38,240 --> 03:37:46,120
So let me type it down.

2990
03:37:46,120 --> 03:37:48,520
It's not a good time.

2991
03:37:48,600 --> 03:38:00,120
Do you understand why
it is not a good practice?

2992
03:38:00,120 --> 03:38:00,480
Okay.

2993
03:38:00,480 --> 03:38:09,840
Are there any other questions, guys?

2994
03:38:09,840 --> 03:38:10,600
No questions.

2995
03:38:10,600 --> 03:38:13,680
You guys understand
how to create any any type of idea.

2996
03:38:13,680 --> 03:38:15,120
And how good are the elements? Right?

2997
03:38:15,120 --> 03:38:23,040
So do we move to the next demo?

2998
03:38:23,040 --> 03:38:28,320
Okay, so let me teach you

2999
03:38:28,320 --> 03:38:34,480
about some methods in here.

3000
03:38:34,480 --> 03:38:39,000
So for this example, let's create
an analyst.

3001
03:38:39,320 --> 03:38:44,760
Let's use the diamond operator
and specify the data type

3002
03:38:45,320 --> 03:38:48,480
that we will be using in here.

3003
03:38:49,200 --> 03:38:54,840
The Subindex is
equal to new and then it is

3004
03:38:58,560 --> 03:39:00,680
a So you guys started with

3005
03:39:00,880 --> 03:39:10,520
SDLC, right?

3006
03:39:10,520 --> 03:39:23,400
Then you guys learned
about the men we're testing.

3007
03:39:23,400 --> 03:39:31,240
Then the easiest part of this course.

3008
03:39:31,240 --> 03:39:34,440
And then you guys started

3009
03:39:36,960 --> 03:39:39,320
with selenium, right?

3010
03:39:39,320 --> 03:39:42,600
Oh, there was also

3011
03:39:50,000 --> 03:39:51,480
then you guys will learn

3012
03:39:51,480 --> 03:39:56,240
about the best trending

3013
03:39:59,800 --> 03:40:02,680
and then you guys will

3014
03:40:02,680 --> 03:40:06,360
learn about the cucumber

3015
03:40:06,800 --> 03:40:08,640
and then you guys will learn

3016
03:40:08,640 --> 03:40:12,000
about the squirrel.

3017
03:40:13,520 --> 03:40:18,480
Then you guys will learn about the APIs,

3018
03:40:19,640 --> 03:40:27,280
then you guys will learn about the Docker,

3019
03:40:28,520 --> 03:40:31,440
and then you guys will learn about the

3020
03:40:33,720 --> 03:40:35,520
buried abilities.

3021
03:40:35,680 --> 03:40:38,160
Then you guys will learn about the

3022
03:40:42,600 --> 03:40:45,960
more we're testing,

3023
03:40:45,960 --> 03:40:48,360
then you guys will learn about the

3024
03:40:58,560 --> 03:41:01,040
work and reviews, right?

3025
03:41:01,040 --> 03:41:03,000
I feel stressed.

3026
03:41:03,000 --> 03:41:05,880
And finally, you guys

3027
03:41:07,400 --> 03:41:10,240
will be dead.

3028
03:41:10,240 --> 03:41:11,080
That's good.

3029
03:41:11,080 --> 03:41:15,200
Because yes, we are adding
some classes on mobile mobile as well,

3030
03:41:15,240 --> 03:41:19,160
but they are not mandatory. So

3031
03:41:30,600 --> 03:41:32,280
so what this

3032
03:41:32,280 --> 03:41:36,360
that not inside cycle it's

3033
03:41:37,680 --> 03:41:42,120
okay.

3034
03:41:42,120 --> 03:41:46,680
So now if you want to check out
do we have shorter to reach that.

3035
03:41:46,960 --> 03:41:50,320
Yes you you
guys can directly jump in front of a train

3036
03:41:50,640 --> 03:41:53,160
now you have time

3037
03:41:57,960 --> 03:42:01,080
so I can use

3038
03:42:01,080 --> 03:42:05,040
whatever comes first.

3039
03:42:05,040 --> 03:42:10,720
So urban will use polymorphism
for all of them. Yes.

3040
03:42:11,440 --> 03:42:13,720
So and the first method

3041
03:42:13,720 --> 03:42:17,040
that we have learned is this ad method.

3042
03:42:17,240 --> 03:42:21,600
We use the ad method to add the elements

3043
03:42:21,920 --> 03:42:24,320
to the ad list.

3044
03:42:24,600 --> 03:42:28,760
And the second method
is the removal method.

3045
03:42:28,760 --> 03:42:32,320
If You don't want to use some math
or something you don't like,

3046
03:42:32,520 --> 03:42:33,960
you don't like some elements.

3047
03:42:33,960 --> 03:42:37,440
You guys can.

3048
03:42:38,480 --> 03:42:58,160
And so let's first check the side in here,
okay?

3049
03:42:58,160 --> 03:42:59,880
Okay. Let me let me remove that.

3050
03:42:59,880 --> 03:43:04,680
So sub decks not remove
and let's remove the deck.

3051
03:43:04,680 --> 03:43:05,040
Okay.

3052
03:43:07,840 --> 03:43:10,160
And then if I print out the

3053
03:43:10,160 --> 03:43:17,880
size again, what size

3054
03:43:17,880 --> 03:43:28,480
I will get guys,

3055
03:43:28,480 --> 03:43:31,320
I will be getting tired being

3056
03:43:34,560 --> 03:43:35,120
okay.

3057
03:43:36,640 --> 03:43:40,160
So this size of my part, it returns us

3058
03:43:40,200 --> 03:43:43,040
the number of elements

3059
03:43:43,480 --> 03:43:46,840
are present inside that list.

3060
03:43:47,160 --> 03:43:50,120
Okay, this removes matter.

3061
03:43:50,120 --> 03:43:54,640
It removes the elements from that list.

3062
03:43:54,960 --> 03:43:59,200
Okay.

3063
03:43:59,200 --> 03:43:59,600
Okay.

3064
03:43:59,800 --> 03:44:07,080
Are these matters clear, guys,
can you repeat all this size?

3065
03:44:07,080 --> 03:44:10,080
So size just tells you
how many elements are there in

3066
03:44:10,080 --> 03:44:18,720
your list.

3067
03:44:18,720 --> 03:44:24,480
Is size like length?

3068
03:44:24,480 --> 03:44:25,880
Yes. Housing.

3069
03:44:25,880 --> 03:44:27,480
Your slight length

3070
03:44:34,000 --> 03:44:36,760
and inside and list guys,

3071
03:44:37,440 --> 03:44:41,040
if you have to find out

3072
03:44:41,160 --> 03:44:43,320
the index of a specific element,

3073
03:44:44,280 --> 03:44:46,800
if you are using an array

3074
03:44:46,800 --> 03:44:49,600
and if you to find the index

3075
03:44:49,600 --> 03:44:53,040
of a specific element,

3076
03:44:53,040 --> 03:44:55,480
is there a method building for that thing?

3077
03:44:55,480 --> 03:45:04,120
It is.

3078
03:45:04,120 --> 03:45:05,840
If you have to find

3079
03:45:06,800 --> 03:45:07,400
Alexa, for

3080
03:45:07,400 --> 03:45:11,160
example, if you are using it,
then you want to find the index of school.

3081
03:45:11,480 --> 03:45:24,360
Is there a method available in areas?

3082
03:45:24,360 --> 03:45:26,720
There should be, but there is. There are.

3083
03:45:26,840 --> 03:45:27,120
There is.

3084
03:45:27,120 --> 03:45:31,960
No matter where you have to write a follow
up, you have to compare the elements

3085
03:45:31,960 --> 03:45:36,120
one by one, and then you will be getting
the index of that specific

3086
03:45:36,120 --> 03:45:40,720
element right.

3087
03:45:40,720 --> 03:45:45,720
But in here we have this building method,
we have this building method

3088
03:45:46,240 --> 03:45:49,440
that is an index of you guys

3089
03:45:49,440 --> 03:45:53,320
also that is disappointing,
but fine because they are primitive types

3090
03:45:53,320 --> 03:45:57,000
damage areas, they are primitive types,
they cannot have meters.

3091
03:45:57,160 --> 03:46:00,080
That is how they are super, super fast
and it occupies

3092
03:46:00,080 --> 03:46:09,560
less memory.

3093
03:46:09,560 --> 03:46:14,000
So inside ArrayList
we have this index of method

3094
03:46:14,040 --> 03:46:19,320
that you guys can use
to find the index of a specify element.

3095
03:46:19,440 --> 03:46:23,640
Okay, so let me copy

3096
03:46:25,440 --> 03:46:27,720
this is everything

3097
03:46:27,720 --> 03:46:30,520
layer on on inside this class

3098
03:46:31,640 --> 03:46:37,280
is everything layer
What I am doing in here,

3099
03:46:37,280 --> 03:46:40,200
adding the element, removing the element,

3100
03:46:41,280 --> 03:46:45,600
checking the size,
and then finding the index.

3101
03:46:45,600 --> 03:47:02,120
So let's move to the next level.

3102
03:47:02,120 --> 03:47:18,800
Looks like still looks like.

3103
03:47:18,800 --> 03:47:22,880
Okay, so the next method

3104
03:47:22,880 --> 03:47:25,680
is an overloaded version

3105
03:47:26,800 --> 03:47:29,520
of the ADD method.

3106
03:47:29,520 --> 03:47:34,840
So if you guys allow me
to put into this subject.

3107
03:47:34,840 --> 03:47:38,040
So I have commented out this line, okay?

3108
03:47:38,480 --> 03:47:44,680
And I am printing out the subjects.

3109
03:47:44,680 --> 03:47:47,640
So see, I see all the subjects in here,

3110
03:47:48,160 --> 03:47:51,560
but now I have this requirement

3111
03:47:51,560 --> 03:47:54,840
that I want to add this selenium

3112
03:47:55,360 --> 03:47:57,960
at the fourth index.

3113
03:47:57,960 --> 03:48:01,080
Can we do that An array of guys,

3114
03:48:01,080 --> 03:48:04,440
If I have to insert something in between

3115
03:48:04,440 --> 03:48:05,280
inside an array,

3116
03:48:07,080 --> 03:48:08,440
it will be replaced.

3117
03:48:08,440 --> 03:48:09,360
Right?

3118
03:48:09,760 --> 03:48:13,440
Even if we try to do that,
if we try to insert an element

3119
03:48:13,600 --> 03:48:18,120
specific index arrays, they are static,
they don't move the element.

3120
03:48:18,120 --> 03:48:21,240
It will replace that element, but at least

3121
03:48:21,640 --> 03:48:25,640
it will shift
all the elements towards the right

3122
03:48:26,080 --> 03:48:30,000
and then it can insert an element
at a specific location.

3123
03:48:30,000 --> 03:48:34,360
So for example,

3124
03:48:34,360 --> 03:48:39,600
if you say a subject
not add, you're going to see

3125
03:48:39,960 --> 03:48:42,000
there are two overloaded methods.

3126
03:48:42,000 --> 03:48:47,760
Add that only takes a string, but
another one that takes the index as well.

3127
03:48:47,840 --> 03:48:50,720
So if I specify the index

3128
03:48:51,560 --> 03:48:59,440
and then specify the selenium,

3129
03:48:59,440 --> 03:49:09,840
and if I print this out again.

3130
03:49:09,840 --> 03:49:13,320
So now you guys will observe that
all the elements

3131
03:49:14,000 --> 03:49:16,800
So SDLC is same,
manual testing is same doorway,

3132
03:49:16,880 --> 03:49:20,280
same duty, same, but at index number four,

3133
03:49:20,760 --> 03:49:24,960
now you see selenium and all the elements,

3134
03:49:24,960 --> 03:49:30,080
they have been shifted towards.

3135
03:49:30,080 --> 03:49:31,480
Right.

3136
03:49:31,480 --> 03:49:34,000
And it is also automatic.

3137
03:49:34,000 --> 03:49:36,560
You guys don't have to write any logic.

3138
03:49:38,040 --> 03:49:38,800
So with

3139
03:49:38,800 --> 03:49:42,600
help of
analyst, you guys can insert any element

3140
03:49:42,600 --> 03:49:47,280
at any index
without writing any extra logic.

3141
03:49:47,560 --> 03:49:53,280
Just to specify the index, all
the elements will be shifted automatically

3142
03:49:53,520 --> 03:49:56,440
and your element will be inserted

3143
03:49:56,440 --> 03:50:00,320
at that specific location.

3144
03:50:00,320 --> 03:50:03,200
Is it clear, guys,
how this add method with

3145
03:50:03,440 --> 03:50:10,880
with this two parameters working?

3146
03:50:10,880 --> 03:50:15,640
So if you have to insert something
at a specific location.

3147
03:50:15,920 --> 03:50:19,480
Yes. The flexible city adds
after index four.

3148
03:50:20,160 --> 03:50:22,320
So we add index PHI.

3149
03:50:22,800 --> 03:50:24,760
So this is index zero.

3150
03:50:24,760 --> 03:50:28,800
This is one,
this is two, this three, this is four.

3151
03:50:29,160 --> 03:50:32,000
And then we have their selenium.

3152
03:50:32,280 --> 03:50:32,920
Okay?

3153
03:50:33,240 --> 03:50:36,120
It means after index 40. Yep, yep.

3154
03:50:36,120 --> 03:50:39,480
The appeal are right here

3155
03:50:42,640 --> 03:50:46,520
and you guys don't have to write and loop
to print out the elements.

3156
03:50:46,520 --> 03:50:49,880
You just write system not out of subjects

3157
03:50:51,160 --> 03:50:52,920
and it will all

3158
03:50:52,920 --> 03:50:58,080
be printed automatically.

3159
03:50:58,080 --> 03:51:00,960
Arrays always start at zero. Yes.

3160
03:51:00,960 --> 03:51:01,680
The analyst.

3161
03:51:01,680 --> 03:51:07,680
They also start at zero.

3162
03:51:07,680 --> 03:51:12,840
I also don't like loops.

3163
03:51:12,840 --> 03:51:16,200
So this is we spend hours writing loops

3164
03:51:16,200 --> 03:51:19,040
before us.

3165
03:51:19,320 --> 03:51:22,320
And at the end of this course
I will tell you, you guys only need

3166
03:51:22,320 --> 03:51:25,760
to write one line of code
and it will test all of your website,

3167
03:51:26,160 --> 03:51:31,440
everything.

3168
03:51:31,440 --> 03:51:33,520
By the way, this is possible.

3169
03:51:33,520 --> 03:51:37,200
Some of the companies they are using

3170
03:51:37,240 --> 03:51:40,360
some frameworks
and inside those frameworks

3171
03:51:40,360 --> 03:51:42,120
you don't have to code anything.

3172
03:51:42,120 --> 03:51:45,600
You just specify your best guesses
and then the best guess

3173
03:51:45,640 --> 03:51:47,640
will be executed

3174
03:51:48,800 --> 03:51:51,120
No, no, there are frameworks,
there are things,

3175
03:51:52,120 --> 03:51:55,240
but not all of because they are bad,
not all of them.

3176
03:51:55,760 --> 03:51:57,920
They use and they are also not flexible

3177
03:51:59,400 --> 03:52:01,320
using Java, using selenium.

3178
03:52:01,320 --> 03:52:03,600
You guys can write any piece of logic

3179
03:52:05,960 --> 03:52:08,160
and you guys can build
your own frameworks.

3180
03:52:09,400 --> 03:52:12,640
Yes. Let me put BigCommerce

3181
03:52:31,080 --> 03:52:33,440
where is this company

3182
03:52:34,440 --> 03:52:37,360
can No, I googled know the names

3183
03:52:41,040 --> 03:52:45,200
but there was this or yes I know a student
who used to.

3184
03:52:45,200 --> 03:52:47,400
I think it was cyber.

3185
03:52:47,400 --> 03:52:49,320
Cyber something.

3186
03:52:49,320 --> 03:52:51,800
And now you guys want to be
after those companies.

3187
03:52:52,920 --> 03:52:55,360
You guys always want a shortcut, right?

3188
03:52:55,400 --> 03:53:11,240
You can never want to learn something.

3189
03:53:11,240 --> 03:53:22,400
Okay.

3190
03:53:22,400 --> 03:53:24,600
Life is short learning.

3191
03:53:24,600 --> 03:53:27,880
Shortcut is also learning.

3192
03:53:27,880 --> 03:53:32,240
If so, the next method

3193
03:53:34,000 --> 03:53:36,120
is again,

3194
03:53:36,120 --> 03:53:42,320
very simple method.

3195
03:53:42,320 --> 03:54:08,400
So let's say you have to add a list.

3196
03:54:08,400 --> 03:54:12,360
So I have some elements in one list

3197
03:54:13,400 --> 03:54:17,520
and I have some other,
but in a different list.

3198
03:54:18,280 --> 03:54:23,720
And now I want to combine those.

3199
03:54:23,720 --> 03:54:26,840
When you guys think of life is short,
think about me.

3200
03:54:26,840 --> 03:54:30,000
I spent 40 years in engineering,
two years in Masters,

3201
03:54:30,360 --> 03:54:33,320
and then five years in the industry.

3202
03:54:33,320 --> 03:54:37,000
And when you guys will be getting a job,
essentially

3203
03:54:37,000 --> 03:54:40,800
you guys will be doing the same task
that I am doing.

3204
03:54:40,800 --> 03:54:43,320
But I have to go through a very long

3205
03:54:45,120 --> 03:54:46,080
and on the job.

3206
03:54:46,080 --> 03:54:48,920
I studied
44 subjects in my engineering degree

3207
03:54:49,400 --> 03:54:51,840
and that job
I was only using three of them

3208
03:54:53,960 --> 03:54:56,640
and now I don't even remember those

3209
03:54:56,640 --> 03:55:09,840
subjects.

3210
03:55:09,840 --> 03:55:14,120
I don't think so.

3211
03:55:14,120 --> 03:55:15,440
You know what? You don't think so?

3212
03:55:15,440 --> 03:55:17,640
You don't remember all

3213
03:55:19,800 --> 03:55:22,760
Okay, well, you are a hero.

3214
03:55:23,920 --> 03:55:33,600
At least I get some appreciation
from Katrina. Yes.

3215
03:55:33,600 --> 03:55:38,640
So let's say, guys, I have two lists.

3216
03:55:39,560 --> 03:55:44,680
And now instead of having these two lists,

3217
03:55:44,680 --> 03:55:47,800
I want to all the elements,

3218
03:55:48,360 --> 03:55:52,680
maybe inside one list.

3219
03:55:52,680 --> 03:56:00,240
So let's say, for example,
I want to create.

3220
03:56:01,440 --> 03:56:04,040
So let me call its

3221
03:56:04,040 --> 03:56:20,800
subjects one oops.

3222
03:56:20,800 --> 03:56:23,920
Now I want to build a new list

3223
03:56:23,920 --> 03:56:25,920
and I have to combine

3224
03:56:25,960 --> 03:56:28,800
the elements from these two lists.

3225
03:56:29,040 --> 03:56:32,760
So in our list, if I have to add, is guys

3226
03:56:33,360 --> 03:56:35,880
both of size, let's say maybe ten, 20

3227
03:56:35,880 --> 03:56:38,200
or whatever, and I have to create a new

3228
03:56:39,000 --> 03:56:41,640
and I have to put all the elements
inside that list.

3229
03:56:41,640 --> 03:56:48,560
How much code you guys have right?

3230
03:56:48,560 --> 03:56:50,880
A lot. And it will be difficult, right?

3231
03:56:51,360 --> 03:56:55,200
Finding out the sizes of the arrays
and and all that.

3232
03:56:55,800 --> 03:56:59,000
But in at least what you guys can do,

3233
03:57:00,560 --> 03:57:01,960
you guys can use the

3234
03:57:01,960 --> 03:57:11,160
building methods,

3235
03:57:11,160 --> 03:57:15,120
I can save subjects dot and all

3236
03:57:16,800 --> 03:57:22,760
and all
and I can add the list to this list.

3237
03:57:24,000 --> 03:57:27,640
Then I can again
say a subject dot and also this time

3238
03:57:27,640 --> 03:57:29,640
I'm using an all method

3239
03:57:32,800 --> 03:57:34,120
and then

3240
03:57:34,600 --> 03:57:36,520
subjects to

3241
03:57:36,760 --> 03:57:38,760
and now

3242
03:57:40,800 --> 03:57:45,000
if I print out the subjects

3243
03:57:45,240 --> 03:57:49,640
list.

3244
03:57:49,640 --> 03:57:51,160
Yep, that's all.

3245
03:57:51,160 --> 03:57:54,720
Now the subject will contain
all the elements,

3246
03:57:54,720 --> 03:57:57,960
all the items in here, no loops, nothing.

3247
03:57:57,960 --> 03:57:58,200
Just.

3248
03:57:58,200 --> 03:58:02,400
Just call that mental.

3249
03:58:02,400 --> 03:58:05,080
And there is one more thing I

3250
03:58:06,480 --> 03:58:08,080
if you want to remove

3251
03:58:08,080 --> 03:58:11,040
all the elements from a list.

3252
03:58:11,040 --> 03:58:12,280
So for example,

3253
03:58:12,280 --> 03:58:17,000
I have copied all the elements from
this list and this list, this ArrayList.

3254
03:58:17,000 --> 03:58:17,760
Right.

3255
03:58:18,040 --> 03:58:21,120
I can also do this.

3256
03:58:21,120 --> 03:58:23,400
I can remove
all the elements from the list

3257
03:58:23,400 --> 03:58:26,400
because now
I have duplicate data in multiple, right?

3258
03:58:26,400 --> 03:58:27,960
So I can say a subject.

3259
03:58:29,840 --> 03:58:31,480
Subject one

3260
03:58:31,480 --> 03:58:34,280
subject one dot clear.

3261
03:58:34,840 --> 03:58:38,200
I can call this clear method
and all the elements

3262
03:58:38,200 --> 03:58:40,320
will be removed

3263
03:58:45,040 --> 03:58:46,680
from this.

3264
03:58:46,680 --> 03:58:51,360
These list again, we can index it
and list the place where we want to add.

3265
03:58:51,360 --> 03:58:59,880
Yes, yes, you are right.

3266
03:58:59,880 --> 03:59:02,680
Oops, I can print that.

3267
03:59:02,720 --> 03:59:05,480
So if I now print this subject one

3268
03:59:07,160 --> 03:59:09,640
and if I put in the

3269
03:59:12,920 --> 03:59:15,000
subject to

3270
03:59:19,200 --> 03:59:19,800
you see

3271
03:59:19,800 --> 03:59:23,760
the both are empty now.

3272
03:59:23,760 --> 03:59:24,920
Nibble currently now.

3273
03:59:24,920 --> 03:59:29,120
And what you can do if you if you check

3274
03:59:34,440 --> 03:59:35,040
so this

3275
03:59:35,040 --> 03:59:38,640
and all method it is also overloaded.

3276
03:59:38,840 --> 03:59:43,280
So right now if you observe this test
and it is being added after selenium,

3277
03:59:43,920 --> 03:59:49,200
write this test and is being added
after selenium if you want to be inserted

3278
03:59:49,200 --> 03:59:53,920
after manual testing, this second list,
if you want to insert in here,

3279
03:59:54,240 --> 03:59:57,760
you can specify the index,
you can specify the index.

3280
03:59:58,360 --> 03:59:59,280
And now

3281
04:00:05,400 --> 04:00:07,680
you guys will observe that

3282
04:00:09,000 --> 04:00:11,160
this firstly is listed it

3283
04:00:13,080 --> 04:00:15,600
let me show it in one school, if you

3284
04:00:18,440 --> 04:00:19,520
is it readable, right.

3285
04:00:19,520 --> 04:00:22,080
I hope you guys can perform this readable.

3286
04:00:23,680 --> 04:00:25,360
So if you guys observed

3287
04:00:25,360 --> 04:00:28,080
we have this SDLC, this is in here.

3288
04:00:28,080 --> 04:00:30,120
We have this manual testing.

3289
04:00:30,120 --> 04:00:33,640
But right after that,
instead of having Java

3290
04:00:33,720 --> 04:00:37,560
Gate and Selenium,
we have extended, right? Why?

3291
04:00:37,560 --> 04:00:41,520
We have extended because we specified
in here we said, Hey, Java,

3292
04:00:42,240 --> 04:00:44,960
you know what inserted this list of first

3293
04:00:45,320 --> 04:00:49,520
at index two and once we have inserted
all the elements.

3294
04:00:49,520 --> 04:00:51,760
So if you see after Mark interviews

3295
04:00:52,680 --> 04:00:55,920
now we have Java.

3296
04:00:55,920 --> 04:01:00,840
So we are inserting the complete list
in between by specifying the index.

3297
04:01:01,240 --> 04:01:02,600
Okay, does it make sense?

3298
04:01:02,600 --> 04:01:05,080
Is it clear how how this index is working

3299
04:01:08,360 --> 04:01:12,240
so I can
insert the elements just like that

3300
04:01:12,240 --> 04:01:18,040
or I can specify the location
and at which I want to insert

3301
04:01:18,040 --> 04:01:23,000
my elements here.

3302
04:01:23,000 --> 04:01:24,680
Okay.

3303
04:01:24,680 --> 04:01:27,520
Remove all

3304
04:01:33,080 --> 04:01:35,000
and then

3305
04:01:36,840 --> 04:01:39,080
we have remove all matter does that.

3306
04:01:39,120 --> 04:01:45,480
So let's say, for example, if you want to.

3307
04:01:45,480 --> 04:01:50,600
So let me do this.

3308
04:01:50,600 --> 04:01:54,600
So let me,

3309
04:01:54,600 --> 04:02:01,160
let me create a new file from there.

3310
04:02:01,160 --> 04:02:02,920
Can I move to the next one guys in it?

3311
04:02:02,920 --> 04:02:11,480
Claire Everyone is done typing.

3312
04:02:11,480 --> 04:02:45,120
Okay?

3313
04:02:45,120 --> 04:02:53,920
We don't want them young to develop.

3314
04:02:53,920 --> 04:02:56,800
So let's say I have a list.

3315
04:02:56,800 --> 04:03:06,920
And from that list.

3316
04:03:06,920 --> 04:03:10,680
So let me make it a shorter one
so that you guys can see you.

3317
04:03:11,200 --> 04:03:12,880
So I have a longer list.

3318
04:03:12,880 --> 04:03:17,040
And from that list
I want to multiple elements.

3319
04:03:17,640 --> 04:03:21,400
Okay, So let's say for example,
are from this list.

3320
04:03:21,400 --> 04:03:24,840
Subject one
I want to remove all of these elements.

3321
04:03:24,840 --> 04:03:26,280
These four elements.

3322
04:03:26,280 --> 04:03:28,280
So do I need to do it one by one?

3323
04:03:28,280 --> 04:03:32,760
No, I can use.

3324
04:03:32,760 --> 04:03:48,040
So let me first print this out.

3325
04:03:48,040 --> 04:03:48,920
So in here.

3326
04:03:50,760 --> 04:03:54,640
I see all the elements from this list.

3327
04:03:55,520 --> 04:03:57,320
Okay.

3328
04:03:57,320 --> 04:04:01,720
But if I want to remove these four
elements, what I can do, I can see

3329
04:04:02,680 --> 04:04:05,400
subjects one or two remove all

3330
04:04:08,760 --> 04:04:12,120
and I can pass the second ArrayList
in here.

3331
04:04:12,560 --> 04:04:16,560
Now, all the elements
which are present inside this list,

3332
04:04:16,560 --> 04:04:20,520
and they are also present in here,
they will be removed from this list.

3333
04:04:21,600 --> 04:04:35,760
And now if I print this out, you see Dr.

3334
04:04:35,760 --> 04:04:37,320
A.W. as mobile.

3335
04:04:37,320 --> 04:04:43,560
Mark interview the four elements
they have been removed from this subject.

3336
04:04:43,560 --> 04:04:48,720
One using the remove all third.

3337
04:04:48,720 --> 04:05:05,240
Is it clear right
how the removal is working?

3338
04:05:05,240 --> 04:05:09,160
So let's stop here for all the

3339
04:05:09,160 --> 04:05:12,840
We need two different list. Yes.

3340
04:05:14,400 --> 04:05:16,200
Only subject one printed

3341
04:05:16,200 --> 04:05:18,680
without these elements.

3342
04:05:20,520 --> 04:05:21,600
Can you scroll up the

3343
04:05:26,880 --> 04:05:27,560
if we want to

3344
04:05:27,560 --> 04:05:30,120
remove just blue from the list,
how do we do that?

3345
04:05:30,640 --> 04:05:32,240
Then you can create a list.

3346
04:05:32,240 --> 04:05:35,280
Put those two in
or you can remove them one by one.

3347
04:05:35,760 --> 04:05:51,440
Or you can specify their index.

3348
04:05:51,440 --> 04:05:57,000
A range of indices are.

3349
04:05:57,000 --> 04:05:57,960
I don't think so.

3350
04:05:57,960 --> 04:06:01,320
Range is possible in a bit,
but you can write a loop

3351
04:06:01,320 --> 04:06:05,240
and after that loop
you can start removing all the elements

3352
04:06:08,440 --> 04:06:10,720
and that is the retain all method.

3353
04:06:11,200 --> 04:06:13,320
So let's say for example,
if the list is big

3354
04:06:13,320 --> 04:06:16,920
and you want to repeat a retain
only 5 to 6 elements,

3355
04:06:17,440 --> 04:06:20,760
you can pass those elements
and all other elements

3356
04:06:20,760 --> 04:06:25,000
will be removed.

3357
04:06:25,000 --> 04:06:27,600
Last which line? Now

3358
04:06:28,440 --> 04:06:34,320
I wanted to take three.

3359
04:06:34,760 --> 04:06:37,360
I am just printing in here

3360
04:06:37,360 --> 04:06:41,040
and. I am removing these subjects,
these subjects.

3361
04:06:41,040 --> 04:06:44,880
I am removing these subjects
from this list, from these

3362
04:06:44,880 --> 04:06:53,000
objects. Now

3363
04:07:02,840 --> 04:07:04,880
let me if

3364
04:07:04,880 --> 04:07:07,720
you I can, I think, do some

3365
04:07:42,880 --> 04:07:47,840
to try to do these tasks. Yes.

3366
04:07:47,880 --> 04:07:56,400
Let me go back to the format.

3367
04:07:56,400 --> 04:07:59,760
Otherwise, I'm going to show you
how to do that in the next

3368
04:07:59,760 --> 04:08:04,360
class.

3369
04:08:04,360 --> 04:08:07,080
Mine never print subject to list

3370
04:08:17,400 --> 04:08:21,200
because you have commented out
that piece of code and then how

3371
04:08:21,200 --> 04:08:22,360
it can print out.

3372
04:08:22,360 --> 04:08:25,320
You are not printing
and you are not writing out for that.

3373
04:08:25,640 --> 04:08:29,520
You didn't write us out for that.

3374
04:08:29,520 --> 04:08:32,120
Then how can print out

3375
04:08:32,880 --> 04:08:34,960
difference between remove and clear player

3376
04:08:34,960 --> 04:08:37,800
will remove everything from the list.

3377
04:08:38,600 --> 04:08:41,560
Remove
only remove the elements that you boss

3378
04:08:53,840 --> 04:08:54,240
the reader.

3379
04:08:54,240 --> 04:08:55,760
Question is

3380
04:09:02,880 --> 04:09:04,760
no questions.

3381
04:09:04,760 --> 04:09:06,840
Okay, let's call it today.

3382
04:09:06,840 --> 04:09:09,760
I will post decode
and we'll share the slides

3383
04:09:10,360 --> 04:09:12,960
and all that and.

3384
04:09:12,960 --> 04:09:19,320
Try to watch those videos
that I shared in the course and all smart.

3385
04:09:19,320 --> 04:09:21,640
I am posting this board
and see what will help you out.

3386
04:09:22,800 --> 04:09:23,400
Bye bye.

3387
04:09:23,400 --> 04:09:26,400
Take care. Take some rest.

3388
04:09:26,400 --> 04:09:33,320
How was the class today, by the way?

3389
04:09:33,320 --> 04:09:36,520
Can you post out of any or all? Yes.

3390
04:09:36,520 --> 04:09:38,840
By the way, try to upload

3391
04:09:41,200 --> 04:09:41,880
a lot of you.

3392
04:09:41,880 --> 04:09:45,280
You'll be thanking us.

3393
04:09:45,280 --> 04:09:47,120
Okay. Bye bye.

3394
04:09:47,120 --> 04:09:49,320
Take care.
