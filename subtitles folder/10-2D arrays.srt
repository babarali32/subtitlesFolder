1
00:00:05,200 --> 00:00:06,280
Your favorite thing in

2
00:00:06,280 --> 00:00:09,640
programing is two nasty things, right?

3
00:00:10,400 --> 00:00:12,920
You you nested if conditions inside the

4
00:00:12,920 --> 00:00:16,080
if you then nested the loops.

5
00:00:17,320 --> 00:00:19,800
And today we are going to nest arrays.

6
00:00:20,800 --> 00:00:23,720
Arrays inside other areas.

7
00:00:25,440 --> 00:00:27,240
And these nested arrays

8
00:00:27,240 --> 00:00:30,600
one area inside another added

9
00:00:30,600 --> 00:00:32,680
They are called to the arrays.

10
00:00:32,680 --> 00:00:35,800
Two dimensional arrays.

11
00:00:36,120 --> 00:00:37,120
Have you heard this word?

12
00:00:37,120 --> 00:00:37,960
Two dimensional.

13
00:00:37,960 --> 00:00:40,520
Three dimensional.

14
00:00:43,760 --> 00:00:45,000
What does it mean?

15
00:00:45,000 --> 00:00:45,720
What does it mean?

16
00:00:45,720 --> 00:00:48,920
If something has three dimension
or two dimensions,

17
00:00:48,920 --> 00:00:57,720
or even one dimension?

18
00:00:58,680 --> 00:01:00,080
Columns and rows?

19
00:01:00,080 --> 00:01:02,520
Yeah.

20
00:01:07,280 --> 00:01:10,600
So usually this is how we understand

21
00:01:10,600 --> 00:01:12,720
a line is one dimensional, right?

22
00:01:13,280 --> 00:01:14,240
Every one.

23
00:01:14,560 --> 00:01:17,840
A line is one dimensional.

24
00:01:18,240 --> 00:01:20,280
Usually we're denoted with X, right?

25
00:01:21,160 --> 00:01:27,280
But if we have one more line,
another coordinate,

26
00:01:27,320 --> 00:01:29,360
then we call it to rhyme or flex and y.

27
00:01:29,360 --> 00:01:31,400
And then we have Z dimension as well.

28
00:01:31,880 --> 00:01:33,840
Something that has dropped as well.

29
00:01:33,840 --> 00:01:36,840
So one de add
is that we have been creating.

30
00:01:37,320 --> 00:01:40,480
And they, they, they grow linearly, right?

31
00:01:40,960 --> 00:01:45,480
We keep on adding the elements
and they keep on storing the elements.

32
00:01:45,920 --> 00:01:49,200
Element number one,
two, three, four, five.

33
00:01:49,560 --> 00:01:52,240
And if we increase the size,
it will keep on growing like

34
00:01:52,240 --> 00:01:55,040
this linearly linear fashion.

35
00:01:55,320 --> 00:01:57,240
What if I add more?

36
00:01:57,240 --> 00:02:02,520
Add is water actually adds well like this.

37
00:02:05,800 --> 00:02:07,400
So this is how it would be added.

38
00:02:07,400 --> 00:02:10,640
Looks like my combination of multiple

39
00:02:11,000 --> 00:02:18,120
one degrees.

40
00:02:21,040 --> 00:02:24,120
This is a two dimensional.

41
00:02:24,600 --> 00:02:28,320
This is what we will be creating today.

42
00:02:28,320 --> 00:02:30,920
So this is adding number zero.

43
00:02:32,720 --> 00:02:35,440
This is adding number one.

44
00:02:35,440 --> 00:02:37,120
This is adding number two.

45
00:02:37,120 --> 00:02:39,360
And this is adding number three.

46
00:02:39,360 --> 00:02:42,720
And this one is the zeroth element

47
00:02:42,840 --> 00:02:46,880
element
on index number zero inside at a zero.

48
00:02:47,480 --> 00:02:50,800
This one is element only at index.

49
00:02:50,800 --> 00:02:54,000
Number one inside to add is zero two,

50
00:02:54,000 --> 00:02:57,000
three, four,

51
00:02:57,000 --> 00:02:58,560
five, six.

52
00:02:58,560 --> 00:03:00,760
And then similarly,

53
00:03:01,240 --> 00:03:03,120
this one is 012, three.

54
00:03:03,120 --> 00:03:05,440
Maybe I should open in an Excel five.

55
00:03:06,360 --> 00:03:16,640
I think it will be easier
to visualize that three.

56
00:03:20,280 --> 00:03:22,560
So this is what we have been doing, right?

57
00:03:22,760 --> 00:03:25,760
Creating arrays like this.

58
00:03:25,760 --> 00:03:29,680
And then we say,
okay, this is element number zero

59
00:03:30,720 --> 00:03:33,640
one, two and three, right?

60
00:03:33,680 --> 00:03:35,560
Everyone understands this part.

61
00:03:35,560 --> 00:03:40,600
And then we have been storing
multiple items inside these adds, Right?

62
00:03:40,640 --> 00:03:44,480
Let's say, for example,
we can put the names on

63
00:03:54,800 --> 00:03:57,720
something like this, right?

64
00:04:00,040 --> 00:04:04,440
This this was our one D addy
or normal addy.

65
00:04:06,120 --> 00:04:09,880
And from this area,
if let's say I want to access

66
00:04:09,880 --> 00:04:14,040
this,
my let's say this at a is called era.

67
00:04:14,520 --> 00:04:16,800
The name of the area is era.

68
00:04:16,800 --> 00:04:18,080
So let's see if I want access.

69
00:04:18,080 --> 00:04:22,320
It's my How can we do this in one day?

70
00:04:24,000 --> 00:04:27,000
We can write the name of the area

71
00:04:28,960 --> 00:04:32,880
and then two square brackets
and then the index.

72
00:04:32,880 --> 00:04:37,040
And it will give us this element.

73
00:04:37,760 --> 00:04:41,160
Everyone understands this.

74
00:04:42,920 --> 00:04:46,120
This was how one D at a
or simple areas work.

75
00:04:46,880 --> 00:04:48,040
But imagine now

76
00:04:51,080 --> 00:04:53,400
you have multiple

77
00:04:55,040 --> 00:04:57,800
arrays stacked like this.

78
00:04:58,880 --> 00:05:01,040
It will be very similar to

79
00:05:01,080 --> 00:05:03,240
how a metrics looks like.

80
00:05:04,720 --> 00:05:07,480
And let's say you are storing some

81
00:05:08,760 --> 00:05:59,720
other names here and.

82
00:06:00,240 --> 00:06:03,640
And we are.

83
00:06:04,360 --> 00:06:06,120
So look at this, Addy.

84
00:06:06,840 --> 00:06:08,480
And these number.

85
00:06:08,480 --> 00:06:10,360
Zero. One, two, three.

86
00:06:10,360 --> 00:06:13,200
I'm simply writing these indexes for your.

87
00:06:13,480 --> 00:06:15,160
So that you can understand easily.

88
00:06:15,160 --> 00:06:17,320
Is it okay if I remove these indexes?

89
00:06:17,360 --> 00:06:20,200
Will you be still be able to know
that in this zero index?

90
00:06:20,200 --> 00:06:22,000
Michelle is one.

91
00:06:22,440 --> 00:06:22,880
Okay.

92
00:06:22,880 --> 00:06:31,960
Let me do this.

93
00:06:37,360 --> 00:06:39,720
This is how I do the array looks like.

94
00:06:39,720 --> 00:06:42,000
Are you still able to visualize that?

95
00:06:42,120 --> 00:06:46,920
It is a combination of multiple one D
arrays.

96
00:06:47,160 --> 00:06:48,280
Okay, perfect.

97
00:06:48,280 --> 00:06:51,600
So this is adding number zero.

98
00:06:53,160 --> 00:06:55,680
This is add in number one.

99
00:06:55,680 --> 00:06:57,520
This is that number two.

100
00:06:57,520 --> 00:06:59,480
And this is adding number three.

101
00:06:59,480 --> 00:07:01,880
Okay, let me put the number in here.

102
00:07:01,880 --> 00:07:05,480
And this is the zero index for added zero.

103
00:07:05,480 --> 00:07:06,240
This is one.

104
00:07:07,480 --> 00:07:08,520
This is two.

105
00:07:08,520 --> 00:07:11,120
And this is three.

106
00:07:11,120 --> 00:07:12,440
All looks good.

107
00:07:12,440 --> 00:07:17,800
These numbers here, they represent
you can call the represents.

108
00:07:17,800 --> 00:07:20,480
The individual ADD is all you use.

109
00:07:20,520 --> 00:07:23,920
If you want to understand from a matrix,

110
00:07:24,720 --> 00:07:27,560
this numbers here, these ones,
they represent rows.

111
00:07:28,000 --> 00:07:31,160
And these ones they represent columns.

112
00:07:31,160 --> 00:07:33,320
Now tell me, are this Bob?

113
00:07:34,480 --> 00:07:36,720
This Bob in which area?

114
00:07:36,960 --> 00:07:40,960
Tell me the index of the area
in which added this Bob is present.

115
00:07:41,640 --> 00:07:45,760
Give me the index of the added.

116
00:07:45,760 --> 00:07:49,880
This Bob is present inside the array,

117
00:07:50,440 --> 00:07:52,920
which is at index number two.

118
00:07:53,040 --> 00:07:54,080
Right.

119
00:07:54,120 --> 00:07:57,880
And if we look at the column,
it is the column number one.

120
00:07:57,960 --> 00:08:02,240
So if we want to get to Bob
and next again,

121
00:08:02,240 --> 00:08:06,240
let's say we are again
saying the name of the areas, Ada.

122
00:08:07,240 --> 00:08:07,840
Okay.

123
00:08:08,000 --> 00:08:09,120
So tell me this.

124
00:08:09,120 --> 00:08:19,440
If I have the name of the array as IRR,
I mean, the one D added,

125
00:08:19,440 --> 00:08:24,000
we use one square bracket and to the array
because there are rules and columns,

126
00:08:24,640 --> 00:08:26,960
we will be needing two square brackets.

127
00:08:27,960 --> 00:08:32,520
This is the
this is how the syntax for the area works.

128
00:08:35,480 --> 00:08:36,720
So here,

129
00:08:37,280 --> 00:08:41,720
if I tried to call my one

130
00:08:43,240 --> 00:08:47,520
and this will give me Bob.

131
00:08:47,640 --> 00:08:50,680
Okay. Now tell me, how can I get John?

132
00:08:50,680 --> 00:08:52,040
Tell me the indexes.

133
00:08:52,040 --> 00:08:54,280
Let's say I have I an area.

134
00:08:54,360 --> 00:08:57,280
What should I put inside this
good breakfast for John?

135
00:08:59,000 --> 00:09:01,480
Exactly. One

136
00:09:01,480 --> 00:09:02,280
and three.

137
00:09:02,280 --> 00:09:08,520
Is there anyone who
who does not understand how writing are?

138
00:09:08,520 --> 00:09:19,040
One and three will give us John.

139
00:09:19,840 --> 00:09:20,200
Okay.

140
00:09:20,200 --> 00:09:30,320
If I want to get to the hand.

141
00:09:30,320 --> 00:09:31,040
Zero zero.

142
00:09:32,040 --> 00:09:32,840
Exactly.

143
00:09:32,840 --> 00:09:35,680
Row number zero, Column number zero.

144
00:09:35,960 --> 00:09:38,600
Then give us a

145
00:09:39,920 --> 00:09:41,440
all could help everybody.

146
00:09:41,440 --> 00:09:44,160
So that was it for today's class.

147
00:09:44,160 --> 00:09:45,960
We just wanted to go over the two areas.

148
00:09:45,960 --> 00:09:48,960
You guys were really quick to understand
how good the areas were.

149
00:09:49,680 --> 00:09:52,000
So let's call it a day.

150
00:09:52,000 --> 00:09:56,240
And now you can start
working on your project.

151
00:09:58,000 --> 00:10:00,200
No, you guys don't believe

152
00:10:01,680 --> 00:10:04,320
that.

153
00:10:04,440 --> 00:10:04,720
Okay.

154
00:10:04,720 --> 00:10:07,960
Let's try to next try to write a program.

155
00:10:07,960 --> 00:10:11,080
Let's try to do coding for this.

156
00:10:11,080 --> 00:10:12,080
Okay.

157
00:10:13,120 --> 00:10:14,760
So let me do this.

158
00:10:14,760 --> 00:10:17,400
Let me copy this exact same metrics.

159
00:10:17,400 --> 00:10:19,680
And let's go to our intelligence

160
00:10:20,880 --> 00:10:23,240
and let's try to write it.

161
00:10:23,240 --> 00:10:27,400
So E one to the

162
00:10:28,800 --> 00:10:37,040
is so

163
00:10:37,560 --> 00:10:40,560
and then we have to create one diary.

164
00:10:40,760 --> 00:10:43,800
We what?

165
00:10:43,800 --> 00:10:45,720
What what is the syntax? What do we write?

166
00:10:46,680 --> 00:10:48,400
Then when we have to create one zero,

167
00:10:48,400 --> 00:10:56,920
what do we specify first?

168
00:10:56,920 --> 00:10:58,480
That type.

169
00:10:58,480 --> 00:11:01,840
So if I want to store these names,

170
00:11:01,840 --> 00:11:04,920
what should be my data type?

171
00:11:06,600 --> 00:11:08,960
Exactly.

172
00:11:09,560 --> 00:11:10,480
String.

173
00:11:11,520 --> 00:11:13,680
And after the data type, what to specify

174
00:11:16,800 --> 00:11:18,400
square bracket.

175
00:11:18,400 --> 00:11:21,920
If if it is
if I'm planning to create one the array.

176
00:11:22,640 --> 00:11:24,360
How many square brackets?

177
00:11:24,360 --> 00:11:27,320
I have to specify how many pairs one.

178
00:11:28,040 --> 00:11:31,800
If I want to create to the area,
I will be needing two square brackets.

179
00:11:32,160 --> 00:11:35,120
Actually, two pairs.

180
00:11:35,120 --> 00:11:36,600
And then

181
00:11:38,160 --> 00:11:39,360
the name of the area,

182
00:11:39,360 --> 00:11:42,720
which in our case is named.

183
00:11:42,920 --> 00:11:46,640
And then when we create one, the area,

184
00:11:46,640 --> 00:11:49,920
how many curly brackets we need?

185
00:11:51,000 --> 00:11:52,800
One pair. Right.

186
00:11:52,800 --> 00:11:56,880
What do you think To create to the array
how many pairs we will be needing

187
00:11:59,880 --> 00:12:01,240
at least two.

188
00:12:01,240 --> 00:12:02,040
Right.

189
00:12:02,040 --> 00:12:04,200
And if I have more rows,
I will be needing more.

190
00:12:04,200 --> 00:12:09,120
So for the first row, I need one.

191
00:12:10,960 --> 00:12:13,200
So let me do it like this

192
00:12:13,200 --> 00:12:15,480
so that it's easier to visualize.

193
00:12:17,000 --> 00:12:21,840
So let me copy this here

194
00:12:22,800 --> 00:12:25,680
and let me be straight here

195
00:12:26,760 --> 00:12:28,840
and why I'm getting an error.

196
00:12:29,080 --> 00:12:30,400
Give me one second

197
00:12:36,800 --> 00:12:37,720
double code.

198
00:12:37,720 --> 00:12:40,680
So let me put it over here.

199
00:12:40,680 --> 00:12:43,920
Do we need a comma as well?

200
00:12:44,280 --> 00:12:57,120
Do we need a comma as well? Yes.

201
00:12:59,760 --> 00:13:02,520
Okay, perfect.

202
00:13:07,320 --> 00:13:10,200
Okay, let's now, everyone, let me know.

203
00:13:10,200 --> 00:13:13,200
Once you are done following me,
then I will copy the next row

204
00:13:14,800 --> 00:13:16,320
or I can share it with you.

205
00:13:16,320 --> 00:13:16,880
Don't type.

206
00:13:16,880 --> 00:13:19,800
I initiated with you once one time to

207
00:13:19,800 --> 00:13:24,680
let me copy this.

208
00:13:24,680 --> 00:13:29,640
Let me be a strategic. So

209
00:13:32,360 --> 00:13:34,800
actually,
I think it's better if we go one by one.

210
00:13:35,280 --> 00:13:38,560
So this is our one we added.

211
00:13:38,560 --> 00:13:39,280
Right?

212
00:13:39,600 --> 00:13:41,400
Curly brackets

213
00:13:42,880 --> 00:13:46,920
and then comma separated names.

214
00:13:49,120 --> 00:13:50,080
Now what I can do,

215
00:13:50,080 --> 00:13:52,160
I can copy this one to add it

216
00:13:53,240 --> 00:13:55,720
like this control C

217
00:13:56,920 --> 00:13:59,120
and then we can see control.

218
00:13:59,120 --> 00:14:06,520
We okay.

219
00:14:07,680 --> 00:14:10,120
And we need one comma here as well

220
00:14:12,480 --> 00:14:17,520
and then one more comma
and we can copy paste it one more time.

221
00:14:17,520 --> 00:14:19,840
One more time
line with the copy paste or more.

222
00:14:20,240 --> 00:14:23,400
So look, guys,
if you look only at this part

223
00:14:23,840 --> 00:14:26,000
is it one any

224
00:14:27,000 --> 00:14:28,120
the the part that I have

225
00:14:28,120 --> 00:14:34,680
highlighted. Yes.

226
00:14:35,720 --> 00:14:38,240
This is one more one.

227
00:14:38,240 --> 00:14:39,440
The addy.

228
00:14:39,600 --> 00:14:41,960
This is one more one. The addy.

229
00:14:42,280 --> 00:14:43,280
This is the one more.

230
00:14:43,280 --> 00:14:46,040
And all of those one, the areas,

231
00:14:47,240 --> 00:14:50,880
they are also separated by comma.

232
00:14:50,960 --> 00:14:54,360
No, we don't need
because there are two square brackets.

233
00:14:56,040 --> 00:14:57,520
Because there are two square brackets.

234
00:14:57,520 --> 00:15:00,080
That means there is a two Daddy.

235
00:15:00,080 --> 00:15:03,240
So let me put those rows and columns again

236
00:15:03,240 --> 00:15:06,320
so that you can visualize better.

237
00:15:06,360 --> 00:15:08,520
So this is how it was looking like in

238
00:15:08,520 --> 00:15:21,120
an Excel.

239
00:15:24,440 --> 00:15:25,200
Okay.

240
00:15:25,360 --> 00:15:28,800
Exactly the same thing.

241
00:15:28,800 --> 00:15:33,720
And this is odd adding number zero.

242
00:15:33,720 --> 00:15:37,680
This is our ADDY number one.

243
00:15:37,680 --> 00:15:40,600
This is our ADDY number two
and this one is three.

244
00:15:41,880 --> 00:15:44,560
Similarly, this was the index number zero

245
00:15:45,360 --> 00:15:49,200
one, two and three.

246
00:15:49,560 --> 00:15:54,760
Take 2 minutes, digest this,
and then we will move forward.

247
00:15:55,560 --> 00:15:58,560
And meanwhile,
let me put some different names

248
00:15:58,560 --> 00:16:06,600
here.

249
00:16:06,600 --> 00:16:37,920
Well, it has to start with my formatting.

250
00:16:37,920 --> 00:17:00,240
Almost old.

251
00:17:00,240 --> 00:17:02,480
Oh, okay.

252
00:17:02,880 --> 00:17:05,320
So if we want to go to the elements,

253
00:17:05,560 --> 00:17:09,320
let me now remove this.

254
00:17:09,320 --> 00:17:10,360
We almost all

255
00:17:12,600 --> 00:17:15,840
get let me put it back here.

256
00:17:15,840 --> 00:17:18,720
So look, when we have to create

257
00:17:18,720 --> 00:17:23,120
two D areas, we need one curly bracket.

258
00:17:23,120 --> 00:17:26,280
One pair of curly brackets

259
00:17:26,280 --> 00:17:28,760
drawn is duplicated

260
00:17:29,560 --> 00:17:34,040
with are okay

261
00:17:38,040 --> 00:17:40,400
one pair

262
00:17:40,400 --> 00:17:43,480
to hold multiple one

263
00:17:43,480 --> 00:17:46,840
we added for example,
this one is a complete one B addy

264
00:17:48,160 --> 00:17:49,920
and what is duplicated.

265
00:17:49,920 --> 00:17:51,960
Okay, let me make it

266
00:17:52,040 --> 00:17:53,840
John. And

267
00:17:54,160 --> 00:17:59,640
so and then we have again
one more complete one.

268
00:17:59,640 --> 00:18:02,240
We add it here, then one more.

269
00:18:02,960 --> 00:18:07,560
If you guys can pay this attention
that you pay on the spellings and

270
00:18:07,560 --> 00:18:11,480
the duplications of name, on programing,
on the concepts that I'm teaching,

271
00:18:12,240 --> 00:18:16,840
believe me, you can learn a lot better.

272
00:18:16,840 --> 00:18:20,640
And then this is one more one D Addy
So basically

273
00:18:21,000 --> 00:18:26,520
one pair of curly brackets
to store multiple one B adds.

274
00:18:26,520 --> 00:18:29,640
And here
when we have to create one together,

275
00:18:29,640 --> 00:18:33,640
we write one pair of square brackets
to the two.

276
00:18:33,800 --> 00:18:34,280
By the way,

277
00:18:34,280 --> 00:18:38,200
there are three dimensional areas as well,
four dimensional five dimension.

278
00:18:38,520 --> 00:18:41,080
You you can create as many dimensions
as you want.

279
00:18:41,080 --> 00:18:44,560
There is no element five dimensional
that is ten dimensional.

280
00:18:44,560 --> 00:18:47,160
That is no, we are not going to love that.

281
00:18:49,160 --> 00:18:51,640
If you can digest this just to the areas.

282
00:18:51,640 --> 00:18:52,200
And then

283
00:18:53,120 --> 00:18:59,240
I think it's going to be more than enough.

284
00:18:59,240 --> 00:19:01,840
Okay, Now let's try to get the elements

285
00:19:03,720 --> 00:19:04,680
from the story.

286
00:19:04,680 --> 00:19:06,760
Addy okay.

287
00:19:06,760 --> 00:19:08,880
Are you able to create 2D areas?

288
00:19:08,880 --> 00:19:16,160
Are you getting any syntax errors
or something?

289
00:19:16,160 --> 00:19:21,240
Do you want to share this one with you?

290
00:19:21,240 --> 00:19:23,680
Negotiate this all the is.

291
00:19:24,000 --> 00:19:26,680
I think it's better that you created
everyone.

292
00:19:26,760 --> 00:19:28,760
Let me give you 5 minutes.

293
00:19:28,760 --> 00:19:30,440
Please create everyone.

294
00:19:30,440 --> 00:19:31,880
Please clear this area.

295
00:19:31,880 --> 00:19:41,560
I want you to go through
at least once through the syntax.

296
00:19:41,560 --> 00:19:42,520
I will wait.

297
00:19:42,520 --> 00:19:53,280
Please clear it on your.

298
00:19:53,280 --> 00:20:07,160
Thank you, Eric.

299
00:20:07,160 --> 00:20:08,040
Okay.

300
00:20:08,520 --> 00:20:10,600
Is there anyone who is still typing or

301
00:20:10,600 --> 00:20:23,800
need more time?

302
00:20:23,800 --> 00:20:29,400
Okay, fine.

303
00:20:29,400 --> 00:20:29,800
Okay.

304
00:20:30,040 --> 00:20:32,680
By the way, those who are done typing,
what do you think work out?

305
00:20:32,720 --> 00:20:36,360
What would be the applications
of this to the addy?

306
00:20:36,360 --> 00:20:40,920
Have you seen that scored
somewhere in real life?

307
00:20:42,280 --> 00:20:44,800
Very similar
to how we are storing the data.

308
00:20:44,800 --> 00:20:46,920
Anatoly. Eric,
can you give me some examples?

309
00:20:47,640 --> 00:20:49,200
Have you seen data stored?

310
00:20:49,200 --> 00:20:51,360
Excel Perfect.

311
00:20:51,840 --> 00:20:52,600
Perfect.

312
00:20:52,600 --> 00:20:56,040
In Excel
we have exactly the same thing, right?

313
00:20:56,240 --> 00:20:58,440
Rows and columns.

314
00:20:58,440 --> 00:20:59,480
No, I'm not typing.

315
00:20:59,480 --> 00:21:01,200
I'm just discussing would be one source.

316
00:21:01,200 --> 00:21:02,240
We are done.

317
00:21:03,400 --> 00:21:09,080
What else?

318
00:21:09,080 --> 00:21:11,120
Layout of lottery numbers.

319
00:21:12,360 --> 00:21:15,360
Okay.

320
00:21:15,360 --> 00:21:16,360
Parking lots.

321
00:21:16,360 --> 00:21:20,720
Exactly. Yep.

322
00:21:20,720 --> 00:21:22,440
So you can write programs

323
00:21:22,440 --> 00:21:26,040
for all of those things
which stored the data in this format.

324
00:21:26,440 --> 00:21:28,080
Name of the students.

325
00:21:28,080 --> 00:21:36,000
Have you, have you played tic tac toe?

326
00:21:36,000 --> 00:21:38,440
Yes, exactly.

327
00:21:38,440 --> 00:21:40,800
Do you guys know how pictures are stored?

328
00:21:41,760 --> 00:21:45,520
How pictures are stored on the computer

329
00:21:45,520 --> 00:21:47,120
into the arrays?

330
00:21:47,120 --> 00:21:49,480
Actually, in 3D areas.

331
00:21:49,480 --> 00:21:51,360
But a very similar idea.

332
00:21:51,360 --> 00:22:14,240
Let me show you.

333
00:22:14,240 --> 00:22:16,840
This is how the how the pictures are.

334
00:22:16,960 --> 00:22:19,640
This is how your computer draws pictures

335
00:22:21,320 --> 00:22:22,480
on the screen.

336
00:22:22,480 --> 00:22:25,200
So your screen is actually divided
into grids.

337
00:22:25,520 --> 00:22:30,280
Like, for example,
when you say my screen resolution is 1920

338
00:22:30,280 --> 00:22:33,920
by ten DPI, do you
do you mean what you are talking about?

339
00:22:34,280 --> 00:22:40,800
Well, what are these 1920 cross penalty?

340
00:22:40,800 --> 00:22:45,240
These are actually the number of pixels,
number of rows and columns

341
00:22:45,720 --> 00:22:52,920
in your screen that represents each pixel.

342
00:22:52,920 --> 00:22:56,760
And this is how pictures are drawn on
two D in a computer

343
00:22:57,440 --> 00:23:04,720
by manipulating these pixels.

344
00:23:04,720 --> 00:23:07,960
Like for example, if you want to move
these things, you will be actually moving

345
00:23:07,960 --> 00:23:11,520
the pixels.

346
00:23:11,520 --> 00:23:13,000
Let me see if

347
00:23:14,880 --> 00:23:16,080
there is a visualization

348
00:23:16,080 --> 00:23:30,440
or something.

349
00:23:30,440 --> 00:23:33,680
It's just going to be complex for you
at this point.

350
00:23:34,240 --> 00:23:38,120
But once I have, once I'm done
explaining to the arrays,

351
00:23:38,760 --> 00:23:42,320
you will start getting
the idea how things are,

352
00:23:43,280 --> 00:23:45,760
are how images are stored.

353
00:23:45,760 --> 00:23:49,800
Basically, they do that
also stored in the areas and a lot of time

354
00:23:49,800 --> 00:23:54,360
they are also processed in the form of
that is your videos are also

355
00:23:55,680 --> 00:23:57,840
a combination of multiple.

356
00:23:59,080 --> 00:24:01,760
Now ADD is pretty arrays so

357
00:24:02,920 --> 00:24:06,120
video is actually multiple nested images.

358
00:24:06,840 --> 00:24:07,800
They are just pixels.

359
00:24:07,800 --> 00:24:09,480
When a specific color code are assigned.

360
00:24:09,480 --> 00:24:10,840
Yes, exactly.

361
00:24:10,840 --> 00:24:11,680
Okay, everybody.

362
00:24:11,680 --> 00:24:15,040
So I hope now everyone is done.

363
00:24:15,080 --> 00:24:17,680
So now just try to learn how

364
00:24:17,680 --> 00:24:21,320
this is one of the ways
of creating the duty.

365
00:24:21,440 --> 00:24:24,240
Add it just like we have two ways
of creating one diary.

366
00:24:24,840 --> 00:24:27,480
This is one of the ways where we create

367
00:24:27,480 --> 00:24:29,480
the array and initialize it right away.

368
00:24:30,560 --> 00:24:33,320
And now we will learn
how we can access the

369
00:24:34,440 --> 00:24:35,960
elements from this to the area.

370
00:24:35,960 --> 00:24:39,040
So tell me if I
want to access John Hammond.

371
00:24:40,560 --> 00:24:42,480
Plus, obviously I will be

372
00:24:42,480 --> 00:24:45,920
needing to write the name of the array
and then to the brackets.

373
00:24:46,520 --> 00:24:49,240
What should I specify here and here?

374
00:24:49,240 --> 00:25:00,480
If I want to access this element?

375
00:25:00,480 --> 00:25:02,520
Okay. Some are saying to two,

376
00:25:03,560 --> 00:25:05,760
some are saying one and zero.

377
00:25:06,240 --> 00:25:09,040
Let me let me label them for you.

378
00:25:09,040 --> 00:25:11,320
I think you're confusing you.

379
00:25:11,320 --> 00:25:13,240
This is zero.

380
00:25:13,440 --> 00:25:15,200
This is one.

381
00:25:15,280 --> 00:25:17,520
This is two, This is three.

382
00:25:17,520 --> 00:25:20,040
So immediately this is zero one,

383
00:25:20,880 --> 00:25:24,600
two and three.

384
00:25:24,600 --> 00:25:28,880
Now tell me
if I want to access this element here.

385
00:25:28,880 --> 00:25:32,040
What should I write here and here?

386
00:25:32,280 --> 00:25:34,840
Is everyone now clear that

387
00:25:34,840 --> 00:25:47,240
it should be two comma, two.

388
00:25:47,240 --> 00:25:50,640
Okay, let me write to here and to here.

389
00:25:52,040 --> 00:25:53,880
And there's next Romney again.

390
00:25:53,880 --> 00:25:59,200
Let's see what we get.

391
00:25:59,200 --> 00:26:03,560
Okay, so this is what we get.

392
00:26:03,560 --> 00:26:08,280
Okay, Now
tell me if I am interested in the dummy.

393
00:26:09,560 --> 00:26:10,720
What should I.

394
00:26:10,720 --> 00:26:12,760
So this will give us

395
00:26:17,080 --> 00:26:19,720
and duplicate it

396
00:26:20,080 --> 00:26:23,520
if if we want to get I mean

397
00:26:23,520 --> 00:26:25,200
in which

398
00:26:26,040 --> 00:26:29,400
in which add a

399
00:26:29,400 --> 00:26:31,920
dummy image present is present

400
00:26:31,920 --> 00:26:35,560
inside the add
which is at index number one

401
00:26:36,960 --> 00:26:40,320
and within that area
is actually the last element

402
00:26:41,240 --> 00:26:43,440
which will be zero one,

403
00:26:43,640 --> 00:26:49,640
two and three.

404
00:26:49,640 --> 00:26:59,920
This will give us dummy.

405
00:26:59,920 --> 00:27:02,480
Is there anyone who does not understand

406
00:27:04,120 --> 00:27:07,800
how this ad is being created

407
00:27:07,800 --> 00:27:11,520
and how when we write these two

408
00:27:13,240 --> 00:27:14,760
square brackets and this number,

409
00:27:14,760 --> 00:27:22,600
we are able to get these names?

410
00:27:22,600 --> 00:27:25,920
Okay, let me copy this class

411
00:27:27,280 --> 00:27:31,120
and let's try to access these elements
with the help of a loop.

412
00:27:31,880 --> 00:27:33,600
But before that,
I want to show you something.

413
00:27:33,600 --> 00:27:35,720
So control C control we

414
00:27:39,040 --> 00:27:39,920
need to

415
00:27:44,160 --> 00:27:45,960
Mohammad actually,

416
00:27:45,960 --> 00:27:48,680
because now your basics are done

417
00:27:48,680 --> 00:27:51,920
and now things will start to repeat.

418
00:27:51,920 --> 00:27:55,560
Well, that's what I was saying to you,
that your initial days,

419
00:27:55,560 --> 00:27:59,400
they can be very hard
because there's a lot of information

420
00:28:00,680 --> 00:28:03,960
you have to learn
how this interface of IDE works,

421
00:28:04,560 --> 00:28:09,720
how discard our how syntax versus new
information, new class members, friends.

422
00:28:10,080 --> 00:28:14,800
So then a lot of information is thrown
at you in a short period of time.

423
00:28:14,800 --> 00:28:18,000
It's hard for a human brain
to to digest all of that.

424
00:28:18,240 --> 00:28:22,320
Now you have big debate
now, things will start to sense more.

425
00:28:23,040 --> 00:28:24,360
Can you show it one more time?

426
00:28:24,360 --> 00:28:26,240
Yeah, hear it is

427
00:28:28,680 --> 00:28:30,000
They have to practice again

428
00:28:30,000 --> 00:28:32,160
and I know project will definitely be a

429
00:28:34,240 --> 00:28:35,960
what is the

430
00:28:35,960 --> 00:28:39,720
new act up what is new

431
00:28:42,120 --> 00:28:42,560
Jerusalem.

432
00:28:42,560 --> 00:28:43,880
Can you tell me the line number?

433
00:28:43,880 --> 00:28:57,000
Where do you see new.

434
00:28:57,000 --> 00:29:01,160
Because what I'm stuck right now
are are the nested for loops

435
00:29:01,160 --> 00:29:06,400
and if I slowly it will get worse.

436
00:29:06,400 --> 00:29:17,880
So I mean it will get better.

437
00:29:17,880 --> 00:29:25,080
No interesting.

438
00:29:25,080 --> 00:29:27,480
Okay, so everybody is done.

439
00:29:27,920 --> 00:29:36,120
Are we are we going for the next example?

440
00:29:36,120 --> 00:29:37,280
Okay.

441
00:29:39,000 --> 00:29:42,560
So if I ask you what is a 2D?

442
00:29:43,320 --> 00:29:46,720
What is a 2D

443
00:29:51,840 --> 00:29:53,560
two dimensional space?

444
00:29:53,560 --> 00:29:57,000
Okay.

445
00:29:57,000 --> 00:29:59,520
Offsprings it can be of any data type.

446
00:30:01,200 --> 00:30:02,640
Exactly.

447
00:30:02,640 --> 00:30:06,000
And add it inside another adi

448
00:30:07,840 --> 00:30:11,640
or nested is.

449
00:30:11,640 --> 00:30:12,960
So what do you think?

450
00:30:12,960 --> 00:30:17,120
Is it
possible to extract this complete fast

451
00:30:17,800 --> 00:30:20,240
one d area from the study area?

452
00:30:20,240 --> 00:30:23,200
If a 2D array

453
00:30:23,200 --> 00:30:25,360
is nested ad is or

454
00:30:25,360 --> 00:30:30,080
an ad inside another ADI?

455
00:30:30,080 --> 00:30:32,640
What if I do something like this?

456
00:30:32,640 --> 00:30:34,240
What if I say names

457
00:30:35,880 --> 00:30:37,560
and zero?

458
00:30:37,560 --> 00:30:38,040
What do you think?

459
00:30:38,040 --> 00:30:39,240
What this will give me?

460
00:30:39,240 --> 00:30:41,400
Let me do this

461
00:30:42,360 --> 00:30:43,800
string

462
00:30:46,800 --> 00:30:48,840
buster. All

463
00:30:51,120 --> 00:30:53,280
and scattered records here.

464
00:30:54,720 --> 00:30:56,480
What do you think?

465
00:30:56,480 --> 00:30:59,600
If I say names,
This is the name of the 2D Adi.

466
00:31:00,480 --> 00:31:02,800
And then I'm saying square brackets.

467
00:31:02,800 --> 00:31:04,920
I'm not specifying two pairs.

468
00:31:04,920 --> 00:31:11,520
I'm specifying only one,
and I'm specifying zero.

469
00:31:11,520 --> 00:31:16,120
This basically represents
this complete, complete

470
00:31:16,120 --> 00:31:22,400
one D adi.

471
00:31:22,400 --> 00:31:25,360
And let me also

472
00:31:25,360 --> 00:31:27,440
print it so that you can visualize it.

473
00:31:27,440 --> 00:31:33,040
So add is dot to string

474
00:31:33,040 --> 00:31:35,320
and let's say cluster. So

475
00:31:37,320 --> 00:31:43,680
and let's run it.

476
00:31:43,680 --> 00:31:46,440
I want you to take 2 minutes
and go to this line.

477
00:31:46,440 --> 00:31:50,200
What this line is doing
here, it's very important to understand

478
00:31:50,200 --> 00:31:52,560
all the areas, what has happened here.

479
00:31:53,520 --> 00:31:55,960
How many of you don't understand
what has happened here?

480
00:31:56,320 --> 00:31:57,840
I said names.

481
00:31:57,840 --> 00:32:02,120
The name of the to the Adi,
and then I only specified

482
00:32:02,120 --> 00:32:04,800
one square bracket and then I specified

483
00:32:05,880 --> 00:32:07,960
zero there

484
00:32:08,800 --> 00:32:13,040
and in a result what I got,
I got this complete

485
00:32:13,040 --> 00:32:16,880
one, the ADI

486
00:32:16,880 --> 00:32:25,640
from here.

487
00:32:25,640 --> 00:32:30,000
And let me let me let me show
you more things.

488
00:32:30,600 --> 00:32:31,280
What do you think?

489
00:32:31,280 --> 00:32:34,640
If I let let me change it to simply

490
00:32:36,000 --> 00:32:38,600
or let's call it zero.

491
00:32:38,600 --> 00:32:41,640
If I put this if I put one here,
what do you think?

492
00:32:41,640 --> 00:32:42,960
What I will get

493
00:32:47,600 --> 00:32:50,320
it will give us the address of the ADI.

494
00:32:51,480 --> 00:32:57,920
So if I run this now,
I get complete secondo.

495
00:32:58,200 --> 00:32:58,760
So are you.

496
00:32:58,760 --> 00:33:04,080
Are you able to get the idea
that when we write it to the ADI,

497
00:33:04,080 --> 00:33:07,440
the first two square bracket,
the number that we put inside

498
00:33:07,440 --> 00:33:12,560
the first letter bracket,
what does it represent?

499
00:33:12,560 --> 00:33:17,160
It represents the complete roll at that
index.

500
00:33:17,480 --> 00:33:22,760
Let me repeat the number
that we specify in first Oscar bracket.

501
00:33:23,880 --> 00:33:26,600
It represents the complete

502
00:33:26,600 --> 00:33:28,800
roll at that index.

503
00:33:30,640 --> 00:33:31,640
Okay.

504
00:33:31,640 --> 00:33:34,720
And once I have that complete roll again,
for example,

505
00:33:34,720 --> 00:33:37,280
coming out of this, if I say

506
00:33:38,400 --> 00:33:40,560
if I say

507
00:33:40,560 --> 00:33:42,960
let me let me change this to only roll.

508
00:33:43,120 --> 00:33:44,680
So that is easier to understand.

509
00:33:44,680 --> 00:33:49,320
So if I say roll and then square bracket,

510
00:33:49,760 --> 00:33:54,160
so so first
I get the complete roll at index one

511
00:33:55,560 --> 00:33:57,240
and then from that roll I'm

512
00:33:57,240 --> 00:34:00,640
getting the zero two element

513
00:34:00,640 --> 00:34:01,360
on roll.

514
00:34:01,360 --> 00:34:03,800
Number one, what is the zero element?

515
00:34:03,840 --> 00:34:12,760
What is the value of zero element?

516
00:34:12,760 --> 00:34:18,040
This is complete roll
present at index number one.

517
00:34:18,200 --> 00:34:20,360
Everyone understands this.

518
00:34:20,360 --> 00:34:23,280
When we say names one,

519
00:34:23,280 --> 00:34:27,760
we basically refer to the complete roll
at first index.

520
00:34:28,320 --> 00:34:28,920
And this.

521
00:34:28,920 --> 00:34:31,600
John what is the index of this? John

522
00:34:33,480 --> 00:34:35,800
It's zero.

523
00:34:35,800 --> 00:34:37,160
Exactly.

524
00:34:37,160 --> 00:34:44,120
So when I will be running this,
I will go to John.

525
00:34:44,680 --> 00:34:47,400
Is there anyone who do not understand

526
00:34:49,120 --> 00:34:52,320
why we are getting done

527
00:35:03,200 --> 00:35:03,760
all good?

528
00:35:03,760 --> 00:35:04,680
Okay,

529
00:35:05,680 --> 00:35:10,520
if I do, let's say two here

530
00:35:11,760 --> 00:35:14,920
and three here, Tell me what output

531
00:35:14,920 --> 00:35:15,880
I will get

532
00:35:29,120 --> 00:35:31,280
exactly.

533
00:35:31,280 --> 00:35:33,600
We will be getting Muhammad, for example,

534
00:35:34,360 --> 00:35:37,520
we are saying two here, right?

535
00:35:37,520 --> 00:35:40,000
So this is zero.

536
00:35:40,000 --> 00:35:41,680
This is one, This is two.

537
00:35:41,680 --> 00:35:44,440
So this will give us this complete

538
00:35:45,240 --> 00:35:48,240
one, the ADI here.

539
00:35:48,240 --> 00:35:50,560
And then from this

540
00:35:50,560 --> 00:35:54,640
one, the area I am saying the roll
and then inside the square brackets

541
00:35:54,640 --> 00:35:57,240
and specifying three. So this is zero.

542
00:35:57,240 --> 00:35:59,600
This is one, this is two

543
00:36:00,000 --> 00:36:03,680
and this is three.

544
00:36:03,680 --> 00:36:06,560
Okay, tell me one more thing.

545
00:36:06,560 --> 00:36:10,120
If you have one D adi complete one D area,

546
00:36:11,480 --> 00:36:12,480
can you also write a

547
00:36:12,480 --> 00:36:14,520
loop to get all the elements

548
00:36:15,560 --> 00:36:16,920
to print all the elements?

549
00:36:16,920 --> 00:36:17,640
Sorry.

550
00:36:18,960 --> 00:36:22,320
Yes, we can do that right.

551
00:36:22,320 --> 00:36:24,760
So is it okay if I write the loop here?

552
00:36:24,880 --> 00:36:31,640
Will it confuse you
if I write the loop here?

553
00:36:31,640 --> 00:36:32,440
Okay.

554
00:36:32,440 --> 00:36:34,520
So help me write down the loop

555
00:36:35,040 --> 00:36:37,800
to print all the elements from this rule.

556
00:36:38,240 --> 00:36:40,440
Help me write down a loop. Should I.

557
00:36:40,440 --> 00:36:45,600
Should I prefer the enhanced for loop
or the index index

558
00:36:45,600 --> 00:36:47,400
based for loop

559
00:36:50,000 --> 00:36:51,640
enhanced one is better.

560
00:36:51,640 --> 00:36:54,160
So we write for

561
00:36:56,960 --> 00:37:00,560
and then what should be the data type?

562
00:37:01,640 --> 00:37:05,920
What type of data is present
inside this one D area?

563
00:37:05,920 --> 00:37:07,720
It's a string

564
00:37:08,640 --> 00:37:11,120
nursing name,

565
00:37:11,440 --> 00:37:13,080
colon, and after the colon,

566
00:37:13,080 --> 00:37:15,560
what should I specify

567
00:37:17,960 --> 00:37:22,800
which variable contains the complete
one D addy?

568
00:37:22,920 --> 00:37:30,080
What is the name of that variable
in our program?

569
00:37:30,080 --> 00:37:35,040
I'm saying
one D at one D Which variable contains the

570
00:37:36,040 --> 00:37:38,160
one D addy

571
00:37:39,440 --> 00:37:40,400
this names?

572
00:37:40,400 --> 00:37:42,000
Is it one D this names?

573
00:37:42,000 --> 00:37:44,160
Is it one day or two D

574
00:37:45,640 --> 00:37:47,880
is said to be

575
00:37:48,240 --> 00:37:48,720
this row?

576
00:37:48,720 --> 00:37:52,800
Is it one day or 2d1d

577
00:37:52,800 --> 00:37:54,960
so it should be a row here.

578
00:37:56,240 --> 00:37:59,560
Makes sense.

579
00:37:59,560 --> 00:38:01,680
And then let's see.

580
00:38:01,680 --> 00:38:04,280
Name.

581
00:38:04,280 --> 00:38:05,280
What do we expect?

582
00:38:05,280 --> 00:38:07,880
What do we expect from this loop Work
this loop blueprint

583
00:38:19,480 --> 00:38:22,000
And do you expect that

584
00:38:22,000 --> 00:38:25,720
all of the elements from this
role will be printed?

585
00:38:27,400 --> 00:38:31,040
The one that I have highlighted?

586
00:38:31,040 --> 00:38:32,280
Exactly.

587
00:38:32,280 --> 00:38:34,360
So let's run this

588
00:38:39,000 --> 00:38:39,680
to look.

589
00:38:39,680 --> 00:38:44,040
We get all the names here, okay?

590
00:38:44,240 --> 00:38:47,560
Those who want to follow me
or want to write this code,

591
00:38:48,520 --> 00:38:49,720
I will give you 2 minutes.

592
00:38:49,720 --> 00:38:52,400
Please let me know once you are done

593
00:38:52,400 --> 00:38:54,840
and is there anyone who do not understand

594
00:38:57,960 --> 00:39:01,680
you are missing the input?

595
00:39:01,680 --> 00:39:03,440
Most probably

596
00:39:06,680 --> 00:39:10,640
you do so.

597
00:39:10,680 --> 00:39:14,560
So everyone understands that to add is

598
00:39:14,560 --> 00:39:18,560
are nothing but multiple one d ad is

599
00:39:21,320 --> 00:39:23,920
every one to the ad is

600
00:39:25,080 --> 00:39:27,440
simply multiple

601
00:39:27,600 --> 00:39:30,000
one d areas combined together

602
00:39:31,080 --> 00:39:33,520
in will put together in one variable

603
00:39:34,720 --> 00:39:37,680
and do you also understand

604
00:39:37,800 --> 00:39:40,800
name role output second rule?

605
00:39:41,880 --> 00:39:45,640
I do not indicate name rule
for the second rule.

606
00:39:46,440 --> 00:39:48,720
Where is second rule

607
00:39:55,320 --> 00:39:57,680
easier than one D?

608
00:39:57,680 --> 00:40:02,040
Maybe because you understand
D okay, who can help Ali.

609
00:40:02,040 --> 00:40:06,640
Ali is confused
that Ali is saying this is second rule.

610
00:40:07,080 --> 00:40:09,720
The Muhammad one is easier to second
draw third rule.

611
00:40:11,040 --> 00:40:12,760
Maybe because of the formatting

612
00:40:12,760 --> 00:40:15,320
you are unable to see it clearly.

613
00:40:15,760 --> 00:40:18,840
Look now is are second or third,

614
00:40:18,840 --> 00:40:23,200
so do not get the number with the index
index.

615
00:40:23,560 --> 00:40:25,760
Always start from zero.

616
00:40:26,480 --> 00:40:27,400
So this rule.

617
00:40:27,400 --> 00:40:31,920
Yes, it is rule number three,
but it is at index number two.

618
00:40:32,400 --> 00:40:34,600
Everyone, do you understand this point?

619
00:40:34,600 --> 00:40:37,880
This is rule number three,
but this is present.

620
00:40:37,880 --> 00:40:42,480
Add index number two.

621
00:40:42,480 --> 00:40:42,840
Okay.

622
00:40:42,840 --> 00:40:55,320
Now, Ali,
tell me you meant the index rule.

623
00:40:55,320 --> 00:40:59,000
So because in areas the indexes,
they start from zero.

624
00:40:59,040 --> 00:41:03,240
That's why they are always one
less than the actual number in real life.

625
00:41:03,240 --> 00:41:05,880
Usually things they start from one

626
00:41:08,400 --> 00:41:09,840
for string name rule.

627
00:41:09,840 --> 00:41:10,800
I don't understand.

628
00:41:10,800 --> 00:41:13,200
This part is an enhanced for loop

629
00:41:14,560 --> 00:41:18,120
and whether it's an enhanced for loop

630
00:41:23,680 --> 00:41:25,920
name is just a variable name.

631
00:41:25,920 --> 00:41:28,760
I mean you you can call it would

632
00:41:28,760 --> 00:41:29,640
like this.

633
00:41:29,640 --> 00:41:35,280
It's just a variable.

634
00:41:35,280 --> 00:41:40,360
It's just a variable.

635
00:41:40,360 --> 00:41:42,480
What will this print again?

636
00:41:43,120 --> 00:41:45,760
It will print the complete first row

637
00:41:58,440 --> 00:42:00,320
previous example.

638
00:42:00,960 --> 00:42:02,640
You are on previous examples.

639
00:42:02,640 --> 00:42:05,520
I mean, it's already 15 minutes on

640
00:42:06,480 --> 00:42:16,120
on this example.

641
00:42:16,120 --> 00:42:18,440
This is the previous example.
This one you are talking about.

642
00:42:18,520 --> 00:42:21,120
It's nothing just to index this same data

643
00:42:22,040 --> 00:42:34,200
and two values here.

644
00:42:34,200 --> 00:42:40,680
Okay.

645
00:42:40,680 --> 00:42:42,920
So every everybody is done.

646
00:42:43,320 --> 00:42:50,960
So should we move to the next example?

647
00:42:50,960 --> 00:43:08,560
Okay, let's create one more class here.

648
00:43:08,560 --> 00:43:12,880
Yes. Okay.

649
00:43:13,200 --> 00:43:14,480
So again,

650
00:43:15,480 --> 00:43:20,800
whenever we have to create an array,

651
00:43:20,800 --> 00:43:23,880
we need to know the type of data
that we are planning to store.

652
00:43:23,880 --> 00:43:26,920
So let's say this time
we are planning to store numbers.

653
00:43:28,360 --> 00:43:30,960
So we say end.

654
00:43:30,960 --> 00:43:35,280
And if I want to create a 2D array
after the data type,

655
00:43:35,280 --> 00:43:37,560
what should I specify

656
00:43:38,880 --> 00:43:42,040
to pair of square brackets?

657
00:43:44,040 --> 00:43:46,320
And then let's call it numbers

658
00:43:48,160 --> 00:43:50,240
and then equal to fine.

659
00:43:50,240 --> 00:43:52,520
So one pair of curly bracket

660
00:43:53,720 --> 00:43:56,680
and this pair of bracket

661
00:43:57,240 --> 00:44:01,280
is going to hold multiple one at ease.

662
00:44:02,520 --> 00:44:04,560
So let me do this.

663
00:44:05,120 --> 00:44:06,840
Let me do it a little differently.

664
00:44:06,840 --> 00:44:07,600
This this time.

665
00:44:07,600 --> 00:44:10,800
So look, look, guys,
if I have one day out of here

666
00:44:12,000 --> 00:44:15,000
and and let's say if I say roll

667
00:44:15,360 --> 00:44:18,160
the zero is equal to

668
00:44:19,320 --> 00:44:26,040
ten, going to 3040 on line number six

669
00:44:26,240 --> 00:44:32,040
is it to want to add it?

670
00:44:32,040 --> 00:44:34,360
Yes, it is.

671
00:44:34,800 --> 00:44:37,040
And if I duplicated

672
00:44:40,280 --> 00:44:43,880
I'm just trying to show you this point
and that to the arrays are nothing

673
00:44:43,880 --> 00:44:49,360
but multiple one days so let me call it
row number one and or number two.

674
00:44:49,480 --> 00:44:50,360
So let's say

675
00:44:51,360 --> 00:44:55,080
hundred, 200, 300,

676
00:44:55,920 --> 00:45:01,600
400 and or to see one, two, three, four.

677
00:45:02,760 --> 00:45:07,120
So if a 2D area is nothing but combination
of multiple one, we add it.

678
00:45:07,120 --> 00:45:10,920
So I should be able to do this row

679
00:45:10,920 --> 00:45:14,640
zero comma

680
00:45:15,000 --> 00:45:17,840
roll one, comma,

681
00:45:19,480 --> 00:45:23,160
row two and let me put them
on the new line so that is easier.

682
00:45:23,480 --> 00:45:26,000
Or your eyes

683
00:45:29,520 --> 00:45:31,720
again, look at this.

684
00:45:32,240 --> 00:45:34,800
This role zero

685
00:45:34,800 --> 00:45:37,880
is a variable
that can attains complete one.

686
00:45:37,880 --> 00:45:38,880
The addy.

687
00:45:39,360 --> 00:45:44,000
I can directly put it here
or I can store it in a variable

688
00:45:44,000 --> 00:45:47,920
and then I can put it here.

689
00:45:47,920 --> 00:45:51,440
Similarly, rule one is complete
one d addy.

690
00:45:52,520 --> 00:45:54,960
I can put it directly here

691
00:45:54,960 --> 00:45:58,320
or I can store in a variable
and then I can store that variable.

692
00:45:58,320 --> 00:45:58,960
Here I do.

693
00:45:58,960 --> 00:46:02,640
Getting the idea to the ad
is are nothing but

694
00:46:03,160 --> 00:46:07,520
multiple one d
ad is stored in curly brackets.

695
00:46:08,640 --> 00:46:09,960
So what I can do I

696
00:46:09,960 --> 00:46:13,440
can, for example,
copy this complete one d addy

697
00:46:14,200 --> 00:46:16,440
and instead of writing the variable

698
00:46:16,440 --> 00:46:19,440
name, I can put it directly here.

699
00:46:19,440 --> 00:46:21,840
Similarly, I can copy this complete

700
00:46:23,040 --> 00:46:25,360
second one d area

701
00:46:25,360 --> 00:46:28,880
and instead of the variable I can put it,
I can have a mixture as well.

702
00:46:30,000 --> 00:46:32,200
So it's nothing but multiple

703
00:46:32,720 --> 00:46:41,080
one days.

704
00:46:41,080 --> 00:46:45,240
Is it possible to have different
number of elements for AD is inside at it?

705
00:46:45,240 --> 00:46:46,800
Yes, it is possible.

706
00:46:46,800 --> 00:46:50,880
Like for example,
if I if I do not want to have

707
00:46:52,800 --> 00:46:54,360
four elements,

708
00:46:54,360 --> 00:46:57,160
I can have three elements
in the second one to add

709
00:46:58,680 --> 00:47:02,480
the size of individual
one D ad is can be different,

710
00:47:02,480 --> 00:47:06,440
does not have to match how many elements
we have in the first one data

711
00:47:10,120 --> 00:47:14,480
or how many we have in the second three.

712
00:47:14,480 --> 00:47:16,680
So it can be different.

713
00:47:17,040 --> 00:47:19,560
Just focus on this point. Two.

714
00:47:19,560 --> 00:47:24,000
The ad is a combination
of multiple one ads.

715
00:47:25,080 --> 00:47:29,080
I know it's easier to understand
if you look at it

716
00:47:29,080 --> 00:47:32,520
like in metrics, rows and columns,
it's easier to understand that way.

717
00:47:33,120 --> 00:47:36,000
But that's not the correct

718
00:47:36,240 --> 00:47:39,080
way of understanding it
because it's not a metrics.

719
00:47:39,080 --> 00:47:41,200
It looks like a metrics, okay?

720
00:47:41,200 --> 00:47:44,000
It's not.

721
00:47:44,000 --> 00:47:51,000
Yes, the data type should be same.

722
00:47:51,000 --> 00:47:51,840
Okay,

723
00:47:52,440 --> 00:47:54,680
Now help me help me do this.

724
00:47:56,040 --> 00:47:57,120
Let me remove this.

725
00:47:57,120 --> 00:47:59,280
I hope you have understood the idea.

726
00:47:59,280 --> 00:48:03,520
So I want to get this complete section
draw.

727
00:48:04,920 --> 00:48:19,720
What should I write here?

728
00:48:19,720 --> 00:48:23,520
But tell me the type of variable
that I should have declared

729
00:48:24,600 --> 00:48:27,440
to store this complete one d addy

730
00:48:28,800 --> 00:48:32,040
and then

731
00:48:32,040 --> 00:48:35,640
square brackets because there's an area

732
00:48:35,640 --> 00:48:37,680
and then let's call it role

733
00:48:38,520 --> 00:48:42,880
is equal to number

734
00:48:43,080 --> 00:48:45,520
and then square brackets zero.

735
00:48:46,400 --> 00:48:49,280
If I do this, will I get an error?

736
00:48:49,440 --> 00:48:53,480
If I say zero and other square
bracket and one, we like it.

737
00:48:53,520 --> 00:48:59,400
We'd like get an error.

738
00:48:59,400 --> 00:49:02,840
Who can tell me why I'm getting an error?

739
00:49:02,840 --> 00:49:03,840
Let's see.

740
00:49:04,480 --> 00:49:07,200
Who can tell me why I am getting an error.

741
00:49:07,200 --> 00:49:09,720
So the Arab states

742
00:49:10,800 --> 00:49:12,520
that required the data

743
00:49:12,520 --> 00:49:15,240
type is an array of integers,

744
00:49:16,200 --> 00:49:19,920
but we are getting only one
single integer.

745
00:49:19,920 --> 00:49:30,160
What does this mean?

746
00:49:30,160 --> 00:49:37,240
What is the data type of this role?

747
00:49:37,240 --> 00:49:40,560
It's an array of integers.

748
00:49:41,400 --> 00:49:44,040
What is this part of returning to us?

749
00:49:44,040 --> 00:49:44,360
This.

750
00:49:44,360 --> 00:49:46,560
This code here numbers 001.

751
00:49:48,480 --> 00:49:51,840
Is it returning us to the array one data

752
00:49:51,960 --> 00:50:02,040
or one single element?

753
00:50:02,040 --> 00:50:04,320
No, this is where you are wrong.

754
00:50:04,320 --> 00:50:08,120
It's one single element from to the array.

755
00:50:08,120 --> 00:50:10,720
Look, it's not a to the adding.

756
00:50:10,720 --> 00:50:13,120
If I say numbers zero

757
00:50:13,120 --> 00:50:18,040
and one is just one single
element of type integer

758
00:50:19,120 --> 00:50:22,400
from this to the area which is 20, it's
not a 2D area.

759
00:50:22,400 --> 00:50:25,680
Those who are saying to the addy
it's not one.

760
00:50:25,680 --> 00:50:29,280
The array not to data
is one single element

761
00:50:30,280 --> 00:50:32,680
from this to reality.

762
00:50:32,840 --> 00:50:35,800
When we say square brackets two

763
00:50:36,080 --> 00:50:40,320
and if I want to store it in a variable,

764
00:50:40,320 --> 00:50:43,120
I have to say in

765
00:50:44,400 --> 00:50:46,800
number is equal to

766
00:50:47,040 --> 00:50:49,120
and then numbers is zero one.

767
00:50:49,880 --> 00:50:51,920
Everyone understands
what is going on here.

768
00:50:52,440 --> 00:50:58,520
Let me uncomment this as well.

769
00:50:58,520 --> 00:51:02,080
This returns a

770
00:51:03,720 --> 00:51:09,080
complete 11d Addy,

771
00:51:10,440 --> 00:51:12,400
how many of you understand this point?

772
00:51:12,400 --> 00:51:16,640
They scored with one square brackets here
because there's a 2D area.

773
00:51:17,280 --> 00:51:20,040
This this is going to return us one

774
00:51:20,040 --> 00:51:22,200
complete array

775
00:51:23,520 --> 00:51:24,840
from this.

776
00:51:24,840 --> 00:51:25,760
The addy.

777
00:51:26,280 --> 00:51:29,680
When we say this and this code here,

778
00:51:31,160 --> 00:51:33,320
this is going to return

779
00:51:34,840 --> 00:51:37,200
as one

780
00:51:37,320 --> 00:51:42,480
single element.

781
00:51:42,480 --> 00:51:44,880
When we try to square brackets,

782
00:51:45,600 --> 00:51:48,400
we are actually getting single

783
00:51:48,640 --> 00:51:52,800
individual numbers from that ordinary.

784
00:51:53,400 --> 00:51:56,480
When we use only one pair of square
brackets,

785
00:51:57,200 --> 00:52:00,360
we are getting actually complete one.

786
00:52:00,360 --> 00:52:03,600
The add is and if we do not specify

787
00:52:03,600 --> 00:52:06,960
any brackets at all,
we will get the complete 2D addy,

788
00:52:08,440 --> 00:52:11,160
no brackets at all, complete to the area.

789
00:52:11,760 --> 00:52:13,800
One bracket, one dearie,

790
00:52:14,400 --> 00:52:16,520
two brackets, one single elements.

791
00:52:16,800 --> 00:52:18,480
So it's nesting.

792
00:52:18,480 --> 00:52:22,800
One single element is nested
inside, one complete one D addy

793
00:52:23,320 --> 00:52:26,200
and those one D areas
are actually nested inside

794
00:52:26,200 --> 00:52:30,280
a 2D addy.

795
00:52:30,280 --> 00:52:34,480
Makes sense.

796
00:52:34,480 --> 00:52:34,960
Okay.

797
00:52:35,920 --> 00:52:39,960
Only unit really understands this.

798
00:52:39,960 --> 00:52:42,440
Oh. Okay.

799
00:52:42,760 --> 00:52:44,600
So tell me

800
00:52:44,600 --> 00:52:49,800
this.

801
00:52:49,800 --> 00:52:52,560
Let me let me create

802
00:52:52,560 --> 00:52:53,640
one new example.

803
00:52:53,640 --> 00:52:56,320
Is there anyone who is following me,
which is writing this code

804
00:53:30,040 --> 00:54:06,760
and what line 17 means is it

805
00:54:06,840 --> 00:54:10,080
declaring before printing line 17?

806
00:54:10,800 --> 00:54:13,680
It's declaring and initializing

807
00:54:22,200 --> 00:54:23,280
that mean get give me on.

808
00:54:23,280 --> 00:54:25,680
Let me show more examples

809
00:54:31,600 --> 00:54:34,440
like when we were saying our is equal
to zero.

810
00:54:34,440 --> 00:54:35,720
Exactly.

811
00:54:35,720 --> 00:54:43,240
Exactly.

812
00:54:43,240 --> 00:54:45,600
So this is the line that is confusing you.

813
00:54:45,600 --> 00:54:54,600
This one.

814
00:54:54,600 --> 00:54:56,920
Let me copy this line.

815
00:54:56,920 --> 00:55:02,360
Let's go to the previous example.

816
00:55:02,360 --> 00:55:06,720
This is exactly the same line as we did
in the previous

817
00:55:06,720 --> 00:55:10,720
example, line number 14 and line
number 13.

818
00:55:10,720 --> 00:55:14,040
Exact same concept, exact same idea, exact

819
00:55:14,040 --> 00:55:18,640
same thing.

820
00:55:18,640 --> 00:55:19,640
Line number 14.

821
00:55:19,640 --> 00:55:37,680
In a previous example,
what was it was returning to us.

822
00:55:37,680 --> 00:55:39,920
Could you run this code?

823
00:55:39,920 --> 00:55:45,960
Yes, it's exactly the same thing.

824
00:55:46,800 --> 00:55:48,200
Complete one.

825
00:55:48,200 --> 00:55:56,600
The array is being returned,
but this is what we will be getting.

826
00:55:56,720 --> 00:55:59,640
20. Yes.

827
00:55:59,680 --> 00:56:04,560
Returns the complete rule.

828
00:56:04,560 --> 00:56:08,360
Yes, it is the same idea.

829
00:56:08,360 --> 00:56:12,400
Yes, it will return ten, 20, 30 and 40.

830
00:56:12,400 --> 00:56:18,720
Yes, that's correct.

831
00:56:18,720 --> 00:56:21,240
This number zero

832
00:56:22,560 --> 00:56:25,520
is going to return this complete
one D addy

833
00:56:27,120 --> 00:56:32,360
and this complete one D addy.

834
00:56:33,840 --> 00:56:38,760
Whenever we want to store an array,

835
00:56:38,760 --> 00:56:41,960
we have to specify the data type,

836
00:56:41,960 --> 00:56:45,600
then square brackets and then a variable.

837
00:56:45,600 --> 00:56:46,840
Why did we get 20?

838
00:56:46,840 --> 00:56:52,560
Because of this last.

839
00:56:52,560 --> 00:56:59,760
How we are going to print or draw one?

840
00:56:59,760 --> 00:57:03,600
You can try to look for it
or you can use arrays dot to string like

841
00:57:03,600 --> 00:57:11,680
my station.

842
00:57:11,680 --> 00:57:15,120
I'm trying to print the entire second row,
but I'm not getting it.

843
00:57:15,120 --> 00:57:18,200
When we check it entire second row,

844
00:57:18,960 --> 00:57:26,440
I could done.

845
00:57:26,440 --> 00:57:27,400
Okay,

846
00:57:28,560 --> 00:57:31,640
so if we want to print the entire second
row, everyone

847
00:57:32,440 --> 00:57:35,560
we can use at ease

848
00:57:36,000 --> 00:57:39,360
dart to string

849
00:57:39,360 --> 00:57:42,560
and we can say numbers square bracket

850
00:57:43,880 --> 00:57:47,640
if we want to get the second complete row,
what should I specify inside the

851
00:57:49,120 --> 00:57:52,640
square bracket? One.

852
00:57:54,080 --> 00:57:55,360
And that's it.

853
00:57:55,360 --> 00:57:58,960
By writing this line,
you will be able to get this complete

854
00:57:58,960 --> 00:58:00,160
second row

855
00:58:03,320 --> 00:58:10,840
like this.

856
00:58:10,840 --> 00:58:16,040
Okay, If I do this, if I specify

857
00:58:16,040 --> 00:58:18,480
one more square bracket
and then I specify,

858
00:58:19,480 --> 00:58:21,520
let's say

859
00:58:21,800 --> 00:58:24,720
number three, what will I get

860
00:58:24,720 --> 00:58:27,680
Instead of line 20,
we can write this out number.

861
00:58:28,000 --> 00:58:29,080
Yes. So,

862
00:58:29,760 --> 00:58:34,280
yes, we can all be

863
00:58:39,480 --> 00:58:40,160
perfect.

864
00:58:40,160 --> 00:58:42,560
Okay, So let's let's do one more example.

865
00:58:43,080 --> 00:58:46,040
Could you please explain why printing
just an array

866
00:58:47,040 --> 00:58:50,360
actually prints
the object instead of actual draw?

867
00:58:51,400 --> 00:58:54,280
Actually, always whenever

868
00:58:54,280 --> 00:58:56,400
we are printing a variable,

869
00:58:57,280 --> 00:59:00,240
if it is not a primitive variable,

870
00:59:00,440 --> 00:59:03,600
Java is always going to print its address
from the memory.

871
00:59:03,880 --> 00:59:07,960
This is by default how Java works,
and that's why we need borrowed.

872
00:59:07,960 --> 00:59:09,400
This ad is dart to string

873
00:59:09,400 --> 00:59:12,600
when whenever we are dealing with non
primitive data types,

874
00:59:13,200 --> 00:59:18,320
there is one more concept in world is
called the two string method overriding.

875
00:59:18,320 --> 00:59:21,600
But there I guess maybe you will learn
in around one or two weeks

876
00:59:29,400 --> 00:59:32,080
how can we print multiple rows?

877
00:59:32,080 --> 00:59:38,640
I will show you that
and we should do that.

878
00:59:38,640 --> 00:59:41,840
How can we print the complete column pool,
for example?

879
00:59:41,840 --> 00:59:44,720
I will show you that.

880
00:59:44,720 --> 01:00:03,600
Please
pull the comment on System.out.println.

881
01:00:03,600 --> 01:00:08,640
Okay, let me copy

882
01:00:08,680 --> 01:00:11,280
and paste this

883
01:00:19,680 --> 01:00:22,080
and want to move out of it

884
01:00:22,240 --> 01:00:22,920
again.

885
01:00:22,920 --> 01:00:25,840
Now let's try to write

886
01:00:26,440 --> 01:00:27,760
a loop

887
01:00:28,840 --> 01:00:31,560
and from that loop

888
01:00:32,560 --> 01:00:35,280
we will slowly
move towards the nested loops

889
01:00:36,200 --> 01:00:38,520
because look guys,

890
01:00:38,520 --> 01:00:41,520
if I want to go through
all of the elements,

891
01:00:42,960 --> 01:00:46,200
how many loops I will be needing,
there are rules,

892
01:00:46,600 --> 01:00:48,840
and inside those rules there are columns.

893
01:00:50,000 --> 01:00:52,080
So we will be needing two loops.

894
01:00:52,080 --> 01:00:54,960
One loop will go through the rules

895
01:00:56,400 --> 01:00:59,280
and the other loop will go to the columns.

896
01:01:01,080 --> 01:01:03,560
So for example,
if I write a loop like this

897
01:01:04,800 --> 01:01:07,400
or end, I is equal to zero.

898
01:01:07,920 --> 01:01:10,320
Let me call it a row,

899
01:01:10,320 --> 01:01:12,000
row zero.

900
01:01:12,840 --> 01:01:15,120
What should be this row less than

901
01:01:16,240 --> 01:01:19,680
how many rules we have inside are two.

902
01:01:19,680 --> 01:01:20,760
The adding

903
01:01:24,600 --> 01:01:27,360
three and

904
01:01:27,360 --> 01:01:29,600
the index. It starts from zero.

905
01:01:29,600 --> 01:01:32,600
So 012 now.

906
01:01:33,080 --> 01:01:34,320
Okay.

907
01:01:35,160 --> 01:01:40,360
And if we say end in

908
01:01:45,360 --> 01:01:47,960
or let me do this for

909
01:01:48,640 --> 01:01:51,240
I mean let me call it

910
01:01:51,760 --> 01:01:54,480
column C oil or short column flow.

911
01:01:55,560 --> 01:01:57,640
So this column, how many columns

912
01:01:58,120 --> 01:02:01,360
we have or the column number

913
01:02:01,520 --> 01:02:05,440
changing every time, is it possible

914
01:02:05,440 --> 01:02:09,040
that column number can be different?

915
01:02:09,040 --> 01:02:12,440
So to make things easier,

916
01:02:12,440 --> 01:02:16,200
let me let me let me make it
same for all of the rows.

917
01:02:16,840 --> 01:02:18,960
Well, what is the

918
01:02:19,080 --> 01:02:24,360
how many columns we have
in all of the rows?

919
01:02:24,360 --> 01:02:24,840
Four.

920
01:02:24,840 --> 01:02:28,640
Right.

921
01:02:28,640 --> 01:02:29,400
Okay.

922
01:02:29,400 --> 01:02:33,160
Now, if I say something
like this, if I say numbers

923
01:02:36,000 --> 01:02:40,680
row and then square brackets column,

924
01:02:42,480 --> 01:02:53,400
what do you think, What output
I will get. Yes.

925
01:02:53,400 --> 01:02:55,680
If I run this

926
01:02:57,880 --> 01:03:02,280
look, we've got the complete

927
01:03:04,200 --> 01:03:06,160
to the array,

928
01:03:06,160 --> 01:03:08,880
all of the numbers,

929
01:03:09,200 --> 01:03:13,200
everything.

930
01:03:13,200 --> 01:03:13,640
Let me know.

931
01:03:13,640 --> 01:03:16,520
Once you are done typing,
then I will debug this code for you

932
01:04:07,120 --> 01:04:08,560
and you paste this code.

933
01:04:08,560 --> 01:04:12,840
And the question, General, I can,
but it's this better if you type. It

934
01:04:14,160 --> 01:04:17,480
is better if you practice with me
next, giving you time

935
01:04:18,800 --> 01:04:20,960
so that you can follow me.

936
01:04:20,960 --> 01:04:23,760
I want you to type. It's better.

937
01:04:23,760 --> 01:04:25,920
You will learn better.

938
01:04:25,920 --> 01:04:28,080
You will face syntax errors.

939
01:04:28,080 --> 01:04:29,680
You will understand the syntax.

940
01:04:29,680 --> 01:04:31,960
Where the call should go will be accurate.

941
01:04:31,960 --> 01:04:32,880
Shouldn't.

942
01:04:32,960 --> 01:04:47,680
When you copy paste,
you don't learn that part.

943
01:04:47,680 --> 01:04:48,480
Okay.

944
01:04:48,600 --> 01:04:52,920
If after every rule
I want to start a new line,

945
01:04:54,040 --> 01:04:55,600
is it possible that

946
01:04:55,600 --> 01:04:58,760
if, let's say after printing ten 4040
I want to print,

947
01:04:59,480 --> 01:05:03,000
I want to print them on the same line,

948
01:05:03,000 --> 01:05:05,360
Is it possible to

949
01:05:05,880 --> 01:05:08,320
change the print

950
01:05:08,640 --> 01:05:12,120
to print stained the print
and then to print

951
01:05:13,800 --> 01:05:16,480
and then a space here

952
01:05:20,720 --> 01:05:22,200
to learn from?

953
01:05:22,960 --> 01:05:23,560
Okay.

954
01:05:23,560 --> 01:05:26,880
No, but now
everything is on the same line.

955
01:05:26,880 --> 01:05:31,960
I want a new line
for every rule, new line for every.

956
01:05:31,960 --> 01:05:34,960
So I can do that

957
01:05:36,280 --> 01:05:38,400
by putting an empty print.

958
01:05:38,440 --> 01:05:44,040
And then after the first row.

959
01:05:44,040 --> 01:05:56,840
So it will look better. Now.

960
01:05:56,840 --> 01:06:00,040
And let me make it a little more

961
01:06:01,920 --> 01:06:22,760
appealing to your eyes.

962
01:06:22,760 --> 01:06:26,120
Commit on your timeline
so you will be able to clearly see

963
01:06:26,120 --> 01:06:28,040
rows and columns

964
01:06:51,600 --> 01:06:54,000
allowed for drawing

965
01:06:56,480 --> 01:07:00,000
a key.

966
01:07:00,000 --> 01:07:01,760
So everyone, are you ready?

967
01:07:01,760 --> 01:07:10,000
Nasty book.

968
01:07:10,000 --> 01:07:10,320
Okay,

969
01:07:11,480 --> 01:07:15,000
so let me put the label point here

970
01:07:15,000 --> 01:07:16,320
and right click

971
01:07:16,320 --> 01:07:19,200
in the next click on date book

972
01:07:20,760 --> 01:07:24,280
and we we can in space here.

973
01:07:25,320 --> 01:07:31,800
I hope the font is still readable.

974
01:07:31,800 --> 01:07:33,960
Okay, so the row

975
01:07:35,160 --> 01:07:38,400
the row variable is starting from zero

976
01:07:40,320 --> 01:07:42,960
and a zero is less than three.

977
01:07:42,960 --> 01:07:45,040
So we enter the loop

978
01:07:45,560 --> 01:07:47,640
and then we have column.

979
01:07:47,640 --> 01:07:49,920
Column is also starting from zero

980
01:07:51,120 --> 01:07:52,800
and column is less than four.

981
01:07:52,800 --> 01:07:53,680
So this is also true.

982
01:07:53,680 --> 01:07:56,160
So we enter and we do this. So

983
01:07:58,840 --> 01:08:01,080
and this row is zero right now.

984
01:08:01,800 --> 01:08:04,280
This column is also zero right now.

985
01:08:05,440 --> 01:08:08,960
So which element is present at row

986
01:08:08,960 --> 01:08:11,480
number zero and column number zero?

987
01:08:12,200 --> 01:08:14,800
The element is ten.

988
01:08:14,800 --> 01:08:20,280
And that's exactly we will be getting one.

989
01:08:20,280 --> 01:08:23,920
So we say print and this number zero ten.

990
01:08:24,800 --> 01:08:26,200
Okay.

991
01:08:26,200 --> 01:08:29,080
Now the value of the column variable

992
01:08:30,520 --> 01:08:32,960
will increase from 0 to 1.

993
01:08:34,400 --> 01:08:36,600
And this condition will be checked.

994
01:08:37,480 --> 01:08:40,760
Is the one less than four? Yes.

995
01:08:41,640 --> 01:08:47,920
So again, the internal loop,
it will go to the second iteration.

996
01:08:47,920 --> 01:08:49,680
So this time

997
01:08:55,080 --> 01:08:58,120
the value of the column has been increased

998
01:08:59,360 --> 01:09:01,520
from 0 to 1.

999
01:09:02,000 --> 01:09:04,400
So row is still zero,

1000
01:09:04,400 --> 01:09:06,720
but the column has been increased to one

1001
01:09:08,800 --> 01:09:12,080
and now we split on it

1002
01:09:12,080 --> 01:09:13,880
zero.

1003
01:09:13,920 --> 01:09:16,800
Rule and column number
one will give us quantity.

1004
01:09:16,800 --> 01:09:18,600
So 20 will be printed here.

1005
01:09:18,600 --> 01:09:21,560
Everybody understands how we got ten

1006
01:09:22,240 --> 01:09:27,040
and 20 here.

1007
01:09:27,040 --> 01:09:27,880
Okay.

1008
01:09:28,640 --> 01:09:30,760
And what will be the next value

1009
01:09:30,760 --> 01:09:37,560
of column?

1010
01:09:37,560 --> 01:09:38,000
No, no, no.

1011
01:09:38,000 --> 01:09:39,160
The value of column.

1012
01:09:39,160 --> 01:09:45,520
The value of column.

1013
01:09:45,520 --> 01:09:48,360
This column variable, it will be two

1014
01:09:49,320 --> 01:09:52,720
and which element is present at row
number zero,

1015
01:09:52,720 --> 01:09:57,400
but column number 230 is present.

1016
01:09:59,040 --> 01:10:01,680
We will be getting 30

1017
01:10:01,680 --> 01:10:04,080
still ROI zero,

1018
01:10:04,080 --> 01:10:08,880
but column will now increase to three.

1019
01:10:08,880 --> 01:10:11,960
So we will be getting 40.

1020
01:10:11,960 --> 01:10:14,000
And now from three,

1021
01:10:14,000 --> 01:10:16,400
the value of the column will become four

1022
01:10:18,120 --> 01:10:23,040
is four, less than four? No.

1023
01:10:23,920 --> 01:10:26,600
So the condition will fail.

1024
01:10:26,600 --> 01:10:29,600
And right now this is our cursor.

1025
01:10:29,760 --> 01:10:32,120
This is where the cursor is

1026
01:10:32,120 --> 01:10:33,440
because of this empty print.

1027
01:10:33,440 --> 01:10:35,920
And then the cursor
will move to the next line.

1028
01:10:36,840 --> 01:10:39,440
So it goes here

1029
01:10:39,440 --> 01:10:42,600
and then the value rule from zero,

1030
01:10:44,160 --> 01:10:47,280
it will increase to one

1031
01:10:48,920 --> 01:10:53,920
and now everything will repeat. Yes.

1032
01:10:54,120 --> 01:10:55,680
So that's what we will do next.

1033
01:10:55,680 --> 01:10:57,880
So now this time things have changed.

1034
01:10:57,960 --> 01:11:01,480
So we have rule number one.

1035
01:11:01,480 --> 01:11:05,360
Now and column will be fast to zero rule.

1036
01:11:05,360 --> 01:11:07,080
Still, one column will be one

1037
01:11:08,200 --> 01:11:10,640
row, still one column number will be two.

1038
01:11:10,920 --> 01:11:14,120
Then still it will be three.

1039
01:11:14,120 --> 01:11:16,840
So row number one, column

1040
01:11:16,840 --> 01:11:19,800
number zero, we will be getting 15.

1041
01:11:20,880 --> 01:11:24,120
Rule number one,
Column number one will give us 30.

1042
01:11:24,720 --> 01:11:25,560
Rule number one.

1043
01:11:25,560 --> 01:11:27,600
Column number two, 35.

1044
01:11:28,200 --> 01:11:31,320
Rule number one, Bottom number three, 45.

1045
01:11:31,320 --> 01:11:33,840
So now one by one.

1046
01:11:33,840 --> 01:11:34,120
Okay.

1047
01:11:34,120 --> 01:11:37,440
Can you tell me,
are we getting the elements rule by row

1048
01:11:37,440 --> 01:11:42,680
or column by column?

1049
01:11:42,680 --> 01:11:45,320
Yes, rule by rule.

1050
01:11:45,320 --> 01:11:47,560
We get the elements rule by rule

1051
01:11:50,640 --> 01:11:53,240
35 and 45.

1052
01:11:54,120 --> 01:11:57,400
The next rule 16

1053
01:11:59,480 --> 01:12:03,800
and 20, then 32 and then 22.

1054
01:12:05,000 --> 01:12:07,200
We can get column by column adjustment.

1055
01:12:07,200 --> 01:12:12,880
Yes. Okay.

1056
01:12:13,760 --> 01:12:17,760
Let me also share this figure.

1057
01:12:17,760 --> 01:12:20,040
Okay. Please
ask if something is not clear.

1058
01:12:20,040 --> 01:12:23,640
If it is not clear how,
with the help of this

1059
01:12:24,360 --> 01:12:28,320
to be all
with the help of this nested for loop,

1060
01:12:28,360 --> 01:12:32,480
we are able to get this one more thing
guys instead of heart.

1061
01:12:32,480 --> 01:12:34,440
It is hard coding a good idea

1062
01:12:35,520 --> 01:12:36,240
like hard coding.

1063
01:12:36,240 --> 01:12:37,520
Three here

1064
01:12:38,040 --> 01:12:38,960
is not good.

1065
01:12:38,960 --> 01:12:41,160
What we can do.

1066
01:12:41,720 --> 01:12:44,880
We can say number start length

1067
01:12:46,960 --> 01:12:50,880
and nurse on this.

1068
01:12:50,880 --> 01:12:56,720
So still exactly the same output.

1069
01:12:56,720 --> 01:12:59,440
But what about this column?
Less than four.

1070
01:12:59,680 --> 01:13:02,280
How do we know

1071
01:13:02,280 --> 01:13:05,120
the individual length

1072
01:13:05,120 --> 01:13:15,640
of every area here?

1073
01:13:15,640 --> 01:13:20,760
If we want to get the length of an ad, do
we first need to get to that add itself?

1074
01:13:22,280 --> 01:13:26,160
If we want to get the length of an area,

1075
01:13:27,200 --> 01:13:29,320
we need to have that add a first.

1076
01:13:29,360 --> 01:13:33,600
So here
we first need to get that at a by writing

1077
01:13:34,560 --> 01:13:37,480
a rule.

1078
01:13:37,480 --> 01:13:40,680
And then from individual rule
we need to get and

1079
01:13:43,360 --> 01:13:45,360
and this is important.

1080
01:13:45,360 --> 01:13:48,600
It's different for the rules.

1081
01:13:48,600 --> 01:13:50,360
We don't need any square brackets.

1082
01:13:50,360 --> 01:13:53,040
We simply say numbers that length.

1083
01:13:53,040 --> 01:13:56,520
But for columns,
we say numbers and then square bracket

1084
01:13:56,560 --> 01:14:03,000
and then document.

1085
01:14:03,000 --> 01:14:07,640
So this is how we can write a generic rule
that can go to all the elements

1086
01:14:07,640 --> 01:14:15,600
from a goods.

1087
01:14:15,600 --> 01:14:18,280
Why there is no space between numbers.

1088
01:14:18,920 --> 01:14:19,440
Okay.

1089
01:14:19,440 --> 01:14:22,160
Who can
who can tell early why there is no space

1090
01:14:23,440 --> 01:14:28,600
between the numbers.

1091
01:14:28,600 --> 01:14:31,080
You put the space

1092
01:14:40,080 --> 01:14:40,520
focus

1093
01:14:40,520 --> 01:14:48,280
here.

1094
01:14:48,280 --> 01:14:54,880
No question marks.

1095
01:14:54,880 --> 01:14:55,560
Okay.

1096
01:14:55,720 --> 01:15:09,720
Do you have any questions or something?

1097
01:15:09,720 --> 01:15:11,840
Clarification on numbers.

1098
01:15:11,840 --> 01:15:13,960
Zero zero.

1099
01:15:13,960 --> 01:15:16,840
Okay, so this part,

1100
01:15:16,840 --> 01:15:20,360
when we specify only one square bracket

1101
01:15:21,520 --> 01:15:23,040
with a to the adding, what do we get?

1102
01:15:23,040 --> 01:15:26,160
Do we get a complete one D addy?

1103
01:15:26,640 --> 01:15:28,920
Do we get the individual elements?

1104
01:15:28,920 --> 01:15:32,240
Do we get complete to be added
three d array?

1105
01:15:32,880 --> 01:15:35,760
This part that I have highlighted here

1106
01:15:36,720 --> 01:15:40,480
numbers one square bracket
and then I'm saying

1107
01:15:40,480 --> 01:15:43,680
row row will be zero, then one
then do that three

1108
01:15:45,960 --> 01:15:47,640
complete rule.

1109
01:15:47,640 --> 01:15:50,760
And after the complete rule,
if we write down length,

1110
01:15:50,960 --> 01:15:55,000
will it give us the length of that array?

1111
01:15:55,000 --> 01:15:56,120
Exactly.

1112
01:15:56,120 --> 01:15:57,720
So that's the idea.

1113
01:15:57,720 --> 01:15:58,480
This part.

1114
01:15:58,480 --> 01:16:00,240
Here it is.

1115
01:16:00,240 --> 01:16:02,320
We're going to break it down like this.

1116
01:16:02,320 --> 01:16:05,320
This part numbers dot rule.

1117
01:16:06,400 --> 01:16:08,440
It gives us

1118
01:16:11,040 --> 01:16:15,040
this gives us the complete

1119
01:16:19,200 --> 01:16:22,040
one, the edit.

1120
01:16:22,440 --> 01:16:26,680
And then after that we are saying dart
length, which means the length of that

1121
01:16:26,680 --> 01:16:27,280
addy.

1122
01:16:27,680 --> 01:16:30,600
Then I have specified the number
I did not need to mention

1123
01:16:30,600 --> 01:16:34,320
rule out when I started using the length,
we needed to specify

1124
01:16:34,880 --> 01:16:38,080
which rule it will take all of the rules

1125
01:16:38,080 --> 01:16:39,600
one by one

1126
01:16:47,840 --> 01:16:51,240
first, when the value of the rule
variable will be zero,

1127
01:16:51,240 --> 01:16:57,360
it will take the first one,
then second and third.

1128
01:16:57,480 --> 01:16:58,160
Oh, okay.

1129
01:16:58,160 --> 01:16:58,480
Thank you.

1130
01:16:58,480 --> 01:17:03,640
Limit.

1131
01:17:03,640 --> 01:17:08,720
Okay, let me give you a very

1132
01:17:09,880 --> 01:17:15,160
kind of easy task.

1133
01:17:15,160 --> 01:17:17,960
You have to only print

1134
01:17:18,680 --> 01:17:20,760
even numbers from this to the area.

1135
01:17:21,840 --> 01:17:25,920
Everyone, everyone to this task

1136
01:17:31,800 --> 01:17:34,440
bring only

1137
01:17:34,920 --> 01:17:39,480
even numbers from.

1138
01:17:39,480 --> 01:17:40,800
This area

1139
01:17:43,400 --> 01:17:46,080
right now we are getting everything
from this to the area.

1140
01:17:46,080 --> 01:17:48,600
We don't want to get everything.

1141
01:17:49,400 --> 01:18:05,240
We only want even numbers.

1142
01:18:05,240 --> 01:18:07,920
We think you can you can do this task.

1143
01:18:07,920 --> 01:18:11,200
Is it easy or hard or or you think

1144
01:18:25,560 --> 01:18:29,280
I'm doing this one?

1145
01:18:29,280 --> 01:18:32,880
Okay, let me show you one and then maybe

1146
01:18:34,360 --> 01:18:36,280
draw at me,

1147
01:18:36,280 --> 01:18:49,560
copy paste.

1148
01:18:49,560 --> 01:18:52,280
So tell me which line is responsible

1149
01:18:52,760 --> 01:18:56,280
for printing the numbers
from this to the area.

1150
01:18:56,960 --> 01:18:59,080
Which line is responsible

1151
01:19:01,760 --> 01:19:04,280
for printing line number 13?

1152
01:19:05,200 --> 01:19:06,440
Is it gang?

1153
01:19:06,440 --> 01:19:09,440
Can we enclose this line inside?

1154
01:19:09,440 --> 01:19:13,480
And if condition? Yes.

1155
01:19:14,640 --> 01:19:18,840
And inside that If condition,
how can I specify that?

1156
01:19:18,840 --> 01:19:23,960
I only want to get
I only want to go inside this loop

1157
01:19:23,960 --> 01:19:27,120
if the number is even

1158
01:19:27,120 --> 01:19:28,560
very simple. Right?

1159
01:19:28,560 --> 01:19:34,080
We can say in number,

1160
01:19:34,080 --> 01:19:36,520
row and column

1161
01:19:37,320 --> 01:19:40,440
and only if we divide

1162
01:19:40,760 --> 01:19:44,320
this number by two
and we go to the answer to zero,

1163
01:19:45,720 --> 01:19:47,800
then only print this.

1164
01:19:47,800 --> 01:19:58,080
So then there's this for the task.

1165
01:19:58,080 --> 01:20:03,440
So look, from the second row
we only have one even number.

1166
01:20:04,800 --> 01:20:07,240
So only one is printed 15.

1167
01:20:07,240 --> 01:20:11,880
Did not bring 3545 second complete,
a third complete.

1168
01:20:11,880 --> 01:20:13,560
Roy's even

1169
01:20:15,360 --> 01:20:17,480
and there's the output get.

1170
01:20:17,480 --> 01:20:20,320
Is there anyone who do not understand

1171
01:20:20,320 --> 01:20:22,560
how we are,

1172
01:20:22,560 --> 01:20:24,640
why we are only getting even numbers?

1173
01:20:25,960 --> 01:20:27,720
Can you modify it to get only

1174
01:20:27,720 --> 01:20:38,640
the order numbers?

1175
01:20:38,640 --> 01:20:42,360
Everyone modified the score
to get only the order

1176
01:20:42,360 --> 01:20:46,560
numbers.

1177
01:20:46,560 --> 01:20:51,240
What the more optimal using the length
reporting the number using length.

1178
01:20:52,200 --> 01:20:55,080
Because we don't want
to count manually first.

1179
01:20:55,080 --> 01:21:06,280
And then I put those numbers here.

1180
01:21:06,280 --> 01:21:07,040
Okay.

1181
01:21:07,040 --> 01:21:10,080
So only insert of this equal to

1182
01:21:10,200 --> 01:21:13,600
if we put not equal to,

1183
01:21:13,600 --> 01:21:15,800
then we will be getting the order numbers

1184
01:21:17,680 --> 01:21:20,640
1535 44 right.

1185
01:21:20,640 --> 01:21:26,280
If you have any questions

1186
01:21:27,400 --> 01:21:30,600
that might change it back to you. But

1187
01:21:36,920 --> 01:22:02,040
you can.

1188
01:22:02,040 --> 01:22:04,080
Okay. If no questions, let's have a break.

1189
01:22:04,680 --> 01:22:06,840
And then after the break
we will do more examples.

1190
01:22:06,840 --> 01:22:09,960
What if I want to print even numbers
from the first row?

1191
01:22:09,960 --> 01:22:12,080
Only in 2D? Other possible

1192
01:22:13,560 --> 01:22:16,200
just change this condition here

1193
01:22:16,200 --> 01:22:21,920
so that it only goes through one row. Yes.

1194
01:22:22,800 --> 01:22:25,520
Let's have a break

1195
01:22:39,160 --> 01:22:49,600
here so you can contact me.

1196
01:22:49,600 --> 01:22:50,560
Okay.

1197
01:22:50,680 --> 01:22:55,480
So let's say this time what I want is

1198
01:22:55,480 --> 01:22:58,680
I want to add all of the numbers

1199
01:23:00,280 --> 01:23:03,800
from the store. Addy.

1200
01:23:03,800 --> 01:23:07,560
So if I have a 2D area again
and I want to go through

1201
01:23:07,560 --> 01:23:19,320
all of the elements,
how many loops I will be needing to,

1202
01:23:20,640 --> 01:23:23,320
why do we need to looks?

1203
01:23:23,320 --> 01:23:25,600
Why do we need two loops?

1204
01:23:25,600 --> 01:23:30,000
One loop will go through the rules

1205
01:23:31,200 --> 01:23:33,560
and then other loop will go through

1206
01:23:33,560 --> 01:23:36,680
individual elements

1207
01:23:36,720 --> 01:23:37,880
from those rules.

1208
01:23:37,880 --> 01:23:42,240
So let's call it role.

1209
01:23:42,240 --> 01:23:46,360
And do I need to individually count
how many rules are there

1210
01:23:46,840 --> 01:23:48,960
in this 2D array or

1211
01:23:50,160 --> 01:23:52,720
yes, I can simply numbers

1212
01:23:54,240 --> 01:23:58,560
then dart and then length. Then

1213
01:23:59,680 --> 01:24:02,880
because individual role can contain
multiple elements,

1214
01:24:03,640 --> 01:24:05,840
I need one more array

1215
01:24:08,160 --> 01:24:11,560
in that I would call columns

1216
01:24:12,920 --> 01:24:16,360
and then I will say numbers

1217
01:24:17,480 --> 01:24:19,600
square bracket role.

1218
01:24:19,760 --> 01:24:22,120
So from every rule

1219
01:24:23,880 --> 01:24:28,200
I see length
so that I can get to the of elements

1220
01:24:28,200 --> 01:24:32,880
which are present in that specific table.

1221
01:24:32,880 --> 01:24:37,040
And now my,
my plan is to add all of the elements.

1222
01:24:37,200 --> 01:24:39,560
Do I need a variable to hold the sum

1223
01:24:41,160 --> 01:24:44,240
somewhere? Yes.

1224
01:24:44,240 --> 01:24:47,040
So we need one variable to hold this one

1225
01:24:47,280 --> 01:24:50,040
like this.

1226
01:24:50,040 --> 01:24:53,720
And then inside the nested loop
I can say a sum

1227
01:24:55,160 --> 01:24:57,840
is equal to sum

1228
01:24:57,840 --> 01:25:00,600
plus some plus What should I put here?

1229
01:25:01,000 --> 01:25:04,800
Does that mean one rule can have
four elements by draw three whole eight?

1230
01:25:04,800 --> 01:25:09,880
Yes, that's correct.

1231
01:25:09,880 --> 01:25:13,560
I want to add all of the elements

1232
01:25:14,400 --> 01:25:17,720
from this to the adding.

1233
01:25:17,720 --> 01:25:20,920
I have written
two loops to go through all the elements.

1234
01:25:21,360 --> 01:25:21,760
Sorry,

1235
01:25:23,160 --> 01:25:25,560
I have
created one variable to hold the sum

1236
01:25:26,160 --> 01:25:29,040
and then I'm saying sum
is equal to sum plus

1237
01:25:30,720 --> 01:25:31,560
some plus part.

1238
01:25:31,560 --> 01:25:33,240
What should go here

1239
01:25:41,520 --> 01:25:42,600
exactly.

1240
01:25:42,600 --> 01:25:44,320
Numbers

1241
01:25:45,000 --> 01:25:48,480
and then rule and

1242
01:25:52,200 --> 01:25:54,640
and this will add all of the numbers.

1243
01:25:55,440 --> 01:25:58,440
And then I'm putting my cursor

1244
01:25:58,440 --> 01:26:00,080
in the start of this.

1245
01:26:00,080 --> 01:26:03,000
And after this here,

1246
01:26:03,000 --> 01:26:04,640
let me bring this sum.

1247
01:26:04,640 --> 01:26:12,600
The value of some.

1248
01:26:12,600 --> 01:26:25,720
So this is the total sum.

1249
01:26:25,720 --> 01:26:29,320
Do you understand how we are able to add

1250
01:26:30,000 --> 01:26:53,960
all of the elements
from this to the added?

1251
01:26:53,960 --> 01:26:56,120
Okay, so

1252
01:26:56,440 --> 01:27:01,920
this piece of code,
this piece of code one by one,

1253
01:27:02,640 --> 01:27:04,960
it will first give us ten,

1254
01:27:04,960 --> 01:27:09,560
then 20 and 30, then 40 and 1530.

1255
01:27:09,960 --> 01:27:15,280
And one by one we are adding it to the
previous value of this one.

1256
01:27:16,360 --> 01:27:18,840
So at the end, once we will be done
iterating

1257
01:27:18,840 --> 01:27:30,000
through all the elements,
we will have the collective sum. Why?

1258
01:27:30,000 --> 01:27:41,360
I have a different number
because here in the last row you have 116,

1259
01:27:41,360 --> 01:27:44,480
so it adds ten, 15, 16.

1260
01:27:44,760 --> 01:27:49,520
No, it adds ten, 20, 30, 40, 15.

1261
01:27:49,680 --> 01:28:11,640
You want me to debug it?

1262
01:28:11,640 --> 01:28:12,960
Okay, next step.

1263
01:28:12,960 --> 01:28:18,840
Okay,
so we placed a table point here, then

1264
01:28:18,840 --> 01:28:22,640
right click and then deeper.

1265
01:28:22,640 --> 01:28:29,440
So initially some is zero,
then it all starts from zero.

1266
01:28:29,880 --> 01:28:33,360
Zero is less then numbers and length

1267
01:28:35,000 --> 01:28:35,680
numbers.

1268
01:28:35,680 --> 01:28:38,600
Galante is three right now,

1269
01:28:38,600 --> 01:28:40,200
zero is less than three.

1270
01:28:40,200 --> 01:28:43,200
So we enter this loop.

1271
01:28:43,200 --> 01:28:45,480
Then numbers are all

1272
01:28:45,960 --> 01:28:48,920
dot land is for column is zero.

1273
01:28:48,920 --> 01:28:55,920
So zero is less than four.

1274
01:28:55,920 --> 01:29:00,720
So here we have zero zero, so we have zero

1275
01:29:01,800 --> 01:29:04,320
and the value of the sum variable

1276
01:29:05,440 --> 01:29:06,560
is also zero.

1277
01:29:06,560 --> 01:29:10,440
So this and this part numbers rule

1278
01:29:10,440 --> 01:29:14,320
column zero zero, it will give us this ten

1279
01:29:15,760 --> 01:29:19,200
and then that ten

1280
01:29:19,400 --> 01:29:21,480
will be added

1281
01:29:21,480 --> 01:29:24,120
to the zero zero plus ten, ten

1282
01:29:24,520 --> 01:29:27,280
and then ten will get stored

1283
01:29:27,280 --> 01:29:31,800
inside the same somebody.

1284
01:29:31,800 --> 01:29:35,760
So once we execute this line, look,

1285
01:29:36,800 --> 01:29:39,400
some you can also see it from here,

1286
01:29:39,400 --> 01:29:42,360
some is ten right now.

1287
01:29:42,480 --> 01:29:43,920
Next,

1288
01:29:44,520 --> 01:29:48,280
the value of column is increased

1289
01:29:49,440 --> 01:29:50,520
from 0 to 1.

1290
01:29:50,520 --> 01:29:56,320
So row is a still zero, column is one now,

1291
01:29:57,640 --> 01:29:59,960
so rows zero column one.

1292
01:30:00,440 --> 01:30:03,360
This will give us 20

1293
01:30:05,160 --> 01:30:06,840
and then

1294
01:30:07,080 --> 01:30:12,960
the 20 that in this code is returning.

1295
01:30:12,960 --> 01:30:14,880
Do we need to write Sun?

1296
01:30:14,880 --> 01:30:17,640
Can't we collect rule?

1297
01:30:17,640 --> 01:30:20,960
No, because the rule is already declared

1298
01:30:22,040 --> 01:30:23,040
inside the loop.

1299
01:30:23,040 --> 01:30:28,440
We need a separate variable
for that to hold the sun.

1300
01:30:28,440 --> 01:30:31,520
We can also add a specific row and column.

1301
01:30:31,520 --> 01:30:34,520
Yes, that's correct.

1302
01:30:34,520 --> 01:30:38,400
Okay, so some right now is ten.

1303
01:30:40,000 --> 01:30:42,440
And this part of the code numbers

1304
01:30:42,560 --> 01:30:45,560
all column, it is giving us this 20.

1305
01:30:45,960 --> 01:30:46,840
Come here

1306
01:30:48,480 --> 01:30:52,600
so you can verify this from here as one

1307
01:30:54,440 --> 01:30:57,120
number zero and column

1308
01:30:57,120 --> 01:30:59,880
13 the value of 20

1309
01:30:59,880 --> 01:31:02,000
and sum contains a value of ten.

1310
01:31:02,360 --> 01:31:05,880
So now ten will be added to 2010

1311
01:31:05,880 --> 01:31:08,280
plus 20 is equal to 30.

1312
01:31:09,280 --> 01:31:12,800
And the result, the sum is ten

1313
01:31:14,800 --> 01:31:15,520
numbers.

1314
01:31:15,520 --> 01:31:17,960
The row and column will give us 20.

1315
01:31:19,080 --> 01:31:22,960
So ten plus property 30 will get stored
inside of some variable.

1316
01:31:22,960 --> 01:31:24,760
So observe the value here.

1317
01:31:24,760 --> 01:31:29,480
After I run this code
in this ten, it will change to 30

1318
01:31:31,800 --> 01:31:34,680
so loop it now becomes 30.

1319
01:31:35,640 --> 01:31:41,280
Similarly, next item after 20 is 30.

1320
01:31:41,280 --> 01:31:47,800
So with the help of this inner loop
now we will get 30 and this 30 plus 30, 60

1321
01:31:47,800 --> 01:31:53,240
and that 60 will get stored inside
some variable.

1322
01:31:53,240 --> 01:31:55,920
Then the next element which is 40.

1323
01:31:55,920 --> 01:31:59,480
So we are going row by row
taking all the elements

1324
01:31:59,480 --> 01:32:04,600
and we keep on adding that element
to the previous value of sum.

1325
01:32:05,280 --> 01:32:10,080
So 60 now will be added to 40,
so 60 plus 40 will be hundred.

1326
01:32:10,800 --> 01:32:13,280
The results will be stored inside
to some variable

1327
01:32:14,400 --> 01:32:15,480
exact same thing.

1328
01:32:15,480 --> 01:32:19,680
Now we will do with the row number two,
which is our next number one.

1329
01:32:20,280 --> 01:32:23,960
We will pick the 15, add 200.

1330
01:32:24,240 --> 01:32:27,360
The answer will be one and 15,
then same 30.

1331
01:32:27,960 --> 01:32:31,960
And we will keep on repeating
this for all the elements

1332
01:32:33,000 --> 01:32:34,840
in the story, adding

1333
01:32:36,240 --> 01:32:39,760
Is it clear now?

1334
01:32:39,760 --> 01:32:41,440
So ideas seem one by one.

1335
01:32:41,440 --> 01:32:43,440
We first get all the elements.

1336
01:32:43,440 --> 01:32:47,200
The extra thing,
the different thing here is we are adding

1337
01:32:47,200 --> 01:33:00,680
all of the elements this time in the sum
variable instead of printing them.

1338
01:33:00,680 --> 01:33:04,120
Okay, so now a lot of you are asking
what can we add?

1339
01:33:04,120 --> 01:33:07,240
Only the first row element,
second row title.

1340
01:33:07,240 --> 01:33:09,120
Can we go column by column?

1341
01:33:09,120 --> 01:33:12,720
Let's try to do these things.

1342
01:33:12,720 --> 01:33:13,760
If you have any questions

1343
01:33:13,760 --> 01:33:14,880
you can ask otherwise,

1344
01:33:14,880 --> 01:33:17,840
in the next example,
I will show you how to add the elements

1345
01:33:17,840 --> 01:33:33,760
row by row or column by column.

1346
01:33:33,760 --> 01:33:41,960
I am having a different output.

1347
01:33:41,960 --> 01:34:03,320
What was my answer? 315.

1348
01:34:03,320 --> 01:34:06,560
Okay.

1349
01:34:06,560 --> 01:34:09,720
Are your elements exactly the same

1350
01:34:12,840 --> 01:34:15,080
or you are doing this mistake here?

1351
01:34:15,080 --> 01:34:15,520
Actually,

1352
01:34:16,680 --> 01:34:17,760
look here

1353
01:34:21,320 --> 01:34:23,400
you are saying numbers decline,

1354
01:34:23,400 --> 01:34:26,840
which means you are not adding the last.

1355
01:34:28,200 --> 01:34:30,240
You are not not adding the last column.

1356
01:34:30,240 --> 01:34:33,920
You are skipping the last column
because number number

1357
01:34:34,440 --> 01:34:37,320
will always return you three.

1358
01:34:37,320 --> 01:34:40,440
And if you put three here,
you will go on over

1359
01:34:40,440 --> 01:34:48,000
only the first three elements in each row.

1360
01:34:48,000 --> 01:34:52,160
There should be numbers
square bracket draw, and then Balkenende

1361
01:34:53,680 --> 01:35:13,680
very kindly share screenshot.

1362
01:35:13,680 --> 01:35:38,880
Let me copy paste this.

1363
01:35:38,880 --> 01:35:40,920
Your elements are different than mine

1364
01:35:45,120 --> 01:35:46,880
and last row I have 20

1365
01:35:46,880 --> 01:35:51,200
you have compared here.

1366
01:35:51,200 --> 01:35:53,120
Okay, everybody

1367
01:35:53,400 --> 01:35:55,400
tell me if I do something like this

1368
01:35:55,400 --> 01:35:59,600
for I, I.

1369
01:35:59,920 --> 01:36:00,240
Okay.

1370
01:36:00,240 --> 01:36:04,320
Should I call the operation still raw

1371
01:36:04,320 --> 01:36:07,920
or you can now understand my right.

1372
01:36:07,920 --> 01:36:11,520
Even if I write
I instead of renaming this total.

1373
01:36:11,800 --> 01:36:12,080
Okay.

1374
01:36:12,080 --> 01:36:16,840
Maybe left me right draw one more time.

1375
01:36:16,840 --> 01:36:17,920
Okay. So

1376
01:36:20,920 --> 01:36:22,440
let's say

1377
01:36:22,440 --> 01:36:25,120
if I say number

1378
01:36:25,120 --> 01:36:34,080
start length, what are this value?

1379
01:36:34,680 --> 01:36:46,800
Number length is going to return me.

1380
01:36:46,800 --> 01:36:49,080
Number of columns and

1381
01:36:50,400 --> 01:36:56,880
number of islands or number of rows.

1382
01:36:56,880 --> 01:36:57,360
Rows.

1383
01:36:57,360 --> 01:36:59,720
How many rows we have

1384
01:37:02,320 --> 01:37:14,280
three of a two.

1385
01:37:14,360 --> 01:37:19,760
If I do this,

1386
01:37:19,760 --> 01:37:21,960
I'm trying to intentionally confuse you

1387
01:37:23,640 --> 01:37:25,160
in one second.

1388
01:37:26,280 --> 01:37:28,320
I can print it out

1389
01:37:32,000 --> 01:37:33,680
numbers

1390
01:37:36,000 --> 01:37:38,520
and then

1391
01:37:38,520 --> 01:37:41,520
I say zero

1392
01:37:42,000 --> 01:37:44,840
and then

1393
01:37:45,560 --> 01:37:46,440
a row.

1394
01:37:47,560 --> 01:37:48,640
What is this?

1395
01:37:48,640 --> 01:37:51,360
A road or land will contain?

1396
01:37:51,360 --> 01:37:54,720
Tell me the number that actually contain

1397
01:37:57,000 --> 01:37:59,240
three.

1398
01:37:59,240 --> 01:38:00,240
Oh, okay.

1399
01:38:00,240 --> 01:38:03,480
It's going to contain three.

1400
01:38:03,480 --> 01:38:06,080
If it is going to contain three from

1401
01:38:06,360 --> 01:38:09,240
from where the value of roll will start

1402
01:38:09,240 --> 01:38:11,520
and where it will end

1403
01:38:12,480 --> 01:38:15,120
the start from zero,

1404
01:38:15,120 --> 01:38:17,440
then it will be one,

1405
01:38:17,440 --> 01:38:19,600
then it will be two.

1406
01:38:19,920 --> 01:38:21,840
And when I put the zero

1407
01:38:23,080 --> 01:38:26,440
numbers get objective zero always,

1408
01:38:28,320 --> 01:38:30,480
which at all I will be getting always

1409
01:38:35,880 --> 01:38:41,040
this one.

1410
01:38:41,040 --> 01:38:45,240
Okay, so first time it will be zero zero.

1411
01:38:46,880 --> 01:38:49,400
Next time it will be zero one.

1412
01:38:50,520 --> 01:38:54,400
Next time it will be zero two
when this loop will execute.

1413
01:38:54,640 --> 01:38:57,760
So which elements I will be getting

1414
01:39:10,040 --> 01:39:18,120
exactly?

1415
01:39:18,120 --> 01:39:20,880
I will be getting ten, 20, 30.

1416
01:39:21,240 --> 01:39:23,560
Everyone understands this.

1417
01:39:23,560 --> 01:39:25,600
Why I did not get 40

1418
01:39:28,920 --> 01:39:30,480
because here

1419
01:39:31,680 --> 01:39:33,120
let me put four here

1420
01:39:33,120 --> 01:39:39,120
Where what will happen now?

1421
01:39:39,120 --> 01:39:41,400
The complete first row

1422
01:39:45,120 --> 01:39:47,280
ten, 20, 30, 40.

1423
01:39:47,960 --> 01:39:51,040
Everyone understands
this when I'm writing this code,

1424
01:39:51,040 --> 01:39:58,120
why I'm getting the first complete row?

1425
01:39:58,120 --> 01:40:01,440
Okay, if I do this, if I put one here,

1426
01:40:03,040 --> 01:40:05,120
if I put one here.

1427
01:40:05,120 --> 01:40:08,400
So first thing, cluster square

1428
01:40:08,400 --> 01:40:10,640
bracket specifying one.

1429
01:40:11,600 --> 01:40:14,040
And then I have this row variable,

1430
01:40:14,160 --> 01:40:17,120
which is going from
zero one, two, three, four

1431
01:40:22,400 --> 01:40:23,400
complete second

1432
01:40:23,400 --> 01:40:29,560
row, ten 1530.

1433
01:40:29,560 --> 01:40:30,240
Okay.

1434
01:40:30,240 --> 01:40:34,120
And if I do it like this, if I only do

1435
01:40:34,440 --> 01:40:36,920
row is less than two

1436
01:40:37,880 --> 01:40:39,200
rows. Less than two.

1437
01:40:39,200 --> 01:40:41,920
What what we like right now

1438
01:40:49,760 --> 01:40:52,560
A everyone understands this.

1439
01:40:53,560 --> 01:40:56,280
The first two square brackets.

1440
01:40:56,280 --> 01:40:58,560
What do the control rows or columns?

1441
01:40:59,000 --> 01:41:02,280
The first square brackets,
Where do they control Rows of columns?

1442
01:41:02,720 --> 01:41:05,520
Rows, any second square brackets?

1443
01:41:05,520 --> 01:41:08,520
Or do the control columns?

1444
01:41:08,520 --> 01:41:11,240
If I, if I make the column

1445
01:41:11,520 --> 01:41:14,120
constant like this,

1446
01:41:14,280 --> 01:41:16,560
and if I change the row

1447
01:41:17,480 --> 01:41:20,400
this time column is constant.

1448
01:41:20,840 --> 01:41:24,120
Which column is this column?

1449
01:41:24,120 --> 01:41:27,880
Add index number one.

1450
01:41:27,880 --> 01:41:30,240
I'm not changing this,

1451
01:41:30,240 --> 01:41:32,000
but I am changing the rules.

1452
01:41:32,000 --> 01:41:35,480
First, I am saying zero, then one.

1453
01:41:35,800 --> 01:41:36,680
Can you guess me?

1454
01:41:36,680 --> 01:41:38,840
Can you guess the output

1455
01:41:46,600 --> 01:41:50,400
20 and

1456
01:41:52,720 --> 01:41:58,080
20 and 30.

1457
01:41:58,080 --> 01:42:00,280
And if I change it to three

1458
01:42:05,880 --> 01:42:07,840
won't be 3020.

1459
01:42:07,840 --> 01:42:10,800
So are you getting the idea
how you can get

1460
01:42:10,800 --> 01:42:13,800
to that rule by row and column by column,

1461
01:42:13,800 --> 01:42:16,000
This first to square bracket?

1462
01:42:16,360 --> 01:42:18,840
It can three It controls the rows.

1463
01:42:20,280 --> 01:42:22,360
This second square bracket.

1464
01:42:22,360 --> 01:42:24,520
It controls the columns.

1465
01:42:24,520 --> 01:42:27,600
If you want to go row by row,

1466
01:42:29,040 --> 01:42:33,560
you keep this part constant

1467
01:42:34,440 --> 01:42:37,080
and then you change this value.

1468
01:42:37,080 --> 01:42:40,240
For example, right now we have
we are saying that

1469
01:42:40,240 --> 01:42:43,680
column is always going to stay the same.

1470
01:42:44,360 --> 01:42:47,680
It is always going to stay one,
which means

1471
01:42:48,840 --> 01:42:53,160
if the column is always going to stay,
always one, This part

1472
01:42:53,160 --> 01:42:57,640
because we have hardcoded one
here, column is not going to move

1473
01:42:58,840 --> 01:43:02,640
and then we are changing the row from
first we are saying zero,

1474
01:43:02,640 --> 01:43:05,400
then one, then two.

1475
01:43:05,400 --> 01:43:09,360
So first it will give us 20
and 30 then continue.

1476
01:43:09,800 --> 01:43:12,400
But I did not understand, not length,

1477
01:43:13,760 --> 01:43:15,760
why the last number did not show,

1478
01:43:16,920 --> 01:43:19,680
because there are three rows

1479
01:43:19,680 --> 01:43:21,600
in this study area.

1480
01:43:21,600 --> 01:43:26,280
There are four columns,
but rules are three.

1481
01:43:26,960 --> 01:43:29,520
So if you say a row, not land,
you will get three.

1482
01:43:30,400 --> 01:43:33,960
And if you get three, you will not be able
to go through all the columns

1483
01:43:34,200 --> 01:43:41,480
because columns are four
and the rules are three.

1484
01:43:41,480 --> 01:43:44,880
Okay, here, here is a quiz for you to see

1485
01:43:45,680 --> 01:43:49,680
if I am changing this rule.

1486
01:43:51,400 --> 01:43:53,520
I'm making it little hard for you.

1487
01:43:54,280 --> 01:43:58,080
Yes, we can do that as well.

1488
01:43:58,080 --> 01:43:58,880
Okay.

1489
01:43:58,880 --> 01:44:01,440
If I do

1490
01:44:03,480 --> 01:44:04,440
this,

1491
01:44:05,880 --> 01:44:25,400
what are what I will get?

1492
01:44:25,400 --> 01:44:26,080
Okay.

1493
01:44:26,760 --> 01:44:27,680
Exactly.

1494
01:44:27,680 --> 01:44:30,400
How do how do you know that
you will be getting the third column?

1495
01:44:30,400 --> 01:44:36,440
Because I have a fixed
I have a fixed in my column.

1496
01:44:37,520 --> 01:44:38,640
My column is

1497
01:44:38,640 --> 01:44:42,600
always column that is at index two.

1498
01:44:42,680 --> 01:44:45,200
So this is column

1499
01:44:45,200 --> 01:44:47,760
which is at index zero.

1500
01:44:47,760 --> 01:44:50,600
This column is that index one.

1501
01:44:50,600 --> 01:44:53,880
This one is two and this one is three.

1502
01:44:54,800 --> 01:44:58,160
So what I am doing,
I'm not changing the value of column.

1503
01:44:58,160 --> 01:45:00,440
It is always staying two.

1504
01:45:01,760 --> 01:45:06,520
But this number numbers
I from from where to where the value of

1505
01:45:06,520 --> 01:45:08,160
I is changing

1506
01:45:11,400 --> 01:45:12,720
from where

1507
01:45:12,720 --> 01:45:15,960
to where the value of I is changing.

1508
01:45:16,920 --> 01:45:19,680
It is changing from zero.

1509
01:45:19,680 --> 01:45:23,840
It becomes one and then it becomes two.

1510
01:45:25,680 --> 01:45:30,240
So the value of I is changing
and this is plus two square bracket.

1511
01:45:30,240 --> 01:45:32,240
What does it control

1512
01:45:32,440 --> 01:45:33,640
the faster square bracket?

1513
01:45:33,640 --> 01:45:34,680
What does it control?

1514
01:45:34,680 --> 01:45:36,600
Roles are columns rows

1515
01:45:36,600 --> 01:45:40,440
the first it will go to this row,
then it will go to this row.

1516
01:45:40,440 --> 01:45:42,400
Then it will go to this row.

1517
01:45:42,400 --> 01:45:46,400
So now, you know,
if you have to go row by rule,

1518
01:45:47,880 --> 01:45:49,200
you should be changing the

1519
01:45:49,200 --> 01:45:52,080
values from the first square bracket.

1520
01:45:53,160 --> 01:45:55,920
If you want to go column by column,

1521
01:45:55,920 --> 01:45:59,760
you should be changing the values
here in the column index.

1522
01:46:00,360 --> 01:46:02,880
Let me give you one more nasty.

1523
01:46:02,960 --> 01:46:05,880
If I make one here

1524
01:46:05,880 --> 01:46:12,800
and if I put I here, what does
this first is good of bracket control.

1525
01:46:13,080 --> 01:46:16,120
It controls the row which row?

1526
01:46:16,120 --> 01:46:22,760
I am always specifying.

1527
01:46:22,760 --> 01:46:28,320
I am always saying give me the elements
only and only from this row.

1528
01:46:28,320 --> 01:46:30,720
What does it mean? What does it mean?

1529
01:46:30,720 --> 01:46:33,240
Will I ever get any value from this
first row

1530
01:46:35,760 --> 01:46:36,200
ever?

1531
01:46:36,200 --> 01:46:39,000
Will I ever get values
from the last one? No.

1532
01:46:39,680 --> 01:46:44,640
I am limiting myself to row number,

1533
01:46:44,640 --> 01:46:48,560
which is a index one,
and then I am changing the value of I.

1534
01:46:48,600 --> 01:46:50,560
What does this? I control columns.

1535
01:46:51,960 --> 01:46:54,800
So first it will be column number zero.

1536
01:46:54,880 --> 01:46:59,720
It will give me 15, then 30, then 35.

1537
01:47:01,720 --> 01:47:06,240
So if we run this,

1538
01:47:08,040 --> 01:47:10,600
we get 15, 15,

1539
01:47:11,720 --> 01:47:15,720
then 30, then and then 35.

1540
01:47:16,920 --> 01:47:19,200
If I want to get this last
element as well,

1541
01:47:19,400 --> 01:47:24,720
what should I change in this code?

1542
01:47:24,720 --> 01:47:28,840
Either make it less than equal to three
or make it

1543
01:47:30,120 --> 01:47:34,560
equal to the floor like this.

1544
01:47:34,560 --> 01:47:36,720
So 15/3. Okay,

1545
01:47:38,200 --> 01:47:40,760
let me do this.

1546
01:47:40,760 --> 01:47:42,920
If I say two here,

1547
01:47:44,320 --> 01:47:46,000
if I said to here, what are what

1548
01:47:46,000 --> 01:47:47,760
I will get this time

1549
01:47:50,120 --> 01:47:54,240
in the first square bracket
I have specified two.

1550
01:47:54,360 --> 01:47:56,360
What does this first get year
bracket controls

1551
01:47:59,600 --> 01:48:00,600
the row

1552
01:48:00,640 --> 01:48:03,000
and which row I am specifying here

1553
01:48:04,440 --> 01:48:07,080
the last row

1554
01:48:07,080 --> 01:48:09,880
and then the value of the second pair

1555
01:48:09,880 --> 01:48:13,800
and second square bracket is changing from
zero one, two, three, four.

1556
01:48:14,240 --> 01:48:17,160
So this will give
me all the elements from the

1557
01:48:18,160 --> 01:48:19,560
complete first row.

1558
01:48:19,560 --> 01:48:22,120
Now let me give you a quick task.

1559
01:48:23,560 --> 01:48:28,440
So let me say

1560
01:48:28,440 --> 01:48:31,800
control C, control V

1561
01:48:37,240 --> 01:48:38,960
20, move it.

1562
01:48:38,960 --> 01:48:42,280
So let me add a few more elements here

1563
01:48:48,200 --> 01:48:54,560
and let me send this area to you.

1564
01:48:54,560 --> 01:49:00,120
You have to write a loop, write a loop

1565
01:49:00,360 --> 01:49:04,080
to get all the elements

1566
01:49:06,120 --> 01:49:11,280
from second row, one by one,

1567
01:49:12,720 --> 01:49:15,600
all the elements from the second row,
one by one,

1568
01:49:15,600 --> 01:49:20,520
with the help of one loop.

1569
01:49:20,520 --> 01:49:27,880
Do you think you can do it
or is it harder or what?

1570
01:49:27,880 --> 01:49:29,280
Oh, okay.

1571
01:49:29,280 --> 01:49:33,600
See, I want all the elements
I want 15, 30,

1572
01:49:33,600 --> 01:49:49,560
35, 45, 40, printed it on the console.

1573
01:49:49,560 --> 01:49:59,600
Yes, exactly Like this.

1574
01:49:59,600 --> 01:50:29,320
Then.

1575
01:50:29,320 --> 01:50:30,000
Yeah.

1576
01:50:30,000 --> 01:50:32,640
So what did you do,

1577
01:50:34,360 --> 01:50:36,400
Write a loop

1578
01:50:37,800 --> 01:50:40,920
and how many elements

1579
01:50:40,920 --> 01:50:44,040
we have in the second adding.

1580
01:50:45,120 --> 01:50:46,720
One, two, three, four,

1581
01:50:46,720 --> 01:50:49,680
five to start from zero.

1582
01:50:50,960 --> 01:50:56,280
Then it's less than five.

1583
01:50:56,280 --> 01:51:02,880
And if I am only interested
in the second row,

1584
01:51:02,880 --> 01:51:05,880
how can I limit myself?

1585
01:51:05,880 --> 01:51:07,840
So I have two square brackets.

1586
01:51:07,840 --> 01:51:10,560
Which one controls the rows?

1587
01:51:10,560 --> 01:51:14,360
The first one or the second one +21.

1588
01:51:14,760 --> 01:51:18,480
And in the first one,
if I always put to one, what does it mean?

1589
01:51:18,680 --> 01:51:22,520
Will I always stay within second row?

1590
01:51:24,000 --> 01:51:28,000
Yes. And then I change the value of I

1591
01:51:28,040 --> 01:51:31,040
from 0 to 4

1592
01:51:33,840 --> 01:51:34,440
will care.

1593
01:51:34,440 --> 01:51:37,440
15, 30, 35, 45, 40.

1594
01:51:38,080 --> 01:51:40,680
Is it anyone who do not understand is

1595
01:51:55,560 --> 01:51:56,080
okay?

1596
01:51:56,080 --> 01:51:57,360
Are you ready for the task?

1597
01:51:57,360 --> 01:52:02,520
It's a little tricky,
but I just want to see if we want to try.

1598
01:52:02,520 --> 01:52:04,120
Need more practice?

1599
01:52:04,120 --> 01:52:05,960
Let me show you the task.

1600
01:52:05,960 --> 01:52:19,560
Let's see if this is the task.

1601
01:52:19,560 --> 01:52:21,480
So let me create this. Add a four.

1602
01:52:21,480 --> 01:52:34,200
You actually would copy this
task from here.

1603
01:52:34,200 --> 01:52:37,560
So this is how your array

1604
01:52:38,920 --> 01:52:39,240
should

1605
01:52:39,240 --> 01:52:50,040
look like.

1606
01:52:50,040 --> 01:52:59,000
So there is an array,
there's pilot student,

1607
01:52:59,640 --> 01:53:03,400
and you see it is a 2D area.

1608
01:53:03,400 --> 01:53:04,920
The first

1609
01:53:05,480 --> 01:53:09,480
arrow contains the name of the students,

1610
01:53:09,480 --> 01:53:24,440
and there are four students.

1611
01:53:24,440 --> 01:53:25,200
Yes, Deepali.

1612
01:53:25,200 --> 01:53:26,040
Thank you.

1613
01:53:26,040 --> 01:53:28,240
I'm. I'm missing

1614
01:53:31,680 --> 01:53:32,160
a missing

1615
01:53:32,160 --> 01:53:37,560
diskette of records here.

1616
01:53:37,560 --> 01:53:40,000
Okay, so the first

1617
01:53:41,160 --> 01:53:43,200
array inside the study area,

1618
01:53:43,680 --> 01:53:46,680
it contains the.

1619
01:53:46,680 --> 01:53:50,960
And this second contains the grade.

1620
01:53:51,120 --> 01:53:53,360
So let's say a,

1621
01:53:54,000 --> 01:53:57,400
B, C,

1622
01:53:59,040 --> 01:54:01,440
and let's see me again.

1623
01:54:03,000 --> 01:54:05,920
And let me format it a little bit,

1624
01:54:06,160 --> 01:54:09,960
and I'll put it on the next slide.

1625
01:54:09,960 --> 01:54:12,240
So this is how your to the array
looks like.

1626
01:54:12,680 --> 01:54:16,440
So now what
you have to do create to edit this part

1627
01:54:16,440 --> 01:54:21,120
I have already done for you in which
first to add will consist of four names.

1628
01:54:21,120 --> 01:54:22,280
So this is our first pair.

1629
01:54:22,280 --> 01:54:24,320
It contains four names.

1630
01:54:24,320 --> 01:54:27,880
Second array will contain grade,
so secondary contains the grade.

1631
01:54:28,320 --> 01:54:31,240
Your program should print
the name of the students

1632
01:54:31,240 --> 01:54:34,440
that has the A and B grade, so

1633
01:54:35,760 --> 01:54:37,920
you have to access the grade

1634
01:54:39,320 --> 01:54:41,400
from the second row

1635
01:54:41,600 --> 01:54:44,080
and then you have to check

1636
01:54:44,080 --> 01:54:47,600
if that grade is A or B

1637
01:54:47,640 --> 01:54:51,120
if it is a B, then
you have to print the name of the student.

1638
01:54:51,960 --> 01:54:53,520
Do you understand the requirements?

1639
01:54:53,520 --> 01:54:56,280
Do understand the question before we jump.

1640
01:54:56,280 --> 01:54:59,280
But if you need any help

1641
01:54:59,280 --> 01:55:02,760
understanding the question,
please let me know.

1642
01:55:02,760 --> 01:55:04,680
Like, for example,
can you tell me the output?

1643
01:55:04,680 --> 01:55:06,760
What output should I get

1644
01:55:08,560 --> 01:55:09,000
that?

1645
01:55:09,600 --> 01:55:11,800
Let me put it here.

1646
01:55:11,800 --> 01:55:13,720
Let me make it a little easy for you.

1647
01:55:13,720 --> 01:55:15,080
What output should I get?

1648
01:55:15,080 --> 01:55:18,920
According to the requirements,
I should be getting Aisha

1649
01:55:18,920 --> 01:55:22,560
and Deepali on the output
because these are the students

1650
01:55:23,360 --> 01:55:26,360
which have the grade and B,

1651
01:55:26,360 --> 01:55:27,360
Julia

1652
01:55:28,440 --> 01:55:30,600
and John, they have the D and C

1653
01:55:31,280 --> 01:55:36,120
printing.

1654
01:55:36,120 --> 01:55:38,120
Okay, let me put A-plus.

1655
01:55:38,120 --> 01:55:41,240
Okay, so.

1656
01:55:41,240 --> 01:55:44,040
But we don't want to print A-plus.
We only want to print.

1657
01:55:44,080 --> 01:55:50,080
And B, so this is what you have to do,
how you are going to access

1658
01:55:51,480 --> 01:55:53,200
the second row

1659
01:55:53,200 --> 01:56:00,120
and the first.

1660
01:56:00,120 --> 01:56:07,400
Okay, first, tell me how many loops
you will be needing for this.

1661
01:56:07,400 --> 01:56:15,800
Can we do it with only one loop as well?

1662
01:56:15,800 --> 01:56:22,800
Can we do it with only one
loop as well? Yes.

1663
01:56:22,920 --> 01:56:24,520
Try to do one loop.

1664
01:56:24,520 --> 01:56:37,600
It's going to be easy.

1665
01:56:37,600 --> 01:56:38,120
Okay, let's.

1666
01:56:38,120 --> 01:56:39,840
Let's do this first.

1667
01:56:39,840 --> 01:56:44,160
Only write a loop
that prints all the grades.

1668
01:56:44,160 --> 01:56:47,960
Only write a loop
that prints all the grades.

1669
01:56:47,960 --> 01:56:49,760
Let me know
once you are done with this part.

1670
01:56:49,760 --> 01:56:53,720
A loop that prints
all of the grades one by one

1671
01:56:53,720 --> 01:57:29,760
from the story, add it.

1672
01:57:29,760 --> 01:57:30,840
Just let just let me know.

1673
01:57:30,840 --> 01:57:34,080
Once you are done, write the code to print

1674
01:57:34,080 --> 01:57:39,840
only the grades from ordinary
and execute your code and verify

1675
01:57:39,840 --> 01:57:50,480
if it works or not. Yep.

1676
01:57:51,000 --> 01:57:53,560
Yep. We have. This is what I want.

1677
01:57:53,560 --> 01:57:56,720
Bring all of the
grades from this to the any

1678
01:58:04,560 --> 01:58:05,600
IVC you are using

1679
01:58:05,600 --> 01:58:08,680
the new give up intelligently.

1680
01:58:08,680 --> 01:58:09,480
It's one

1681
01:58:18,360 --> 01:58:20,880
now. Perfect.

1682
01:58:21,280 --> 01:58:22,880
Let me also do the same.

1683
01:58:22,880 --> 01:58:27,280
So we save for I I.

1684
01:58:28,920 --> 01:58:32,520
I start from zero x less than four

1685
01:58:33,440 --> 01:58:37,960
and then I am only interested
this second row.

1686
01:58:37,960 --> 01:58:42,080
So in which square bracket

1687
01:58:42,680 --> 01:58:45,560
I should put to one to control

1688
01:58:46,800 --> 01:58:49,360
the array, the first one

1689
01:58:49,360 --> 01:58:52,000
and the second one goes through eight one

1690
01:58:52,000 --> 01:58:52,840
by one

1691
01:58:56,960 --> 01:58:59,120
and I get all the grades.

1692
01:58:59,120 --> 01:59:03,800
Everyone understands this part.

1693
01:59:03,800 --> 01:59:07,240
Okay, If I change this 1 to 0,

1694
01:59:07,640 --> 01:59:13,680
what will I get this time?

1695
01:59:13,680 --> 01:59:16,680
I will be getting the names right

1696
01:59:18,000 --> 01:59:20,840
so everyone understands
how we can get names

1697
01:59:20,840 --> 01:59:24,160
as well as the grades,

1698
01:59:24,160 --> 01:59:25,320
all of them.

1699
01:59:25,920 --> 01:59:28,560
Now we simply need to write
an if condition.

1700
01:59:29,440 --> 01:59:32,280
So for here

1701
01:59:33,800 --> 01:59:34,560
we need to write.

1702
01:59:34,560 --> 01:59:36,320
If if

1703
01:59:38,120 --> 01:59:39,240
students.

1704
01:59:39,240 --> 01:59:42,960
If I am interested in grades,
should I put a zero or one inside

1705
01:59:42,960 --> 01:59:45,080
the first bracket

1706
01:59:48,120 --> 01:59:52,920
one and the second one will go one by one.

1707
01:59:52,920 --> 01:59:58,160
If this is equal to a

1708
01:59:59,200 --> 02:00:00,720
because there is a string.

1709
02:00:00,720 --> 02:00:03,720
So we have to use the equals method.

1710
02:00:03,720 --> 02:00:06,240
So if this is equal to a

1711
02:00:07,440 --> 02:00:11,960
I also want to say either it's A or B

1712
02:00:12,720 --> 02:00:15,840
should
I use and operator logical and operator

1713
02:00:15,840 --> 02:00:19,520
or the logical or operator

1714
02:00:19,800 --> 02:00:24,360
or grade is equal to B

1715
02:00:26,360 --> 02:00:29,480
if this is the case, if the grade is E,

1716
02:00:30,360 --> 02:00:34,920
or if the greatest B, then

1717
02:00:36,480 --> 02:00:39,000
I want to print

1718
02:00:39,000 --> 02:00:41,480
the corresponding names

1719
02:00:41,480 --> 02:00:44,840
from the first row
because I am putting zero.

1720
02:00:45,360 --> 02:00:48,040
It will give me names
because here I'm putting one,

1721
02:00:48,040 --> 02:00:53,280
it will give me the grade.

1722
02:00:53,280 --> 02:00:56,280
And now I get Aisha and Deepali

1723
02:00:57,320 --> 02:00:58,880
so everyone understands this.

1724
02:00:58,880 --> 02:01:03,440
How about working?

1725
02:01:03,440 --> 02:01:11,080
Yes. Take 2 minutes.

1726
02:01:11,080 --> 02:01:13,360
If something is not clear, please ask.

1727
02:01:13,960 --> 02:01:15,840
And still not.

1728
02:01:15,840 --> 02:01:16,480
We can debug.

1729
02:01:16,480 --> 02:01:17,160
As with

1730
02:01:49,720 --> 02:01:53,280
a is there anyone who is typing
who is following

1731
02:01:54,240 --> 02:02:00,840
and wants me to wait? Oh.

1732
02:02:01,280 --> 02:02:01,680
Okay.

1733
02:02:01,680 --> 02:02:09,200
Let me know once you are on. Yes.

1734
02:02:10,280 --> 02:02:13,200
See, this is also going to work.

1735
02:02:13,200 --> 02:02:16,200
Student's grade

1736
02:02:17,520 --> 02:02:20,640
and then dart length

1737
02:02:21,120 --> 02:02:26,160
and you.

1738
02:02:26,160 --> 02:02:30,000
So guys it is a good idea to hardcore this

1739
02:02:31,000 --> 02:02:34,720
or I can get it dynamically.

1740
02:02:34,720 --> 02:02:37,800
How can I get the length
of individual role

1741
02:02:39,880 --> 02:02:40,760
or any role?

1742
02:02:40,760 --> 02:02:43,160
I can say students

1743
02:02:43,280 --> 02:02:46,000
then shared objective zero,

1744
02:02:46,000 --> 02:02:47,400
not length.

1745
02:02:47,400 --> 02:03:02,440
So this is also good.

1746
02:03:02,440 --> 02:03:04,520
What am I doing here?

1747
02:03:04,520 --> 02:03:09,480
Even I am confused.

1748
02:03:09,480 --> 02:03:12,520
What you are still on the example

1749
02:03:12,520 --> 02:03:15,600
that we were solving
30 minutes ago on Let's

1750
02:03:23,960 --> 02:03:27,080
know 2 minutes ago.

1751
02:03:27,080 --> 02:03:31,000
Okay, everyone help him understand
what he is doing wrong.

1752
02:03:31,840 --> 02:03:42,360
He is always getting 40, 40, 40.

1753
02:03:42,360 --> 02:03:47,280
Instead of using the variable role,
he is always saying

1754
02:03:47,520 --> 02:03:52,360
give me the value, which is are 203,

1755
02:03:52,360 --> 02:03:55,080
which means row number zero

1756
02:03:55,840 --> 02:03:59,400
and what column
he is specifying the column number three.

1757
02:04:00,240 --> 02:04:07,160
So that's why you are always getting 40.

1758
02:04:07,160 --> 02:04:09,360
What what do you expect instead.

1759
02:04:09,360 --> 02:04:11,840
Zero through and column number three.

1760
02:04:12,240 --> 02:04:15,840
This is where the fault is present

1761
02:04:19,360 --> 02:04:21,240
40 is on column,

1762
02:04:21,240 --> 02:04:23,920
which is actually next to number three

1763
02:04:23,920 --> 02:04:44,760
and the row is zero.

1764
02:04:44,760 --> 02:04:51,320
So mean put 14 every printed row. No,

1765
02:04:53,200 --> 02:04:55,200
it means that you are 40 years old

1766
02:04:55,200 --> 02:05:00,680
now, I guess.

1767
02:05:01,760 --> 02:05:02,120
Okay.

1768
02:05:02,120 --> 02:05:06,240
He's still not understanding why
he's getting 40 or what does this 40 mean?

1769
02:05:06,560 --> 02:05:07,440
Who can help him.

1770
02:05:07,440 --> 02:05:31,760
You still don't understand
what what what does this 40 mean?

1771
02:05:31,760 --> 02:05:32,280
Okay.

1772
02:05:32,280 --> 02:05:34,960
Ask him if he knows the rows and columns.

1773
02:05:35,080 --> 02:05:36,280
So, Mohammad,

1774
02:05:36,280 --> 02:05:41,440
do you know that 2D, the arrays can also
be perceived as rows and columns?

1775
02:05:43,400 --> 02:05:44,200
But why does

1776
02:05:44,200 --> 02:05:48,960
it print 40?

1777
02:05:48,960 --> 02:05:50,960
And I gave everyone.

1778
02:05:50,960 --> 02:05:53,520
This is this is a challenge for you.

1779
02:05:53,520 --> 02:05:56,560
Maybe the moms, maybe the moms can page

1780
02:05:56,760 --> 02:06:00,400
18 better because moms, they can
understand everything from their children,

1781
02:06:00,400 --> 02:06:03,440
even if they are saying while
while watching our definition of

1782
02:06:03,560 --> 02:06:04,480
is asking for leave.

1783
02:06:04,480 --> 02:06:22,200
Now he is asking why gets 40.

1784
02:06:22,200 --> 02:06:25,800
Okay let let's let's break it down more.

1785
02:06:25,840 --> 02:06:27,120
Tell me this

1786
02:06:27,840 --> 02:06:30,360
your role zero the role

1787
02:06:30,840 --> 02:06:33,120
the variable role
from where it is starting

1788
02:06:35,240 --> 02:06:38,560
zero and and this numbers

1789
02:06:38,920 --> 02:06:47,720
and what this numbers do
our client will give you.

1790
02:06:47,720 --> 02:06:51,040
That's what I'm trying to explain to him.

1791
02:06:51,280 --> 02:06:52,600
Tired, faster.

1792
02:06:52,600 --> 02:06:54,680
All tired value. No, no, no, no.

1793
02:06:54,680 --> 02:06:56,760
It's not going to give you faster value.

1794
02:06:56,760 --> 02:06:58,160
This number is not planned.

1795
02:06:58,160 --> 02:06:59,520
What is going to reduce

1796
02:07:00,920 --> 02:07:04,600
the total number of rows in your to daddy?

1797
02:07:05,480 --> 02:07:06,480
How many rows you have.

1798
02:07:06,480 --> 02:07:10,320
This number,
not length, is going to return four

1799
02:07:10,880 --> 02:07:14,760
because there are total
four rows in your two.

1800
02:07:14,760 --> 02:07:17,680
Daddy is this part player numbers not land

1801
02:07:18,960 --> 02:07:22,320
and their condition
will be something like this.

1802
02:07:22,320 --> 02:07:25,000
So if your condition is like this,
if you have four here

1803
02:07:25,160 --> 02:07:26,880
you are starting your loop from zero.

1804
02:07:26,880 --> 02:07:30,080
If you have 48,
how many times your loop will execute

1805
02:07:31,840 --> 02:07:33,240
four times.

1806
02:07:33,240 --> 02:07:37,320
So it shouldn't be clear
why you are getting 44 times.

1807
02:07:37,920 --> 02:07:41,640
Is this part clear why
the output is being generated four times?

1808
02:07:41,640 --> 02:07:43,920
Because your loop is executing four times.

1809
02:07:44,720 --> 02:07:48,880
Now let's understand why we are getting 44
times.

1810
02:07:48,880 --> 02:07:49,120
Sure.

1811
02:07:49,120 --> 02:07:52,520
To be clear,
because your loop is executing four times.

1812
02:07:52,520 --> 02:07:53,760
Look here what you are saying.

1813
02:07:53,760 --> 02:07:56,520
You are saying numbers
the name of the area.

1814
02:07:57,240 --> 02:07:59,160
Then you are saying to zero.

1815
02:07:59,160 --> 02:08:01,920
This first, a square bracket.

1816
02:08:01,920 --> 02:08:05,040
We put the row number here

1817
02:08:05,680 --> 02:08:08,280
in which we are interesting interested.

1818
02:08:08,760 --> 02:08:11,400
You have inserted zero,

1819
02:08:11,400 --> 02:08:14,960
which means this row from here.

1820
02:08:16,200 --> 02:08:16,720
Then on the

1821
02:08:16,720 --> 02:08:19,000
second square bracket
you are saying three.

1822
02:08:20,080 --> 02:08:22,560
Three means is column number zero.

1823
02:08:22,800 --> 02:08:25,320
This is one, this is two, this is three.

1824
02:08:25,840 --> 02:08:28,080
This points to this 40.

1825
02:08:29,160 --> 02:08:31,600
And you are always saying zero three.

1826
02:08:31,600 --> 02:08:33,520
You are not changing this value.

1827
02:08:33,520 --> 02:08:36,360
This loop is going to execute four times.

1828
02:08:36,360 --> 02:08:40,480
And every time you are saying
give me the element, which is that

1829
02:08:40,480 --> 02:08:44,360
index number zero and add column

1830
02:08:44,640 --> 02:08:47,200
index number three, which is 40.

1831
02:08:47,480 --> 02:08:53,560
So 40 will be printed four times.

1832
02:08:53,560 --> 02:08:55,600
So how should I print that column?

1833
02:08:56,160 --> 02:08:58,600
You want to print the last column or rule

1834
02:08:58,600 --> 02:09:06,720
or what do you want to print?

1835
02:09:06,720 --> 02:09:13,800
4414 41 So if you want to print

1836
02:09:13,920 --> 02:09:18,080
everyone who can help him,
he wants to print the last column.

1837
02:09:18,080 --> 02:09:18,520
This one

1838
02:09:21,000 --> 02:09:22,320
which which

1839
02:09:22,320 --> 02:09:26,160
square brackets control the column.

1840
02:09:26,160 --> 02:09:28,200
Which square brackets control the column.

1841
02:09:29,080 --> 02:09:31,080
The first ones are the second ones first.

1842
02:09:31,080 --> 02:09:32,920
Where our second pair

1843
02:09:34,200 --> 02:09:35,240
second appear.

1844
02:09:35,240 --> 02:09:38,360
So he should
he should keep this three here

1845
02:09:38,360 --> 02:09:45,960
or should he change it?

1846
02:09:45,960 --> 02:09:49,320
We are always interested
in the last column.

1847
02:09:49,320 --> 02:09:51,360
He should keep it.

1848
02:09:51,360 --> 02:09:52,800
He should keep three here.

1849
02:09:52,800 --> 02:09:54,960
What should he do instead of zero?

1850
02:09:54,960 --> 02:09:57,720
He should say a row

1851
02:09:58,280 --> 02:10:00,840
because row will change from zero to 1 to

1852
02:10:00,840 --> 02:10:15,680
3, then four
and you will get the last column.

1853
02:10:15,680 --> 02:10:18,840
Okay, Now let's go back and see

1854
02:10:18,840 --> 02:10:58,240
where do we have.

1855
02:10:58,240 --> 02:11:01,560
Okay, So

1856
02:11:03,600 --> 02:11:12,560
let me show you one more example.

1857
02:11:12,560 --> 02:11:16,560
We have only learned how to use the index

1858
02:11:17,040 --> 02:11:20,120
for loops, the normal ones.

1859
02:11:20,400 --> 02:11:23,680
Now let's try to understand
how we can use other types of loops,

1860
02:11:25,320 --> 02:11:27,600
so help me write down

1861
02:11:27,600 --> 02:11:31,080
a loop again, a simple one

1862
02:11:31,080 --> 02:11:34,520
index based there
start from zero goes to some value.

1863
02:11:35,040 --> 02:11:38,280
And I want to print all of the numbers

1864
02:11:38,280 --> 02:11:44,720
using that loop.

1865
02:11:44,720 --> 02:11:46,800
I can see a four. I

1866
02:11:49,080 --> 02:11:50,280
a rule

1867
02:11:51,120 --> 02:11:53,400
and this rule

1868
02:11:53,400 --> 02:11:58,400
what should be it
less than road, less than what?

1869
02:11:58,400 --> 02:12:03,360
I want to bring all of the numbers
from this to lady

1870
02:12:03,960 --> 02:12:06,560
is there any better way
instead of putting four

1871
02:12:06,840 --> 02:12:10,160
is there any better way
can automatically tell us

1872
02:12:10,680 --> 02:12:15,680
how many rows are there? Yes.

1873
02:12:15,680 --> 02:12:19,520
So we can simply say number start land

1874
02:12:19,920 --> 02:12:25,080
instead of manually put in three or four.

1875
02:12:25,080 --> 02:12:27,480
And this outer loop, what does it control?

1876
02:12:27,560 --> 02:12:31,440
Draws are columns, rows.

1877
02:12:31,800 --> 02:12:34,480
So how many rows we have

1878
02:12:36,000 --> 02:12:36,880
three.

1879
02:12:36,880 --> 02:12:39,680
So those who are saying four.

1880
02:12:39,680 --> 02:12:44,520
Why you are saying four.

1881
02:12:44,520 --> 02:12:46,920
Okay, correct. Answer is three.

1882
02:12:46,920 --> 02:12:51,720
Even if you have two hard coded,
not for outer loop four rules

1883
02:12:53,160 --> 02:12:55,080
rugby, then we can have

1884
02:12:55,080 --> 02:12:57,880
one more inner loop like this

1885
02:12:58,960 --> 02:13:01,920
and let's call it columns.

1886
02:13:01,920 --> 02:13:02,920
This column.

1887
02:13:02,920 --> 02:13:04,320
What should this column be?

1888
02:13:04,320 --> 02:13:05,360
Less than

1889
02:13:11,280 --> 02:13:12,760
how many columns

1890
02:13:12,760 --> 02:13:16,920
we have in our to the area?

1891
02:13:16,920 --> 02:13:17,960
Four.

1892
02:13:17,960 --> 02:13:20,880
Is there any better way of getting

1893
02:13:20,880 --> 02:13:23,400
the number of columns automatically?

1894
02:13:24,480 --> 02:13:27,440
Yes, we can say in numbers

1895
02:13:29,200 --> 02:13:32,280
then square bracket row

1896
02:13:33,480 --> 02:13:37,080
and then land.

1897
02:13:37,080 --> 02:13:41,480
And then if we print, if we say numbers,

1898
02:13:42,600 --> 02:13:44,920
then square bracket the row

1899
02:13:48,720 --> 02:13:51,600
and column.

1900
02:13:51,600 --> 02:13:53,400
And if we run this, we will get

1901
02:13:53,400 --> 02:13:56,280
all of the elements

1902
02:13:56,640 --> 02:13:58,520
from the story adding.

1903
02:13:58,520 --> 02:14:00,600
But the output is not looking good.

1904
02:14:01,280 --> 02:14:05,000
It prints everything on column wise.

1905
02:14:05,000 --> 02:14:05,960
How can I make it?

1906
02:14:05,960 --> 02:14:09,840
Print everything row by row,

1907
02:14:09,840 --> 02:14:13,280
change this print and Len to print.

1908
02:14:15,040 --> 02:14:18,120
Put a space here

1909
02:14:19,320 --> 02:14:21,000
and now if we run it

1910
02:14:23,040 --> 02:14:26,560
this time we get everything roll by row.

1911
02:14:26,560 --> 02:14:28,680
So after the inner loop,

1912
02:14:29,640 --> 02:14:33,000
we can print an empty print out

1913
02:14:36,520 --> 02:14:40,320
and we get all the values here

1914
02:14:40,400 --> 02:14:41,080
again.

1915
02:14:41,080 --> 02:14:42,160
And put print.

1916
02:14:42,160 --> 02:14:46,440
Yes. Okay,
So which is which loop we have used here

1917
02:14:47,400 --> 02:14:49,800
to get all of the elements from

1918
02:14:50,840 --> 02:14:52,480
this to reality

1919
02:14:53,440 --> 02:14:54,160
loop loop.

1920
02:14:54,160 --> 02:14:56,240
The normal one index based loop.

1921
02:14:56,240 --> 02:15:00,000
This is called index based loop.

1922
02:15:00,000 --> 02:15:03,480
Let's try to use the enhanced for loop.

1923
02:15:04,000 --> 02:15:07,720
Everyone understands
how this index based loop is working

1924
02:15:07,720 --> 02:15:10,000
and how we are getting all of the elements
here.

1925
02:15:11,720 --> 02:15:14,520
Now, the second thing I want to show

1926
02:15:14,520 --> 02:15:16,680
you is how to do the same with

1927
02:15:18,080 --> 02:15:19,720
index based.

1928
02:15:19,720 --> 02:15:22,360
Let me quickly copy this

1929
02:15:28,080 --> 02:15:30,680
and let me remove this part.

1930
02:15:31,040 --> 02:15:37,520
Is there anyone who is following
and walks me to it?

1931
02:15:37,520 --> 02:15:53,640
Okay, let me know once you have time,

1932
02:15:53,640 --> 02:15:57,680
you are missing the MP println

1933
02:15:58,320 --> 02:16:01,600
after the inner loop empty out

1934
02:16:11,000 --> 02:16:24,600
we go. Why?

1935
02:16:24,760 --> 02:16:32,400
I am getting an error.

1936
02:16:32,400 --> 02:16:36,120
The s of it.

1937
02:16:37,280 --> 02:16:40,520
And that's
why don't you take screenshots or what?

1938
02:16:40,560 --> 02:16:43,240
Why do you take pictures?

1939
02:16:43,440 --> 02:16:46,440
One thing
that I can see your student capital

1940
02:16:46,440 --> 02:16:49,640
s here and lowercase as here.

1941
02:16:49,640 --> 02:16:52,680
Another thing
you are missing a comma after the line

1942
02:16:52,680 --> 02:17:20,200
number eight.

1943
02:17:20,200 --> 02:17:22,320
Also one more thing.

1944
02:17:22,440 --> 02:17:25,200
Some of you are stuck
on the previous examples.

1945
02:17:25,600 --> 02:17:29,080
Everyone, please stop doing
whatever you are doing.

1946
02:17:29,080 --> 02:17:30,920
This next example
that I'm going to show you,

1947
02:17:30,920 --> 02:18:00,960
I want all of you to focus on that one.

1948
02:18:00,960 --> 02:18:02,960
It will be released

1949
02:18:03,760 --> 02:18:06,240
October six.

1950
02:18:06,600 --> 02:18:08,600
I think it was the best out of all

1951
02:18:09,120 --> 02:18:11,400
what they have released

1952
02:18:11,720 --> 02:18:13,680
when it comes to seasons
and the best seasons.

1953
02:18:13,680 --> 02:18:16,880
Out of all the seasons Marvel has released

1954
02:18:18,720 --> 02:18:25,440
and I'm also a big marvel.

1955
02:18:25,440 --> 02:18:28,080
I never miss a marvel movie.

1956
02:18:28,080 --> 02:18:31,920
See, remember from back 15

1957
02:18:32,320 --> 02:18:33,160
Moon Knight?

1958
02:18:33,160 --> 02:18:35,440
Oh, yes. Moonlight was also very good.

1959
02:18:36,000 --> 02:18:36,680
First half.

1960
02:18:36,680 --> 02:18:41,480
Obviously the second half was all mine,
but I was not expecting that.

1961
02:18:41,480 --> 02:18:47,080
No, Faheem Faheem is here, but he cannot
speak because she punched him so hard.

1962
02:18:47,360 --> 02:18:49,720
Hard, that is.

1963
02:18:49,720 --> 02:18:51,040
I is unable to.

1964
02:18:51,040 --> 02:19:01,040
Maybe skip
speak for next four weeks or so.

1965
02:19:01,040 --> 02:19:19,040
Right thing.

1966
02:19:19,040 --> 02:19:44,920
This is how Faheem looked like.

1967
02:19:44,920 --> 02:19:49,720
Okay, so let's write a enhance for loop

1968
02:19:52,200 --> 02:19:59,960
to bring all of the numbers.

1969
02:19:59,960 --> 02:20:02,760
So in an enhanced for loop,

1970
02:20:02,760 --> 02:20:04,600
what do we specify?

1971
02:20:04,600 --> 02:20:12,040
What do we specify first, the data type,

1972
02:20:12,680 --> 02:20:15,320
the data type of the element

1973
02:20:16,680 --> 02:20:18,880
or the data type of the addy.

1974
02:20:19,600 --> 02:20:24,080
So the to the area,
what do they contain first?

1975
02:20:24,240 --> 02:20:29,640
First, they contain one D areas
or they contain the elements directly.

1976
02:20:31,000 --> 02:20:32,760
How, how is the nesting?

1977
02:20:32,760 --> 02:20:35,080
How is the nesting work

1978
02:20:35,080 --> 02:20:37,760
to the array contains one D area

1979
02:20:37,880 --> 02:20:41,200
and one D areas
contain individual elements.

1980
02:20:42,040 --> 02:20:44,560
This is how it works are to
the add is directly

1981
02:20:44,560 --> 02:20:46,320
contain elements

1982
02:20:55,440 --> 02:20:58,360
nice to the areas

1983
02:20:58,360 --> 02:21:00,520
they contain.

1984
02:21:00,520 --> 02:21:04,440
The one d areas
and one d arrays in turn contain

1985
02:21:04,440 --> 02:21:07,360
the elements
or elements are directly present.

1986
02:21:09,080 --> 02:21:16,600
There is no nest
being nothing into adding.

1987
02:21:16,600 --> 02:21:21,280
They are not directly present
to the arrays

1988
02:21:21,520 --> 02:21:27,240
contain one d areas and D areas
actually contains the elements.

1989
02:21:27,240 --> 02:21:29,240
Look here these curly brackets.

1990
02:21:31,080 --> 02:21:34,280
This is in one d addy.

1991
02:21:34,280 --> 02:21:38,080
This is a complete one D added
so this outer for load

1992
02:21:38,120 --> 02:21:40,040
that we will be writing here.

1993
02:21:40,040 --> 02:21:44,560
It's not going to give us directly element

1994
02:21:45,360 --> 02:21:49,120
it's going to give us first complete Addy.

1995
02:21:49,680 --> 02:21:50,480
So here

1996
02:21:51,600 --> 02:21:54,240
we have to say end

1997
02:21:54,920 --> 02:21:58,120
and then square brackets

1998
02:21:59,200 --> 02:22:01,840
and let's call it a R

1999
02:22:03,160 --> 02:22:06,240
and then semicolon and numbers

2000
02:22:07,040 --> 02:22:10,160
or you can also call it

2001
02:22:11,400 --> 02:22:13,600
rows or rule.

2002
02:22:13,840 --> 02:22:15,920
I think rule will be will make more sense.

2003
02:22:17,440 --> 02:22:20,520
So from this numbers,

2004
02:22:21,480 --> 02:22:23,600
which is a to the addy,

2005
02:22:24,080 --> 02:22:27,000
we are first getting the individual

2006
02:22:27,480 --> 02:22:31,040
one D at is and we are calling them

2007
02:22:31,080 --> 02:22:34,360
rule make sense.

2008
02:22:34,360 --> 02:22:39,600
One loop is extracting
the one d arrays from the to the area.

2009
02:22:40,680 --> 02:22:43,240
Then we will be needing one more addy

2010
02:22:44,080 --> 02:22:47,280
that will extract individual elements

2011
02:22:47,280 --> 02:22:50,120
from these one d arrays.

2012
02:22:50,760 --> 02:22:53,440
So we will see and enter for

2013
02:22:54,480 --> 02:22:57,640
integer column.

2014
02:22:57,720 --> 02:23:01,320
And here we will see the rule.

2015
02:23:01,560 --> 02:23:08,000
So from each rule we are going column
by column to get all the entries.

2016
02:23:08,960 --> 02:23:10,040
So let me print

2017
02:23:10,040 --> 02:23:18,720
the columns.

2018
02:23:18,720 --> 02:23:20,000
So look here,

2019
02:23:21,160 --> 02:23:23,280
all the elements one by one.

2020
02:23:24,400 --> 02:23:29,480
And again, if I want to print them
in one row, I can remove this.

2021
02:23:29,480 --> 02:23:31,320
And then from here

2022
02:23:32,000 --> 02:23:39,640
and can put a space here.

2023
02:23:39,640 --> 02:23:45,000
And then again after this inner for loop,
I can put an empty println

2024
02:23:45,760 --> 02:23:49,760
and now we'll find
exactly elements in this form.

2025
02:23:51,040 --> 02:23:54,000
So the only thing that is different,

2026
02:23:54,000 --> 02:23:58,760
the thing that is, yes,
it is nested one loop inside another one.

2027
02:23:59,880 --> 02:24:02,040
The only thing that is important is,

2028
02:24:02,320 --> 02:24:05,840
is to understand this part here.

2029
02:24:05,840 --> 02:24:07,680
And let me also debug this for you.

2030
02:24:07,680 --> 02:24:12,400
So right click and then debug.

2031
02:24:12,400 --> 02:24:15,280
So look this numbers

2032
02:24:15,280 --> 02:24:19,320
etc. at this number except for area

2033
02:24:20,160 --> 02:24:24,400
one, this truly array contains three one.

2034
02:24:24,400 --> 02:24:29,400
The areas one is present at
index zero one and then two

2035
02:24:30,680 --> 02:24:31,560
when this

2036
02:24:32,160 --> 02:24:33,520
code will be executed.

2037
02:24:33,520 --> 02:24:38,800
First to complete one be added
that contains 1020 quantitative 40

2038
02:24:39,160 --> 02:24:42,000
will be placed inside there already.

2039
02:24:43,240 --> 02:24:46,080
So the moment I run this look here,

2040
02:24:47,800 --> 02:24:49,920
this row variable contains

2041
02:24:49,920 --> 02:24:53,560
the complete eight complete

2042
02:24:53,600 --> 02:24:57,400
first one diary ten, 20, 30, 40.

2043
02:24:57,880 --> 02:25:00,320
So out of these three rows

2044
02:25:01,200 --> 02:25:05,520
this first all as completely

2045
02:25:07,800 --> 02:25:09,600
access the complete row

2046
02:25:09,600 --> 02:25:12,240
now from this row individually.

2047
02:25:12,240 --> 02:25:17,480
Now we going to be getting ten, then
20 and 30 therefore okay so this in a loop

2048
02:25:18,480 --> 02:25:21,000
will now give us from this complete row

2049
02:25:21,360 --> 02:25:25,880
it will give us ten,
then 20, then 30 and 40.

2050
02:25:25,880 --> 02:25:28,360
So if I run this

2051
02:25:28,360 --> 02:25:30,880
look first the value of column is ten,

2052
02:25:31,320 --> 02:25:34,640
it gives us ten, then it gives us 20.

2053
02:25:35,240 --> 02:25:39,600
Look at output,
then it gives us 30, then 40,

2054
02:25:41,160 --> 02:25:42,840
and then again

2055
02:25:42,840 --> 02:25:46,320
we move the cursor to the next line and.

2056
02:25:46,320 --> 02:25:48,920
We go back to the output loop.

2057
02:25:48,920 --> 02:25:53,400
The outer loop this time will give us
which complete row will be given.

2058
02:25:53,400 --> 02:26:01,000
This time we are on the second iteration.

2059
02:26:01,000 --> 02:26:04,520
This complete second row

2060
02:26:05,840 --> 02:26:07,920
will be placed in which variable

2061
02:26:09,320 --> 02:26:11,480
this complete

2062
02:26:11,600 --> 02:26:13,600
second row will be placed

2063
02:26:13,600 --> 02:26:16,520
in which variable inside row variable.

2064
02:26:17,720 --> 02:26:23,840
So now if we run it, look here, this

2065
02:26:23,840 --> 02:26:28,040
row variable, it now contains the complete

2066
02:26:28,080 --> 02:26:32,600
second row 15, 30, 35, 40.

2067
02:26:32,600 --> 02:26:35,240
So imagine it like this.

2068
02:26:35,240 --> 02:26:39,160
You have multiple, let's say, big boxes

2069
02:26:40,880 --> 02:26:41,440
which.

2070
02:26:41,440 --> 02:26:45,360
And those big boxes,
they again in turn contain smaller boxes.

2071
02:26:47,080 --> 02:26:50,400
So you extract one box
from that bigger box

2072
02:26:50,400 --> 02:26:53,960
and then if you want to get
the individual items on our side,

2073
02:26:53,960 --> 02:26:56,400
there are some items
present inside this box.

2074
02:26:56,800 --> 02:27:01,920
Then you go through individual box
one by one to get all of the items.

2075
02:27:01,920 --> 02:27:09,120
So from this bigger box this to the array,
we first get the individual

2076
02:27:09,480 --> 02:27:13,480
one D arrays one by one, row by row.

2077
02:27:14,160 --> 02:27:17,600
And then from those rows we get the items,

2078
02:27:17,600 --> 02:27:22,120
the individual numbers,
one by ten, 15, 30, 35.

2079
02:27:22,120 --> 02:27:23,040
It makes sense

2080
02:27:24,000 --> 02:27:24,800
for us to get

2081
02:27:24,800 --> 02:27:28,760
the complete rows
from the bigger to the array

2082
02:27:29,760 --> 02:27:31,760
and then from those rows

2083
02:27:31,760 --> 02:27:34,640
one by one, get the individual items

2084
02:27:34,760 --> 02:27:39,400
1530, 35, 40.

2085
02:27:40,080 --> 02:27:44,120
Then again,
go back to the next complete row

2086
02:27:45,240 --> 02:27:48,200
and then one by one, from that group

2087
02:27:48,280 --> 02:27:51,520
into the numbers, 16, 20,

2088
02:27:52,360 --> 02:27:55,800
32, 22.

2089
02:27:55,800 --> 02:27:58,520
What is calling this matter to the attic?

2090
02:27:58,560 --> 02:28:04,200
These two square brackets, these values?

2091
02:28:04,200 --> 02:28:21,200
You mean nested loop or to the attic?

2092
02:28:21,200 --> 02:28:24,600
We are getting all the elements

2093
02:28:25,240 --> 02:28:29,080
from this to the array
with the help of enhanced form.

2094
02:28:29,280 --> 02:28:34,680
This is what we are doing.

2095
02:28:34,680 --> 02:28:37,720
Yes, we are using enhanced for loop here

2096
02:28:38,600 --> 02:28:41,160
to get the elements from it to the array.

2097
02:28:41,160 --> 02:28:46,880
Previously we were using normal
index based loops to get all the elements.

2098
02:28:46,880 --> 02:28:50,240
This is different.

2099
02:28:50,240 --> 02:28:51,120
This is a difference

2100
02:28:59,000 --> 02:29:01,920
why we did not put the square in the inner
loop.

2101
02:29:02,080 --> 02:29:04,680
This is where put it here.

2102
02:29:04,680 --> 02:29:05,520
And that

2103
02:29:06,480 --> 02:29:09,680
inner loop is storing individual elements,

2104
02:29:09,680 --> 02:29:13,680
not areas.

2105
02:29:13,680 --> 02:29:15,480
One thing that I don't really understand

2106
02:29:15,480 --> 02:29:18,760
is how intelligible on the row
stands for rows and columns.

2107
02:29:19,240 --> 02:29:21,480
Columns. It does not know,

2108
02:29:21,480 --> 02:29:23,160
it does not know.

2109
02:29:23,720 --> 02:29:25,840
For example, you can call it

2110
02:29:27,840 --> 02:29:29,400
intelligent,

2111
02:29:29,400 --> 02:29:32,680
dumb, intelligent does not know.

2112
02:29:32,680 --> 02:29:35,480
It's just going to declare a variable,
whatever you call it.

2113
02:29:35,480 --> 02:29:40,320
It totally depends on you.

2114
02:29:40,320 --> 02:29:44,440
It's still going to work.

2115
02:29:44,440 --> 02:29:46,680
It's just a variable name
that we are giving.

2116
02:29:47,200 --> 02:29:50,640
I am calling it row and column
so that you can understand better.

2117
02:29:50,640 --> 02:29:54,360
Otherwise there is nothing intelligent
programing or Java

2118
02:29:55,280 --> 02:29:58,720
that is understanding
or extracting any meaning from the

2119
02:29:59,760 --> 02:30:12,000
variable names.

2120
02:30:12,000 --> 02:30:14,240
But we are limited with this loop. Yes.

2121
02:30:14,520 --> 02:30:16,560
For example, we cannot go backwards.

2122
02:30:17,280 --> 02:30:18,240
For example, we

2123
02:30:19,800 --> 02:30:21,720
update the values with this loop.

2124
02:30:21,720 --> 02:30:22,960
Yes, we are

2125
02:30:29,840 --> 02:30:30,640
semicolon.

2126
02:30:30,640 --> 02:30:33,840
Was that semicolon here?

2127
02:30:33,840 --> 02:30:34,560
After the loop?

2128
02:30:34,560 --> 02:30:39,320
You have a semicolon.

2129
02:30:39,320 --> 02:30:42,840
So let me call it

2130
02:30:42,840 --> 02:30:47,760
column again.

2131
02:30:47,760 --> 02:30:50,880
Or it's also good
if you call it num or number

2132
02:30:50,880 --> 02:30:57,600
or something like that.

2133
02:30:57,600 --> 02:31:00,040
Line 11 and 13.

2134
02:31:00,040 --> 02:31:02,000
Line 11 and 13.

2135
02:31:02,000 --> 02:31:02,360
Okay.

2136
02:31:02,360 --> 02:31:05,640
So here inside the enhanced power loop,

2137
02:31:06,520 --> 02:31:09,000
we need to specify whatever

2138
02:31:09,000 --> 02:31:11,480
we get from this variable.

2139
02:31:12,280 --> 02:31:15,000
What does this variable contains numbers.

2140
02:31:15,000 --> 02:31:19,880
What does this contain?

2141
02:31:19,880 --> 02:31:22,280
We have to specify that or that I

2142
02:31:23,440 --> 02:31:23,920
know.

2143
02:31:23,920 --> 02:31:27,360
No, no, not directly contained numbers.

2144
02:31:27,360 --> 02:31:30,480
This numbers

2145
02:31:30,480 --> 02:31:32,520
is a to the addy

2146
02:31:32,520 --> 02:31:37,640
which contains multiple one D arrays.

2147
02:31:37,640 --> 02:31:39,400
That's why I was focusing.

2148
02:31:39,400 --> 02:31:43,600
That's why I was emphasizing on this to
the Addy

2149
02:31:43,920 --> 02:31:48,000
is a collection of multiple one D arrays.

2150
02:31:48,000 --> 02:31:52,640
That's
why here I am declaring an area variable

2151
02:31:52,640 --> 02:31:56,440
to hold the items.

2152
02:31:56,440 --> 02:32:02,560
And then these one d arrays, they contain
individual integer based data.

2153
02:32:02,840 --> 02:32:07,000
That's why I'm saying in the column here,
let me show you more examples with this.

2154
02:32:07,000 --> 02:32:08,200
For example, look here,

2155
02:32:09,600 --> 02:32:12,280
the first example that we did, this one,
getting to copy

2156
02:32:12,280 --> 02:32:45,080
this one, it's

2157
02:32:45,080 --> 02:32:50,400
a part of the syntax looks like you have
for how we have you guys

2158
02:32:50,400 --> 02:32:55,200
forgot how the enhanced for loops work.

2159
02:32:55,200 --> 02:32:57,960
Let me let me show you how far loops work.

2160
02:32:58,720 --> 02:33:01,920
So let's say, for example,
if I have indeed your skater bracket

2161
02:33:02,640 --> 02:33:06,240
and let's see, I am saying numbers

2162
02:33:06,240 --> 02:33:12,440
ten, 20, 30,

2163
02:33:12,440 --> 02:33:15,800
I want to go over this num addy

2164
02:33:16,920 --> 02:33:19,080
with the help of enhanced for loop.

2165
02:33:19,840 --> 02:33:22,880
So what we laid out I will write for

2166
02:33:25,320 --> 02:33:29,120
then I will write
whatever this num array contains.

2167
02:33:29,120 --> 02:33:30,920
What does it contain?

2168
02:33:31,400 --> 02:33:34,440
It contained in b years.

2169
02:33:34,440 --> 02:33:39,240
So I will say in the getter type,
whatever that thing contains,

2170
02:33:40,120 --> 02:33:43,400
then any variable name and then a column

2171
02:33:44,160 --> 02:33:47,080
and then the name of the addy

2172
02:33:47,520 --> 02:33:53,000
that I am about to create.

2173
02:33:53,000 --> 02:33:54,760
This is how this index works.

2174
02:33:55,840 --> 02:33:56,280
So now

2175
02:33:56,280 --> 02:34:00,040
it will go over all the elements
one by one without me

2176
02:34:00,040 --> 02:34:03,960
worrying about the index
or the size or the element

2177
02:34:03,960 --> 02:34:08,320
or the land or anything.

2178
02:34:08,320 --> 02:34:11,880
And it will give me all of the elements
automatically.

2179
02:34:11,880 --> 02:34:13,640
It will manage everything internally.

2180
02:34:13,640 --> 02:34:16,680
I simply have to specify the data type.

2181
02:34:16,680 --> 02:34:19,240
What does this Addy contains

2182
02:34:19,960 --> 02:34:22,800
and the name of the ADDY iterations
and everything

2183
02:34:22,800 --> 02:34:28,680
it will do automatically.

2184
02:34:28,680 --> 02:34:31,200
So this is how the enhanced
for loops work.

2185
02:34:32,880 --> 02:34:35,960
Do you understand it now?

2186
02:34:36,640 --> 02:34:42,120
The this part,
the one that I have highlighted.

2187
02:34:42,120 --> 02:34:45,360
So we are planning to use

2188
02:34:45,360 --> 02:34:48,040
the same enhanced for loop

2189
02:34:48,800 --> 02:34:51,640
to go over the to the areas as well.

2190
02:34:52,080 --> 02:34:54,880
So idea is going to stay exactly the same.

2191
02:34:55,120 --> 02:34:56,800
For example,

2192
02:34:57,040 --> 02:34:59,200
this is my to the area

2193
02:34:59,200 --> 02:35:02,280
this to the area contain one D areas

2194
02:35:02,680 --> 02:35:06,800
and those one D area areas,
they contain individual names.

2195
02:35:07,400 --> 02:35:10,200
So if I want to write an enhanced
for loop again

2196
02:35:10,200 --> 02:35:12,880
Samsung Dex for all in lowercase

2197
02:35:13,800 --> 02:35:17,120
and first thing I have
to specify is the data type

2198
02:35:18,080 --> 02:35:18,480
here.

2199
02:35:18,480 --> 02:35:22,120
The data type is one to be addy

2200
02:35:23,520 --> 02:35:24,520
of string.

2201
02:35:24,520 --> 02:35:28,160
So I will say a string one day at a sign

2202
02:35:29,360 --> 02:35:31,600
and then let me call it

2203
02:35:33,800 --> 02:35:35,920
rule then column

2204
02:35:36,800 --> 02:35:38,880
and then the name of the story that

2205
02:35:43,880 --> 02:35:47,280
if I run this loop only, what will I get?

2206
02:35:47,840 --> 02:35:50,240
What this rule will give me one by one.

2207
02:35:50,240 --> 02:35:53,520
Let's say, for example, if I print true,

2208
02:35:53,520 --> 02:35:57,440
if I said let's see, add is to screen

2209
02:35:58,400 --> 02:36:04,160
and that I print draw,

2210
02:36:04,160 --> 02:36:07,160
it will give me complete one D

2211
02:36:07,200 --> 02:36:10,960
add is one by one one by one

2212
02:36:11,520 --> 02:36:13,680
from this ordinary

2213
02:36:15,000 --> 02:36:18,120
look and bleed one.

2214
02:36:18,120 --> 02:36:22,240
The ad is one by one, one by one

2215
02:36:23,880 --> 02:36:25,240
and I have this one

2216
02:36:25,240 --> 02:36:28,120
D ad is
and I want to go to the individual items.

2217
02:36:29,040 --> 02:36:30,480
Then instead of doing this,

2218
02:36:31,960 --> 02:36:34,120
what I can do, I can write another

2219
02:36:34,840 --> 02:36:37,920
for loop.

2220
02:36:37,920 --> 02:36:40,120
And again, same idea.

2221
02:36:40,920 --> 02:36:42,960
We first have to specify the data type.

2222
02:36:43,680 --> 02:36:49,080
What is the data
type of individual elements

2223
02:36:49,080 --> 02:36:52,200
present in one data, It's the string

2224
02:36:54,000 --> 02:36:56,240
after the string,

2225
02:36:56,400 --> 02:36:57,240
after the string.

2226
02:36:57,240 --> 02:36:59,240
Do I need to specify square brackets?

2227
02:36:59,240 --> 02:37:02,240
Are we dealing with individual elements
or areas?

2228
02:37:02,760 --> 02:37:05,120
We are dealing with individual elements
this time.

2229
02:37:06,120 --> 02:37:08,400
So no need to specify square brackets.

2230
02:37:08,400 --> 02:37:10,560
And then after that, what do we need?

2231
02:37:11,720 --> 02:37:13,240
After the data type?

2232
02:37:13,240 --> 02:37:14,640
What do we write?

2233
02:37:14,640 --> 02:37:18,120
We write any variable name,

2234
02:37:19,600 --> 02:37:21,680
any variable name, let's call it V

2235
02:37:22,400 --> 02:37:24,960
or C or D or X or Y or whatever.

2236
02:37:26,400 --> 02:37:28,720
After variable name we right column

2237
02:37:29,600 --> 02:37:32,320
is the syntax of the enhanced for loop.

2238
02:37:32,320 --> 02:37:37,040
This we always have the right column
and after the column we write the name

2239
02:37:38,200 --> 02:37:38,960
the rule

2240
02:37:38,960 --> 02:37:41,400
that contains the elements and that's it.

2241
02:37:42,160 --> 02:37:45,240
Now if we put into this, we

2242
02:37:45,240 --> 02:37:48,360
we will get all of the elements
one by one,

2243
02:37:48,720 --> 02:37:51,520
like this.

2244
02:37:51,520 --> 02:37:52,240
I will

2245
02:37:53,520 --> 02:37:54,960
if I want to print all,

2246
02:37:54,960 --> 02:37:58,120
all of them on the same line,
I can remove the alone,

2247
02:37:59,360 --> 02:38:03,800
put a space here,
and after the inner for loop

2248
02:38:03,800 --> 02:38:07,040
we can put the empty out

2249
02:38:10,280 --> 02:38:13,080
and then we will get all the names.

2250
02:38:13,080 --> 02:38:15,680
What a nice uniform likely to be.

2251
02:38:15,680 --> 02:38:18,840
So this is how we can use the nested

2252
02:38:19,240 --> 02:38:22,200
enhanced for loops

2253
02:38:22,200 --> 02:38:24,280
to get all the elements.

2254
02:38:24,280 --> 02:38:26,600
The everything is going to stay
the same guys.

2255
02:38:26,880 --> 02:38:30,600
The only thing that you have to focus
is for the outer loop.

2256
02:38:30,600 --> 02:38:35,360
We specify a square brackets
because we will be getting first one

2257
02:38:36,280 --> 02:38:39,480
one add areas, complete rows and,
then the inner one.

2258
02:38:39,480 --> 02:38:41,040
It goes only with the data type

2259
02:38:58,640 --> 02:39:00,120
and is door to string.

2260
02:39:00,120 --> 02:39:05,640
Will it replace the both loops?

2261
02:39:05,640 --> 02:39:09,080
No, it's not going to work.

2262
02:39:09,080 --> 02:39:12,680
There is another one.

2263
02:39:12,680 --> 02:39:15,280
Let me see. I think it's called on.

2264
02:39:16,240 --> 02:39:17,560
Let me check.

2265
02:39:18,280 --> 02:39:21,280
And is dart.

2266
02:39:21,360 --> 02:39:22,280
That is dart.

2267
02:39:22,280 --> 02:39:24,720
I think it's called

2268
02:39:26,600 --> 02:39:29,600
the four look copy all

2269
02:39:34,200 --> 02:39:36,960
we this one deep two string

2270
02:39:43,440 --> 02:39:45,680
and if you ask names here

2271
02:39:47,520 --> 02:39:49,800
this deep string will print

2272
02:39:49,960 --> 02:39:53,760
the two D, three D, four D, R,

2273
02:39:54,320 --> 02:39:57,240
and D areas like this

2274
02:39:57,240 --> 02:40:00,120
adding is dark to string is four.

2275
02:40:00,120 --> 02:40:03,720
One brings four

2276
02:40:05,920 --> 02:40:08,920
four printing

2277
02:40:11,600 --> 02:40:14,400
it will be added. Yes.

2278
02:40:14,560 --> 02:40:18,840
Add is dart posting is four, one date
is this deep two spring is for two days.

2279
02:40:18,840 --> 02:40:22,160
You can actually use this deep
two string for one day.

2280
02:40:22,160 --> 02:40:27,560
That is as well.

2281
02:40:27,560 --> 02:40:31,200
Added or two string
will replace not replace it will print.

2282
02:40:32,280 --> 02:40:34,120
Which way is more common?

2283
02:40:34,120 --> 02:40:36,880
Osman Common way is to write a loop.

2284
02:40:37,720 --> 02:40:40,760
This deep to string or to string
is just for your

2285
02:40:40,760 --> 02:40:44,880
E is.

2286
02:40:44,880 --> 02:40:46,120
Can you please share your code?

2287
02:40:46,120 --> 02:40:54,120
I was listening, not typing.

2288
02:40:54,120 --> 02:40:57,480
Okay. Are you ready for the task?

2289
02:40:57,480 --> 02:41:02,200
How can we print the number of elements?

2290
02:41:02,200 --> 02:41:05,360
Number
of how many elements are there simply by

2291
02:41:05,360 --> 02:41:08,400
getting the length of the individual rows.

2292
02:41:08,960 --> 02:41:14,880
So let's see.

2293
02:41:14,880 --> 02:41:19,560
This is your task.

2294
02:41:19,560 --> 02:41:22,600
Leap to string is used to print from A

2295
02:41:22,680 --> 02:41:26,040
to b3d 45 D ad is without a loop,

2296
02:41:27,200 --> 02:41:30,000
so you have to create a 2D array of cars.

2297
02:41:30,680 --> 02:41:33,000
American, German, Korean, Italian

2298
02:41:33,000 --> 02:41:35,520
first row will contain
all the American cars.

2299
02:41:36,120 --> 02:41:39,600
Second row will contain all the German
cars, third Korean

2300
02:41:39,600 --> 02:41:43,080
cars, and third, fourth one Italian cars.

2301
02:41:43,920 --> 02:41:46,080
And then you have to print all of the cars

2302
02:41:46,960 --> 02:41:49,720
faster using normal loop index base.

2303
02:41:50,640 --> 02:41:54,240
And then second loop
can be an enhanced one.

2304
02:41:54,240 --> 02:41:57,440
Or maybe you can use
while one or whatever you like like

2305
02:42:04,800 --> 02:42:06,480
is the task clear?

2306
02:42:06,480 --> 02:42:09,240
And also you can easy

2307
02:42:10,200 --> 02:42:14,560
you can go
just down to the God's bar country

2308
02:42:15,080 --> 02:42:17,560
or maybe four and mix three

2309
02:42:17,560 --> 02:42:20,560
American cars,
then three German cars, three call them

2310
02:42:20,640 --> 02:42:27,760
three Daddy, Is the task

2311
02:42:27,760 --> 02:42:37,680
clear to everyone?

2312
02:42:37,680 --> 02:42:41,800
So you have to first create a 2D array

2313
02:42:43,880 --> 02:42:46,560
and inside that

2314
02:42:47,320 --> 02:42:49,400
I don't know the names of the German cars.

2315
02:42:49,400 --> 02:42:49,920
What?

2316
02:42:49,920 --> 02:42:52,040
You don't know the names of the German
cars?

2317
02:42:52,200 --> 02:42:53,640
Are you sure?

2318
02:42:53,760 --> 02:42:55,640
Where are you living?

2319
02:42:55,960 --> 02:42:57,680
I don't think there is any country we are.

2320
02:42:57,680 --> 02:43:01,880
German cars are not president,
BMW, Audi, Mercedes.

2321
02:43:02,960 --> 02:43:19,160
They're all German cars.

2322
02:43:19,160 --> 02:43:22,120
American.
I only know Honda and Toyota is Japan.

2323
02:43:22,120 --> 02:43:25,400
I think Honda is not American.

2324
02:43:25,400 --> 02:43:28,080
Honda is a Korean.

2325
02:43:28,080 --> 02:43:38,760
Ford is American. Yes.

2326
02:43:38,760 --> 02:43:43,680
Is KIA is also Korean.

2327
02:43:43,680 --> 02:43:44,880
Oh, it's very easy, guys.

2328
02:43:44,880 --> 02:43:48,080
Just simply go on Google
and type five American car

2329
02:43:48,080 --> 02:43:53,040
companies.

2330
02:43:53,040 --> 02:43:56,480
Honda is Japanese.

2331
02:43:56,480 --> 02:44:00,040
I think a lot of Americans,
they still prefer to go with German cars.

2332
02:44:00,040 --> 02:44:00,360
Right.

2333
02:44:01,720 --> 02:44:02,920
BMW already did.

2334
02:44:02,920 --> 02:44:06,600
They are equally famous.

2335
02:44:06,600 --> 02:44:09,160
Is this a class task
or homework class task?

2336
02:44:10,880 --> 02:44:12,840
But we can afford Japanese.

2337
02:44:12,840 --> 02:44:15,800
I mean, Japanese are not
and cheaper anymore.

2338
02:44:15,800 --> 02:44:18,040
The Prius that was just released,

2339
02:44:19,320 --> 02:44:22,600
I think it is pretty costly

2340
02:44:33,840 --> 02:44:37,160
compared to the current Honda.

2341
02:44:37,200 --> 02:44:40,040
But Toyota is way more reliable.

2342
02:44:41,600 --> 02:44:43,760
I have not used that many cars, but

2343
02:44:45,600 --> 02:44:48,480
I have a Toyota and

2344
02:44:49,840 --> 02:44:53,120
it is always I just

2345
02:44:53,520 --> 02:44:56,360
I just bought the gear started
and it's always ready.

2346
02:44:56,360 --> 02:44:57,320
I can take it anywhere.

2347
02:44:57,320 --> 02:45:02,200
It never happened that something stopped
working or something is better.

2348
02:45:02,200 --> 02:45:05,360
Just change the Indian

2349
02:45:05,360 --> 02:45:07,880
oil on a timely basis and that's it.

2350
02:45:09,360 --> 02:45:11,880
Mostly American driven

2351
02:45:11,880 --> 02:45:26,880
cars.

2352
02:45:26,880 --> 02:45:30,400
Okay, If someone has created this area,
please share it

2353
02:45:30,760 --> 02:45:32,440
with the rest of the students

2354
02:45:34,360 --> 02:45:37,920
so that you can save some time.

2355
02:45:37,920 --> 02:45:39,120
There you go.

2356
02:45:39,360 --> 02:45:41,840
Thank you, Julia. Thank you.

2357
02:45:41,880 --> 02:45:44,960
So this is your area

2358
02:45:44,960 --> 02:45:47,000
and it contains some elements. Simple.

2359
02:45:47,120 --> 02:46:20,000
You simply have to print them
using two different loops.

2360
02:46:20,000 --> 02:46:20,400
Guys.

2361
02:46:20,400 --> 02:46:23,600
Those who you knows
who have an electric car

2362
02:46:25,320 --> 02:46:27,680
is it cheaper to have electric cars

2363
02:46:27,680 --> 02:46:31,640
as compared to fuel,
for example, the charging cost?

2364
02:46:31,640 --> 02:46:33,400
If you are charging it at home,

2365
02:46:33,400 --> 02:46:36,280
the electricity bills that you get,
how much is the difference.

2366
02:46:37,400 --> 02:46:39,560
How much is the difference

2367
02:46:40,360 --> 02:46:44,840
compared to the fuel?

2368
02:46:44,840 --> 02:46:49,760
Pretty much same in the UK unless and
until you have solar, I don't think so.

2369
02:46:49,800 --> 02:46:53,640
It makes sense to have electric car right?

2370
02:46:53,640 --> 02:46:56,040
Unless and until you have solar

2371
02:46:56,040 --> 02:46:57,520
panels for them.

2372
02:46:57,720 --> 02:46:59,480
I mean, obviously I don't think so.

2373
02:46:59,480 --> 02:47:03,120
Anyone is driving
more than 300 or 400 kilometers per day

2374
02:47:07,760 --> 02:47:08,440
and not many

2375
02:47:08,440 --> 02:47:12,760
charging points.

2376
02:47:12,760 --> 02:47:17,200
You lose that fast or obviously
how can I forget the initial cost?

2377
02:47:17,200 --> 02:47:18,760
It's also

2378
02:47:19,360 --> 02:47:22,240
a lot of money upfront

2379
02:47:32,880 --> 02:47:33,800
maintenance

2380
02:47:33,800 --> 02:47:40,760
is costly. Yes.

2381
02:47:40,760 --> 02:47:45,800
I think
now every country is giving tax rebates

2382
02:47:45,800 --> 02:47:50,240
and the they are they are saying
everyone should be electric.

2383
02:47:50,520 --> 02:47:53,480
I think in the US as well,
when you buy a test for an electric car,

2384
02:47:53,480 --> 02:47:56,440
you get a lot of money, you know,

2385
02:47:57,000 --> 02:47:59,880
17, $15,000 or 17 something like that

2386
02:48:00,840 --> 02:48:03,040
region, country 30

2387
02:48:15,560 --> 02:48:18,400
Tesla drop from 60 to 20.

2388
02:48:18,400 --> 02:48:24,360
It can really
this is how much they were making.

2389
02:48:24,360 --> 02:48:25,240
Oh my God.

2390
02:48:25,240 --> 02:48:28,080
You can imagine how much money
these companies make, right?

2391
02:48:28,080 --> 02:48:31,840
If someone is selling the same thing
at 28.

2392
02:48:31,840 --> 02:48:36,160
Okay,
They were at least turkey to cable car

2393
02:48:37,760 --> 02:48:40,440
Tesla keep made or they have

2394
02:48:40,440 --> 02:48:43,960
reduced the features
or other cutting costs or

2395
02:48:46,000 --> 02:48:46,560
well purchased.

2396
02:48:46,560 --> 02:48:47,640
By the way.

2397
02:48:48,160 --> 02:48:49,280
Congratulations, Bernie.

2398
02:48:49,280 --> 02:48:55,080
You can also I heard you guys
have started manufacturing locally

2399
02:48:56,000 --> 02:48:59,280
the Tesla as well in India
we claim for you every year

2400
02:48:59,280 --> 02:49:01,520
during IPR

2401
02:49:07,720 --> 02:49:09,400
a hear here as well.

2402
02:49:09,400 --> 02:49:13,800
In Pakistan,
I think there are 16 plus brands, 16 or 19

2403
02:49:14,200 --> 02:49:16,480
that are bringing the review
that everything M.G.

2404
02:49:17,560 --> 02:49:19,560
Boudreaux Toyota, Honda

2405
02:49:20,720 --> 02:49:23,640
is also the by they are very expensive.

2406
02:49:23,680 --> 02:49:24,120
Okay.

2407
02:49:24,120 --> 02:49:30,320
So everyone is able
to get all of the names of the cars

2408
02:49:30,840 --> 02:49:33,920
past using the index based loop and then

2409
02:49:35,200 --> 02:49:39,080
we have Honda IKEA there they are on here
and then the using

2410
02:49:39,080 --> 02:49:41,160
the enhanced for loop as well

2411
02:49:44,240 --> 02:49:45,680
okay, can you please send me the

2412
02:49:46,920 --> 02:49:48,440
send me the

2413
02:49:48,600 --> 02:49:50,920
to the
area again so that I can save some time

2414
02:49:50,920 --> 02:49:58,440
time.

2415
02:49:58,440 --> 02:50:51,000
Thank your number is

2416
02:50:52,720 --> 02:50:54,360
if you guys are not talking in English

2417
02:50:54,360 --> 02:50:56,480
I will start teaching you in Japanese

2418
02:51:01,880 --> 02:51:07,040
or so

2419
02:51:07,040 --> 02:51:10,440
I am putting AK out to the at school.

2420
02:51:10,440 --> 02:51:15,920
I'm Luke Garcia a.k.a Elements Access
Kazakhstan or gas and print car.

2421
02:51:15,920 --> 02:51:18,960
So that

2422
02:51:20,920 --> 02:51:26,000
it back now. Okay

2423
02:51:27,640 --> 02:51:31,920
so let's first

2424
02:51:31,920 --> 02:51:34,240
try to do it with

2425
02:51:35,960 --> 02:51:37,440
the enhanced volume

2426
02:51:37,440 --> 02:51:40,960
so we write for

2427
02:51:40,960 --> 02:51:43,920
all in lowercase

2428
02:51:45,120 --> 02:51:47,560
and then we specify the guy

2429
02:51:47,640 --> 02:51:51,240
what we will be getting from
this to the area.

2430
02:51:51,280 --> 02:51:56,600
We get one B areas
first from the to the area.

2431
02:51:57,160 --> 02:51:59,760
So that's why we always have the right

2432
02:52:00,640 --> 02:52:03,000
and the data type
and then the square brackets,

2433
02:52:03,000 --> 02:52:05,560
because this is how we represent
and this is how we create a nati,

2434
02:52:07,080 --> 02:52:10,360
and then you can call it rows or

2435
02:52:11,760 --> 02:52:12,920
single cars or whatever.

2436
02:52:12,920 --> 02:52:14,160
It's just variable name.

2437
02:52:14,160 --> 02:52:16,040
It does not have to be a roll.

2438
02:52:16,040 --> 02:52:17,720
You can call it anything.

2439
02:52:17,720 --> 02:52:20,480
For example, you can call it simply R

2440
02:52:20,480 --> 02:52:23,640
Then this column, it's part of the syntax.

2441
02:52:23,640 --> 02:52:26,760
It's it's
or it will always be there no matter

2442
02:52:26,760 --> 02:52:29,400
what kind of data
you are attracting through.

2443
02:52:29,880 --> 02:52:34,120
And after the call
and we write the name of the collection

2444
02:52:34,240 --> 02:52:38,160
through which through
which we are going to iterate.

2445
02:52:38,760 --> 02:52:41,600
So from the cars,

2446
02:52:41,600 --> 02:52:46,160
which is a to the anti,
we will be getting individual

2447
02:52:46,240 --> 02:52:50,240
one The ad is with the help in this loop.

2448
02:52:51,680 --> 02:52:53,240
So if we are interested in

2449
02:52:53,240 --> 02:52:56,760
only in one of the areas,
then we don't have to write anything else.

2450
02:52:57,000 --> 02:53:00,240
But if we are interested
in individual elements

2451
02:53:00,520 --> 02:53:04,160
from those one D areas,
then we need to write one more loop

2452
02:53:04,680 --> 02:53:07,560
and that loop will basically a goal

2453
02:53:09,000 --> 02:53:11,080
will go over this R,

2454
02:53:11,520 --> 02:53:15,240
which is going to a complete
one D at a one by one,

2455
02:53:16,400 --> 02:53:19,440
and it will get the individual items,

2456
02:53:19,440 --> 02:53:24,280
individual car names,
which are of type string.

2457
02:53:24,680 --> 02:53:27,600
So let's say you can call it car

2458
02:53:28,320 --> 02:53:30,720
or C for short,

2459
02:53:30,720 --> 02:53:37,160
and then you write odd here.

2460
02:53:37,160 --> 02:53:40,120
And now if you bring D value C

2461
02:53:41,840 --> 02:53:43,240
you will be getting all the cars.

2462
02:53:43,240 --> 02:53:47,160
So let me remove the alien
and let me put some space here

2463
02:53:48,360 --> 02:53:50,640
and then an empty

2464
02:53:50,640 --> 02:53:55,120
print in any.

2465
02:53:55,120 --> 02:53:57,920
So we get all of the names here. Okay

2466
02:53:59,080 --> 02:54:03,160
then someone send me
the code for the index based loop.

2467
02:54:03,240 --> 02:54:05,440
Do you want me to go over the index
best based?

2468
02:54:05,440 --> 02:54:08,960
No question how to use the index based
loop to go through all of the elements.

2469
02:54:09,720 --> 02:54:13,200
I think it's very easy.

2470
02:54:13,200 --> 02:54:16,320
A variable.

2471
02:54:16,320 --> 02:54:17,240
So here

2472
02:54:19,320 --> 02:54:21,120
we have the index

2473
02:54:21,120 --> 02:54:25,480
based
loop so there can be change in this cost

2474
02:54:26,560 --> 02:54:30,840
to the names name and index it.

2475
02:54:31,760 --> 02:54:34,440
So starting from zero

2476
02:54:34,440 --> 02:54:37,520
I less than fast cars are all planned

2477
02:54:37,880 --> 02:54:41,160
and then God's eye
dart land for the inner loop

2478
02:54:49,080 --> 02:54:50,280
to exact same map.

2479
02:54:50,280 --> 02:54:54,960
But this one using the index for this one

2480
02:54:55,360 --> 02:54:57,240
using the

2481
02:54:58,240 --> 02:55:00,240
in henceforth

2482
02:55:00,960 --> 02:55:02,840
please ask if something is not here.

2483
02:55:02,840 --> 02:55:05,040
Also system dot or print that is or

2484
02:55:06,200 --> 02:55:07,720
not need to string.

2485
02:55:07,720 --> 02:55:09,720
Yes, this is going to also work.

2486
02:55:09,720 --> 02:55:15,960
It can work with one due to the 3D.

2487
02:55:15,960 --> 02:55:19,280
How many of you were not able
to solve this task?

2488
02:55:20,520 --> 02:55:23,040
How many of you were not able
to print the elements

2489
02:55:23,040 --> 02:55:39,960
from?

2490
02:55:39,960 --> 02:55:43,320
For me, index based is easier,
whichever you prefer.

2491
02:55:45,080 --> 02:55:48,000
It's fine.

2492
02:55:48,000 --> 02:55:51,480
The enhanced one will make your code loop
a little easier,

2493
02:55:51,760 --> 02:55:53,840
but obviously it has limitations.

2494
02:55:53,840 --> 02:55:58,320
So most of the time, one way or the other
way, you be going with the index.

2495
02:55:58,320 --> 02:56:03,360
This.

2496
02:56:03,360 --> 02:56:05,400
Oh, okay.

2497
02:56:05,400 --> 02:56:07,760
So let's see

2498
02:56:07,760 --> 02:56:11,480
using to really create
a growth released inside,

2499
02:56:11,520 --> 02:56:14,880
you should have an array of vegetables,
fruits,

2500
02:56:15,440 --> 02:56:17,480
dairy products, sweets,

2501
02:56:18,000 --> 02:56:20,520
then retrieve all the values from data.

2502
02:56:20,520 --> 02:56:23,080
Using is the exact same thing. Those

2503
02:56:25,160 --> 02:56:26,040
look at this.

2504
02:56:26,040 --> 02:56:27,000
Look, look at this.

2505
02:56:27,000 --> 02:57:11,280
Or you want to wait here.

2506
02:57:11,280 --> 02:57:14,520
I talked to this class was short
and mentally prepared for self.

2507
02:57:14,640 --> 02:57:17,600
Oh, you believe me? See,

2508
02:57:18,800 --> 02:57:26,320
you guys will believe me.

2509
02:57:26,320 --> 02:57:28,200
Less than perfect.

2510
02:57:28,200 --> 02:57:30,600
You guys want a short class

2511
02:57:30,600 --> 02:57:36,040
crying?

2512
02:57:36,040 --> 02:57:38,040
I was just trying to get your attention

2513
02:57:38,040 --> 02:57:41,360
so that you can focus
all of your attention,

2514
02:57:41,360 --> 02:57:45,480
and then I can teach you to the areas
because they are hard to understand.

2515
02:57:45,480 --> 02:58:03,000
So it was district three guys.

2516
02:58:03,000 --> 02:58:03,760
Okay?

2517
02:58:03,760 --> 02:58:04,640
I was just getting.

2518
02:58:04,640 --> 02:58:06,920
Yes, today's a short class, so

2519
02:58:08,320 --> 02:58:12,000
I can give you the projects
and you can solve ones as your homework.

2520
02:58:12,400 --> 02:58:15,400
This task task number two,
exactly the same as the first one.

2521
02:58:16,440 --> 02:58:19,440
Let me pause
straight in the class announcement

2522
02:58:24,520 --> 02:58:26,200
and you can

2523
02:58:26,200 --> 02:58:28,520
solve these ones as your

2524
02:58:29,480 --> 02:58:33,480
as your project.

2525
02:58:33,480 --> 02:58:40,480
So let me see.

2526
02:58:40,480 --> 02:59:03,680
We created the project.

2527
02:59:03,680 --> 02:59:06,800
I am not looking at the chart right now.

2528
02:59:06,800 --> 02:59:31,320
So if someone is asking something,
please give me a few minutes.

2529
02:59:31,320 --> 02:59:51,520
So this is your project number one.

2530
02:59:51,520 --> 02:59:55,360
So first part of the project is
you have to do coding.

2531
02:59:56,400 --> 03:00:00,560
You can use Google,
you can ask for help from each other,

2532
03:00:00,560 --> 03:00:05,560
but if you directly start
looking for the solutions or start

2533
03:00:05,560 --> 03:00:10,200
for asking for help, obviously
you will not be learning anything.

2534
03:00:10,720 --> 03:00:13,440
So I want all of you to first try give

2535
03:00:13,440 --> 03:00:16,040
15, 20, 30 minutes for each task

2536
03:00:16,680 --> 03:00:20,160
and then discuss with your friends
and then only look for help.

2537
03:00:21,040 --> 03:00:24,760
So first is create
a program that uses an added

2538
03:00:24,760 --> 03:00:28,560
to store
the list of competitors for a week

2539
03:00:28,720 --> 03:00:33,320
and then use a loop to find the highest
and the lowest temperature for the week.

2540
03:00:34,880 --> 03:00:37,160
Similarly, create an array of integers

2541
03:00:37,200 --> 03:00:41,440
that is created to calculate the sum.

2542
03:00:41,440 --> 03:00:45,960
So if let's say
you are this coding package for everyone

2543
03:00:47,480 --> 03:00:50,320
does not matter
if your group members are three, five

2544
03:00:50,320 --> 03:00:52,720
and 15, everyone individually

2545
03:00:53,640 --> 03:00:55,920
should solve all of these tasks.

2546
03:00:55,920 --> 03:00:58,680
The first part coding part

2547
03:00:58,680 --> 03:01:02,360
and the second part.

2548
03:01:02,360 --> 03:01:04,680
You all know how to create the YouTube
account.

2549
03:01:06,360 --> 03:01:09,600
Everyone you all know how to create
a YouTube account or how to push code.

2550
03:01:09,920 --> 03:01:13,000
So this project you have to push
the solutions on the GitHub

2551
03:01:13,000 --> 03:01:17,120
and then you have to share the link of
that of your to second parties.

2552
03:01:17,120 --> 03:01:20,520
You have to record the video. And

2553
03:01:21,600 --> 03:01:25,320
for example, there are one, two,
three, four, five, six topics.

2554
03:01:25,800 --> 03:01:29,640
So from the six topics you can choose

2555
03:01:29,920 --> 03:01:32,720
topic one person, one topic.

2556
03:01:33,840 --> 03:01:34,400
Let's say for

2557
03:01:34,400 --> 03:01:38,200
example, the yes,
the flip made these statements.

2558
03:01:38,200 --> 03:01:42,840
So you have to record 3 to 5 minutes on
what are if statements.

2559
03:01:43,440 --> 03:01:48,000
Give an example, explanation and all. Yes

2560
03:01:49,200 --> 03:01:50,160
we did one for format.

2561
03:01:50,160 --> 03:01:52,320
You can also do it in groups.

2562
03:01:52,320 --> 03:01:56,400
Just record one complete video in
which all the members are going one by one

2563
03:01:56,760 --> 03:02:03,680
and then explaining their parts.

2564
03:02:03,680 --> 03:02:06,720
So what do you think

2565
03:02:06,720 --> 03:02:10,960
this one here,
the deadline for this recording tomorrow

2566
03:02:11,640 --> 03:02:15,560
because you still have around

2567
03:02:15,840 --> 03:02:17,080
one and a half hour.

2568
03:02:17,080 --> 03:02:20,680
So I think it's enough for you
to prepare one topic and then record it.

2569
03:02:21,840 --> 03:02:25,560
So this one
you have to do until tomorrow for one,

2570
03:02:25,560 --> 03:02:27,960
you have one week recording one.

2571
03:02:29,400 --> 03:02:31,200
You can join group one.

2572
03:02:31,200 --> 03:02:33,240
No, I don't want to join. I'm fine.

2573
03:02:33,240 --> 03:02:39,360
I will do my assignments alone
and my project alone.

2574
03:02:39,360 --> 03:02:50,640
Okay, So is the project clear to everyone?

2575
03:02:50,640 --> 03:02:54,680
Voting is due in one week.

2576
03:02:54,680 --> 03:02:57,600
One code link per group. Yeah. Let me

2577
03:02:58,640 --> 03:03:01,600
go to the flip grid and let me make the

2578
03:03:02,640 --> 03:03:03,840
folder available.

2579
03:03:03,840 --> 03:03:06,640
You can we record solo?

2580
03:03:06,640 --> 03:03:08,960
I mean, without being part of Zoom
with others?

2581
03:03:08,960 --> 03:03:10,040
Yes, you can do that.

2582
03:03:10,040 --> 03:03:13,960
But it's better to do it in groups
because if you do it solo.

2583
03:03:13,960 --> 03:03:15,000
No feedback, nothing.

2584
03:03:15,000 --> 03:03:17,720
You will not be getting anything.

2585
03:03:19,440 --> 03:03:24,800
So SDLC, you have already done

2586
03:03:26,000 --> 03:03:26,640
All right.

2587
03:03:26,640 --> 03:03:30,800
So it's the exact same thing.

2588
03:03:30,800 --> 03:03:33,120
Let me see if we are for him.

2589
03:03:33,120 --> 03:03:36,160
Okay, maybe we'll see.

2590
03:03:36,160 --> 03:03:51,320
So in this one,

2591
03:03:51,320 --> 03:03:59,720
Java Basics,

2592
03:03:59,720 --> 03:04:05,160
we make it to really.

2593
03:04:05,160 --> 03:04:10,280
And these are topics are also written
here.

2594
03:04:10,280 --> 03:04:12,280
Maximum lantheus transmitter. Same thing.

2595
03:04:13,200 --> 03:04:17,760
So start date today is 19th of August.

2596
03:04:18,160 --> 03:04:23,880
We change to the

2597
03:04:28,640 --> 03:04:31,880
in the end it is

2598
03:04:31,880 --> 03:04:35,400
let me get in the let's
let me give me one extra day there.

2599
03:04:35,400 --> 03:04:40,080
Say the deadline is Monday but
because we are ending the class early so

2600
03:04:41,160 --> 03:04:41,720
I hope

2601
03:04:41,720 --> 03:04:44,760
most of you will do it right now
because it's very hard

2602
03:04:44,760 --> 03:05:04,400
to make sure that everyone is present
in the group group.

2603
03:05:04,400 --> 03:05:08,120
Okay. Can you guys

2604
03:05:08,120 --> 03:05:11,440
make sure you can access this link?

2605
03:05:11,440 --> 03:05:19,160
Let me copy and paste it into course
announcement.

2606
03:05:19,160 --> 03:05:23,160
Please click on this link
from the course announcement and tell me

2607
03:05:23,160 --> 03:05:26,280
if you can see and uploaded
all options are looking.

2608
03:05:26,640 --> 03:05:28,640
Can we add people to our group?
Yeah. Yeah.

2609
03:05:29,520 --> 03:05:35,920
You can rearrange the groups
if you want, but

2610
03:05:37,000 --> 03:05:39,000
we have to sign up to the flip.

2611
03:05:39,000 --> 03:05:43,560
You should
already have signed up for this.

2612
03:05:43,560 --> 03:05:49,960
How many of you are seeing this flip grade
for the first time? Oh,

2613
03:05:51,560 --> 03:05:53,760
okay. Wow.

2614
03:05:55,080 --> 03:05:59,160
So all of you, those who are seeing this
for the first time,

2615
03:05:59,160 --> 03:06:03,120
you have already missed one project
actually from your SDLC

2616
03:06:03,120 --> 03:06:07,200
classes.

2617
03:06:07,200 --> 03:06:15,560
You have already missed.

2618
03:06:15,560 --> 03:06:19,200
So please sign up for this
and you have to record the videos

2619
03:06:19,200 --> 03:06:22,320
this time.

2620
03:06:22,320 --> 03:06:23,880
Someone else in your group did it.

2621
03:06:24,960 --> 03:06:27,680
Okay, let me see

2622
03:06:31,080 --> 03:06:31,480
all the

2623
03:06:31,480 --> 03:06:37,320
SDLC.

2624
03:06:37,320 --> 03:06:40,000
The way it's been registered.

2625
03:06:40,000 --> 03:06:42,480
They have been in. Then

2626
03:06:44,800 --> 03:06:47,720
the PAN, we had
this main shed and we're like this.

2627
03:06:47,840 --> 03:06:50,840
You will run and

2628
03:06:51,120 --> 03:06:52,680
and guys, please don't do this.

2629
03:06:52,680 --> 03:06:53,880
Look here.

2630
03:06:53,880 --> 03:06:56,520
I can clearly see that

2631
03:06:56,520 --> 03:07:00,240
the reason
the screen in your glasses, right?

2632
03:07:00,320 --> 03:07:01,560
This is visible.

2633
03:07:01,560 --> 03:07:02,440
If you

2634
03:07:03,040 --> 03:07:06,200
if you guys are reading
from somewhere, it's very bad.

2635
03:07:06,920 --> 03:07:09,600
The purpose of this video is to be able

2636
03:07:09,600 --> 03:07:12,600
to understand and be able
to explain something to others.

2637
03:07:12,840 --> 03:07:15,480
When you will be sitting
in the interviews,

2638
03:07:15,480 --> 03:07:19,640
they will not be allowing you
to look at notes or Google or something.

2639
03:07:20,280 --> 03:07:23,240
So if you really want to do it,
do not put your glasses on.

2640
03:07:25,040 --> 03:07:28,080
And I'm not saying she is cheating,
I'm just giving you an example, so

2641
03:07:28,440 --> 03:07:29,200
don't worry about

2642
03:07:30,680 --> 03:07:33,440
her. You are

2643
03:07:33,560 --> 03:07:36,600
look at the issue.

2644
03:07:36,600 --> 03:07:39,000
You guys look a totally different thing
in real

2645
03:07:39,000 --> 03:07:39,800
life.

2646
03:07:42,080 --> 03:07:44,360
Must be very,

2647
03:07:44,360 --> 03:07:47,160
very hard to believe in doing the project
to solve

2648
03:07:49,880 --> 03:07:51,160
doing

2649
03:07:54,160 --> 03:07:54,720
this.

2650
03:07:59,280 --> 03:08:00,400
So reading from

2651
03:08:00,400 --> 03:08:04,240
somebody is not good.

2652
03:08:04,240 --> 03:08:04,640
Ah yes.

2653
03:08:04,640 --> 03:08:06,680
I will share the document

2654
03:08:08,600 --> 03:08:10,080
at least.

2655
03:08:10,160 --> 03:08:10,960
So we

2656
03:08:12,280 --> 03:08:14,840
so we for our

2657
03:08:16,480 --> 03:08:20,320
people, people with

2658
03:08:20,880 --> 03:08:22,680
we will

2659
03:08:23,400 --> 03:08:26,920
like to see reading

2660
03:08:26,920 --> 03:08:30,480
from some very not good

2661
03:08:33,600 --> 03:08:35,640
recording early.

2662
03:08:35,640 --> 03:08:38,560
So you know

2663
03:08:39,080 --> 03:08:41,760
and I'm in terrible
for maximizing the value of the product

2664
03:08:41,840 --> 03:08:44,800
we brought in from work obviously from all

2665
03:08:46,440 --> 03:08:48,600
other activities

2666
03:08:48,600 --> 03:08:51,560
by reducing human errors, saving time

2667
03:08:51,560 --> 03:08:54,240
and improve internet coverage and

2668
03:08:56,160 --> 03:08:58,040
everything that we can do on anytime

2669
03:08:58,040 --> 03:09:01,240
on today in the fashion,
do one more thing.

2670
03:09:03,280 --> 03:09:04,880
Please introduce yourself as well.

2671
03:09:04,880 --> 03:09:07,840
Tell your name
so that we know because in pictures

2672
03:09:07,840 --> 03:09:11,160
you guys look like from your
Hollywood or Bollywood. But

2673
03:09:12,560 --> 03:09:14,520
I don't know in the

2674
03:09:14,520 --> 03:09:17,760
you guys look like I'm just kidding.

2675
03:09:18,280 --> 03:09:21,640
It's always good introduce yourself name

2676
03:09:22,080 --> 03:09:24,160
and the group number

2677
03:09:25,080 --> 03:09:27,880
and then please start explaining.

2678
03:09:27,880 --> 03:09:30,520
Otherwise it's partners.

2679
03:09:30,520 --> 03:09:33,760
We have very hard time. So

2680
03:09:35,080 --> 03:09:39,080
having reviewed regional,

2681
03:09:39,080 --> 03:09:42,240
we know the whole

2682
03:09:43,360 --> 03:09:46,560
the people will remember you

2683
03:09:49,480 --> 03:09:52,080
and I think percentages are incredible.

2684
03:09:52,400 --> 03:09:54,720
Remember? Madina, what are you doing here?

2685
03:09:55,480 --> 03:09:58,800
Look,
I just trying to enjoy the same look.

2686
03:09:58,840 --> 03:10:04,280
Remember, we are going

2687
03:10:04,520 --> 03:10:07,960
get this for the project

2688
03:10:07,960 --> 03:10:11,320
right?

2689
03:10:11,320 --> 03:10:16,280
And we.

2690
03:10:16,280 --> 03:10:17,880
Okay, it's good.

2691
03:10:17,880 --> 03:10:19,800
Just make sure that eye contact is good.

2692
03:10:19,800 --> 03:10:22,200
You are not reading from somewhere.

2693
03:10:22,200 --> 03:10:27,080
Introduce yourself and please do not read
from notes or something.

2694
03:10:27,880 --> 03:10:30,400
It's for your practice

2695
03:10:30,400 --> 03:10:32,760
when you will be sitting
in front of the interviews.

2696
03:10:32,760 --> 03:10:34,320
They will be asking you questions

2697
03:10:34,320 --> 03:10:38,040
and you will be explaining things
in exactly the same way.

2698
03:10:38,680 --> 03:10:41,400
So it's a practice for those sessions

2699
03:10:41,840 --> 03:10:46,360
I was looking for fish.

2700
03:10:46,360 --> 03:10:49,240
Okay, let me share that document with you

2701
03:11:09,960 --> 03:11:12,520
too. Okay.

2702
03:11:14,120 --> 03:11:16,960
I have shared the document.

2703
03:11:16,960 --> 03:11:19,160
It contains the coding questions

2704
03:11:19,400 --> 03:11:22,160
as well as the topics

2705
03:11:22,160 --> 03:11:24,480
for which you have to record the video.

2706
03:11:25,800 --> 03:11:27,680
If something is not clear,

2707
03:11:27,680 --> 03:11:30,240
please ask these videos about Photoshop

2708
03:11:42,600 --> 03:11:44,520
coding for the coding.

2709
03:11:44,520 --> 03:11:47,560
The deadline is next week for the videos.

2710
03:11:47,560 --> 03:11:48,880
It's Monday

2711
03:11:51,520 --> 03:11:54,880
and I will be watching
all of your videos one by one

2712
03:11:55,560 --> 03:11:57,600
and then I will give you a collective
feedback.

2713
03:11:58,080 --> 03:12:00,480
So please do not read from somewhere.

2714
03:12:00,720 --> 03:12:02,040
I want you to.

2715
03:12:02,040 --> 03:12:05,880
You can look at the topic
before you record the video,

2716
03:12:05,880 --> 03:12:09,520
go through it, collect the examples,
but then once

2717
03:12:09,680 --> 03:12:12,600
the recording starts,
I want you to explain it

2718
03:12:14,320 --> 03:12:15,760
by heart.

2719
03:12:15,760 --> 03:12:27,560
No, not from normal
for reading from somewhere.

2720
03:12:27,560 --> 03:12:30,280
Is there anything that

2721
03:12:30,280 --> 03:12:36,600
is not clear about the project?

2722
03:12:36,600 --> 03:12:38,160
Make sure no glasses.

2723
03:12:38,160 --> 03:12:41,320
I can still figure it out from your eyes.

2724
03:12:41,320 --> 03:12:43,960
If your eyes are moving like this.

2725
03:12:43,960 --> 03:12:44,520
The reading

2726
03:12:46,560 --> 03:12:46,880
clear

2727
03:12:46,880 --> 03:12:49,400
and you are reading line
by line, it's out of here.

2728
03:12:49,920 --> 03:12:52,080
The more we move them around here
and there.

2729
03:12:52,080 --> 03:13:05,760
Look, sometimes here and there.

2730
03:13:05,760 --> 03:13:09,480
Yes, this is going to work.

2731
03:13:09,480 --> 03:13:10,280
Very three groups.

2732
03:13:10,280 --> 03:13:13,160
Everyone left from the groups.

2733
03:13:13,320 --> 03:13:16,520
If your group members are left,
you can create new ones.

2734
03:13:16,520 --> 03:13:18,480
You can join other groups.

2735
03:13:18,480 --> 03:13:28,600
If there is a space available.

2736
03:13:28,600 --> 03:13:29,760
Okay.

2737
03:13:29,760 --> 03:13:33,160
So that's it for today to the areas

2738
03:13:33,160 --> 03:13:36,560
was the last topic in the basics from

2739
03:13:38,080 --> 03:13:39,720
tomorrow

2740
03:13:41,000 --> 03:13:43,080
we will be starting the object

2741
03:13:43,080 --> 03:14:28,560
oriented programing.

2742
03:14:28,560 --> 03:14:32,520
This one is a good experiment
is to share it

2743
03:14:32,520 --> 03:14:37,200
with you.

2744
03:14:37,200 --> 03:14:39,920
Once we have talked
about the basics of Java, it's

2745
03:14:50,720 --> 03:14:53,400
so great to watch these videos

2746
03:14:53,400 --> 03:14:54,360
before tomorrow.

2747
03:14:54,360 --> 03:14:56,880
So actually it's a lot of work to.

2748
03:14:56,880 --> 03:14:59,400
Do you have to record the videos

2749
03:15:00,480 --> 03:15:02,440
on DEADLINE is Monday

2750
03:15:02,720 --> 03:15:06,120
and you have to watch these videos

2751
03:15:06,720 --> 03:15:09,760
before tomorrow.

2752
03:15:09,760 --> 03:15:14,960
Question Are we supposed to do Zoom and
then record and submit it to distributed?

2753
03:15:15,240 --> 03:15:19,440
You can record individually as well
and then share your videos

2754
03:15:19,600 --> 03:15:23,280
with one group member
or can combine that and then upload.

2755
03:15:23,280 --> 03:15:24,600
But it's going to take a lot of time.

2756
03:15:24,600 --> 03:15:29,480
So I think Zoom is better.

2757
03:15:29,480 --> 03:15:48,120
They are due next week.

2758
03:15:48,120 --> 03:15:48,960
Okay.

2759
03:15:48,960 --> 03:15:52,200
If there are no questions,
we can call you today and you can start

2760
03:15:52,200 --> 03:16:02,440
working on the videos videos.

2761
03:16:02,440 --> 03:16:04,920
What if there are more members then topics

2762
03:16:05,160 --> 03:16:08,680
you can repeat to members
and go over the same topic.

2763
03:16:09,000 --> 03:16:10,560
Also, what about boys?

2764
03:16:10,560 --> 03:16:14,320
All took our direct message you to ask
What was the answer?

2765
03:16:14,360 --> 03:16:17,600
If you go and check,
if you open that quiz, you should be able

2766
03:16:17,600 --> 03:16:22,080
to see the answers I need to
someone about what would be the agenda

2767
03:16:23,960 --> 03:16:25,640
once the deadline is passed.

2768
03:16:25,640 --> 03:16:28,240
You can all see the answers

2769
03:16:28,240 --> 03:16:37,320
of your week, which quizzes?

2770
03:16:37,320 --> 03:16:42,480
I saw the answer but not the exact answer
regarding order of operations is

2771
03:16:42,720 --> 03:16:47,120
you can also take that order
and execute that code in your intelligent.

2772
03:16:47,760 --> 03:16:51,840
The question was first,
you have to figure out the calculations

2773
03:16:51,920 --> 03:16:56,440
you remember the presidents multiplication
and division modulus.

2774
03:16:56,440 --> 03:17:08,640
They are performed first from left to
right and then addition and subtraction.

2775
03:17:08,640 --> 03:17:11,120
How are we going to divide to the groups?

2776
03:17:11,960 --> 03:17:14,640
You are not already in a group

2777
03:17:19,680 --> 03:17:22,160
B is coming from the line above it,

2778
03:17:23,400 --> 03:17:24,480
so you calculate aid.

2779
03:17:24,480 --> 03:17:27,400
Then you calculate B,
and then you perform this A left and B,

2780
03:17:28,560 --> 03:17:29,680
Okay.

2781
03:17:29,920 --> 03:17:33,440
Is there any space available in any group
or can

2782
03:17:33,800 --> 03:17:36,440
anyone who to take
you are able in his or her

2783
03:17:36,440 --> 03:17:44,760
group, those who do not have group

2784
03:17:44,760 --> 03:17:48,240
you and groups,
you can also create new groups

2785
03:17:49,280 --> 03:17:51,720
your post in this index student gender

2786
03:17:51,720 --> 03:17:54,240
and if you do not have any group,
you can create

2787
03:17:54,240 --> 03:17:55,160
a new one

2788
03:18:04,040 --> 03:18:06,480
group that is hiring.

2789
03:18:06,480 --> 03:18:08,880
Can we have direct link to record video?

2790
03:18:09,120 --> 03:18:13,920
I think in this in flip grade you can
directly, you can also directly record,

2791
03:18:14,640 --> 03:18:18,800
but it's good if you do it in group,
you will be able to get feedback.

2792
03:18:18,800 --> 03:18:23,040
You will get this confidence
that you can speak in front of others.

2793
03:18:23,440 --> 03:18:28,160
Solo is not good because remember,
we are preparing you for interviews.

2794
03:18:28,400 --> 03:18:31,200
Interviewers,
they are usually 3 to 5 persons

2795
03:18:31,440 --> 03:18:33,600
and you have to explain things
in front of them.

2796
03:18:34,120 --> 03:18:34,880
So you do it.

2797
03:18:34,880 --> 03:18:37,640
If you do it in groups,
it's better not go solo.

2798
03:18:37,640 --> 03:18:40,040
I do not recommend it.

2799
03:18:40,680 --> 03:18:42,360
How I join the group then.

2800
03:18:42,360 --> 03:18:44,800
Melissa
you have to pay the membership fee.

2801
03:18:44,840 --> 03:18:46,600
It's under dollars.

2802
03:18:46,600 --> 03:18:59,160
I will send you the account and
then you can join the group number ten.

2803
03:18:59,160 --> 03:19:04,240
Can anyone take me please
sign Harakat in his or her group?

2804
03:19:04,240 --> 03:19:06,280
You guys can post in this
index donor channel

2805
03:19:06,840 --> 03:19:08,840
and those who have some space
you can take.

2806
03:19:09,680 --> 03:19:11,040
That's a lot of money. Sorry.

2807
03:19:11,040 --> 03:19:12,360
How to get the flip grid?

2808
03:19:12,360 --> 03:19:17,200
I have shared
the link in course announcement.

2809
03:19:17,200 --> 03:19:19,160
What is the deadline for reporting?

2810
03:19:19,160 --> 03:19:20,400
Monday?

2811
03:19:20,600 --> 03:19:29,280
Monday.

2812
03:19:29,280 --> 03:19:32,720
Okay everyone,
please start working on your projects

2813
03:19:32,720 --> 03:19:38,640
and I will see you tomorrow.

2814
03:19:38,640 --> 03:19:41,760
Regarding Monday. Regarding Monday,

2815
03:19:42,920 --> 03:19:45,640
according part next week.

2816
03:19:45,640 --> 03:19:47,840
All right, everybody. Bye bye.

2817
03:19:47,960 --> 03:19:48,680
Take care.

2818
03:19:48,680 --> 03:19:53,960
And I will see you tomorrow.

2819
03:19:53,960 --> 03:19:54,920
Thank you.
