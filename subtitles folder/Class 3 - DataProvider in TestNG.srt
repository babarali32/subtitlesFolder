1
00:00:03,800 --> 00:00:04,880
Well, let me start that

2
00:00:04,880 --> 00:00:08,840
morning
and I'm going to share my screen now.

3
00:00:09,760 --> 00:00:19,640
Physically,
nobody's been able to see my screen.

4
00:00:25,080 --> 00:00:26,040
Can you see my screen now?

5
00:00:26,040 --> 00:00:29,200
If you want.

6
00:00:33,400 --> 00:00:35,640
But still, in these two glasses case,

7
00:00:35,960 --> 00:00:39,480
the so far where we did best, Angie.

8
00:00:39,760 --> 00:00:40,160
Right.

9
00:00:40,160 --> 00:00:42,520
It started from the request annotation,

10
00:00:43,680 --> 00:00:45,480
correct? Correct.

11
00:00:45,480 --> 00:00:47,960
Soon we will be celebrating the success.

12
00:00:47,960 --> 00:00:52,440
So soon, maybe in January
we will start this grand celebration.

13
00:00:52,960 --> 00:00:56,520
I want every one of you to join.

14
00:00:57,400 --> 00:01:00,240
So let me create the perfect package

15
00:01:00,240 --> 00:01:02,040
for our third class

16
00:01:29,000 --> 00:01:58,280
for like.

17
00:01:58,280 --> 00:01:59,200
All right.

18
00:01:59,200 --> 00:02:09,720
So let me first create a new find
from here.

19
00:02:12,040 --> 00:02:13,440
So in the last class, guys,

20
00:02:13,440 --> 00:02:39,840
what was the first topic of

21
00:03:17,520 --> 00:03:24,440
it is looking all.

22
00:03:24,440 --> 00:03:26,760
All right.

23
00:03:27,920 --> 00:03:30,760
So the is in the last class
we discussed from

24
00:03:31,440 --> 00:03:35,160
we started our discussion
from hard session right in our test. And

25
00:03:36,640 --> 00:03:37,080
so we are

26
00:03:37,080 --> 00:03:40,200
going to do a quick recap
and then we will switch on for new topics.

27
00:03:40,200 --> 00:03:45,880
So guys, tell me what is hard assertion?

28
00:03:45,880 --> 00:03:47,880
Well,
let's let's talk about what is a session

29
00:03:57,600 --> 00:04:01,200
like to validate

30
00:04:03,960 --> 00:04:06,840
our application.

31
00:04:07,200 --> 00:04:08,800
We need

32
00:04:09,520 --> 00:04:11,960
a session all the way to date

33
00:04:16,400 --> 00:04:19,080
the fields of

34
00:04:19,320 --> 00:04:20,480
application.

35
00:04:20,480 --> 00:04:24,200
We need a session like

36
00:04:25,680 --> 00:04:29,360
so if we talk about a session, right,
there are two types of a session.

37
00:04:29,360 --> 00:04:30,800
We have discussed

38
00:04:32,040 --> 00:04:33,400
two types of a session.

39
00:04:33,400 --> 00:04:35,160
We are about out of it.

40
00:04:35,160 --> 00:04:38,360
About the first one is

41
00:04:38,400 --> 00:04:41,520
the first one we have is hard a session

42
00:04:43,320 --> 00:04:44,680
within that first category.

43
00:04:44,680 --> 00:04:47,680
The hardest session.

44
00:04:47,680 --> 00:04:51,040
All right. When

45
00:04:53,320 --> 00:04:54,360
it comes

46
00:04:55,160 --> 00:04:57,880
or when error exists,

47
00:04:59,400 --> 00:05:01,080
it stops

48
00:05:02,680 --> 00:05:05,440
execution, correct?

49
00:05:05,640 --> 00:05:10,640
That's why we call it part of session.

50
00:05:10,640 --> 00:05:13,680
The another one we have is stock.

51
00:05:13,680 --> 00:05:17,480
The session.

52
00:05:17,480 --> 00:05:19,560
Now, what is what is the session can be

53
00:05:43,600 --> 00:05:44,040
correct.

54
00:05:44,040 --> 00:05:46,760
It allows us

55
00:05:46,760 --> 00:05:50,640
to execute our code are complete code

56
00:05:52,680 --> 00:05:55,000
and it captures

57
00:05:59,840 --> 00:06:03,280
all the errors.

58
00:06:03,280 --> 00:06:06,080
In the end, it gives us

59
00:06:09,120 --> 00:06:13,320
one consolidated output like

60
00:06:16,760 --> 00:06:19,080
it gives us consolidated output.

61
00:06:19,080 --> 00:06:22,760
Now, in order to get this
consolidated output in the end,

62
00:06:23,160 --> 00:06:32,800
which method we need to call right,
we need to file.

63
00:06:33,040 --> 00:06:36,240
So we use

64
00:06:36,240 --> 00:06:38,320
a start all method

65
00:06:40,280 --> 00:06:41,480
to get

66
00:06:43,520 --> 00:06:47,120
consolidated or

67
00:06:48,960 --> 00:06:51,560
collective.

68
00:06:51,560 --> 00:06:52,200
That is

69
00:06:53,160 --> 00:06:59,160
correct.

70
00:06:59,160 --> 00:07:05,640
Is this case are not like

71
00:07:06,560 --> 00:07:10,040
then what was the next thing we discussed

72
00:07:10,120 --> 00:07:12,760
after the session

73
00:07:21,400 --> 00:07:22,440
before that also.

74
00:07:22,440 --> 00:07:24,240
Okay, fine. All right.

75
00:07:24,240 --> 00:07:28,080
So before that, also we discussed
a couple of things, but let's talk about

76
00:07:29,200 --> 00:07:32,280
yes, we discussed about

77
00:07:33,240 --> 00:07:37,920
depends on attribute.

78
00:07:37,920 --> 00:07:41,760
What is this depends on attributes, race

79
00:07:48,440 --> 00:07:54,000
allows are.

80
00:07:54,000 --> 00:07:57,240
All right. Yes.

81
00:07:57,240 --> 00:08:01,200
Well, my one test case is relying
on another one.

82
00:08:02,040 --> 00:08:04,320
For example, my logging test case,

83
00:08:04,520 --> 00:08:08,440
my log in test case,
I relying on launch browser test case

84
00:08:09,120 --> 00:08:13,240
or my verification test case
relying on logging test case.

85
00:08:13,640 --> 00:08:18,000
In that case, what I have to do is
I have to use one attribute

86
00:08:18,200 --> 00:08:20,840
go depends on attribute

87
00:08:21,040 --> 00:08:23,760
and when I write this depends on attribute

88
00:08:24,120 --> 00:08:27,760
in my method,
which is rely on another method

89
00:08:28,800 --> 00:08:29,880
carefully guys,

90
00:08:29,880 --> 00:08:34,320
when I have to see
when I have to check one method

91
00:08:34,320 --> 00:08:37,560
which is relying on another method
I have to write.

92
00:08:37,560 --> 00:08:41,640
This depends on attribute
and the method name, which method

93
00:08:41,640 --> 00:08:45,720
being the method
on which my current method is relied.

94
00:08:46,400 --> 00:08:46,960
Correct.

95
00:08:47,040 --> 00:08:49,200
So this depends on attribute.

96
00:08:49,200 --> 00:08:51,760
For example, if I'm using for validation.

97
00:08:52,040 --> 00:08:54,800
So inside validation
I will write a direct.

98
00:08:54,800 --> 00:08:58,680
This depends on attribute
is equals to my log in method.

99
00:08:59,240 --> 00:09:01,520
This is just an example I'm giving, right?

100
00:09:01,520 --> 00:09:05,040
So what it does, it
basically executes force.

101
00:09:05,200 --> 00:09:08,840
The method on which you are relying
and then executes

102
00:09:08,880 --> 00:09:13,280
your actual method.

103
00:09:13,280 --> 00:09:13,880
Okay,

104
00:09:14,880 --> 00:09:19,120
let me show you this also,

105
00:09:19,120 --> 00:09:23,920
my verified dashboard page
method is relying on log in method.

106
00:09:24,360 --> 00:09:27,440
So when my this verified dashboard page

107
00:09:27,600 --> 00:09:33,000
test is relying on another test,
I am writing depends on methods

108
00:09:33,360 --> 00:09:36,480
and in this attribute
depends on methods attribute.

109
00:09:36,480 --> 00:09:39,680
I'm going to mention the method, the test

110
00:09:39,760 --> 00:09:42,560
on which my current test is relying.

111
00:09:42,840 --> 00:09:44,840
So my current test is relying on log in.

112
00:09:45,040 --> 00:09:49,000
So I am writing
this based on method is equals to log in

113
00:09:49,160 --> 00:09:54,000
and then it will execute log in this post
and then verify dashboard.

114
00:09:54,040 --> 00:09:54,600
Basically

115
00:10:00,720 --> 00:10:01,240
clear

116
00:10:22,880 --> 00:10:24,480
on which

117
00:10:26,720 --> 00:10:30,440
test the line

118
00:10:31,600 --> 00:10:33,720
of or

119
00:10:33,920 --> 00:10:40,360
depending.

120
00:10:40,360 --> 00:10:42,640
Then what was the next thing I

121
00:10:51,880 --> 00:10:52,160
yeah.

122
00:10:52,160 --> 00:10:55,680
Elizabeth Correct. Correct.

123
00:10:55,680 --> 00:10:58,320
If it is not allowing us
to execute the previous one, how

124
00:10:58,320 --> 00:11:00,640
it can allow us to execute the next one.

125
00:11:02,480 --> 00:11:04,400
No, no priority

126
00:11:04,400 --> 00:11:07,200
priority was the topic of force station.

127
00:11:07,200 --> 00:11:07,960
Right.

128
00:11:08,080 --> 00:11:12,000
I'm talking about the second class topics

129
00:11:14,200 --> 00:11:17,960
then just in assembly.

130
00:11:18,720 --> 00:11:19,480
Right.

131
00:11:20,640 --> 00:11:24,240
Configurations,
different types of configurations,

132
00:11:24,880 --> 00:11:29,280
how we can create this test
and do not similar using intelligent idea.

133
00:11:29,640 --> 00:11:30,440
Right.

134
00:11:30,680 --> 00:11:34,400
We have seen all of these things
in our previous class

135
00:11:34,920 --> 00:11:38,480
setting how we can create this test
and do not like symbol.

136
00:11:39,000 --> 00:11:42,600
I already told you we all knew right now

137
00:11:42,600 --> 00:11:45,960
what we have inside this test
and do not exemplify

138
00:11:47,040 --> 00:11:50,120
the question is what we have
inside this particular fight.

139
00:11:50,120 --> 00:11:55,000
So remember guy is this test in the DART
segment is your configuration file.

140
00:11:55,200 --> 00:11:57,640
You can see
this is the engine of your vehicle.

141
00:11:57,640 --> 00:12:00,840
This is the big bone of your body right?

142
00:12:00,840 --> 00:12:03,120
This is the backbone of your test engine.

143
00:12:03,480 --> 00:12:07,520
So if you are talking about test
and you don't take middle plane,

144
00:12:07,600 --> 00:12:10,760
you need to make sure that whatever
the customization

145
00:12:10,760 --> 00:12:13,920
and configuration selection be selection,

146
00:12:13,920 --> 00:12:19,080
inclusion, exclusion you want to make,
you will make all of this

147
00:12:19,080 --> 00:12:22,760
customization inside your one class
that is your test

148
00:12:22,760 --> 00:12:27,360
and don't accept.

149
00:12:27,360 --> 00:12:30,720
For example, if I have 100 classes

150
00:12:31,440 --> 00:12:35,880
and I want to execute 50 classes
from five different packages,

151
00:12:35,880 --> 00:12:39,680
I don't need to call every single package
and then go ahead and right

152
00:12:39,680 --> 00:12:41,040
click and execute.

153
00:12:41,040 --> 00:12:44,040
No, I have this test
and do not examine file.

154
00:12:44,360 --> 00:12:48,040
I will mention all of those classes
which I want to execute

155
00:12:48,360 --> 00:12:51,480
irrespective of the package
it is coming from.

156
00:12:51,960 --> 00:12:52,880
All right.

157
00:12:53,320 --> 00:12:56,320
We can mention these things inside
one class.

158
00:12:56,320 --> 00:13:00,080
We can even include
an exclude their methods test

159
00:13:00,160 --> 00:13:02,760
which are available
inside this particular class.

160
00:13:03,640 --> 00:13:06,120
So it is a high level of customization.

161
00:13:06,440 --> 00:13:09,560
If we go straight down inside this,

162
00:13:09,800 --> 00:13:15,240
then we can even include exclude classes,
packages, methods and every single thing

163
00:13:15,240 --> 00:13:19,520
we can exclude or include
according to our requirement grade test.

164
00:13:19,560 --> 00:13:24,120
And you don't extend this by configuration
file allows us to

165
00:13:24,120 --> 00:13:32,520
do this clear.

166
00:13:32,520 --> 00:13:34,080
It allows us

167
00:13:35,960 --> 00:13:38,840
to execute all of our

168
00:13:42,000 --> 00:13:44,080
test kits. This

169
00:13:45,360 --> 00:13:47,720
according to our

170
00:13:47,720 --> 00:13:49,400
requirement

171
00:13:51,680 --> 00:13:55,400
in this file,

172
00:13:55,400 --> 00:13:58,600
we can include exclude

173
00:14:00,720 --> 00:14:01,600
methods,

174
00:14:02,320 --> 00:14:03,760
classes,

175
00:14:04,440 --> 00:14:10,240
packages, packages

176
00:14:17,760 --> 00:14:22,200
during execution, correct.

177
00:14:22,200 --> 00:14:25,200
Now, if you remember,
we have discussed this how

178
00:14:25,200 --> 00:14:27,640
we can create this ten or symbol.

179
00:14:28,720 --> 00:14:32,400
So to do this,
what we have to do is we have to first

180
00:14:32,560 --> 00:14:37,240
rename our best and you submit file
and then we have to create another test.

181
00:14:37,240 --> 00:14:41,120
And otherwise, what would happen
if you already have Windows ten?

182
00:14:41,120 --> 00:14:46,240
Do not file in your project
and if you try to create another one,

183
00:14:46,520 --> 00:14:51,040
then in this case what would happen is it
will override your test and you don't

184
00:14:52,280 --> 00:14:53,880
see you guys know better than me.

185
00:14:53,880 --> 00:14:56,480
Now, you guys ready to
write it? All right.

186
00:14:57,240 --> 00:14:57,560
Getting

187
00:15:02,040 --> 00:15:02,600
baked.

188
00:15:02,600 --> 00:15:04,520
Great. Good to see you guys.

189
00:15:04,520 --> 00:15:06,600
The way you're responding. Great.

190
00:15:06,600 --> 00:15:10,640
So now after this,
when we have multiple files,

191
00:15:10,640 --> 00:15:13,920
So what is the need to have multiple test
and do not single file?

192
00:15:13,920 --> 00:15:16,080
The question arises here this

193
00:15:16,080 --> 00:15:19,160
if I have one test and duratex
and one find it should be no,

194
00:15:19,160 --> 00:15:22,440
then why do we need multiple configuration

195
00:15:22,440 --> 00:15:25,480
file for one project

196
00:15:30,880 --> 00:15:32,640
then it sure

197
00:15:40,160 --> 00:15:42,640
basically remember one thing.

198
00:15:42,640 --> 00:15:46,920
The scenario here is
we have so many cases,

199
00:15:46,920 --> 00:15:50,280
so many requirements, so many scenarios

200
00:15:50,280 --> 00:15:53,640
and conditions in one project,

201
00:15:53,640 --> 00:15:55,120
obviously for execution,

202
00:15:55,120 --> 00:16:00,440
for example, sometimes I need to execute
only those test cases,

203
00:16:00,800 --> 00:16:02,840
which is a part of smoke testing.

204
00:16:04,560 --> 00:16:06,800
Sometimes I need to execute

205
00:16:06,800 --> 00:16:11,200
only both those test cases
which are a part of regression test.

206
00:16:12,520 --> 00:16:13,800
Sometimes I have to

207
00:16:13,800 --> 00:16:16,240
test called acceptance testing.

208
00:16:16,800 --> 00:16:19,680
Sometimes I have to test say sanity test.

209
00:16:19,920 --> 00:16:22,040
Or it could be any of them. The right

210
00:16:23,160 --> 00:16:26,640
smoke testing, retesting, sanity testing,
regression testing.

211
00:16:26,640 --> 00:16:32,040
Most of the times we do just to the first
smoke and the second is integration.

212
00:16:32,360 --> 00:16:33,200
All right.

213
00:16:33,360 --> 00:16:37,000
Now I have 1000 test cases, right?

214
00:16:37,080 --> 00:16:41,600
I have 1000 test cases and I want
to execute all of them in a single shot.

215
00:16:41,960 --> 00:16:43,720
Fine, I can do this.

216
00:16:43,720 --> 00:16:47,520
But if I have 1000 test out of this,

217
00:16:47,520 --> 00:16:52,320
I need to execute only those test cases
which are belong to particular category.

218
00:16:52,680 --> 00:16:58,400
So for this reason it is a best idea
to create one separate configuration file.

219
00:16:58,400 --> 00:17:02,520
I did this test and do not accept 1.38
to 1 configuration file.

220
00:17:02,880 --> 00:17:07,040
What this condition did,
which condition that condition is

221
00:17:13,680 --> 00:17:14,920
grouping.

222
00:17:16,280 --> 00:17:17,280
All right.

223
00:17:17,840 --> 00:17:22,080
We can create one group of test cases
and we will create.

224
00:17:22,200 --> 00:17:26,000
We can create one configuration by now.

225
00:17:26,160 --> 00:17:29,400
This particular configuration file,
this particular test

226
00:17:29,400 --> 00:17:32,840
and do not accept
will find will always exist.

227
00:17:32,840 --> 00:17:41,280
Your test cases
belong to this specific category.

228
00:17:41,280 --> 00:17:44,040
Dinara This is the next point
I'm just talking about.

229
00:17:44,040 --> 00:17:48,240
One party of
that is of how we can create smoke dot,

230
00:17:48,280 --> 00:17:52,240
SML integration, dot symbol
or any other detect symbol.

231
00:17:52,680 --> 00:17:54,760
Correct. It's a requirement.

232
00:17:54,760 --> 00:17:56,760
So what grouping does basically

233
00:17:58,920 --> 00:17:59,720
group

234
00:18:00,480 --> 00:18:02,360
allows you

235
00:18:02,560 --> 00:18:04,600
to execute

236
00:18:08,680 --> 00:18:09,720
specific test.

237
00:18:09,720 --> 00:18:10,800
Get this

238
00:18:12,760 --> 00:18:14,800
belongs to

239
00:18:15,080 --> 00:18:17,640
that particular

240
00:18:19,960 --> 00:18:20,800
correct

241
00:18:21,560 --> 00:18:23,440
let's say if you want to execute only

242
00:18:23,440 --> 00:18:26,080
this gives this belong to small category

243
00:18:26,600 --> 00:18:30,760
definitely you can do that similarly
for duration similarly for any other one.

244
00:18:31,200 --> 00:18:32,880
Right. We can do that easily.

245
00:18:34,680 --> 00:18:35,240
Clear.

246
00:18:35,280 --> 00:18:37,320
Make sure when you do this groupings

247
00:18:38,440 --> 00:18:42,960
there is another attribute called
Always Run.

248
00:18:43,800 --> 00:18:46,440
Always run is equal to why?

249
00:18:46,680 --> 00:18:47,520
Why did you do that?

250
00:18:47,520 --> 00:18:52,440
Because we knew one thing
if we don't right

251
00:18:52,440 --> 00:18:55,440
always run is equals to true in our free
condition.

252
00:18:55,440 --> 00:18:58,960
Enforced condition
then my best guess will be thing.

253
00:18:59,160 --> 00:19:00,400
That is for sure,

254
00:19:00,400 --> 00:19:04,200
because my precondition in most condition
is not a part of any group.

255
00:19:05,160 --> 00:19:07,320
Mike That's a part of group.

256
00:19:07,320 --> 00:19:11,880
My precondition and forced
condition is not a part of any group,

257
00:19:12,880 --> 00:19:13,680
correct?

258
00:19:13,680 --> 00:19:16,160
So to do that,
what we have to do is basically

259
00:19:16,560 --> 00:19:22,480
we have to make this precondition
in most condition always, right.

260
00:19:22,600 --> 00:19:27,160
So to do that, we have to use one
attribute called always run is equals to

261
00:19:28,320 --> 00:19:28,880
connect.

262
00:19:29,160 --> 00:19:31,080
And this is

263
00:19:41,760 --> 00:19:44,960
superb.

264
00:19:44,960 --> 00:19:45,640
All right.

265
00:19:45,640 --> 00:19:50,040
So these are the things we discussed
in our last class, Correct.

266
00:19:50,880 --> 00:19:59,160
Another thing, image label report.

267
00:19:59,160 --> 00:20:01,320
I hope many of you guys
have found this one, right?

268
00:20:02,760 --> 00:20:07,480
This video.

269
00:20:07,480 --> 00:20:07,840
Okay.

270
00:20:09,080 --> 00:20:11,400
So what this image label report

271
00:20:11,400 --> 00:20:15,360
does, basically,
we need one artifact, right?

272
00:20:15,640 --> 00:20:20,440
And to show this artifact,
we need one report based and allows us

273
00:20:20,440 --> 00:20:25,760
to create one beautiful photo
deep in permit three dot issue report.

274
00:20:26,200 --> 00:20:28,640
Right. This is indelible report.

275
00:20:28,640 --> 00:20:33,760
Don't ask me
how we can add this report in our project.

276
00:20:33,760 --> 00:20:40,200
So we had we have to add one listener's.

277
00:20:40,200 --> 00:20:42,920
No, you don't have to do this
for your project.

278
00:20:43,480 --> 00:20:52,440
Eugene.

279
00:20:52,440 --> 00:20:54,440
This is for your project, right?

280
00:20:55,360 --> 00:21:02,400
So you need this image label report.

281
00:21:02,400 --> 00:21:06,600
This then allows us to generate

282
00:21:08,880 --> 00:21:11,520
a report of execution.

283
00:21:12,640 --> 00:21:15,600
Having the extension

284
00:21:16,440 --> 00:21:19,560
dart, HDMI and

285
00:21:20,920 --> 00:21:23,880
then explains

286
00:21:25,360 --> 00:21:28,720
our details or institution

287
00:21:31,560 --> 00:21:40,840
right.

288
00:21:40,840 --> 00:21:43,320
All these movements in an

289
00:21:55,120 --> 00:21:57,120
the configuration,
your data is always removed.

290
00:21:57,760 --> 00:21:58,840
All right,

291
00:21:59,320 --> 00:22:03,800
let me show you why it is happening.

292
00:22:03,800 --> 00:22:06,960
If you click on Run,
if you're going to edit configuration,

293
00:22:08,160 --> 00:22:08,880
you'll see these.

294
00:22:08,880 --> 00:22:10,040
Are there different classes?

295
00:22:10,040 --> 00:22:12,880
Correct. Okay.

296
00:22:13,560 --> 00:22:17,520
Because you're creating a new class
and your cursor is on new class.

297
00:22:18,080 --> 00:22:19,960
Like for this class, right?

298
00:22:19,960 --> 00:22:22,000
Test and your text symbol file.

299
00:22:22,000 --> 00:22:24,600
So here if I check it is available for me.

300
00:22:24,920 --> 00:22:28,120
If I create new class
and my cursor is on the new one,

301
00:22:28,120 --> 00:22:32,080
then definitely it will be updated.

302
00:22:32,080 --> 00:22:36,080
There's no problem.

303
00:22:36,080 --> 00:22:38,760
Yeah. In case of one test
and do not single file.

304
00:22:38,760 --> 00:22:42,360
If you have one configuration file,
you have to create it at once.

305
00:22:43,160 --> 00:22:47,040
If you are increasing it,
then just put your cursor on the point

306
00:22:47,040 --> 00:22:48,800
and then it will work for that test.

307
00:22:48,800 --> 00:22:51,080
And you've got a symbol every time

308
00:22:58,480 --> 00:23:00,760
you're
going to, for every symbol is fine, right?

309
00:23:00,840 --> 00:23:04,680
I thought for every project
my project is just one

310
00:23:06,480 --> 00:23:08,240
is still we are in a same project.

311
00:23:08,240 --> 00:23:12,120
Like I said, we can have multiple test
and single file

312
00:23:12,240 --> 00:23:15,840
for one project, correct.

313
00:23:15,840 --> 00:23:21,000
Now the next important point is
if you observe in our application,

314
00:23:21,000 --> 00:23:23,640
whatever we are doing, it

315
00:23:24,960 --> 00:23:27,520
is if you see we are passing this data

316
00:23:27,800 --> 00:23:31,360
in that application rate
as a username, as a password, correct.

317
00:23:32,680 --> 00:23:34,520
We are passing this data,

318
00:23:34,520 --> 00:23:37,560
We call this data hardcoded,

319
00:23:37,560 --> 00:23:37,840
right?

320
00:23:37,840 --> 00:23:40,760
We are passing out coded data here.

321
00:23:40,760 --> 00:23:43,560
But the problem with this kind of data is

322
00:23:43,920 --> 00:23:47,000
it is not acceptable
in your practical industry.

323
00:23:47,760 --> 00:23:51,240
If you go in any organization,
if you are working for

324
00:23:51,240 --> 00:23:55,120
any company or for any project
or any client or customer.

325
00:23:55,360 --> 00:24:00,160
And if you write your test cases like this
where you're passing the data, hardcoded

326
00:24:00,720 --> 00:24:06,040
your test, this will not get accepted.

327
00:24:06,040 --> 00:24:07,160
All right.

328
00:24:07,320 --> 00:24:10,040
Can anyone think of the situation
why this hard

329
00:24:10,040 --> 00:24:20,000
coded data is not accepted?

330
00:24:20,000 --> 00:24:27,480
It is not acceptable in any industry.

331
00:24:27,480 --> 00:24:28,080
No demo.

332
00:24:28,080 --> 00:24:31,000
See signal credentials can always change.

333
00:24:31,000 --> 00:24:31,320
Trade

334
00:24:32,400 --> 00:24:33,680
credentials is something

335
00:24:33,680 --> 00:24:39,000
always changes.

336
00:24:39,000 --> 00:24:40,160
Find liquidity.

337
00:24:40,160 --> 00:24:41,360
You want to think

338
00:24:42,000 --> 00:24:44,320
Here you are exposing your data

339
00:24:45,040 --> 00:24:48,680
right?

340
00:24:48,680 --> 00:24:51,760
Right now what we are doing,
Let's consider one scenario.

341
00:24:51,760 --> 00:24:55,760
Let's consider
one practical scenario of Amazon.

342
00:24:55,760 --> 00:25:00,160
What you did is how many users Amazon has,
what you think about it,

343
00:25:00,240 --> 00:25:02,280
how many users Amazon, as

344
00:25:05,000 --> 00:25:07,280
many carry.

345
00:25:07,320 --> 00:25:10,440
And everyone, every single user of Amazon

346
00:25:10,640 --> 00:25:14,840
is able to log in
to the application, correct?

347
00:25:16,320 --> 00:25:17,800
At least three

348
00:25:20,200 --> 00:25:20,840
write days.

349
00:25:20,840 --> 00:25:24,120
Every single user has its own user idea
and a password.

350
00:25:24,120 --> 00:25:30,280
Do not tell me.

351
00:25:30,280 --> 00:25:33,520
Now. Let's say Jamal
got a job in one company, right?

352
00:25:33,520 --> 00:25:36,840
And this company has a customer. Amazon.

353
00:25:36,840 --> 00:25:41,720
Now Jamal bought one requirement
where he has to execute the test.

354
00:25:41,720 --> 00:25:47,240
Guess where he has to perform
logging in the Amazon right?

355
00:25:47,240 --> 00:25:52,080
If you pause this data like this for admin
and then password hardcoded data,

356
00:25:52,560 --> 00:25:56,640
but the requirement is
he has to execute this log

357
00:25:56,640 --> 00:26:01,080
in functionality for 1000 users
or later for 1 million users.

358
00:26:02,560 --> 00:26:02,840
Right.

359
00:26:02,840 --> 00:26:08,400
For 1 million users, he has to execute
this script with this type of arrangement.

360
00:26:08,480 --> 00:26:09,800
With this kind of arrangement.

361
00:26:09,800 --> 00:26:13,880
The arrangement he has right now,
the one you can see on my screen

362
00:26:15,000 --> 00:26:16,280
right.

363
00:26:16,280 --> 00:26:20,200
Will he be able to execute
this particular script across 1

364
00:26:20,200 --> 00:26:28,720
million users?

365
00:26:28,720 --> 00:26:30,280
No. Right.

366
00:26:30,280 --> 00:26:32,880
If he wants to continue
with this same arrangement,

367
00:26:32,880 --> 00:26:36,120
what he has to do,
he has to write this script,

368
00:26:36,120 --> 00:26:39,320
this particular valid login
method for 1 million times.

369
00:26:40,000 --> 00:26:42,840
And every time
he has to change his admin right.

370
00:26:42,840 --> 00:26:49,320
And the new user password right.

371
00:26:49,320 --> 00:26:51,320
Getting my point or not

372
00:27:04,720 --> 00:27:05,400
getting.

373
00:27:05,400 --> 00:27:07,920
So now we don't have to use any.

374
00:27:07,920 --> 00:27:10,920
No, we don't have to use any other thing.

375
00:27:11,480 --> 00:27:12,240
Right.

376
00:27:12,240 --> 00:27:16,480
We can even store
every single thing in a map from the java

377
00:27:16,520 --> 00:27:20,680
knowledge Black
That is good and value players, right?

378
00:27:21,240 --> 00:27:22,920
That is also fine.

379
00:27:22,920 --> 00:27:28,120
But remember I told you we are using
a very integrated and advanced tool.

380
00:27:28,120 --> 00:27:30,720
Quite stingy right?

381
00:27:30,720 --> 00:27:35,440
When we come across this type
of requirement, right when we come across

382
00:27:35,440 --> 00:27:39,520
this type of requirement test indices,
you don't need to be identified.

383
00:27:40,920 --> 00:27:41,880
You don't need to use a

384
00:27:41,880 --> 00:27:45,920
map, you don't need to use any form
for any other loop.

385
00:27:45,960 --> 00:27:49,320
Right. I have my inbuilt concept.

386
00:27:49,520 --> 00:27:54,000
If you use this inbuilt
concept in your class, you will be able

387
00:27:54,000 --> 00:27:59,160
to log in across multiple users
with the help of a single method.

388
00:27:59,160 --> 00:28:01,040
For example, this is my single test.

389
00:28:01,040 --> 00:28:02,000
Guess right?

390
00:28:02,160 --> 00:28:06,480
This single test will work across
multiple users.

391
00:28:06,720 --> 00:28:10,200
I don't need to write this test case again
and again and again.

392
00:28:10,200 --> 00:28:11,880
I do need to do that.

393
00:28:11,880 --> 00:28:16,200
Very simple to understand this.

394
00:28:16,200 --> 00:28:17,440
Interesting.

395
00:28:18,800 --> 00:28:20,560
Yes. Data driven testing.

396
00:28:20,560 --> 00:28:23,520
This is what we call data driven test.

397
00:28:23,520 --> 00:28:24,960
What is data driven test?

398
00:28:24,960 --> 00:28:29,400
When your test executes
across states of data

399
00:28:29,680 --> 00:28:34,040
or multiple set of data
right across different types of data.

400
00:28:34,200 --> 00:28:37,080
We call it data driven testing.

401
00:28:37,280 --> 00:28:40,840
So now the next concept,
which we are going to implement

402
00:28:40,840 --> 00:28:43,960
here is your data driven testing quite

403
00:28:45,000 --> 00:28:47,680
it's going to the slide first,

404
00:28:47,680 --> 00:28:50,880
we are going to pass this test
parameterization rate.

405
00:28:51,160 --> 00:28:52,720
Interestingly,

406
00:28:53,320 --> 00:28:55,800
you'll see
it says parameterization in testing

407
00:28:56,040 --> 00:29:00,120
can be done
with the help of data provided annotation.

408
00:29:00,160 --> 00:29:03,080
This is the concept editor data provider

409
00:29:03,280 --> 00:29:08,320
which I was talking about.

410
00:29:08,320 --> 00:29:11,440
All right, excited
data provider annotation.

411
00:29:12,000 --> 00:29:15,240
This data provider is a method annotated

412
00:29:15,240 --> 00:29:20,280
with the array data provider
which provides the data inside our method.

413
00:29:20,280 --> 00:29:22,480
How are we going to implement it?

414
00:29:22,480 --> 00:29:24,600
We will look into this. Don't
worry about it.

415
00:29:24,600 --> 00:29:25,280
Okay.

416
00:29:25,920 --> 00:29:28,080
Now remember

417
00:29:28,080 --> 00:29:31,520
this method must monster data
the array of object.

418
00:29:31,800 --> 00:29:32,200
All right.

419
00:29:32,200 --> 00:29:33,920
The array of object.

420
00:29:33,920 --> 00:29:36,880
Remember this so it steps to parameter.

421
00:29:36,880 --> 00:29:38,080
We will look into this later.

422
00:29:38,080 --> 00:29:38,960
First.

423
00:29:38,960 --> 00:29:42,880
First, we will create this part
data provider class.

424
00:29:43,640 --> 00:29:48,560
So I'm going to create it
right click Now another Java class.

425
00:29:49,560 --> 00:29:51,600
And inside this class I'm going to write

426
00:29:54,960 --> 00:29:57,200
data all the way to

427
00:30:09,720 --> 00:30:10,480
connect

428
00:30:16,120 --> 00:30:17,320
Great state.

429
00:30:17,320 --> 00:30:19,480
I didn't get it Black

430
00:30:35,560 --> 00:30:36,480
Yeah,

431
00:30:38,000 --> 00:30:41,320
I'm making sure that no one pays
any insurance, anything.

432
00:30:41,520 --> 00:30:43,520
I'm just making sure for everyone.

433
00:30:43,520 --> 00:30:44,760
That's why

434
00:30:48,960 --> 00:30:50,080
all guys.

435
00:30:50,080 --> 00:30:55,680
So now, now I already give you
one practical situation right by.

436
00:30:55,680 --> 00:30:57,000
Do we need

437
00:30:58,160 --> 00:31:02,040
now let's go ahead and try to implement
this data provided a class.

438
00:31:02,280 --> 00:31:03,080
All right.

439
00:31:03,240 --> 00:31:09,000
So first to right this data provider
right before writing this data provider

440
00:31:09,000 --> 00:31:11,880
class, what I will write,
I will write my scenario,

441
00:31:13,320 --> 00:31:15,840
whatever the test, I'm going to execute

442
00:31:16,200 --> 00:31:18,600
and then we will implement data provider.

443
00:31:19,400 --> 00:31:22,880
Then we will integrate data provider
and test together.

444
00:31:23,200 --> 00:31:24,000
Correct.

445
00:31:24,240 --> 00:31:27,280
First part,
which you guys are already aware of.

446
00:31:27,280 --> 00:31:29,760
Great first part
which you guys are already aware of.

447
00:31:30,360 --> 00:31:33,840
This is the work
we are going to implement so that you guys

448
00:31:34,520 --> 00:31:37,160
will have some familiarity with the topic.

449
00:31:37,160 --> 00:31:40,920
And then slowly I will take you to
implement data for the later assignment.

450
00:31:42,760 --> 00:31:44,840
You don't need to change any things in it.

451
00:31:44,840 --> 00:31:46,560
That's the best part.

452
00:31:46,560 --> 00:31:47,920
You don't need to change anything.

453
00:31:47,920 --> 00:31:50,760
This you will take care everything except.

454
00:31:51,160 --> 00:31:58,000
All right, now let me show you.

455
00:31:58,000 --> 00:32:10,680
So the first thing which I'm going to do
here is I'm going to write my file.

456
00:32:11,920 --> 00:32:14,280
Everyone knows it.

457
00:32:14,280 --> 00:32:16,360
We private driver

458
00:32:16,360 --> 00:32:18,880
or do I need to explain

459
00:32:22,520 --> 00:32:26,720
the I'm writing everything right?

460
00:32:27,000 --> 00:32:29,200
Everything I'm writing. Okay.

461
00:32:29,200 --> 00:32:32,880
So please take care of this thing
and please make sure that

462
00:32:32,880 --> 00:32:36,480
if even if you are writing,
even if you're writing the code with me,

463
00:32:36,960 --> 00:32:40,240
and if you think I'm writing too fast,
please

464
00:32:40,240 --> 00:32:42,800
interrupt me and stop me in between.

465
00:32:42,960 --> 00:32:45,240
All right. I won't be back.

466
00:32:45,240 --> 00:32:46,000
Do it.

467
00:32:46,000 --> 00:32:48,480
Because this class is for you
guys, not for me.

468
00:32:49,280 --> 00:32:53,240
Okay, Now,

469
00:32:54,920 --> 00:32:55,600
let's go ahead.

470
00:32:55,600 --> 00:32:58,680
I'm going to write my method

471
00:33:03,760 --> 00:33:05,400
first before my pen.

472
00:33:05,400 --> 00:33:06,760
I'm going to write

473
00:33:07,560 --> 00:33:10,360
y because Pre-condition, condition.

474
00:33:10,640 --> 00:33:11,400
Correct.

475
00:33:12,000 --> 00:33:13,400
So now I'm going to write.

476
00:33:13,400 --> 00:33:14,520
It is

477
00:33:25,000 --> 00:33:27,640
like open the browser.

478
00:33:27,960 --> 00:33:32,280
I'm going to write my method guide.

479
00:33:32,280 --> 00:33:36,880
Can I copy at least the part of my Chrome
browser from any other class?

480
00:33:37,280 --> 00:33:38,520
Can I do that

481
00:33:55,240 --> 00:33:59,120
right?

482
00:33:59,120 --> 00:34:00,680
This is my

483
00:34:03,600 --> 00:34:04,600
precondition, right?

484
00:34:04,600 --> 00:34:07,040
This is just a precondition

485
00:34:07,040 --> 00:34:09,200
Is everyone with me.

486
00:34:09,200 --> 00:34:11,240
We have written just a precondition.

487
00:34:11,240 --> 00:34:12,000
We didn't do it.

488
00:34:12,000 --> 00:34:23,720
We didn't write anything after this.

489
00:34:23,720 --> 00:34:24,640
Shall we proceed further?

490
00:34:24,640 --> 00:34:26,440
No. Students

491
00:34:29,800 --> 00:34:30,360
Okay.

492
00:34:31,320 --> 00:34:33,360
Now the next thing I'm going to write

493
00:34:33,360 --> 00:34:36,800
for my public void next.

494
00:34:36,800 --> 00:34:41,120
See? Well,

495
00:34:42,400 --> 00:34:45,800
remember, this is my main test case,
so I'm going to write

496
00:34:46,040 --> 00:34:51,280
the latest, right?

497
00:34:52,800 --> 00:34:56,040
Yeah, for sure.

498
00:34:56,040 --> 00:34:59,120
Now I'm going to write here is driver or

499
00:34:59,960 --> 00:35:03,240
client element, right?

500
00:35:03,240 --> 00:35:05,880
We have already just look at that
biodata idea.

501
00:35:07,120 --> 00:35:08,680
What is the idea here?

502
00:35:08,680 --> 00:35:10,160
We have fixed

503
00:35:10,640 --> 00:35:15,200
this then you guys already
have these things correct?

504
00:35:15,200 --> 00:35:17,040
Everyone has this

505
00:35:17,280 --> 00:35:20,760
dot. S.E.

506
00:35:24,320 --> 00:35:27,880
again driver dot element, bi dot IED.

507
00:35:28,360 --> 00:35:29,760
So here I'm going to write.

508
00:35:29,760 --> 00:35:30,520
So the

509
00:35:31,800 --> 00:35:50,880
they should be like this, correct?

510
00:35:51,840 --> 00:35:53,880
Do let me know
what is if I'm doing something wrong

511
00:36:06,080 --> 00:36:07,120
after this.

512
00:36:07,120 --> 00:36:10,600
After this,
I am going to verify something on my page.

513
00:36:10,680 --> 00:36:11,000
Right.

514
00:36:11,000 --> 00:36:14,160
So we all know our applications

515
00:36:14,160 --> 00:36:16,400
and takes each out of me so fast, right?

516
00:36:17,760 --> 00:36:19,760
It needs some time to load the page.

517
00:36:20,200 --> 00:36:23,520
So I'm going to provide one bit

518
00:36:24,920 --> 00:36:26,760
driver dart,

519
00:36:27,200 --> 00:36:30,600
manage dart ammo dart implicit rate.

520
00:36:31,360 --> 00:36:34,160
So this wait would
be my next if by clicking

521
00:36:45,800 --> 00:36:48,080
okay and the code to verify let's say

522
00:36:48,080 --> 00:36:51,160
welcome to simple again
I'm going to write web element

523
00:36:54,800 --> 00:36:56,800
welcome attribute is what's to

524
00:37:13,680 --> 00:37:16,800
I'm going to write it as

525
00:37:17,280 --> 00:37:20,000
or let's not verify anything as of now

526
00:37:20,240 --> 00:37:23,600
because the main point is data driven test
nothing else.

527
00:37:23,960 --> 00:37:26,720
You're not going to verify something,
just a valid log.

528
00:37:26,720 --> 00:37:29,760
We are going to check find after this.

529
00:37:30,320 --> 00:37:32,360
The next thing is, guys,

530
00:37:32,760 --> 00:37:40,280
precondition done.

531
00:37:40,280 --> 00:37:43,520
We have one web marks implicit wait,

532
00:37:43,520 --> 00:37:52,560
we have one.

533
00:37:52,560 --> 00:37:54,760
So that one is in precondition, right?

534
00:37:54,960 --> 00:37:57,840
This is my actual test.

535
00:37:58,320 --> 00:38:02,560
After launching the application
before in before log in.

536
00:38:02,560 --> 00:38:02,880
Right.

537
00:38:02,880 --> 00:38:06,680
It is working there inside the method.

538
00:38:06,680 --> 00:38:08,280
This is my another method.

539
00:38:08,280 --> 00:38:10,160
Right? Can you see the scope?

540
00:38:10,160 --> 00:38:11,960
It will work only for that condition.

541
00:38:11,960 --> 00:38:13,920
It will not work for my actual test

542
00:38:24,000 --> 00:38:28,360
now. Always after method right.

543
00:38:28,360 --> 00:38:31,440
Public void

544
00:38:38,520 --> 00:38:44,080
addict.

545
00:38:44,080 --> 00:38:46,320
This is the code
we all know so far. Right?

546
00:38:47,520 --> 00:38:50,080
If I'm going to put it by a grouping
so I will write

547
00:38:50,280 --> 00:38:52,240
one thing as

548
00:38:53,280 --> 00:38:55,480
always run is equals true for this one

549
00:38:58,520 --> 00:39:00,880
always run is equal to two for this one.

550
00:39:02,640 --> 00:39:04,000
Now. Now

551
00:39:04,000 --> 00:39:07,320
the main implementation five times three.

552
00:39:08,720 --> 00:39:12,600
If I'm posting this data here
just for admin and this credential,

553
00:39:13,440 --> 00:39:16,320
I will not be able to execute

554
00:39:16,560 --> 00:39:19,640
this particular script for multiple users.

555
00:39:19,960 --> 00:39:20,760
Right

556
00:39:21,520 --> 00:39:26,200
now I want to execute this script
for multiple users to do that.

557
00:39:26,200 --> 00:39:29,920
What I'm to do see,
I'm going to write here

558
00:39:31,160 --> 00:39:32,040
public

559
00:39:34,840 --> 00:39:35,920
Object

560
00:39:36,960 --> 00:39:39,240
and here I'm going to provide this

561
00:39:40,440 --> 00:39:43,680
and somebody
tell me if I write this public

562
00:39:43,960 --> 00:39:48,280
object, this end log in data,
this is my function name.

563
00:39:49,560 --> 00:39:52,960
What does it mean?

564
00:39:52,960 --> 00:39:54,040
What is this object?

565
00:39:54,040 --> 00:40:02,240
Why I'm calling this object?

566
00:40:02,240 --> 00:40:04,680
Yes, this is to the array. Correct.

567
00:40:04,680 --> 00:40:19,280
But what is this object? Yes.

568
00:40:19,440 --> 00:40:21,760
Correct. Object is the parent class.

569
00:40:22,120 --> 00:40:25,760
Every single class study in Java

570
00:40:26,200 --> 00:40:31,480
is a child of this object class. Yes.

571
00:40:31,480 --> 00:40:33,120
I think we are coming on that.

572
00:40:33,120 --> 00:40:35,520
We are coming now in this object.

573
00:40:35,520 --> 00:40:42,840
If I'm expecting a string, can I get it?

574
00:40:42,840 --> 00:40:46,800
If I'm expecting something else,
but not a string,

575
00:40:46,800 --> 00:40:50,880
can I get it?

576
00:40:50,880 --> 00:40:53,400
What is the reason?
Because my object is a parent.

577
00:40:53,400 --> 00:40:56,160
Plus I can expect anything in return.
Right.

578
00:40:56,840 --> 00:40:58,800
So let's go ahead. Correct.

579
00:40:58,800 --> 00:41:00,840
That's my anticipated plus.

580
00:41:01,200 --> 00:41:04,280
Now, when I say to the any

581
00:41:05,520 --> 00:41:06,080
right

582
00:41:06,480 --> 00:41:10,720
when I say this to the VI,
we'll need this to the error here.

583
00:41:11,800 --> 00:41:12,360
Can somebody

584
00:41:12,360 --> 00:41:25,360
guess?

585
00:41:25,360 --> 00:41:27,760
Yes, yes, yes, yes, correct.

586
00:41:28,560 --> 00:41:30,600
So let me write this.

587
00:41:30,600 --> 00:41:31,280
Let me write.

588
00:41:31,280 --> 00:41:32,920
You all are intelligent objects.

589
00:41:32,920 --> 00:41:33,720
Great.

590
00:41:35,040 --> 00:41:37,640
I'm going to write of these data.

591
00:41:38,480 --> 00:41:38,840
Right?

592
00:41:38,840 --> 00:41:39,920
This is my

593
00:41:40,520 --> 00:41:43,440
now I want to check.

594
00:41:43,920 --> 00:41:44,400
Right.

595
00:41:44,400 --> 00:41:49,800
That my log in functionality is working
or not across three users.

596
00:41:49,800 --> 00:41:52,560
How many users goes across three users?

597
00:41:52,920 --> 00:41:55,080
So I'm going to write object.

598
00:41:55,720 --> 00:41:57,040
It will ask.

599
00:41:57,040 --> 00:42:01,080
It will ask to define
the overall length of my addy.

600
00:42:01,800 --> 00:42:06,800
So when I say three users,
it means one three username and password.

601
00:42:06,880 --> 00:42:08,720
What would be the numbers?

602
00:42:08,720 --> 00:42:12,400
I need to put here to define the size
of any

603
00:42:13,320 --> 00:42:16,760
the array that can accept
my three different credentials?

604
00:42:17,280 --> 00:42:18,600
It means three users.

605
00:42:18,600 --> 00:42:24,320
Again also as I'm repeating myself, three
username, three password, correct, etc.

606
00:42:24,560 --> 00:42:28,600
if I expect and if I had right to do,
then what would happen

607
00:42:29,000 --> 00:42:30,480
to username and password?

608
00:42:32,120 --> 00:42:35,280
This will be your number. All

609
00:42:35,400 --> 00:42:36,440
this will be your number.

610
00:42:36,440 --> 00:42:40,200
All the rows.

611
00:42:40,200 --> 00:42:42,680
This will be your number. All

612
00:42:46,960 --> 00:42:49,200
this will be your number of columns.

613
00:42:49,200 --> 00:42:51,480
And with new keyword

614
00:42:51,880 --> 00:43:00,520
you're defining correct?

615
00:43:00,520 --> 00:43:02,720
Are you understanding what I'm doing here?

616
00:43:02,720 --> 00:43:21,120
How we define the size of this area?

617
00:43:21,120 --> 00:43:23,400
Okay. All right.

618
00:43:23,400 --> 00:43:26,960
Whenever you guys think that you're not
understanding anything, do let me look.

619
00:43:27,040 --> 00:43:29,040
All right? It's not a big deal at all.

620
00:43:29,040 --> 00:43:30,280
They will stop.

621
00:43:30,280 --> 00:43:31,720
We will read it again.

622
00:43:31,720 --> 00:43:35,400
We will go through it again, and then
we will implement it again from scratch.

623
00:43:35,400 --> 00:43:36,480
It's not initialize.

624
00:43:36,480 --> 00:43:37,000
Okay?

625
00:43:39,840 --> 00:43:40,400
Sure.

626
00:43:40,400 --> 00:43:41,040
Why not?

627
00:43:41,040 --> 00:43:43,200
This is the last part of your code joining

628
00:43:46,320 --> 00:43:48,040
the error down is the method

629
00:43:48,040 --> 00:43:52,000
as opposed to condition
we use right to close our browser.

630
00:43:53,320 --> 00:43:56,200
I already explained
to you the difference in between driver

631
00:43:56,200 --> 00:44:10,800
dot doors and driver dot click.

632
00:44:10,800 --> 00:44:11,280
All right.

633
00:44:11,280 --> 00:44:25,080
Shall we proceed further now?

634
00:44:25,080 --> 00:44:27,360
All right, so here what I'm going to do

635
00:44:27,360 --> 00:44:30,920
is this object class,
the parent class I'm calling, right?

636
00:44:31,160 --> 00:44:33,360
I am going to define one to the 80.

637
00:44:34,680 --> 00:44:37,960
When I define this to the
that this would be the object

638
00:44:37,960 --> 00:44:41,280
of my to really and the length
I'm going to define.

639
00:44:41,280 --> 00:44:46,320
So I have defined the length of my
to the 80 because I know my requirement.

640
00:44:47,240 --> 00:44:51,000
What is the requirement
I need to pass username and password.

641
00:44:51,000 --> 00:44:54,840
It means two parameters.

642
00:44:54,840 --> 00:44:56,640
No, it can change.

643
00:44:56,640 --> 00:44:57,640
It will change.

644
00:44:57,640 --> 00:45:00,960
Let's say
I want for username and password setting.

645
00:45:01,480 --> 00:45:02,960
That is also possible.

646
00:45:02,960 --> 00:45:03,960
We will do that also.

647
00:45:03,960 --> 00:45:06,360
Don't worry,
this is the another part will do right.

648
00:45:06,360 --> 00:45:08,800
We will going to see that part.
Also don't worry about the

649
00:45:11,520 --> 00:45:13,680
it is completely customizable.

650
00:45:13,680 --> 00:45:16,160
Don't worry about it.

651
00:45:16,160 --> 00:45:19,040
So now here I defined it to the anti.

652
00:45:19,360 --> 00:45:21,800
I created the object of this to data

653
00:45:22,040 --> 00:45:24,480
and I provided the length of the array.

654
00:45:24,880 --> 00:45:27,720
Now this is the time to fill the values

655
00:45:27,720 --> 00:45:32,760
inside this to really write.

656
00:45:32,760 --> 00:45:36,720
Let me open this to to you more

657
00:45:43,320 --> 00:45:44,120
so from here.

658
00:45:44,120 --> 00:45:45,000
Let's go from this.

659
00:45:45,000 --> 00:45:48,000
At the moment I see

660
00:45:48,000 --> 00:45:50,880
three comma two what would happen?

661
00:45:50,880 --> 00:45:56,320
It says one, two, three,

662
00:45:57,480 --> 00:46:00,480
two, one and two.

663
00:46:00,840 --> 00:46:01,480
Right.

664
00:46:01,560 --> 00:46:05,760
So this is the size of eight
I have defined, which is are two direct

665
00:46:05,800 --> 00:46:06,840
two dimensional.

666
00:46:06,840 --> 00:46:11,760
The right one dimension is this one
one dimension, is this one correct?

667
00:46:11,760 --> 00:46:16,240
I have to pass I have to pass my username

668
00:46:16,520 --> 00:46:19,160
and my password,

669
00:46:19,280 --> 00:46:29,840
correct? Yes.

670
00:46:29,840 --> 00:46:32,840
So how many users names
I can pass now inside this?

671
00:46:32,880 --> 00:46:34,800
This is the memory allocation, by the way.

672
00:46:34,800 --> 00:46:37,800
What I'm showing you right
now, which we cannot see up

673
00:46:38,880 --> 00:46:39,640
three.

674
00:46:39,640 --> 00:46:43,080
So user name one, user name two, end user

675
00:46:43,080 --> 00:46:45,600
name, Right.

676
00:46:46,880 --> 00:46:48,880
This is the combination we have to make.

677
00:46:49,200 --> 00:46:51,480
So we have defined the size of edit.

678
00:46:51,680 --> 00:46:54,480
Now we are going to fill the values

679
00:46:54,480 --> 00:46:57,480
in all these columns
one by one, in all the cells, one by one.

680
00:46:57,840 --> 00:46:58,560
Correct.

681
00:46:58,600 --> 00:47:01,800
Let's go ahead and fill this venue.

682
00:47:01,800 --> 00:47:04,120
I'm going to write you

683
00:47:12,080 --> 00:47:12,360
here.

684
00:47:12,360 --> 00:47:15,480
I'm going to write my data all

685
00:47:17,880 --> 00:47:22,320
zero comma, zero.

686
00:47:22,320 --> 00:47:23,240
What does it mean, guys?

687
00:47:23,240 --> 00:47:35,640
Vanessa zero zero.

688
00:47:35,640 --> 00:47:37,760
Yes, this is my first option.

689
00:47:38,040 --> 00:47:40,600
So in my first to sell it any more,
should I write

690
00:47:57,120 --> 00:47:59,880
correct.

691
00:47:59,880 --> 00:48:02,920
Now I need to write the password.

692
00:48:03,400 --> 00:48:05,920
So to write the password,
what would be the coordinates?

693
00:48:05,920 --> 00:48:07,680
I have to pass the zero zero.

694
00:48:07,680 --> 00:48:09,800
What it mean now for password

695
00:48:13,680 --> 00:48:14,360
zero one.

696
00:48:14,360 --> 00:48:15,240
Correct.

697
00:48:15,560 --> 00:48:21,720
So zero and one and this I'm going to pass
for my password.

698
00:48:21,720 --> 00:48:22,960
So this is my password?

699
00:48:22,960 --> 00:48:26,960
Correct.

700
00:48:26,960 --> 00:48:29,840
This It happens for one user right now.

701
00:48:29,880 --> 00:48:38,680
Let's go ahead and do it
for the many users as well.

702
00:48:38,680 --> 00:48:40,880
Now, 10 minutes for the second user.

703
00:48:41,160 --> 00:48:50,200
For the second user,
what would be the coordinates?

704
00:48:50,200 --> 00:48:53,520
One comma, zero. Right.

705
00:48:53,520 --> 00:48:57,440
And then also one comma, one

706
00:48:57,480 --> 00:48:58,920
similarly to comma zero

707
00:48:58,920 --> 00:49:07,400
and two comma, one.

708
00:49:07,400 --> 00:49:10,920
Is this correct for us to do first column,
First

709
00:49:11,400 --> 00:49:14,080
column, fine.

710
00:49:15,240 --> 00:49:18,400
Then second row,
first column, second row, second

711
00:49:19,360 --> 00:49:23,360
then third row, first column, third row,
second column, static.

712
00:49:24,080 --> 00:49:26,320
But still, I'm having one error here.

713
00:49:26,320 --> 00:49:27,240
What is visitor?

714
00:49:27,240 --> 00:49:28,600
Can somebody guess what?

715
00:49:28,600 --> 00:49:36,720
Is this error?

716
00:49:36,720 --> 00:49:38,640
Yes, the return type is missing.

717
00:49:38,640 --> 00:49:40,760
So I'm going to read again.

718
00:49:40,760 --> 00:49:42,440
What we should return from here is

719
00:49:45,160 --> 00:49:47,400
knowing this Outward Bound is not possible

720
00:49:47,440 --> 00:49:51,240
in an how index out of both.

721
00:49:51,240 --> 00:49:54,000
Whatever the length we defined,
we followed the same rules.

722
00:49:54,000 --> 00:49:54,520
Right?

723
00:49:54,760 --> 00:49:55,960
I am going to limit.

724
00:49:55,960 --> 00:49:58,880
I'm going to define this return
type as our data.

725
00:49:58,880 --> 00:50:01,400
Now, see, no matter.

726
00:50:01,400 --> 00:50:04,440
Edit So this is a table I've made.

727
00:50:04,800 --> 00:50:07,640
I've created one table that contains

728
00:50:07,640 --> 00:50:10,720
my three username and password.

729
00:50:10,720 --> 00:50:11,440
Correct.

730
00:50:11,840 --> 00:50:13,760
Now what is the next task?

731
00:50:13,760 --> 00:50:18,520
Next task is to use this username
and these passwords

732
00:50:18,520 --> 00:50:21,840
where in my method
in my test, actual test.

733
00:50:22,200 --> 00:50:23,880
So what test indices?

734
00:50:23,880 --> 00:50:26,440
You have to define one attribute.

735
00:50:26,800 --> 00:50:28,560
Which attribute

736
00:50:29,280 --> 00:50:29,920
which attribute.

737
00:50:29,920 --> 00:50:31,800
Right? At the rate

738
00:50:33,360 --> 00:50:35,360
data provider.

739
00:50:35,360 --> 00:50:35,920
Right.

740
00:50:35,920 --> 00:50:39,040
You have to write the date data provided.

741
00:50:39,320 --> 00:50:42,360
The moment you write this data, the data,

742
00:50:42,840 --> 00:50:47,560
this log in data
will be the name of your data provider.

743
00:50:49,160 --> 00:50:50,160
This log in data

744
00:50:50,160 --> 00:50:53,920
is now not normally method,
but your data provider.

745
00:50:53,920 --> 00:50:57,080
Plus this is your data provider and

746
00:51:01,440 --> 00:51:04,680
you are missing one some import, right?

747
00:51:04,680 --> 00:51:08,600
Instead of writing this, Olena
simply write a data provider

748
00:51:08,720 --> 00:51:13,280
and write this or do the test
and annotations here in the import.

749
00:51:13,320 --> 00:51:16,520
The way I have written it is my signature

750
00:51:18,240 --> 00:51:20,640
like this and just put started

751
00:51:20,720 --> 00:51:23,720
so it will import every single thing

752
00:51:23,720 --> 00:51:25,640
even Jamal instead of this dot

753
00:51:25,640 --> 00:51:29,400
data provider right?

754
00:51:29,400 --> 00:51:30,240
So here you'll see.

755
00:51:30,240 --> 00:51:37,600
I could just stop.

756
00:51:37,600 --> 00:51:39,400
Yeah, correct.

757
00:51:40,280 --> 00:51:41,760
So it will give you

758
00:51:41,760 --> 00:51:45,280
all of the methods
and everything from test and annotations.

759
00:51:45,280 --> 00:51:45,840
Right?

760
00:51:46,720 --> 00:51:50,280
You don't need to write any other thing

761
00:51:54,080 --> 00:51:58,160
by proxy
for today's data provider concept.

762
00:51:58,160 --> 00:52:06,200
Clear or not, everyone,
we have created just a data provider.

763
00:52:06,400 --> 00:52:08,800
We didn't integrated
with our current method.

764
00:52:09,320 --> 00:52:12,280
Now the next actually we split it, right?

765
00:52:12,320 --> 00:52:15,200
This big topic is between smaller pieces

766
00:52:15,360 --> 00:52:19,680
and we are now trying to understand
every small piece, one by one.

767
00:52:19,680 --> 00:52:21,720
This is important, right?

768
00:52:21,960 --> 00:52:23,520
First we wrote Normal Method,

769
00:52:24,520 --> 00:52:25,440
then we created a

770
00:52:25,440 --> 00:52:29,280
hollow cylinder
that is defining the size of the array.

771
00:52:29,280 --> 00:52:31,520
Then we feed all the values inside ETI.

772
00:52:32,840 --> 00:52:37,440
It is giving you the error data,

773
00:52:37,440 --> 00:52:39,680
why you're putting comma in between.

774
00:52:40,680 --> 00:52:42,120
These are the coordinates, right?

775
00:52:42,120 --> 00:52:45,360
So in between the coordinates
you cannot put this comma.

776
00:52:45,360 --> 00:52:46,040
So just remove.

777
00:52:46,040 --> 00:52:48,120
Can you see anywhere comma I've placed

778
00:52:52,840 --> 00:52:56,480
so that we need to check that
we need to check why it's not coming.

779
00:52:56,480 --> 00:53:00,240
Ideally it should come,
but even if it does not coming,

780
00:53:00,240 --> 00:53:09,080
sometimes we have to write.

781
00:53:09,080 --> 00:53:09,840
All right.

782
00:53:09,840 --> 00:53:13,840
So now this is the time.

783
00:53:13,840 --> 00:53:17,080
This is the time to integrate this data
provider.

784
00:53:17,280 --> 00:53:21,920
In our best case.

785
00:53:21,920 --> 00:53:24,880
The last part is this one and this part

786
00:53:31,120 --> 00:53:32,840
very invariant.

787
00:53:32,840 --> 00:53:39,360
I don't have anything,
just this method direct.

788
00:53:39,360 --> 00:53:43,640
We have this false condition
in almost every class where we perform

789
00:53:43,640 --> 00:53:52,160
the log in, not all in.

790
00:53:52,360 --> 00:53:55,320
This is the next thing
we are going to do that already.

791
00:53:55,560 --> 00:53:57,720
We are going to check in the application.

792
00:53:57,720 --> 00:53:58,760
We will see everything

793
00:54:00,720 --> 00:54:04,840
now. Now let me do one thing right.

794
00:54:05,760 --> 00:54:10,160
Let me copy this from here
and let me open.

795
00:54:10,160 --> 00:54:15,200
Come on.

796
00:54:15,200 --> 00:54:17,160
Our application,

797
00:54:17,320 --> 00:54:32,000
the right now

798
00:54:32,040 --> 00:54:36,160
for the first user,
I think we are okay with this admin and

799
00:54:39,120 --> 00:54:43,200
this is the password.

800
00:54:43,200 --> 00:54:45,120
It is working fine,

801
00:54:45,720 --> 00:54:56,160
but we need two more users.

802
00:54:56,160 --> 00:54:59,280
Do you guys have any credentials
which you have used to log

803
00:54:59,280 --> 00:55:13,200
in which you use to log in apart
from admin?

804
00:55:13,200 --> 00:55:14,080
All right.

805
00:55:15,200 --> 00:55:17,880
Let me check if I have

806
00:55:55,680 --> 00:55:59,640
all I knew a couple of them shard one.

807
00:55:59,640 --> 00:56:01,280
That is fine, but what is the password?

808
00:56:01,280 --> 00:56:03,480
I'm not sure for this one.

809
00:56:03,480 --> 00:56:04,560
Let's check.

810
00:56:07,840 --> 00:56:09,200
Let's create a couple of them.

811
00:56:09,200 --> 00:56:09,600
Right.

812
00:56:09,600 --> 00:56:36,600
Let's create a couple of them.

813
00:56:36,600 --> 00:56:39,280
So let's see.
I'm going to write the user for

814
00:56:47,280 --> 00:56:48,480
Michael

815
00:56:51,200 --> 00:56:59,920
Lopez, and then

816
00:56:59,920 --> 00:57:03,160
the user name I'm going to write is

817
00:57:03,760 --> 00:57:04,320
Michael.

818
00:57:04,320 --> 00:57:08,480
One, two, three, four, five.

819
00:57:08,480 --> 00:57:10,760
Password is same

820
00:57:17,400 --> 00:57:38,000
state.

821
00:57:38,000 --> 00:57:50,040
Now, let's try to log in with this.

822
00:57:50,040 --> 00:57:57,320
Yes, we are able to log in right.

823
00:57:57,320 --> 00:58:00,400
So now the next user,
the next user, which I'm

824
00:58:00,400 --> 00:58:02,800
going to provide is

825
00:58:04,160 --> 00:58:05,720
and the same password.

826
00:58:05,720 --> 00:58:07,720
And again, in the third iteration.

827
00:58:07,920 --> 00:58:13,280
So you want me to create another data
or we can use this admin one as a third.

828
00:58:13,280 --> 00:58:18,560
What do you want guys?

829
00:58:18,560 --> 00:58:23,520
You want new one?

830
00:58:23,520 --> 00:58:40,680
Okay, wrong one is coming on the started.

831
00:58:40,800 --> 00:58:43,360
That is different scenario.
We will work on version one is one.

832
00:58:43,520 --> 00:58:44,720
Don't worry

833
00:58:47,040 --> 00:58:48,480
because we are not right now.

834
00:58:48,480 --> 00:58:50,760
We are not using the method we are.

835
00:58:50,760 --> 00:58:53,400
We are verifying the error message. Right.

836
00:58:54,360 --> 00:58:56,520
But if you want, let me go ahead
and use it.

837
00:58:56,920 --> 00:59:02,080
See, I'm going to write it in one correct.

838
00:59:02,080 --> 00:59:04,320
But there is no verification point.

839
00:59:04,320 --> 00:59:05,400
That's why.

840
00:59:05,400 --> 00:59:07,920
See, it will give you plus

841
00:59:07,920 --> 00:59:11,160
because it will give you an error
after clicking on log in button.

842
00:59:11,160 --> 00:59:13,800
But still we are not using it. Fine.

843
00:59:14,360 --> 00:59:17,760
So now different three username
and password

844
00:59:18,000 --> 00:59:21,880
in my data provider
plus correct my data is ready.

845
00:59:21,920 --> 00:59:24,240
My data provider concept is ready.

846
00:59:24,240 --> 00:59:27,960
This is the time to integrate
our data provider

847
00:59:28,120 --> 00:59:30,960
in our actual test

848
00:59:30,960 --> 00:59:33,720
last stage right before execution.

849
00:59:34,280 --> 00:59:36,520
So let's do it in this part.

850
00:59:36,520 --> 00:59:41,080
What I'm going to do here is you see,

851
00:59:41,080 --> 00:59:44,040
this is my actual method
and I'm going to repeat

852
00:59:46,800 --> 00:59:49,080
data provider, right?

853
00:59:49,640 --> 00:59:51,360
You have to right. Data provider

854
00:59:52,440 --> 00:59:54,400
is equal to

855
00:59:54,400 --> 01:00:06,160
the name of your provider.

856
01:00:06,160 --> 01:00:08,000
What is the name of your data provider?

857
01:00:08,000 --> 01:00:08,960
It is

858
01:00:10,000 --> 01:00:12,320
log in data.

859
01:00:12,320 --> 01:00:14,560
So I am writing this log in data, huge

860
01:00:14,840 --> 01:00:18,800
fine, fine.

861
01:00:18,800 --> 01:00:19,320
Guys.

862
01:00:19,560 --> 01:00:21,960
Now what is the next thing it says?

863
01:00:21,960 --> 01:00:24,480
All right, I am calling this log data.

864
01:00:25,360 --> 01:00:25,800
What?

865
01:00:25,800 --> 01:00:29,800
How many strings we are getting from log
in data from every single row?

866
01:00:30,200 --> 01:00:34,160
How many strings we are getting this

867
01:00:36,160 --> 01:00:37,960
whole string static.

868
01:00:37,960 --> 01:00:42,920
So if we are getting to a string
from there, we need to handle those.

869
01:00:42,920 --> 01:00:43,920
The strings rate.

870
01:00:43,920 --> 01:00:46,920
We need to catch these two strings
inside our test

871
01:00:48,160 --> 01:00:50,840
right.

872
01:00:50,840 --> 01:00:54,480
Getting my point this. Yes.

873
01:00:54,480 --> 01:00:55,720
So we need to pass what?

874
01:00:55,720 --> 01:00:57,960
We need to parse the parameters.

875
01:00:57,960 --> 01:01:00,160
So I'm going to write string.

876
01:01:00,160 --> 01:01:03,560
The first parameter would be my username

877
01:01:04,280 --> 01:01:07,440
and the second parameter
you would be my password.

878
01:01:08,000 --> 01:01:08,440
Correct.

879
01:01:09,520 --> 01:01:14,720
Now, yeah.

880
01:01:15,280 --> 01:01:17,400
Because of the poverty issue,
power is low.

881
01:01:17,400 --> 01:01:31,760
So that's the reason you put that.

882
01:01:31,760 --> 01:01:32,400
All right.

883
01:01:32,400 --> 01:01:36,160
Now we are not going to use this direct,

884
01:01:36,160 --> 01:01:38,800
hard coded data anymore, Right?

885
01:01:39,200 --> 01:01:42,960
So let me delete this data.

886
01:01:42,960 --> 01:01:46,720
I'm going to delete it and simply I'm
passing with this username history.

887
01:01:47,560 --> 01:01:49,680
And here also

888
01:01:52,560 --> 01:01:55,200
I'm going to pass my

889
01:01:56,400 --> 01:02:00,360
password is correct.

890
01:02:00,360 --> 01:02:04,680
Now, if you see guys, if you observe
closely what is happening here,

891
01:02:06,000 --> 01:02:10,520
in my main function, in my main
function, right, which is for valid

892
01:02:10,520 --> 01:02:13,560
logging data, if you see here I'm

893
01:02:13,560 --> 01:02:17,760
passing username and password,
this username

894
01:02:17,760 --> 01:02:20,760
and password is going inside my method,

895
01:02:21,800 --> 01:02:24,000
but this username and password

896
01:02:24,000 --> 01:02:26,880
is coming from my data logging data.

897
01:02:27,360 --> 01:02:28,080
Right.

898
01:02:28,200 --> 01:02:32,160
If I go inside my logging data
you'll see three different username,

899
01:02:32,560 --> 01:02:35,240
three different password
are actually coming

900
01:02:35,400 --> 01:02:39,600
and they are executing
with my actual test case.

901
01:02:40,240 --> 01:02:42,640
So in this case, in this case,

902
01:02:42,840 --> 01:02:45,480
my test case will execute three things.

903
01:02:46,000 --> 01:02:52,200
Correct?

904
01:02:52,200 --> 01:02:59,040
Is this correct based?

905
01:02:59,040 --> 01:03:05,760
So let's go ahead and execute this now. I

906
01:03:07,840 --> 01:03:09,600
am going to run my data provider.

907
01:03:09,600 --> 01:03:19,360
They will.

908
01:03:19,360 --> 01:03:20,760
Yes. Yes, Mike.

909
01:03:20,760 --> 01:03:24,440
Yes, That's what I'm telling you now

910
01:03:24,440 --> 01:03:25,800
right after this execution.

911
01:03:25,800 --> 01:03:28,520
This is the next topic

912
01:03:35,200 --> 01:03:36,440
to open your browser.

913
01:03:36,440 --> 01:03:39,160
First.

914
01:03:39,160 --> 01:03:45,720
Right, guys?

915
01:03:45,720 --> 01:03:49,440
If video stops, right,
If call stops, please

916
01:03:49,800 --> 01:03:54,120
don't leave the call in between
because might be Internet issues.

917
01:03:54,120 --> 01:03:57,400
This right now it's not yet,
but if it is there

918
01:04:04,760 --> 01:04:07,960
now see it executed for the second user
right

919
01:04:08,280 --> 01:04:15,120
and this time
it is going to execute for my third user.

920
01:04:15,120 --> 01:04:18,960
Are you guys noticing this is the wrong
password I'm going to pass here?

921
01:04:19,120 --> 01:04:22,800
See all of my three test kits executed

922
01:04:23,160 --> 01:04:26,160
Now, if you see here in the reserved,
right,

923
01:04:26,600 --> 01:04:29,000
it gives you all the three options, right

924
01:04:29,640 --> 01:04:34,480
when you log in, but it is giving you
username password, very log in, different

925
01:04:34,480 --> 01:04:37,960
user username password when you log
in, different username password.

926
01:04:38,440 --> 01:04:39,240
Right.

927
01:04:39,480 --> 01:04:41,880
That's how you can execute your test

928
01:04:41,880 --> 01:04:45,000
cases right across different set of data.

929
01:04:46,520 --> 01:04:49,800
This part,
the data driven part is clear or not.

930
01:04:50,040 --> 01:04:51,040
Anything

931
01:05:01,080 --> 01:05:06,040
is it clear for everyone?

932
01:05:06,040 --> 01:05:14,640
Think it was in session.

933
01:05:14,640 --> 01:05:17,200
Perfect. So guys,

934
01:05:17,200 --> 01:05:18,640
because the power is not here.

935
01:05:18,640 --> 01:05:20,240
Let's take a break for 20 minutes.

936
01:05:20,240 --> 01:05:23,760
And after the break,
I will tell you what all are the changes

937
01:05:24,280 --> 01:05:26,360
we can do in this part. Right.

938
01:05:26,360 --> 01:05:29,040
And how things work generally.

939
01:05:29,040 --> 01:05:30,280
Definitely.

940
01:05:30,280 --> 01:05:36,480
The question is, in my pipeline,
I really like I said,

941
01:05:37,200 --> 01:05:40,440
everything, everything

942
01:05:40,440 --> 01:05:43,520
we are going to discuss
about it, fine days.

943
01:05:44,320 --> 01:05:48,320
So let's take a break for 20 minutes
and see you guys up to 20 minutes.

944
01:05:48,400 --> 01:05:54,360
They'd be okay.

945
01:05:54,360 --> 01:06:00,040
No, I already told you before even
executing this slide that we not verifying

946
01:06:00,040 --> 01:06:05,280
anything after clicking on log in,
but then it will give you an error.

947
01:06:05,280 --> 01:06:09,960
But after clicking on log in button,
we do not have anything to verify.

948
01:06:09,960 --> 01:06:10,280
Right.

949
01:06:10,280 --> 01:06:14,080
So it is taking click on, log in
and then fill that point.

950
01:06:14,080 --> 01:06:17,040
Only we put our execution script right.

951
01:06:17,360 --> 01:06:19,000
We didn't write anything after that.

952
01:06:19,000 --> 01:06:20,120
That's why it's this fast.

953
01:06:21,320 --> 01:06:22,680
If I put this

954
01:06:22,680 --> 01:06:26,000
error message, credentials
and any other thing verification point

955
01:06:26,160 --> 01:06:32,760
right
there, I will get some error message.

956
01:06:32,760 --> 01:06:36,280
Okay, So it's 2044 here. Great.

957
01:06:36,280 --> 01:06:38,640
Let's make it 21 five.

958
01:06:39,320 --> 01:06:40,000
Okay.

959
01:06:40,000 --> 01:06:41,160
20 minutes

960
01:06:48,600 --> 01:06:51,560
before the break, we have seen

961
01:06:51,560 --> 01:06:53,720
how we have executed.

962
01:06:53,720 --> 01:06:54,480
Right.

963
01:06:54,960 --> 01:06:57,000
My one best guess across

964
01:06:57,280 --> 01:07:01,800
state of data, across
three username and password.

965
01:07:02,160 --> 01:07:04,200
I executed my one best guess.

966
01:07:04,200 --> 01:07:05,000
Correct.

967
01:07:06,240 --> 01:07:07,760
But the question is

968
01:07:07,760 --> 01:07:10,680
but the question is how it is knowing

969
01:07:11,360 --> 01:07:16,320
that I have to pass username in username
and password in the password.

970
01:07:16,560 --> 01:07:18,120
How is it possible?

971
01:07:18,120 --> 01:07:22,960
So let me tell you this. Here

972
01:07:24,520 --> 01:07:26,440
is if you see,

973
01:07:26,880 --> 01:07:28,800
when I defined my method to make them,

974
01:07:28,800 --> 01:07:31,400
I took best guess, which is my request.

975
01:07:32,400 --> 01:07:35,120
Inside this I am writing here is spring

976
01:07:38,240 --> 01:07:40,880
username comma

977
01:07:41,560 --> 01:07:42,840
spring

978
01:07:44,360 --> 01:07:45,440
hotspot.

979
01:07:46,000 --> 01:07:48,760
When I am writing this
I am defining the order.

980
01:07:49,040 --> 01:07:50,400
What is the order?

981
01:07:50,400 --> 01:07:54,600
The first value, the values
from this column.

982
01:07:54,600 --> 01:07:56,680
From the first column. Right.

983
01:07:56,680 --> 01:08:01,320
The first column values
will always come in my phone's display.

984
01:08:02,120 --> 01:08:03,480
All of this

985
01:08:04,600 --> 01:08:05,320
in the column.

986
01:08:05,320 --> 01:08:07,400
Values will always go in my

987
01:08:08,640 --> 01:08:12,600
statements.

988
01:08:12,600 --> 01:08:13,520
Getting a

989
01:08:18,840 --> 01:08:21,240
now, Now what is the issue?

990
01:08:21,320 --> 01:08:22,440
What is the issue here?

991
01:08:22,440 --> 01:08:25,560
See if I change

992
01:08:27,080 --> 01:08:28,560
late, I'm not aware.

993
01:08:28,560 --> 01:08:32,520
Maybe I am writing like this

994
01:08:36,440 --> 01:08:37,800
in first column.

995
01:08:37,800 --> 01:08:40,200
I have used a password

996
01:08:40,200 --> 01:08:42,320
and in second column I've used to mean

997
01:08:44,120 --> 01:08:47,960
what would happen in that case.

998
01:08:47,960 --> 01:08:52,040
It will take this user name
as human nature in 1 to 3.

999
01:08:53,440 --> 01:08:55,880
This one and it will take password

1000
01:08:55,880 --> 01:08:59,880
is and mean.

1001
01:08:59,880 --> 01:09:04,080
Yes, we will not be able to log in
in this case. Why?

1002
01:09:04,080 --> 01:09:07,720
We will not be able to log in in this case
because the order is changed

1003
01:09:07,720 --> 01:09:13,040
now, we were expecting something else.

1004
01:09:13,040 --> 01:09:14,680
It is giving us something else.

1005
01:09:14,680 --> 01:09:17,760
So now let's try to change the order.

1006
01:09:18,040 --> 01:09:19,480
Right. For two users

1007
01:09:24,080 --> 01:09:26,080
to correct.

1008
01:09:26,200 --> 01:09:28,400
But I'm just telling you this part, right?

1009
01:09:28,400 --> 01:09:30,720
I'm just telling you this part as of now.

1010
01:09:30,720 --> 01:09:36,320
So now let me put one thing here
for maybe a session.

1011
01:09:36,320 --> 01:09:52,880
So inside my log in,
I'm going to write for this welcome text.

1012
01:09:53,200 --> 01:09:54,880
I I'm copying this data.

1013
01:09:54,880 --> 01:09:58,600
What is this the element of my welcome
attribute, Right.

1014
01:09:58,680 --> 01:10:03,440
The only thing I'm copying is my welcome
attribute element.

1015
01:10:03,480 --> 01:10:05,520
You all have this element, right?

1016
01:10:05,880 --> 01:10:11,040
I'm copying it just to check
whether my log in is working or not.

1017
01:10:11,040 --> 01:10:13,920
And then I change the parameters.

1018
01:10:13,920 --> 01:10:17,640
So inside my data, when I click on log in,

1019
01:10:18,640 --> 01:10:21,600
after clicking on log in, I'm seeing if

1020
01:10:22,960 --> 01:10:26,680
if my welcome is displayed.

1021
01:10:27,520 --> 01:10:27,920
Right.

1022
01:10:27,920 --> 01:10:34,800
If it is displayed, then please stay.

1023
01:10:34,800 --> 01:10:36,440
This is fuzzed

1024
01:10:37,880 --> 01:10:38,880
ends,

1025
01:10:39,800 --> 01:10:40,680
right?

1026
01:10:42,040 --> 01:10:44,080
This is

1027
01:10:46,680 --> 01:10:49,080
the correct.

1028
01:10:49,080 --> 01:10:51,640
So intentionally you'll see I'm passing

1029
01:10:52,240 --> 01:10:55,760
username instead of password in a password
instead of username.

1030
01:10:55,760 --> 01:10:56,600
Correct?

1031
01:10:57,040 --> 01:10:59,880
One correct username and password.

1032
01:11:00,360 --> 01:11:02,360
Third invalid credentials.

1033
01:11:02,360 --> 01:11:05,400
The combinations I am passing in this now,

1034
01:11:05,400 --> 01:11:14,480
see how it works.

1035
01:11:14,480 --> 01:11:17,120
This will do a question migrate

1036
01:11:17,120 --> 01:11:20,440
how it will identify which one is username

1037
01:11:20,440 --> 01:11:25,680
and which one is correct.

1038
01:11:25,680 --> 01:11:29,640
Now you'll see here,

1039
01:11:29,640 --> 01:11:33,000
observe it closely instead of username.

1040
01:11:33,000 --> 01:11:38,600
It is entering password and instead of
password it intended username right there.

1041
01:11:38,640 --> 01:11:40,440
So I'm not able to log in first.

1042
01:11:40,440 --> 01:11:41,240
When Now.

1043
01:11:41,240 --> 01:11:45,760
Second is because I'm writing
correctly username and password.

1044
01:11:45,960 --> 01:11:49,200
I will be able to log in.

1045
01:11:49,200 --> 01:11:49,640
Michael.

1046
01:11:49,640 --> 01:11:53,160
One, two, three, four, five
and then correct password to see.

1047
01:11:53,160 --> 01:11:54,880
I'm able to log in.

1048
01:11:54,880 --> 01:11:58,880
Now. The third one is again
invalid username and password.

1049
01:12:00,720 --> 01:12:03,920
No wrong credentials obviously

1050
01:12:07,960 --> 01:12:10,320
stronger digits again not working

1051
01:12:10,320 --> 01:12:13,080
right and then it will close my browser
for sure.

1052
01:12:13,280 --> 01:12:15,160
Right. So now what is happening here?

1053
01:12:15,160 --> 01:12:18,680
See, just one best guess is fast
and to test

1054
01:12:18,880 --> 01:12:20,640
this are pre

1055
01:12:24,320 --> 01:12:27,600
usually correct but right now
just really show you this part right.

1056
01:12:27,600 --> 01:12:29,360
I'm not using a solution just to show you.

1057
01:12:29,360 --> 01:12:32,400
All right
If you one day I will use that also.

1058
01:12:32,520 --> 01:12:32,960
Right.

1059
01:12:33,040 --> 01:12:34,680
I just wanted to keep it simple.

1060
01:12:34,680 --> 01:12:36,240
That's why I used

1061
01:12:36,520 --> 01:12:39,960
a third card also to write

1062
01:12:43,320 --> 01:12:53,880
fine.

1063
01:12:53,880 --> 01:12:54,480
All right.

1064
01:12:54,480 --> 01:12:56,960
So that is understood. Yeah.

1065
01:12:56,960 --> 01:13:02,440
I can invest, investigate.

1066
01:13:02,440 --> 01:13:05,960
You need to put this way, guys.

1067
01:13:06,320 --> 01:13:07,560
Right. The necessity.

1068
01:13:07,560 --> 01:13:13,640
Make it easier just because we need to see
what we actually doing.

1069
01:13:13,640 --> 01:13:14,680
Right. What are we doing?

1070
01:13:14,680 --> 01:13:16,800
Actually, we need to see that part.

1071
01:13:16,800 --> 01:13:19,600
That's why
I am putting enough ends doing this again.

1072
01:13:19,640 --> 01:13:20,160
Sometimes

1073
01:13:21,160 --> 01:13:21,880
in your actual

1074
01:13:21,880 --> 01:13:25,800
execution, then you will be having 1000
functions, 1000 test.

1075
01:13:26,000 --> 01:13:29,480
If you put going this again
for every method, again, if we take it

1076
01:13:29,480 --> 01:13:33,400
just to execute right there,
you don't need to put that much of it.

1077
01:13:33,400 --> 01:13:37,000
If your application is very responsive,
you can simply execute

1078
01:13:37,000 --> 01:13:40,640
your test cases
right in a single to intentionally.

1079
01:13:40,640 --> 01:13:42,320
We are putting this much of work here

1080
01:13:42,320 --> 01:13:45,040
so that we can actually see
what we're implementing.

1081
01:13:46,440 --> 01:13:50,880
So remember, guys, when you use this data
provider class, the order

1082
01:13:51,000 --> 01:13:54,520
you must remember rate
the order you are following

1083
01:13:54,520 --> 01:13:57,800
to enter the credentials,
the username and password.

1084
01:13:57,800 --> 01:13:58,360
Okay?

1085
01:13:58,360 --> 01:14:02,200
And in the same order,
the way you enter the details in your data

1086
01:14:02,200 --> 01:14:05,040
provided,
you have to mention this parameter

1087
01:14:05,240 --> 01:14:09,200
string username is being password
or if there is any other parameter,

1088
01:14:09,400 --> 01:14:12,200
you have to make sure that this username

1089
01:14:12,200 --> 01:14:15,520
is coming under the username
and password is coming another person.

1090
01:14:16,440 --> 01:14:18,400
So all that is important to you.

1091
01:14:18,400 --> 01:14:27,120
Clear.

1092
01:14:27,120 --> 01:14:27,920
All right.

1093
01:14:28,200 --> 01:14:31,840
Now the next important point
today's the next important point here is

1094
01:14:33,440 --> 01:14:34,520
for three users.

1095
01:14:34,520 --> 01:14:35,320
Five users.

1096
01:14:35,320 --> 01:14:38,440
Let's 14 users. It is fine. Right?

1097
01:14:38,720 --> 01:14:41,840
Right now I have this country,
you 14 users also it is fine

1098
01:14:42,600 --> 01:14:46,280
even for 20 users.

1099
01:14:46,280 --> 01:14:49,040
What if I have 1000 users?

1100
01:14:49,040 --> 01:14:51,240
Is it a good idea to write this data?

1101
01:14:51,240 --> 01:14:55,800
It is less for 1000 users, no.

1102
01:14:56,000 --> 01:14:56,760
Right.

1103
01:14:57,240 --> 01:14:59,640
We do not have that much of time to write.

1104
01:14:59,640 --> 01:15:02,760
This data
provided a class for 1000 or 2000 users.

1105
01:15:03,040 --> 01:15:06,360
In that case, data
provided is not a good idea.

1106
01:15:06,960 --> 01:15:11,080
Remember,
if the volume of your data is small,

1107
01:15:11,480 --> 01:15:14,400
data provider is doable, is feasible,

1108
01:15:14,400 --> 01:15:17,280
but if the volume of your data is large,

1109
01:15:18,040 --> 01:15:20,160
your data provider is not visible.

1110
01:15:20,360 --> 01:15:25,200
In that case, we have to go with one
separate Excel file.

1111
01:15:25,240 --> 01:15:27,440
One separate is data file.

1112
01:15:27,440 --> 01:15:31,080
It could be Excel, it could be JSON,
it could be properties, it could be CSP,

1113
01:15:31,160 --> 01:15:33,240
it could be any other file. Right?

1114
01:15:33,240 --> 01:15:38,960
So in our framework, we will see how we
can pass our data from simply

1115
01:15:40,800 --> 01:15:47,040
static.

1116
01:15:47,040 --> 01:15:49,240
This is the answer to the question.

1117
01:15:49,240 --> 01:15:51,360
One is for records, right?

1118
01:15:51,360 --> 01:15:55,320
Well, is it
convenient for large volumes of data?

1119
01:15:55,320 --> 01:15:56,640
So the answer is for large

1120
01:15:56,640 --> 01:16:00,440
volume of data, it is not convenient
for small volume of data.

1121
01:16:00,520 --> 01:16:02,560
It is convenient for you, Mike.

1122
01:16:02,560 --> 01:16:06,000
You ask the question how it will identify
which one username password

1123
01:16:06,000 --> 01:16:09,320
I already answered the question right now.

1124
01:16:09,520 --> 01:16:14,720
The the third question you ask that
question as to remember can we change?

1125
01:16:15,200 --> 01:16:16,920
Can we change the size of any.

1126
01:16:16,920 --> 01:16:18,880
So on studies, Yes, we can change how?

1127
01:16:18,880 --> 01:16:20,240
Let me change it.

1128
01:16:20,240 --> 01:16:22,680
Instead of writing three,
I'm writing four.

1129
01:16:22,960 --> 01:16:23,560
Right.

1130
01:16:23,560 --> 01:16:26,840
And then one more username and password
I'm passing here.

1131
01:16:27,400 --> 01:16:27,920
Right.

1132
01:16:28,600 --> 01:16:32,560
Can you see here I have two plus three

1133
01:16:32,560 --> 01:16:36,240
common zero and here
I have to pass three one.

1134
01:16:36,880 --> 01:16:37,240
Right.

1135
01:16:38,360 --> 01:16:40,000
Because my for

1136
01:16:40,000 --> 01:16:42,480
my four draw is extended right here.

1137
01:16:42,640 --> 01:16:44,520
One right standard that is for true.

1138
01:16:44,520 --> 01:16:48,200
So I am passing this data for four to

1139
01:16:52,040 --> 01:16:53,240
the actually

1140
01:16:53,760 --> 01:16:56,160
not only here
but in every single framework

1141
01:16:56,160 --> 01:16:58,160
you have to implement that concept.

1142
01:16:58,160 --> 01:17:00,160
That's why we taught you that part.

1143
01:17:00,360 --> 01:17:04,000
Again, we will see how we can do that
and which is specific data

1144
01:17:04,000 --> 01:17:06,080
we need to pull out
from the Excel files. Right?

1145
01:17:06,400 --> 01:17:08,600
That is a separate session for that.

1146
01:17:08,640 --> 01:17:09,880
And do we do that for sure?

1147
01:17:09,880 --> 01:17:13,160
Don't worry about it. All right.

1148
01:17:13,440 --> 01:17:16,200
So this time, this time when I execute

1149
01:17:16,200 --> 01:17:20,000
my best guess, tell me, guys, across
how many users my best

1150
01:17:20,040 --> 01:17:22,880
guess will execute,
How many times my best guess will execute

1151
01:17:25,200 --> 01:17:28,680
or correct.

1152
01:17:28,680 --> 01:18:11,920
So let's go ahead and run.

1153
01:18:11,920 --> 01:18:14,120
Ideally, they should be private.

1154
01:18:14,120 --> 01:18:15,840
They should be public, right?

1155
01:18:15,840 --> 01:18:19,000
Because you never know you're
going to their accurate animator's rate.

1156
01:18:19,360 --> 01:18:20,960
So they should be public. You can use

1157
01:18:29,280 --> 01:18:33,720
in way
in real life examples being examples.

1158
01:18:33,720 --> 01:18:37,000
We don't use data provider
that often, right?

1159
01:18:37,200 --> 01:18:41,520
We use Excel by most of their times
since this is a part of syllabus

1160
01:18:41,920 --> 01:18:45,200
and you should know
in case if you come across a situation

1161
01:18:45,200 --> 01:18:48,640
where you have to implement
this data provider class, the next way

1162
01:18:48,840 --> 01:18:53,360
we are teaching you this concept, fine.

1163
01:18:53,640 --> 01:18:58,440
So now if you see the overall test
pass to and failure to write,

1164
01:18:58,440 --> 01:18:59,800
it means how many test scores

1165
01:18:59,800 --> 01:19:03,920
as it were executed for initial,
I have just one test case

1166
01:19:04,240 --> 01:19:07,240
since it executes across
four different sets of data.

1167
01:19:07,240 --> 01:19:11,040
What you see here is that four different
sets of data we are getting for

1168
01:19:11,400 --> 01:19:15,320
it means what
the size of your ETI can be changed

1169
01:19:16,560 --> 01:19:18,640
according to your requirement.

1170
01:19:18,640 --> 01:19:32,640
What is that answer to your question?

1171
01:19:32,640 --> 01:19:33,120
All right.

1172
01:19:33,120 --> 01:19:35,280
So so now

1173
01:19:36,360 --> 01:19:38,720
so far, data provider class is done.

1174
01:19:40,680 --> 01:19:43,320
Let's go and check the slides.

1175
01:19:43,320 --> 01:19:44,240
That ought to be right.

1176
01:19:44,240 --> 01:19:48,480
No, while we cross 52 already.

1177
01:19:48,480 --> 01:19:52,600
So data provider methods compared
and returns to the array of object

1178
01:19:52,800 --> 01:19:53,880
we have implemented.

1179
01:19:53,880 --> 01:19:58,040
We have seen the test were done
once for each set of data

1180
01:19:58,560 --> 01:20:01,680
is specified by the data object.

1181
01:20:02,360 --> 01:20:03,360
Data object.

1182
01:20:03,360 --> 01:20:08,280
Remember we have seen this data
that was the object.

1183
01:20:08,280 --> 01:20:09,840
This is the whole look for you guys.

1184
01:20:09,840 --> 01:20:14,480
What you have to do is you have to add
five different employees, right?

1185
01:20:14,640 --> 01:20:18,440
Using your data provider concept,
you have to pass false name,

1186
01:20:18,760 --> 01:20:21,000
last name, username and password.

1187
01:20:21,840 --> 01:20:22,200
All right?

1188
01:20:22,200 --> 01:20:25,400
And then you have to verify
that your employee has been added

1189
01:20:25,400 --> 01:20:27,840
successfully and then close the delta.

1190
01:20:28,560 --> 01:20:28,960
Okay.

1191
01:20:28,960 --> 01:20:35,640
This is your task.

1192
01:20:35,640 --> 01:20:38,720
Now the next topic is listener

1193
01:20:39,840 --> 01:20:42,120
fine.

1194
01:20:42,120 --> 01:20:44,640
Now let's talk about listeners
with important topic.

1195
01:20:44,640 --> 01:20:51,360
They before going into the listeners

1196
01:20:51,600 --> 01:20:54,000
right before going into the listeners,
let me ask

1197
01:20:54,840 --> 01:20:57,240
how many of you ways
you still remember the concept

1198
01:20:57,240 --> 01:21:00,120
of interface

1199
01:21:06,680 --> 01:21:07,240
right?

1200
01:21:08,640 --> 01:21:12,200
What you have inside interface based

1201
01:21:21,600 --> 01:21:24,080
methods without body correct

1202
01:21:24,080 --> 01:21:29,720
and implemented methods basically, here

1203
01:21:30,080 --> 01:21:32,320
we are going to talk about new topic,

1204
01:21:32,880 --> 01:21:35,000
which is listener, right

1205
01:21:36,280 --> 01:21:38,720
is the word is self-explanatory.

1206
01:21:38,760 --> 01:21:41,880
Listener means the one who listen. Right.

1207
01:21:42,360 --> 01:21:44,400
So here who is going to listen as the

1208
01:21:45,440 --> 01:21:50,160
listener is going listen us not right
while it's not is going to listen us.

1209
01:21:50,440 --> 01:21:52,320
We have to understand this.

1210
01:21:52,320 --> 01:21:57,840
Okay Remember, I'm going to write here

1211
01:21:58,120 --> 01:22:01,800
listeners fine

1212
01:22:02,360 --> 01:22:05,480
to listen

1213
01:22:09,360 --> 01:22:12,720
every minor detail

1214
01:22:15,320 --> 01:22:17,400
of our

1215
01:22:17,600 --> 01:22:20,560
of our execution

1216
01:22:20,560 --> 01:22:22,720
right.

1217
01:22:22,720 --> 01:22:24,280
We need

1218
01:22:28,920 --> 01:22:31,840
what we have to do,
basically, is if I want to monitor

1219
01:22:31,840 --> 01:22:35,400
all the small details,
I know we are getting the report.

1220
01:22:35,400 --> 01:22:36,680
That is fine.

1221
01:22:36,680 --> 01:22:38,160
We are getting so many other things.

1222
01:22:38,160 --> 01:22:39,440
That is also fine.

1223
01:22:39,440 --> 01:22:42,640
What listeners does basically if you want,

1224
01:22:43,560 --> 01:22:48,760
is specific going up information
in your execution report, in your output.

1225
01:22:49,120 --> 01:22:49,920
Right?

1226
01:22:49,920 --> 01:22:53,200
So the basic of listeners
we are which we are going to learn here,

1227
01:22:53,440 --> 01:22:56,560
it gives us some additional information,
right?

1228
01:22:56,560 --> 01:22:57,480
What it gives

1229
01:22:57,480 --> 01:23:01,400
maybe gives us some additional
information, which is very specific.

1230
01:23:02,000 --> 01:23:06,120
We can select which information
we need, which information we don't need.

1231
01:23:06,480 --> 01:23:07,320
All right.

1232
01:23:07,400 --> 01:23:09,840
Now, when I say we can select

1233
01:23:09,840 --> 01:23:12,880
which information we need
and which information we don't need, it

1234
01:23:12,880 --> 01:23:17,360
means would weaken,
provide the definition of method,

1235
01:23:17,600 --> 01:23:22,200
the body of the method
according to our own requirements.

1236
01:23:23,320 --> 01:23:24,040
Right

1237
01:23:24,600 --> 01:23:27,960
According to our own requirements,
we can define organic.

1238
01:23:27,960 --> 01:23:30,440
Vladimir We can define the body.

1239
01:23:30,720 --> 01:23:34,120
Now, when I'm saying we can define
the definition, we can define the body.

1240
01:23:34,120 --> 01:23:35,160
It means what?

1241
01:23:35,160 --> 01:23:37,720
We have to use one interface that

1242
01:23:40,000 --> 01:23:41,200
allocates.

1243
01:23:42,400 --> 01:23:46,400
We have to use one interface for this
name, right?

1244
01:23:46,560 --> 01:23:48,120
What is that interface?

1245
01:23:48,120 --> 01:23:49,560
Let's see this

1246
01:23:52,880 --> 01:23:55,920
listener is defined as an interface

1247
01:23:56,080 --> 01:24:00,600
that modifies
the default existing behavior.

1248
01:24:00,600 --> 01:24:04,560
Listeners implement the interface
which interface

1249
01:24:04,560 --> 01:24:07,920
I test Listener.

1250
01:24:07,920 --> 01:24:10,800
This is the interface
we have inside testing.

1251
01:24:10,800 --> 01:24:13,880
We are going to implement this test
engine.

1252
01:24:13,880 --> 01:24:16,960
Listen,
if I test listener right, I make the you.

1253
01:24:16,960 --> 01:24:17,520
What is this?

1254
01:24:17,520 --> 01:24:21,080
I tested this now
how we implement this particular listener

1255
01:24:21,360 --> 01:24:25,240
what are the implementation
methods or methods without bodies

1256
01:24:25,240 --> 01:24:29,120
are available inside this listener,
inside this interface

1257
01:24:29,320 --> 01:24:32,080
and how we can provide the body
of these methods.

1258
01:24:32,080 --> 01:24:34,160
Every single thing
we will see into returns.

1259
01:24:34,240 --> 01:24:37,920
I'm just trying to explain right now.

1260
01:24:38,080 --> 01:24:43,080
It is used in Selenium by implementing
the listener interface that can also find

1261
01:24:45,040 --> 01:24:47,120
now the next point it allows

1262
01:24:48,080 --> 01:24:51,000
customizing testing
did reports or results.

1263
01:24:51,320 --> 01:24:53,200
So there are many types of test engine.

1264
01:24:53,200 --> 01:24:55,440
This nurse available. Right?

1265
01:24:55,440 --> 01:24:57,800
We will see all of them.

1266
01:24:57,800 --> 01:25:02,720
We can define and change or modify
the test in default behavior.

1267
01:25:02,720 --> 01:25:04,560
Whatever the output we are getting.

1268
01:25:04,560 --> 01:25:08,960
As of now, we can change this point
according to our big flag.

1269
01:25:08,960 --> 01:25:14,760
To me, we can define our requirement,
our need inside the method of the body.

1270
01:25:15,000 --> 01:25:19,440
And then when we execute, this
listener will provide the output

1271
01:25:19,440 --> 01:25:22,440
according to our own requirements.

1272
01:25:22,440 --> 01:25:25,080
Ladies understood Concept of listener.

1273
01:25:26,000 --> 01:25:28,640
For example, for example

1274
01:25:29,160 --> 01:25:32,040
Node is working for some X-Y-Z clients.

1275
01:25:32,040 --> 01:25:34,560
IT Bank of New York.

1276
01:25:34,560 --> 01:25:37,520
Now in his in this project
there is a requirement

1277
01:25:38,160 --> 01:25:40,600
whatever the test
because this you are executing

1278
01:25:41,160 --> 01:25:45,400
I need the name of only
test cases which are paid

1279
01:25:46,440 --> 01:25:49,680
correct
in the report proclaimed can ask anything

1280
01:25:49,680 --> 01:25:53,280
great client can ask
to snatch some stars from the sky

1281
01:25:53,520 --> 01:25:56,440
and then you have to implement
that logic as well that if

1282
01:25:58,240 --> 01:26:00,480
so, clients is.

1283
01:26:00,480 --> 01:26:03,040
I need report in this report

1284
01:26:03,280 --> 01:26:07,400
you need to specifically mention
only those discuses the chirping.

1285
01:26:08,160 --> 01:26:11,200
At the same time
Mike is working for Amazon, Lexy

1286
01:26:11,720 --> 01:26:16,280
and in his project
the requirement is I need execution

1287
01:26:16,280 --> 01:26:19,880
reports having the name
only for those test scores which are

1288
01:26:21,520 --> 01:26:22,240
correct

1289
01:26:24,560 --> 01:26:30,280
guys listening to me or not.

1290
01:26:30,280 --> 01:26:37,120
Now know that

1291
01:26:37,120 --> 01:26:40,240
if that is something else,
what I am saying basically is

1292
01:26:41,120 --> 01:26:44,760
both Mike and Node are using simplest
in the project.

1293
01:26:45,440 --> 01:26:47,760
Correct.

1294
01:26:47,760 --> 01:26:51,680
At the same time, they're working
for both different clients and these two

1295
01:26:51,680 --> 01:26:55,520
different clients customers are asking
for two different requirements.

1296
01:26:56,120 --> 01:26:58,680
One states use test and G.

1297
01:26:58,680 --> 01:27:01,320
Give me the report inside your default.

1298
01:27:01,320 --> 01:27:03,560
I need only those test cases
which are paid

1299
01:27:04,400 --> 01:27:06,600
the name of those test cases

1300
01:27:06,600 --> 01:27:10,480
at the same,
another customer is asking for the report

1301
01:27:10,600 --> 01:27:13,480
having all the names of those tests
because this skip

1302
01:27:14,400 --> 01:27:18,240
right when you have same structured when,
you have same framework.

1303
01:27:18,400 --> 01:27:20,440
When you have same default behavior.

1304
01:27:20,600 --> 01:27:23,880
How you can generate to different
report is nurses.

1305
01:27:24,280 --> 01:27:29,080
I have an interface, implement
my interface, implement me

1306
01:27:29,320 --> 01:27:33,320
all of my methods,
and then give the definition, the method,

1307
01:27:33,320 --> 01:27:37,960
the body of my methods according to
your own needs right, we got the solution.

1308
01:27:38,920 --> 01:27:39,520
We've been going

1309
01:27:39,520 --> 01:27:42,960
to implement
this particular listener interface

1310
01:27:43,320 --> 01:27:47,160
and then in the method body we will
provide the body according to our need.

1311
01:27:47,440 --> 01:27:48,160
Correct.

1312
01:27:48,880 --> 01:27:55,320
That is makes sense.

1313
01:27:55,320 --> 01:27:55,760
Fine.

1314
01:27:56,080 --> 01:28:00,280
So now explanation is done,
definition is done.

1315
01:28:00,680 --> 01:28:11,760
Let's implement it.

1316
01:28:11,760 --> 01:28:15,120
I'm going to write you as

1317
01:28:15,200 --> 01:28:19,040
business.

1318
01:28:19,040 --> 01:28:19,480
Okay.

1319
01:28:20,840 --> 01:28:21,600
Right.

1320
01:28:22,000 --> 01:28:23,680
So this in this next class.

1321
01:28:23,680 --> 01:28:25,360
Now I said

1322
01:28:25,680 --> 01:28:30,000
if I have to implement
any interface in Java,

1323
01:28:30,120 --> 01:28:42,360
which keyboard
I have to use, implement state,

1324
01:28:42,840 --> 01:28:45,640
so I'm going to write, implement

1325
01:28:46,320 --> 01:28:49,080
which listener I

1326
01:28:53,480 --> 01:28:56,360
we connect

1327
01:29:00,880 --> 01:29:06,320
originates now.

1328
01:29:07,800 --> 01:29:10,520
Now if you go here,

1329
01:29:10,520 --> 01:29:11,640
if these

1330
01:29:12,280 --> 01:29:14,760
types of listener interests and you can
you see

1331
01:29:16,160 --> 01:29:19,840
I astute listener I reporter
I am method interceptor

1332
01:29:20,080 --> 01:29:24,480
I'm going to use this I test listener
this one we are going to use

1333
01:29:26,560 --> 01:29:27,480
now inside

1334
01:29:27,480 --> 01:29:30,200
this listener I have on start method

1335
01:29:30,760 --> 01:29:35,080
on finish on to start on first year
artist Skip

1336
01:29:35,400 --> 01:29:39,000
right on this success

1337
01:29:47,720 --> 01:29:50,400
I recognize

1338
01:29:50,400 --> 01:29:52,600
I this listener

1339
01:29:52,600 --> 01:29:55,160
now we are going to implement

1340
01:29:55,280 --> 01:29:57,560
all of these methods one by okay

1341
01:29:58,560 --> 01:30:01,560
so I'm going to write here public

1342
01:30:03,440 --> 01:30:05,040
mind.

1343
01:30:05,040 --> 01:30:08,120
I will stay on this

1344
01:30:12,160 --> 01:30:16,720
part here

1345
01:30:17,520 --> 01:30:20,120
because I'm going to use my it.

1346
01:30:20,680 --> 01:30:27,840
So another is I test, I test

1347
01:30:28,880 --> 01:30:32,800
it is right
I'm going to get for every single method,

1348
01:30:33,720 --> 01:30:35,960
then I'm going to implement. Right.

1349
01:30:36,000 --> 01:30:39,760
This interface in every method, I'm
going to capture the result.

1350
01:30:40,320 --> 01:30:42,880
Okay. So here I'm going to write the body.

1351
01:30:42,880 --> 01:30:46,920
So my body would be let's think
that I'm going to write right now.

1352
01:30:46,920 --> 01:30:48,840
Very simple requirement, right?

1353
01:30:48,840 --> 01:30:51,240
I'm not going to take any advanced part

1354
01:30:51,240 --> 01:30:55,120
because we are keeping it
for our framework in framework.

1355
01:30:55,120 --> 01:30:57,040
We will implement a couple of more things.

1356
01:30:57,040 --> 01:31:00,600
Right now since this is a basic
and the elements of testing.

1357
01:31:00,800 --> 01:31:05,360
So I'm telling you the basics of listener
so that you guys can easily digest it.

1358
01:31:05,880 --> 01:31:07,640
All right. I'm going to write here

1359
01:31:08,640 --> 01:31:11,200
the starting test

1360
01:31:13,920 --> 01:31:15,240
with the

1361
01:31:17,120 --> 01:31:18,800
what does it mean?

1362
01:31:18,800 --> 01:31:23,600
This particular
method on test is start returns the name

1363
01:31:23,840 --> 01:31:28,520
the name of the test case,
which is going to execute it first,

1364
01:31:29,600 --> 01:31:31,480
which is going to execute it for us.

1365
01:31:31,480 --> 01:31:35,000
So I'm going to write the design dot, get

1366
01:31:37,880 --> 01:31:38,760
on test

1367
01:31:38,760 --> 01:31:42,480
start
method will give you the name of the test

1368
01:31:42,480 --> 01:31:46,160
which will execute
in the starting of the execution.

1369
01:31:46,200 --> 01:31:49,200
Clear
The first method which we have implemented

1370
01:31:49,200 --> 01:31:53,080
on test start.

1371
01:31:53,080 --> 01:31:55,120
I can customize this message as well.

1372
01:31:55,120 --> 01:31:57,440
You can write
whatever the method you want to write.

1373
01:31:58,080 --> 01:32:01,240
Okay.

1374
01:32:01,240 --> 01:32:02,400
Yes, exactly.

1375
01:32:02,400 --> 01:32:02,880
Exactly.

1376
01:32:02,880 --> 01:32:05,680
The first test is the first test you need.

1377
01:32:05,680 --> 01:32:09,560
It will give you that.

1378
01:32:09,560 --> 01:32:11,160
Now let's take another method.

1379
01:32:11,160 --> 01:32:13,120
So I'm going to write

1380
01:32:15,360 --> 01:32:17,680
public void

1381
01:32:22,720 --> 01:32:23,840
on test of success.

1382
01:32:23,840 --> 01:32:28,640
So again, the first thing is
I test result because that is it.

1383
01:32:28,680 --> 01:32:33,240
I'm going to capture
and inside this I'm going to write it is

1384
01:32:37,200 --> 01:32:39,280
this is

1385
01:32:39,280 --> 01:32:43,520
test fast, right?

1386
01:32:44,280 --> 01:32:47,520
And then if you want to
take the name again so you can start

1387
01:32:48,600 --> 01:32:49,560
gaining

1388
01:32:52,200 --> 01:32:54,080
radiance or you can simply write

1389
01:32:54,080 --> 01:32:59,600
one more thing here like this, it's just

1390
01:33:02,360 --> 01:33:04,080
we are

1391
01:33:05,160 --> 01:33:07,960
we are capturing the

1392
01:33:10,000 --> 01:33:13,280
final screenshot at the end after success.

1393
01:33:13,960 --> 01:33:16,360
If your test is success,
you are taking the screenshot.

1394
01:33:16,800 --> 01:33:20,320
So you're writing this,
you can customize it, right?

1395
01:33:20,320 --> 01:33:22,600
Like I said,
according to your own requirement.

1396
01:33:23,000 --> 01:33:28,280
Now the third one, the third one is public
void on test

1397
01:33:30,560 --> 01:33:33,440
it right for the starting

1398
01:33:34,000 --> 01:33:36,240
for success for Skip.

1399
01:33:37,200 --> 01:33:38,360
So again,

1400
01:33:39,360 --> 01:33:41,880
I just I'm going to write here.

1401
01:33:42,360 --> 01:33:45,720
Fine And then I'm going to write this

1402
01:33:50,680 --> 01:33:55,000
if it's success is

1403
01:34:05,200 --> 01:34:07,960
the name correct?

1404
01:34:07,960 --> 01:34:08,720
It's the start.

1405
01:34:08,720 --> 01:34:13,160
Then test sex is then test done.

1406
01:34:14,200 --> 01:34:16,400
All right, now see another one

1407
01:34:23,760 --> 01:34:25,840
or test failure rate

1408
01:34:50,120 --> 01:34:50,960
test case is.

1409
01:34:50,960 --> 01:34:53,200
And then I will capture
the name of the test.

1410
01:34:53,200 --> 01:34:53,920
Correct.

1411
01:34:54,960 --> 01:34:58,280
Now The next one is

1412
01:35:01,920 --> 01:35:03,200
I'm going to take

1413
01:35:03,200 --> 01:35:15,240
another one. See?

1414
01:35:15,240 --> 01:35:23,960
Just come on.

1415
01:35:23,960 --> 01:35:26,040
I'm going to write another method called

1416
01:35:28,360 --> 01:35:29,400
There is another method

1417
01:35:29,400 --> 01:35:32,600
inside this on test failure,

1418
01:35:32,600 --> 01:35:34,280
but within

1419
01:35:36,480 --> 01:35:37,920
this percentage.

1420
01:35:37,920 --> 01:35:38,880
All right.

1421
01:35:38,920 --> 01:35:41,920
So in this one also,
we need to pass this test result.

1422
01:35:41,920 --> 01:35:45,080
And then let's see,
I'm going to pass here.

1423
01:35:45,080 --> 01:35:46,240
This just

1424
01:35:54,400 --> 01:35:57,120
anyway, you're not going to use
all of these methods, right?

1425
01:35:57,160 --> 01:36:03,560
You will use either for test to start,
test to success test skimmed this to fail.

1426
01:36:03,560 --> 01:36:06,200
But still I'm telling you
all the other methods as well.

1427
01:36:06,520 --> 01:36:08,720
All the methods which again have yet

1428
01:36:08,720 --> 01:36:11,680
for these important
methods are already implemented.

1429
01:36:11,680 --> 01:36:12,240
Right.

1430
01:36:12,240 --> 01:36:14,280
So let me give you to the last one.

1431
01:36:14,280 --> 01:36:15,960
I'm going to write public

1432
01:36:17,200 --> 01:36:21,200
void on start point on

1433
01:36:22,160 --> 01:36:27,720
like 16, the 16,

1434
01:36:28,520 --> 01:36:31,480
this one on test failure
but within success percentage.

1435
01:36:31,480 --> 01:36:34,240
This one someone

1436
01:36:40,920 --> 01:36:44,080
going to

1437
01:36:44,080 --> 01:36:45,360
that's fine.

1438
01:36:45,640 --> 01:36:48,880
So now another thing here
is I'm going to write

1439
01:36:48,880 --> 01:36:51,280
I test

1440
01:36:54,160 --> 01:36:56,880
on fact I'm going to write this context
as well

1441
01:36:56,880 --> 01:36:59,480
to get the actual context
of your test cases.

1442
01:37:00,000 --> 01:37:02,520
So here I'm not going to put anything

1443
01:37:02,520 --> 01:37:05,280
because method is not going to use much.

1444
01:37:05,880 --> 01:37:08,880
And then the last one I'm going to write
is for on

1445
01:37:11,240 --> 01:37:13,000
finish again the same.

1446
01:37:13,000 --> 01:37:15,200
So nobody because I don't need it.

1447
01:37:15,200 --> 01:37:20,880
On test Failure on Best Escape
Artist Success on test is start.

1448
01:37:20,880 --> 01:37:25,320
I have used this this nurse implements my

1449
01:37:25,360 --> 01:37:29,240
I test listener interface right now.

1450
01:37:29,240 --> 01:37:32,800
How these methods work
how this all of this methods work

1451
01:37:33,000 --> 01:37:37,680
this is something noticeable right
We have all these things with us.

1452
01:37:37,920 --> 01:37:42,440
But the point is how we can implement it,
how we can use

1453
01:37:42,440 --> 01:37:46,640
this particular list
in this class for my project, remember?

1454
01:37:46,640 --> 01:37:48,240
So let me explain you this point.

1455
01:37:48,240 --> 01:37:55,200
Where do I go?

1456
01:37:55,200 --> 01:37:56,120
If you see guys

1457
01:38:03,600 --> 01:38:06,800
in our project, we have,

1458
01:38:06,800 --> 01:38:09,040
let's say one, two,

1459
01:38:10,160 --> 01:38:16,560
three, four.

1460
01:38:16,560 --> 01:38:19,320
If you have four classes like this

1461
01:38:20,000 --> 01:38:25,240
or we have so many classes, I'm
just taking the example of four classes.

1462
01:38:25,240 --> 01:38:27,440
We have one configuration file.

1463
01:38:27,720 --> 01:38:31,440
What is the name of configuration
file based

1464
01:38:36,000 --> 01:38:36,720
in our test?

1465
01:38:36,720 --> 01:38:39,400
And we have

1466
01:38:40,360 --> 01:38:41,880
there is no property file.

1467
01:38:41,880 --> 01:38:46,600
We have great so far in our test
and we have DOT exemplified by

1468
01:38:46,600 --> 01:38:50,120
this is my configuration file, right?

1469
01:38:50,200 --> 01:38:51,160
It's just in Duratex.

1470
01:38:51,160 --> 01:38:55,200
So now what I want basically is

1471
01:38:55,960 --> 01:39:00,000
I'm going to write my list
net inside one class.

1472
01:39:00,000 --> 01:39:02,000
So this is my list.

1473
01:39:02,880 --> 01:39:05,920
Say I want to use this list.

1474
01:39:05,920 --> 01:39:09,840
Not across my class one, Class two,
Class three, class four everywhere.

1475
01:39:10,160 --> 01:39:12,120
So do I need to remind this list?

1476
01:39:12,120 --> 01:39:13,560
Not everywhere.

1477
01:39:13,560 --> 01:39:17,960
No. What I need to do
is I need to define this list.

1478
01:39:17,960 --> 01:39:20,040
No, In my standard or text.

1479
01:39:22,000 --> 01:39:24,000
From here, I'm going to get

1480
01:39:24,000 --> 01:39:29,040
my final report.

1481
01:39:29,040 --> 01:39:32,320
But in my this test
and do not take will file if you'll see

1482
01:39:32,680 --> 01:39:37,040
my a seven part
C to buy C three and C four.

1483
01:39:37,480 --> 01:39:40,320
All these four classes are covered.

1484
01:39:41,080 --> 01:39:41,440
Right?

1485
01:39:41,440 --> 01:39:46,440
All these four classes can be executed
from test and do not accessible fine.

1486
01:39:46,440 --> 01:39:49,040
So this is my common execution point.

1487
01:39:49,400 --> 01:39:52,960
This test segment is my common execution
point

1488
01:39:53,280 --> 01:39:57,680
from where I can execute
all of this classes at the same time.

1489
01:39:57,960 --> 01:40:01,080
At the same time, I want to utilize this

1490
01:40:01,120 --> 01:40:04,080
listener concept across all of my classes.

1491
01:40:04,240 --> 01:40:06,880
So what is the best place to put this?

1492
01:40:06,880 --> 01:40:10,440
The best place
to put this listener in my configuration?

1493
01:40:11,160 --> 01:40:11,880
Correct.

1494
01:40:11,880 --> 01:40:15,960
When I execute my test and do not examine
it, will use this listener

1495
01:40:16,200 --> 01:40:17,520
for all this classes.

1496
01:40:17,520 --> 01:40:20,280
It will give me the report
according to my own requirements.

1497
01:40:21,600 --> 01:40:22,560
Gauteng

1498
01:40:27,680 --> 01:40:28,720
Does it make sense?

1499
01:40:28,720 --> 01:40:31,600
The diagram in the explanation

1500
01:40:32,080 --> 01:40:36,960
make great.

1501
01:40:37,560 --> 01:40:40,560
Now the next point
which we are going to do is

1502
01:40:44,400 --> 01:40:48,360
we are going to implement this list
next in our question.

1503
01:40:49,400 --> 01:40:51,560
So let's say this is our test and class,

1504
01:40:51,560 --> 01:40:55,680
correct?

1505
01:40:55,680 --> 01:40:56,880
Let's deliver this group.

1506
01:40:56,880 --> 01:40:59,400
We don't need this group
any more right now.

1507
01:40:59,400 --> 01:41:02,160
We don't need it.

1508
01:41:02,160 --> 01:41:04,760
I'm going to write my list
next before test.

1509
01:41:05,240 --> 01:41:05,880
Right?

1510
01:41:05,880 --> 01:41:10,560
Even if I have multiple tests,
my list will be executed.

1511
01:41:10,680 --> 01:41:13,440
Right. For Will execute across all this.

1512
01:41:13,800 --> 01:41:16,400
So it will be defined above test.

1513
01:41:16,920 --> 01:41:17,320
All right.

1514
01:41:17,320 --> 01:41:20,160
I'm going to write it phase.

1515
01:41:20,240 --> 01:41:21,600
You'll see this step coming.

1516
01:41:21,600 --> 01:41:28,240
Right, listeners, inside this list.

1517
01:41:28,240 --> 01:41:31,320
Next, it will ask for the listener.

1518
01:41:32,000 --> 01:41:32,600
Right.

1519
01:41:32,600 --> 01:41:35,360
And inside
which class have this list nervous?

1520
01:41:35,560 --> 01:41:35,960
Tell me

1521
01:41:37,280 --> 01:41:39,080
that I have listener

1522
01:41:43,760 --> 01:41:44,120
guides.

1523
01:41:44,200 --> 01:41:45,200
Can you see

1524
01:41:47,160 --> 01:41:49,000
what is the part

1525
01:41:59,560 --> 01:42:00,240
correct

1526
01:42:03,680 --> 01:42:04,360
Class C

1527
01:42:04,360 --> 01:42:10,480
Listener's correctness.

1528
01:42:10,480 --> 01:42:15,440
Now, now let me do one thing.

1529
01:42:15,440 --> 01:42:19,280
Can we take any class right
for the listener, for example, I'm

1530
01:42:19,280 --> 01:42:21,400
going to take the basic one next C

1531
01:42:23,640 --> 01:42:26,040
the precondition
and the post condition one.

1532
01:42:26,040 --> 01:42:26,880
This is the class.

1533
01:42:26,880 --> 01:42:30,120
So my class name is precondition
in post condition.

1534
01:42:30,960 --> 01:42:31,720
Okay, fine.

1535
01:42:31,720 --> 01:42:33,520
I will go get

1536
01:42:33,800 --> 01:42:35,800
inside of my package.

1537
01:42:35,800 --> 01:42:44,320
One right, the class, one package.

1538
01:42:44,320 --> 01:42:47,440
I'm going to write it for class one

1539
01:42:47,440 --> 01:43:10,840
dot in.

1540
01:43:11,240 --> 01:43:14,720
Let's take any class
from class to find Don.

1541
01:43:15,720 --> 01:43:18,680
So if I go into by a C my any other one?

1542
01:43:18,680 --> 01:43:19,680
Let's see

1543
01:43:21,360 --> 01:43:23,400
if white is not taking me the class one.

1544
01:43:23,400 --> 01:43:43,080
What happened to that?

1545
01:43:43,080 --> 01:43:44,160
There is no column

1546
01:43:58,200 --> 01:43:59,920
class one package I'm going to take.

1547
01:43:59,920 --> 01:44:01,920
But it is not taking
it is not allowing me.

1548
01:44:01,920 --> 01:44:03,240
It is just giving me two options.

1549
01:44:03,240 --> 01:44:09,480
Class two in three.

1550
01:44:09,480 --> 01:44:11,720
There is no C straight here.

1551
01:44:11,760 --> 01:44:13,440
This is what I'm thinking.

1552
01:44:13,440 --> 01:44:15,480
If I know what is, what I will do
basically is

1553
01:44:15,960 --> 01:44:18,000
let me copy this class from here.

1554
01:44:18,000 --> 01:44:20,320
Right here. Auto moving.

1555
01:44:20,320 --> 01:44:21,480
All right. Nice.

1556
01:44:21,480 --> 01:44:25,960
I'm copying my post
condition class from my, say,

1557
01:44:26,640 --> 01:44:29,040
package class one, two, package
class three.

1558
01:44:29,040 --> 01:44:34,880
Would that be okay?

1559
01:44:34,880 --> 01:44:35,520
Right.

1560
01:44:36,480 --> 01:44:37,800
I just copied one class.

1561
01:44:37,800 --> 01:44:40,160
Not a big deal
from one package to another.

1562
01:44:40,160 --> 01:44:41,640
One dot.

1563
01:44:41,640 --> 01:44:44,400
Now it is giving me
this particular class point.

1564
01:44:45,880 --> 01:44:47,280
Now see,

1565
01:44:47,960 --> 01:44:49,880
inside of my class three listener

1566
01:44:49,880 --> 01:44:51,920
business notes is available right

1567
01:44:52,760 --> 01:45:11,880
when I try to execute this.

1568
01:45:11,880 --> 01:45:13,440
Not observe this ridiculous

1569
01:45:15,600 --> 01:45:18,560
before class
executed before my third executed it.

1570
01:45:18,600 --> 01:45:21,760
This is starting first with the name

1571
01:45:21,960 --> 01:45:23,560
first method

1572
01:45:37,200 --> 01:45:38,040
color code

1573
01:45:38,040 --> 01:45:42,200
inside listener's.

1574
01:45:42,200 --> 01:45:43,920
Okay, let's do it

1575
01:45:47,840 --> 01:45:48,560
in my list

1576
01:45:48,560 --> 01:45:54,000
notes.

1577
01:45:54,000 --> 01:45:59,920
Let me define unique messages right.

1578
01:45:59,920 --> 01:46:02,280
Let's not is

1579
01:46:02,280 --> 01:46:08,520
starting first with the name right?

1580
01:46:08,520 --> 01:46:12,720
The listener has asked

1581
01:46:15,440 --> 01:46:17,080
that first

1582
01:46:19,200 --> 01:46:21,440
and then again here

1583
01:46:24,960 --> 01:46:26,400
Listener.

1584
01:46:26,480 --> 01:46:36,600
It's Skip case.

1585
01:46:36,600 --> 01:46:39,000
It's not nothing.

1586
01:46:39,000 --> 01:46:44,480
Their kids tickets is fine.

1587
01:46:44,480 --> 01:46:46,440
No, no, no, no.

1588
01:46:46,440 --> 01:46:51,600
Record is not possible.

1589
01:46:51,600 --> 01:46:53,360
Nothing else look different color.

1590
01:46:53,360 --> 01:46:56,760
You mean to put any external or something
year old

1591
01:47:03,320 --> 01:47:04,000
in the console

1592
01:47:04,000 --> 01:47:10,640
you're talking about?

1593
01:47:10,640 --> 01:47:12,040
No, because isn't normal.

1594
01:47:12,040 --> 01:47:12,960
So that's

1595
01:47:13,080 --> 01:47:15,600
I mean the normal class
that maybe everything normally class

1596
01:47:15,600 --> 01:47:16,880
we are writing, it's class.

1597
01:47:16,880 --> 01:47:22,320
So I don't think it is possible.

1598
01:47:22,320 --> 01:47:25,600
Now come on and do not act similarly.

1599
01:47:25,640 --> 01:47:27,240
We have implemented it here.

1600
01:47:27,240 --> 01:47:31,400
Okay,
now see it this time because I put more

1601
01:47:31,600 --> 01:47:34,520
descriptive messages
right inside this part.

1602
01:47:34,840 --> 01:47:37,520
So now we will see
more clear output This time.

1603
01:47:39,120 --> 01:47:41,920
What I'm
trying to show is when you put listener,

1604
01:47:42,120 --> 01:47:46,200
it executes all the test cases
the way it was executing earlier,

1605
01:47:46,440 --> 01:47:50,920
but this time it will give you additional
information, what information?

1606
01:47:51,200 --> 01:47:55,080
The information you need
according to your own requirements.

1607
01:47:55,120 --> 01:47:57,000
It will give you that information. Right?

1608
01:47:57,000 --> 01:48:01,760
So if you see it, this list is a starting
test with this name.

1609
01:48:02,320 --> 01:48:05,320
Name It captured the first test,
It executed.

1610
01:48:05,400 --> 01:48:08,680
It is going to execute
which test it is mentioning here.

1611
01:48:08,720 --> 01:48:09,680
And you see

1612
01:48:11,880 --> 01:48:13,720
then after passing exams, Miss

1613
01:48:13,720 --> 01:48:17,600
none has bothered test
and we are capturing the final screenshot.

1614
01:48:17,880 --> 01:48:20,000
Correct.

1615
01:48:20,000 --> 01:48:22,920
Now list starting
first with the name again.

1616
01:48:22,920 --> 01:48:25,360
The new test gives one.
It is going to execute.

1617
01:48:25,560 --> 01:48:29,840
It is giving you that name
after passing your sister's bars.

1618
01:48:29,840 --> 01:48:32,640
But the test
and we are capturing the final screenshot.

1619
01:48:32,880 --> 01:48:33,280
Correct

1620
01:48:36,120 --> 01:48:39,040
is starting
their test and final positive screenshot.

1621
01:48:39,440 --> 01:48:43,280
Now why we are not getting any message
for failing to skip

1622
01:48:43,520 --> 01:48:54,360
10 minutes.

1623
01:48:54,360 --> 01:48:58,160
Yes, that isn't this total test
run three passes three

1624
01:48:59,400 --> 01:49:00,440
when all of them pass.

1625
01:49:00,440 --> 01:49:02,160
We are not getting nothing.

1626
01:49:02,160 --> 01:49:06,680
The estate.

1627
01:49:06,680 --> 01:49:09,760
Now let's do one thing.

1628
01:49:09,760 --> 01:49:12,800
Let's go inside this class
and here I'm going to write

1629
01:49:12,800 --> 01:49:17,080
for this particular message,
this particular method I'm going to write.

1630
01:49:17,080 --> 01:49:29,720
Let's see,
is this condition true or false?

1631
01:49:29,720 --> 01:49:43,800
They tell me.

1632
01:49:43,800 --> 01:49:47,440
So this test will pass or fail

1633
01:49:49,080 --> 01:49:52,520
will connect.

1634
01:49:52,520 --> 01:50:19,600
Now let me execute my test
and do not exemplify this type.

1635
01:50:19,600 --> 01:50:30,440
Can you see the difference now?

1636
01:50:30,440 --> 01:50:33,480
How many of you guys can see this

1637
01:50:33,840 --> 01:50:34,200
list?

1638
01:50:34,200 --> 01:50:35,760
Not failed the test case?

1639
01:50:35,760 --> 01:50:38,560
Which test is second method? Right?

1640
01:50:39,120 --> 01:50:41,040
So it completely depends

1641
01:50:42,000 --> 01:50:45,240
on your floor execution on your results.

1642
01:50:45,600 --> 01:50:50,280
Now the same execution is happening,
but the result is changing.

1643
01:50:50,280 --> 01:50:54,200
According to the the output is changing
according to results.

1644
01:50:54,640 --> 01:50:57,640
Right now,
if Mike wants all the test cases

1645
01:50:58,080 --> 01:51:02,760
which are skipped,
you can implement if no once

1646
01:51:02,760 --> 01:51:07,760
all their test cases which are free ticket
they the same items.

1647
01:51:08,040 --> 01:51:12,600
No class you both have to implement
and then for your different customers

1648
01:51:12,840 --> 01:51:15,480
try to fulfill their different needs.

1649
01:51:15,720 --> 01:51:18,880
You can use the same interface. Yes.

1650
01:51:19,360 --> 01:51:20,040
Okay.

1651
01:51:20,920 --> 01:51:24,960
This is what let's let's test inside list
now we can do one more thing.

1652
01:51:24,960 --> 01:51:28,320
What whenever test gets
will take this screenshot

1653
01:51:29,160 --> 01:51:31,600
Whenever test gives us
take the screenshot.

1654
01:51:32,080 --> 01:51:35,640
If test is to skip, skip
to take the screenshot.

1655
01:51:35,840 --> 01:51:37,520
And what? Let's not do this.

1656
01:51:37,520 --> 01:51:39,960
Let's take the screenshot of your test
cases.

1657
01:51:39,960 --> 01:51:42,800
This whether it is fail
or it is closed or it is skipped.

1658
01:51:43,640 --> 01:51:45,000
All right is Skip.

1659
01:51:45,000 --> 01:51:49,560
This gives us some time signature
Mike you're executing test get this right

1660
01:51:50,120 --> 01:51:54,120
now because of so much load
your application so much load

1661
01:51:54,120 --> 01:51:58,160
on your machine Sometimes your machine
is skipping some of your test. It's

1662
01:52:00,360 --> 01:52:01,080
okay.

1663
01:52:01,480 --> 01:52:04,160
It means
it is not able to execute your best guess.

1664
01:52:04,160 --> 01:52:05,000
That's what we call it.

1665
01:52:05,000 --> 01:52:05,320
Skip.

1666
01:52:05,320 --> 01:52:10,480
This gives now when it is skipped
this for which all other test cases

1667
01:52:10,560 --> 01:52:15,160
that have been skipped by your browser
or your machine, it will take,

1668
01:52:15,160 --> 01:52:19,640
it will make a report and it will give you
the name of all those tests.

1669
01:52:19,840 --> 01:52:26,800
It's clear.

1670
01:52:26,800 --> 01:52:28,920
All right, guys.

1671
01:52:29,640 --> 01:52:32,240
So far in these constants, whatever

1672
01:52:32,240 --> 01:52:33,680
the concepts

1673
01:52:36,480 --> 01:52:37,720
are we need to do it on.

1674
01:52:37,720 --> 01:52:42,120
Yes, Yes, we need to we will see that
it is a part of framework.

1675
01:52:42,120 --> 01:52:46,200
How to do you don't know if your think
that this is our building on this

1676
01:52:46,360 --> 01:52:52,800
and if we don't
but we will see that, correct?

1677
01:52:53,200 --> 01:52:53,640
Correct.

1678
01:52:53,640 --> 01:52:56,080
That's
what I explained in the starting point.

1679
01:52:56,080 --> 01:52:58,560
You can customize your output

1680
01:52:59,880 --> 01:53:00,560
state

1681
01:53:00,880 --> 01:53:03,360
view when you're writing the code, right?

1682
01:53:03,560 --> 01:53:05,960
You're writing the code

1683
01:53:08,200 --> 01:53:11,760
and the recording is already available.

1684
01:53:11,760 --> 01:53:12,040
Right.

1685
01:53:12,040 --> 01:53:14,520
For SML class, you can go there.

1686
01:53:15,600 --> 01:53:18,920
All right or I will share that with video
also for that so that you can go

1687
01:53:18,920 --> 01:53:20,880
and you can check
how to create the classes.

1688
01:53:20,880 --> 01:53:21,320
Well,

1689
01:53:22,680 --> 01:53:25,560
obviously, Mom, without practice,
nothing can be done.

1690
01:53:25,560 --> 01:53:26,720
Nothing can be achieved.

1691
01:53:26,720 --> 01:53:29,360
Practice
is must every single point of time.

1692
01:53:29,400 --> 01:53:33,600
Practice is must.

1693
01:53:33,600 --> 01:53:34,200
All right.

1694
01:53:34,200 --> 01:53:37,360
So is so far the topics
which we have discussed.

1695
01:53:38,480 --> 01:53:52,320
Do you guys have any question or is there
anything that you guys understand yet?

1696
01:53:52,320 --> 01:53:54,000
Yeah, sure.

1697
01:53:54,120 --> 01:53:57,560
So from from my package one, right.

1698
01:53:57,600 --> 01:53:59,440
Everyone has this package.

1699
01:53:59,440 --> 01:54:02,400
This is the class, right?
This is the class.

1700
01:54:02,400 --> 01:54:03,720
I copy

1701
01:54:08,800 --> 01:54:10,840
all how to copy out.

1702
01:54:10,880 --> 01:54:14,400
So first,
just go into your class one package

1703
01:54:15,840 --> 01:54:19,200
inside your class, one just write
control, see?

1704
01:54:19,200 --> 01:54:24,280
All right, click here and then select
control, See or copy from here.

1705
01:54:24,280 --> 01:54:24,880
Right.

1706
01:54:25,040 --> 01:54:27,200
Once you copy it,

1707
01:54:27,200 --> 01:54:27,920
Come on.

1708
01:54:28,440 --> 01:54:31,520
Once you copy
it, click on your current package.

1709
01:54:31,520 --> 01:54:33,880
Where do you want to pasted right click?

1710
01:54:33,880 --> 01:54:37,720
And then based here or simply control,
see from here and control

1711
01:54:37,720 --> 01:54:40,480
B here right

1712
01:54:46,000 --> 01:54:47,680
now. Is it clear

1713
01:54:48,680 --> 01:54:49,160
more then?

1714
01:54:49,160 --> 01:54:54,600
Does it make sense for everyone? No.

1715
01:54:54,600 --> 01:54:55,040
You're

1716
01:54:56,800 --> 01:55:03,760
more most welcome. So.

1717
01:55:03,760 --> 01:55:10,560
All right,
So now let's move on to the new topic.

1718
01:55:10,560 --> 01:55:13,000
That's how we generally implement
our listener part

1719
01:55:13,880 --> 01:55:16,200
implementation done

1720
01:55:19,680 --> 01:55:21,680
lights are completed,

1721
01:55:21,840 --> 01:55:31,640
not topics.

1722
01:55:31,640 --> 01:55:32,640
So we are not going to

1723
01:55:32,640 --> 01:55:36,240
look into this lights
any more here because lights are done.

1724
01:55:36,360 --> 01:55:38,040
State topic is pending.

1725
01:55:38,040 --> 01:55:40,560
All right, one more topic.

1726
01:55:40,560 --> 01:55:42,120
We are done with the basic of this.

1727
01:55:43,880 --> 01:55:47,000
Okay, fine.

1728
01:55:48,640 --> 01:56:00,800
Now putting

1729
01:56:03,800 --> 01:56:07,280
know like I say, slides

1730
01:56:07,280 --> 01:56:10,160
and not topics

1731
01:56:15,800 --> 01:56:17,280
right now.

1732
01:56:17,280 --> 01:56:21,680
Let me ask one thing, guys.

1733
01:56:21,680 --> 01:56:23,640
One hour only.

1734
01:56:24,240 --> 01:56:34,920
Nobody.

1735
01:56:34,920 --> 01:56:37,640
Yes Break is also here for 10 minutes,

1736
01:56:37,920 --> 01:56:50,320
maybe 15 minutes.

1737
01:56:50,320 --> 01:56:50,680
Yeah.

1738
01:56:51,360 --> 01:56:55,200
I'm always open for negotiation days

1739
01:56:57,360 --> 01:56:57,960
getting.

1740
01:56:59,720 --> 01:57:00,600
All right.

1741
01:57:00,600 --> 01:57:03,640
So now let me ask one thing, guys.

1742
01:57:03,640 --> 01:57:06,360
You are very hard
working professional in your company

1743
01:57:06,360 --> 01:57:09,520
and you are writing your code days
and nights all the time straight.

1744
01:57:09,960 --> 01:57:11,280
You are not going online.

1745
01:57:11,280 --> 01:57:12,560
Journal Wayland Breaks.

1746
01:57:12,560 --> 01:57:14,400
You're not taking any vacation.

1747
01:57:14,400 --> 01:57:16,400
Still,
you guys are working on your weekends

1748
01:57:16,400 --> 01:57:18,360
and every single thing you're doing.

1749
01:57:18,360 --> 01:57:22,400
After three months, you guys have executed
and you guys have written.

1750
01:57:23,520 --> 01:57:25,440
I, I was also in the company.

1751
01:57:25,440 --> 01:57:26,680
That's why I'm like, I saw you

1752
01:57:28,800 --> 01:57:31,560
go for consistent three months.

1753
01:57:31,560 --> 01:57:33,360
Then you worked this much hard.

1754
01:57:33,360 --> 01:57:35,640
You wrote 500 test.

1755
01:57:35,640 --> 01:57:36,720
Get this.

1756
01:57:36,960 --> 01:57:39,760
All right with editing test annotation

1757
01:57:39,760 --> 01:57:42,560
500 times, you wrote 500 test cases.

1758
01:57:43,840 --> 01:57:48,160
Now, after 2 hours,
you have a meeting with your client.

1759
01:57:48,160 --> 01:57:51,200
All right, let's after one hour,
do you have a meeting with your client?

1760
01:57:51,800 --> 01:57:56,480
Your client needs one thing, Words
that your client needs to make sure

1761
01:57:56,760 --> 01:58:01,560
that whatever the things you have
written so far, you want to execute.

1762
01:58:01,920 --> 01:58:05,760
So he needs report
because after one hour your client,

1763
01:58:06,600 --> 01:58:10,280
you have a meeting with your client,
and your client wants to show

1764
01:58:10,320 --> 01:58:13,080
all these things
to the senior management, right?

1765
01:58:13,440 --> 01:58:17,640
Your client will not ask you
to give the report after one hour. Why?

1766
01:58:17,680 --> 01:58:21,240
Because in the presentation,
he also needs to get this report correct.

1767
01:58:21,440 --> 01:58:23,520
Your He needs to read the report
in the presentation.

1768
01:58:23,760 --> 01:58:27,000
So what he needs,
they make you have 500 because.

1769
01:58:27,000 --> 01:58:28,080
Yes I do have

1770
01:58:28,080 --> 01:58:31,920
quite good and executive in 5 minutes
and give me the reports in 10 minutes.

1771
01:58:31,920 --> 01:58:34,880
I will put it in my PowerPoint
presentation.

1772
01:58:34,880 --> 01:58:37,800
And after one hour when we are meeting,
I will open up

1773
01:58:37,800 --> 01:58:41,040
this light and Mike will drive the show
and he will explain this.

1774
01:58:41,040 --> 01:58:43,240
It is a static.

1775
01:58:43,240 --> 01:58:48,560
Now you have a situation where you execute
500 cases in 5 to 10 minutes.

1776
01:58:49,880 --> 01:58:51,880
If you see the current structure.

1777
01:58:51,920 --> 01:58:56,640
What we have right now here, right,
if you come across this situation,

1778
01:58:56,640 --> 01:58:59,560
can you execute 500 test
cases in 5 minutes?

1779
01:58:59,680 --> 01:59:08,760
Can you do that?

1780
01:59:08,760 --> 01:59:09,240
Yeah.

1781
01:59:09,720 --> 01:59:12,240
If you ask this question,
they will stop that in three weeks.

1782
01:59:13,080 --> 01:59:18,440
They will avoid it.

1783
01:59:18,440 --> 01:59:19,520
The noise.

1784
01:59:19,520 --> 01:59:22,200
And my question is with the current setup.

1785
01:59:22,560 --> 01:59:22,880
Right.

1786
01:59:22,880 --> 01:59:25,600
The current setup
which we have as of now. Right.

1787
01:59:25,640 --> 01:59:26,840
With this setup.

1788
01:59:26,840 --> 01:59:32,040
But you guys think it is possible
to execute your test cases,

1789
01:59:32,040 --> 01:59:36,400
which are 500 in just 5 minutes?

1790
01:59:36,400 --> 01:59:38,040
No, we do not have any existing.

1791
01:59:38,040 --> 01:59:41,720
So to break.

1792
01:59:41,720 --> 01:59:42,760
Got it.

1793
01:59:44,160 --> 01:59:47,400
Now now let me show you

1794
01:59:48,120 --> 01:59:51,600
let me show you the approach
for doing one approach.

1795
01:59:51,600 --> 01:59:53,120
Why extended test?

1796
01:59:53,120 --> 01:59:57,960
And this is yes,
you have how many test cases is this?

1797
01:59:57,960 --> 02:00:00,040
500 test And this is. Go ahead.

1798
02:00:00,040 --> 02:00:01,760
We will execute it.

1799
02:00:01,760 --> 02:00:08,040
Right. How we can execute it, guys, this
is the topic we are going to implement now

1800
02:00:09,720 --> 02:00:11,800
that I give you the

1801
02:00:11,800 --> 02:00:14,440
overview, I give you the requirement.

1802
02:00:14,880 --> 02:00:17,400
What is the need now? Solution.

1803
02:00:17,680 --> 02:00:20,120
All right, let's going

1804
02:00:20,880 --> 02:00:23,000
I'm going to create

1805
02:00:23,800 --> 02:00:26,480
or do you want me to create new test
and it takes similar failure.

1806
02:00:26,480 --> 02:00:27,280
This one is fine.

1807
02:00:27,280 --> 02:00:32,120
What you want new

1808
02:00:33,840 --> 02:00:36,760
so the effector
this one I'm going to write test

1809
02:00:36,920 --> 02:00:39,080
G three defective

1810
02:00:41,640 --> 02:00:47,760
and to create a new one.

1811
02:00:47,760 --> 02:00:49,200
The existing guy is still

1812
02:00:49,200 --> 02:00:53,040
the guy is didn't fix this issue
See how arrogant the guys are?

1813
02:00:53,560 --> 02:00:55,680
They are not ready to fix this issue.

1814
02:00:56,080 --> 02:00:58,920
It is available
every single day for this building.

1815
02:00:59,840 --> 02:01:01,960
This building create

1816
02:01:19,080 --> 02:01:19,440
client.

1817
02:01:19,440 --> 02:01:21,720
So I got this test, a new detection
missile, guys.

1818
02:01:22,760 --> 02:01:23,400
Correct

1819
02:01:27,200 --> 02:01:27,880
static.

1820
02:01:28,000 --> 02:01:30,360
Now always tell me how we can
automate automated.

1821
02:01:31,360 --> 02:01:41,240
I gave you the command last week,

1822
02:01:41,240 --> 02:01:45,760
correct.

1823
02:01:45,760 --> 02:01:50,240
Go. I'm happy to see that
Everyone knows it.

1824
02:01:50,720 --> 02:01:57,520
Fine.

1825
02:01:57,520 --> 02:01:58,880
So what I'm going to do is

1826
02:02:00,000 --> 02:02:01,320
I'm going to delete all of

1827
02:02:01,320 --> 02:02:03,720
these methods in the classes
which I don't need yet

1828
02:02:06,120 --> 02:02:07,680
because I have so many.

1829
02:02:07,680 --> 02:02:08,280
Right?

1830
02:02:08,920 --> 02:02:11,200
So I'm just deleting

1831
02:02:11,240 --> 02:02:14,680
all the classes and like I'm keeping
just do not one

1832
02:02:14,680 --> 02:02:15,760
just to

1833
02:02:19,080 --> 02:02:21,120
I'm not even talking about the method. So

1834
02:02:30,640 --> 02:02:39,920
like any
if you're not getting this option,

1835
02:02:40,600 --> 02:02:45,000
what you have to do right.

1836
02:02:45,000 --> 02:02:47,520
Let me share that video
once again. Bitrate.

1837
02:02:47,520 --> 02:02:52,440
I already gave you the video How to create
this test in do not accessible fight.

1838
02:02:52,960 --> 02:02:53,680
Okay.

1839
02:02:53,720 --> 02:02:56,880
What need to do is
you need to go inside your modules

1840
02:02:56,880 --> 02:03:00,560
and check first time to create the test
and you it from there.

1841
02:03:00,880 --> 02:03:01,720
All right.

1842
02:03:02,600 --> 02:03:04,640
So I will I will give that. All right.

1843
02:03:04,680 --> 02:03:08,040
If we keep discussing the topics straight

1844
02:03:08,120 --> 02:03:10,800
from the last week,
we will not be able to budget for that.

1845
02:03:11,040 --> 02:03:11,640
All right.

1846
02:03:11,640 --> 02:03:15,520
It is already in session recorded, right?

1847
02:03:15,720 --> 02:03:16,520
No, no worries.

1848
02:03:16,520 --> 02:03:18,200
No, I can totally understand

1849
02:03:18,200 --> 02:03:21,160
that you are not able to relate with this
because you missed that point.

1850
02:03:21,160 --> 02:03:22,640
I can totally understand.

1851
02:03:22,640 --> 02:03:24,800
But what are your difference
for your help?

1852
02:03:24,800 --> 02:03:26,880
I'm saying this wasn't.

1853
02:03:26,880 --> 02:03:29,280
Can you please help any to create a test?

1854
02:03:29,400 --> 02:03:30,760
Do not accessible fine.

1855
02:03:30,760 --> 02:03:34,560
By the time I'm just writing this
so that it would be helpful for her

1856
02:03:34,840 --> 02:03:37,200
and then she will be able to understand
what we are doing here.

1857
02:03:38,040 --> 02:03:39,120
Thank you so much.

1858
02:03:39,120 --> 02:03:39,680
Thank you.

1859
02:03:39,680 --> 02:03:40,040
All right.

1860
02:03:40,040 --> 02:03:44,200
Any your problem is resolved, you can go
ahead and create this test already.

1861
02:03:44,400 --> 02:03:44,840
Already.

1862
02:03:45,000 --> 02:03:48,120
Let's proceed further.

1863
02:03:48,120 --> 02:03:51,120
Fine. So now what I'm going to do is here.

1864
02:03:52,320 --> 02:03:54,680
First, let's talk about list now.

1865
02:03:54,720 --> 02:03:56,640
Right? We are taking the list.
That is the list.

1866
02:03:56,640 --> 02:03:59,800
That is something
we are going to consider it as a

1867
02:03:59,800 --> 02:04:00,960
necessary evil.

1868
02:04:00,960 --> 02:04:01,680
Right

1869
02:04:03,480 --> 02:04:05,160
inside this,

1870
02:04:05,160 --> 02:04:08,640
I'm going to write the code
for my listener right

1871
02:04:10,640 --> 02:04:12,240
class name required.

1872
02:04:12,240 --> 02:04:15,360
So it is my it's not available days

1873
02:04:25,800 --> 02:04:30,880
that is correct

1874
02:04:30,880 --> 02:04:41,160
or not.

1875
02:04:41,160 --> 02:04:43,440
Now, I am going to write
a couple of things here.

1876
02:04:43,440 --> 02:04:48,320
See, I'm going to write my test

1877
02:04:48,360 --> 02:04:50,160
name as

1878
02:04:52,360 --> 02:04:52,680
well.

1879
02:04:52,760 --> 02:04:53,960
Latest.

1880
02:04:54,440 --> 02:04:58,680
Okay.

1881
02:04:58,680 --> 02:05:00,640
I don't need anything.

1882
02:05:01,280 --> 02:05:06,480
See? Fine, fine.

1883
02:05:06,480 --> 02:05:08,800
I'm not doing anything right.
Guess what I did?

1884
02:05:09,120 --> 02:05:13,880
I just added one listener
so far and I am just renaming test.

1885
02:05:13,880 --> 02:05:16,040
Especially test right

1886
02:05:24,440 --> 02:05:26,960
now. Next thing

1887
02:05:28,320 --> 02:05:28,880
I posted for

1888
02:05:28,880 --> 02:05:35,800
the next thing

1889
02:05:35,800 --> 02:05:41,200
is I'm going to write
as can you see this tab parallel?

1890
02:05:41,200 --> 02:05:44,240
It says you want to execute
your math impediment.

1891
02:05:44,240 --> 02:05:48,680
It means let's say you have
three different test in your one class.

1892
02:05:48,680 --> 02:05:51,160
You want to execute
all this three in person.

1893
02:05:51,200 --> 02:05:53,600
Then I'm going to say yes methods.

1894
02:05:53,960 --> 02:05:57,360
If you want to execute classes,
experiment, you will write classes.

1895
02:05:57,640 --> 02:06:00,280
I'm going to write a methods.
Method means what?

1896
02:06:00,280 --> 02:06:07,360
The request annotations clear, guys clear
and the request annotation part.

1897
02:06:08,320 --> 02:06:09,000
And then

1898
02:06:09,000 --> 02:06:12,560
I'm going to write it
as the count as equals to three.

1899
02:06:12,640 --> 02:06:14,760
It means what? Maximum?

1900
02:06:14,760 --> 02:06:18,120
Maximum three thread you need to execute.

1901
02:06:18,440 --> 02:06:21,120
You can generate three type

1902
02:06:21,120 --> 02:06:21,840
write.

1903
02:06:21,840 --> 02:06:24,680
Now let's consider any class.

1904
02:06:26,480 --> 02:06:28,920
For example, my

1905
02:06:29,880 --> 02:06:32,280
data provider class

1906
02:06:36,880 --> 02:06:39,400
right inside of my data provider class.

1907
02:06:39,760 --> 02:06:47,480
How many test I have right now is one.

1908
02:06:49,360 --> 02:07:03,080
Can we do it three yet?

1909
02:07:03,080 --> 02:07:26,880
Come on.

1910
02:07:26,880 --> 02:07:27,480
Is it correct?

1911
02:07:27,480 --> 02:07:30,520
Grace I have to test in my data
provided class now.

1912
02:07:30,520 --> 02:07:35,760
Correct.

1913
02:07:35,760 --> 02:07:38,760
What I did, I just copied my same method.

1914
02:07:38,760 --> 02:07:41,440
So more times. Okay.

1915
02:07:41,440 --> 02:07:43,480
My same method. Just two more times.

1916
02:07:43,920 --> 02:07:47,360
So all in all, three test
I have now in my data

1917
02:07:47,360 --> 02:07:49,200
provider class

1918
02:07:52,440 --> 02:07:54,920
or let me do one thing right.

1919
02:07:54,920 --> 02:07:57,000
I'm not going to copy this first.

1920
02:07:57,280 --> 02:07:58,760
I'll keep it as it is.

1921
02:07:58,760 --> 02:08:07,760
Okay, fine.

1922
02:08:08,280 --> 02:08:09,840
This is my data provider class.

1923
02:08:09,840 --> 02:08:12,440
I'm going to create completely new class.

1924
02:08:12,600 --> 02:08:12,960
Okay.

1925
02:08:14,000 --> 02:08:14,400
So that

1926
02:08:14,400 --> 02:08:16,560
it would be easy for you to understand.

1927
02:08:17,960 --> 02:08:19,600
I'm going to write a new class

1928
02:08:19,600 --> 02:08:28,680
as bad and then

1929
02:08:30,360 --> 02:08:38,720
test this to correct.

1930
02:08:38,720 --> 02:08:40,080
Is this correct?

1931
02:08:40,160 --> 02:08:53,600
New class?

1932
02:08:53,600 --> 02:08:56,840
I now take any class.

1933
02:08:57,360 --> 02:08:58,920
Any class, right there.

1934
02:08:58,920 --> 02:09:02,400
We have multiple data available, right?

1935
02:09:02,400 --> 02:09:04,560
Multiple test available.

1936
02:09:04,560 --> 02:09:09,040
So I'm taking only my data provider class
because in my data provider

1937
02:09:09,480 --> 02:09:16,920
I have right now one test case,
but I can make it to three as well.

1938
02:09:16,920 --> 02:10:09,120
Just give me a moment based.

1939
02:10:09,120 --> 02:10:14,320
I didn't copy anything so partial.

1940
02:10:14,320 --> 02:10:16,960
Okay, I'm going to copy this class only.

1941
02:10:17,360 --> 02:10:18,080
Right.

1942
02:10:18,240 --> 02:10:20,240
So let me copy this.

1943
02:10:20,240 --> 02:10:21,960
Fine control.

1944
02:10:21,960 --> 02:10:25,600
See, it is split up my performance. Now.

1945
02:10:25,680 --> 02:10:28,240
See you correct

1946
02:10:30,680 --> 02:10:31,120
again.

1947
02:10:31,120 --> 02:10:34,920
If you want to see how I copied
going to data provider,

1948
02:10:35,760 --> 02:10:39,400
copy the code and paste it in
your parallel test.

1949
02:10:39,520 --> 02:10:40,720
Test class.

1950
02:10:40,720 --> 02:10:45,440
Correct.

1951
02:10:45,440 --> 02:10:45,680
Okay.

1952
02:10:45,680 --> 02:10:51,960
Case for you everyone.

1953
02:10:51,960 --> 02:11:02,960
Now let's create a simple test for this.

1954
02:11:02,960 --> 02:11:04,120
Well, log in to

1955
02:11:05,240 --> 02:11:06,440
log in three.

1956
02:11:06,440 --> 02:11:07,040
Fine.

1957
02:11:08,000 --> 02:11:10,560
When I say we need log in,

1958
02:11:10,680 --> 02:11:21,840
we have to put in the correct way.

1959
02:11:21,840 --> 02:11:23,000
This is my username.

1960
02:11:23,000 --> 02:11:25,320
This is my password. Right.

1961
02:11:25,320 --> 02:11:28,520
And let me delayed this third one

1962
02:11:28,640 --> 02:11:31,920
and then I have to change this one to

1963
02:11:33,040 --> 02:11:38,200
do. And this one to do.

1964
02:11:39,240 --> 02:11:40,800
This one to

1965
02:11:43,200 --> 02:11:44,520
any confusion.

1966
02:11:44,520 --> 02:11:45,320
Any confusion.

1967
02:11:45,320 --> 02:11:48,400
Why I change this data
and how I changed it.

1968
02:11:49,160 --> 02:11:52,120
I don't want to execute it
for full different users.

1969
02:11:52,120 --> 02:11:56,640
Again, I am just shrinking
the size of my eddy, right?

1970
02:11:57,040 --> 02:12:00,960
So how many users I have here
is three username three password.

1971
02:12:01,080 --> 02:12:02,000
Correct.

1972
02:12:02,000 --> 02:12:05,160
Since I am going to use this data
for a valid log in.

1973
02:12:05,680 --> 02:12:07,440
Remember for valid log in.

1974
02:12:07,440 --> 02:12:10,360
So I should use only valid data rate.

1975
02:12:10,360 --> 02:12:12,440
So I'm using validity. Correct.

1976
02:12:13,240 --> 02:12:15,320
This is my valid data.

1977
02:12:15,320 --> 02:12:19,840
It will execute not only in this method
but also in this method

1978
02:12:19,840 --> 02:12:21,840
and in this method.

1979
02:12:21,840 --> 02:12:29,160
All in all, I have home in it
just because this guys tell me. So

1980
02:12:30,240 --> 02:12:34,000
let's go inside our test class now.

1981
02:12:35,360 --> 02:12:38,120
This is my class I am going to execute

1982
02:12:38,120 --> 02:12:40,120
so which is available in my package

1983
02:12:41,200 --> 02:12:43,400
dart class three dart

1984
02:12:45,520 --> 02:12:47,200
this test to

1985
02:12:48,240 --> 02:12:51,720
detect.

1986
02:12:51,720 --> 02:12:53,840
I'm calling this class, right?

1987
02:12:54,120 --> 02:12:57,920
I'm calling this class
now how it will execute.

1988
02:12:57,920 --> 02:13:01,640
At the same time, I'm going to take
another class as well along with this.

1989
02:13:02,600 --> 02:13:08,080
So this another class, finally,

1990
02:13:08,720 --> 02:13:12,000
when I say parallel is equal to method,
it means your test.

1991
02:13:12,040 --> 02:13:17,320
India's asking, Hey, you want to execute
in parallel fine based on what?

1992
02:13:17,320 --> 02:13:19,640
I need to distribute your test cases.

1993
02:13:19,800 --> 02:13:22,880
So I said, distribute
my test cases in parallel

1994
02:13:22,880 --> 02:13:26,880
based on the methods
when I same methods go inside your class.

1995
02:13:26,880 --> 02:13:29,200
This is your one method.

1996
02:13:29,200 --> 02:13:31,320
This is your another method.

1997
02:13:31,320 --> 02:13:33,360
This is yet another method. Correct.

1998
02:13:33,960 --> 02:13:37,880
So it will distribute
your test cases based on your method form.

1999
02:13:38,240 --> 02:13:40,560
Correct. When you mentioned here.

2000
02:13:41,640 --> 02:13:44,040
Here parallel is equal to methods.

2001
02:13:44,280 --> 02:13:47,920
It distributes of your test cases
based on your methods.

2002
02:13:48,840 --> 02:13:53,640
Got it.

2003
02:13:53,640 --> 02:13:56,360
Inside this class
you have how many methods?

2004
02:13:56,360 --> 02:13:57,240
No issues.

2005
02:13:57,240 --> 02:14:00,640
It will be distributing betterment
inside this class.

2006
02:14:00,640 --> 02:14:02,280
We how many methods, right?

2007
02:14:02,280 --> 02:14:02,960
No issues.

2008
02:14:02,960 --> 02:14:05,160
It will distribute that in methods.

2009
02:14:05,160 --> 02:14:08,640
All right,
So let me take any class, let's say

2010
02:14:09,000 --> 02:14:11,760
sort a solution to find class, right?

2011
02:14:12,800 --> 02:14:19,280
How many tests we have to write.

2012
02:14:19,800 --> 02:14:20,880
It means soft assertion.

2013
02:14:20,880 --> 02:14:22,960
Two is something we can take.

2014
02:14:22,960 --> 02:14:25,080
So I'm going to take it in my test and

2015
02:14:32,640 --> 02:14:35,520
you're not closing that tab.

2016
02:14:35,520 --> 02:14:39,080
You're not closing the tab
if you'll see rate test started.

2017
02:14:39,080 --> 02:14:41,440
But it doesn't. And it didn't. Right.

2018
02:14:41,440 --> 02:14:42,400
So you have to end it.

2019
02:14:42,400 --> 02:14:45,400
Also, there's the reason

2020
02:14:51,040 --> 02:14:53,000
parallel is equals to methods

2021
02:14:53,000 --> 02:14:55,920
should come before
this greater than single.

2022
02:14:55,920 --> 02:14:56,320
Alright

2023
02:15:00,960 --> 02:15:02,200
so now see guys

2024
02:15:02,200 --> 02:15:04,840
here I'm
going to write for my soft assertion.

2025
02:15:06,320 --> 02:15:09,000
Now if you see I have multiple this
because this year

2026
02:15:09,720 --> 02:15:11,840
in two classes

2027
02:15:12,360 --> 02:15:15,000
so far these parallel methods

2028
02:15:15,280 --> 02:15:19,040
better latest data count
three two classes.

2029
02:15:19,440 --> 02:15:23,560
This class we have created, this class
we have taken from previous package

2030
02:15:23,960 --> 02:15:27,040
so far in this in this code writing.

2031
02:15:27,160 --> 02:15:29,560
You guys have any question

2032
02:15:29,560 --> 02:15:30,840
before even execution?

2033
02:15:30,840 --> 02:15:33,200
I'm asking it
so that I can write it once again.

2034
02:15:33,400 --> 02:15:35,880
I can explain it once again from scratch.

2035
02:15:35,880 --> 02:15:38,840
Do you guys have any

2036
02:15:47,760 --> 02:15:48,640
gains, disability

2037
02:15:48,640 --> 02:15:56,000
or status? Yes.

2038
02:15:56,080 --> 02:15:59,760
Yes. Static, Correct.

2039
02:15:59,760 --> 02:16:08,160
If you want to increase or decrease,
that is also fine like this.

2040
02:16:08,160 --> 02:16:18,800
I'm asking all in all, five are.

2041
02:16:18,800 --> 02:16:21,960
No, not actually should read.

2042
02:16:21,960 --> 02:16:24,480
And then execution means see.

2043
02:16:24,480 --> 02:16:26,280
Let me tell you what is it?

2044
02:16:26,280 --> 02:16:29,000
What is the meaning of parallel execution?

2045
02:16:29,000 --> 02:16:30,000
This is my mistake.

2046
02:16:30,000 --> 02:16:31,160
I didn't explain that part.

2047
02:16:31,160 --> 02:16:32,600
First wire diagram.

2048
02:16:32,600 --> 02:16:34,600
You guys need diagram explanation. First,

2049
02:16:36,160 --> 02:16:37,800
you have

2050
02:16:39,920 --> 02:16:40,760
come on.

2051
02:16:42,120 --> 02:16:44,160
Now, I'm
not able to attach my digital board

2052
02:16:44,160 --> 02:16:47,280
here because I my optical mouse.

2053
02:16:47,320 --> 02:16:48,120
Fine.

2054
02:16:48,440 --> 02:17:17,560
But still, I can explain.

2055
02:17:17,560 --> 02:17:22,960
Now, see, guys,
what I'm trying to show you is here.

2056
02:17:22,960 --> 02:17:24,840
Let's say you have

2057
02:17:25,320 --> 02:17:30,760
this one, this two,

2058
02:17:32,160 --> 02:17:35,800
and it's three, right?

2059
02:17:36,680 --> 02:17:37,680
Three test.

2060
02:17:37,680 --> 02:17:40,240
Should please
make sure what what I'm explaining.

2061
02:17:40,240 --> 02:17:42,440
Right. These are benchmark attention.

2062
02:17:42,440 --> 02:17:45,400
Should if I already explain,
read this parallel in line nine.

2063
02:17:45,400 --> 02:17:47,120
What is this better in line?

2064
02:17:47,120 --> 02:17:51,160
So let me tell you once again,
it means it will distribute

2065
02:17:51,160 --> 02:17:55,920
your test cases during execution
based on the methods and the request.

2066
02:17:55,920 --> 02:18:00,000
Annotation is what it is
your distribution points.

2067
02:18:00,000 --> 02:18:00,520
So let's say

2068
02:18:00,520 --> 02:18:04,080
you have this much of methods which
will execute all of them in parallel.

2069
02:18:04,560 --> 02:18:08,160
Now see two types of execution have
right now

2070
02:18:08,160 --> 02:18:11,600
we are doing this is what we called
sequential execution.

2071
02:18:11,920 --> 02:18:13,480
What is sequential execution?

2072
02:18:13,480 --> 02:18:18,840
It means first one will execute first
when test, one will execute first.

2073
02:18:18,840 --> 02:18:23,080
After completion of test,
one institute will execute our

2074
02:18:23,360 --> 02:18:26,400
this to test three will execute.

2075
02:18:26,400 --> 02:18:27,040
Right.

2076
02:18:27,400 --> 02:18:32,960
This is what we call sequential execution
in a sequence right now.

2077
02:18:33,240 --> 02:18:35,520
Let's see if this is taking 2 seconds.

2078
02:18:35,560 --> 02:18:36,960
This is taking 3 seconds.

2079
02:18:36,960 --> 02:18:38,160
This is taking 2 seconds.

2080
02:18:38,160 --> 02:18:40,760
So what is the total execution time?

2081
02:18:40,760 --> 02:18:43,200
The total execution time is 7 seconds.

2082
02:18:44,080 --> 02:18:46,280
I'm just giving one example.

2083
02:18:46,280 --> 02:18:50,840
Now, when this experiment
is equal to methods, this is already test.

2084
02:18:51,000 --> 02:18:53,760
This is a dry test.
This is a direct correct.

2085
02:18:55,080 --> 02:18:56,920
When, say, parallel is equal to methods.

2086
02:18:56,920 --> 02:19:01,320
What it will do,
it will execute one at the same time.

2087
02:19:01,320 --> 02:19:05,920
It will open another browser and executes
due to at the same time

2088
02:19:05,960 --> 02:19:08,880
it will open another browser
and it will execute speed. The

2089
02:19:10,920 --> 02:19:12,840
it takes 2 seconds,

2090
02:19:12,840 --> 02:19:15,840
it takes 2 seconds, it takes 3 seconds.

2091
02:19:16,040 --> 02:19:16,680
Fine.

2092
02:19:16,760 --> 02:19:18,240
Overall result will come in.

2093
02:19:18,240 --> 02:19:21,560
How much time? Just in 3 seconds are near.

2094
02:19:21,560 --> 02:19:23,840
You were executing this things
in 7 seconds.

2095
02:19:23,840 --> 02:19:26,480
Now you're executing this things in 3
seconds.

2096
02:19:26,840 --> 02:19:30,520
Got it.

2097
02:19:30,520 --> 02:19:40,320
This is what we call the pattern
execution.

2098
02:19:40,320 --> 02:19:41,840
Yeah, correct.

2099
02:19:41,840 --> 02:19:43,440
Even if it is one class

2100
02:19:43,440 --> 02:19:47,280
in multiple methods,
it will execute these things in parallel.

2101
02:19:47,520 --> 02:19:48,960
All the methods.

2102
02:19:48,960 --> 02:19:50,080
Number of methods.

2103
02:19:50,080 --> 02:19:53,080
Correct? Correct.

2104
02:19:53,160 --> 02:19:54,720
Shall we execute is ready for. This

2105
02:20:00,240 --> 02:20:00,760
Melia.

2106
02:20:00,760 --> 02:20:02,400
We can take five. We can take three.

2107
02:20:02,400 --> 02:20:05,040
I just take four. Right. It's up to you.

2108
02:20:05,040 --> 02:20:22,760
You can take anyone.

2109
02:20:22,760 --> 02:20:24,600
Can you see the latest steps?

2110
02:20:24,600 --> 02:20:28,240
This officer trained two classes on
executing in parallel.

2111
02:20:28,240 --> 02:20:28,520
Right?

2112
02:20:28,520 --> 02:20:32,840
It is opening the browser fine.

2113
02:20:32,840 --> 02:20:34,520
Yes. Yes, exactly.

2114
02:20:34,520 --> 02:20:37,240
Can you see too many Chrome's
available now?

2115
02:20:37,240 --> 02:20:38,040
Right?

2116
02:20:38,040 --> 02:20:41,480
If you go here it is
executing something else.

2117
02:20:42,040 --> 02:20:44,280
It executing something else.

2118
02:20:44,280 --> 02:20:49,160
It is executing thing is it is executing
something else for different test.

2119
02:20:49,160 --> 02:20:50,680
Get this. You'll see why.

2120
02:20:50,680 --> 02:20:54,480
My third count is how much four four
is available here.

2121
02:20:54,480 --> 02:20:57,480
Computer That is great. Don't worry.

2122
02:20:57,480 --> 02:21:01,120
See, I will give you the downsides
of this as well.

2123
02:21:01,200 --> 02:21:03,680
No issues. Yes. Why? Four?

2124
02:21:03,880 --> 02:21:08,240
Because my fourth
grade account was there. They

2125
02:21:11,120 --> 02:21:14,520
see. I'm just

2126
02:21:14,800 --> 02:21:18,560
checking one by one, one by one.

2127
02:21:18,560 --> 02:21:20,520
Now see four threads open.

2128
02:21:20,520 --> 02:21:22,560
If I have ten test kits. My six.

2129
02:21:22,560 --> 02:21:24,240
I've been waiting a stage.

2130
02:21:24,240 --> 02:21:25,080
Okay.

2131
02:21:25,160 --> 02:21:28,560
Once I'm done with this four,
then it will come the remaining six,

2132
02:21:28,560 --> 02:21:30,480
then four will come in another batch.

2133
02:21:30,480 --> 02:21:33,200
Now see, it is reducing metrics. Why?

2134
02:21:33,200 --> 02:21:36,920
It is reducing my threads
because my test kits are completing again.

2135
02:21:36,920 --> 02:21:38,760
It opened one right?

2136
02:21:38,760 --> 02:21:42,800
It will not open more than four
more than four windows. Why?

2137
02:21:42,800 --> 02:21:44,760
Because my trade account is four.

2138
02:21:44,760 --> 02:21:47,600
So eight one time,
four test kits will execute.

2139
02:21:47,760 --> 02:21:51,200
Now see, one is closing, one is opening,
one is closing, one is opening.

2140
02:21:51,600 --> 02:21:53,640
So it is just going on and on.

2141
02:21:53,640 --> 02:21:56,320
Builder time why it is coming like this

2142
02:21:56,520 --> 02:22:00,160
Because in my data provider class
I have three test.

2143
02:22:00,720 --> 02:22:05,120
In three test I am passing data
from three username and password.

2144
02:22:05,120 --> 02:22:06,560
It means the main test. Yes.

2145
02:22:06,560 --> 02:22:08,720
All in all I have from data provider.

2146
02:22:09,080 --> 02:22:11,120
So I'm having from softer side.

2147
02:22:11,240 --> 02:22:17,480
All in all, I am executing how much I am
executing 11 main plus 211 right.

2148
02:22:17,680 --> 02:22:34,280
With the help of four things.

2149
02:22:34,280 --> 02:22:37,520
Right right now the question is

2150
02:22:39,880 --> 02:22:41,120
if I execute all

2151
02:22:41,120 --> 02:22:43,800
of them one by one,
everything was passing,

2152
02:22:45,440 --> 02:22:45,760
right?

2153
02:22:45,760 --> 02:22:47,640
Everything was passing.

2154
02:22:47,640 --> 02:22:49,400
Can you see how many browsers it points?

2155
02:22:49,400 --> 02:22:51,720
One, two, three, four.

2156
02:22:52,480 --> 02:22:57,360
After some time another browser open right
after some time, another browser open.

2157
02:22:57,360 --> 02:23:01,520
See it says is a limit instant eliminate
exception.

2158
02:23:01,520 --> 02:23:05,200
All my in print right

2159
02:23:08,200 --> 02:23:10,760
when you this
when you do this next to the client.

2160
02:23:11,440 --> 02:23:13,600
I read they did that also

2161
02:23:14,320 --> 02:23:17,160
now tell me guys first thing

2162
02:23:21,400 --> 02:23:24,720
now just for better results
I'm going to delete one class.

2163
02:23:25,160 --> 02:23:28,320
I'm taking this one
class called soft assertions here.

2164
02:23:28,320 --> 02:23:30,280
I have two methods, right?

2165
02:23:30,280 --> 02:23:32,400
So let me again execute it.

2166
02:23:32,400 --> 02:23:34,440
Just two methods. I'm not giving much.

2167
02:23:34,440 --> 02:23:35,960
No on my system.

2168
02:23:35,960 --> 02:23:37,680
Otherwise my system will crash.

2169
02:23:37,680 --> 02:23:38,840
Your system will crash.

2170
02:23:38,840 --> 02:23:40,440
Everyone's system will crash.

2171
02:23:40,440 --> 02:23:42,440
Okay.

2172
02:23:42,440 --> 02:23:44,520
See two times opening the browser.

2173
02:23:44,520 --> 02:23:48,360
Can you see here it is opening
the browser two times this two tabs open

2174
02:23:48,880 --> 02:23:54,280
even though I have four three count, but
I have what I two has to do will not use.

2175
02:23:54,400 --> 02:23:56,520
Just two will use here. Right. You'll see

2176
02:23:58,040 --> 02:23:59,440
it is executing just in

2177
02:23:59,440 --> 02:24:06,080
the two browser.

2178
02:24:06,080 --> 02:24:06,600
Right.

2179
02:24:07,080 --> 02:24:11,480
Test two paused one find invalid log
in is passed when it log in page.

2180
02:24:11,840 --> 02:24:18,560
You don't see no.

2181
02:24:18,560 --> 02:24:20,160
Yes, exactly.

2182
02:24:20,160 --> 02:24:23,280
Now see what is the problem

2183
02:24:23,280 --> 02:24:27,200
when you use this in in parallel,

2184
02:24:27,200 --> 02:24:30,920
the first disadvantage is it

2185
02:24:30,920 --> 02:24:36,760
gives a lot of load on your processor,
on your machine, on your device.

2186
02:24:37,160 --> 02:24:39,880
All right.

2187
02:24:39,880 --> 02:24:43,640
It reduces the overall performance
of your application

2188
02:24:44,920 --> 02:24:48,040
if you're executing
and if you're generating so many threaded

2189
02:24:48,040 --> 02:24:53,080
one time rate, so many trades at one time,
obviously it will increase the load.

2190
02:24:53,960 --> 02:24:56,400
When it increases the load,
your application

2191
02:24:56,400 --> 02:24:59,680
has to send responses
on all the browser at one time.

2192
02:25:00,080 --> 02:25:00,720
Right?

2193
02:25:00,840 --> 02:25:03,720
This is practically not possible

2194
02:25:04,320 --> 02:25:07,520
to provide equal response
on all the browser.

2195
02:25:07,520 --> 02:25:11,360
Sometimes it passes the correct response,
sometimes it doesn't.

2196
02:25:11,680 --> 02:25:12,280
Right.

2197
02:25:12,280 --> 02:25:16,960
Because so many tricks, so many requests
are coming in better than execution.

2198
02:25:17,280 --> 02:25:17,920
Right.

2199
02:25:17,920 --> 02:25:21,240
So this type of better execution is not
what are the.

2200
02:25:21,600 --> 02:25:25,160
But still people are executing things
in parallel.

2201
02:25:25,400 --> 02:25:27,920
Then why? What is the alternative to this?

2202
02:25:28,200 --> 02:25:31,960
So The alternative, I add 45 processor.

2203
02:25:31,960 --> 02:25:33,880
Yes, vintage supercomputer.

2204
02:25:33,880 --> 02:25:37,680
But remember, we have alternative
with the same kind of process.

2205
02:25:37,680 --> 02:25:39,320
And what is this?

2206
02:25:39,320 --> 02:25:43,480
We have seen indium great.

2207
02:25:43,480 --> 02:25:45,720
What we have,
guys, it's been indium. Great.

2208
02:25:46,320 --> 02:25:48,360
I hope you guys have learned this.

2209
02:25:48,360 --> 02:25:49,880
Selenium components.

2210
02:25:49,880 --> 02:25:51,600
Selenium RC is the minimum.

2211
02:25:51,600 --> 02:25:54,120
It is the minimum driver in Selenium.

2212
02:25:54,120 --> 02:25:58,160
Great, great guys.

2213
02:25:58,160 --> 02:25:59,520
Yes, Correct. My

2214
02:26:00,720 --> 02:26:01,200
guys.

2215
02:26:01,200 --> 02:26:03,000
How many
of you guys have heard about Selenium?

2216
02:26:03,000 --> 02:26:10,640
Great.

2217
02:26:10,640 --> 02:26:13,520
Yeah. Great, great,

2218
02:26:13,520 --> 02:26:17,840
great, great.

2219
02:26:18,320 --> 02:26:22,920
So basically, I hope you guys have studied
the components of selenium

2220
02:26:23,720 --> 02:26:27,000
rates and indium RC, Selenium, IED,

2221
02:26:27,320 --> 02:26:31,840
Centennial Driver and Selenium grade.

2222
02:26:31,840 --> 02:26:34,120
No worries. I will tell you this.

2223
02:26:34,120 --> 02:26:35,920
What happens is

2224
02:26:39,160 --> 02:26:39,800
fine.

2225
02:26:40,240 --> 02:26:42,160
So basically

2226
02:26:42,520 --> 02:26:46,280
up earlier
when selenium come, it came with one on 80

2227
02:26:46,320 --> 02:26:48,880
that maybe heavy JD up

2228
02:26:50,520 --> 02:26:54,280
dimension that yes we have eclipse 80.

2229
02:26:54,520 --> 02:26:57,600
Similarly
selenium used to come with its own 80

2230
02:26:57,920 --> 02:27:01,040
the minimum 80. Okay

2231
02:27:01,040 --> 02:27:05,160
now this selenium,
it was not that helpful.

2232
02:27:05,160 --> 02:27:09,000
So they came up with a new tool
called Odyssey Remote Control,

2233
02:27:09,000 --> 02:27:10,200
Selenium with remote control.

2234
02:27:10,200 --> 02:27:13,840
Obviously it was not remote control like
this or any other remote control, Right.

2235
02:27:14,160 --> 02:27:18,760
It was a soft remote control,
but then also it was out of school.

2236
02:27:18,760 --> 02:27:20,720
Right. People didn't use.

2237
02:27:22,680 --> 02:27:25,200
Then they came up with selenium primer.

2238
02:27:25,440 --> 02:27:28,080
So now what is the
can someone please send?

2239
02:27:28,080 --> 02:27:30,080
So I think I'm missing something.

2240
02:27:31,200 --> 02:27:33,120
Can someone please send a copy of this?

2241
02:27:33,120 --> 02:27:38,400
Call the paste this code in the check
associated to Mars.

2242
02:27:38,400 --> 02:27:41,400
They will.

2243
02:27:41,400 --> 02:27:42,000
Thank you, Jim.

2244
02:27:42,000 --> 02:27:44,400
On now

2245
02:27:46,040 --> 02:27:47,200
selenium the driver.

2246
02:27:47,200 --> 02:27:50,680
The best part is you can integrate
the selenium with driver,

2247
02:27:50,680 --> 02:27:54,160
with your existing project,
with your existing ID.

2248
02:27:54,720 --> 02:27:57,200
Right. You can use it.

2249
02:27:57,440 --> 02:27:59,560
So now the point was

2250
02:27:59,560 --> 02:28:02,280
there were so test cases we identified

2251
02:28:03,040 --> 02:28:06,760
and there was a need to execute
all of them in a single shot.

2252
02:28:07,080 --> 02:28:09,280
Then they came up with a concept called
Selenium.

2253
02:28:09,280 --> 02:28:11,160
Great in the synonym grade.

2254
02:28:11,160 --> 02:28:15,480
What you generally do is it is
a combination of multiple systems, right?

2255
02:28:16,400 --> 02:28:18,600
It is a combination of multiple systems

2256
02:28:18,600 --> 02:28:21,960
where you make one host and multiple fault
rate,

2257
02:28:22,680 --> 02:28:25,840
one server
or multiple port from one device.

2258
02:28:25,840 --> 02:28:29,960
You control the execution
from all the devices and then you execute

2259
02:28:30,120 --> 02:28:31,920
test cases in parallel.

2260
02:28:31,920 --> 02:28:35,920
So at one time you can execute
five, ten, 15, even 20 test

2261
02:28:35,920 --> 02:28:38,840
guesses and the efficiency of execution

2262
02:28:38,960 --> 02:28:42,320
in selenium,
great is higher than testing there.

2263
02:28:42,600 --> 02:28:47,080
But you won't get this much of real test
cases correct right now

2264
02:28:47,080 --> 02:28:50,480
when you're executing you in five
or six are getting many them are failed.

2265
02:28:51,240 --> 02:28:53,560
Why they are failed
because this is not efficient.

2266
02:28:55,120 --> 02:28:58,200
PURNELL Execution is fine for two or three
or four tests.

2267
02:28:58,360 --> 02:29:03,080
This is fine by act
destined for large volume of test cases.

2268
02:29:03,280 --> 02:29:05,240
Yes, we need selenium grade.

2269
02:29:05,240 --> 02:29:09,800
We need a specific, dedicated cloud
such as Perfecto in market.

2270
02:29:09,800 --> 02:29:11,960
There is a cloud called Perfecto. Right.

2271
02:29:12,120 --> 02:29:15,400
So it gives you dedicated system
which are available.

2272
02:29:15,480 --> 02:29:20,160
Obviously it is up to the base, so
don't even think of purchasing it perfect.

2273
02:29:20,160 --> 02:29:22,920
But what it does,
they generally provide perfect.

2274
02:29:22,920 --> 02:29:26,840
You guys generally provide dedicated
system for the execution of your own

2275
02:29:27,080 --> 02:29:29,040
best guess, right? Of your own project.

2276
02:29:29,040 --> 02:29:31,480
So let's say you hired
three server services there

2277
02:29:31,560 --> 02:29:33,480
on selling them grade in Perfecto.

2278
02:29:33,480 --> 02:29:35,520
So that three high process sort

2279
02:29:35,520 --> 02:29:39,880
system will be dedicated
only for your execution, right?

2280
02:29:40,080 --> 02:29:42,080
So there you will get more efficiency.

2281
02:29:42,080 --> 02:29:43,920
But yes, nothing comes free.

2282
02:29:43,920 --> 02:29:45,480
Nothing comes for free.

2283
02:29:45,480 --> 02:29:46,680
Okay, For free.

2284
02:29:46,680 --> 02:29:49,320
We have stingy for free.
We have selenium. Great.

2285
02:29:49,440 --> 02:29:50,280
All right.

2286
02:29:50,280 --> 02:29:53,120
So testing in parallel, we are done.

2287
02:29:53,640 --> 02:29:58,920
So for any question how to execute test
cases in parallel using test.

2288
02:29:58,920 --> 02:30:00,640
And you know to like

2289
02:30:00,640 --> 02:30:21,000
any question based, not efficient,
not failure, actually not efficient

2290
02:30:27,600 --> 02:30:35,600
guys better
look, this thing is useful judgment.

2291
02:30:35,600 --> 02:30:45,400
That's what I'm saying.

2292
02:30:45,400 --> 02:30:46,200
Selenium. Great.

2293
02:30:46,200 --> 02:30:49,640
We have read like I say,
that is also parallel testing and incident

2294
02:30:50,080 --> 02:31:02,480
that is more efficient. Yes.

2295
02:31:02,960 --> 02:31:04,320
Right. Exactly.

2296
02:31:04,320 --> 02:31:07,840
So for example, but it is recommended
way to keep your protocols

2297
02:31:07,840 --> 02:31:09,280
as near as possible.

2298
02:31:09,280 --> 02:31:13,200
So it will not give much distress
and much load on your device.

2299
02:31:13,200 --> 02:31:13,840
Correct.

2300
02:31:14,440 --> 02:31:18,200
So your test is
so you can execute them in 3 to 1 type.

2301
02:31:18,760 --> 02:31:22,120
Like instead of executing authentic
one time,

2302
02:31:22,120 --> 02:31:24,600
it will give lot of note on your system.

2303
02:31:24,600 --> 02:31:29,040
You can keep just two or three
and then at one time it will execute

2304
02:31:29,040 --> 02:31:32,880
towards the best cases.

2305
02:31:32,880 --> 02:31:39,120
Oregon. Yes.

2306
02:31:39,160 --> 02:31:41,000
Muscle? Yes. Correct.

2307
02:31:41,000 --> 02:31:44,440
In many organization,
if you go, there will be the right.

2308
02:31:44,480 --> 02:31:47,080
You will be
you will find this selenium great concept.

2309
02:31:47,080 --> 02:32:00,400
This.

2310
02:32:00,400 --> 02:32:02,880
All right.
So first let me come with the code

2311
02:32:26,960 --> 02:32:29,040
is so far any confusion,

2312
02:32:29,520 --> 02:32:33,440
any doubt,
anything you guys didn't understand code?

2313
02:32:33,440 --> 02:32:35,720
I've already pushed in the repository.

2314
02:32:36,000 --> 02:32:38,480
You will find this code there
every single thing.

2315
02:32:38,480 --> 02:32:39,360
You will go from there.

2316
02:32:39,360 --> 02:32:41,760
Now, so far, whatever the things we do,

2317
02:32:42,320 --> 02:32:45,320
every single thing
I pushed onto the repository.

2318
02:32:46,120 --> 02:32:48,760
But my question is from the extension
part,

2319
02:32:49,960 --> 02:32:53,520
from the understanding part,
conceptual wise,

2320
02:32:53,720 --> 02:32:56,160
do you guys have any doubt

2321
02:33:02,880 --> 02:33:04,000
yet what in

2322
02:33:05,040 --> 02:33:06,960
every single thing is on

2323
02:33:06,960 --> 02:33:17,720
every single thing,
nor you're deleting the name, right?

2324
02:33:17,760 --> 02:33:20,720
If you delete the name of your test of,
this it will give you the error.

2325
02:33:21,320 --> 02:33:22,360
The very first thing.

2326
02:33:22,360 --> 02:33:25,200
What I did was I just to make this

2327
02:33:31,720 --> 02:33:32,760
upgrade goes

2328
02:33:32,760 --> 02:33:39,680
I would say just two or three or four,
not more than that.

2329
02:33:39,680 --> 02:33:41,920
Yeah, it can do that. Mike,
your question is fine.

2330
02:33:41,920 --> 02:33:47,280
Let's say I have five thread count, but
I have just to test against that is fine.

2331
02:33:47,280 --> 02:33:48,760
All this thread count

2332
02:33:48,760 --> 02:33:52,560
takes care of your number of threads
open for every single class.

2333
02:33:52,560 --> 02:33:56,080
What example here if you have this this

2334
02:33:56,320 --> 02:33:59,760
then it will execute for it one time
because my state accounted for.

2335
02:34:00,480 --> 02:34:03,480
Okay.

2336
02:34:03,480 --> 02:34:30,320
I have so many open,
I have to close all of them.

2337
02:34:30,320 --> 02:34:31,920
Yes. Yes.

2338
02:34:31,960 --> 02:34:34,160
You can say it is in a batch. Right.

2339
02:34:34,160 --> 02:34:45,800
So for for and then to break like this.

2340
02:34:45,800 --> 02:34:46,680
Yeah.

2341
02:34:47,160 --> 02:34:51,760
That includes exactly.

2342
02:34:51,760 --> 02:34:52,600
All right, guys,

2343
02:34:54,440 --> 02:34:54,960
any other

2344
02:34:54,960 --> 02:35:11,520
question?

2345
02:35:11,520 --> 02:35:14,560
All wheel drive,
all the method in one class, Not in,

2346
02:35:14,600 --> 02:35:16,920
but that's like

2347
02:35:19,200 --> 02:35:20,920
again, like, true.

2348
02:35:20,920 --> 02:35:24,680
Even I never implement
this in my company site I have dealt with

2349
02:35:25,520 --> 02:35:28,400
so far how many projects even don't
remember that count.

2350
02:35:28,720 --> 02:35:32,760
I never did this there I've been in
unless I have some dedicated

2351
02:35:32,760 --> 02:35:33,960
cloud for my project.

2352
02:35:33,960 --> 02:35:37,720
I never implement this
because the selenium grid already company.

2353
02:35:37,960 --> 02:35:39,600
So we are using selenium.

2354
02:35:39,600 --> 02:35:42,800
All right obviously you go for the reason

2355
02:35:42,800 --> 02:35:45,560
why you never put it in, but it

2356
02:35:48,120 --> 02:35:48,520
got it done.

2357
02:35:48,520 --> 02:35:50,640
Well see these are their topics, right?

2358
02:35:50,640 --> 02:35:52,840
These are the topics of your test energy.

2359
02:35:52,840 --> 02:35:57,120
So we have to explain each and everything.

2360
02:35:57,120 --> 02:35:59,600
Make then
implement. Experiment is equal to methods.

2361
02:35:59,840 --> 02:36:03,120
Data count is equal
to five index security of 500 test This

2362
02:36:07,280 --> 02:36:09,000
When you want to execute your

2363
02:36:09,000 --> 02:36:12,640
classes in parallel,
then you use parallel is equal to classes.

2364
02:36:12,800 --> 02:36:22,720
Okay.

2365
02:36:22,720 --> 02:36:23,560
All right.

2366
02:36:23,960 --> 02:36:27,160
So guys, you guys need break now

2367
02:36:27,160 --> 02:36:34,880
or we can continue.

2368
02:36:34,880 --> 02:36:37,320
All right, let's take a break, guys.

2369
02:36:38,800 --> 02:36:48,760
Come on.

2370
02:36:48,760 --> 02:36:51,120
Go ahead, guys.

2371
02:36:51,120 --> 02:36:58,520
I don't have any facility for this yet.

2372
02:36:58,520 --> 02:37:03,160
All right, So let's meet after 40 minutes.

2373
02:37:03,160 --> 02:37:03,840
Maybe

2374
02:37:09,600 --> 02:37:17,640
one for, one for

2375
02:37:17,920 --> 02:37:23,760
I think we did already for team.

2376
02:37:23,760 --> 02:37:26,640
All right, guys, break for 15 minutes.

2377
02:37:26,640 --> 02:37:27,840
See you guys up in 15 minutes.

2378
02:37:27,840 --> 02:37:33,120
Okay.

2379
02:37:33,120 --> 02:37:35,480
All right, guys.

2380
02:37:35,480 --> 02:37:38,760
So now what we are going to do is so far

2381
02:37:38,760 --> 02:37:41,680
we discussed
how we can create the listeners,

2382
02:37:42,840 --> 02:37:46,920
how we can execute our test
cases in parallel mode.

2383
02:37:47,400 --> 02:37:48,160
Right?

2384
02:37:48,280 --> 02:37:52,200
But one thing I can see
whenever I go inside to my classes here,

2385
02:37:52,240 --> 02:37:55,440
see how many classes
I have data for later class.

2386
02:37:56,040 --> 02:37:59,200
So whenever I go inside of my class, I'm

2387
02:37:59,560 --> 02:38:04,480
my deconditioning connect.

2388
02:38:04,480 --> 02:38:06,240
I'm using my post condition here

2389
02:38:07,240 --> 02:38:15,160
right?

2390
02:38:15,160 --> 02:38:17,240
If I go in my latest stuff

2391
02:38:18,600 --> 02:38:21,840
again using the condition

2392
02:38:21,880 --> 02:38:25,120
again, I'm using post condition.

2393
02:38:25,360 --> 02:38:27,320
If I go in any other package, let's

2394
02:38:27,320 --> 02:38:29,280
if this is my package

2395
02:38:33,240 --> 02:38:33,600
again,

2396
02:38:33,600 --> 02:38:37,800
my precondition, again my post condition,
it means more

2397
02:38:38,520 --> 02:38:41,280
the same code, the same piece of code.

2398
02:38:41,280 --> 02:38:43,680
I am repeating again and again and again.

2399
02:38:43,680 --> 02:38:46,760
So let's see if I have 100 classes.

2400
02:38:47,160 --> 02:38:50,960
I am going to write hundred times
precondition hundred times post condition.

2401
02:38:51,160 --> 02:38:52,800
That's what we are doing right now.

2402
02:38:52,800 --> 02:38:59,880
Correct.

2403
02:38:59,880 --> 02:39:02,920
I need one improvement in my project.

2404
02:39:03,720 --> 02:39:06,600
What improvement the improvements is.

2405
02:39:07,080 --> 02:39:10,800
I don't want to write this condition
in post condition and break times

2406
02:39:10,800 --> 02:39:12,720
in big classes.

2407
02:39:12,720 --> 02:39:16,640
I need to write this three
and post condition

2408
02:39:16,880 --> 02:39:21,680
just one time in my project
and this one time mentioning B condition

2409
02:39:21,680 --> 02:39:26,080
post condition will execute
across all the hundred classes.

2410
02:39:27,240 --> 02:39:29,000
This one where we have this form.

2411
02:39:29,000 --> 02:39:30,200
Can you tell me

2412
02:39:30,840 --> 02:39:32,480
in our project

2413
02:39:42,040 --> 02:39:45,400
in Centennial where that's
what I'm asking form is a file

2414
02:39:45,400 --> 02:39:51,680
right where we have this form
finding that project.

2415
02:39:51,680 --> 02:39:54,040
Then we have
you have eight but we do not have bom

2416
02:39:54,880 --> 02:39:57,120
bom is completely irrelevant topic

2417
02:39:57,120 --> 02:40:00,560
as of now right.

2418
02:40:00,560 --> 02:40:05,840
We're not talking about bom
because bom is something else.

2419
02:40:05,840 --> 02:40:08,440
Now we are talking about

2420
02:40:09,720 --> 02:40:11,800
customization, the improvements

2421
02:40:11,800 --> 02:40:15,040
we need to make, right?

2422
02:40:15,520 --> 02:40:16,400
We don't need to write

2423
02:40:16,400 --> 02:40:18,240
this much of things here
and there and there

2424
02:40:18,240 --> 02:40:20,760
and there's so many preconditions
and conditions.

2425
02:40:21,000 --> 02:40:25,480
No, we are not going to use it.

2426
02:40:25,480 --> 02:40:27,040
Yes, we can do that.

2427
02:40:27,040 --> 02:40:27,720
We can do that.

2428
02:40:27,720 --> 02:40:32,480
But for that we need to understand
what is BOM where we find this form,

2429
02:40:32,920 --> 02:40:36,080
how we can use form
and then we can integrate with this

2430
02:40:37,240 --> 02:40:39,320
form is on the way.

2431
02:40:39,320 --> 02:40:41,640
It is in the pipeline,
it is on the way right now.

2432
02:40:41,640 --> 02:40:44,440
Form doesn't exist in our project.

2433
02:40:44,440 --> 02:40:48,600
Now to do this,
I have to make some configurations.

2434
02:40:49,800 --> 02:40:51,000
What kind of configuration?

2435
02:40:51,000 --> 02:40:54,040
See if I'm in. Right.

2436
02:40:54,040 --> 02:40:57,440
If I'm trying to log in here,
I'm trying to log in

2437
02:41:00,320 --> 02:41:02,560
here also everywhere.

2438
02:41:02,600 --> 02:41:03,360
This is fine.

2439
02:41:03,360 --> 02:41:06,400
We are using data provider class,
but in all the classes are

2440
02:41:06,400 --> 02:41:10,600
we providing data provider law?

2441
02:41:11,400 --> 02:41:14,360
We are passing this admin password
every time we need

2442
02:41:14,400 --> 02:41:17,520
password values at the same time.

2443
02:41:17,880 --> 02:41:21,480
Let's see, I'm executing my script
right now on Chrome browser.

2444
02:41:22,880 --> 02:41:25,280
I want to execute my script on Chrome

2445
02:41:25,520 --> 02:41:29,640
and Firefox on IP or it on safari

2446
02:41:29,640 --> 02:41:34,680
and opera on five browsers,
one script executing on five browsers.

2447
02:41:34,680 --> 02:41:39,280
This is what we call
cross browser testing right.

2448
02:41:39,280 --> 02:41:46,160
If I want to do it
with this existing setup, can I do that?

2449
02:41:46,160 --> 02:41:47,720
No. Right.

2450
02:41:47,720 --> 02:41:50,520
So these are the loopholes I can see

2451
02:41:50,760 --> 02:41:54,040
in my existing structure, correct?

2452
02:41:54,040 --> 02:41:57,440
In my current setup,
I can see all these loopholes.

2453
02:41:58,560 --> 02:42:00,480
We will overcome all these things

2454
02:42:00,480 --> 02:42:04,280
one by one, plain phosphate.

2455
02:42:04,280 --> 02:42:07,320
We will talk about configurations.

2456
02:42:07,320 --> 02:42:12,440
What is the configuration,
the configuration that says which browser

2457
02:42:12,440 --> 02:42:17,480
you need to select, which application
you are trying to navigate,

2458
02:42:18,720 --> 02:42:22,920
which user name you are trying to use,
which password you are trying to use.

2459
02:42:22,920 --> 02:42:23,560
Correct.

2460
02:42:24,760 --> 02:42:27,920
You can send the browser
and in Firefox find it will execute you

2461
02:42:27,960 --> 02:42:33,000
the script on Firefox, you will see
Chrome, it will execute a script on call,

2462
02:42:33,000 --> 02:42:35,760
you will see Oprah,
it will execute on Oprah.

2463
02:42:37,120 --> 02:42:40,680
You'll see it execute my all this
a script on syntax

2464
02:42:40,680 --> 02:42:45,600
and when we find user Amazon environment
fine you just need to change your data.

2465
02:42:45,600 --> 02:42:48,520
One place you don't need to pass
this you are in here anymore,

2466
02:42:49,680 --> 02:42:50,080
right?

2467
02:42:50,080 --> 02:42:53,760
First thing you need to pass
your username and password yet anymore.

2468
02:42:54,000 --> 02:42:55,400
You don't need to do this now.

2469
02:42:55,400 --> 02:42:58,440
The configuration
which we are going to make

2470
02:42:58,440 --> 02:43:02,040
in such a way that the one place
we will change the things

2471
02:43:02,120 --> 02:43:06,360
and this things will be applicable
to all of my project process.

2472
02:43:06,760 --> 02:43:10,080
Okay, these are the configurations
we are going to make now.

2473
02:43:10,560 --> 02:43:20,920
Make sense.

2474
02:43:20,920 --> 02:43:23,320
Let's go ahead and do this

2475
02:43:24,360 --> 02:43:24,880
first thing.

2476
02:43:24,880 --> 02:43:27,120
What we have to do is

2477
02:43:27,120 --> 02:43:30,560
we have to put some of the basic
configurations

2478
02:43:31,560 --> 02:43:33,320
like template correctly.

2479
02:43:33,320 --> 02:43:34,640
You see,

2480
02:43:35,240 --> 02:43:37,160
we need to put basic configuration.

2481
02:43:37,160 --> 02:43:39,760
I'm going to start
with very basic configuration. Great.

2482
02:43:40,080 --> 02:43:44,160
So to do that, let's create
a completely new package.

2483
02:43:44,160 --> 02:43:44,560
Okay?

2484
02:43:44,560 --> 02:43:47,200
I'm going to create
a completely new package.

2485
02:43:47,640 --> 02:43:50,560
My package name,
I'm going to write as config.

2486
02:43:52,080 --> 02:43:53,760
What is this config?

2487
02:43:53,760 --> 02:43:57,000
I'm going to write
all my configurations inside this.

2488
02:43:57,320 --> 02:43:58,280
All right?

2489
02:43:58,360 --> 02:44:01,000
Remember when you write this config fight,

2490
02:44:01,000 --> 02:44:04,240
you create one class,
you will create one file.

2491
02:44:04,240 --> 02:44:08,000
Basically having an extension, call
it dot properties

2492
02:44:09,640 --> 02:44:12,360
because you are creating
some of the properties.

2493
02:44:12,360 --> 02:44:13,280
So do that.

2494
02:44:13,280 --> 02:44:17,360
You need to create one file
having the extension corridor properties.

2495
02:44:17,880 --> 02:44:23,120
If you ever deal with this DOT properties,
find this.

2496
02:44:23,120 --> 02:44:26,280
Is there anyone dot properties, correct.

2497
02:44:26,640 --> 02:44:28,760
Right. In Java.

2498
02:44:28,760 --> 02:44:31,080
So let's do that the same thing.

2499
02:44:31,080 --> 02:44:34,560
How can we create I don't know ways
tell me how to create content there

2500
02:44:34,560 --> 02:44:35,720
properties

2501
02:44:54,920 --> 02:44:55,560
is this correct

2502
02:44:55,560 --> 02:45:05,080
or not.

2503
02:45:05,080 --> 02:45:08,360
Can you see
I am consider properties now insight

2504
02:45:09,360 --> 02:45:12,800
is that anyone who has a confusion
how I created this fight

2505
02:45:13,240 --> 02:45:19,320
the click on the complete package new file
and then right confident properties.

2506
02:45:19,480 --> 02:45:20,880
This file will open up here.

2507
02:45:22,720 --> 02:45:26,240
I'm to pass some of the properties.

2508
02:45:26,240 --> 02:45:28,960
For example,
the first property is my browser.

2509
02:45:29,840 --> 02:45:31,240
So what is my browser?

2510
02:45:31,240 --> 02:45:33,600
Let's say I'm using my chrome as of now.

2511
02:45:34,880 --> 02:45:37,880
The second thing is that
you are all of my application.

2512
02:45:37,880 --> 02:45:40,800
So from there I can see that you are in

2513
02:45:40,800 --> 02:45:42,240
any from any class.

2514
02:45:42,240 --> 02:45:56,320
Let's see here I'm going and I'm copying
this property.

2515
02:45:56,320 --> 02:45:59,640
Hard thing
is I'm going to write my user name here,

2516
02:45:59,760 --> 02:46:04,080
which is paid to me.

2517
02:46:04,080 --> 02:46:07,120
And fourth thing
I'm going to write as my password quality

2518
02:46:13,120 --> 02:46:14,040
just for things.

2519
02:46:14,040 --> 02:46:16,920
I'm thinking guys see

2520
02:46:17,360 --> 02:46:19,960
my browser name of web browser.

2521
02:46:20,280 --> 02:46:24,600
If we will create a setup like this,
if you just change from here

2522
02:46:25,040 --> 02:46:28,960
instead of chrome Firefox,
it execute your script on Firefox.

2523
02:46:29,440 --> 02:46:33,560
We will going to make this system break
for that you are in.

2524
02:46:33,560 --> 02:46:34,640
You will pass from here.

2525
02:46:36,280 --> 02:46:38,280
You will
pass username and password from here.

2526
02:46:38,280 --> 02:46:42,600
These are something which we are passing
in almost every single class,

2527
02:46:42,600 --> 02:46:45,120
but we are writing the code again
and again and again.

2528
02:46:45,720 --> 02:46:47,760
I don't want to write code again
and again.

2529
02:46:47,760 --> 02:46:51,800
I'm going to write it at one place
and I want to utilize it with this.

2530
02:46:52,440 --> 02:46:53,960
Getting my point

2531
02:47:02,040 --> 02:47:03,280
so far. So

2532
02:47:07,720 --> 02:47:12,720
now this is my properties file, right?

2533
02:47:13,160 --> 02:47:14,320
This is my properties.

2534
02:47:14,320 --> 02:47:17,840
Like I need to read these properties as we

2535
02:47:19,640 --> 02:47:20,880
are getting my point

2536
02:47:20,880 --> 02:47:24,000
days, I need to read these properties

2537
02:47:24,000 --> 02:47:27,600
as well or not
because this is just an explanation.

2538
02:47:27,600 --> 02:47:29,800
This is just a declaration, right?

2539
02:47:30,080 --> 02:47:32,480
I need to read these properties.

2540
02:47:32,760 --> 02:47:36,480
To do that,
I am going to create another package here.

2541
02:47:36,720 --> 02:47:40,120
In this package,
I'm going to I'm going to write.

2542
02:47:40,120 --> 02:47:42,440
I'm going to keep all of the code

2543
02:47:43,200 --> 02:47:46,800
which is coming under the category
of utilities.

2544
02:47:47,600 --> 02:47:49,200
What are the utilities?

2545
02:47:49,200 --> 02:47:53,440
For example,
I want to write all of my common steps.

2546
02:47:53,640 --> 02:47:57,400
I want to write all of my reader classes
and every single thing

2547
02:47:57,400 --> 02:47:59,680
I will write inside utilities.

2548
02:47:59,680 --> 02:48:04,160
These utilities help us in executing

2549
02:48:04,160 --> 02:48:08,160
our test case throughout our classes
available in my project.

2550
02:48:08,160 --> 02:48:11,200
All right, let me write your class

2551
02:48:12,680 --> 02:48:13,960
the very first thing.

2552
02:48:13,960 --> 02:48:17,640
Remember, guys,
this is your configured property by

2553
02:48:18,360 --> 02:48:22,800
you have written some of the properties,
but still you cannot use this properties

2554
02:48:22,800 --> 02:48:27,640
directly in your project VI
because this is not the Java code.

2555
02:48:27,640 --> 02:48:29,400
You are using Java code.

2556
02:48:29,400 --> 02:48:36,360
So now you need some Java code,
you need some Java code

2557
02:48:36,480 --> 02:48:39,000
that can read this particular properties
site.

2558
02:48:39,720 --> 02:48:45,080
Correct?

2559
02:48:45,080 --> 02:48:46,560
Correct. Or not really.

2560
02:48:46,560 --> 02:48:48,120
We need some Java code.

2561
02:48:48,120 --> 02:48:50,880
So to do that,
what I'm going to do is inside

2562
02:48:50,880 --> 02:48:54,120
my utils I'm going to write another class.

2563
02:48:54,240 --> 02:48:57,840
Let me create a class called

2564
02:48:58,440 --> 02:49:01,640
on Big Reader.

2565
02:49:01,640 --> 02:49:06,600
This is my class
y configurator because in my config

2566
02:49:06,720 --> 02:49:09,480
reader class in my configurator class,

2567
02:49:09,880 --> 02:49:12,760
I am going to read all the properties

2568
02:49:12,760 --> 02:49:15,440
from property properties.

2569
02:49:15,920 --> 02:49:17,120
All right.

2570
02:49:17,400 --> 02:49:20,000
This is the point from where

2571
02:49:20,520 --> 02:49:24,320
I can use
all of my properties in my project, right?

2572
02:49:24,600 --> 02:49:28,800
I'm trying to translate my Bon
Java stuff into Java

2573
02:49:28,800 --> 02:49:33,240
step by using this configurator class.

2574
02:49:33,240 --> 02:49:35,000
So far so good, right?

2575
02:49:35,000 --> 02:49:44,760
Should you pursue further,
I'm going to write your public

2576
02:49:46,200 --> 02:49:49,760
safety by

2577
02:49:53,320 --> 02:49:57,560
reading the properties.

2578
02:49:57,560 --> 02:49:58,400
All right.

2579
02:49:59,160 --> 02:50:01,280
I'm going to read the properties.
All right.

2580
02:50:01,640 --> 02:50:03,200
So the properties of what?

2581
02:50:03,200 --> 02:50:06,320
One file,
which file considered properties by.

2582
02:50:06,320 --> 02:50:09,000
So I'm going to write here

2583
02:50:09,320 --> 02:50:10,920
the file, but the file path

2584
02:50:10,920 --> 02:50:14,280
of which file
my considered properties file.

2585
02:50:14,280 --> 02:50:16,400
But I'm going to utilize here.

2586
02:50:16,760 --> 02:50:17,480
Okay.

2587
02:50:18,560 --> 02:50:21,480
So if you read some file, there is a class

2588
02:50:21,640 --> 02:50:25,200
which I'm going to use
which class classes that

2589
02:50:30,440 --> 02:50:31,440
remember one file

2590
02:50:31,440 --> 02:50:38,760
input stream.

2591
02:50:38,760 --> 02:50:54,600
How many of you guys know this file input
stream class.

2592
02:50:54,600 --> 02:50:55,280
All right.

2593
02:50:55,280 --> 02:51:00,440
We generally use this particular class to
check out a file right to check on file.

2594
02:51:00,840 --> 02:51:02,200
Now it is giving me one.

2595
02:51:02,200 --> 02:51:03,120
And what is that?

2596
02:51:03,120 --> 02:51:07,400
It says an exception to method signature Y
because under

2597
02:51:07,400 --> 02:51:08,880
the exception file, not found

2598
02:51:10,680 --> 02:51:11,320
what we should do.

2599
02:51:11,320 --> 02:51:14,240
In that case.

2600
02:51:14,240 --> 02:51:16,320
Is this out with private resources?

2601
02:51:16,560 --> 02:51:18,920
Try catch block

2602
02:51:21,920 --> 02:51:28,320
all what it does.

2603
02:51:28,320 --> 02:51:31,280
Let me read it
and let me write it inside of my catch.

2604
02:51:31,280 --> 02:51:34,440
BLOCK So inside my catch block, I'm
going to write it

2605
02:51:34,440 --> 02:51:35,640
like this

2606
02:51:41,720 --> 02:51:43,040
file not found exception.

2607
02:51:43,040 --> 02:51:44,800
It is giving to find.

2608
02:51:44,800 --> 02:51:47,040
And here I'm going to write.

2609
02:51:47,040 --> 02:51:49,760
I'm not going to stick place

2610
02:51:49,760 --> 02:51:52,960
right now.

2611
02:51:53,840 --> 02:51:59,680
Is this correct? No.

2612
02:52:01,280 --> 02:52:03,200
Now I'm going to do one thing

2613
02:52:03,200 --> 02:52:06,720
because the state is reading
the properties.

2614
02:52:06,720 --> 02:52:09,840
The file is still yet to be implemented.

2615
02:52:10,280 --> 02:52:12,880
So I'm going to implement that code

2616
02:52:15,400 --> 02:52:26,040
properties.

2617
02:52:26,040 --> 02:52:26,520
Right.

2618
02:52:26,520 --> 02:52:29,440
To read the properties,
I have to call my properties

2619
02:52:29,440 --> 02:52:32,920
class and here I'm going to write this

2620
02:52:32,920 --> 02:52:33,360
post.

2621
02:52:33,360 --> 02:52:35,440
I'm going load the flight.

2622
02:52:35,440 --> 02:52:37,320
Fine. Again, it is giving me an error.

2623
02:52:38,320 --> 02:52:39,320
Now what is this error?

2624
02:52:39,320 --> 02:52:43,920
Let's check once again.

2625
02:52:43,920 --> 02:52:46,080
I'll input a stream list Java.

2626
02:52:46,320 --> 02:52:49,080
I'll input stream of three.

2627
02:52:49,080 --> 02:52:51,720
This should be loaded
because I have the load.

2628
02:52:51,720 --> 02:52:57,080
Fine.

2629
02:52:57,080 --> 02:53:01,160
Now it is giving me again
the exception that is Iowa exception.

2630
02:53:01,560 --> 02:53:02,360
Fine.

2631
02:53:02,560 --> 02:53:03,480
One more exception.

2632
02:53:03,480 --> 02:53:05,040
It means one more cricket block.

2633
02:53:05,040 --> 02:53:07,080
So I already have.

2634
02:53:07,080 --> 02:53:10,160
I'm going to put my
which block gets block.

2635
02:53:10,160 --> 02:53:12,680
So I'm going to write it if I

2636
02:53:15,000 --> 02:53:17,360
exception E

2637
02:53:17,360 --> 02:53:20,640
and he and again, I'm going to write it

2638
02:53:20,760 --> 02:53:22,320
that if

2639
02:53:22,760 --> 02:53:26,520
remember you have opened the file,
you have load the properties,

2640
02:53:26,680 --> 02:53:31,520
you have read it, but don't forgot,
don't forget to close this file.

2641
02:53:31,520 --> 02:53:34,560
So if I start close, you have to close it.

2642
02:53:34,560 --> 02:53:38,200
Also right
after reading, you have to close it also

2643
02:53:41,240 --> 02:53:41,640
getting my

2644
02:53:41,640 --> 02:53:46,080
point guys,

2645
02:53:46,080 --> 02:53:48,120
so far in this code, any computer,

2646
02:53:49,240 --> 02:53:52,800
this is just one method,
just the one generic function

2647
02:53:53,040 --> 02:53:57,480
which will read all of my properties
from the properties file.

2648
02:53:57,680 --> 02:54:02,640
And if I use this particular function
anywhere, anywhere

2649
02:54:02,640 --> 02:54:06,600
in my project, it will give me the result
of from the properties.

2650
02:54:06,600 --> 02:54:09,600
Fine. Correct.

2651
02:54:09,600 --> 02:54:13,080
Now, if I observe closely

2652
02:54:13,080 --> 02:54:16,640
in my continuous properties file,
I have four different properties here.

2653
02:54:17,640 --> 02:54:22,920
This in one file I need just one property
that is doesn't name in one method.

2654
02:54:22,920 --> 02:54:26,040
I need another properties.
That is username.

2655
02:54:26,040 --> 02:54:26,680
Right.

2656
02:54:26,680 --> 02:54:29,480
But here it is
giving me all the properties in a bunch.

2657
02:54:30,200 --> 02:54:30,920
Right.

2658
02:54:31,480 --> 02:54:36,160
So is this setup correct that I'm getting
all the properties that I need?

2659
02:54:36,160 --> 02:54:38,960
Just one instead of getting one.

2660
02:54:38,960 --> 02:54:41,880
I'm getting forward from here,
but I need one at one time.

2661
02:54:42,360 --> 02:54:45,560
So based on what I can,
access is specific property.

2662
02:54:45,560 --> 02:54:45,840
Guys,

2663
02:54:47,280 --> 02:54:48,120
any idea

2664
02:54:48,120 --> 02:54:51,720
on what I can get this specific property?

2665
02:54:51,720 --> 02:54:56,480
I think meanwhile, I'm putting the coming

2666
02:54:58,360 --> 02:55:00,840
this method in the

2667
02:55:03,120 --> 02:55:05,760
any property file

2668
02:55:06,680 --> 02:55:11,240
guys, any idea? No.

2669
02:55:12,400 --> 02:55:14,480
Can you see these configured properties?

2670
02:55:14,480 --> 02:55:15,920
These are the keys.

2671
02:55:15,920 --> 02:55:19,080
Remember
you are in browser username and password.

2672
02:55:19,080 --> 02:55:23,520
These are the keys.

2673
02:55:23,520 --> 02:55:27,360
Then if I'm coming to that part
because this property is right,

2674
02:55:27,360 --> 02:55:28,560
it will give you an error.

2675
02:55:28,560 --> 02:55:33,480
Now I'm showing you how it will get out.

2676
02:55:33,480 --> 02:55:35,960
Yes, we have to read it based on keys.

2677
02:55:35,960 --> 02:55:39,440
When we need a username,
we should need username or we should get

2678
02:55:39,440 --> 02:55:42,480
only username and password
we should get password.

2679
02:55:42,480 --> 02:55:48,000
Only Another method I'm going to write
is public.

2680
02:55:48,000 --> 02:55:49,080
Typing

2681
02:55:49,560 --> 02:55:51,880
is free,

2682
02:55:52,120 --> 02:55:55,320
but I'm going to get

2683
02:55:55,640 --> 02:55:57,680
property value

2684
02:55:58,320 --> 02:56:00,040
based on what I'm going to get this

2685
02:56:00,040 --> 02:56:02,360
property value based on the key point.

2686
02:56:03,080 --> 02:56:06,040
So here what I need they return.

2687
02:56:06,520 --> 02:56:07,520
What return?

2688
02:56:07,520 --> 02:56:10,240
It should return my property, dot

2689
02:56:10,920 --> 02:56:15,400
property, dot get property value by

2690
02:56:16,440 --> 02:56:18,320
date, property

2691
02:56:18,400 --> 02:56:24,040
value bucket based on my key.

2692
02:56:25,000 --> 02:56:26,880
Now if you'll see

2693
02:56:27,360 --> 02:56:30,840
I need this
get property value from this property part

2694
02:56:31,480 --> 02:56:34,960
from this property,
but it is not returning.

2695
02:56:34,960 --> 02:56:37,160
This method should return.

2696
02:56:37,160 --> 02:56:38,480
This method should return.

2697
02:56:38,480 --> 02:56:43,040
Property is then only I will be able
to catch that property in other method.

2698
02:56:43,880 --> 02:56:47,360
So to return to get something
from this method, what should I change?

2699
02:56:47,920 --> 02:56:51,760
I should change this way
because this is not acting right

2700
02:56:52,160 --> 02:56:55,640
and then this properties I'm using in
this method as well.

2701
02:56:56,040 --> 02:56:58,480
So let's do one thing.

2702
02:56:58,480 --> 02:57:00,440
Yes, let's do one thing.

2703
02:57:00,440 --> 02:57:02,480
Remove it from here. Bye.

2704
02:57:02,760 --> 02:57:05,400
Because I'm going to use this
property here also.

2705
02:57:05,800 --> 02:57:08,480
So I'm going to write Stop start

2706
02:57:09,880 --> 02:57:10,600
time.

2707
02:57:10,760 --> 02:57:12,120
It is giving the Arab.

2708
02:57:12,120 --> 02:57:15,200
So I'm going to write it as static

2709
02:57:16,560 --> 02:57:20,880
properties as thought.

2710
02:57:20,880 --> 02:57:22,480
Now, can you see

2711
02:57:22,920 --> 02:57:25,760
here I have to write another method called

2712
02:57:29,160 --> 02:57:31,400
instead of Void and Deeds properties.

2713
02:57:31,400 --> 02:57:33,240
Now it is giving me the error.

2714
02:57:33,240 --> 02:57:36,840
So I'm going to read one part from here
that these properties

2715
02:57:39,640 --> 02:57:40,800
now here

2716
02:57:40,800 --> 02:57:44,600
also exist public static stream
fine gate property.

2717
02:57:45,000 --> 02:57:48,720
So I am going to write here is

2718
02:57:48,760 --> 02:57:49,960
a return

2719
02:57:51,240 --> 02:57:52,640
drop dart

2720
02:57:52,640 --> 02:58:01,560
gate.

2721
02:58:01,560 --> 02:58:03,920
Now how this works, let me write it.

2722
02:58:04,320 --> 02:58:07,800
When coming back, this method

2723
02:58:09,400 --> 02:58:10,960
reads

2724
02:58:11,320 --> 02:58:14,160
Single value

2725
02:58:14,960 --> 02:58:17,880
based on the

2726
02:58:18,240 --> 02:58:20,760
If I now see

2727
02:58:21,720 --> 02:58:26,840
this method will read all the properties
from your dart properties.

2728
02:58:26,840 --> 02:58:27,680
Fine.

2729
02:58:27,680 --> 02:58:32,960
Right now you have all the properties
inside this object, this prop object.

2730
02:58:33,600 --> 02:58:36,800
You are calling this prop object
and you are saying get property

2731
02:58:36,800 --> 02:58:41,200
from these properties by which property
based on the key you're passing.

2732
02:58:41,520 --> 02:58:42,160
All right.

2733
02:58:42,160 --> 02:58:45,000
So from where you can pass from
your function, you can pass

2734
02:58:48,000 --> 02:58:49,880
or it should be

2735
02:58:49,880 --> 02:58:52,200
gate property, not gate property value.

2736
02:58:53,160 --> 02:58:56,240
If you take your method like

2737
02:59:03,240 --> 02:59:06,880
so you have to write a string key here

2738
02:59:07,200 --> 02:59:08,320
is spring key.

2739
02:59:08,320 --> 02:59:09,960
And then this key you need to pass.

2740
02:59:09,960 --> 02:59:11,400
This is just a parameter, right?

2741
02:59:11,400 --> 02:59:13,520
You can pass any other parameters,
no issues.

2742
02:59:14,880 --> 02:59:18,000
And the beach party of last year tell me

2743
02:59:18,000 --> 02:59:20,520
this 1015 lines of code we have written.

2744
02:59:21,960 --> 02:59:24,920
Let me explain you once again.

2745
02:59:24,920 --> 02:59:26,400
See you guys.

2746
02:59:26,400 --> 02:59:39,640
This is my non Java stuff right?

2747
02:59:39,640 --> 02:59:40,280
Fine.

2748
02:59:40,280 --> 02:59:44,360
So to fix this, to fix this post,
what you have to do basically is

2749
02:59:45,480 --> 02:59:46,200
write

2750
02:59:47,960 --> 02:59:48,280
first.

2751
02:59:48,280 --> 02:59:50,240
You need to check this method.

2752
02:59:50,240 --> 02:59:52,520
Make sure your this method is same is my

2753
02:59:53,200 --> 02:59:56,280
this code is same as mine
and then it will not give you two zero

2754
02:59:58,800 --> 03:00:00,120
now. So you guys,

2755
03:00:00,600 --> 03:00:03,080
again, I'm explaining no issues.

2756
03:00:03,080 --> 03:00:06,840
You have these configured properties
right here.

2757
03:00:06,840 --> 03:00:09,600
This is your non java stuff

2758
03:00:11,880 --> 03:00:14,080
right now in this non java stuff,

2759
03:00:14,440 --> 03:00:18,080
you need one class
from where you can read inside

2760
03:00:18,120 --> 03:00:21,840
Java right?

2761
03:00:21,840 --> 03:00:28,160
Is it clear?

2762
03:00:28,160 --> 03:00:29,600
Is it clear

2763
03:00:29,920 --> 03:00:31,120
to non java stuff?

2764
03:00:31,120 --> 03:00:34,440
If you want to read you need some code.

2765
03:00:34,440 --> 03:00:36,600
This is the code to read.

2766
03:00:36,600 --> 03:00:39,960
The property is quite correct

2767
03:00:39,960 --> 03:00:41,880
to read the properties file.

2768
03:00:41,880 --> 03:00:44,400
This is the method we have written.

2769
03:00:44,400 --> 03:00:46,800
So this file we are talking about,

2770
03:00:47,520 --> 03:00:50,280
we have taken this file by our file
import stream.

2771
03:00:50,520 --> 03:00:54,160
This is the code of your java
to read properties.

2772
03:00:54,160 --> 03:00:57,360
What you need to do is
you need to call this properties portion.

2773
03:00:57,720 --> 03:00:58,960
It will load the file.

2774
03:00:58,960 --> 03:01:00,600
It means it is loading.

2775
03:01:00,600 --> 03:01:04,200
It is loading all the properties
from your dart file

2776
03:01:04,200 --> 03:01:08,080
into this properties
object into this properties object.

2777
03:01:08,080 --> 03:01:10,480
Now you have all the properties

2778
03:01:10,640 --> 03:01:13,840
which are available
in your configured properties file.

2779
03:01:14,280 --> 03:01:15,000
Correct.

2780
03:01:15,200 --> 03:01:18,760
Once you load all of the properties
from your configured properties

2781
03:01:18,760 --> 03:01:22,720
file inside this property,
you will close this, connect

2782
03:01:27,720 --> 03:01:29,000
guys these three lines of code.

2783
03:01:29,000 --> 03:01:30,360
Understandable.

2784
03:01:30,400 --> 03:01:31,440
Everyone

2785
03:01:33,120 --> 03:01:35,960
know now if you see in this method,

2786
03:01:36,720 --> 03:01:40,840
if you see in this method,
I'm not getting anything in specific.

2787
03:01:41,640 --> 03:01:45,720
I'm just reading I'm loading
all the properties in this drop object.

2788
03:01:46,480 --> 03:01:47,200
Right.

2789
03:01:47,360 --> 03:01:51,960
But if you see in my configured properties
here, you'll see this browser.

2790
03:01:52,240 --> 03:01:54,120
You are in username password.

2791
03:01:54,120 --> 03:01:56,360
These are unique keys

2792
03:01:56,360 --> 03:01:57,960
and then I have unique keys.

2793
03:01:57,960 --> 03:02:01,400
My requirement would be some things
I knew just user need some guidance.

2794
03:02:01,400 --> 03:02:05,280
I need just password sometimes I just
need a browser or sometimes I just need.

2795
03:02:05,400 --> 03:02:07,360
You are right.

2796
03:02:07,360 --> 03:02:10,600
It might be possible
that I don't need all of this for keys.

2797
03:02:10,600 --> 03:02:15,640
It wouldn't be that

2798
03:02:17,200 --> 03:02:18,760
I got it.

2799
03:02:18,760 --> 03:02:22,880
So here, if I go inside my configurator,
I made it static.

2800
03:02:23,000 --> 03:02:25,440
Right the properties as an instance video.

2801
03:02:25,440 --> 03:02:27,400
But now what is the
access modifier here? This

2802
03:02:28,520 --> 03:02:34,360
for these properties?

2803
03:02:34,360 --> 03:02:36,360
Someone was asking private.

2804
03:02:36,360 --> 03:02:40,000
If I make it private I wouldn't
be able to use anywhere else by default.

2805
03:02:40,000 --> 03:02:41,680
It is available for right.

2806
03:02:41,680 --> 03:02:45,720
So in this dual method, obviously
I can write inside one method, right?

2807
03:02:46,120 --> 03:02:49,800
I'm defining it on a class
level instance media by

2808
03:02:50,000 --> 03:02:53,680
so that I can it in
both the methods from this method.

2809
03:02:53,840 --> 03:02:58,600
From this method I have load
all the properties in prop object

2810
03:02:58,960 --> 03:03:01,600
and then I'm returning this prop object
from this method.

2811
03:03:02,520 --> 03:03:03,120
Right?

2812
03:03:03,120 --> 03:03:06,200
So what this method is giving,

2813
03:03:06,200 --> 03:03:07,960
this method reads

2814
03:03:07,960 --> 03:03:12,240
all the properties
and having this inside prop object.

2815
03:03:12,240 --> 03:03:12,760
Right?

2816
03:03:12,760 --> 03:03:15,200
And this method is returning this prop
object.

2817
03:03:15,480 --> 03:03:16,200
Correct.

2818
03:03:17,040 --> 03:03:20,520
So far,
this is what this method is returning us.

2819
03:03:21,080 --> 03:03:25,080
This method is reading and loading
all the properties from quantum

2820
03:03:25,080 --> 03:03:30,720
dot properties file and it is keeping
all of this thing in my prop object.

2821
03:03:30,880 --> 03:03:33,600
And this method is returning
with this prop object.

2822
03:03:34,120 --> 03:03:34,920
So far so good.

2823
03:03:36,480 --> 03:03:37,360
Now forget

2824
03:03:37,360 --> 03:03:41,280
about configured properties,
whatever the things we have in configured

2825
03:03:41,280 --> 03:03:45,520
properties, we have all these things
in my prop right now.

2826
03:03:45,520 --> 03:03:48,960
Let's focus only on this prop

2827
03:03:49,080 --> 03:03:52,440
and this bug.

2828
03:03:52,440 --> 03:03:54,960
And that's now clear until this point.

2829
03:03:56,040 --> 03:03:56,840
Okay?

2830
03:03:57,000 --> 03:03:59,080
Now just focus on this prop object.

2831
03:03:59,080 --> 03:04:01,240
I have this prop object with me.

2832
03:04:02,040 --> 03:04:04,320
Find in another method.

2833
03:04:04,800 --> 03:04:07,320
In another method, I am saying

2834
03:04:07,360 --> 03:04:10,200
I'm going to get
the benefit of the property,

2835
03:04:10,360 --> 03:04:13,280
not properties property thing.

2836
03:04:13,680 --> 03:04:17,560
All right,
so this prop has all the properties.

2837
03:04:17,920 --> 03:04:20,120
I need one property. Fine.

2838
03:04:20,520 --> 03:04:22,560
This method says unit one property.

2839
03:04:22,800 --> 03:04:23,280
Go ahead.

2840
03:04:23,280 --> 03:04:23,640
Tick.

2841
03:04:23,640 --> 03:04:28,800
Based on what I'm seeing,
based on key rate I'm seeing based on T.

2842
03:04:29,120 --> 03:04:32,400
So your method says only prop
dart gate property.

2843
03:04:32,720 --> 03:04:35,680
It means that on this prop
you have all the properties.

2844
03:04:35,800 --> 03:04:38,320
You can get one property based on what?

2845
03:04:38,320 --> 03:04:41,280
Based on the key
let's say you plus browser.

2846
03:04:41,640 --> 03:04:45,720
So from these properties,
these properties have your

2847
03:04:45,720 --> 03:04:49,120
this prop
object has your browser username password.

2848
03:04:49,120 --> 03:04:53,480
You are a duplicate browser,
so it will not give you all for this time.

2849
03:04:53,600 --> 03:04:56,360
Going will give you a just browser clear

2850
03:05:07,160 --> 03:05:08,520
gain so far.

2851
03:05:08,520 --> 03:05:11,400
Is it clear or not any

2852
03:05:20,240 --> 03:05:34,560
kind of?

2853
03:05:34,560 --> 03:05:41,920
Obviously you need practice.

2854
03:05:41,920 --> 03:05:42,720
All right.

2855
03:05:43,920 --> 03:05:58,600
Now shall we proceed further, guys?

2856
03:05:58,600 --> 03:05:59,880
Okay.

2857
03:05:59,880 --> 03:06:04,240
Now see,
the next thing we were talking about.

2858
03:06:04,520 --> 03:06:09,360
I hope I'm not going too fast.

2859
03:06:09,360 --> 03:06:11,560
He has an

2860
03:06:12,840 --> 03:06:15,560
So now remember,
we were talking about this

2861
03:06:15,560 --> 03:06:18,320
three condition,
enforced condition, right?

2862
03:06:18,320 --> 03:06:20,600
We used to write inside every other class.

2863
03:06:21,320 --> 03:06:22,200
It's time.

2864
03:06:22,200 --> 03:06:24,440
Get rid out of this situation. Right.

2865
03:06:25,200 --> 03:06:27,320
I'm going to create another class.

2866
03:06:27,320 --> 03:06:31,040
I am calling this class as

2867
03:06:35,080 --> 03:06:36,800
common methods.

2868
03:06:36,840 --> 03:06:40,840
All right?

2869
03:06:40,840 --> 03:06:44,080
What I'm going to do is I'm going to write
method is common

2870
03:06:44,080 --> 03:06:54,720
methods.

2871
03:06:54,720 --> 03:06:57,000
Thank you, guys.

2872
03:06:57,480 --> 03:07:02,120
I have created another classes,
Common methods, Class VI because.

2873
03:07:02,120 --> 03:07:04,840
I need to keep all of my code.

2874
03:07:04,840 --> 03:07:06,720
This code, this code.

2875
03:07:06,720 --> 03:07:09,840
Write this code
that I don't want to write this code again

2876
03:07:09,840 --> 03:07:21,000
and again in every single class.

2877
03:07:21,000 --> 03:07:21,880
Guys getting my point

2878
03:07:28,680 --> 03:07:30,480
like so

2879
03:07:30,480 --> 03:07:33,400
now let's proceed further in our common
methods.

2880
03:07:33,600 --> 03:07:34,120
Right?

2881
03:07:34,520 --> 03:07:36,880
I'm going to define my driver also here.

2882
03:07:36,920 --> 03:07:39,640
So I'm going to make public static

2883
03:07:41,920 --> 03:07:43,960
web by word timeline.

2884
03:07:44,680 --> 03:07:47,760
Now, the point is why I'm making
this driver is public.

2885
03:07:48,080 --> 03:07:51,040
Remember throughout your all the packet,

2886
03:07:51,080 --> 03:07:54,040
if I make it this default,
then what is the issue?

2887
03:07:54,720 --> 03:08:00,360
The issue is this my common
method is available inside this utils.

2888
03:08:00,360 --> 03:08:03,680
If I want to use all of my common
methods, my precondition

2889
03:08:03,680 --> 03:08:07,080
in most condition
outside the package in any other package,

2890
03:08:07,320 --> 03:08:10,920
then this driver
I will not be able to utilize this right.

2891
03:08:11,400 --> 03:08:14,640
That's
why that's why I'm making it as a public.

2892
03:08:15,120 --> 03:08:17,400
Underscore the concept
by making it as a public

2893
03:08:20,760 --> 03:08:21,280
protected.

2894
03:08:21,280 --> 03:08:23,160
Also you can use for as a percent.

2895
03:08:23,160 --> 03:08:26,120
I'm using public or right now,
you can use particular

2896
03:08:26,480 --> 03:08:30,240
issues.

2897
03:08:30,240 --> 03:08:36,240
Fine. Then

2898
03:08:37,640 --> 03:08:38,080
since this

2899
03:08:38,080 --> 03:08:41,040
is my precondition,
this is my precondition.

2900
03:08:41,440 --> 03:08:43,800
I'm going to right before method, right?

2901
03:08:44,120 --> 03:08:45,000
Why? Before the method?

2902
03:08:45,000 --> 03:08:47,960
Everyone knows guys

2903
03:08:49,120 --> 03:08:51,320
always run as equals.

2904
03:08:51,320 --> 03:08:53,840
Photo
What does it mean when I say precondition?

2905
03:08:53,880 --> 03:08:54,600
Tell me

2906
03:08:55,800 --> 03:09:00,280
I want to execute before my best case
state Precondition.

2907
03:09:00,760 --> 03:09:04,360
What is the Let me copy
this code from my data provider

2908
03:09:04,680 --> 03:09:07,880
which will open browser.

2909
03:09:07,880 --> 03:09:09,640
See, I don't want this code.

2910
03:09:09,640 --> 03:09:12,280
I'm just deleting it from you.

2911
03:09:12,280 --> 03:09:12,960
Right?

2912
03:09:15,240 --> 03:09:16,040
I'm deleting it

2913
03:09:16,040 --> 03:09:21,280
from here.

2914
03:09:21,280 --> 03:09:23,720
Just one class.
I'm taking data provider class.

2915
03:09:23,720 --> 03:09:26,960
You can also do the same thing
from data provider.

2916
03:09:26,960 --> 03:09:29,640
Remove that method and just paste it here

2917
03:09:34,040 --> 03:09:35,680
is do you want me to explain it?

2918
03:09:35,680 --> 03:09:38,280
Once again, going to your data provider
demo class.

2919
03:09:39,080 --> 03:09:41,840
Remove this edited before from there.

2920
03:09:42,320 --> 03:09:46,960
Right with the before method and then
keep it inside your common methods.

2921
03:09:47,920 --> 03:09:51,840
Do it like this.

2922
03:09:51,840 --> 03:09:58,480
Then everyone.

2923
03:09:58,480 --> 03:10:01,960
Now I said already,
I don't need to pass this.

2924
03:10:02,320 --> 03:10:03,240
You are in here.

2925
03:10:03,240 --> 03:10:07,040
Correct.

2926
03:10:07,040 --> 03:10:09,680
I don't need to pass this.
You are in here.

2927
03:10:09,680 --> 03:10:13,000
So what I'm going to do is first I'm going

2928
03:10:13,000 --> 03:10:16,640
to I'm going to read the properties
from where

2929
03:10:18,320 --> 03:10:21,720
I'm reading the properties in which class

2930
03:10:27,240 --> 03:10:29,000
springs we are reading.

2931
03:10:29,000 --> 03:10:33,560
The properties in
UTILS is a package inside config reader.

2932
03:10:33,560 --> 03:10:34,000
Right.

2933
03:10:34,000 --> 03:10:37,720
I'm going to write Configurator Dark

2934
03:10:37,720 --> 03:10:39,680
read properties.

2935
03:10:39,680 --> 03:10:41,600
This is my method, right?

2936
03:10:41,600 --> 03:10:42,840
This is my mother.

2937
03:10:42,840 --> 03:10:45,480
Now it is asking file but why?

2938
03:10:45,480 --> 03:10:46,440
It is asking for files.

2939
03:10:46,440 --> 03:10:49,920
But that is because we provided
one string file portrait.

2940
03:10:50,800 --> 03:10:52,880
So it is to read the properties.

2941
03:10:52,880 --> 03:10:55,280
I am ready.
Tell me which file I need to see.

2942
03:10:55,680 --> 03:11:00,600
So I'm giving the part of this content
or properties how to provide the path.

2943
03:11:00,600 --> 03:11:01,320
Right click

2944
03:11:02,280 --> 03:11:04,560
copy path absolute path

2945
03:11:05,280 --> 03:11:07,320
copy and is pretty

2946
03:11:12,360 --> 03:11:13,600
guys got it

2947
03:11:13,600 --> 03:11:16,920
configurator
not properties vehicle from configurator

2948
03:11:17,560 --> 03:11:20,400
it is asking for file
photo employing file path

2949
03:11:20,840 --> 03:11:25,080
you can take this file but from configure
properties right click copy part

2950
03:11:25,520 --> 03:11:28,680
copy the path infrastructure
and continue to study

2951
03:11:29,160 --> 03:11:33,480
in my common methods.

2952
03:11:33,480 --> 03:11:42,240
Make sense of Firebase.

2953
03:11:42,240 --> 03:11:46,320
Now I'm going to use switch case the

2954
03:11:49,880 --> 03:11:51,960
I'm going to write

2955
03:11:52,920 --> 03:11:53,840
switch.

2956
03:11:54,440 --> 03:11:56,680
I'm saying in my configurator

2957
03:11:57,080 --> 03:11:59,560
you're already editing the properties
file.

2958
03:12:00,120 --> 03:12:02,600
I need gate property

2959
03:12:02,760 --> 03:12:05,720
which property I needed my browser name.

2960
03:12:06,360 --> 03:12:07,240
All right.

2961
03:12:07,640 --> 03:12:10,520
When I say I need my browser name right,

2962
03:12:10,680 --> 03:12:13,920
I will keep this code, this code

2963
03:12:14,400 --> 03:12:18,000
inside of my browser,
so my browser name would be blocked.

2964
03:12:18,840 --> 03:12:22,560
Let me state it and I see

2965
03:12:23,760 --> 03:12:24,720
I'm writing here.

2966
03:12:24,720 --> 03:12:27,760
See if case switch gets right.

2967
03:12:28,240 --> 03:12:35,000
If the value of my case is chrome,
then execute this code

2968
03:12:38,280 --> 03:12:40,240
which caused this code.

2969
03:12:40,240 --> 03:12:43,200
Otherwise break.

2970
03:12:43,200 --> 03:12:46,320
And then if my case is the

2971
03:12:49,320 --> 03:12:51,000
Firefox

2972
03:12:51,600 --> 03:12:54,240
right, then simply print one thing here.

2973
03:12:55,040 --> 03:12:58,680
We call this things let's say
or we simply write right.

2974
03:12:58,680 --> 03:13:01,920
Whatever
the path of my browser, let's say browser

2975
03:13:04,880 --> 03:13:06,240
not available.

2976
03:13:06,240 --> 03:13:08,200
You can put the browser name right.

2977
03:13:08,200 --> 03:13:11,280
You know, our ecosystem guard side
properties and everything in between.

2978
03:13:12,000 --> 03:13:14,520
And then again here we to break it.

2979
03:13:15,240 --> 03:13:18,960
And the last one is let's say you
just need to provide default case here.

2980
03:13:19,560 --> 03:13:21,760
Default case is through new

2981
03:13:22,200 --> 03:13:24,240
what I'm going to is runtime exception.

2982
03:13:24,840 --> 03:13:30,440
What I'm going to write invalid

2983
03:13:32,880 --> 03:13:35,320
counts and find

2984
03:13:41,640 --> 03:13:43,120
Now see you guys

2985
03:13:43,480 --> 03:13:44,360
in this code.

2986
03:13:44,360 --> 03:13:45,600
So far

2987
03:13:47,960 --> 03:13:50,120
in this code so far,

2988
03:13:50,120 --> 03:13:52,240
I'm reading the properties from this file.

2989
03:13:53,240 --> 03:13:56,600
I'm getting the properties
based on this value, right?

2990
03:13:56,640 --> 03:13:58,560
These are based on this key.

2991
03:13:58,560 --> 03:14:00,600
If my key is equal to this

2992
03:14:03,400 --> 03:14:04,800
density, if my

2993
03:14:04,800 --> 03:14:08,320
key is equal to this,
this code will execute.

2994
03:14:09,960 --> 03:14:14,240
If my key is equal to Firefox,
this code will execute.

2995
03:14:14,520 --> 03:14:17,880
If my key is invalid,
this code will execute.

2996
03:14:18,280 --> 03:14:19,800
This is this which case.

2997
03:14:19,800 --> 03:14:21,240
The statement

2998
03:14:27,560 --> 03:14:27,920
so far?

2999
03:14:27,920 --> 03:14:31,320
Is it correct?

3000
03:14:31,320 --> 03:14:33,560
Let's proceed further.

3001
03:14:33,600 --> 03:14:35,680
I don't need this anymore.

3002
03:14:36,360 --> 03:14:37,040
I don't need.

3003
03:14:37,040 --> 03:14:39,400
I'm going to write here configurator

3004
03:14:40,800 --> 03:14:43,440
dark gate Property value.

3005
03:14:43,440 --> 03:14:46,520
What is my property
this time you are in simple

3006
03:14:48,000 --> 03:14:50,120
isn't making your very easy

3007
03:14:50,880 --> 03:14:54,120
right this time just to pass the you are
it will get the value

3008
03:14:55,720 --> 03:14:58,080
you're opening, the browser
you're launching

3009
03:14:58,080 --> 03:15:01,080
that you are navigating application
and then wait.

3010
03:15:02,360 --> 03:15:04,680
Now your method is ready.

3011
03:15:05,120 --> 03:15:09,240
Correct.

3012
03:15:09,240 --> 03:15:11,880
Guys, is this correct or not

3013
03:15:16,440 --> 03:15:17,120
funny?

3014
03:15:18,480 --> 03:15:22,640
Go back to your builder driver
demo once again, go back to this part.

3015
03:15:24,120 --> 03:15:26,160
You'll see this is your post condition

3016
03:15:27,200 --> 03:15:28,920
again. Just got it from here.

3017
03:15:28,920 --> 03:15:32,360
Your post condition
and press state here only

3018
03:15:32,880 --> 03:15:36,600
this is your post condition right

3019
03:15:37,520 --> 03:15:39,480
now every time.

3020
03:15:39,480 --> 03:15:42,960
See you guys how this things work

3021
03:15:43,560 --> 03:15:44,360
every time

3022
03:15:44,360 --> 03:15:48,320
in every single class
when you have to open the browser,

3023
03:15:48,680 --> 03:15:52,080
when you have to open the browser
as a precondition, what it will do,

3024
03:15:52,520 --> 03:15:56,640
it will read your properties
by post, right?

3025
03:15:57,080 --> 03:16:00,120
It will take it on
to the basis of your keys

3026
03:16:00,320 --> 03:16:03,560
and then it will upload the data.

3027
03:16:03,560 --> 03:16:04,800
Getting my point.

3028
03:16:04,800 --> 03:16:08,680
It will also close your browser this time
if you'll see.

3029
03:16:08,920 --> 03:16:09,840
This time if you'll see.

3030
03:16:09,840 --> 03:16:12,320
Let me show you another point.

3031
03:16:12,320 --> 03:16:15,120
I'm going here in my data
provide data for later.

3032
03:16:15,120 --> 03:16:16,560
They will now see

3033
03:16:18,120 --> 03:16:18,880
till this point

3034
03:16:18,880 --> 03:16:22,760
of time I was passing data from my data.

3035
03:16:22,760 --> 03:16:26,800
Correct?

3036
03:16:26,800 --> 03:16:36,120
Correct means.

3037
03:16:36,120 --> 03:16:39,440
Now I don't want to pass this data
from my data way pass

3038
03:16:43,360 --> 03:16:50,600
right?

3039
03:16:50,600 --> 03:16:53,640
I don't want to pass this data
from my data provider class here.

3040
03:16:54,040 --> 03:16:55,680
So what can I do?

3041
03:16:56,560 --> 03:16:58,480
I will write this data provider.

3042
03:16:58,480 --> 03:16:59,200
Correct?

3043
03:17:00,360 --> 03:17:03,040
Correct.

3044
03:17:03,040 --> 03:17:04,040
Here.

3045
03:17:04,280 --> 03:17:07,440
Here, because I have everything

3046
03:17:07,440 --> 03:17:10,480
available in my common methods

3047
03:17:10,480 --> 03:17:13,440
against everything
I available in my common

3048
03:17:13,440 --> 03:17:14,800
methods, correct

3049
03:17:18,840 --> 03:17:20,560
guys getting my point.

3050
03:17:20,560 --> 03:17:24,960
So to use to use the properties
and the features

3051
03:17:24,960 --> 03:17:29,240
of my common methods in my data provider
which oops concept

3052
03:17:29,280 --> 03:17:30,600
I will use

3053
03:17:42,560 --> 03:17:43,400
extend.

3054
03:17:43,400 --> 03:17:43,880
Correct.

3055
03:17:43,880 --> 03:17:46,800
So I'm going to write here

3056
03:17:47,320 --> 03:17:49,960
expense my

3057
03:17:50,240 --> 03:17:52,400
common methods from your business.

3058
03:17:52,400 --> 03:17:55,360
But now see

3059
03:17:56,600 --> 03:17:58,440
inside of this

3060
03:17:59,440 --> 03:18:00,880
here, right?

3061
03:18:00,880 --> 03:18:04,400
Instead of this username
and password, what I can pass, basically

3062
03:18:05,640 --> 03:18:09,120
I can simply pass and the keys

3063
03:18:09,600 --> 03:18:11,640
configurator door

3064
03:18:11,640 --> 03:18:14,920
gate property value based on

3065
03:18:14,920 --> 03:18:16,080
username.

3066
03:18:16,160 --> 03:18:16,840
Correct

3067
03:18:20,880 --> 03:18:22,880
guy is getting it or not

3068
03:18:24,240 --> 03:18:24,720
in here.

3069
03:18:24,720 --> 03:18:30,840
Also simply pass password.

3070
03:18:30,840 --> 03:18:31,400
Right.

3071
03:18:33,840 --> 03:18:36,120
So now username password

3072
03:18:36,120 --> 03:18:38,720
also coming from property is fine.

3073
03:18:40,120 --> 03:18:43,320
You are also coming from

3074
03:18:43,320 --> 03:18:46,560
properties file
browser name is coming from properties.

3075
03:18:46,560 --> 03:18:47,320
Fine.

3076
03:18:47,320 --> 03:18:49,200
Everything

3077
03:18:50,520 --> 03:18:51,520
all right?

3078
03:18:51,520 --> 03:18:52,960
Tell me where are you right now?

3079
03:18:52,960 --> 03:19:10,760
Where you've lost?

3080
03:19:10,760 --> 03:19:13,560
You are in this class
or you are in data provider class.

3081
03:19:13,560 --> 03:19:19,120
Guys, tell me,

3082
03:19:19,120 --> 03:19:21,680
how can you be in
both the class at one time?

3083
03:19:22,840 --> 03:19:26,200
First
I had completed this common methods right?

3084
03:19:26,200 --> 03:19:28,760
And then we will switch on
to the data provider.

3085
03:19:29,280 --> 03:19:31,120
So right now

3086
03:19:33,040 --> 03:19:34,320
this is your data provider

3087
03:19:34,320 --> 03:19:46,240
class guys.

3088
03:19:46,240 --> 03:19:49,880
All right, so guys, see what I did
inside this data provider class?

3089
03:19:50,520 --> 03:19:55,360
The very first thing is
I extended this common methods here.

3090
03:19:55,560 --> 03:19:59,720
First thing here,

3091
03:19:59,720 --> 03:20:03,600
I'm just taking I'm just giving you their
time so that I can explain,

3092
03:20:05,520 --> 03:20:07,960
okay, let's do like this.

3093
03:20:07,960 --> 03:20:09,120
This part methods.

3094
03:20:09,120 --> 03:20:10,800
How many of you guys are done with this?

3095
03:20:10,800 --> 03:20:15,720
Common methods?

3096
03:20:15,720 --> 03:20:23,280
Elena Common methods. No.

3097
03:20:23,320 --> 03:20:24,800
Common method.

3098
03:20:24,800 --> 03:20:31,080
Mars Common method.

3099
03:20:31,080 --> 03:20:31,920
All right.

3100
03:20:31,920 --> 03:20:33,240
Completely. There is no use.

3101
03:20:33,240 --> 03:20:36,080
Completely common methods. Most

3102
03:20:56,000 --> 03:20:56,520
them.

3103
03:20:57,080 --> 03:20:58,640
And no, please let me know. Right.

3104
03:20:58,640 --> 03:21:00,920
Once you're done with this Common methods.

3105
03:21:00,920 --> 03:21:03,200
Just two or three lines. Yes.

3106
03:21:03,200 --> 03:21:04,320
And that's all great.

3107
03:21:04,320 --> 03:21:06,360
Fine. Nor

3108
03:21:12,240 --> 03:21:13,080
because this code

3109
03:21:13,080 --> 03:21:16,200
we have copied,
we have just added this line

3110
03:21:17,200 --> 03:21:19,680
and we added this line.

3111
03:21:19,800 --> 03:21:24,840
This and this.

3112
03:21:25,160 --> 03:21:28,160
You can write configured properties
in just 2 minutes, right?

3113
03:21:28,200 --> 03:21:30,480
Just for words. You need to type.

3114
03:21:30,480 --> 03:21:37,200
And these values
you already have strict not.

3115
03:21:37,280 --> 03:21:39,240
Why do you need to

3116
03:21:39,240 --> 03:21:42,880
write it once again, just go in
your data provided in any other class.

3117
03:21:42,880 --> 03:21:43,480
Right?

3118
03:21:43,600 --> 03:21:46,400
You have already just copied
from different listed.

3119
03:21:46,720 --> 03:21:51,240
You don't need to type it.

3120
03:21:51,240 --> 03:21:53,120
Yes, you can mark no issues at all.

3121
03:21:53,120 --> 03:21:53,680
You can.

3122
03:21:53,680 --> 03:22:03,600
You can no issues.

3123
03:22:03,600 --> 03:22:05,400
So this part days everyone

3124
03:22:09,360 --> 03:22:12,960
is done.

3125
03:22:12,960 --> 03:22:15,000
Now let's come in to data provider.

3126
03:22:16,240 --> 03:22:19,200
The first thing is
we extended this common method here.

3127
03:22:19,360 --> 03:22:23,600
Correct?

3128
03:22:23,600 --> 03:22:35,280
No, no, no.

3129
03:22:35,280 --> 03:22:36,640
I'm coming on their subject.

3130
03:22:36,640 --> 03:22:37,320
I'm coming on.

3131
03:22:37,320 --> 03:22:40,200
They don't, but I'm coming on it now.

3132
03:22:40,200 --> 03:22:45,520
See, guys, I said when I need to extend
properties of common method

3133
03:22:45,840 --> 03:22:49,280
inside these inheriting
all the properties of common

3134
03:22:49,280 --> 03:22:53,880
methods, correct?

3135
03:22:53,880 --> 03:22:57,040
Correct. This.

3136
03:22:57,040 --> 03:23:02,040
So in my common methods, you'll see a
driver is also available, which is public.

3137
03:23:02,840 --> 03:23:03,600
Correct.

3138
03:23:04,920 --> 03:23:07,840
When I'm having this driver instance
already here

3139
03:23:08,160 --> 03:23:11,440
and I'm inheriting
the properties of common methods,

3140
03:23:11,720 --> 03:23:16,720
do I need to mention once again
this driver to you and me?

3141
03:23:16,720 --> 03:23:18,960
No. Right. Anything.

3142
03:23:19,680 --> 03:23:24,160
But still, even if I deleted it,
I'm not getting any errors in this.

3143
03:23:24,480 --> 03:23:25,080
Can you see?

3144
03:23:25,080 --> 03:23:44,040
I'm not making any other correct.

3145
03:23:44,040 --> 03:23:46,320
Now, after this. After this.

3146
03:23:47,640 --> 03:23:49,040
Do you think that we need this?

3147
03:23:49,040 --> 03:23:52,800
A string username and password yet

3148
03:23:58,280 --> 03:24:02,160
related.

3149
03:24:02,160 --> 03:24:04,480
Now see, your method looks for short.

3150
03:24:04,800 --> 03:24:07,560
Correct?

3151
03:24:07,560 --> 03:24:13,440
Right guys, your class looks very simple.

3152
03:24:13,640 --> 03:24:17,120
Even though we are not using this data
provider, I'm keeping it as of now.

3153
03:24:17,120 --> 03:24:18,400
Here. Right.

3154
03:24:18,400 --> 03:24:19,320
If you want to delete,

3155
03:24:19,320 --> 03:24:21,600
you can delayed because we have this
in any of the classes.

3156
03:24:21,600 --> 03:24:25,560
But and also you are not passing any data

3157
03:24:25,560 --> 03:24:31,560
which is hardcoded.

3158
03:24:31,560 --> 03:24:38,960
So in many

3159
03:24:45,840 --> 03:24:46,720
make sure base

3160
03:24:46,720 --> 03:24:51,080
when you're passing this keys
these keys must be seen right this

3161
03:24:51,120 --> 03:24:54,240
this must be seen with the keys
you're passing in your methods.

3162
03:24:54,840 --> 03:24:58,720
Remember example
I'm passing this browser with small B

3163
03:24:58,760 --> 03:25:03,120
so it should be small B here chrome,
but small C there should be a small C

3164
03:25:03,720 --> 03:25:07,640
Similarly here,
if I'm passing this username

3165
03:25:07,640 --> 03:25:10,920
so it should get small if there is a small
similarly for password.

3166
03:25:10,920 --> 03:25:22,160
Also correct.

3167
03:25:22,160 --> 03:25:22,800
Fine.

3168
03:25:22,800 --> 03:25:26,240
So so far in this data provider
class, is everyone done with this?

3169
03:25:26,880 --> 03:25:28,480
What I just explained?

3170
03:25:28,480 --> 03:25:30,360
Don't worry, I explain this concept.

3171
03:25:30,360 --> 03:25:32,040
Tomorrow is then no issues at all.

3172
03:25:32,040 --> 03:25:35,360
I'm just asking this so far.
Is it correct?

3173
03:25:35,520 --> 03:25:43,800
Is it clear to everyone?

3174
03:25:43,800 --> 03:25:44,920
Yammer so correct.

3175
03:25:44,920 --> 03:25:53,880
Exactly.

3176
03:25:53,880 --> 03:25:54,680
Fine.

3177
03:25:54,840 --> 03:25:57,680
Let's go in our best in the class. Right.

3178
03:25:57,720 --> 03:26:00,400
Let's go in.
Any other guest in the class say this one.

3179
03:26:01,960 --> 03:26:03,760
Right. And

3180
03:26:04,200 --> 03:26:07,560
we are going to execute this data provider
this time.

3181
03:26:07,560 --> 03:26:11,160
C So I'm going to write here is my

3182
03:26:13,800 --> 03:26:20,120
data provider table.

3183
03:26:20,120 --> 03:26:24,480
Now see guys, when I'm executing my data
provider, they will get right

3184
03:26:25,680 --> 03:26:27,000
in my data provider.

3185
03:26:27,000 --> 03:26:27,920
If you observe,

3186
03:26:27,920 --> 03:26:31,280
I don't have any precondition,
I don't have any forced condition, right?

3187
03:26:31,640 --> 03:26:34,720
I'm not passing any data hardcoded,
but still

3188
03:26:35,040 --> 03:26:38,280
I'm going to execute my

3189
03:26:38,280 --> 03:26:39,120
data provider.

3190
03:26:39,120 --> 03:26:41,040
They will see

3191
03:27:00,160 --> 03:27:08,480
well, this is open

3192
03:27:08,480 --> 03:27:12,640
browser null pointer
exception in common with 39 number 70. I'm

3193
03:27:17,280 --> 03:27:21,360
okay, I'm

3194
03:27:21,720 --> 03:27:36,880
open my common methods.

3195
03:27:36,880 --> 03:27:37,680
No, I'm.

3196
03:27:37,680 --> 03:27:41,600
I must have missed something yet
I to check that

3197
03:27:45,320 --> 03:27:47,160
there's the problem

3198
03:27:47,760 --> 03:27:49,840
in my config properties.

3199
03:27:49,840 --> 03:27:51,960
I have passed the part of common metrics

3200
03:27:53,040 --> 03:27:55,480
because it was expecting the properties.

3201
03:27:55,480 --> 03:27:56,160
Fine.

3202
03:27:56,280 --> 03:27:59,040
So let me copy this spot from here.

3203
03:27:59,520 --> 03:28:00,240
Coffeepot

3204
03:28:01,320 --> 03:28:04,200
for configured properties and then.

3205
03:28:04,880 --> 03:28:08,640
And then I have to pass

3206
03:28:09,880 --> 03:28:13,240
a correct 48 point.

3207
03:28:13,240 --> 03:28:14,480
Let me pass that. Correct.

3208
03:28:14,480 --> 03:28:16,880
But now this time,

3209
03:28:17,920 --> 03:28:20,320
if I want to execute this data

3210
03:28:20,320 --> 03:28:25,440
demo right.

3211
03:28:25,440 --> 03:28:28,360
I was giving the wrong part.

3212
03:28:28,360 --> 03:28:40,560
That was the issue.

3213
03:28:40,560 --> 03:28:44,320
Getting serious.

3214
03:28:44,320 --> 03:28:46,400
It took the precondition from where?

3215
03:28:47,040 --> 03:28:48,720
From your common methods.

3216
03:28:48,720 --> 03:28:55,680
Right?

3217
03:28:55,680 --> 03:28:57,120
Passing the data from where?

3218
03:28:57,120 --> 03:28:59,680
From your property site.

3219
03:28:59,680 --> 03:29:00,080
Right.

3220
03:29:00,080 --> 03:29:02,520
And then post condition
for closing the browser,

3221
03:29:02,520 --> 03:29:04,360
working fine from your common methods.

3222
03:29:04,360 --> 03:29:11,160
Once again, your test got executed
right now see the best part.

3223
03:29:11,160 --> 03:29:14,400
Let's start searching here
and this single class from here.

3224
03:29:15,520 --> 03:29:18,880
Very latest that go inside the class right

3225
03:29:20,280 --> 03:29:24,120
deleted from here, go here,

3226
03:29:25,480 --> 03:29:27,880
deleted from here,

3227
03:29:28,400 --> 03:29:29,760
deleted from here

3228
03:29:29,760 --> 03:29:32,800
and then simply extends your

3229
03:29:34,040 --> 03:29:35,440
common method.

3230
03:29:35,640 --> 03:29:36,360
Right?

3231
03:29:36,560 --> 03:29:40,880
Half of the code will be deleted
from all of your classes. Why?

3232
03:29:41,160 --> 03:29:42,480
Because you are not writing your

3233
03:29:43,800 --> 03:29:46,320
you're not writing your post condition
again and again.

3234
03:29:46,600 --> 03:29:49,880
The same precondition and post
condition will be utilized

3235
03:29:49,880 --> 03:29:52,920
in every single class from now onwards.

3236
03:29:52,920 --> 03:29:54,160
Make sense

3237
03:30:03,760 --> 03:30:04,600
students.

3238
03:30:04,600 --> 03:30:12,600
What happened?

3239
03:30:12,600 --> 03:30:15,760
Everyone slept like

3240
03:30:16,000 --> 03:30:17,000
yesterday.

3241
03:30:17,000 --> 03:30:19,760
So what I am seeing basically is the good

3242
03:30:21,160 --> 03:30:25,200
bit of it in your all the classes
wherever you have this precondition

3243
03:30:25,200 --> 03:30:28,040
and post condition
launching browser, closing the browser,

3244
03:30:28,040 --> 03:30:30,360
launching the browser,
closing the browser,

3245
03:30:30,360 --> 03:30:33,840
delete everything from everywhere,
from all the classes,

3246
03:30:34,120 --> 03:30:38,520
and instead of de just exchange
the common method in your class,

3247
03:30:39,520 --> 03:30:42,840
then you're going to extend the properties
of your common method.

3248
03:30:42,840 --> 03:30:44,280
Then it will work.

3249
03:30:44,280 --> 03:30:47,400
It is working in this way,
so it will work for you as well.

3250
03:30:49,200 --> 03:30:51,120
Great as go going and enjoy it.

3251
03:30:51,120 --> 03:30:52,720
I'm going to complete the session

3252
03:30:54,120 --> 03:30:54,440
guys.

3253
03:30:54,440 --> 03:30:55,160
Tell me

3254
03:31:00,680 --> 03:31:01,680
just five more minutes

3255
03:31:01,680 --> 03:31:04,640
and five for five more minutes
and then you can

3256
03:31:09,880 --> 03:31:11,280
no noise.

3257
03:31:11,280 --> 03:31:14,360
If you still have any issues
in the support, we will give you

3258
03:31:16,280 --> 03:31:17,600
Great summary.

3259
03:31:17,880 --> 03:31:20,040
All right, guys,

3260
03:31:20,040 --> 03:31:23,160
So far, whatever the things,

3261
03:31:23,160 --> 03:31:26,080
whatever the things we have implemented,

3262
03:31:27,920 --> 03:31:30,160
what do you guys think that, yes,

3263
03:31:30,480 --> 03:31:33,480
it is understandable for you

3264
03:31:33,960 --> 03:31:35,320
conceptually,

3265
03:31:35,320 --> 03:31:37,800
if you are having any errors in the code,
fine.

3266
03:31:38,880 --> 03:32:09,520
I'm going to commit to Michael.

3267
03:32:09,520 --> 03:32:16,320
I can totally understand.

3268
03:32:16,320 --> 03:32:18,480
I already pushed the code
in the repository.

3269
03:32:18,480 --> 03:32:20,120
You guys can find this code there.

3270
03:32:20,120 --> 03:32:34,560
All right, everyone.

3271
03:32:34,560 --> 03:32:35,760
It is not data hiding.

3272
03:32:35,760 --> 03:32:41,520
Basically, data hiding is completely
related to concept, which is logical data.

3273
03:32:41,720 --> 03:32:43,640
This is your functionality, right?

3274
03:32:43,640 --> 03:32:45,280
This is not your data.

3275
03:32:45,280 --> 03:32:49,400
When you keep your data inside one phase
data file, for example, in Excel file.

3276
03:32:49,560 --> 03:32:50,040
Right.

3277
03:32:50,040 --> 03:32:52,920
And that find your keeping close
to your calling database

3278
03:32:52,960 --> 03:33:06,280
a key that is data.

3279
03:33:06,280 --> 03:33:07,480
Yes, exactly.

3280
03:33:07,480 --> 03:33:19,120
Correct.

3281
03:33:19,120 --> 03:33:19,240
There

3282
03:33:20,760 --> 03:33:21,040
you go.

3283
03:33:21,040 --> 03:33:21,800
Black

3284
03:33:30,240 --> 03:33:31,600
of the symbol file.

3285
03:33:31,600 --> 03:33:34,800
You can use your only right
and you can see.

3286
03:33:34,800 --> 03:33:36,840
Thanks. Well, I didn't change anything.

3287
03:33:36,840 --> 03:33:38,240
I'm just joining one class.

3288
03:33:38,240 --> 03:33:43,200
That's it.

3289
03:33:43,200 --> 03:33:54,720
Black code for you is here.

3290
03:33:54,720 --> 03:33:57,240
I don't do this yet. It's

3291
03:33:58,040 --> 03:34:11,840
I have this button filled with water.

3292
03:34:11,840 --> 03:34:26,480
All right, guys.

3293
03:34:26,480 --> 03:34:30,240
Yeah, Yeah, correct. Mike

3294
03:34:31,720 --> 03:34:32,880
True. Yes.

3295
03:34:32,880 --> 03:34:33,360
And you

3296
03:34:34,440 --> 03:34:38,080
know, Eleanor, this is bad.

3297
03:34:38,080 --> 03:34:38,880
Sure.

3298
03:34:39,920 --> 03:34:40,680
There you go.

3299
03:34:40,680 --> 03:34:43,200
This is a common metrics

3300
03:34:44,680 --> 03:34:46,240
injurious to health.

3301
03:34:46,240 --> 03:34:49,240
Not good, not recommended

3302
03:35:28,000 --> 03:35:29,440
a black.

3303
03:35:29,440 --> 03:35:32,600
You need to check with your driver
actually exist unit

3304
03:35:32,600 --> 03:35:37,600
to check the location of the driver.

3305
03:35:37,600 --> 03:35:38,600
This driver find it.

3306
03:35:38,600 --> 03:35:46,200
But where is that?

3307
03:35:46,200 --> 03:35:49,080
Can you please post the screenshot
in the support?

3308
03:35:49,080 --> 03:35:51,000
I will look into this

3309
03:35:51,960 --> 03:35:52,680
shot.

3310
03:35:53,040 --> 03:35:54,200
This is your symbol by

3311
03:36:31,680 --> 03:36:33,960
already guys,
so I think I'm done for today's session.

3312
03:36:34,160 --> 03:36:38,840
If you guys have any question you can now.

3313
03:36:38,840 --> 03:36:39,800
Thank you so much everyone.

3314
03:36:39,800 --> 03:36:42,680
Guys,
if you have any question, please ask.
