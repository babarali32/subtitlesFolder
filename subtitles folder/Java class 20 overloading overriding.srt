1
00:00:06,880 --> 00:00:08,160
Yes. Let me start today.

2
00:00:08,160 --> 00:00:10,800
Farming two days.

3
00:00:10,800 --> 00:00:12,280
I am just watching online.

4
00:00:12,280 --> 00:00:15,840
Can't cable to sol side by side.

5
00:00:15,840 --> 00:00:17,920
I just came out of dental surgery.

6
00:00:18,040 --> 00:00:20,160
I will try to bill my wrist.

7
00:00:20,440 --> 00:00:22,360
That's okay.

8
00:00:23,080 --> 00:00:25,080
So. Oh no.

9
00:00:25,080 --> 00:00:28,120
I mean, today's the day

10
00:00:28,120 --> 00:00:31,680
when we will not be learning new things.

11
00:00:31,680 --> 00:00:33,800
They are just kind of resilient.

12
00:00:33,800 --> 00:00:37,080
So the things that we will be covering
today,

13
00:00:37,080 --> 00:00:39,600
you guys have already gone
through those things.

14
00:00:41,280 --> 00:00:43,440
So today's class will be very easy

15
00:00:48,680 --> 00:00:52,080
to. Yes, I am sure.

16
00:00:53,760 --> 00:01:00,320
Then just a few new things,

17
00:01:00,320 --> 00:01:07,480
etc..

18
00:01:07,480 --> 00:01:10,960
Pilot program would be job
because you didn't get that.

19
00:01:11,000 --> 00:01:12,200
It is

20
00:01:19,080 --> 00:01:28,920
possible.

21
00:01:28,920 --> 00:01:31,240
Actually,
you guys didn't realize this, but

22
00:01:32,680 --> 00:01:35,560
I 75% of the concepts

23
00:01:36,160 --> 00:01:40,040
I have delivered those concepts
in previous classes,

24
00:01:40,600 --> 00:01:45,880
so it will be
just a few new terminologies,

25
00:01:46,160 --> 00:01:57,840
but we will be doing
pretty much the same thing.

26
00:01:57,840 --> 00:02:00,120
So today's class will be actually fun.

27
00:02:00,800 --> 00:02:04,440
We will see you
how much patience you guys have.

28
00:02:04,480 --> 00:02:08,720
So you have been seeing my patients
till now that see your patients.

29
00:02:08,720 --> 00:02:17,080
Today we are 75% ingenious.

30
00:02:17,080 --> 00:02:24,520
So let me create a new package.

31
00:02:24,520 --> 00:02:25,560
Let's call it

32
00:02:30,960 --> 00:02:34,400
and let's clear

33
00:02:34,920 --> 00:02:37,440
and find

34
00:02:41,240 --> 00:02:46,160
the one

35
00:02:46,320 --> 00:02:48,920
how they are stable.

36
00:02:50,280 --> 00:02:51,040
All right, guys.

37
00:02:51,040 --> 00:02:55,560
So what did we cover on
last class on Wednesday?

38
00:02:56,160 --> 00:02:58,920
Do you guys remember something

39
00:03:01,280 --> 00:03:05,200
fun sounds techni super key word, right?

40
00:03:06,120 --> 00:03:16,680
Very easy or so.

41
00:03:16,680 --> 00:03:20,360
Can you guys tell me in how many ways

42
00:03:20,800 --> 00:03:23,760
in Java we can use the super keyboard?

43
00:03:24,200 --> 00:03:27,240
If you guys remember something

44
00:03:29,800 --> 00:03:42,880
not refers

45
00:03:42,880 --> 00:03:45,880
to super class

46
00:03:46,440 --> 00:03:48,720
variant plus

47
00:03:54,120 --> 00:03:56,640
so B ways, right?

48
00:03:58,000 --> 00:04:00,840
So let's, let's try to define this first.

49
00:04:00,840 --> 00:04:06,640
So super is a keyword

50
00:04:06,960 --> 00:04:11,120
that we use to refer to the

51
00:04:13,720 --> 00:04:16,360
parent class

52
00:04:16,560 --> 00:04:17,840
instance.

53
00:04:17,840 --> 00:04:27,600
Yeah. And

54
00:04:30,400 --> 00:04:33,000
we can use,

55
00:04:33,000 --> 00:04:36,160
we focused on quizzes,
everything else is forgotten.

56
00:04:37,400 --> 00:04:40,600
So we can use super

57
00:04:42,080 --> 00:04:45,360
user in three

58
00:04:46,560 --> 00:04:47,720
even if

59
00:04:48,280 --> 00:04:50,040
we write.

60
00:04:50,040 --> 00:04:53,400
The first use is

61
00:04:54,480 --> 00:04:57,080
var constructor and matter.

62
00:04:57,960 --> 00:05:02,320
I did not even get to play this.

63
00:05:02,320 --> 00:05:12,440
So what do the first
you guys that we learn?

64
00:05:12,440 --> 00:05:14,360
This quiz was easy

65
00:05:16,440 --> 00:05:22,160
to expand

66
00:05:23,760 --> 00:05:24,320
in grade.

67
00:05:24,320 --> 00:05:27,000
Alex.

68
00:05:27,000 --> 00:05:36,920
Okay.

69
00:05:36,920 --> 00:05:39,800
The constructor right

70
00:05:43,880 --> 00:05:48,400
to call the parent class

71
00:05:50,920 --> 00:05:54,400
constructor.

72
00:05:54,400 --> 00:05:57,720
This second use

73
00:06:06,600 --> 00:06:10,200
all the methods from

74
00:06:13,400 --> 00:06:14,760
parent class.

75
00:06:14,760 --> 00:06:19,640
If we have.

76
00:06:19,640 --> 00:06:20,280
Yeah.

77
00:06:21,840 --> 00:06:22,120
Okay.

78
00:06:22,120 --> 00:06:27,040
So even if we don't have a method
in the child class with same name,

79
00:06:27,520 --> 00:06:31,560
we can still use super to call the method
from the parent class,

80
00:06:31,560 --> 00:06:35,120
but it will not make sense
to call the method from the parent.

81
00:06:35,280 --> 00:06:38,160
So I will only try to call the methods
from the parent class

82
00:06:40,440 --> 00:06:44,280
and then to use the

83
00:06:45,480 --> 00:06:47,000
fields

84
00:06:48,800 --> 00:06:50,240
from the

85
00:06:52,320 --> 00:06:53,720
parent class.

86
00:06:53,720 --> 00:07:00,120
All right,
so let's see if I have a class parent

87
00:07:09,240 --> 00:07:12,880
and if I have a weird name

88
00:07:13,880 --> 00:07:15,920
mean here. Okay.

89
00:07:15,920 --> 00:07:18,240
So let's take the example of

90
00:07:18,800 --> 00:07:29,080
what is the name of your father.

91
00:07:29,080 --> 00:07:31,680
Right. So let's say we have

92
00:07:33,560 --> 00:07:35,280
this name field.

93
00:07:35,280 --> 00:07:36,520
Right.

94
00:07:37,120 --> 00:07:42,160
And let's see.

95
00:07:42,160 --> 00:07:44,720
It is this method. So.

96
00:07:44,720 --> 00:07:49,040
So what what is the that
your father like earlier?

97
00:07:49,080 --> 00:07:52,080
So let's say there is this it method

98
00:07:52,080 --> 00:07:55,440
in the parent class

99
00:07:55,640 --> 00:08:00,080
Talk about

100
00:08:02,640 --> 00:08:06,240
so as well so this is how short for

101
00:08:10,320 --> 00:08:12,040
printing out in here.

102
00:08:12,040 --> 00:08:16,320
Okay so I have a method in here
and then I have a cover

103
00:08:17,320 --> 00:08:19,800
and let's say there are other fields

104
00:08:19,800 --> 00:08:22,400
which are not initialized yet.

105
00:08:23,400 --> 00:08:26,000
So let's say

106
00:08:31,200 --> 00:08:32,120
Double

107
00:08:33,200 --> 00:08:35,360
Century,

108
00:08:35,920 --> 00:08:38,000
which we are initializing

109
00:08:39,000 --> 00:08:40,920
through the

110
00:08:42,520 --> 00:08:51,520
constructor.

111
00:08:51,520 --> 00:08:56,960
Now if we try to clear the child class,
what can happen?

112
00:08:57,120 --> 00:08:59,760
I'm not, You made me hungry.

113
00:09:00,080 --> 00:09:01,960
So if we have a child

114
00:09:01,960 --> 00:09:04,960
class, what can happen
is that the child class

115
00:09:04,960 --> 00:09:07,320
and have its own fields

116
00:09:08,000 --> 00:09:11,080
and the fields they can be.

117
00:09:11,520 --> 00:09:14,760
You didn't
share the notes from the last class.

118
00:09:14,760 --> 00:09:19,400
So, Alexy, here
are the notes from the last class.

119
00:09:19,400 --> 00:09:21,840
And I pushed these notes to the gate tab.

120
00:09:22,240 --> 00:09:26,840
You do check the YouTube.

121
00:09:26,840 --> 00:09:28,400
They should be on GitHub.

122
00:09:28,400 --> 00:09:30,600
Yes. They are not present on the data.

123
00:09:32,320 --> 00:09:34,680
Let me check back

124
00:09:48,600 --> 00:09:49,360
now here.

125
00:09:49,360 --> 00:09:52,400
Alexa, North north door to the extreme.

126
00:09:53,840 --> 00:09:56,440
So I will be pushing the north Speed

127
00:09:56,440 --> 00:10:09,000
with the code on your top from the top.

128
00:10:09,000 --> 00:10:10,040
So we went here.

129
00:10:10,040 --> 00:10:13,480
So what can happen
is that if now the child class,

130
00:10:13,680 --> 00:10:17,080
if this class wants to have

131
00:10:17,080 --> 00:10:20,800
the exact same name field

132
00:10:24,960 --> 00:10:26,040
so this child

133
00:10:26,040 --> 00:10:29,280
class can have the exact same name.

134
00:10:29,280 --> 00:10:33,920
FIELD Okay, So we don't have to come up
with the different names

135
00:10:34,280 --> 00:10:38,880
or let's say someone else,
they find the parent class

136
00:10:40,200 --> 00:10:43,560
and now you guys want to use
some functional data from this class

137
00:10:44,160 --> 00:10:47,520
so you can now have same methods,

138
00:10:47,520 --> 00:10:50,240
the same name methods,
and then same name fears.

139
00:10:50,600 --> 00:10:56,440
And with the help of super keyboard,
you will be able to call the methods

140
00:10:56,440 --> 00:11:00,840
or be fields
or the constructor from the parent class,

141
00:11:01,480 --> 00:11:04,200
and then you can also call

142
00:11:04,200 --> 00:11:07,440
the fields on the methods from the child
class.

143
00:11:07,720 --> 00:11:08,120
Yeah.

144
00:11:08,560 --> 00:11:11,480
So we can have we can have

145
00:11:11,480 --> 00:11:15,520
this name field again in here.

146
00:11:15,560 --> 00:11:17,480
Yes, we need the

147
00:11:18,440 --> 00:11:21,040
x and schema tank is almost

148
00:11:24,920 --> 00:11:29,600
just the string name

149
00:11:34,800 --> 00:11:37,720
and then we can have a method

150
00:11:38,960 --> 00:11:40,440
it so and not.

151
00:11:40,440 --> 00:11:50,640
What do you like to it?

152
00:11:50,640 --> 00:11:56,920
What about more?

153
00:11:56,920 --> 00:12:00,480
So that's where we can use
the super keyword.

154
00:12:00,480 --> 00:12:03,360
Now let's say if I am

155
00:12:09,840 --> 00:12:10,600
putting

156
00:12:11,320 --> 00:12:14,760
a board, if I have this method

157
00:12:14,760 --> 00:12:16,960
okay, I can

158
00:12:17,920 --> 00:12:21,520
now if I look for it,

159
00:12:22,040 --> 00:12:26,000
what output I will see is
if I added and do it above,

160
00:12:26,760 --> 00:12:31,040
if I write super state
and if I call the sprint

161
00:12:31,040 --> 00:12:33,080
for no matter what output, I will see

162
00:12:36,120 --> 00:12:38,840
the output from the parent.

163
00:12:39,120 --> 00:12:42,440
And if I call this method

164
00:12:42,640 --> 00:12:48,960
but but without any super keyword, then

165
00:12:50,000 --> 00:12:53,520
I will see more and more for that.

166
00:12:54,120 --> 00:12:58,880
And in the same way I can, I can print out

167
00:12:59,840 --> 00:13:01,320
the names.

168
00:13:01,320 --> 00:13:04,080
Okay, I can say

169
00:13:05,400 --> 00:13:09,880
super dark name.

170
00:13:09,880 --> 00:13:10,280
Yeah.

171
00:13:12,040 --> 00:13:15,360
If I say super dark name,

172
00:13:15,360 --> 00:13:17,880
I will see said that

173
00:13:17,880 --> 00:13:20,560
I need to ask my to prepare some color.

174
00:13:20,960 --> 00:13:23,440
So I said okay book.

175
00:13:23,520 --> 00:13:26,360
Sorry.

176
00:13:26,360 --> 00:13:29,040
And if I only print the name

177
00:13:30,960 --> 00:13:33,680
then I will see

178
00:13:33,680 --> 00:13:36,280
the name and

179
00:13:40,520 --> 00:13:45,240
so here is one rule that

180
00:13:47,640 --> 00:13:50,320
inside the constructor.

181
00:13:50,320 --> 00:13:53,640
So let's say this is the child

182
00:13:53,640 --> 00:13:58,160
constructor.

183
00:13:58,160 --> 00:14:02,800
It is taking a field salary

184
00:14:05,520 --> 00:14:08,080
and I can write super

185
00:14:09,360 --> 00:14:12,240
and then I can pass this salary in here.

186
00:14:12,640 --> 00:14:14,400
So now there is this rule.

187
00:14:14,400 --> 00:14:18,120
So you guys remember
when we were using the

188
00:14:18,920 --> 00:14:21,800
this keyword with parentheses?

189
00:14:21,800 --> 00:14:23,640
Do you think you can copy and paste it?

190
00:14:23,640 --> 00:14:26,920
And also I can paste
into my notes on Intelligent.

191
00:14:27,080 --> 00:14:29,880
So let me go complete the notes

192
00:14:31,200 --> 00:14:32,400
and maybe you can, but.

193
00:14:32,400 --> 00:14:35,600
But why do you need to copy
and because I will be creating these notes

194
00:14:35,600 --> 00:14:43,960
right after the class.

195
00:14:43,960 --> 00:14:48,720
So as we as the this with parentheses

196
00:14:48,760 --> 00:14:54,240
needs to be the first line
inside the constructor.

197
00:14:54,240 --> 00:14:57,360
Same is the case with this super killer,

198
00:14:57,360 --> 00:15:00,480
so I can not have anything before back.

199
00:15:01,800 --> 00:15:02,040
Okay.

200
00:15:02,040 --> 00:15:04,280
I cannot have anything.

201
00:15:04,280 --> 00:15:08,520
Let's say I cannot put super
I cannot put any system out

202
00:15:08,520 --> 00:15:12,160
or I cannot call any method
or I cannot do anything like that.

203
00:15:12,160 --> 00:15:12,800
Okay.

204
00:15:12,800 --> 00:15:15,640
This super, this

205
00:15:15,640 --> 00:15:18,960
call to the constructor,
it should be the first line.

206
00:15:19,400 --> 00:15:21,000
Okay.

207
00:15:21,000 --> 00:15:28,800
It should be the first line.

208
00:15:28,800 --> 00:15:35,760
And if you guys remember, if
I have a parent class and a child class,

209
00:15:36,160 --> 00:15:39,960
if I clear the object of child class,

210
00:15:40,360 --> 00:15:44,120
will the object of parent class
be created?

211
00:15:44,120 --> 00:15:49,040
Or if the only child class
if I have a constructor in the parent

212
00:15:49,040 --> 00:15:52,720
and a constructor in the child,
which constructor will be called?

213
00:15:52,720 --> 00:16:00,160
And in this sequence, the parent.

214
00:16:00,160 --> 00:16:07,280
So always, always the object of parent
class is created first.

215
00:16:08,160 --> 00:16:11,800
Then the object of Jared class is greater

216
00:16:11,800 --> 00:16:16,320
so that if we are using some fields
from the parent class,

217
00:16:16,760 --> 00:16:19,400
these fields they are initialized.

218
00:16:19,400 --> 00:16:19,840
The first.

219
00:16:19,840 --> 00:16:26,120
Okay, so do you guys remember
anything else about the super keyboard?

220
00:16:26,160 --> 00:16:27,720
I think it was super easy, right?

221
00:16:28,800 --> 00:16:29,640
Super killer,

222
00:16:29,640 --> 00:16:35,720
Super easy.

223
00:16:35,720 --> 00:16:42,360
No respect to the parent. The.

224
00:16:42,360 --> 00:16:44,640
So let me send you the nurse.

225
00:16:46,080 --> 00:16:48,840
I will write more notes

226
00:16:48,840 --> 00:16:52,160
from now on

227
00:16:53,080 --> 00:16:54,280
because these things,

228
00:16:54,280 --> 00:16:59,000
they are very important
for your interviews.

229
00:16:59,880 --> 00:17:07,800
And if you want to write Advanced
Java Code.

230
00:17:07,800 --> 00:17:19,920
So I would not start overloading you guys.

231
00:17:19,920 --> 00:17:22,000
Watch the

232
00:17:22,680 --> 00:17:23,960
I just so

233
00:17:23,960 --> 00:17:29,680
I just said that I will be writing
more notes because they are important.

234
00:17:29,680 --> 00:17:33,080
The conversations
that we will be having now.

235
00:17:33,080 --> 00:17:36,000
So they are more important
for your interviews.

236
00:17:36,640 --> 00:17:42,080
And I think this is also important
because when I speak, I think

237
00:17:42,720 --> 00:17:44,920
if I am speaking 100 words,

238
00:17:45,480 --> 00:17:48,000
you guys only get about 50

239
00:17:48,240 --> 00:17:52,040
to 50 to 60 words right?

240
00:17:52,040 --> 00:17:53,800
I think this is how humans work

241
00:17:53,800 --> 00:17:57,280
and naturally they miss givers
because I'm also a student.

242
00:17:57,280 --> 00:17:59,320
So I can feel that

243
00:18:01,080 --> 00:18:03,680
missing and forgetting.

244
00:18:04,320 --> 00:18:07,040
But I also hope that you guys

245
00:18:07,040 --> 00:18:11,000
are revising the Java slides, right,

246
00:18:11,160 --> 00:18:13,560
Because if the next week

247
00:18:14,160 --> 00:18:18,320
when you will be starting the fun part,
when you will be using

248
00:18:18,320 --> 00:18:22,760
Java in your real life
to do very fun things.

249
00:18:22,920 --> 00:18:26,640
Okay,
so I hope you guys are revising your Java,

250
00:18:26,640 --> 00:18:29,120
all the loops and all the

251
00:18:31,200 --> 00:18:33,960
under concepts like switch cases.

252
00:18:33,960 --> 00:18:36,160
If health conditions.

253
00:18:36,160 --> 00:18:40,680
I don't have this large format method
over loading.

254
00:18:40,680 --> 00:18:42,080
Sebastian Why?

255
00:18:42,080 --> 00:18:44,560
I think I shared on the canvas

256
00:18:48,800 --> 00:18:49,840
are naughty slides

257
00:18:49,840 --> 00:18:57,120
present on canvas.

258
00:18:57,120 --> 00:19:00,480
Mine goes to class 19

259
00:19:03,920 --> 00:19:07,560
so you guys can ask in this sports channel

260
00:19:07,560 --> 00:19:14,040
if something is not present.

261
00:19:14,040 --> 00:19:19,640
Oh, I didn't push, I didn't publish them.

262
00:19:19,640 --> 00:19:20,280
Okay.

263
00:19:20,400 --> 00:19:23,280
Now they should be

264
00:19:23,960 --> 00:19:24,600
relevant.

265
00:19:24,600 --> 00:19:29,680
Can you guys check now if the slides on
method overloading are present?

266
00:19:30,600 --> 00:19:31,720
I have it.

267
00:19:31,720 --> 00:19:35,960
Bug master.

268
00:19:35,960 --> 00:19:43,200
So today's class is very important.

269
00:19:43,200 --> 00:19:45,440
Let's start today's class.

270
00:19:46,200 --> 00:19:49,640
Let's show
us how to provide notes on an intelligent

271
00:19:50,520 --> 00:19:52,720
So in should you

272
00:19:53,680 --> 00:19:56,040
First you have to create.

273
00:19:56,040 --> 00:20:00,200
You have to right click on your package.

274
00:20:00,200 --> 00:20:03,880
Then you have to select new and then phi.

275
00:20:05,240 --> 00:20:09,360
Then you can write any anything,
any name for your file

276
00:20:09,360 --> 00:20:14,400
and then you need to type this extension
dot B XD.

277
00:20:14,800 --> 00:20:18,880
Okay, then you should be able
to see the exact same file

278
00:20:18,880 --> 00:20:21,400
as I have on my in reality

279
00:20:30,960 --> 00:20:32,120
method over learning.

280
00:20:32,120 --> 00:20:34,800
So did you guys watch the video
on method overloading?

281
00:20:34,800 --> 00:20:36,320
And if yes, what?

282
00:20:36,320 --> 00:20:41,920
What do you guys understand
from from that?

283
00:20:41,920 --> 00:20:44,160
So let me create a very simple class

284
00:20:52,040 --> 00:20:57,720
by adding more parameters.

285
00:20:57,880 --> 00:21:00,600
Yes, it is complicated for me.

286
00:21:00,720 --> 00:21:03,640
When you have two thirds

287
00:21:03,640 --> 00:21:06,360
with the same name,
but different parameters

288
00:21:07,520 --> 00:21:10,320
but didn't understand.

289
00:21:10,560 --> 00:21:15,440
Yes, it was the easiest video
it will deal with when you have

290
00:21:15,440 --> 00:21:21,520
two methods of the same name,
but with different parameters.

291
00:21:21,520 --> 00:21:23,840
So let me first show you the issue, guys.

292
00:21:24,120 --> 00:21:30,000
Let me first show you the issue why
we even need to be method overloading.

293
00:21:30,120 --> 00:21:32,280
It's just a new terminology.

294
00:21:32,280 --> 00:21:33,440
Can I ask something?

295
00:21:33,440 --> 00:21:37,440
My review package
classes have read render titles. Why?

296
00:21:37,440 --> 00:21:39,560
They were just fine.

297
00:21:39,560 --> 00:21:45,720
So I shine Intelligent Red means you have
not added those files to the new hub.

298
00:21:46,120 --> 00:21:50,760
So then we say that if you say get a dot,
add that red should be gone.

299
00:21:50,760 --> 00:21:53,640
So your writing just just tells you that

300
00:21:54,000 --> 00:21:56,640
in these files I'm not part of as good.

301
00:21:56,640 --> 00:22:00,680
Is it possible you create
one file for your notes on canvas, please?

302
00:22:01,320 --> 00:22:03,880
Kazim You want me to share the notes on

303
00:22:03,880 --> 00:22:09,720
canvas as well?

304
00:22:09,720 --> 00:22:12,440
You guys don't see the code from GitHub

305
00:22:14,200 --> 00:22:16,560
or you don't clone it.

306
00:22:16,560 --> 00:22:20,360
We want to use
or we want you to use GitHub

307
00:22:20,360 --> 00:22:26,200
because it's the first thing
that you guys will be using on your jobs.

308
00:22:26,200 --> 00:22:28,440
It's very important

309
00:22:29,040 --> 00:22:31,320
why you guys are still

310
00:22:32,680 --> 00:22:35,320
using the canvas

311
00:22:35,320 --> 00:22:39,240
for files or stuff like that.

312
00:22:39,240 --> 00:22:40,680
YouTube is very important.

313
00:22:40,680 --> 00:22:49,560
Guys,

314
00:22:49,560 --> 00:22:51,760
so they will be sharing you
a link off project.

315
00:22:53,040 --> 00:22:57,000
I use GitHub to
how to find other files on GitHub lessons.

316
00:22:57,120 --> 00:23:03,000
So we will be you guys will be having
more sessions on GitHub after selenium.

317
00:23:03,480 --> 00:23:07,680
But you guys already had a tool.

318
00:23:07,680 --> 00:23:11,640
I guess to do sessions on GitHub
right to two or three sessions

319
00:23:12,640 --> 00:23:15,960
and you guys already know how to clone
something

320
00:23:15,960 --> 00:23:21,120
from the GitHub
that that's what we want for now.

321
00:23:21,120 --> 00:23:24,960
So I want you believe me, you don't want
to learn new things about it.

322
00:23:26,400 --> 00:23:27,960
I mean, GitHub is so

323
00:23:27,960 --> 00:23:31,720
big you guys can spend the next one year
just learning bigger time.

324
00:23:31,760 --> 00:23:36,240
It's so big.

325
00:23:36,240 --> 00:23:38,920
We just know how to push code.

326
00:23:38,920 --> 00:23:41,040
You guys don't know how to clone the code
from the

327
00:23:41,040 --> 00:23:48,240
YouTube.

328
00:23:48,240 --> 00:23:51,040
Oh, all right. All right.

329
00:23:51,480 --> 00:23:54,200
So remind me at the end of this class,
I will show you.

330
00:23:54,200 --> 00:23:56,320
It's very easy.

331
00:23:56,320 --> 00:23:57,480
Just copy paste.

332
00:23:57,480 --> 00:23:59,320
Is push equal to.

333
00:23:59,320 --> 00:24:00,440
It's very easy.

334
00:24:00,440 --> 00:24:03,800
Very easy.

335
00:24:03,800 --> 00:24:07,840
So, listen, this was the issue before
method overloading, let's say.

336
00:24:07,840 --> 00:24:11,160
Guys,
I have to create a very simple method that

337
00:24:12,840 --> 00:24:15,840
adds through parameters.

338
00:24:15,840 --> 00:24:16,400
Okay?

339
00:24:17,040 --> 00:24:21,840
Number one to

340
00:24:24,520 --> 00:24:26,520
and this is a very simple method,

341
00:24:26,520 --> 00:24:29,240
it just displays the sum

342
00:24:31,680 --> 00:24:34,320
of this number, right?

343
00:24:34,600 --> 00:24:38,720
So, okay,

344
00:24:40,440 --> 00:24:44,040
now, because Java is something

345
00:24:44,040 --> 00:24:48,520
that gives about the letter types a lot.

346
00:24:49,280 --> 00:24:52,200
So if I want to have another method,

347
00:24:53,200 --> 00:24:54,720
let's say

348
00:24:54,760 --> 00:24:57,640
that is doing the exact same thing,

349
00:24:58,680 --> 00:25:02,120
but it is dealing with different
and data types.

350
00:25:02,320 --> 00:25:05,880
Okay, so let's say I want to have a method

351
00:25:06,160 --> 00:25:09,720
that can not only add integers,

352
00:25:11,040 --> 00:25:13,520
but it can also add maybe long

353
00:25:13,520 --> 00:25:15,800
numbers on floating point numbers

354
00:25:16,520 --> 00:25:19,680
or doubles or bi or shorts.

355
00:25:19,720 --> 00:25:21,240
Now we know

356
00:25:22,080 --> 00:25:26,280
that we cannot use one single method

357
00:25:28,200 --> 00:25:30,600
to add all the stereotypes.

358
00:25:30,600 --> 00:25:31,840
Can we use the well?

359
00:25:31,840 --> 00:25:36,000
Can we use one single method
to add all the numbers

360
00:25:36,600 --> 00:25:41,280
like integers, numbers, longs floors?

361
00:25:41,600 --> 00:25:45,920
Can I use the this this one single method
to add all the data types?

362
00:25:45,920 --> 00:25:51,400
The number data types?

363
00:25:51,400 --> 00:25:57,280
Can I pass double value to this method?

364
00:25:57,280 --> 00:26:02,040
If I have declared integers in here,
then I passed the doubles.

365
00:26:02,040 --> 00:26:05,360
I cannot write, I cannot pass doubles.

366
00:26:05,360 --> 00:26:07,440
I will get an error.

367
00:26:07,440 --> 00:26:10,720
So I cannot use one single method

368
00:26:11,480 --> 00:26:14,040
to handle all the data types.

369
00:26:14,400 --> 00:26:15,000
Okay.

370
00:26:15,000 --> 00:26:20,200
That means even even though I am
doing the exact same thing,

371
00:26:21,400 --> 00:26:22,920
I have to write a new method.

372
00:26:22,920 --> 00:26:23,720
Right.

373
00:26:24,040 --> 00:26:26,520
And before the method

374
00:26:26,520 --> 00:26:29,520
overloading before the method overloading

375
00:26:29,800 --> 00:26:33,920
because it was not possible
to write same name meters

376
00:26:35,280 --> 00:26:37,400
for different types of parameters.

377
00:26:38,080 --> 00:26:43,240
Programmers,
they have to come up with different names

378
00:26:43,880 --> 00:26:47,320
if they are dealing with different data
types.

379
00:26:47,320 --> 00:26:50,840
So let's say for example,
if I had to write

380
00:26:51,800 --> 00:26:54,160
a method that can add doubles,

381
00:26:54,160 --> 00:26:57,160
I will have to come up
with a different name.

382
00:26:57,160 --> 00:27:03,120
I, I might use add doubles,
although I am doing

383
00:27:03,120 --> 00:27:10,800
exactly this same thing.

384
00:27:10,800 --> 00:27:13,040
Okay. So the only difference

385
00:27:14,480 --> 00:27:17,960
is this number and I'm one.

386
00:27:17,960 --> 00:27:19,520
And then

387
00:27:21,080 --> 00:27:23,640
double.

388
00:27:23,640 --> 00:27:24,360
Okay.

389
00:27:24,480 --> 00:27:27,960
So the only difference here is this

390
00:27:30,120 --> 00:27:31,200
data type going to see.

391
00:27:31,200 --> 00:27:34,240
I am doing exactly the same thing. Okay.

392
00:27:34,320 --> 00:27:38,320
I am adding inside this method, adding
in that the only difference

393
00:27:38,320 --> 00:27:44,400
is this in here I am using double,
but my my operation is same.

394
00:27:44,640 --> 00:27:50,040
So is it a good idea
if I am doing exactly the same thing

395
00:27:50,640 --> 00:27:54,200
and if I have to come up
with different different names?

396
00:27:54,440 --> 00:27:58,760
So to give one more example,
let's say I have to add this time

397
00:27:59,240 --> 00:28:03,120
maybe the elements
of of an editor, right? So

398
00:28:04,280 --> 00:28:04,920
then I have

399
00:28:04,920 --> 00:28:07,320
to come up with again
with a different name

400
00:28:07,920 --> 00:28:10,360
and add a write

401
00:28:13,520 --> 00:28:15,240
how can I boss

402
00:28:15,240 --> 00:28:19,440
and add it to the method dies?

403
00:28:19,440 --> 00:28:22,000
Or should I write
inside these parentheses?

404
00:28:22,360 --> 00:28:25,440
And what is the terminology that we use?

405
00:28:25,440 --> 00:28:30,360
What are these things called?

406
00:28:30,360 --> 00:28:33,120
They are called parameters. Right?

407
00:28:33,360 --> 00:28:36,160
Again, I am doing the exact same thing,

408
00:28:36,160 --> 00:28:41,480
so how can I add the elements of an array?

409
00:28:41,480 --> 00:28:47,200
I need maybe a temporary variable
to hold the sum.

410
00:28:48,440 --> 00:28:52,200
I can write a law

411
00:28:53,840 --> 00:28:56,080
integer number

412
00:29:00,440 --> 00:29:03,800
and then I get the elements of the array

413
00:29:05,240 --> 00:29:07,560
one by one

414
00:29:15,600 --> 00:29:17,400
and I do some

415
00:29:17,400 --> 00:29:20,640
is equal to some plus number.

416
00:29:21,720 --> 00:29:23,280
And do we need. Yes.

417
00:29:23,280 --> 00:29:26,080
Yes I shall when you do that.

418
00:29:26,400 --> 00:29:26,960
Okay.

419
00:29:27,360 --> 00:29:29,760
And then once I am done looping through

420
00:29:29,760 --> 00:29:33,440
all the elements, okay,
I can print out that sum.

421
00:29:33,800 --> 00:29:37,200
So again,
I am doing addition in this method.

422
00:29:37,320 --> 00:29:38,720
I am doing audition.

423
00:29:38,720 --> 00:29:40,680
In this method I am doing addition.

424
00:29:40,680 --> 00:29:43,160
In here I am again doing addition.

425
00:29:43,160 --> 00:29:45,320
And why?

426
00:29:45,320 --> 00:29:47,600
Why also it is important.

427
00:29:47,600 --> 00:29:49,440
It's also important because

428
00:29:50,600 --> 00:29:53,160
whenever
you guys will be joining a company,

429
00:29:54,000 --> 00:29:56,120
you guys will be reading a lot of quote,

430
00:29:57,000 --> 00:29:59,400
not if the names of the methods.

431
00:29:59,960 --> 00:30:03,000
They don't convey the sense, right?

432
00:30:03,000 --> 00:30:05,560
Like, well, what is that method is doing?

433
00:30:05,560 --> 00:30:09,840
If you cannot get that info
from the name of the method,

434
00:30:10,440 --> 00:30:11,720
what do you guys have to do?

435
00:30:11,720 --> 00:30:16,520
You guys have to open that method,
understand all the logic,

436
00:30:16,880 --> 00:30:21,120
the reading through all the lines
that are written inside that method

437
00:30:22,000 --> 00:30:24,440
and it will be wasting a lot of time,
right?

438
00:30:24,800 --> 00:30:25,440
Maybe.

439
00:30:25,440 --> 00:30:28,640
Let's say if I, if I say

440
00:30:28,800 --> 00:30:31,360
lose something

441
00:30:32,120 --> 00:30:33,600
with Eddie.

442
00:30:33,600 --> 00:30:36,080
Right. If I name this method like this.

443
00:30:36,360 --> 00:30:38,880
Now what you guys have to do,
you cannot read

444
00:30:38,880 --> 00:30:42,880
from the name of this method,
so you have to open that matter.

445
00:30:42,880 --> 00:30:46,120
You have to read all the logic
and then you have to understand the logic,

446
00:30:46,120 --> 00:30:49,760
and then you can use this
method in your program. So.

447
00:30:50,520 --> 00:30:53,520
So what happens
is that in the industry, it's

448
00:30:53,720 --> 00:30:57,960
very, very important
how you name your methods,

449
00:30:58,040 --> 00:31:02,840
how you name your classes,
how you name your variables.

450
00:31:02,880 --> 00:31:06,320
Okay? So that's why it is also important

451
00:31:09,400 --> 00:31:10,720
in now

452
00:31:11,280 --> 00:31:13,560
in here, let's say we were adding

453
00:31:14,640 --> 00:31:16,640
at two elements.

454
00:31:16,640 --> 00:31:20,880
Okay, Now if I have to add three elements,

455
00:31:22,200 --> 00:31:26,520
I have to come up with a different name
again.

456
00:31:26,640 --> 00:31:27,040
Okay.

457
00:31:27,040 --> 00:31:32,840
And three integers, maybe.

458
00:31:32,840 --> 00:31:36,880
And then I can write another number

459
00:31:38,080 --> 00:31:41,920
like this and I can say plus
method and number three.

460
00:31:42,440 --> 00:31:42,760
Okay.

461
00:31:43,240 --> 00:31:45,720
So in all these examples,

462
00:31:47,000 --> 00:31:51,400
we are doing the exact same operation
addition.

463
00:31:51,400 --> 00:31:51,800
Okay.

464
00:31:51,800 --> 00:31:54,840
But what we have to do every time,

465
00:31:55,440 --> 00:31:59,000
if I change the number of parameters,

466
00:32:00,400 --> 00:32:05,160
if I change the type of parameter

467
00:32:06,000 --> 00:32:12,320
or one more thing,
if I change the six months of parameter.

468
00:32:12,320 --> 00:32:15,960
So let's say, for example, I have to add

469
00:32:17,120 --> 00:32:19,920
one integer and one double.

470
00:32:19,920 --> 00:32:23,080
Now again,
I have to come up with a different name,

471
00:32:25,080 --> 00:32:26,520
add integer

472
00:32:26,520 --> 00:32:30,480
and double right?

473
00:32:30,480 --> 00:32:34,320
So oops.

474
00:32:34,320 --> 00:32:36,640
So I double again.

475
00:32:36,840 --> 00:32:40,880
I am doing the same thing
just because I have to

476
00:32:40,880 --> 00:32:45,480
change the number of parameters
that I am passing to a method,

477
00:32:46,480 --> 00:32:49,600
or just because I am changing

478
00:32:49,600 --> 00:32:52,680
the sequence of the parameter

479
00:32:53,640 --> 00:32:58,480
or just because I am passing
different number of parameters,

480
00:32:58,720 --> 00:33:02,560
I have to come up again and again
with different different names.

481
00:33:02,560 --> 00:33:07,080
Okay, so this is the problem that method
overloading solves.

482
00:33:08,400 --> 00:33:09,000
Okay.

483
00:33:09,000 --> 00:33:13,920
And how it soldered the method overloading
says that Hey programmers,

484
00:33:14,760 --> 00:33:18,200
if you are changing the parameter

485
00:33:18,200 --> 00:33:22,360
types,
you don't have to write a new method.

486
00:33:22,360 --> 00:33:26,280
If you are passing
different number of parameters,

487
00:33:26,720 --> 00:33:28,920
you can still use the same name.

488
00:33:28,920 --> 00:33:33,480
If you are passing different parameters
in a different sequence,

489
00:33:33,880 --> 00:33:37,360
you can still use the same name
and if you are posting

490
00:33:37,360 --> 00:33:41,000
something totally different,
you can still use the same name.

491
00:33:41,040 --> 00:33:42,120
Okay, so let's say

492
00:33:45,720 --> 00:33:46,640
so let me

493
00:33:46,640 --> 00:33:49,600
call these
methods and let me show how these

494
00:33:49,600 --> 00:34:15,480
methods works.

495
00:34:15,480 --> 00:34:59,320
Let me know once
you guys are done typing discord.

496
00:34:59,320 --> 00:35:01,640
Now let's try to call these methods. Okay?

497
00:35:02,040 --> 00:35:06,400
So expert quality and so.

498
00:35:06,400 --> 00:35:14,120
So tell me, guys, if I want to
call these methods from this class

499
00:35:15,040 --> 00:35:20,560
and I don't want to create the object
of this class, what should I modify?

500
00:35:20,600 --> 00:35:25,760
How can I do that?

501
00:35:25,760 --> 00:35:27,760
I want to call these matters

502
00:35:28,760 --> 00:35:32,440
just with the name of the class. Yes.

503
00:35:32,440 --> 00:35:35,040
So I can add

504
00:35:36,200 --> 00:35:39,560
the static keyword like this right

505
00:35:48,640 --> 00:35:51,480
then with the I can say

506
00:35:58,640 --> 00:36:00,400
method overloading

507
00:36:00,400 --> 00:36:05,400
not add.

508
00:36:05,400 --> 00:36:09,200
I pass in number ten and under number ten.

509
00:36:09,360 --> 00:36:10,440
Right.

510
00:36:11,800 --> 00:36:14,640
I can see

511
00:36:16,440 --> 00:36:19,160
method overloading

512
00:36:19,160 --> 00:36:24,920
add and

513
00:36:26,760 --> 00:36:27,360
double.

514
00:36:27,360 --> 00:36:29,400
I can post and point five

515
00:36:30,880 --> 00:36:33,440
and 10.5 so I can now add

516
00:36:35,440 --> 00:36:38,080
two doubles as well.

517
00:36:38,080 --> 00:36:40,720
If I have

518
00:36:43,240 --> 00:36:46,640
one integer and the other one as double.

519
00:36:48,520 --> 00:36:51,320
I can also do that

520
00:36:51,320 --> 00:36:57,160
and if I have my turn overloading
or let's say for example,

521
00:36:57,160 --> 00:37:02,320
if I have three numbers, then

522
00:37:02,400 --> 00:37:09,280
and then I can also do that.

523
00:37:09,280 --> 00:37:11,720
So just add

524
00:37:15,640 --> 00:37:20,320
one thing at any

525
00:37:24,560 --> 00:37:26,640
and if I have

526
00:37:35,760 --> 00:38:11,240
and if I have an array,

527
00:38:12,840 --> 00:38:14,760
I can also add that.

528
00:38:14,760 --> 00:38:15,320
Okay.

529
00:38:15,480 --> 00:38:27,400
And now if I execute my code,

530
00:38:27,400 --> 00:38:31,240
I will see the results for all the methods

531
00:38:31,440 --> 00:38:44,640
you guys also granted, it does.

532
00:38:44,640 --> 00:38:47,920
So when we call array,
we put them in curly

533
00:38:47,920 --> 00:38:50,960
bracket E Yes,

534
00:38:51,360 --> 00:38:55,720
So if that's a shorter way
of creating and adding, are there students

535
00:38:56,520 --> 00:39:02,080
which are getting some kind of errors
so say while having errors

536
00:39:03,360 --> 00:39:05,760
add indiabulls.

537
00:39:06,120 --> 00:39:11,600
So Silva, you have to show me this class,
this method overloading class.

538
00:39:11,600 --> 00:39:26,320
So we just add into double matter.

539
00:39:26,320 --> 00:39:29,640
No, you don't have that
method in your class.

540
00:39:30,400 --> 00:39:33,520
Silva You have to create this method.

541
00:39:33,520 --> 00:39:36,120
You are missing that matter.

542
00:39:36,160 --> 00:39:37,680
Add into double.

543
00:39:37,680 --> 00:39:38,480
Okay,

544
00:39:39,240 --> 00:39:41,560
so in here you are having add double

545
00:39:42,120 --> 00:39:44,840
only but not add into doubles.

546
00:39:46,360 --> 00:39:56,000
So. So this is one of the problem.

547
00:39:56,040 --> 00:40:06,920
You guys understand the problem.

548
00:40:06,920 --> 00:40:10,280
So again, can you guys write the problem
if you have understood?

549
00:40:10,280 --> 00:40:13,880
And so without overloading,
that's the method

550
00:40:13,880 --> 00:40:16,960
name always has to start with
same word or that.

551
00:40:16,960 --> 00:40:17,880
No, no, no.

552
00:40:17,880 --> 00:40:19,920
Oh, it can be anything.
It can be anything.

553
00:40:20,520 --> 00:40:24,920
It can be.

554
00:40:24,920 --> 00:40:33,080
It can be anything.

555
00:40:33,080 --> 00:40:37,280
So now let's try to rewrite

556
00:40:38,440 --> 00:40:41,480
this these methods

557
00:40:41,480 --> 00:40:43,240
and these classes.

558
00:40:43,240 --> 00:40:47,560
But this time, last use
method overload Me.

559
00:40:48,040 --> 00:40:49,200
Okay. Okay.

560
00:40:49,200 --> 00:40:51,240
Can I close these two classes, guys?

561
00:40:51,240 --> 00:40:59,080
If you guys are done typing,

562
00:40:59,080 --> 00:41:01,920
why we put start not public.

563
00:41:02,120 --> 00:41:05,640
So can you guys
tell us why we use this static,

564
00:41:06,640 --> 00:41:07,480
not public.

565
00:41:07,480 --> 00:41:10,240
And if the public and static
if they are related?

566
00:41:11,360 --> 00:41:13,240
Are Republicans that static

567
00:41:13,240 --> 00:41:19,680
related to each other?

568
00:41:19,680 --> 00:41:22,680
The first thing public and static.

569
00:41:22,680 --> 00:41:24,120
They are not related.

570
00:41:24,120 --> 00:41:28,120
They are not a substitute of a
for one and other.

571
00:41:28,120 --> 00:41:28,840
Okay.

572
00:41:29,360 --> 00:41:33,040
Just out of curiosity,
why does the import randomly pop up

573
00:41:33,040 --> 00:41:35,360
when I make a different class

574
00:41:37,440 --> 00:41:39,360
out of the same import

575
00:41:39,360 --> 00:41:42,760
that caused the trouble on that day? It's

576
00:41:45,240 --> 00:41:45,960
so you

577
00:41:45,960 --> 00:41:49,040
you might be typing
something related to that class.

578
00:41:49,080 --> 00:41:52,120
There might be a class in this package

579
00:41:52,560 --> 00:41:55,520
and you accidentally type
the name of that class.

580
00:41:55,520 --> 00:41:57,840
Then it pops up.

581
00:41:57,840 --> 00:41:59,680
So first things starting and public.

582
00:41:59,680 --> 00:42:02,040
They don't have to do anything
with each another.

583
00:42:02,040 --> 00:42:06,360
Okay, static is a non access modifier,

584
00:42:07,160 --> 00:42:11,480
oblique is a and excess modifier.

585
00:42:11,920 --> 00:42:13,000
Okay.

586
00:42:13,000 --> 00:42:15,960
Public means what does public mean guys?

587
00:42:16,360 --> 00:42:23,240
If I write public with the
method, what does it mean? So

588
00:42:27,200 --> 00:42:31,440
we can
access that called in whole package.

589
00:42:32,120 --> 00:42:35,120
You got access to it

590
00:42:35,760 --> 00:42:38,840
is static and private are same.

591
00:42:38,840 --> 00:42:43,000
No, they are also not same.

592
00:42:43,000 --> 00:42:47,760
If we write public it means that matter

593
00:42:48,000 --> 00:42:51,440
or constructor or field.

594
00:42:51,840 --> 00:42:55,240
If I am writing public with the field
matter constructor

595
00:42:55,760 --> 00:42:59,040
can be called from anywhere

596
00:42:59,080 --> 00:43:02,160
inside that package.

597
00:43:02,160 --> 00:43:07,720
On the other hand,
static means I don't have to come up.

598
00:43:08,640 --> 00:43:10,800
I don't have to create

599
00:43:10,800 --> 00:43:13,400
an object of that class

600
00:43:14,240 --> 00:43:17,800
to access that field or that method.

601
00:43:17,800 --> 00:43:19,000
Again, I have static.

602
00:43:19,000 --> 00:43:35,640
That structure goes, No,

603
00:43:35,640 --> 00:43:38,640
we can not have static constructors.

604
00:43:38,640 --> 00:43:43,920
Can you guys tell me the reason
why we cannot have static constructors?

605
00:43:43,920 --> 00:43:45,960
What is the purpose of constructors?

606
00:43:45,960 --> 00:43:49,320
What is the purpose of constructors

607
00:43:51,360 --> 00:43:53,760
to initialize

608
00:43:53,760 --> 00:43:56,160
instance figures, right.

609
00:43:56,720 --> 00:44:00,160
To create an object object is nothing

610
00:44:00,160 --> 00:44:03,480
but a collection of
instance fields and methods.

611
00:44:04,680 --> 00:44:07,560
But static means

612
00:44:07,560 --> 00:44:10,000
something that belongs to class,

613
00:44:10,800 --> 00:44:14,320
something that is shared
across all the objects.

614
00:44:14,440 --> 00:44:17,000
Something that has only one

615
00:44:18,480 --> 00:44:20,960
value shared across all the classes.

616
00:44:21,080 --> 00:44:24,240
So if we are making the constructor static

617
00:44:25,480 --> 00:44:29,520
first, we will not be able to access
instance fields.

618
00:44:29,760 --> 00:44:33,320
Second,
even if we are able to access the instance

619
00:44:33,320 --> 00:44:39,160
fields, all the objects will be having
same values, same values.

620
00:44:39,160 --> 00:44:40,760
So that's why it is not allowed.

621
00:44:40,760 --> 00:44:42,600
Does it make sense?

622
00:44:43,320 --> 00:44:46,600
Yes. All the objects
will be having the same values.

623
00:44:46,600 --> 00:44:50,960
If Java guys are allowed
to have static constructors.

624
00:44:51,440 --> 00:44:52,280
Okay,

625
00:44:53,280 --> 00:44:56,800
so let's try to use method
overloading in here.

626
00:44:57,280 --> 00:44:59,920
Okay.

627
00:44:59,920 --> 00:45:05,040
God, we access
static fields with static constructors.

628
00:45:05,040 --> 00:45:06,320
Yes we can.

629
00:45:06,320 --> 00:45:09,080
But what about the instance fields

630
00:45:09,920 --> 00:45:13,360
constructor
is there to initialize instance fields.

631
00:45:14,320 --> 00:45:14,880
We will

632
00:45:14,880 --> 00:45:21,440
be initializing those fields.

633
00:45:21,440 --> 00:45:24,440
Is it clear for hard

634
00:45:35,840 --> 00:45:47,840
welcome.

635
00:45:47,840 --> 00:45:50,800
So let me copy these matters

636
00:45:56,560 --> 00:46:00,840
and close this up

637
00:46:05,200 --> 00:46:06,360
and let me be.

638
00:46:06,360 --> 00:46:11,960
Can now work method overloading saves it.

639
00:46:11,960 --> 00:46:15,720
Save the task because you are always

640
00:46:15,720 --> 00:46:18,840
doing the same operation.

641
00:46:18,840 --> 00:46:19,520
You know work.

642
00:46:19,520 --> 00:46:22,320
You can always use the same name.

643
00:46:22,560 --> 00:46:23,000
Okay.

644
00:46:23,000 --> 00:46:27,680
You can always use the same.

645
00:46:27,680 --> 00:46:29,800
You can always use the same. Right.

646
00:46:30,720 --> 00:46:35,080
So I can use
because I am always doing the same thing.

647
00:46:35,880 --> 00:46:40,440
I can use the same name
for all the methods.

648
00:46:41,160 --> 00:46:44,280
And now if I am calling

649
00:46:46,240 --> 00:46:47,840
this add method

650
00:46:47,840 --> 00:46:50,840
with integer type of parameters,

651
00:46:50,960 --> 00:46:53,960
which method will be called dies

652
00:46:54,120 --> 00:47:01,880
in the first one bright integer

653
00:47:01,880 --> 00:47:07,400
and who is deciding how it is being
decided which method to call

654
00:47:11,960 --> 00:47:15,880
based on the type of parameters?

655
00:47:16,280 --> 00:47:17,120
Okay.

656
00:47:17,440 --> 00:47:21,240
And if I pass one integer and double

657
00:47:22,200 --> 00:47:24,720
Java automatically calls

658
00:47:25,760 --> 00:47:27,800
this method. Okay.

659
00:47:27,800 --> 00:47:31,160
If I pass three parameters, Java

660
00:47:31,200 --> 00:47:34,560
automatically calls this parameter.

661
00:47:35,200 --> 00:47:38,400
This method if I pass

662
00:47:38,400 --> 00:47:42,360
and every Java automatically calls

663
00:47:42,720 --> 00:47:46,480
this and method
which is expecting and adding,

664
00:47:46,560 --> 00:47:50,640
okay, so this is the benefit of method of.

665
00:47:50,880 --> 00:47:55,200
And so you guys have already done
this when we created multiple

666
00:47:55,200 --> 00:48:03,160
constructors, right?

667
00:48:03,160 --> 00:48:05,680
What if we have the same types?

668
00:48:06,000 --> 00:48:08,120
Which one is be called?

669
00:48:08,120 --> 00:48:10,680
So if we have the same types,

670
00:48:11,760 --> 00:48:14,560
we will be getting an error

671
00:48:14,560 --> 00:48:17,440
here because Java is now confused.

672
00:48:17,440 --> 00:48:20,760
Java decides based on the parameters

673
00:48:20,920 --> 00:48:23,840
and you are passing the same parameters
to the Java.

674
00:48:23,880 --> 00:48:26,360
Don't know which method to call.

675
00:48:26,360 --> 00:48:31,920
Let me also show that.

676
00:48:31,920 --> 00:48:34,160
So it is saying what if

677
00:48:35,160 --> 00:48:39,120
we pass?

678
00:48:39,120 --> 00:48:43,760
If we pass the same parameters again?

679
00:48:45,160 --> 00:48:48,520
So because the parameters are same,

680
00:48:48,520 --> 00:48:51,480
because these methods,
they have the same parameters.

681
00:48:51,960 --> 00:48:54,840
Now we will be getting an error

682
00:48:55,600 --> 00:49:01,200
so far method overloading to work,
but it is not the

683
00:49:01,480 --> 00:49:06,200
this going to make your documentation
confusing is a lot easier

684
00:49:06,200 --> 00:49:10,200
of the names of methods given indication
for what this method does.

685
00:49:10,640 --> 00:49:18,880
So Mohammad, can you tell me
what all of these methods are doing?

686
00:49:18,880 --> 00:49:21,120
They are always adding.

687
00:49:21,120 --> 00:49:26,440
They are always adding just because
sometimes you are adding integer.

688
00:49:26,680 --> 00:49:31,600
Some times you are adding double,
sometimes you are adding longs,

689
00:49:31,600 --> 00:49:34,560
sometimes you are adding one integer
and other double.

690
00:49:35,400 --> 00:49:37,840
Is it a good idea to always write a new.

691
00:49:40,200 --> 00:49:44,760
Okay, so that's not a good idea.

692
00:49:44,760 --> 00:49:46,440
What if you are?

693
00:49:46,440 --> 00:49:48,600
You have to pass three parameters.

694
00:49:48,600 --> 00:49:50,200
You come up with a different name.

695
00:49:50,200 --> 00:49:52,680
What if you have to pass formatted
parameters?

696
00:49:52,680 --> 00:49:54,000
Then again a different name.

697
00:49:54,000 --> 00:49:56,080
Five parameter again a different name.

698
00:49:56,720 --> 00:49:58,400
If you changed the sequence

699
00:49:59,520 --> 00:50:01,560
again, a new method name, you

700
00:50:01,560 --> 00:50:06,720
you will be running out of names.

701
00:50:06,720 --> 00:50:07,680
But the operation.

702
00:50:07,680 --> 00:50:09,800
Yes, the operation should be same.

703
00:50:09,840 --> 00:50:11,880
Okay. Operation should be same.

704
00:50:11,880 --> 00:50:15,680
So this is okay.

705
00:50:16,880 --> 00:50:20,280
So the operation should be same.

706
00:50:20,280 --> 00:50:24,360
So there are three things through
which we can overload.

707
00:50:24,680 --> 00:50:26,520
Okay.

708
00:50:26,520 --> 00:50:31,400
First,
if we change the data types, so in here

709
00:50:31,440 --> 00:50:33,680
the data type was integer.

710
00:50:35,160 --> 00:50:39,800
In here the data type was again
an integer on the second method.

711
00:50:39,840 --> 00:50:42,560
Then I define the second method.

712
00:50:42,560 --> 00:50:45,840
I change this integer to a double.

713
00:50:45,840 --> 00:50:50,200
Okay, so if I change the data types,

714
00:50:50,440 --> 00:50:53,640
then Java will not give me an error.

715
00:50:53,640 --> 00:50:59,520
I will be able to override or a method.

716
00:50:59,520 --> 00:51:02,840
The other thing
that can allow me to overload

717
00:51:02,840 --> 00:51:07,400
the method is
if I pass different number of parameters.

718
00:51:07,920 --> 00:51:10,440
How many parameters
I am passing in here guys

719
00:51:13,360 --> 00:51:16,720
tool and
how many parameters are there in here?

720
00:51:17,320 --> 00:51:19,640
They are three right

721
00:51:20,680 --> 00:51:23,280
now. One more way of overloading

722
00:51:23,280 --> 00:51:25,920
is changing the sequence.

723
00:51:26,640 --> 00:51:29,760
If I pass the double value first

724
00:51:30,840 --> 00:51:35,160
and if I pass the integer after that,

725
00:51:35,800 --> 00:51:39,160
still I can overload objects in here.

726
00:51:39,160 --> 00:51:43,520
I was passing an integer first,
then double in here

727
00:51:43,520 --> 00:51:47,360
I am passing a double first
and then an integer.

728
00:51:47,400 --> 00:51:49,640
So this is changing the sequence.

729
00:51:50,200 --> 00:51:59,040
So in how many ways I can overload
the meters?

730
00:51:59,040 --> 00:52:00,320
Three ways, right?

731
00:52:00,320 --> 00:52:01,000
Can you guys.

732
00:52:01,000 --> 00:52:08,920
Can you guys tell me which three ways?

733
00:52:08,920 --> 00:52:11,120
Changing sequence. Yes,

734
00:52:13,000 --> 00:52:15,600
Changing that type? Yes.

735
00:52:16,440 --> 00:52:20,520
And passing different parameters.

736
00:52:20,640 --> 00:52:21,280
Right.

737
00:52:21,280 --> 00:52:25,200
So three ways I can overload four meters

738
00:52:25,480 --> 00:52:27,680
in three different ways.

739
00:52:28,200 --> 00:52:30,720
And can I also do the same

740
00:52:30,720 --> 00:52:37,520
with the constructors?

741
00:52:37,520 --> 00:52:45,880
Three.

742
00:52:45,880 --> 00:52:47,680
So if you guys remember

743
00:52:49,400 --> 00:52:50,840
the class

744
00:52:50,840 --> 00:52:56,560
on constructors,

745
00:52:56,560 --> 00:53:01,920
it was after access modifiers, right?

746
00:53:01,920 --> 00:53:12,840
I guess this one.

747
00:53:12,840 --> 00:53:14,200
Oh yes, this one.

748
00:53:14,200 --> 00:53:18,600
So you guys see in here
how many parameters

749
00:53:18,600 --> 00:53:21,960
I was passing to this constructor.

750
00:53:21,960 --> 00:53:24,360
Zero in here.

751
00:53:24,360 --> 00:53:25,400
What did I change?

752
00:53:25,400 --> 00:53:27,600
How did I overload this constructor?

753
00:53:27,600 --> 00:53:32,880
Guys, by changing which out of those
three things that can allow me

754
00:53:32,880 --> 00:53:40,040
to overload the matter,
I change the number of parameters in here.

755
00:53:40,040 --> 00:53:44,880
In here it was zero parameters in here
I passed one

756
00:53:44,880 --> 00:53:49,480
parameter right?

757
00:53:49,480 --> 00:53:53,200
So in here I was always overloading

758
00:53:53,760 --> 00:53:56,480
the constructors by passing

759
00:53:57,520 --> 00:53:59,840
how I am overloading
the constructors in this class.

760
00:53:59,840 --> 00:54:01,400
Let me make it bigger.

761
00:54:01,400 --> 00:54:05,880
So I am writing this same
constructor again and again.

762
00:54:05,880 --> 00:54:08,400
But what I am changing in here,

763
00:54:08,400 --> 00:54:10,280
how I am overloading this constructor

764
00:54:12,160 --> 00:54:15,440
by changing the number of

765
00:54:16,800 --> 00:54:19,240
parameters that I am passing.

766
00:54:19,240 --> 00:54:22,280
So overloading the constructors

767
00:54:22,840 --> 00:54:25,160
is also possible.

768
00:54:25,360 --> 00:54:28,560
Guys,
someone please tell me that four fingers

769
00:54:28,560 --> 00:54:31,240
does not mean three numbers.

770
00:54:32,640 --> 00:54:36,120
Did I say four like this then? Yes.

771
00:54:36,120 --> 00:54:40,960
It's adding new parameters.

772
00:54:40,960 --> 00:54:42,040
So. So.

773
00:54:42,040 --> 00:54:45,360
So let me repeat in how many ways I can.

774
00:54:45,640 --> 00:54:47,320
I can overload methods.

775
00:54:47,320 --> 00:54:51,480
Then is it three?

776
00:54:51,480 --> 00:54:56,400
Yeah.

777
00:54:56,400 --> 00:54:56,960
All right.

778
00:54:56,960 --> 00:55:03,840
So I can overload the constructor
in three different ways.

779
00:55:03,840 --> 00:55:06,800
Okay. Three different ways.

780
00:55:06,800 --> 00:55:10,160
So there is also a dog
and a video on the internet.

781
00:55:10,160 --> 00:55:12,360
So they ask you to

782
00:55:12,480 --> 00:55:16,120
hold your hand like this
and put it on your chin.

783
00:55:16,240 --> 00:55:19,320
But they are actually placing it
on your cheeks, right?

784
00:55:20,000 --> 00:55:24,160
And the person cannot get it right.

785
00:55:24,160 --> 00:55:27,160
Okay, so.

786
00:55:27,400 --> 00:55:32,280
So I can also overload the constructors.

787
00:55:32,520 --> 00:55:34,640
Yeah, I can overload three meters.

788
00:55:35,000 --> 00:55:38,400
I can overload the constructors.

789
00:55:39,840 --> 00:55:41,280
Can I also overload the

790
00:55:41,280 --> 00:55:57,120
field two days.

791
00:55:57,120 --> 00:55:57,640
Okay.

792
00:56:00,360 --> 00:56:02,640
Do do we pass parameters to the fields

793
00:56:02,960 --> 00:56:08,280
movie pass parameters to the field?

794
00:56:08,280 --> 00:56:09,000
No, there.

795
00:56:09,000 --> 00:56:12,320
There is no such thing for field,
so there is no assisting

796
00:56:12,320 --> 00:56:15,960
field overloading.

797
00:56:15,960 --> 00:56:19,200
Like if, if it was allowed

798
00:56:19,960 --> 00:56:23,040
you guys will be

799
00:56:23,040 --> 00:56:27,920
having this flexibility
that in one single class

800
00:56:28,920 --> 00:56:30,880
you guys

801
00:56:31,800 --> 00:56:36,440
would be creating a field with integer

802
00:56:36,600 --> 00:56:40,080
and then the same name field with boolean,

803
00:56:40,080 --> 00:56:43,080
same name field with double,

804
00:56:43,400 --> 00:56:47,880
then we can see that
the field overloading is allowed.

805
00:56:47,880 --> 00:56:48,840
But can we do that?

806
00:56:48,840 --> 00:56:52,920
Can I read Declare a variable
with different data type in Java?

807
00:56:54,280 --> 00:56:55,400
No. Right.

808
00:56:55,400 --> 00:56:56,440
We cannot do that.

809
00:56:56,440 --> 00:56:59,240
It's also not allowed
in other programing languages

810
00:57:10,200 --> 00:57:13,080
you ask as masters questions.

811
00:57:13,080 --> 00:57:16,640
We are working on
our certificate as there so

812
00:57:17,800 --> 00:57:20,760
I am teaching
you how to be a master for hard.

813
00:57:21,320 --> 00:57:26,280
No, and don't only learn
for that certificate.

814
00:57:26,280 --> 00:57:28,520
Yes, that would mess up everything.

815
00:57:28,520 --> 00:57:30,440
So now

816
00:57:31,240 --> 00:57:34,080
if I have to

817
00:57:34,080 --> 00:57:36,440
call these matters, but

818
00:57:37,240 --> 00:57:40,400
I just pass.

819
00:57:40,920 --> 00:57:43,400
I just to say

820
00:57:51,440 --> 00:57:54,000
I just say

821
00:57:54,000 --> 00:57:56,600
urd. Okay.

822
00:57:56,600 --> 00:58:02,240
And if I pass to integers. Yes.

823
00:58:03,760 --> 00:58:06,040
If I pass to integers.

824
00:58:06,040 --> 00:58:15,400
So which method will be called right.

825
00:58:15,400 --> 00:58:16,920
The first one. Right.

826
00:58:16,920 --> 00:58:20,840
Because Java knows that I am passing

827
00:58:22,480 --> 00:58:25,680
to integers

828
00:58:26,160 --> 00:58:28,600
and Java automatically decides

829
00:58:30,760 --> 00:58:34,560
which method to call.

830
00:58:34,560 --> 00:58:36,960
If I was

831
00:58:38,760 --> 00:58:40,680
one double

832
00:58:41,440 --> 00:58:45,280
and one third, then

833
00:58:46,800 --> 00:58:49,040
which method will be called twice

834
00:58:50,600 --> 00:58:51,280
what I did.

835
00:58:51,280 --> 00:58:55,560
I got an error that is not available

836
00:58:55,560 --> 00:59:03,120
in this channel.

837
00:59:03,120 --> 00:59:06,160
On line number seven what you are passing.

838
00:59:06,160 --> 00:59:10,280
One, two, three four and five parameters.

839
00:59:11,000 --> 00:59:12,120
So your matter.

840
00:59:12,120 --> 00:59:15,000
But you have not defined any method

841
00:59:15,360 --> 00:59:18,240
that accepts five parameters.

842
00:59:18,240 --> 00:59:23,280
So you are indeed introducing this method
overloading in previous classes. Yep.

843
00:59:23,880 --> 00:59:25,600
In constructors.

844
00:59:25,600 --> 00:59:30,920
So you guys already knew about
about method overloading.

845
00:59:32,560 --> 00:59:35,280
So posting
this for ten guys, I will help you out.

846
00:59:36,000 --> 00:59:38,720
No. So. No.

847
00:59:39,720 --> 00:59:42,240
And you guys can also check this out

848
00:59:42,680 --> 00:59:46,120
as soon as I write the method name and

849
00:59:47,160 --> 00:59:49,240
as soon as I pass the parameters.

850
00:59:49,560 --> 00:59:53,840
You guys see,
the color of this method has been changed.

851
00:59:53,920 --> 00:59:56,520
The color of this other methods

852
00:59:56,520 --> 00:59:58,840
is kind of this.

853
00:59:59,080 --> 01:00:01,680
Ladies, can you tell me
what is this color?

854
01:00:01,680 --> 01:00:06,680
So, ladies,
so we we know only about seven colors.

855
01:00:06,680 --> 01:00:11,720
The rest of the colors,
they are five ladies. Yes.

856
01:00:12,720 --> 01:00:17,280
So what about being

857
01:00:18,840 --> 01:00:20,400
a you see, like a faint

858
01:00:20,400 --> 01:00:23,880
movie, purple, navy, blue, yellowish
sky blue,

859
01:00:24,160 --> 01:00:26,480
blah, blah, blah.

860
01:00:28,000 --> 01:00:30,960
So you guys see this deal color literally.

861
01:00:30,960 --> 01:00:34,440
I'm getting this word
for the first time, black and white.

862
01:00:34,440 --> 01:00:35,280
I only know

863
01:00:37,240 --> 01:00:40,680
the it's kind of this deal color.

864
01:00:40,680 --> 01:00:42,400
Okay. I don't know what is different.

865
01:00:42,400 --> 01:00:44,400
So and the and the color for me.

866
01:00:45,640 --> 01:00:50,440
And what is this
color is not it's kind of dark green.

867
01:00:50,480 --> 01:00:52,440
Okay. It looks like black.

868
01:00:52,440 --> 01:00:56,600
So as you guys write
the name of the method

869
01:00:57,160 --> 01:00:59,800
the the in the java, the invalidate

870
01:00:59,800 --> 01:01:02,720
also changes the color of the method.

871
01:01:03,120 --> 01:01:07,320
And now and then you say yes, go to
you are now using this

872
01:01:07,320 --> 01:01:08,960
method somewhere in your code.

873
01:01:08,960 --> 01:01:12,480
But these this method these three meters

874
01:01:12,480 --> 01:01:15,760
they are still not being used
so the color is also changed.

875
01:01:16,400 --> 01:01:19,320
Even we execute this code

876
01:01:19,560 --> 01:01:24,280
and because of this property
that Java knows, even

877
01:01:24,280 --> 01:01:30,840
we before the execution of the code,
the Java knows which method will be called

878
01:01:31,880 --> 01:01:34,640
because of this property.

879
01:01:34,640 --> 01:01:37,880
It is also called hourly binding.

880
01:01:37,880 --> 01:01:40,600
Okay, so writing a method name,

881
01:01:41,160 --> 01:01:44,040
passing the arguments and knowing

882
01:01:44,480 --> 01:01:49,600
before the execution which will be called,
is called hourly binding.

883
01:01:49,640 --> 01:01:55,920
So method overloading or hourly binding.

884
01:01:55,920 --> 01:01:58,680
There are other names
for this terminology as well.

885
01:01:58,720 --> 01:02:01,600
We will learn about those as right. So

886
01:02:03,000 --> 01:02:06,320
now, because I am passing
a double in here,

887
01:02:06,960 --> 01:02:11,640
so large Java will do Java,
I will search this method Java with Jack.

888
01:02:11,640 --> 01:02:12,120
Okay.

889
01:02:12,120 --> 01:02:14,800
What is the first parameter
you're sending?

890
01:02:14,840 --> 01:02:15,240
Pages.

891
01:02:15,240 --> 01:02:19,680
So it's not a good match for this method.

892
01:02:20,000 --> 01:02:24,120
So let's try to check the second method.

893
01:02:24,120 --> 01:02:24,880
Okay.

894
01:02:25,440 --> 01:02:27,480
Static binding, hourly binding

895
01:02:27,640 --> 01:02:30,120
method overloading

896
01:02:30,960 --> 01:02:33,080
compile time polymorphism

897
01:02:33,080 --> 01:02:35,160
so there are multiple names for this.

898
01:02:36,720 --> 01:02:40,920
So then Java Jacks, the next method,
the first parameter

899
01:02:41,080 --> 01:02:45,760
you're targeting an integer,
but as other is passing a double.

900
01:02:45,840 --> 01:02:50,400
So it's also not a good match for this
call than Java text.

901
01:02:50,400 --> 01:02:53,640
The next method call.

902
01:02:53,640 --> 01:02:54,840
This one is double.

903
01:02:54,840 --> 01:02:58,080
Okay. If some match, then java text.

904
01:02:58,080 --> 01:02:59,920
The second one is the integer.

905
01:02:59,920 --> 01:03:03,720
Yes. So in here we have a perfect match.

906
01:03:03,720 --> 01:03:06,840
So Java will call this method.

907
01:03:06,920 --> 01:03:08,960
Okay, so this is how Java decides.

908
01:03:09,600 --> 01:03:12,680
It takes all the parameters one by one.

909
01:03:12,680 --> 01:03:16,280
It compares first with the matters
which are present in class.

910
01:03:16,280 --> 01:03:19,320
If we have a perfect match,

911
01:03:20,160 --> 01:03:22,560
then that method will be called.

912
01:03:23,000 --> 01:03:25,880
If we do not have a perfect match,

913
01:03:26,200 --> 01:03:29,640
we will be getting an error.

914
01:03:29,640 --> 01:03:32,040
So Lubo was trying to do this.

915
01:03:32,040 --> 01:03:35,240
So Lubo was trying to do this.

916
01:03:36,160 --> 01:03:38,960
So now Java what Java is trying

917
01:03:38,960 --> 01:03:44,000
Java is checking if there is a method
which takes first argument

918
01:03:44,000 --> 01:03:48,640
as the double, second as the integer part
as the double again.

919
01:03:49,000 --> 01:03:53,040
So Java does not see any method

920
01:03:53,640 --> 01:03:55,920
inside this class

921
01:03:56,480 --> 01:04:00,160
which fulfills these requirements.

922
01:04:00,160 --> 01:04:02,720
So if this is the case, we

923
01:04:03,520 --> 01:04:06,880
Java will give you an error,
your compiler will give you an error.

924
01:04:07,040 --> 01:04:07,400
Okay.

925
01:04:07,400 --> 01:04:12,280
Is it clear, guys?

926
01:04:12,280 --> 01:04:13,000
Okay, so

927
01:04:15,520 --> 01:04:16,120
this is

928
01:04:16,760 --> 01:04:20,360
and then I count Lubo near the break.

929
01:04:20,560 --> 01:04:26,440
Why we put number two first at line 16.

930
01:04:26,440 --> 01:04:29,520
Number Oh, it's just a name
you can write number one.

931
01:04:30,480 --> 01:04:35,440
And number two, not nothing special.

932
01:04:35,440 --> 01:04:38,560
How to call and add a there

933
01:04:39,360 --> 01:04:42,200
You mean how to boss and edit

934
01:04:42,760 --> 01:04:46,520
it saying its same
you declare an area right?

935
01:04:46,520 --> 01:04:50,560
You're
declaring that there are new equal to

936
01:04:51,960 --> 01:04:57,160
ten if the body just like this

937
01:04:57,360 --> 01:04:59,440
will clear an area

938
01:05:02,160 --> 01:05:06,640
after overloading or add
and then you pass the area like this.

939
01:05:06,960 --> 01:05:08,040
Simple.

940
01:05:08,360 --> 01:05:10,600
And now if I execute this code,

941
01:05:10,600 --> 01:05:13,760
which of these two methods will Java take?

942
01:05:13,760 --> 01:05:18,120
If the first parameter is double
and second parameter is flawed

943
01:05:18,120 --> 01:05:21,560
since both take in decimals.

944
01:05:22,560 --> 01:05:26,840
So Mohammad A you remember with the flaws

945
01:05:26,920 --> 01:05:31,080
we boss that if right so

946
01:05:34,880 --> 01:05:37,400
let me define one more matter

947
01:05:38,960 --> 01:05:42,120
and let me make it

948
01:05:43,400 --> 01:05:47,720
make it double.

949
01:05:47,720 --> 01:05:48,680
Not in

950
01:05:54,040 --> 01:05:57,720
and then let me make this one

951
01:05:57,720 --> 01:06:00,440
explode. Yeah

952
01:06:01,640 --> 01:06:04,920
go now

953
01:06:04,920 --> 01:06:08,120
if I boss lastly, if I say

954
01:06:09,440 --> 01:06:11,640
so, if you if you check

955
01:06:13,960 --> 01:06:16,320
Mohammad if you check in here

956
01:06:17,760 --> 01:06:21,440
that okay, I'm not putting any method
and you get on with it.

957
01:06:21,640 --> 01:06:24,120
So let me copy this

958
01:06:25,560 --> 01:06:28,920
and let me pass

959
01:06:30,520 --> 01:06:32,000
by in five in here,

960
01:06:32,000 --> 01:06:37,760
Okay, So

961
01:06:52,920 --> 01:06:56,360
in the Mohammad, if you see

962
01:06:58,200 --> 01:07:05,680
in here, actually
I don't want to go into these details,

963
01:07:05,920 --> 01:07:08,920
but now if you guys have asked me,
so let me show you.

964
01:07:08,920 --> 01:07:10,200
So you see

965
01:07:11,360 --> 01:07:12,720
in here,

966
01:07:13,760 --> 01:07:18,120
the color of this method
has already changed.

967
01:07:18,480 --> 01:07:19,000
Okay.

968
01:07:19,200 --> 01:07:20,480
The color of this method

969
01:07:20,480 --> 01:07:24,360
is already changed because I am passing
two levels, but it is not highlighting

970
01:07:26,720 --> 01:07:27,720
this one.

971
01:07:27,720 --> 01:07:30,240
It is not highlighting this one.

972
01:07:30,240 --> 01:07:53,880
Now, if I do this, so now what I am doing?

973
01:07:53,880 --> 01:07:54,640
Mohammad.

974
01:07:54,840 --> 01:07:56,680
Now I have two choices.

975
01:07:56,680 --> 01:07:57,760
Okay?

976
01:07:57,760 --> 01:08:03,400
I have this float and this double, right?

977
01:08:03,520 --> 01:08:06,840
So remember about the typecasting and now

978
01:08:08,680 --> 01:08:11,080
I have this choice.

979
01:08:11,880 --> 01:08:14,440
So which one is more

980
01:08:14,440 --> 01:08:17,760
perfect match moment this time?

981
01:08:17,760 --> 01:08:22,840
The first one,
because at least one parameter is matching

982
01:08:23,120 --> 01:08:27,240
and this other one,
although it is not matching, but remember,

983
01:08:27,520 --> 01:08:32,360
we can add the up
costing is automatic, right?

984
01:08:32,520 --> 01:08:34,560
The widening is automatic.

985
01:08:34,560 --> 01:08:39,440
So what Java will do
because there is no loss of information,

986
01:08:39,880 --> 01:08:43,920
the other parameter
will automatically be created

987
01:08:44,120 --> 01:08:48,120
if there is no loss of information.

988
01:08:48,360 --> 01:08:51,240
Okay, so Java tries to find

989
01:08:51,440 --> 01:08:54,000
the best match possible.

990
01:08:54,240 --> 01:08:54,600
Okay.

991
01:08:54,600 --> 01:08:57,800
I hope it is clear. Do you guys understand

992
01:08:58,800 --> 01:08:59,880
how Java desires

993
01:08:59,880 --> 01:09:03,560
if there is a
there is very small difference.

994
01:09:03,840 --> 01:09:07,840
So still java
be looking for the best match

995
01:09:08,240 --> 01:09:11,040
and no information loss.

996
01:09:11,920 --> 01:09:16,200
So you can even put an integer
inside the double plus in this case.

997
01:09:16,400 --> 01:09:21,480
Yes, in all those cases, if Java can

998
01:09:23,040 --> 01:09:25,720
if Java can convert it

999
01:09:25,720 --> 01:09:29,520
to the data type without any loss,

1000
01:09:29,960 --> 01:09:34,800
Java will try to call that method
or try to call that method.

1001
01:09:35,440 --> 01:09:39,600
So Let me show you a more clear example.

1002
01:09:40,720 --> 01:09:42,640
Let's say

1003
01:09:43,640 --> 01:09:45,720
so let's say we

1004
01:09:46,880 --> 01:09:52,400
comment this method out.

1005
01:09:52,400 --> 01:10:00,800
Okay?

1006
01:10:00,800 --> 01:10:06,200
So now if you guys see this,
this ADD method

1007
01:10:06,840 --> 01:10:11,560
are if Java can't find the perfect method,
it's the best possible. Yes.

1008
01:10:11,800 --> 01:10:17,120
So now there is no perfect match for this
method.

1009
01:10:17,200 --> 01:10:18,040
Okay.

1010
01:10:18,080 --> 01:10:22,440
And now Java will not try

1011
01:10:22,680 --> 01:10:25,720
to convert the data type because

1012
01:10:27,000 --> 01:10:29,360
integer family.

1013
01:10:29,360 --> 01:10:33,320
They by the shark, the log.

1014
01:10:33,640 --> 01:10:36,840
They are in a different family.

1015
01:10:36,840 --> 01:10:38,760
The long and the flawed.

1016
01:10:38,760 --> 01:10:40,320
They are in a different family.

1017
01:10:40,320 --> 01:10:44,440
Okay, so now the convergent will they
the calling will not happen.

1018
01:10:44,480 --> 01:10:47,880
Okay, but they belong to the same family.

1019
01:10:47,880 --> 01:10:50,120
And if there is

1020
01:10:50,120 --> 01:10:55,040
a slight mismatch
and Java will up to the variable

1021
01:10:55,320 --> 01:10:57,440
and it will try to call that method and

1022
01:10:58,640 --> 01:11:00,480
there are so many variations on there.

1023
01:11:00,480 --> 01:11:02,240
So let let's not go there.

1024
01:11:02,240 --> 01:11:04,120
But it is possible. Yes.

1025
01:11:04,120 --> 01:11:09,120
Sometimes Java will try
will try its best to find a perfect match.

1026
01:11:09,160 --> 01:11:09,680
Okay.

1027
01:11:09,680 --> 01:11:11,680
But you guys don't need
to worry about that.

1028
01:11:13,720 --> 01:11:14,360
I hope.

1029
01:11:14,360 --> 01:11:16,840
I hope you guys are not confused.

1030
01:11:16,840 --> 01:11:21,040
Why are you put two parameters
and you have only one float?

1031
01:11:21,040 --> 01:11:27,280
And I'll just to show the example
just before the example. Yes.

1032
01:11:27,280 --> 01:11:32,640
Let me make your two smaller.

1033
01:11:32,640 --> 01:11:38,840
I hope you guys can you can read the font.

1034
01:11:38,840 --> 01:11:40,880
So let me uncomment this

1035
01:11:46,280 --> 01:11:47,480
like this.

1036
01:11:48,320 --> 01:11:52,240
So what we have done,
we have solved this problem.

1037
01:11:52,240 --> 01:11:57,720
One problem
that if I am doing the exact same thing,

1038
01:11:58,600 --> 01:12:02,560
I don't have to come up with different,
different names.

1039
01:12:02,560 --> 01:12:05,440
I can use the same name

1040
01:12:05,440 --> 01:12:08,000
and if I am passing different

1041
01:12:08,200 --> 01:12:11,600
number of parameters, different type

1042
01:12:12,440 --> 01:12:14,920
or in different sequence,

1043
01:12:14,920 --> 01:12:18,800
Java is allowing me
to have same method name.

1044
01:12:18,800 --> 01:12:21,040
Now there is one more,

1045
01:12:21,040 --> 01:12:24,600
so there is one more issue.

1046
01:12:24,760 --> 01:12:26,960
Can you guys tell me
there is still one more issue

1047
01:12:30,240 --> 01:12:31,800
in this code?

1048
01:12:31,800 --> 01:12:46,040
There is still more
and there is one more issue in here.

1049
01:12:46,040 --> 01:12:53,160
So let me do this, guys.

1050
01:12:53,160 --> 01:12:58,080
If so, let me move this method

1051
01:12:59,760 --> 01:13:00,800
in here.

1052
01:13:00,800 --> 01:13:03,880
So what is the difference
between this method and this method?

1053
01:13:04,360 --> 01:13:10,680
The data type is exactly the same,
but I am passing

1054
01:13:11,520 --> 01:13:13,680
different number of parameters.

1055
01:13:13,680 --> 01:13:15,600
What if I have to add phone numbers? Guys?

1056
01:13:16,800 --> 01:13:17,600
What if I have

1057
01:13:17,600 --> 01:13:25,080
the phone numbers?

1058
01:13:25,080 --> 01:13:27,960
I have to add

1059
01:13:27,960 --> 01:13:29,360
one more parameter.

1060
01:13:29,360 --> 01:13:30,320
Right?

1061
01:13:31,720 --> 01:13:35,800
Is it clear that if I have to add
four numbers, I have to add one more?

1062
01:13:36,000 --> 01:13:48,480
What if I have to add five,
six, seven, eight, nine?

1063
01:13:49,080 --> 01:13:53,160
And what if I don't even know how many
parameters the user will be possible?

1064
01:13:53,240 --> 01:13:55,080
That will pass.

1065
01:13:55,080 --> 01:13:57,600
I again have a problem, right?

1066
01:13:57,600 --> 01:13:59,080
I again have a problem.

1067
01:13:59,080 --> 01:14:01,760
So Andrew,
do you guys understand the problem?

1068
01:14:03,200 --> 01:14:05,440
So data type is same,

1069
01:14:05,440 --> 01:14:09,240
but sometimes I want to add two integers.

1070
01:14:09,240 --> 01:14:13,040
Maybe sometimes I want to add
three integers, sometimes maybe

1071
01:14:13,040 --> 01:14:15,360
I want to add 456.

1072
01:14:15,360 --> 01:14:18,320
I can add
I can add any number of parameters.

1073
01:14:18,320 --> 01:14:19,080
Right?

1074
01:14:19,680 --> 01:14:23,040
So does that mean I have to write

1075
01:14:23,280 --> 01:14:27,360
so many copies of this exact same method

1076
01:14:27,600 --> 01:14:30,800
by just varying the number of parameters?

1077
01:14:30,960 --> 01:14:32,040
Will it be a good approach?

1078
01:14:32,040 --> 01:14:36,560
Guys?

1079
01:14:36,560 --> 01:14:37,840
Is it a good approach?

1080
01:14:39,320 --> 01:14:42,120
So then if we pass an area,

1081
01:14:42,680 --> 01:14:47,880
if we use an editor,
can I boss parameters to that method?

1082
01:14:47,880 --> 01:14:51,200
Or I always have to first create an edit
and then pass

1083
01:14:51,200 --> 01:14:52,200
that very

1084
01:14:54,840 --> 01:14:55,440
problems

1085
01:14:55,440 --> 01:15:02,360
are never ending.

1086
01:15:02,360 --> 01:15:07,080
So I if I create an array,
I the user must pass an edit,

1087
01:15:07,240 --> 01:15:10,840
write user must pass another bar,
but a user does not want the Boston

1088
01:15:10,840 --> 01:15:14,520
area user either
maybe a prince or princess.

1089
01:15:15,720 --> 01:15:17,480
We can create them and.

1090
01:15:17,480 --> 01:15:21,360
Pass it so we don't have to.

1091
01:15:21,360 --> 01:15:23,480
Yes, I like you guys, right?

1092
01:15:24,240 --> 01:15:28,960
I am writing the code reading, the slides,
writing the laws,

1093
01:15:28,960 --> 01:15:32,960
but still princes and prince and princes
that they don't study.

1094
01:15:33,120 --> 01:15:33,880
Right.

1095
01:15:34,480 --> 01:15:38,640
So in that scenario, what we have to do,

1096
01:15:39,360 --> 01:15:42,480
what we can
do, can you do a loop inside the method?

1097
01:15:43,080 --> 01:15:45,720
The loop need to initialize

1098
01:15:45,720 --> 01:15:50,400
the number of data types
and it will air accordingly.

1099
01:15:50,840 --> 01:15:53,880
Yes. Mohammad
We will be doing something like that.

1100
01:15:54,080 --> 01:15:55,680
Okay, so there is something

1101
01:15:56,760 --> 01:15:58,360
special for this scenario.

1102
01:15:58,360 --> 01:16:03,760
It is called
what args variable number of audible max.

1103
01:16:03,760 --> 01:16:06,920
It is called lot args var sharp.

1104
01:16:07,800 --> 01:16:10,800
So what I can do

1105
01:16:11,160 --> 01:16:14,760
instead of writing

1106
01:16:14,760 --> 01:16:16,560
this same method

1107
01:16:16,560 --> 01:16:19,160
and again with the different parameters,

1108
01:16:20,640 --> 01:16:23,640
I can use this.

1109
01:16:24,240 --> 01:16:28,160
I can write the data type

1110
01:16:28,640 --> 01:16:37,400
and then three dots
that can make it bigger.

1111
01:16:37,400 --> 01:16:41,520
And then I can write something like this.

1112
01:16:41,520 --> 01:16:44,280
Okay, so

1113
01:16:45,600 --> 01:16:48,120
let me for

1114
01:16:48,400 --> 01:16:50,840
2 minutes second common to this up.

1115
01:16:50,840 --> 01:16:54,000
So the data type

1116
01:16:54,840 --> 01:16:57,400
then three dots like this

1117
01:16:57,840 --> 01:17:01,760
and then the name of the variable.

1118
01:17:01,960 --> 01:17:06,360
Now this name of the variable

1119
01:17:07,520 --> 01:17:10,240
is it is treated

1120
01:17:11,360 --> 01:17:13,720
as an anti. Okay.

1121
01:17:13,720 --> 01:17:17,200
But when you are calling that method,

1122
01:17:18,360 --> 01:17:21,720
it will be taking parameters

1123
01:17:21,720 --> 01:17:25,400
in, dividual parameters
instead of taking an edit.

1124
01:17:25,400 --> 01:17:30,880
Let me complete this code
so I can have some is equal to zero

1125
01:17:32,760 --> 01:17:35,880
for each

1126
01:17:35,880 --> 01:17:38,840
integer number,

1127
01:17:38,840 --> 01:17:39,320
which

1128
01:17:40,560 --> 01:17:44,360
inside the array.

1129
01:17:44,360 --> 01:17:46,080
Oops, not as out.

1130
01:17:46,080 --> 01:17:48,440
I have to do

1131
01:17:48,440 --> 01:17:53,680
some plus equal to numbers.

1132
01:17:53,680 --> 01:17:54,120
Okay.

1133
01:17:54,120 --> 01:17:57,560
Like this.

1134
01:17:57,560 --> 01:18:00,000
Like this.

1135
01:18:00,000 --> 01:18:04,320
And then I can print out the same.

1136
01:18:05,920 --> 01:18:14,240
So now if I call this method

1137
01:18:15,840 --> 01:18:17,760
with an array,

1138
01:18:17,760 --> 01:18:21,320
as you see,
I have commented out this method

1139
01:18:21,440 --> 01:18:25,440
which was taking the array, but still

1140
01:18:25,680 --> 01:18:30,000
I don't get any added on this method.

1141
01:18:30,560 --> 01:18:33,480
Why? I don't get any

1142
01:18:33,480 --> 01:18:35,920
error on this method because now

1143
01:18:35,920 --> 01:18:38,560
this one single method

1144
01:18:39,320 --> 01:18:43,440
will take care of arrays will take care
if I pass

1145
01:18:43,440 --> 01:18:47,160
one parameter, two, three, four,
five and number of parameters.

1146
01:18:47,760 --> 01:18:51,600
All of this will be taken care of
by this single method.

1147
01:18:51,960 --> 01:18:54,680
Okay, so let's say I am passing.

1148
01:18:54,680 --> 01:18:56,120
Edit no issues.

1149
01:18:56,120 --> 01:18:58,600
I am calling the method with

1150
01:19:01,120 --> 01:19:03,240
with three parameters.

1151
01:19:03,240 --> 01:19:04,200
No issue.

1152
01:19:04,200 --> 01:19:06,760
I am calling it with four parameters.
No issue.

1153
01:19:06,800 --> 01:19:09,160
I am calling it with five parameters
noise two.

1154
01:19:09,160 --> 01:19:11,960
I'm calling it with six parameters.

1155
01:19:11,960 --> 01:19:12,960
No issue.

1156
01:19:12,960 --> 01:19:17,160
I can pass any number of parameters

1157
01:19:18,360 --> 01:19:20,280
that the only restriction

1158
01:19:20,280 --> 01:19:22,560
now is that they should be integer.

1159
01:19:23,600 --> 01:19:26,160
I can pass one parameter
two, three, four, five.

1160
01:19:26,400 --> 01:19:27,840
I can pass an integer.

1161
01:19:27,840 --> 01:19:31,840
Any And this method, this dot dot thing,

1162
01:19:32,280 --> 01:19:35,560
it will take care of all of these matters

1163
01:19:36,560 --> 01:19:38,720
how much code we have reduced.

1164
01:19:38,720 --> 01:19:42,520
Otherwise we will
we would we could be writing so much code.

1165
01:19:42,520 --> 01:19:43,240
Right?

1166
01:19:43,520 --> 01:19:46,720
So this is called var args, right?

1167
01:19:46,960 --> 01:19:53,280
And even though even though
I remove these two methods, even though

1168
01:19:55,440 --> 01:19:58,200
I remove these, these two matters

1169
01:20:00,800 --> 01:20:04,920
integer float integer double double double

1170
01:20:21,520 --> 01:20:24,800
ambiguous method call and double in double

1171
01:20:27,920 --> 01:20:28,800
effort.

1172
01:20:29,680 --> 01:20:31,960
Okay, now remove the.

1173
01:20:31,960 --> 01:20:34,720
So now

1174
01:20:34,920 --> 01:20:39,400
actually for this example,
let me comment out everything.

1175
01:20:39,400 --> 01:20:39,960
Okay.

1176
01:20:41,120 --> 01:20:44,640
So these are taking different parameters.

1177
01:20:45,200 --> 01:20:45,840
Okay.

1178
01:20:46,120 --> 01:20:48,240
So now what I am doing in here,

1179
01:20:49,560 --> 01:20:51,240
if we change the error name,

1180
01:20:51,240 --> 01:20:55,520
we can keep the other other method
or Java will be confused.

1181
01:20:55,680 --> 01:20:58,320
No, these names, this one,
it can be anything.

1182
01:20:58,320 --> 01:21:01,080
It can be same. It can be different.

1183
01:21:01,080 --> 01:21:02,880
Why only the we can use

1184
01:21:02,880 --> 01:21:07,320
no non we can use double string boolean
all the database,

1185
01:21:07,680 --> 01:21:10,440
even the classes
that you guys have been creating.

1186
01:21:10,440 --> 01:21:12,680
We can use those as well.

1187
01:21:12,680 --> 01:21:16,720
So I am passing two parameters

1188
01:21:18,360 --> 01:21:19,400
in here.

1189
01:21:20,200 --> 01:21:22,640
This method will be called I am passing.

1190
01:21:22,640 --> 01:21:25,360
123456 parameters.

1191
01:21:25,560 --> 01:21:27,400
This method will take care.

1192
01:21:27,400 --> 01:21:29,520
I am passing an edit.

1193
01:21:29,520 --> 01:21:33,240
This method will take care,
but all of them must be same.

1194
01:21:33,640 --> 01:21:36,760
Yes of them must be having cinematic type.

1195
01:21:38,200 --> 01:21:38,480
Okay.

1196
01:21:38,480 --> 01:21:40,760
All of them must be having same type.

1197
01:21:40,760 --> 01:21:42,680
So how useful this method is.

1198
01:21:42,680 --> 01:21:46,800
Okay. Yes.

1199
01:21:46,800 --> 01:21:49,440
Universal method. Right. And if I.

1200
01:21:50,120 --> 01:21:52,920
If you let me all of this

1201
01:21:59,360 --> 01:22:02,480
so I get the results for all the matters,
okay?

1202
01:22:02,640 --> 01:22:05,200
All the matters.

1203
01:22:05,200 --> 01:22:10,080
So whenever you guys are not sure
about the

1204
01:22:10,600 --> 01:22:15,280
about the number of parameters
like you don't want to restrict your user

1205
01:22:15,280 --> 01:22:20,040
to pass 1 to 3 and any
or anything like that you use divide out

1206
01:22:21,560 --> 01:22:23,120
when you are taking

1207
01:22:23,120 --> 01:22:25,200
the same data, type as the input

1208
01:22:26,120 --> 01:22:30,360
instead of rewriting the same method again
and again,

1209
01:22:30,480 --> 01:22:33,800
you guys should be using the lot method

1210
01:22:34,160 --> 01:22:38,200
if you have to deal with the areas
as well of the same letter type.

1211
01:22:38,600 --> 01:22:40,520
Instead of writing a separate method

1212
01:22:40,520 --> 01:22:43,760
for the area,
you guys should be writing a lot argument.

1213
01:22:44,480 --> 01:22:49,080
This.

1214
01:22:49,080 --> 01:22:56,880
Okay, so now let me uncomment this.

1215
01:22:56,880 --> 01:23:00,560
I guess there are so many teeny
tiny details

1216
01:23:01,000 --> 01:23:03,680
still with the method overloading

1217
01:23:04,120 --> 01:23:08,320
and how the resolution happens,
but we will not be going through them

1218
01:23:09,720 --> 01:23:11,120
because I see.

1219
01:23:11,120 --> 01:23:15,960
So the only thing that I want
you to understand is that if you have

1220
01:23:16,840 --> 01:23:24,800
if you have let me cut this code, yes,
you guys will definitely be confused.

1221
01:23:24,800 --> 01:23:27,760
So I will just give you a glimpse

1222
01:23:27,760 --> 01:23:30,040
of how you guys can be confused.

1223
01:23:31,000 --> 01:23:33,560
So the only thing that I want to tell you

1224
01:23:33,560 --> 01:23:36,320
is that if I am passing an area

1225
01:23:37,080 --> 01:23:39,360
to a method and if I am writing lot args,

1226
01:23:40,680 --> 01:23:43,680
we cannot these two meters
inside the same class.

1227
01:23:43,960 --> 01:23:44,680
Okay.

1228
01:23:45,120 --> 01:23:47,600
Now java will be confused because

1229
01:23:47,600 --> 01:23:50,400
actually this is treated as an area. Okay.

1230
01:23:50,560 --> 01:23:53,680
So either you can have an edit
or you can have a lot.

1231
01:23:54,240 --> 01:23:56,480
So these two, they are not allowed.

1232
01:23:56,960 --> 01:23:58,920
This is the only thing

1233
01:23:59,080 --> 01:24:00,600
that you guys should not write.

1234
01:24:00,600 --> 01:24:03,760
If you are writing a lot
are don't write the

1235
01:24:04,200 --> 01:24:06,800
same method with same name,

1236
01:24:07,800 --> 01:24:09,840
but with an array

1237
01:24:09,840 --> 01:24:12,600
being passed parameter in the dies.

1238
01:24:13,440 --> 01:24:15,280
The only restriction

1239
01:24:16,600 --> 01:24:19,040
because Java can not decide

1240
01:24:19,040 --> 01:24:23,880
if you are passing an A Java can not
Java can not decide

1241
01:24:24,160 --> 01:24:27,400
if it should call this method
or this method

1242
01:24:28,880 --> 01:24:30,960
or let's say it is not defined in Java.

1243
01:24:31,000 --> 01:24:31,600
Okay.

1244
01:24:32,480 --> 01:24:36,160
There could be a possibility
that if we are explicitly passing

1245
01:24:36,160 --> 01:24:39,600
an error, this method should be called
Yes, this is a possibility.

1246
01:24:39,600 --> 01:24:42,320
It could have been done,
but they have not done it.

1247
01:24:42,560 --> 01:24:44,400
So it is not allowed. Okay.

1248
01:24:44,400 --> 01:24:46,120
It is not true

1249
01:24:47,480 --> 01:24:49,640
and it gets confused easier than me.

1250
01:24:49,840 --> 01:24:53,120
You highlighted a block of code
and commented out with a click.

1251
01:24:53,120 --> 01:24:54,960
How did you do that?

1252
01:24:54,960 --> 01:24:58,080
So you can select a piece of code

1253
01:24:59,200 --> 01:25:01,120
and you can press control,

1254
01:25:01,120 --> 01:25:04,040
shape, forward, slash to comment.

1255
01:25:04,040 --> 01:25:12,440
And I'm to score.

1256
01:25:12,440 --> 01:25:13,800
Okay, let's

1257
01:25:15,120 --> 01:25:18,520
now there are more things

1258
01:25:19,440 --> 01:25:21,720
that can cause

1259
01:25:21,720 --> 01:25:23,160
a problem.

1260
01:25:23,160 --> 01:25:25,920
Okay, So if you guys notice and

1261
01:25:26,640 --> 01:25:30,080
I just want to tell you, but please.

1262
01:25:30,120 --> 01:25:33,360
Yes, don't try to think about those.

1263
01:25:34,080 --> 01:25:38,400
So we are getting an error on this line.

1264
01:25:38,760 --> 01:25:39,200
Right.

1265
01:25:39,960 --> 01:25:40,200
Okay.

1266
01:25:40,200 --> 01:25:43,960
So only
for those who want to go into in deeper.

1267
01:25:44,320 --> 01:25:46,880
So I have a method

1268
01:25:46,880 --> 01:25:50,760
that accepts the two integers.

1269
01:25:50,760 --> 01:25:52,200
I am passing two integers.

1270
01:25:52,200 --> 01:25:57,840
Can you guys
tell me why I'm getting an error?

1271
01:25:57,840 --> 01:26:11,280
So all those intellectual, big, brainy

1272
01:26:11,600 --> 01:26:15,720
students, there are two same methods

1273
01:26:15,720 --> 01:26:18,840
with same parameters.

1274
01:26:18,880 --> 01:26:21,480
Maybe it is confused in error

1275
01:26:21,480 --> 01:26:26,640
and integers.

1276
01:26:26,640 --> 01:26:31,720
So you guys are saying that
Java is confused about this ad

1277
01:26:33,240 --> 01:26:41,120
and this lot.

1278
01:26:41,120 --> 01:26:44,400
Okay, let me next let's try to

1279
01:26:46,040 --> 01:26:46,920
comment this out.

1280
01:26:46,920 --> 01:26:51,840
Okay?

1281
01:26:51,840 --> 01:26:53,280
Okay. So now

1282
01:26:54,840 --> 01:26:57,080
the error is gone.

1283
01:26:57,720 --> 01:26:59,640
And if

1284
01:27:02,560 --> 01:27:04,560
I comment this out.

1285
01:27:05,680 --> 01:27:07,720
So if I uncomment dark

1286
01:27:07,720 --> 01:27:09,840
and convert to this out.

1287
01:27:10,920 --> 01:27:12,720
So now

1288
01:27:16,920 --> 01:27:19,160
so I have commented out

1289
01:27:19,200 --> 01:27:24,400
this lot of okay, okay.

1290
01:27:24,960 --> 01:27:28,080
We have the same method directory at the

1291
01:27:28,480 --> 01:27:30,160
now we are

1292
01:27:31,160 --> 01:27:31,800
okay.

1293
01:27:33,120 --> 01:27:35,560
So if

1294
01:27:35,560 --> 01:27:37,120
this is one more rule.

1295
01:27:37,120 --> 01:27:37,720
Okay. Yeah.

1296
01:27:37,720 --> 01:27:40,480
It's not that difficult, but

1297
01:27:40,800 --> 01:27:41,880
it's good to know.

1298
01:27:41,880 --> 01:27:47,240
So now I have a method
that is taking two parameters

1299
01:27:47,680 --> 01:27:50,000
and I have a method

1300
01:27:50,560 --> 01:27:53,160
that is taking variable arguments.

1301
01:27:53,600 --> 01:27:56,320
You just want to think they are brain
get bored.

1302
01:27:57,320 --> 01:28:11,760
So can you guys tell me
which method will be called?

1303
01:28:11,760 --> 01:28:16,520
So if you see Java,
Java has highlighted this method.

1304
01:28:16,760 --> 01:28:21,080
Okay, this method Java is not calling
these matter, this method.

1305
01:28:21,240 --> 01:28:23,520
Aldo, Aldo.

1306
01:28:23,520 --> 01:28:25,840
So, so this is where the priority comes.

1307
01:28:25,840 --> 01:28:30,040
If I remove this method.

1308
01:28:30,040 --> 01:28:31,560
If I remove this method.

1309
01:28:31,560 --> 01:28:36,600
Okay,
Now there is this method which can take

1310
01:28:36,600 --> 01:28:40,920
the variable number of arguments
right in here I am passing to

1311
01:28:43,080 --> 01:28:43,960
in here

1312
01:28:43,960 --> 01:28:47,920
Now there is no method which can take

1313
01:28:49,240 --> 01:28:51,640
the exact same two integers.

1314
01:28:51,800 --> 01:28:56,280
Okay, so now what java is saying by saying

1315
01:28:56,480 --> 01:28:59,360
ambiguous method, call both

1316
01:29:00,600 --> 01:29:03,000
and into double and add a

1317
01:29:03,000 --> 01:29:06,600
double int in method is a match.

1318
01:29:06,960 --> 01:29:07,720
Okay.

1319
01:29:07,840 --> 01:29:10,120
So what java is trying to do

1320
01:29:11,640 --> 01:29:15,600
java is trying.

1321
01:29:15,600 --> 01:29:17,840
So this method

1322
01:29:19,640 --> 01:29:21,120
and this method

1323
01:29:21,120 --> 01:29:24,480
only the sequence is different.

1324
01:29:24,480 --> 01:29:26,600
Okay, so only the sequence is different.

1325
01:29:26,800 --> 01:29:28,800
So now we have two choices.

1326
01:29:28,800 --> 01:29:31,720
Either
I can convert this integer to a double

1327
01:29:32,760 --> 01:29:35,200
and I can call this, or

1328
01:29:35,680 --> 01:29:38,760
I can convert this
first integer to a double.

1329
01:29:38,760 --> 01:29:42,000
And I can call this method, right?

1330
01:29:42,200 --> 01:29:44,560
Do you guys understand this?

1331
01:29:44,560 --> 01:29:49,240
But don't we have over doing job
as in those same double for adding?

1332
01:29:49,360 --> 01:29:51,400
So yes, yes. This is my point.

1333
01:29:51,440 --> 01:29:53,520
This is my point. So my point is

1334
01:29:54,720 --> 01:29:57,600
even if we have lot args.

1335
01:29:58,760 --> 01:29:59,160
Okay.

1336
01:29:59,160 --> 01:30:02,400
So my point is,
even if we have lot of that

1337
01:30:02,400 --> 01:30:06,520
can handle this
this call it can handle this call.

1338
01:30:06,520 --> 01:30:07,200
Right.

1339
01:30:07,680 --> 01:30:10,120
Do you guys understand this
that these two parameters,

1340
01:30:10,120 --> 01:30:12,080
they can be handled by this method, right?

1341
01:30:12,080 --> 01:30:14,960
If I remove

1342
01:30:14,960 --> 01:30:18,720
in this method and if I remove this method

1343
01:30:21,240 --> 01:30:23,000
now this one will be called.

1344
01:30:23,000 --> 01:30:23,640
Okay.

1345
01:30:23,640 --> 01:30:26,880
So now if I say tandem,
this method will be called.

1346
01:30:27,440 --> 01:30:29,080
Yes, it can handle it.

1347
01:30:29,080 --> 01:30:31,520
But Java has priorities.

1348
01:30:31,720 --> 01:30:33,280
Okay, Java has binaries.

1349
01:30:33,280 --> 01:30:34,920
What are the priorities?

1350
01:30:34,920 --> 01:30:39,560
If there is a simple method

1351
01:30:40,400 --> 01:30:42,920
which does not take variable arguments,

1352
01:30:42,920 --> 01:30:45,480
which takes simple plain parameters,

1353
01:30:46,080 --> 01:30:49,520
even though Java has to

1354
01:30:49,520 --> 01:30:52,800
up, even though Java has to do
the convergence,

1355
01:30:52,920 --> 01:30:58,160
the last thing
it will try to call from those matters.

1356
01:30:58,440 --> 01:31:01,560
Okay.

1357
01:31:01,560 --> 01:31:04,080
So that's why what I will recommend

1358
01:31:05,760 --> 01:31:07,200
what I will recommend

1359
01:31:07,200 --> 01:31:10,400
if you guys are dealing with

1360
01:31:10,920 --> 01:31:14,400
if you guys are doing the exact same thing

1361
01:31:14,400 --> 01:31:18,360
and the parameters are same, never, ever

1362
01:31:18,360 --> 01:31:22,400
create again methods like this one
or this one or this one.

1363
01:31:22,400 --> 01:31:25,320
Okay, so this method, it

1364
01:31:26,160 --> 01:31:30,440
yes, it can handle everything,
but it has the lowest priority.

1365
01:31:31,520 --> 01:31:34,960
Let them simplify this,
even though this method

1366
01:31:34,960 --> 01:31:39,840
can handle everything,
but it has the lowest priority.

1367
01:31:40,320 --> 01:31:42,960
Okay, but is it clear?

1368
01:31:43,360 --> 01:31:46,920
Is there anyone who is confused

1369
01:31:54,920 --> 01:31:59,120
because you use a lot of memory
because of the priority?

1370
01:31:59,600 --> 01:32:02,680
Because of the priority
but what arguments it can handle?

1371
01:32:02,680 --> 01:32:03,360
Same better type?

1372
01:32:03,360 --> 01:32:09,480
Yes, same data type, same letter.

1373
01:32:09,480 --> 01:32:12,360
So when to use it, always try to use it.

1374
01:32:13,520 --> 01:32:15,840
Never ever look at methods.

1375
01:32:15,840 --> 01:32:20,280
Always try to use it.

1376
01:32:20,280 --> 01:32:23,560
The confusion of Java confuses me
why Java is confused.

1377
01:32:23,560 --> 01:32:26,080
So the simpler
because the higher the priority.

1378
01:32:26,640 --> 01:32:28,680
I Yes, you guys can say that.

1379
01:32:29,240 --> 01:32:30,560
Yes, you guys can say that.

1380
01:32:30,560 --> 01:32:32,040
Or this very simple.

1381
01:32:33,000 --> 01:32:34,880
Yes, this method can handle a

1382
01:32:34,880 --> 01:32:41,560
lot of parameters,
but the priority is lowest. Yes.

1383
01:32:41,560 --> 01:32:45,000
Before we talk Java, they are two numbers.

1384
01:32:45,000 --> 01:32:48,240
So it's automatically going to use that
in our targets.

1385
01:32:48,240 --> 01:32:51,120
Infinity in Java will choose
only when there is an option.

1386
01:32:51,120 --> 01:32:55,040
Yes, not perfect, but to pass to doubles.

1387
01:32:55,040 --> 01:32:58,120
What are the method
should be passing double? Yes.

1388
01:32:58,120 --> 01:33:00,320
It cannot handle double.

1389
01:33:00,320 --> 01:33:02,120
Be careful about your method creation.

1390
01:33:02,120 --> 01:33:05,160
Make it simple
just to make it clear for myself

1391
01:33:05,280 --> 01:33:10,200
what we lost of information
while taking the low priority.

1392
01:33:10,200 --> 01:33:11,240
There is no no.

1393
01:33:11,240 --> 01:33:14,240
Not a loss of information

1394
01:33:14,240 --> 01:33:18,200
now is lazy.

1395
01:33:18,200 --> 01:33:26,360
Java has so many rules.

1396
01:33:26,360 --> 01:33:29,760
So tell me guys, here's what I do.

1397
01:33:29,760 --> 01:33:32,440
I was planning to not.

1398
01:33:32,440 --> 01:33:34,440
I was planning to not sure

1399
01:33:35,800 --> 01:33:37,760
this call

1400
01:33:37,760 --> 01:33:41,280
of double
converting to in this convergence of

1401
01:33:42,240 --> 01:33:42,960
double

1402
01:33:43,160 --> 01:33:45,920
doubles this everything but everything.

1403
01:33:45,960 --> 01:33:49,600
I was not planning to show you
it to you guys.

1404
01:33:50,280 --> 01:33:52,520
So what do you guys say?

1405
01:33:52,520 --> 01:33:56,680
Was it a good idea
or you guys are more confused now?

1406
01:33:56,680 --> 01:34:00,840
Or is it better to know about new things?

1407
01:34:00,840 --> 01:34:03,040
Should I Sure would.

1408
01:34:03,040 --> 01:34:04,120
To know

1409
01:34:10,760 --> 01:34:13,160
all via.

1410
01:34:13,160 --> 01:34:22,720
So maybe I will try to show some advanced
things that always you confused

1411
01:34:22,920 --> 01:34:27,960
and then ask us later after we are so
so I told you the disclaimer pass right?

1412
01:34:27,960 --> 01:34:32,360
I told you don't don't focus on
what what I am trying

1413
01:34:32,560 --> 01:34:36,960
what I'm going to show you now.

1414
01:34:36,960 --> 01:34:40,080
So when I say something,
those who do not want

1415
01:34:40,080 --> 01:34:45,880
to go in deep into Java,
you guys can just be on break

1416
01:34:45,880 --> 01:34:50,000
or start downloading this stuff.

1417
01:34:50,000 --> 01:34:53,600
So let me write it in here.

1418
01:34:53,600 --> 01:34:56,400
Can handle any

1419
01:34:57,000 --> 01:35:00,160
number of parameters and

1420
01:35:01,120 --> 01:35:02,560
ADD is

1421
01:35:03,800 --> 01:35:06,360
Bert has the lowest

1422
01:35:08,040 --> 01:35:14,400
choreography.

1423
01:35:14,400 --> 01:35:20,200
Yeah, whatever you are teaching us,
I cannot ignore.

1424
01:35:20,200 --> 01:35:25,160
Okay, then I will not show you.

1425
01:35:25,160 --> 01:35:27,480
Can we do the same with the double? Yes.

1426
01:35:27,680 --> 01:35:31,360
So do you guys want me to do
create the method with double in here

1427
01:35:31,360 --> 01:35:38,240
or create a new class?

1428
01:35:38,240 --> 01:35:38,840
New place.

1429
01:35:38,840 --> 01:35:39,520
And let's.

1430
01:35:39,520 --> 01:35:42,240
Let's do it after the break. Okay.

1431
01:35:42,240 --> 01:35:46,440
Let's do it after the break.

1432
01:35:46,440 --> 01:35:48,800
This little confused
for the last two months,

1433
01:35:50,160 --> 01:35:53,280
if we are very global

1434
01:35:57,360 --> 01:35:58,000
all, by the way

1435
01:35:58,000 --> 01:36:00,800
before
you guys don't want to break you guy

1436
01:36:01,040 --> 01:36:05,000
you guys have been using a method
so many times,

1437
01:36:05,000 --> 01:36:08,760
almost all the classes
and that method was overloaded.

1438
01:36:09,000 --> 01:36:12,880
Can you guys tell me
the name of that method

1439
01:36:15,520 --> 01:36:16,240
from the day?

1440
01:36:16,240 --> 01:36:24,840
First, you guys have been using
an overloaded method heavily.

1441
01:36:24,840 --> 01:36:27,840
No, it's so simple. Give

1442
01:36:30,000 --> 01:36:32,640
this out a lot of fact, Alex.

1443
01:36:33,200 --> 01:36:38,400
You guys see in printout
I can pass two parameters.

1444
01:36:38,400 --> 01:36:42,320
Three, I pass Booleans double,
then page are the strings.

1445
01:36:42,800 --> 01:36:46,320
It never complained
how easy your life was.

1446
01:36:47,160 --> 01:36:50,840
So this is the benefit of overloading
you guys see this

1447
01:36:50,960 --> 01:36:55,400
this out This println
method is an overloaded method.

1448
01:36:55,400 --> 01:36:57,000
Let me show you
the implementation of this.

1449
01:36:57,000 --> 01:37:01,360
So if I hold on my control
and if I click on the superintendent,

1450
01:37:02,600 --> 01:37:07,200
you will see what intel and method of it
double play parental and method

1451
01:37:07,200 --> 01:37:10,120
with dot x parental method of string,

1452
01:37:10,840 --> 01:37:14,040
parental and method with object.

1453
01:37:14,040 --> 01:37:16,640
And if you guys full of parental end
with flawed

1454
01:37:17,160 --> 01:37:20,680
beyond with long and char

1455
01:37:21,360 --> 01:37:23,800
all those overloaded method,

1456
01:37:24,480 --> 01:37:28,040
it made your life a whole lot
a whole lot easier.

1457
01:37:28,040 --> 01:37:31,480
And you guys never even realized
this, right?

1458
01:37:32,000 --> 01:37:35,560
So this is the benefit of overloading
a real, real life example.

1459
01:37:36,640 --> 01:37:38,840
So all those parental methods,

1460
01:37:38,840 --> 01:37:41,600
all those matters

1461
01:37:42,640 --> 01:37:44,800
in the same exact method,

1462
01:37:44,800 --> 01:37:47,720
doing the same exact thing, but

1463
01:37:47,880 --> 01:37:50,320
with the different type of parameter

1464
01:37:51,480 --> 01:37:54,040
it was always with this

1465
01:37:54,040 --> 01:37:56,120
I have a new appreciation for.

1466
01:37:56,560 --> 01:37:59,160
So can you show me one more time

1467
01:37:59,160 --> 01:38:03,200
how to comment about one block of board?

1468
01:38:03,200 --> 01:38:07,080
You have to tell us
that the first class and yes,

1469
01:38:07,320 --> 01:38:10,560
and you guys have understood it perfectly.

1470
01:38:10,560 --> 01:38:12,280
What is an overload, right?

1471
01:38:12,280 --> 01:38:19,520
If I tell you in the first class, no.

1472
01:38:19,520 --> 01:38:22,240
So there are so many things
that I will tell you later,

1473
01:38:22,240 --> 01:38:28,920
but you guys are using them now.

1474
01:38:28,920 --> 01:38:31,280
It's actually a

1475
01:38:33,280 --> 01:38:35,040
what do we say?

1476
01:38:35,280 --> 01:38:37,400
There is a special word for

1477
01:38:37,440 --> 01:38:40,440
that when we have to criticize someone

1478
01:38:40,440 --> 01:38:44,760
and we would tell the exact same
thing in a different world.

1479
01:38:45,920 --> 01:38:48,200
You just slept with my mind.

1480
01:38:48,200 --> 01:38:49,120
What do we call it?

1481
01:38:49,120 --> 01:38:49,680
Satan.

1482
01:38:49,680 --> 01:38:52,440
Although a 10th

1483
01:38:53,040 --> 01:39:00,960
when we have to do tons.

1484
01:39:00,960 --> 01:39:03,160
So, Farhad, you must have hired in

1485
01:39:04,240 --> 01:39:07,200
in in order to do dramas.

1486
01:39:07,520 --> 01:39:09,560
In the dramas,

1487
01:39:09,880 --> 01:39:11,680
sarcasm. Here we go.

1488
01:39:11,680 --> 01:39:15,360
So bolus school, a big cable,

1489
01:39:15,400 --> 01:39:20,640
but so in, in, in, in Asia there
is this something very common

1490
01:39:20,960 --> 01:39:23,240
that if the mother in law

1491
01:39:23,880 --> 01:39:26,400
she has to tell something to her

1492
01:39:27,040 --> 01:39:31,000
the device of our son,
she she yells at someone else.

1493
01:39:31,000 --> 01:39:34,200
And but she's actually saying to that
to go

1494
01:39:34,320 --> 01:39:39,840
that way.

1495
01:39:39,840 --> 01:39:45,600
All right, perfect.

1496
01:39:45,600 --> 01:39:47,920
Do you guys also have this thing
Iranians do

1497
01:39:49,800 --> 01:39:54,000
we have that provided in Farsi to.

1498
01:39:54,000 --> 01:39:55,840
We don't do that with the husbands.

1499
01:39:55,840 --> 01:39:58,440
We do that
with the husbands also. All right.

1500
01:40:00,000 --> 01:40:04,360
Not only in Asia. Yes.

1501
01:40:04,360 --> 01:40:09,000
It's an Arabic word.

1502
01:40:09,000 --> 01:40:11,080
Yeah, I out you have the word.

1503
01:40:11,080 --> 01:40:15,840
And what I did had we settled the door,
so we all should listen.

1504
01:40:16,080 --> 01:40:18,720
All right, All. And there's also. Good.

1505
01:40:19,400 --> 01:40:27,840
So let's have a break for people to 12.

1506
01:40:27,840 --> 01:40:33,000
And so just to be clear, we should use
this simple overload method instead of

1507
01:40:34,040 --> 01:40:36,600
unless it is necessity.

1508
01:40:36,600 --> 01:40:38,880
No, you should always go with what water

1509
01:40:40,200 --> 01:40:43,200
first.

1510
01:40:43,200 --> 01:40:46,680
And if you are really doing
something different,

1511
01:40:46,680 --> 01:40:54,280
then you should pass the parameters.

1512
01:40:54,280 --> 01:40:56,560
Then you show me on how to comment on it.

1513
01:40:56,560 --> 01:40:59,040
Okay,
so this is how we select the piece of code

1514
01:40:59,760 --> 01:41:02,760
and then we put we press control,

1515
01:41:02,760 --> 01:41:06,000
shift and forward flash to commit it out.

1516
01:41:06,000 --> 01:41:09,560
And again,
control shift forward slash to uncomment

1517
01:41:09,640 --> 01:41:12,680
this, I just need to plan something.

1518
01:41:12,680 --> 01:41:14,760
I think 15 minutes are enough.

1519
01:41:14,760 --> 01:41:20,000
Or maybe let, let me check
if you guys can solve some tasks

1520
01:41:20,760 --> 01:41:22,920
so maybe we can have a longer break.

1521
01:41:23,600 --> 01:41:25,240
Oh, yes, you guys can.

1522
01:41:26,440 --> 01:41:28,800
Most of this in the

1523
01:41:28,800 --> 01:41:31,640
course announcement center

1524
01:41:32,200 --> 01:41:34,360
so that you guys can play as well

1525
01:41:36,120 --> 01:41:44,040
for we'll

1526
01:41:44,080 --> 01:41:53,640
these are simple tasks.

1527
01:41:53,640 --> 01:41:54,000
Okay.

1528
01:41:54,000 --> 01:42:14,560
So let's have a longer break
and I will push the code as well.

1529
01:42:14,560 --> 01:42:26,320
Can you guys check
if you have got the update or not?

1530
01:42:26,320 --> 01:42:32,440
It looks for you simple for all the work.

1531
01:42:32,440 --> 01:42:37,880
So let's have a break here 1220 and try
to solve as many questions as possible.

1532
01:42:37,880 --> 01:42:41,480
Guys, what is the area of box
you guys can google it.

1533
01:42:41,480 --> 01:42:44,120
It's very simple length multiplied by it.

1534
01:42:44,120 --> 01:42:47,280
If it is a rectangle, length
multiplied by length,

1535
01:42:47,280 --> 01:42:51,240
if it is a square.

1536
01:42:51,240 --> 01:42:53,880
Yes. Guys try to do these tasks.

1537
01:42:53,880 --> 01:42:56,000
Yes. Google memo at the class.

1538
01:42:56,000 --> 01:42:58,680
We have some question
and helping with great help, please.

1539
01:42:58,680 --> 01:42:59,360
Oh, yes.

1540
01:42:59,360 --> 01:43:03,160
Remind me at the end of the class I will
show you some tricks about your cup.

1541
01:43:04,160 --> 01:43:05,720
Short break.

1542
01:43:05,760 --> 01:43:07,560
I use a short break.

1543
01:43:07,560 --> 01:43:13,440
35 minutes.

1544
01:43:13,440 --> 01:43:24,320
And do you guys have any questions
before we go on the break?

1545
01:43:24,320 --> 01:43:34,720
All right,
partners, 12:00, is it what, ARG

1546
01:43:34,760 --> 01:43:37,840
or what are law on a r

1547
01:43:40,840 --> 01:43:41,920
a lot better.

1548
01:43:41,920 --> 01:43:45,640
So guys
try to have 10 to 15 for your break.

1549
01:43:46,160 --> 01:43:46,920
Okay.

1550
01:43:46,960 --> 01:43:50,480
And after that, guys
can try to solve these tasks.

1551
01:43:51,440 --> 01:43:53,960
If you try it first, believe me,

1552
01:43:53,960 --> 01:43:57,800
it will make a lot more sense
when I will be solving these tasks.

1553
01:43:57,800 --> 01:44:00,920
So I want you to try
at least go through the requirements

1554
01:44:00,920 --> 01:44:05,120
and try to have that imaginary solution
in your mind so that you can understand

1555
01:44:05,120 --> 01:44:16,360
it better when I am solving it.

1556
01:44:16,360 --> 01:44:19,440
All right, guys,
reminding me about the recording of my by

1557
01:44:28,240 --> 01:44:28,680
device

1558
01:44:28,680 --> 01:44:41,400
back.

1559
01:44:41,400 --> 01:44:47,720
Do you guys have any questions
before we start the homework? No,

1560
01:44:49,080 --> 01:44:51,080
we only two from. Me too.

1561
01:44:51,080 --> 01:45:02,240
It's fine.

1562
01:45:02,240 --> 01:45:05,320
That's great. So?

1563
01:45:05,320 --> 01:45:28,400
So let me close these files.

1564
01:45:28,400 --> 01:45:40,320
Yes, we are.

1565
01:45:40,320 --> 01:45:43,440
Yes, I was feeling a little cold,
so that's why

1566
01:45:45,400 --> 01:45:46,800
I took scored.

1567
01:45:46,800 --> 01:45:50,880
So can you guys send me
the requirements for the task?

1568
01:45:50,880 --> 01:45:53,520
One? What?

1569
01:45:54,360 --> 01:45:56,840
Is having some kind of issues?

1570
01:45:56,880 --> 01:46:01,480
No, these are

1571
01:46:01,480 --> 01:46:09,720
just tasks.

1572
01:46:09,720 --> 01:46:13,560
Create a class in which create a method
that will calculate

1573
01:46:13,640 --> 01:46:20,680
the area.

1574
01:46:20,680 --> 01:46:21,840
Word task.

1575
01:46:21,840 --> 01:46:24,560
Easy or hard

1576
01:46:43,920 --> 01:46:55,680
are. Yes.

1577
01:46:55,800 --> 01:46:57,320
So same name method.

1578
01:46:57,320 --> 01:47:02,720
You guys created different names
for these methods, but

1579
01:47:16,040 --> 01:47:17,160
I named it. Yes.

1580
01:47:17,160 --> 01:47:18,760
For for the volume one.

1581
01:47:18,760 --> 01:47:21,080
It makes sense to make volume
for the other tools.

1582
01:47:21,120 --> 01:47:23,800
It should be area

1583
01:47:24,120 --> 01:47:25,760
right? It should be the area

1584
01:47:28,360 --> 01:47:30,680
of the public.

1585
01:47:30,680 --> 01:47:36,960
Lloyd,

1586
01:47:36,960 --> 01:47:38,680
Calculate

1587
01:47:44,880 --> 01:47:45,720
calculate area.

1588
01:47:45,720 --> 01:47:51,480
Right.

1589
01:47:51,480 --> 01:47:56,520
And I named it one oh, I thought it was
the same volume for all of them.

1590
01:47:56,520 --> 01:47:59,000
Yes, you can have volume for all of them.

1591
01:47:59,120 --> 01:48:03,240
Give me if you want to write in here

1592
01:48:03,280 --> 01:48:05,720
we are using

1593
01:48:07,200 --> 01:48:13,600
length, double

1594
01:48:14,720 --> 01:48:21,680
or. All right, guys.

1595
01:48:21,720 --> 01:48:26,160
So how can I check from the length

1596
01:48:26,440 --> 01:48:30,400
and the weight
if it is a rectangle or square,

1597
01:48:31,440 --> 01:48:33,680
because the formulas they are,

1598
01:48:33,680 --> 01:48:35,760
what are the different

1599
01:48:44,760 --> 01:48:46,640
I used?

1600
01:48:46,640 --> 01:48:50,560
What are the
Because it will multiply in all matters

1601
01:48:51,080 --> 01:48:55,280
Multiply in all matters.

1602
01:48:55,280 --> 01:49:01,160
If they are equal, then rectangle.

1603
01:49:01,160 --> 01:49:04,160
And if they are not equal,
then what will be the area?

1604
01:49:04,160 --> 01:49:11,360
So what will be the formula for the area?

1605
01:49:11,360 --> 01:49:12,760
It will still be.

1606
01:49:12,760 --> 01:49:19,040
I can still use the land to it right?

1607
01:49:19,040 --> 01:49:22,200
It does not matter
if it's a rectangle or a square.

1608
01:49:23,920 --> 01:49:24,840
I can still

1609
01:49:24,840 --> 01:49:28,200
use length, length, length
and to be tried.

1610
01:49:28,800 --> 01:49:31,480
Do you guys understand this point

1611
01:49:31,520 --> 01:49:37,320
or I can not do that, but

1612
01:49:42,120 --> 01:49:45,440
so if it's a square

1613
01:49:45,440 --> 01:49:48,120
block, then think about this as a square.

1614
01:49:48,120 --> 01:49:50,720
So land into which the area will be

1615
01:49:52,000 --> 01:49:54,000
length in width, right?

1616
01:49:54,840 --> 01:50:00,840
If it's a rectangle in which
the length and width they are not same,

1617
01:50:00,840 --> 01:50:04,520
we can still multiply the length length

1618
01:50:04,520 --> 01:50:08,280
in the weight to get the area right.

1619
01:50:08,280 --> 01:50:12,120
So I don't have to come up
with different method name

1620
01:50:13,240 --> 01:50:16,560
because I intentionally
I am still doing the same thing

1621
01:50:17,000 --> 01:50:22,080
right. But

1622
01:50:30,520 --> 01:50:31,520
how many of you

1623
01:50:31,520 --> 01:50:33,640
for this example like this

1624
01:50:38,200 --> 01:50:43,120
just in this task

1625
01:50:43,120 --> 01:50:46,200
remind me high school

1626
01:50:49,760 --> 01:50:55,320
just so create
one class in which create a method

1627
01:50:56,520 --> 01:50:57,480
that will calculate

1628
01:50:57,480 --> 01:51:00,480
the area volume in the case of rectangle,
Square and box.

1629
01:51:00,480 --> 01:51:04,680
Okay, so one of the approaches is
is can be to create

1630
01:51:04,680 --> 01:51:07,920
a separate method to calculate

1631
01:51:08,400 --> 01:51:09,360
volume.

1632
01:51:09,480 --> 01:51:10,080
Okay.

1633
01:51:10,280 --> 01:51:13,760
Because for volume
how many parameters we need,

1634
01:51:14,520 --> 01:51:16,880
we need a third parameter

1635
01:51:21,600 --> 01:51:22,440
height as well.

1636
01:51:22,440 --> 01:51:23,000
Okay.

1637
01:51:23,400 --> 01:51:28,640
So, so what we can do is

1638
01:51:30,480 --> 01:51:31,920
we can pass this third

1639
01:51:31,920 --> 01:51:34,000
parameter in here and we can put

1640
01:51:35,760 --> 01:51:39,960
and if condition in here,
but it will not make sense because,

1641
01:51:40,400 --> 01:51:44,200
well, you are calculating the area
in one method and calculating the volume.

1642
01:51:44,200 --> 01:51:47,160
Another method I did.
What is that Correct.

1643
01:51:47,160 --> 01:51:50,840
Because volume of a box is lent in to

1644
01:51:50,840 --> 01:51:54,760
it and height.

1645
01:51:54,760 --> 01:51:57,960
So you created only one method.

1646
01:51:57,960 --> 01:52:04,800
MUHAMMAD Can you show me the code?

1647
01:52:04,800 --> 01:52:05,080
Okay,

1648
01:52:06,240 --> 01:52:07,920
yes, creating one method.

1649
01:52:07,920 --> 01:52:13,400
And if you are planning to use the same
method, let's say maybe you can call this

1650
01:52:13,400 --> 01:52:18,720
method, calculate area
or volume inside the same method.

1651
01:52:18,720 --> 01:52:20,360
You can name it 80 or volume.

1652
01:52:20,360 --> 01:52:23,320
Yes, we go and like like the AMA is right.

1653
01:52:23,880 --> 01:52:25,680
And then you guess, yes, you can.

1654
01:52:25,680 --> 01:52:29,560
You guys can create
if it's a perfect approach,

1655
01:52:29,720 --> 01:52:31,760
no issues that

1656
01:52:33,120 --> 01:52:33,960
I think it's

1657
01:52:33,960 --> 01:52:40,680
also good.

1658
01:52:40,680 --> 01:52:44,160
Yes, yes, yes, it's good.

1659
01:52:44,600 --> 01:52:46,920
No issues with that as well.

1660
01:52:46,920 --> 01:52:48,760
It should also work fine.

1661
01:52:48,760 --> 01:52:52,880
Okay. So

1662
01:53:01,960 --> 01:53:03,600
so the point of this exercise

1663
01:53:03,600 --> 01:53:07,920
was either create a name that conveys

1664
01:53:08,880 --> 01:53:12,880
all the information,
like what the method is doing, all of it,

1665
01:53:13,680 --> 01:53:19,080
or don't always try to use overloading
if it is not making sense.

1666
01:53:19,080 --> 01:53:21,840
Please don't try to use
overload overloading. Okay.

1667
01:53:21,840 --> 01:53:26,080
Only use overloading
when you are essentially

1668
01:53:26,080 --> 01:53:29,560
doing the same thing again and again
in different methods again.

1669
01:53:30,000 --> 01:53:33,480
So if you are calculating volume
and in one place you are calculating

1670
01:53:33,480 --> 01:53:37,520
idea, it's
not a good practice to call this method.

1671
01:53:37,520 --> 01:53:42,360
Always maybe calculate area
or maybe always call it calculate volume

1672
01:53:42,360 --> 01:53:44,360
and then put everything inside that method

1673
01:53:44,680 --> 01:53:47,160
so it will be an over use of overloading.

1674
01:53:47,160 --> 01:53:52,520
So you always have to come up with the
perfect portion of creating these methods.

1675
01:53:52,840 --> 01:53:57,080
Does it make sense right. Oh,

1676
01:53:58,360 --> 01:53:58,840
okay.

1677
01:54:01,200 --> 01:54:04,080
So in there, smile

1678
01:54:06,000 --> 01:54:15,280
in here.

1679
01:54:15,280 --> 01:54:15,600
Okay.

1680
01:54:20,080 --> 01:54:22,000
It's the task.

1681
01:54:22,000 --> 01:54:25,560
One task

1682
01:54:33,720 --> 01:54:36,320
one or that area

1683
01:54:36,360 --> 01:54:40,720
I pass.

1684
01:54:40,720 --> 01:54:44,080
So you guys see
I am passing integers in here,

1685
01:54:45,240 --> 01:54:49,600
but actual parameters low doubles.

1686
01:54:49,600 --> 01:54:51,000
So what is going on? Why?

1687
01:54:51,000 --> 01:54:55,520
I am not getting any better.

1688
01:54:55,520 --> 01:54:58,320
What is happening behind the scenes?

1689
01:54:58,320 --> 01:54:59,800
Gasping is working. Right?

1690
01:54:59,800 --> 01:55:05,040
So Java if there is so if I had one method

1691
01:55:05,040 --> 01:55:09,240
in which I had both the parameters
as integers.

1692
01:55:10,320 --> 01:55:12,040
What? What do you guys think?

1693
01:55:12,040 --> 01:55:14,080
Which method java choose

1694
01:55:15,320 --> 01:55:16,280
would have to

1695
01:55:19,720 --> 01:55:21,640
the integer one or the double one?

1696
01:55:21,640 --> 01:55:25,000
So let's say if I

1697
01:55:26,520 --> 01:55:28,680
if I create a method,

1698
01:55:29,040 --> 01:55:31,440
but instead if I pass

1699
01:55:37,360 --> 01:55:41,960
integers in here.

1700
01:55:41,960 --> 01:55:44,760
So now you see this one has changed,

1701
01:55:45,080 --> 01:55:50,640
the intensity has changed this color
and now Java is using this integer one.

1702
01:55:50,640 --> 01:55:54,160
So if it if it has a perfect match,

1703
01:55:55,360 --> 01:55:57,560
the priority will be given to that method.

1704
01:55:58,120 --> 01:56:03,560
If no Java will try to find something
as close as possible

1705
01:56:03,560 --> 01:56:07,360
without losing any information,
if that is possible.

1706
01:56:08,920 --> 01:56:10,560
Okay.

1707
01:56:10,560 --> 01:56:14,640
Is it clear, guys?

1708
01:56:14,640 --> 01:56:17,960
But if one of them double, then double.

1709
01:56:18,120 --> 01:56:21,120
You mean if you
if we put the double in here

1710
01:56:21,840 --> 01:56:24,120
like this.

1711
01:56:24,120 --> 01:56:28,000
So still, which method is, is,
is more close to the parameters,

1712
01:56:28,640 --> 01:56:30,240
this one or this one.

1713
01:56:30,240 --> 01:56:32,640
Which one is more close to the parameters.

1714
01:56:32,640 --> 01:56:34,640
That we are passing the first one. Right.

1715
01:56:35,280 --> 01:56:39,200
So standard Java will prefer this method.

1716
01:56:39,240 --> 01:56:39,560
Okay.

1717
01:56:39,560 --> 01:56:43,040
Because at least one
parameter is exactly matching.

1718
01:56:43,040 --> 01:56:43,360
Okay.

1719
01:56:43,360 --> 01:56:46,440
Still at least one
parameter is exactly matching.

1720
01:56:47,360 --> 01:56:52,040
So is it clear now?

1721
01:56:52,040 --> 01:56:54,480
Okay, so that's how it works.

1722
01:56:54,480 --> 01:56:58,960
So what you guys can do always,
if you are writing integers and doubles,

1723
01:56:59,040 --> 01:57:02,560
you can simply ignore the integers once
because doubles

1724
01:57:03,080 --> 01:57:05,560
can handle integers as well.

1725
01:57:06,840 --> 01:57:11,520
Okay guys,

1726
01:57:11,840 --> 01:57:15,760
that if you have to write pool methods,
one for integer and one for double,

1727
01:57:16,200 --> 01:57:19,560
always go with double because double
can handle the integer as well.

1728
01:57:20,080 --> 01:57:23,320
Right.

1729
01:57:23,320 --> 01:57:23,720
Okay.

1730
01:57:23,720 --> 01:57:31,080
Let's turn now to not make it
more complicated, but All right.

1731
01:57:31,440 --> 01:57:34,120
So there is one more thing, guys.

1732
01:57:34,200 --> 01:57:37,200
There is still one more issue that

1733
01:57:38,160 --> 01:57:40,960
even if I have integers or doubles, right.

1734
01:57:41,400 --> 01:57:43,800
But still
I am doing simply addition, right?

1735
01:57:44,720 --> 01:57:48,000
There must be a way to remove
that duplication as well.

1736
01:57:48,000 --> 01:57:49,720
What do you guys think?

1737
01:57:50,160 --> 01:57:56,880
So if, if I am doing this,

1738
01:57:57,520 --> 01:58:02,400
I am still not doing that much
different things in these two matters.

1739
01:58:02,400 --> 01:58:04,440
Right?

1740
01:58:04,440 --> 01:58:09,000
Or maybe even if I create a method
that is taking a bite or a long.

1741
01:58:09,040 --> 01:58:10,440
So let's say, for example,

1742
01:58:11,480 --> 01:58:14,560
if I change

1743
01:58:14,560 --> 01:58:17,400
it to a long

1744
01:58:17,400 --> 01:58:19,840
like this or one double silly,

1745
01:58:19,840 --> 01:58:22,120
there is a little bit change of parameters

1746
01:58:22,920 --> 01:58:25,480
So still I am doing the exact same thing

1747
01:58:25,640 --> 01:58:28,920
just because I have a primitive data
types.

1748
01:58:29,440 --> 01:58:32,960
Should I be writing
at least like 4 to 5 meters

1749
01:58:32,960 --> 01:58:35,040
to handle those

1750
01:58:36,000 --> 01:58:38,320
those primitives, those that are types?

1751
01:58:39,040 --> 01:58:41,640
No. There is one more thing

1752
01:58:42,000 --> 01:58:45,960
that is called the concept of genetics,

1753
01:58:45,960 --> 01:58:49,880
but that is something that happens
if we use genetics.

1754
01:58:50,240 --> 01:58:52,800
We don't have to worry at all.

1755
01:58:53,120 --> 01:58:58,680
If we are always dealing with the numbers,
if we are always dealing with numbers,

1756
01:58:59,160 --> 01:59:02,560
that number can be a by ten page
long short

1757
01:59:04,080 --> 01:59:05,880
double float.

1758
01:59:05,880 --> 01:59:11,440
I can handle all of these
six data types with a single method

1759
01:59:11,440 --> 01:59:15,720
with the help of genetics,
but that is something advanced.

1760
01:59:15,720 --> 01:59:19,040
If we had some time, I will show.

1761
01:59:19,040 --> 01:59:20,520
I will show you that.

1762
01:59:20,520 --> 01:59:25,360
But if we do not have time, we will not
be discussing that because that something

1763
01:59:25,800 --> 01:59:30,440
that those who want to have a look,
you guys can look on the Internet.

1764
01:59:30,440 --> 01:59:31,880
It's called genetics.

1765
01:59:32,880 --> 01:59:35,520
It's not mandatory, by the way.

1766
01:59:35,520 --> 01:59:38,240
It's not required for this course.

1767
01:59:38,240 --> 01:59:39,680
So we will be keeping things simple.

1768
01:59:39,680 --> 01:59:43,000
So there is still a way to remove
that reputation as a

1769
01:59:45,400 --> 01:59:46,520
we will start a petition

1770
01:59:46,520 --> 01:59:48,840
to get rid of invader

1771
01:59:49,640 --> 01:59:51,120
like perfect.

1772
01:59:51,760 --> 01:59:55,400
So and this was before task one.

1773
01:59:55,400 --> 01:59:58,160
This is one of the ways to solve it.

1774
01:59:58,160 --> 02:00:00,760
If you guys have created only one method

1775
02:00:00,760 --> 02:00:05,640
to solve all of these two tasks,
I would say create two matters

1776
02:00:05,640 --> 02:00:10,400
because in one we are calculating volume
and one we are calculating

1777
02:00:11,320 --> 02:00:14,280
Can you make smaller

1778
02:00:14,760 --> 02:00:16,800
to see the cause of task?

1779
02:00:16,800 --> 02:00:19,800
One You want me to show the complete code

1780
02:00:19,800 --> 02:00:25,800
like this?

1781
02:00:25,800 --> 02:00:27,640
Okay, perfect.

1782
02:00:27,880 --> 02:00:30,200
So let me know once you guys are done

1783
02:00:30,880 --> 02:00:35,720
writing this code
or and I can move to the next task

1784
02:01:03,120 --> 02:01:03,960
as the code.

1785
02:01:03,960 --> 02:01:07,400
You give us an example
in which the data types will be boolean.

1786
02:01:07,400 --> 02:01:09,760
Yes, we can have that.

1787
02:01:09,760 --> 02:01:13,120
So remind me
after we are done with these tasks,

1788
02:01:13,400 --> 02:01:16,920
I will do that.

1789
02:01:16,920 --> 02:01:17,520
Okay.

1790
02:01:17,640 --> 02:01:20,840
So in one case
I am passing a rectangle near relentless.

1791
02:01:20,840 --> 02:01:22,200
Then they will take 15.

1792
02:01:22,200 --> 02:01:24,720
In one case I am passing a square

1793
02:01:26,760 --> 02:01:29,360
in which to go to length
and they are same.

1794
02:01:29,360 --> 02:01:31,560
So now.

1795
02:01:31,560 --> 02:01:34,200
Now I will always be insecure
in this matter.

1796
02:01:34,560 --> 02:01:36,000
Yeah. So let me close this.

1797
02:01:36,000 --> 02:01:57,840
Can I close these files?

1798
02:01:57,840 --> 02:02:01,080
The task tool was

1799
02:02:01,080 --> 02:02:03,920
gaining a certain many tasks to

1800
02:02:15,280 --> 02:02:17,320
create a class named programing.

1801
02:02:18,200 --> 02:02:50,200
Okay.

1802
02:02:50,200 --> 02:02:55,560
Their area is equal to a multiplied
by two box

1803
02:02:55,960 --> 02:03:01,160
to and to with two hard.

1804
02:03:01,160 --> 02:03:04,280
And the the last the second line.

1805
02:03:04,280 --> 02:03:05,800
It's not an area.

1806
02:03:05,800 --> 02:03:09,840
I think it's the parameter formula.

1807
02:03:09,840 --> 02:03:10,680
No, no, no.

1808
02:03:10,680 --> 02:03:15,240
This is not the formula. So

1809
02:03:17,880 --> 02:03:19,920
idea of

1810
02:03:21,240 --> 02:03:22,920
rectangle

1811
02:03:23,160 --> 02:03:25,920
it's length into width

1812
02:03:27,040 --> 02:03:34,200
area of square.

1813
02:03:34,200 --> 02:03:37,760
So it's a square
which means I am multiplying length

1814
02:03:37,880 --> 02:03:41,040
with length or width with, with.

1815
02:03:41,040 --> 02:03:43,440
But because they are all same.

1816
02:03:44,200 --> 02:03:47,040
Because they are all same,
so it does not matter.

1817
02:03:47,480 --> 02:03:55,680
Okay. So.

1818
02:03:55,680 --> 02:04:02,080
Okay, there's

1819
02:04:02,120 --> 02:04:04,320
this surface area box

1820
02:04:07,400 --> 02:04:08,680
now, right?

1821
02:04:08,800 --> 02:04:11,680
To create a class name for programing.

1822
02:04:11,720 --> 02:04:16,360
Why creating an object of the class
if nothing is possible to it,

1823
02:04:16,920 --> 02:04:20,560
then the message I love programing

1824
02:04:20,560 --> 02:04:23,840
languages should be printed. Hmm.

1825
02:04:24,240 --> 02:04:28,920
So can you guys tell me, should I create
a method or should I create a constructor?

1826
02:04:28,920 --> 02:04:32,680
Because it is saying
when creating the object of that class

1827
02:04:32,680 --> 02:04:35,280
if nothing is passed,

1828
02:04:35,280 --> 02:04:38,200
no one may suggest that
that was the point, right?

1829
02:04:38,200 --> 02:04:39,400
You guys should focus.

1830
02:04:39,400 --> 02:04:43,200
So in here it is clearly clearly mentioned
when while creating

1831
02:04:43,200 --> 02:04:46,240
an object of the class,
if nothing is passed.

1832
02:04:46,360 --> 02:04:47,200
Right.

1833
02:04:47,320 --> 02:04:52,400
So when we are creating the object,
we are actually calling the constructors,

1834
02:04:52,440 --> 02:04:54,640
not the methods. Right?

1835
02:04:54,640 --> 02:05:00,120
So we show the door
because I wanted to have this practice

1836
02:05:00,480 --> 02:05:03,560
that the constructors
can also be overloaded.

1837
02:05:03,560 --> 02:05:08,160
Okay, so how can I create the constructor?

1838
02:05:08,160 --> 02:05:13,880
It's the same as the name of the class.

1839
02:05:13,880 --> 02:05:17,040
All right then parentheses and then.

1840
02:05:17,520 --> 02:05:18,120
Right.

1841
02:05:18,320 --> 02:05:22,600
You guys can put public as well
if you like.

1842
02:05:22,600 --> 02:05:26,240
So if nothing is passed
then I love programing.

1843
02:05:26,240 --> 02:05:28,920
Languages should be put into it.

1844
02:05:28,920 --> 02:05:31,680
Okay.

1845
02:05:31,680 --> 02:05:46,200
How many of you created methods
instead of constructors? The

1846
02:05:50,280 --> 02:05:51,040
the. That's

1847
02:05:51,040 --> 02:05:55,800
how we fail in exams because in exams
there is this slight variation

1848
02:05:55,800 --> 02:05:59,360
that we always ignore
and we get something different

1849
02:05:59,360 --> 02:06:00,280
in the

1850
02:06:05,000 --> 02:06:06,360
reward message.

1851
02:06:06,360 --> 02:06:06,880
Message?

1852
02:06:06,880 --> 02:06:08,040
You want an

1853
02:06:10,440 --> 02:06:12,760
So do you mean
you are also not overloading it

1854
02:06:13,160 --> 02:06:14,880
even if you have created the method

1855
02:06:14,880 --> 02:06:17,520
so you are still not loading
your overloading your tried

1856
02:06:19,120 --> 02:06:21,240
you are
you are creating a different matter name.

1857
02:06:21,480 --> 02:06:25,360
So then that is also not correct.

1858
02:06:25,360 --> 02:06:27,360
The same way I did

1859
02:06:30,120 --> 02:06:31,800
I methods with the same name.

1860
02:06:31,800 --> 02:06:35,000
So it overloads depends on the parameters.

1861
02:06:35,400 --> 02:06:38,280
So for the constructors as well,
the the overload

1862
02:06:38,280 --> 02:06:40,840
depends on the parameters.

1863
02:06:41,280 --> 02:06:43,360
At least I overloaded for the second.

1864
02:06:43,360 --> 02:06:48,600
Plus if something is passed to it,
then the in the place of programing

1865
02:06:48,600 --> 02:06:52,800
languages, the value of the variable
should be printed.

1866
02:06:52,800 --> 02:06:54,480
Right? So

1867
02:06:56,560 --> 02:06:57,440
this time

1868
02:06:57,440 --> 02:07:00,440
I will be having an event here
but in value.

1869
02:07:00,640 --> 02:07:01,840
Right.

1870
02:07:01,880 --> 02:07:06,080
And instead of programing languages,

1871
02:07:06,080 --> 02:07:11,280
the value of this variable
should be printed like this.

1872
02:07:11,280 --> 02:07:11,920
Right?

1873
02:07:12,000 --> 02:07:17,160
So then that was the task is it
must be a constructor in this case, yes,

1874
02:07:17,160 --> 02:07:21,160
because it is mentioned
while creating an object of the class

1875
02:07:21,160 --> 02:07:23,360
if nothing is passed or it

1876
02:07:24,920 --> 02:07:27,520
could mean that means I am saying

1877
02:07:27,720 --> 02:07:29,880
about the constructor

1878
02:07:34,600 --> 02:07:37,080
either clear

1879
02:07:37,080 --> 02:07:41,200
because in real life guys,
you will never be getting these

1880
02:07:41,200 --> 02:07:45,440
exact same things in the requirements
that they will not be saying.

1881
02:07:45,440 --> 02:07:48,240
Create a constructive
and positive parameters to it.

1882
02:07:49,560 --> 02:07:51,600
Whenever it is talking about.

1883
02:07:51,600 --> 02:07:56,400
Always create constructor
the there is and other conditions

1884
02:07:56,800 --> 02:07:59,040
I show which condition

1885
02:08:02,040 --> 02:08:06,840
if we pass java.

1886
02:08:06,840 --> 02:08:09,320
So I love programing language
should be printed.

1887
02:08:09,320 --> 02:08:13,400
If some if some string is possible,
then in place of programing

1888
02:08:13,400 --> 02:08:16,160
language, the value variable
should be printed example.

1889
02:08:16,680 --> 02:08:19,360
If we pass Java then I love java should be

1890
02:08:19,360 --> 02:08:22,720
printed. Okay.

1891
02:08:22,920 --> 02:08:27,000
So it is just an example
when you will be calling this method.

1892
02:08:27,000 --> 02:08:31,920
So this time let me clear the main method
inside the same class.

1893
02:08:31,920 --> 02:08:34,200
Let me see new

1894
02:08:36,000 --> 02:08:37,400
programing.

1895
02:08:37,760 --> 02:08:38,360
Right?

1896
02:08:38,520 --> 02:08:42,360
So if I write this piece of code,
what will I see on my console

1897
02:08:42,360 --> 02:08:46,120
guys, this

1898
02:08:53,920 --> 02:08:55,200
class is out

1899
02:08:55,200 --> 02:09:07,920
right?

1900
02:09:07,920 --> 02:09:13,240
I love programing languages
and if I pass something

1901
02:09:13,800 --> 02:09:22,320
I am creating the object.

1902
02:09:22,320 --> 02:09:23,880
Then I will see.

1903
02:09:23,880 --> 02:09:35,760
I love Java.

1904
02:09:35,760 --> 02:09:37,120
I love Java.

1905
02:09:37,120 --> 02:09:38,760
Is it clear

1906
02:09:39,120 --> 02:09:41,280
that we know once you guys are done

1907
02:09:41,280 --> 02:09:43,960
diving this code

1908
02:09:45,000 --> 02:09:45,240
there?

1909
02:09:45,240 --> 02:09:47,640
So all it was the person

1910
02:09:54,200 --> 02:09:54,880
and I closed

1911
02:09:54,880 --> 02:10:02,400
this file.

1912
02:10:02,400 --> 02:10:02,800
Let's

1913
02:10:06,560 --> 02:10:07,600
subtract

1914
02:10:10,520 --> 02:10:11,680
like that by task.

1915
02:10:11,680 --> 02:10:13,000
Yes. My limit.

1916
02:10:13,000 --> 02:10:15,200
How how, how is your wrapper going?

1917
02:10:16,800 --> 02:10:18,320
Is enjoying it

1918
02:10:29,560 --> 02:10:30,640
can be more repulsive.

1919
02:10:30,640 --> 02:10:32,280
Yes, there are more wrappers.

1920
02:10:32,280 --> 02:10:36,600
So there are around
I guess 100 or 150 more ripples.

1921
02:10:36,600 --> 02:10:39,440
So don't worry about that
struck me in one.

1922
02:10:39,440 --> 02:10:40,680
They're killing me.

1923
02:10:40,680 --> 02:10:46,080
Woman
You can pull starting the sport channel,

1924
02:10:46,080 --> 02:10:49,320
moving slow,
but removal, I mean, there's great

1925
02:10:50,560 --> 02:10:52,320
one. You are doing it.

1926
02:10:52,320 --> 02:10:53,560
It's easy.

1927
02:10:53,560 --> 02:10:56,760
But when it comes going to do it
and complicated.

1928
02:10:57,720 --> 02:11:00,360
Is it okay to load up a little
after doing it?

1929
02:11:00,480 --> 02:11:03,640
Yes, it's also fine,
but you should always be doing

1930
02:11:03,640 --> 02:11:12,120
and you should always do it.

1931
02:11:12,120 --> 02:11:16,000
So I will be releasing the wrappers
related to these concepts

1932
02:11:16,280 --> 02:11:17,840
after tomorrow's class. Okay.

1933
02:11:17,840 --> 02:11:19,800
So there are wrappers related to this.

1934
02:11:19,800 --> 02:11:22,040
No, don't worry about that.

1935
02:11:22,040 --> 02:11:24,240
So let's do the task three

1936
02:11:32,400 --> 02:11:32,720
already.

1937
02:11:32,720 --> 02:11:36,480
They send me the requirement for task
three

1938
02:11:40,040 --> 02:11:41,080
task that it will do it

1939
02:11:41,080 --> 02:11:47,240
in class, create a class with the starting
MATLAB, pass three overloaded

1940
02:11:47,240 --> 02:11:52,120
phones, then call each overloaded method
with specific argument of set.

1941
02:11:52,480 --> 02:11:55,800
You guys have already done it,
but let me add the boolean

1942
02:11:55,800 --> 02:11:59,600
or other data types to it
so that you guys can understand it

1943
02:12:03,640 --> 02:12:06,120
necessary for saying for example,

1944
02:12:06,160 --> 02:12:09,160
the next to that

1945
02:12:19,160 --> 02:12:22,880
are let's create a static method

1946
02:12:25,520 --> 02:12:28,560
and think wide

1947
02:12:31,320 --> 02:12:33,480
method and let's pass

1948
02:12:34,960 --> 02:12:36,440
a boolean in here.

1949
02:12:36,440 --> 02:12:58,120
Okay, I'm

1950
02:12:58,120 --> 02:13:05,680
getting an error guys,

1951
02:13:05,680 --> 02:13:09,560
because I cannot overload a method

1952
02:13:10,320 --> 02:13:12,720
with the same name

1953
02:13:12,720 --> 02:13:16,480
and same data type, same that our type.

1954
02:13:16,480 --> 02:13:26,280
So the stereotype must be different.

1955
02:13:26,280 --> 02:13:28,800
Then I can write the same method again.

1956
02:13:30,080 --> 02:13:30,920
Oops.

1957
02:13:31,480 --> 02:13:36,520
Maybe this time I can pause the double

1958
02:13:39,280 --> 02:13:45,240
and press three.

1959
02:13:45,240 --> 02:13:48,840
I It was maybe this time

1960
02:13:55,080 --> 02:13:57,160
and add a

1961
02:14:00,440 --> 02:14:02,680
numbers of things.

1962
02:14:02,960 --> 02:14:05,800
Yeah, I can basically pass any I type,

1963
02:14:06,600 --> 02:14:09,840
I can box any time

1964
02:14:14,640 --> 02:14:15,480
and I can do

1965
02:14:15,480 --> 02:14:21,240
one more thing guys.

1966
02:14:21,240 --> 02:14:22,520
Do you guys know?

1967
02:14:22,520 --> 02:14:25,160
Or you can also pass
glasses and objects in here.

1968
02:14:25,160 --> 02:14:37,560
So for example, you,
the class that we have just created

1969
02:14:37,560 --> 02:14:41,880
this programing class,
I can also pass the objects of that class

1970
02:14:44,040 --> 02:14:48,560
like this.

1971
02:14:48,560 --> 02:14:58,640
Then we can have some variations as well.

1972
02:14:58,640 --> 02:15:03,240
And these one and then

1973
02:15:05,640 --> 02:15:07,240
boolean

1974
02:15:07,640 --> 02:15:10,040
bool. Okay, I can also do there.

1975
02:15:10,040 --> 02:15:13,840
So basically any combination
of data types.

1976
02:15:13,840 --> 02:15:14,160
Okay.

1977
02:15:14,160 --> 02:15:17,640
Any of barometers.

1978
02:15:17,640 --> 02:15:20,080
Okay. And any,

1979
02:15:20,560 --> 02:15:22,600
any parameter inside that method.

1980
02:15:22,600 --> 02:15:45,320
So now if I have task
to be tested in here,

1981
02:15:45,320 --> 02:15:48,840
if I say task for the DOT

1982
02:15:49,080 --> 02:15:52,320
method and if I passed a false,

1983
02:15:53,440 --> 02:15:55,680
can you guys tell me
which method will be called?

1984
02:15:56,080 --> 02:16:00,920
So let me make this class
a little smaller.

1985
02:16:00,920 --> 02:16:02,880
But then

1986
02:16:03,760 --> 02:16:04,920
we like get the line

1987
02:16:04,920 --> 02:16:08,120
to three of the excursion before

1988
02:16:08,480 --> 02:16:11,240
and then four

1989
02:16:11,240 --> 02:16:12,520
and then six.

1990
02:16:12,520 --> 02:16:14,680
So tell me the number

1991
02:16:16,880 --> 02:16:18,080
on my console.

1992
02:16:18,080 --> 02:16:20,520
I will be getting one right.

1993
02:16:21,240 --> 02:16:25,680
Easy peasy.

1994
02:16:25,680 --> 02:16:26,720
All right, get one.

1995
02:16:26,720 --> 02:16:30,480
Because Java is now calling this matter.

1996
02:16:30,480 --> 02:16:33,800
Is there anyone who don't understand
why this method

1997
02:16:33,920 --> 02:16:42,000
being called?

1998
02:16:42,000 --> 02:16:46,520
Okay, index, but that's perfectly fine.

1999
02:16:46,520 --> 02:16:48,000
So now

2000
02:16:49,440 --> 02:16:50,280
what is the

2001
02:16:50,280 --> 02:16:54,440
type of this value
that I am passing in here?

2002
02:16:54,480 --> 02:16:57,240
What is the data type?

2003
02:16:58,200 --> 02:17:03,480
What do we call it?

2004
02:17:03,480 --> 02:17:07,280
It's a boolean, right?

2005
02:17:07,280 --> 02:17:09,040
It's a boolean, right?

2006
02:17:09,040 --> 02:17:13,360
So boolean can have bool values
true and false, right?

2007
02:17:14,080 --> 02:17:16,000
It can have two or worlds.

2008
02:17:16,000 --> 02:17:18,000
So this class

2009
02:17:19,080 --> 02:17:21,880
now Java will decide

2010
02:17:23,480 --> 02:17:25,720
which method to call.

2011
02:17:25,720 --> 02:17:29,360
So lower
java do Java will go inside this class.

2012
02:17:29,720 --> 02:17:30,440
Right.

2013
02:17:30,920 --> 02:17:33,440
And when Java goes inside this class,

2014
02:17:33,440 --> 02:17:36,720
Java is multiple multiple matters.

2015
02:17:36,720 --> 02:17:41,920
All having the same name, all having
the name method method method method.

2016
02:17:42,160 --> 02:17:44,240
So now in java is confused.

2017
02:17:44,240 --> 02:17:46,840
So java is okay.

2018
02:17:46,840 --> 02:17:51,440
There are so many matters and all of them
they are called methods.

2019
02:17:51,440 --> 02:17:53,720
So what do I do now then? Java checks.

2020
02:17:54,240 --> 02:17:57,920
What is the value
that that is passing to this method?

2021
02:17:58,120 --> 02:18:00,240
So Java sees that.

2022
02:18:00,240 --> 02:18:04,080
So that is passing a boolean value, right?

2023
02:18:04,080 --> 02:18:05,840
A boolean value.

2024
02:18:05,840 --> 02:18:10,880
So Java will say, okay,
let me find let me try to find a method

2025
02:18:12,040 --> 02:18:15,720
maybe which is expecting a boolean value.

2026
02:18:15,840 --> 02:18:18,520
So Java will again
go in here double digit.

2027
02:18:18,800 --> 02:18:21,120
I will say
okay, let's try to get this fast method.

2028
02:18:21,520 --> 02:18:23,840
Does it take a boolean value?

2029
02:18:23,840 --> 02:18:29,040
Yes, it is taking a boolean value
as the result of passing a boolean value.

2030
02:18:29,040 --> 02:18:31,160
So this is a good match.

2031
02:18:31,160 --> 02:18:33,000
Perfect match, right?

2032
02:18:33,000 --> 02:18:33,680
Deep dive.

2033
02:18:33,680 --> 02:18:35,920
That category is passing
I have that method.

2034
02:18:36,160 --> 02:18:38,480
So let's call this method.

2035
02:18:38,760 --> 02:18:42,760
And that's why we see this one in here.

2036
02:18:43,680 --> 02:18:45,480
Please explain line 23.

2037
02:18:45,480 --> 02:18:49,600
The parameter is an integer array,
but the string.

2038
02:18:51,280 --> 02:19:00,280
Oh yes, it's just a typo,
so let me make it

2039
02:19:01,400 --> 02:19:02,320
a string.

2040
02:19:02,320 --> 02:19:02,880
Adding

2041
02:19:04,960 --> 02:19:05,760
space.

2042
02:19:06,120 --> 02:19:08,600
Okay, so job.

2043
02:19:08,600 --> 02:19:10,560
I will call this matter.

2044
02:19:10,560 --> 02:19:16,760
And if I fast like.

2045
02:19:16,960 --> 02:19:22,760
So now you guys will tell me
if I boss, let's say of me be

2046
02:19:28,480 --> 02:19:30,120
a long value in here.

2047
02:19:30,120 --> 02:19:30,560
Okay?

2048
02:19:30,560 --> 02:19:34,320
If I was maybe ten and then I'll.

2049
02:19:34,320 --> 02:19:36,680
So which method will be called?

2050
02:19:36,680 --> 02:19:40,960
So these arguments
I have a method that is taking double

2051
02:19:41,600 --> 02:19:45,720
spin boolean string programing integer.

2052
02:19:45,720 --> 02:19:47,000
And will you

2053
02:19:55,320 --> 02:19:57,600
to the 1919

2054
02:19:58,400 --> 02:20:00,200
third line

2055
02:20:02,640 --> 02:20:03,520
the word.

2056
02:20:03,520 --> 02:20:09,360
Can you guys tell me I am not
I do not have

2057
02:20:10,480 --> 02:20:13,280
a method which exactly takes the

2058
02:20:16,480 --> 02:20:19,080
the the the the long value.

2059
02:20:19,080 --> 02:20:21,920
So so why,
why are you always calling this double.

2060
02:20:22,200 --> 02:20:24,960
My java is calling this type

2061
02:20:26,160 --> 02:20:27,040
costing.

2062
02:20:27,040 --> 02:20:29,520
So can you guys tell me

2063
02:20:29,520 --> 02:20:31,840
which data type is bigger.

2064
02:20:31,840 --> 02:20:34,800
The long or the double
which one is bigger.

2065
02:20:34,800 --> 02:20:41,760
And the double is a bigger data
type than long,

2066
02:20:42,200 --> 02:20:45,360
which means I can see, if li convert

2067
02:20:45,360 --> 02:20:48,000
a longer value to double.

2068
02:20:48,480 --> 02:20:50,720
And that's what the Java is doing.

2069
02:20:51,240 --> 02:20:53,600
Java is saying, okay, good.

2070
02:20:53,600 --> 02:20:58,720
I know there is not a perfect match
inside this class, but you know what?

2071
02:20:59,240 --> 02:21:02,240
I can use this double and I will not.

2072
02:21:02,360 --> 02:21:04,400
We will not be losing any information.

2073
02:21:05,520 --> 02:21:07,000
So yes, we do not have a

2074
02:21:07,000 --> 02:21:12,360
perfect match, but we have something
that can be very close

2075
02:21:12,520 --> 02:21:18,480
in which we can still use this method
if I do the convert again.

2076
02:21:18,480 --> 02:21:20,280
So I will do the conversion.

2077
02:21:20,280 --> 02:21:23,960
We will not lose any information
and we will be able to use this method

2078
02:21:24,160 --> 02:21:25,800
digitized, clear.

2079
02:21:25,800 --> 02:21:29,200
So it's the same case
when we pass integer n double.

2080
02:21:29,680 --> 02:21:32,520
If there is a method that takes integer

2081
02:21:33,080 --> 02:21:35,560
java, we'll use that if no

2082
02:21:36,120 --> 02:21:38,560
and if we have a method

2083
02:21:38,560 --> 02:21:42,800
that takes double,
then it will use the double line.

2084
02:21:42,800 --> 02:21:43,280
Okay.

2085
02:21:44,880 --> 02:21:45,480
All right.

2086
02:21:45,480 --> 02:21:46,760
Perfect.

2087
02:21:46,760 --> 02:21:51,000
Is there anyone who is confused
when I am passing along?

2088
02:21:51,000 --> 02:22:01,960
Y why double is being called?

2089
02:22:01,960 --> 02:22:04,760
So if I pass a float,
which method will be called

2090
02:22:15,400 --> 02:22:16,400
tail three?

2091
02:22:16,400 --> 02:22:18,520
So do you guys understand this now?

2092
02:22:18,520 --> 02:22:22,440
Why I always stress to why I always

2093
02:22:22,720 --> 02:22:26,480
ask you to use doubles

2094
02:22:27,240 --> 02:22:29,240
Dart double is very powerful.

2095
02:22:29,640 --> 02:22:33,000
It's the biggest delta type in numbers.

2096
02:22:33,040 --> 02:22:37,680
Double can handle long
double can handle floor integer.

2097
02:22:38,920 --> 02:22:41,880
It can handle by almost everything.

2098
02:22:41,880 --> 02:22:44,760
Okay without any problem.
So that's why double.

2099
02:22:44,760 --> 02:22:48,920
I always recommend double.

2100
02:22:48,920 --> 02:22:49,440
Okay.

2101
02:22:49,440 --> 02:22:52,320
So now

2102
02:22:55,600 --> 02:23:00,280
it is also more common.

2103
02:23:00,280 --> 02:23:05,280
And if I if I create an object

2104
02:23:05,280 --> 02:23:08,840
of programing programing new

2105
02:23:10,160 --> 02:23:17,280
programing, and if not, let me make it

2106
02:23:17,560 --> 02:23:19,880
so because the constructor is not

2107
02:23:20,280 --> 02:23:23,400
public and I am trying to use it

2108
02:23:23,560 --> 02:23:27,360
in different package,
that's why I get this error.

2109
02:23:27,600 --> 02:23:28,040
Okay.

2110
02:23:28,040 --> 02:23:30,760
Is it poor guys why I am getting this
error on this programing?

2111
02:23:32,080 --> 02:23:33,400
It's because of D

2112
02:23:34,400 --> 02:23:35,840
access.

2113
02:23:35,840 --> 02:23:38,800
Modify it if I assure you

2114
02:23:39,080 --> 02:23:41,760
we are in this task pre package.

2115
02:23:42,360 --> 02:23:46,160
But programing is in task tool

2116
02:23:46,520 --> 02:23:49,200
and the constructor of programing.

2117
02:23:49,200 --> 02:23:51,840
What is the access modifier

2118
02:23:51,840 --> 02:23:55,160
in here guys for programing

2119
02:23:55,160 --> 02:23:57,440
is the default one

2120
02:23:57,760 --> 02:24:01,160
and can access the default ones
in different

2121
02:24:01,160 --> 02:24:04,440
packages. No.

2122
02:24:04,680 --> 02:24:06,720
So what should I do?
What should I do it in here?

2123
02:24:06,720 --> 02:24:10,160
If I want this code to work,

2124
02:24:10,400 --> 02:24:13,920
I should write public.

2125
02:24:13,920 --> 02:24:21,400
I should write public in here.

2126
02:24:21,400 --> 02:24:23,760
Now the Senate is gone, right?

2127
02:24:25,080 --> 02:24:27,960
And I can pass

2128
02:24:27,960 --> 02:24:29,800
this programing in.

2129
02:24:29,800 --> 02:24:36,320
Now, which method will be called?

2130
02:24:36,320 --> 02:24:40,640
Which line will be printed,

2131
02:24:40,640 --> 02:24:47,400
be line fi.

2132
02:24:47,400 --> 02:24:47,880
Okay.

2133
02:24:48,680 --> 02:24:52,680
So far
the first task is the one this okay.

2134
02:24:52,680 --> 02:24:56,760
And I see three B this one I again
see three

2135
02:24:57,480 --> 02:25:02,240
And if I pass what I'm getting this line
guys, I love programing.

2136
02:25:02,400 --> 02:25:04,920
I don't have this line in class. Why?

2137
02:25:04,920 --> 02:25:09,080
I'm getting this line.

2138
02:25:09,080 --> 02:25:13,680
I don't have this line in class,
in this cross.

2139
02:25:13,680 --> 02:25:15,400
I am confused. Magic

2140
02:25:21,600 --> 02:25:22,960
Here we go.

2141
02:25:22,960 --> 02:25:24,680
Constructor.

2142
02:25:24,680 --> 02:25:31,680
What I am doing in here guys,
I am calling the constructor of programing

2143
02:25:31,680 --> 02:25:36,040
and it is coming from that constructor.

2144
02:25:36,120 --> 02:25:37,520
It is not magic.

2145
02:25:37,520 --> 02:25:39,960
It's like it's Java.

2146
02:25:40,960 --> 02:25:45,680
And then if I pass programing, object
to this matter

2147
02:25:45,720 --> 02:25:49,440
now and I know that that is trying to pass
an object.

2148
02:25:49,440 --> 02:25:51,640
So let's print out five.

2149
02:25:52,080 --> 02:25:53,720
Okay. Is it better now?

2150
02:25:53,720 --> 02:26:01,200
Is your understanding better now?

2151
02:26:01,200 --> 02:26:03,000
All right, we will do more examples.

2152
02:26:03,000 --> 02:26:03,440
Okay.

2153
02:26:03,520 --> 02:26:08,280
We've written more examples.

2154
02:26:08,280 --> 02:26:11,280
Are you guys done typing this code

2155
02:26:11,280 --> 02:26:15,040
to connect all these files
or is there anyone who is still typing

2156
02:26:15,840 --> 02:26:22,080
and you are magician?

2157
02:26:22,080 --> 02:26:24,800
I keep getting an error for programing.

2158
02:26:25,280 --> 02:26:33,920
Michael, can you show me the error?

2159
02:26:33,920 --> 02:26:36,960
Can we overload the method in subclass?

2160
02:26:37,320 --> 02:26:40,320
No, sorry we can do that.

2161
02:26:41,840 --> 02:26:43,920
Overloading happens when we

2162
02:26:43,920 --> 02:26:48,480
are inside the same class.

2163
02:26:48,480 --> 02:26:50,760
Did you make all of them public?

2164
02:26:51,920 --> 02:26:52,440
Michael.

2165
02:26:52,440 --> 02:26:55,920
Make sure the constructor of programing
is public.

2166
02:26:56,920 --> 02:26:59,160
Make sure the constructor of programing

2167
02:26:59,160 --> 02:27:03,880
is public.

2168
02:27:03,880 --> 02:27:05,800
It is public

2169
02:27:23,960 --> 02:27:25,200
and can you show me

2170
02:27:25,200 --> 02:27:49,280
your programing class?

2171
02:27:49,280 --> 02:27:52,560
Okay. And show me

2172
02:27:52,560 --> 02:27:55,040
where you are passing this object as well.

2173
02:27:55,040 --> 02:28:01,000
So then we call it It will get the s
out of both constructors and this month.

2174
02:28:01,000 --> 02:28:01,400
No, no.

2175
02:28:01,400 --> 02:28:09,280
Only one constructor will be called.

2176
02:28:09,280 --> 02:28:12,040
Okay. So you are

2177
02:28:12,880 --> 02:28:16,840
the D class, the programing class
inside the spec package.

2178
02:28:16,840 --> 02:28:19,080
Can you show me that as well?

2179
02:28:19,400 --> 02:28:22,920
The ask three test mean.

2180
02:28:22,920 --> 02:28:25,840
And how about your mouse over the other

2181
02:28:25,960 --> 02:28:29,160
D programing class
and show me the add on as that.

2182
02:28:29,160 --> 02:28:32,680
What is the add on that you are to?

2183
02:28:32,680 --> 02:28:37,040
Can you please explain why
we need to write line ten in

2184
02:28:37,040 --> 02:28:40,680
task three test or no we we don't.

2185
02:28:40,960 --> 02:28:42,920
Why don't guys can also do this

2186
02:28:44,760 --> 02:28:47,400
instead of this?

2187
02:28:47,400 --> 02:28:48,880
You're going to have to do this.

2188
02:28:48,880 --> 02:28:49,520
You guys don't.

2189
02:28:49,520 --> 02:28:56,640
You don't need that line.

2190
02:28:56,640 --> 02:28:59,680
Can a boolean be an object? No.

2191
02:28:59,680 --> 02:29:10,720
The primitives, they are different.

2192
02:29:10,720 --> 02:29:13,920
Click on this first first option

2193
02:29:13,920 --> 02:29:17,840
that says import
class, the blue one that you see.

2194
02:29:17,880 --> 02:29:20,880
Click on that and import this class.

2195
02:29:20,880 --> 02:29:24,120
So if you remove this line from here,

2196
02:29:25,680 --> 02:29:28,960
so if you don't import this class,
I will be getting the same issue.

2197
02:29:28,960 --> 02:29:29,280
Okay.

2198
02:29:29,280 --> 02:29:32,640
You need to import in this class
because now

2199
02:29:33,000 --> 02:29:36,080
we are in a different package.

2200
02:29:36,080 --> 02:29:39,120
Now we need to import this class.

2201
02:29:39,120 --> 02:29:41,640
If the classes
they are inside the same package,

2202
02:29:41,640 --> 02:29:44,680
we don't need to import it,
but if the classes

2203
02:29:44,960 --> 02:29:48,880
they are in different packages
then we need to import.

2204
02:29:48,880 --> 02:29:49,920
And those classes

2205
02:29:51,280 --> 02:29:52,000
let me know

2206
02:29:52,000 --> 02:29:57,960
if this issue is resolved or not.

2207
02:29:57,960 --> 02:29:58,560
Because

2208
02:30:00,640 --> 02:30:02,400
Silver, you are also

2209
02:30:02,400 --> 02:30:08,640
getting some kind of issues.

2210
02:30:08,640 --> 02:30:10,640
They come out of the semi-colon.

2211
02:30:10,640 --> 02:30:13,440
Michael is the issue resolved?

2212
02:30:14,040 --> 02:30:15,120
So Shareef

2213
02:30:15,120 --> 02:30:17,760
objects And primitive

2214
02:30:17,760 --> 02:30:20,560
data types, they are two different things.

2215
02:30:20,760 --> 02:30:21,640
Okay?

2216
02:30:22,200 --> 02:30:26,840
Objects are the objects, the data types.

2217
02:30:26,840 --> 02:30:29,640
They they are created from classes.

2218
02:30:30,080 --> 02:30:35,520
This class you can drive this class or in
this class can be from Java guys,

2219
02:30:35,520 --> 02:30:40,560
but primitives,
they don't have these classes behind them.

2220
02:30:40,560 --> 02:30:45,040
Okay, These are the primitive data types
which are created without

2221
02:30:45,880 --> 02:30:48,240
and they are, they are actually classes,

2222
02:30:48,240 --> 02:30:50,640
but they are hidden from the programmers.

2223
02:30:51,240 --> 02:30:52,960
So that's why we cannot do that.

2224
02:30:52,960 --> 02:30:54,200
That issue is at all.

2225
02:30:54,200 --> 02:30:55,920
But getting this error below, Yes,

2226
02:30:55,920 --> 02:30:59,040
you will be getting an error
because you are missing the name.

2227
02:30:59,040 --> 02:31:03,080
So after posting and square brackets
you need to specify the name for the array

2228
02:31:03,720 --> 02:31:06,840
and then after the as well, or remove

2229
02:31:06,840 --> 02:31:09,880
that comma and make sure that s is lower.

2230
02:31:09,880 --> 02:31:11,600
Then you can remove that.

2231
02:31:11,600 --> 02:31:12,600
Please explain.

2232
02:31:12,600 --> 02:31:14,960
Line it in best line

2233
02:31:16,640 --> 02:31:19,520
in here I am passing a longer value
Muhammad

2234
02:31:21,120 --> 02:31:21,960
L means long.

2235
02:31:21,960 --> 02:31:26,640
It can be capital, it can be lowercase.

2236
02:31:26,640 --> 02:31:41,720
Michael Now, so Michael,
this is what you have to do.

2237
02:31:42,600 --> 02:31:47,040
You are having a semi,
you are having a coal mine here like this.

2238
02:31:47,440 --> 02:31:52,520
So you have to remove that comma.

2239
02:31:52,520 --> 02:31:55,560
You have to remove that comma in there
to make it

2240
02:31:55,880 --> 02:31:59,320
look, Are there

2241
02:31:59,320 --> 02:32:03,200
other students who are facing any issues?

2242
02:32:03,200 --> 02:32:17,080
Look, no

2243
02:32:21,520 --> 02:32:23,880
genius level D, whether

2244
02:32:24,960 --> 02:32:27,480
it's because I have faced these issues,

2245
02:32:27,480 --> 02:32:34,320
but now I have spent a huge amount of time
and believe me, there was no one.

2246
02:32:34,320 --> 02:32:37,160
So when you are in the universities

2247
02:32:37,160 --> 02:32:39,360
professors, they only have like

2248
02:32:40,440 --> 02:32:45,120
in big, you can only meet them like one
or two are to discuss the other issues.

2249
02:32:45,120 --> 02:32:46,920
And believe me, if you if you issues,

2250
02:32:46,920 --> 02:32:50,160
they are things like missing a semicolon
or things like that.

2251
02:32:50,800 --> 02:32:53,800
The professor will be very angry
if you meet him to ask

2252
02:32:54,080 --> 02:32:55,800
to discuss these kind of issues.

2253
02:32:55,800 --> 02:33:00,680
So we all the students in the hostel,
we were all struggling on our own.

2254
02:33:00,680 --> 02:33:03,840
Can you tell it
as a comprehensive definition?

2255
02:33:03,840 --> 02:33:05,240
Overloading? Yes.

2256
02:33:05,240 --> 02:33:10,080
We will discuss that.

2257
02:33:10,080 --> 02:33:13,360
Okay, let's do the last task. Then I will

2258
02:33:14,640 --> 02:33:16,480
go to the slides

2259
02:33:16,480 --> 02:33:21,960
and after that we will do more examples
if something is still not clear.

2260
02:33:22,520 --> 02:33:25,200
So send me the last

2261
02:33:25,800 --> 02:33:32,720
last question.

2262
02:33:32,720 --> 02:33:38,000
Create a class with private matter
that has three overloaded.

2263
02:33:38,000 --> 02:33:41,080
So guys, these tasks when you solve them,

2264
02:33:41,080 --> 02:33:44,640
also try to learn the rules
from these tasks.

2265
02:33:44,640 --> 02:33:47,280
So now you guys know

2266
02:33:47,360 --> 02:33:49,200
constructors can be overloaded.

2267
02:33:49,200 --> 02:33:53,000
Now you know methods can be overloaded
now, you know,

2268
02:33:53,000 --> 02:33:56,680
private methods can be a little bit
if you guys have solved these tasks.

2269
02:33:56,680 --> 02:34:00,480
Okay, so this is how you will understand
the rules better.

2270
02:34:00,480 --> 02:34:02,000
So do you always clear new back?

2271
02:34:02,000 --> 02:34:03,280
It is going to engage task?

2272
02:34:03,280 --> 02:34:09,920
No, no, it's just to organize it better.

2273
02:34:09,920 --> 02:34:13,680
So this is that in general
we have these two proteins had done body.

2274
02:34:14,280 --> 02:34:18,240
I was feeling more comfy with the clips
but I want to use intelligent.

2275
02:34:18,240 --> 02:34:20,760
What do you really more recommend for me?

2276
02:34:20,960 --> 02:34:24,360
Let me let me show you
and then you guys can decide on your own.

2277
02:34:24,720 --> 02:34:29,000
Can you explain line 11, this one as well,

2278
02:34:29,000 --> 02:34:33,480
this line.

2279
02:34:33,480 --> 02:34:34,040
Okay.

2280
02:34:34,040 --> 02:34:38,560
So can you guys explain this
line to nozzle?

2281
02:34:38,560 --> 02:34:40,560
What? What I what we are going in here

2282
02:35:25,880 --> 02:35:29,400
is calling the constructor,

2283
02:35:29,400 --> 02:35:34,560
calling the constructor,
creating the object.

2284
02:35:34,560 --> 02:35:36,040
Now I understand how you call it.

2285
02:35:36,040 --> 02:35:41,160
So this is a short way
of creating an object of a class.

2286
02:35:41,280 --> 02:35:45,720
Now, this is a short way of,
creating the object of a class.

2287
02:35:45,720 --> 02:35:48,440
And when we created the object, yes,
definitely.

2288
02:35:48,440 --> 02:35:50,560
The constructor is called okay.

2289
02:35:50,560 --> 02:35:53,520
And it is related to this method because

2290
02:35:53,760 --> 02:35:56,240
see in method on line 27,

2291
02:35:56,560 --> 02:36:01,440
this method is expecting
an object of class programing.

2292
02:36:01,920 --> 02:36:03,240
That's how it is related.

2293
02:36:03,240 --> 02:36:07,280
So when we will be passing the object,
this method will be called

2294
02:36:09,680 --> 02:36:11,480
Is it clear now?

2295
02:36:12,240 --> 02:36:15,480
So you see,
we create the object of a class

2296
02:36:15,480 --> 02:36:21,480
we store in a variable off
type that class of type in that class.

2297
02:36:21,840 --> 02:36:24,360
So I am also expecting a parameter
off type.

2298
02:36:24,360 --> 02:36:25,160
This class

2299
02:36:26,160 --> 02:36:26,800
nested.

2300
02:36:26,800 --> 02:36:30,560
I'm expecting a barometer of type
this class

2301
02:36:30,960 --> 02:36:34,840
or you can see that
I am expecting an object of this

2302
02:36:34,840 --> 02:36:49,480
class.

2303
02:36:49,480 --> 02:36:56,880
Is it clear now?

2304
02:36:56,880 --> 02:37:00,880
What are the shortcuts of importing?

2305
02:37:01,120 --> 02:37:11,280
So are you guys still writing the import?

2306
02:37:11,280 --> 02:37:12,720
No, no, no, no, no. What? While?

2307
02:37:12,720 --> 02:37:14,880
No, no, this is intelligent manual.

2308
02:37:14,880 --> 02:37:17,240
You don't have do anything
in an intelligent.

2309
02:37:17,760 --> 02:37:18,880
Open this window.

2310
02:37:18,880 --> 02:37:21,200
Double click on double click
your shift button.

2311
02:37:21,200 --> 02:37:22,600
Open this window.

2312
02:37:22,600 --> 02:37:28,000
You let me know

2313
02:37:28,000 --> 02:37:31,320
Once you guys have opened this window

2314
02:37:34,200 --> 02:37:36,600
type auto

2315
02:37:36,600 --> 02:37:43,800
import, then

2316
02:37:43,920 --> 02:37:57,240
do you guys see this auto import?

2317
02:37:57,240 --> 02:38:02,480
Do you guys see this auto import?

2318
02:38:02,480 --> 02:38:04,160
Click on that

2319
02:38:04,360 --> 02:38:07,800
and make sure there this option that says

2320
02:38:08,280 --> 02:38:11,920
add unambiguous import on the fly.

2321
02:38:11,960 --> 02:38:13,400
It is clicked.

2322
02:38:13,560 --> 02:38:15,840
Make sure this option is clicked

2323
02:38:15,840 --> 02:38:18,720
and then you guys
don't need to import anything

2324
02:38:19,720 --> 02:38:20,160
after

2325
02:38:20,160 --> 02:38:28,000
this.

2326
02:38:28,000 --> 02:38:29,320
Let me let me show you.

2327
02:38:29,320 --> 02:38:33,080
So it's double click or double click
your shift button.

2328
02:38:33,080 --> 02:38:35,160
Yes. Not even scanner.

2329
02:38:35,160 --> 02:38:37,560
Nothing. A

2330
02:38:40,120 --> 02:38:41,200
double shift, double

2331
02:38:41,200 --> 02:38:43,560
click on shift button twice.

2332
02:38:44,320 --> 02:38:53,480
Then type auto import.

2333
02:38:53,480 --> 02:38:55,920
I said, Do you see this now

2334
02:39:07,680 --> 02:39:09,120
click on that

2335
02:39:09,120 --> 02:39:12,240
and then make sure
this option is selected.

2336
02:39:12,240 --> 02:39:14,880
Why was not that on by default?

2337
02:39:15,640 --> 02:39:18,840
So when you guys installed
the intelligent, you guys did not have

2338
02:39:18,840 --> 02:39:27,160
this option turned on.

2339
02:39:27,160 --> 02:39:32,120
Oh, maybe intelligent being
so that you guys feel more comfortable.

2340
02:39:32,120 --> 02:39:35,760
You are switching from Eclipse.

2341
02:39:35,760 --> 02:39:36,400
Okay.

2342
02:39:36,400 --> 02:39:38,160
I don't know why
this option is not checked.

2343
02:39:38,160 --> 02:39:40,960
It should be checked.

2344
02:39:40,960 --> 02:39:44,800
We are suffering from importing.

2345
02:39:44,800 --> 02:39:46,000
Okay.

2346
02:39:47,160 --> 02:39:54,920
We'll still have this issue.

2347
02:39:54,920 --> 02:39:57,400
No ability.

2348
02:39:57,480 --> 02:40:00,600
You don't have any method. So me the

2349
02:40:01,600 --> 02:40:02,920
task three class.

2350
02:40:02,920 --> 02:40:06,360
Make sure you have this method
that is expecting

2351
02:40:06,560 --> 02:40:09,960
programing object.

2352
02:40:09,960 --> 02:40:13,840
If you don't have this method
then you will be getting this issue

2353
02:40:26,520 --> 02:40:27,040
also.

2354
02:40:27,040 --> 02:40:29,320
It also sure will help you out.

2355
02:40:29,920 --> 02:40:34,440
So if you guys think
there is more load on the support

2356
02:40:34,440 --> 02:40:37,280
channel, then yes, you can pause in here.

2357
02:40:38,400 --> 02:40:42,280
You'll need to give it a space auto
and then in the import

2358
02:40:42,280 --> 02:40:46,200
there should be a space.

2359
02:40:46,200 --> 02:40:51,720
Third of my third programing is there.

2360
02:40:51,720 --> 02:40:54,840
I guess to start
it will show me your packages as well

2361
02:40:54,840 --> 02:40:58,800
and also make sure
that you have that import

2362
02:41:00,200 --> 02:41:23,320
in here.

2363
02:41:23,320 --> 02:41:25,360
I don't have import, but it works.

2364
02:41:25,360 --> 02:41:29,400
So I say it might be working
because you might be creating the classes

2365
02:41:29,400 --> 02:41:32,040
inside of the same packages
those who are following me

2366
02:41:32,040 --> 02:41:34,080
and creating the classes
in different packages.

2367
02:41:34,520 --> 02:41:37,920
It will not work
if you don't import that class

2368
02:41:43,440 --> 02:41:43,800
again.

2369
02:41:43,800 --> 02:41:48,600
I will let let
me know if you still face the issue. So

2370
02:41:49,640 --> 02:41:50,120
all right.

2371
02:41:50,120 --> 02:41:53,800
So we were discussing about the task
for you guys.

2372
02:41:53,800 --> 02:41:56,560
Can you send me to task for

2373
02:42:10,920 --> 02:42:16,440
are we recording?

2374
02:42:16,440 --> 02:42:18,480
Yes, we are recording. I'm just waiting.

2375
02:42:19,040 --> 02:42:19,400
Okay.

2376
02:42:19,400 --> 02:42:23,000
So create
one class with the private method.

2377
02:42:23,080 --> 02:42:29,160
Third Test three overloaded forms.

2378
02:42:29,160 --> 02:42:31,600
Ask four.

2379
02:42:32,160 --> 02:42:34,320
So close this file.

2380
02:42:34,320 --> 02:42:58,080
Are you guys done typing it? Yes.

2381
02:42:58,080 --> 02:43:01,960
Create a class with the private method
that has three overloaded volumes.

2382
02:43:01,960 --> 02:43:07,400
Then call each overloaded method of a
specific article and observe the results.

2383
02:43:07,600 --> 02:43:16,200
Okay.

2384
02:43:16,200 --> 02:43:18,000
How to close out north?

2385
02:43:18,000 --> 02:43:21,480
I tried clicking on that x button

2386
02:43:22,880 --> 02:43:24,160
so it is not working.

2387
02:43:24,160 --> 02:43:30,960
Sebastian Is not closing the nodes.

2388
02:43:30,960 --> 02:43:33,560
So for example,

2389
02:43:33,960 --> 02:43:35,800
if I have this file, I want to close this.

2390
02:43:35,800 --> 02:43:49,200
I just click on the text.

2391
02:43:49,200 --> 02:43:50,640
Okay. So

2392
02:43:51,600 --> 02:43:53,520
otherwise you can

2393
02:43:53,760 --> 02:43:56,840
you can try to close the job.

2394
02:43:56,840 --> 02:44:00,720
I know you need this.

2395
02:44:00,720 --> 02:44:03,560
You need to I open and backup.

2396
02:44:03,560 --> 02:44:06,120
You need to close and re-open
the intelligence.

2397
02:44:07,160 --> 02:44:08,800
Yeah, I know you know this. Okay.

2398
02:44:08,800 --> 02:44:12,720
So I let me clear this are private

2399
02:44:12,720 --> 02:44:16,240
method.

2400
02:44:16,240 --> 02:44:18,960
That's why I'm getting an arrow.

2401
02:44:18,960 --> 02:44:24,480
Guys.

2402
02:44:24,480 --> 02:44:25,560
Void, right?

2403
02:44:25,560 --> 02:44:32,160
I am missing the return type.

2404
02:44:32,160 --> 02:44:35,240
So there is one more new thing
that I want to show.

2405
02:44:36,680 --> 02:44:39,360
Focus on it in here

2406
02:44:46,720 --> 02:44:47,840
again, I overload

2407
02:44:47,840 --> 02:44:51,400
the method
if I just change this return time guys,

2408
02:44:51,680 --> 02:44:54,560
Maybe if I return an integer from this
method

2409
02:44:54,560 --> 02:45:05,040
and I overloaded.

2410
02:45:05,040 --> 02:45:07,280
No, we cannot. Not.

2411
02:45:08,280 --> 02:45:10,760
So the overloading happens

2412
02:45:11,480 --> 02:45:16,560
based on the name and parameters.

2413
02:45:16,560 --> 02:45:22,600
And you guys tell me why changing
the return time does not allow to overload

2414
02:45:22,600 --> 02:45:47,280
the method.

2415
02:45:47,280 --> 02:45:50,840
Galois gets confused,
maybe with parameters because

2416
02:45:52,240 --> 02:45:55,560
it's so.

2417
02:45:55,560 --> 02:45:58,440
Imagine guys you are calling your method

2418
02:45:59,440 --> 02:46:03,400
and you are passing the same parameters.

2419
02:46:03,400 --> 02:46:10,320
Then how do Java know if it has to call
the method that is returning something

2420
02:46:10,800 --> 02:46:13,920
or the method is not returning anything?

2421
02:46:15,120 --> 02:46:17,760
Okay, you are passing the same parameters.

2422
02:46:17,760 --> 02:46:21,200
How does Java know that the method

2423
02:46:21,240 --> 02:46:26,200
with the return type should be called
or the method without having that void?

2424
02:46:26,200 --> 02:46:29,040
The return type should be called

2425
02:46:30,720 --> 02:46:31,280
again.

2426
02:46:31,280 --> 02:46:37,840
That's why it is not allowed.

2427
02:46:37,840 --> 02:46:40,200
So I must pass

2428
02:46:41,880 --> 02:46:43,280
a number. Maybe in here. Okay.

2429
02:46:43,280 --> 02:46:45,920
Or maybe I can do from this

2430
02:46:52,320 --> 02:46:55,680
and then I can pass

2431
02:46:55,680 --> 02:46:57,360
a string in here.

2432
02:46:57,360 --> 02:47:03,040
Yeah, and

2433
02:47:04,480 --> 02:47:05,560
that's fine.

2434
02:47:06,080 --> 02:47:08,080
So I have overloaded three methods.

2435
02:47:08,080 --> 02:47:13,800
Can I create file and different task
for test on file for best.

2436
02:47:13,880 --> 02:47:21,240
These methods?

2437
02:47:21,240 --> 02:47:24,040
No, because these matters,

2438
02:47:24,560 --> 02:47:28,680
they are private and private methods.

2439
02:47:29,360 --> 02:47:34,440
We only call the private and we can only
call the private methods inside

2440
02:47:36,840 --> 02:47:41,000
the same class.

2441
02:47:41,000 --> 02:47:41,760
Okay.

2442
02:47:42,160 --> 02:47:42,720
All right.

2443
02:47:42,720 --> 02:47:47,400
Do I need an object to call these matters?

2444
02:47:47,480 --> 02:47:50,560
Or I can just write their names
and I can call This

2445
02:47:50,560 --> 02:47:51,520
matters

2446
02:48:00,520 --> 02:48:01,240
one question

2447
02:48:01,240 --> 02:48:04,320
we do the done with constructor,
not in method.

2448
02:48:04,320 --> 02:48:05,040
I am confused.

2449
02:48:05,040 --> 02:48:09,800
One question
we do return with constructor does matter.

2450
02:48:10,040 --> 02:48:10,480
No, no, no.

2451
02:48:10,480 --> 02:48:13,080
You are saying it were in reverse order.

2452
02:48:13,560 --> 02:48:18,600
We don't return with the constructors
but we return with the matters.

2453
02:48:18,600 --> 02:48:23,640
And if I make it static

2454
02:48:24,920 --> 02:48:28,080
and I call it without creating the object

2455
02:48:28,080 --> 02:48:30,840
just by writing its name. Now

2456
02:48:32,680 --> 02:48:38,920
this method, can I call it?

2457
02:48:38,920 --> 02:48:40,920
Yes we can. Okay.

2458
02:48:40,920 --> 02:48:43,080
And have you guys noticed that?

2459
02:48:43,080 --> 02:48:46,080
Okay, let me do this. If,

2460
02:48:47,720 --> 02:48:50,680
if I change

2461
02:48:50,680 --> 02:48:53,440
the the, the excess modifier,

2462
02:48:54,080 --> 02:48:58,400
can I overload the method? No.

2463
02:48:58,880 --> 02:48:59,640
Okay.

2464
02:48:59,640 --> 02:49:04,520
Having private with one method and public
with the other method.

2465
02:49:04,840 --> 02:49:09,240
It also we can also overload
a method with this information.

2466
02:49:09,720 --> 02:49:12,840
Can I maybe make one method

2467
02:49:13,560 --> 02:49:16,680
a static
and other metric instance instance?

2468
02:49:17,040 --> 02:49:19,680
And can I overload it all again?

2469
02:49:19,680 --> 02:49:23,160
I can not overload so overloading only

2470
02:49:23,160 --> 02:49:26,760
and only happens with method name

2471
02:49:27,760 --> 02:49:29,640
and its parameters.

2472
02:49:29,640 --> 02:49:33,480
Is it paradise?

2473
02:49:33,480 --> 02:49:33,920
Okay,

2474
02:49:34,920 --> 02:49:37,280
so now

2475
02:49:37,440 --> 02:49:40,800
because these methods they are instance

2476
02:49:40,800 --> 02:49:45,840
methods and I am inside a static method,

2477
02:49:46,560 --> 02:49:50,640
I can not directly write
the name of the method to call it.

2478
02:49:51,200 --> 02:49:55,280
I create an object of this class

2479
02:50:02,840 --> 02:50:07,000
and then only I can all be met there.

2480
02:50:07,120 --> 02:50:07,840
Right?

2481
02:50:08,480 --> 02:50:11,320
If I don't pass anything,
which method will be called?

2482
02:50:11,320 --> 02:50:12,000
Guess

2483
02:50:23,520 --> 02:50:25,960
the best one.

2484
02:50:26,160 --> 02:50:26,800
Okay.

2485
02:50:27,600 --> 02:50:29,160
This one.

2486
02:50:29,160 --> 02:50:36,320
So I end security scored.

2487
02:50:36,320 --> 02:50:37,960
I get wide.

2488
02:50:37,960 --> 02:50:38,560
Okay.

2489
02:50:38,560 --> 02:50:40,880
This one will work.

2490
02:50:41,800 --> 02:50:42,720
Yeah.

2491
02:50:42,720 --> 02:50:45,360
And now the return type is integer.

2492
02:50:45,640 --> 02:50:46,040
Okay.

2493
02:50:46,040 --> 02:50:48,960
If I pass in number like then.

2494
02:50:49,800 --> 02:50:53,640
Now which which method will be called

2495
02:50:56,720 --> 02:50:58,080
baseline.

2496
02:50:58,080 --> 02:51:05,160
Right.

2497
02:51:05,160 --> 02:51:07,800
So integer method.

2498
02:51:07,800 --> 02:51:10,720
And then if I pass this thing,
this method will be called.

2499
02:51:10,720 --> 02:51:13,800
Okay, so

2500
02:51:13,800 --> 02:51:15,800
access modifiers,

2501
02:51:15,800 --> 02:51:19,320
non access modifiers, return types,

2502
02:51:19,480 --> 02:51:25,000
they have no impact on overloading

2503
02:51:25,880 --> 02:51:27,920
only the method of name

2504
02:51:28,320 --> 02:51:34,080
and of these and barometer
as they participate in overloading,

2505
02:51:34,240 --> 02:51:38,000
there is another name for the method, name
and parameters.

2506
02:51:38,000 --> 02:51:39,240
There is other terminology.

2507
02:51:39,240 --> 02:51:44,520
Can you guys tell me that?

2508
02:51:44,520 --> 02:51:47,040
Can you call this string?

2509
02:51:47,040 --> 02:51:50,920
Can you call the string? Yes.

2510
02:51:50,920 --> 02:51:54,560
So let's say if we use double course
arguments,

2511
02:51:54,680 --> 02:51:57,320
no signature and here we go.

2512
02:51:58,160 --> 02:52:03,840
So overloading happens
only with signatures.

2513
02:52:03,880 --> 02:52:05,400
Okay. Okay. Let me put

2514
02:52:06,600 --> 02:52:07,480
something in here

2515
02:52:07,480 --> 02:52:10,640
so that you guys can see the difference.

2516
02:52:10,640 --> 02:52:14,880
So only
and only the signature of the method.

2517
02:52:16,200 --> 02:52:18,240
Words that mean with signature.

2518
02:52:18,280 --> 02:52:22,600
Can you guys tell now what is
what is the signature of a method?

2519
02:52:23,160 --> 02:52:27,360
And I will be back in just 2 minutes.

2520
02:52:27,360 --> 02:52:29,920
Okay.

2521
02:52:29,920 --> 02:52:35,360
But this written five is something ready
and it's just bare

2522
02:52:35,800 --> 02:52:39,600
because otherwise if I return anything,
I will be getting another.

2523
02:52:39,600 --> 02:52:40,680
So I just

2524
02:52:41,320 --> 02:52:43,560
write it and five is

2525
02:52:45,000 --> 02:52:46,200
useless.

2526
02:52:46,720 --> 02:52:48,480
Am I right with the not in java?

2527
02:52:48,480 --> 02:52:50,440
Overloading in method means to define it

2528
02:52:50,440 --> 02:52:54,440
multiple times with same name
but different method signature. Yes.

2529
02:52:54,600 --> 02:52:56,040
If you are right,

2530
02:52:56,400 --> 02:52:58,720
can you go up to see the code? Yes.

2531
02:52:58,720 --> 02:53:03,600
Let me make it smaller.

2532
02:53:03,600 --> 02:53:06,000
I hope you guys can see it now.

2533
02:53:06,000 --> 02:53:08,680
So guys tell now about the method.

2534
02:53:08,680 --> 02:53:09,600
Signature? What is it?

2535
02:53:09,600 --> 02:54:48,760
I will be back in one minute.

2536
02:54:48,760 --> 02:54:51,360
So, Nihad, the method signature

2537
02:54:52,320 --> 02:54:57,400
is method the name plus experiment.

2538
02:54:57,400 --> 02:55:00,200
So this part of a method is called

2539
02:55:00,800 --> 02:55:03,240
method signature.

2540
02:55:03,240 --> 02:55:07,680
And this part from here till here
include adding

2541
02:55:07,920 --> 02:55:11,600
excess modifier, non excess modifier
return type.

2542
02:55:11,760 --> 02:55:16,200
What is it called guys?

2543
02:55:16,200 --> 02:55:18,240
It's the header of the method

2544
02:55:20,080 --> 02:55:22,200
parameter name or parameter type.

2545
02:55:22,720 --> 02:55:27,960
Yes, the integer and and actually
the list of all the parameters.

2546
02:55:28,800 --> 02:55:31,760
And then this one
is the body of the method.

2547
02:55:33,520 --> 02:55:36,400
Okay.

2548
02:55:36,400 --> 02:55:36,840
All right.

2549
02:55:36,840 --> 02:55:38,640
Let's

2550
02:55:39,040 --> 02:55:40,760
show him over to the slides.

2551
02:55:40,760 --> 02:55:46,800
Like at the end. Yes.

2552
02:55:46,800 --> 02:55:57,400
Do you guys have any questions?

2553
02:55:57,400 --> 02:56:01,080
So those who are the. Yes.

2554
02:56:01,080 --> 02:56:06,600
I hope we will be having a second break
if you guys we can have.

2555
02:56:06,640 --> 02:56:09,200
But this will be a shorter one.

2556
02:56:09,200 --> 02:56:12,680
So those who are who are asking
whether you guys

2557
02:56:12,680 --> 02:56:15,880
should use intelligent
or whether you should be clips,

2558
02:56:17,600 --> 02:56:18,600
this is the platform.

2559
02:56:18,600 --> 02:56:21,160
It is called stack share.

2560
02:56:21,160 --> 02:56:24,000
Every tool that is being

2561
02:56:24,000 --> 02:56:26,480
used in the IP sector right now.

2562
02:56:27,200 --> 02:56:29,760
You can find out

2563
02:56:29,760 --> 02:56:33,960
how many companies or how many developers
are using that tool.

2564
02:56:34,440 --> 02:56:35,400
Okay.

2565
02:56:35,400 --> 02:56:40,440
So if I say around browse stacks

2566
02:56:41,760 --> 02:56:43,560
and if I type in fairly

2567
02:56:43,560 --> 02:57:19,080
dear.

2568
02:57:19,080 --> 02:57:23,280
Wow, any place big went to

2569
02:57:31,320 --> 02:57:32,000
I don't want

2570
02:57:32,000 --> 02:57:39,320
my freedom, then.

2571
02:57:39,320 --> 02:57:43,080
So you guys can compare all the tools

2572
02:57:43,560 --> 02:57:45,920
that are being in the industry.

2573
02:57:46,160 --> 02:57:46,880
Okay,

2574
02:57:47,720 --> 02:57:51,360
so these are the three popular ideas.

2575
02:57:52,800 --> 02:57:55,800
So as you guys can see

2576
02:57:55,800 --> 02:57:59,120
specs, So stacks mean these much people

2577
02:57:59,120 --> 02:58:03,680
they are using Eclipse,
The stacks are 2.1 in here.

2578
02:58:03,720 --> 02:58:07,440
But for intelligent it's almost 30.

2579
02:58:07,440 --> 02:58:10,880
Okay so 30 times more need

2580
02:58:10,920 --> 02:58:15,400
are 1.9 give followers but intelligent.

2581
02:58:15,400 --> 02:58:18,320
There are 23.9 followers.

2582
02:58:19,080 --> 02:58:21,840
There are three edify
words and intelligent.

2583
02:58:21,840 --> 02:58:24,560
We have 1.5 and then this netbeans

2584
02:58:26,840 --> 02:58:28,960
15 has 15 times more.

2585
02:58:29,440 --> 02:58:34,600
And these stairs,
they were a little in favor of Eclipse

2586
02:58:34,960 --> 02:58:39,240
five years before,
but they are declining very rapidly.

2587
02:58:39,320 --> 02:58:42,480
I don't see Eclipse after two years.

2588
02:58:42,480 --> 02:58:43,920
I don't see it leaves.

2589
02:58:43,920 --> 02:58:46,840
It will be any company
that will be using Eclipse.

2590
02:58:47,120 --> 02:58:49,640
So now it's totally up to you guys.

2591
02:58:49,640 --> 02:58:59,040
Which ID you guys want to use.

2592
02:58:59,040 --> 02:59:02,640
And you guys can compare
all the technologies,

2593
02:59:02,640 --> 02:59:06,360
everything that you guys will be learning,
all the tools and everything.

2594
02:59:06,360 --> 02:59:10,960
Okay, so you guys can make the decisions
on your own.

2595
02:59:12,360 --> 02:59:22,320
Okay?

2596
02:59:22,320 --> 02:59:24,040
Is not being new one.

2597
02:59:24,040 --> 02:59:28,320
I think the NetBeans is the oldest one.

2598
02:59:28,320 --> 02:59:32,400
Yes, the oldest one.

2599
02:59:32,400 --> 02:59:36,000
I am wondering why we were not using
intelligent at the beginning of the class

2600
02:59:36,000 --> 02:59:39,960
because there are still companies
who like to use Eclipse.

2601
02:59:39,960 --> 02:59:45,360
So we have not we do not have any choice
but to at least show you 14 classes

2602
02:59:45,360 --> 02:59:54,200
how eclipse work.

2603
02:59:54,200 --> 03:00:01,440
That's one of them.

2604
03:00:01,440 --> 03:00:03,280
But yeah, it's just beginning.

2605
03:00:03,280 --> 03:00:07,320
You guys will be learning selenium,
you guys will be learning best

2606
03:00:07,320 --> 03:00:11,640
and you guys will be learning
cucumber APIs all for all of those.

2607
03:00:11,640 --> 03:00:17,560
You guys will be needing an ID, but,
but don't tell this information.

2608
03:00:17,560 --> 03:00:19,400
If some instructors they want to use

2609
03:00:19,400 --> 03:00:23,320
Eclipse, don't tell them that
I told you not to use the eclipse.

2610
03:00:23,320 --> 03:00:24,000
Okay.

2611
03:00:24,000 --> 03:00:27,800
It depends on the state
because they can use any ID

2612
03:00:28,080 --> 03:00:31,200
to teach you.

2613
03:00:31,200 --> 03:00:32,040
Okay.

2614
03:00:32,440 --> 03:00:36,440
I don't want you to share sending them
as they told us.

2615
03:00:36,440 --> 03:00:37,560
That's what showed us this.

2616
03:00:38,520 --> 03:00:39,200
Okay.

2617
03:00:39,960 --> 03:00:42,840
I'm just getting whichever ID
you guys are comfortable with.

2618
03:00:42,840 --> 03:00:46,360
You guys can use.

2619
03:00:46,360 --> 03:00:54,440
Okay, let me close this.

2620
03:00:54,440 --> 03:00:58,320
Sorry about that.

2621
03:00:58,320 --> 03:01:02,400
You guys are telling us that.

2622
03:01:02,400 --> 03:01:06,000
So method overloading. Okay,

2623
03:01:06,000 --> 03:01:11,280
so method overloading is whenever.

2624
03:01:11,280 --> 03:01:13,280
Same method.

2625
03:01:13,280 --> 03:01:17,560
The name is existing multiple times.

2626
03:01:17,640 --> 03:01:22,720
Okay, so we have multiple methods,
but the name is same.

2627
03:01:23,320 --> 03:01:24,600
Okay.

2628
03:01:24,600 --> 03:01:30,000
In this same class
with different number of parameters.

2629
03:01:30,120 --> 03:01:33,280
So either
the number of parameters are different

2630
03:01:36,600 --> 03:01:39,000
or most
probably she will be doing the review

2631
03:01:39,000 --> 03:01:42,680
or the order of the parameters
is different

2632
03:01:42,680 --> 03:01:45,480
or the different order of parameters

2633
03:01:45,840 --> 03:01:50,040
or different types of parameters.

2634
03:01:50,360 --> 03:01:57,480
So either the type is different, either
the type is different

2635
03:01:57,480 --> 03:02:00,360
or the number of parameters are different

2636
03:02:00,480 --> 03:02:03,960
or the sequence are different.

2637
03:02:03,960 --> 03:02:06,440
Are these different from us?

2638
03:02:06,440 --> 03:02:08,880
Are they should not be different?

2639
03:02:08,880 --> 03:02:18,680
Are the different.

2640
03:02:18,680 --> 03:02:21,600
So what do you
what do you guys see on on those lines

2641
03:02:24,000 --> 03:02:24,760
this large?

2642
03:02:24,760 --> 03:02:28,560
They are two batches, all like us
or want them back.

2643
03:02:29,760 --> 03:02:32,040
There should hardly be any difference

2644
03:02:34,520 --> 03:02:36,680
or No, no, no is they?

2645
03:02:36,720 --> 03:02:40,640
This slides the method overriding
is the next class actually.

2646
03:02:41,320 --> 03:02:42,560
So class won't be.

2647
03:02:42,560 --> 03:02:46,080
I Think I shared the slides
for the next one

2648
03:02:46,080 --> 03:02:50,200
so I will be sharing the
I hope this slide.

2649
03:02:50,200 --> 03:02:51,760
They should be there.

2650
03:02:51,760 --> 03:02:53,880
So you guys are opening this large class.

2651
03:02:53,880 --> 03:02:54,760
Bronte

2652
03:02:56,680 --> 03:02:57,840
right now

2653
03:02:57,960 --> 03:03:00,120
and you'll see method overwriting in here.

2654
03:03:01,080 --> 03:03:06,680
Okay.

2655
03:03:06,680 --> 03:03:09,560
And let me check what is inside

2656
03:03:09,920 --> 03:03:12,480
class 19 then

2657
03:03:13,440 --> 03:03:15,480
19 is super.

2658
03:03:15,680 --> 03:03:18,360
Oh, so we are missing the method
overloading.

2659
03:03:19,400 --> 03:03:21,360
Okay,
I will share those slides, don't they?

2660
03:03:21,360 --> 03:03:26,640
I will share both slides.

2661
03:03:26,640 --> 03:03:27,480
Okay.

2662
03:03:28,000 --> 03:03:30,560
So whenever same method,

2663
03:03:30,560 --> 03:03:33,480
the name of the existing multiple times

2664
03:03:34,400 --> 03:03:38,800
in the same class
with different number of parameters

2665
03:03:39,960 --> 03:03:42,600
or different order of parameters

2666
03:03:43,120 --> 03:03:48,840
or different types of parameters,
it is known as method overloading.

2667
03:03:48,840 --> 03:03:49,480
Okay,

2668
03:03:50,320 --> 03:03:53,160
so the method should be in the same class.

2669
03:03:53,160 --> 03:03:57,800
The name of the method should be same,
but parameters can differ.

2670
03:03:58,840 --> 03:04:01,280
Java does not allow

2671
03:04:01,280 --> 03:04:04,960
overloading by changing the return type.

2672
03:04:05,080 --> 03:04:05,760
Okay.

2673
03:04:06,640 --> 03:04:10,320
No overloaded
matters can change the return type.

2674
03:04:10,440 --> 03:04:13,080
So do you guys understand this paragraph?

2675
03:04:14,520 --> 03:04:19,440
So. So it says

2676
03:04:20,200 --> 03:04:25,040
if I only change the return type,
I cannot overload method

2677
03:04:25,200 --> 03:04:28,480
but an overloaded method.

2678
03:04:29,040 --> 03:04:32,040
Maybe it is having different parameters

2679
03:04:32,040 --> 03:04:35,520
or different types of parameters.

2680
03:04:35,840 --> 03:04:38,800
It can have a different

2681
03:04:38,800 --> 03:04:39,640
return type.

2682
03:04:39,640 --> 03:04:41,800
So let's go back to this example

2683
03:04:43,320 --> 03:04:45,480
in here. This method overloaded, right?

2684
03:04:45,480 --> 03:04:50,240
It has integer, it has void,
and it can have double as well.

2685
03:04:50,240 --> 03:04:53,960
Okay. So if we are overloading

2686
03:04:55,680 --> 03:04:57,920
a method already,

2687
03:04:57,920 --> 03:05:00,480
it can have a different return type.

2688
03:05:01,360 --> 03:05:05,040
But because this method is
being overloaded with help of parameters.

2689
03:05:05,040 --> 03:05:05,640
Okay.

2690
03:05:06,120 --> 03:05:08,760
But if you try to only overload

2691
03:05:08,760 --> 03:05:12,760
just by changing the return type,
then you cannot do that.

2692
03:05:13,040 --> 03:05:13,480
Okay.

2693
03:05:13,480 --> 03:05:36,480
Is clear now.

2694
03:05:36,480 --> 03:05:36,840
So he.

2695
03:05:36,840 --> 03:05:40,040
No, I cannot overload.

2696
03:05:41,240 --> 03:05:44,040
I cannot overload a method

2697
03:05:44,880 --> 03:05:47,560
by just changing the return type.

2698
03:05:47,880 --> 03:05:50,360
That that's what it means in simple works.

2699
03:05:50,840 --> 03:05:52,680
I must change the parameters.

2700
03:05:52,680 --> 03:05:57,400
This is what it means in simple.

2701
03:05:57,400 --> 03:06:01,880
And then if I have changed the parameters,
I can have different return types.

2702
03:06:01,880 --> 03:06:06,880
It also does not work.

2703
03:06:06,880 --> 03:06:10,520
If you change the return type, then
you need to change the parameters also.

2704
03:06:10,520 --> 03:06:13,840
Yes, but you are right for our.

2705
03:06:13,840 --> 03:06:17,920
Do you understand this return thing now?

2706
03:06:17,920 --> 03:06:31,000
So I can have different return types
with overloaded methods?

2707
03:06:31,000 --> 03:06:31,680
What is the return?

2708
03:06:31,680 --> 03:06:34,160
This is the return type in bid.

2709
03:06:34,160 --> 03:06:35,800
Lloyd Noble.

2710
03:06:35,800 --> 03:06:40,400
These are the return types
of matters. Yes.

2711
03:06:40,400 --> 03:06:43,040
You know, in order to overload,
we have to change parameters,

2712
03:06:43,080 --> 03:07:00,920
not the return type,
except where no word is also included.

2713
03:07:00,920 --> 03:07:02,920
Word is also return type.

2714
03:07:02,920 --> 03:07:04,520
Word means returning nothing.

2715
03:07:05,920 --> 03:07:10,120
So it's also written by.

2716
03:07:10,120 --> 03:07:12,720
I think I should know why
we are using return type.

2717
03:07:12,960 --> 03:07:15,520
We are using return type for no reason.

2718
03:07:15,960 --> 03:07:16,360
Okay.

2719
03:07:16,360 --> 03:07:19,640
I just wanted to you
that you can have different return types.

2720
03:07:19,680 --> 03:07:21,280
That's why I wrote it.

2721
03:07:21,280 --> 03:07:24,560
There is absolutely no point
of these return types

2722
03:07:24,560 --> 03:07:25,320
and here

2723
03:07:28,760 --> 03:07:30,360
if you change the parameters

2724
03:07:30,360 --> 03:07:35,040
then you can also change returned type.

2725
03:07:35,040 --> 03:07:37,800
Okay, all clear.

2726
03:07:38,000 --> 03:07:49,600
Or is there anyone who is still confused?

2727
03:07:49,600 --> 03:07:50,760
So let me repeat again.

2728
03:07:50,760 --> 03:07:55,320
Jala does not allow overloading

2729
03:07:55,320 --> 03:07:58,040
by changing the return type

2730
03:07:59,160 --> 03:08:01,560
only. Okay.

2731
03:08:01,560 --> 03:08:06,000
Only this one is super clear.

2732
03:08:06,000 --> 03:08:07,800
And this line this.

2733
03:08:07,800 --> 03:08:09,560
This sentence is super clear.

2734
03:08:09,560 --> 03:08:12,480
Now let me show this segment though.

2735
03:08:12,600 --> 03:08:14,160
Overloaded methods.

2736
03:08:14,160 --> 03:08:18,120
So you have already a method
by changing its parameters.

2737
03:08:19,200 --> 03:08:22,200
That overloaded
method can have a different return type.

2738
03:08:23,080 --> 03:08:26,200
But if you say, okay,
I am only the return type

2739
03:08:26,200 --> 03:08:30,600
and that method should be overloaded,
then it is not possible.

2740
03:08:31,040 --> 03:08:33,160
What is the difference between
see out and return?

2741
03:08:34,080 --> 03:08:36,840
The difference is that for hard
when you will be calling

2742
03:08:36,840 --> 03:08:39,520
this method sets out
will print the results,

2743
03:08:39,960 --> 03:08:44,600
but return will return the results
from where you are calling.

2744
03:08:44,600 --> 03:08:49,560
That method.

2745
03:08:49,560 --> 03:08:52,320
If you don't want to print
something in a method,

2746
03:08:52,600 --> 03:08:55,960
if you are a courier,
if you are calculating intermediate

2747
03:08:55,960 --> 03:09:00,240
results,
you calculate something from one method.

2748
03:09:00,840 --> 03:09:03,160
That method returns that thing.

2749
03:09:03,160 --> 03:09:05,880
You use that thing
in further calculations.

2750
03:09:05,920 --> 03:09:09,920
That's when you should be using a method
that returns a something.

2751
03:09:10,400 --> 03:09:16,880
If you are doing all the logic inside
the same method, you can use this result.

2752
03:09:16,880 --> 03:09:17,880
You remember that

2753
03:09:19,680 --> 03:09:23,000
next integer or next boolean method
from the scanner class.

2754
03:09:23,400 --> 03:09:24,120
Right?

2755
03:09:24,120 --> 03:09:27,160
So you are taking the input
using those matters.

2756
03:09:27,200 --> 03:09:31,640
Then you were storing those inputs
in some kind of variables

2757
03:09:31,920 --> 03:09:35,880
and then you were further
using that data inside your logic.

2758
03:09:36,320 --> 03:09:40,560
So that's where you should using use
the method that something

2759
03:09:40,600 --> 03:09:58,840
when you have to further
use the results from that method.

2760
03:09:58,840 --> 03:10:00,880
So this is just an example.

2761
03:10:00,880 --> 03:10:06,720
We have a method and other method
in which I am expecting a data type.

2762
03:10:06,720 --> 03:10:08,720
So this is overloading in my.

2763
03:10:09,000 --> 03:10:12,400
Okay.

2764
03:10:12,400 --> 03:10:13,160
In java

2765
03:10:13,160 --> 03:10:17,640
method overloading is not possible
by changing the return type of the method.

2766
03:10:17,640 --> 03:10:19,280
Okay. So it is again the train here.

2767
03:10:19,280 --> 03:10:25,080
So this out is very
because you are acting as overload to.

2768
03:10:25,080 --> 03:10:27,640
So here is an interview question. Guys.
Think about this.

2769
03:10:27,920 --> 03:10:32,280
Can I overload the main method?

2770
03:10:32,280 --> 03:10:33,840
A very famous interview question

2771
03:10:35,000 --> 03:10:37,120
you now you guys know all the rules.

2772
03:10:37,120 --> 03:10:47,720
Apply those rules and tell me,
can I overload the main method?

2773
03:10:47,720 --> 03:10:50,320
Yes, I can. All right, I can.

2774
03:10:50,880 --> 03:10:54,680
There is no half so I can say

2775
03:10:56,160 --> 03:10:58,920
I can write another main method.

2776
03:10:58,920 --> 03:11:02,520
And this time
maybe I am not the arguments.

2777
03:11:02,520 --> 03:11:03,000
Right?

2778
03:11:03,080 --> 03:11:05,720
I have overloaded the main method first.

2779
03:11:06,640 --> 03:11:07,320
Okay.

2780
03:11:07,600 --> 03:11:12,240
I can call this main method in here
that does not take any arguments

2781
03:11:12,600 --> 03:11:13,560
like this.

2782
03:11:13,560 --> 03:11:21,800
Okay.

2783
03:11:21,800 --> 03:11:27,600
And I get the output twice because I am
calling the method here and then in here.

2784
03:11:28,800 --> 03:11:32,280
But what is the use of non parameter with
there is no use.

2785
03:11:32,640 --> 03:11:36,000
I am just explaining you
that how it works.

2786
03:11:36,000 --> 03:11:42,240
This is a very famous interview
question, by the way,

2787
03:11:42,240 --> 03:11:44,040
can we overload the main method or not?

2788
03:11:45,080 --> 03:11:47,480
So always when you have questions,
apply the rules.

2789
03:11:47,480 --> 03:11:53,520
If if it follows the rules,
then you guys can do that thing.

2790
03:11:53,520 --> 03:11:55,200
The answer is just yes.

2791
03:11:55,200 --> 03:11:56,120
Ah, yes.

2792
03:11:56,120 --> 03:11:58,840
If you guys can understand it
just like that.

2793
03:11:58,840 --> 03:12:02,880
If I say something in the form of
yes and knows yes, that is great

2794
03:12:03,440 --> 03:12:05,960
yes, the answer is yes.

2795
03:12:05,960 --> 03:12:09,920
But you guys always need examples
to understand things, right?

2796
03:12:10,920 --> 03:12:13,600
So this is another slide

2797
03:12:13,600 --> 03:12:16,800
in which I have written some examples.

2798
03:12:16,840 --> 03:12:19,080
Okay.

2799
03:12:19,080 --> 03:12:21,360
If they ask you to different,
it might be not.

2800
03:12:22,560 --> 03:12:26,640
So I have a method in which I am passing
two arguments, then pass

2801
03:12:26,640 --> 03:12:31,200
in three arguments and that's how
I can call these two methods.

2802
03:12:31,200 --> 03:12:33,520
Okay.

2803
03:12:33,520 --> 03:12:37,080
In here I am
passing different number of parameters.

2804
03:12:37,080 --> 03:12:39,280
What changes
when we overload the amendment?

2805
03:12:39,280 --> 03:12:40,200
Nothing changes.

2806
03:12:40,200 --> 03:12:42,720
It's just like any other static method.

2807
03:12:42,720 --> 03:12:43,880
So your JVM,

2808
03:12:45,000 --> 03:12:45,840
your JVM,

2809
03:12:45,840 --> 03:12:50,160
always looks for a method
that is public static.

2810
03:12:50,160 --> 03:12:55,200
It has wide return type if name is main
and it accepts

2811
03:12:56,200 --> 03:12:59,800
this string at a If it finds all of them,

2812
03:13:01,080 --> 03:13:04,760
then JVM will start the execution
of your call from here.

2813
03:13:04,760 --> 03:13:07,200
For example,
if I change this public to nothing,

2814
03:13:07,720 --> 03:13:09,800
you see that that play button is gone

2815
03:13:10,680 --> 03:13:13,560
because this method, it does

2816
03:13:13,560 --> 03:13:17,160
not follow the header of the main method

2817
03:13:17,840 --> 03:13:20,600
so that that is gone.

2818
03:13:20,600 --> 03:13:24,000
You see, as as I put the public back,
I see this play button.

2819
03:13:24,120 --> 03:13:29,160
So your JVM is looking for the public
and then the method should also be static.

2820
03:13:29,320 --> 03:13:32,680
If I remove static again,
the play button is gone

2821
03:13:32,760 --> 03:13:35,000
because I am not fulfilling
the requirements.

2822
03:13:35,360 --> 03:13:40,440
Oops.

2823
03:13:40,440 --> 03:13:46,640
And then if I change it to maybe interior
or something like that, let me

2824
03:13:49,120 --> 03:13:50,400
return

2825
03:13:50,880 --> 03:13:52,920
to look again.

2826
03:13:53,080 --> 03:13:56,120
That play button is gone
because JVM is looking

2827
03:13:56,120 --> 03:13:59,160
for the method that has void return type.

2828
03:13:59,520 --> 03:14:00,080
Okay.

2829
03:14:00,200 --> 03:14:02,320
We don't have class at Thanksgiving.

2830
03:14:02,560 --> 03:14:04,440
Yes we don't.

2831
03:14:04,440 --> 03:14:06,480
And then the name of the method
should remain.

2832
03:14:06,480 --> 03:14:08,520
If I change it. Domain one again.

2833
03:14:08,520 --> 03:14:10,800
Play button is gone. Okay,

2834
03:14:12,160 --> 03:14:14,440
I remove the parentheses again.

2835
03:14:14,760 --> 03:14:20,440
So JVM is looking specifically
specifically for public static

2836
03:14:20,880 --> 03:14:26,160
void main string and then this parent.

2837
03:14:26,160 --> 03:14:29,080
Okay with the adding of strings,

2838
03:14:29,080 --> 03:14:42,440
is it clear?

2839
03:14:42,440 --> 03:14:42,880
Okay.

2840
03:14:43,040 --> 03:14:47,480
So advantages of method overloading.

2841
03:14:47,480 --> 03:14:51,880
The main advantage of this is clean
less okay

2842
03:14:53,280 --> 03:14:57,680
of what method overloading increases
the reliability program.

2843
03:14:57,680 --> 03:15:01,800
Think about the println
method is a far println metadata.

2844
03:15:01,800 --> 03:15:03,920
You have to use different different names

2845
03:15:04,360 --> 03:15:06,560
when you are passing
different different parameters.

2846
03:15:06,560 --> 03:15:09,480
There will be a lot of
methods with different names.

2847
03:15:10,920 --> 03:15:13,000
It gives the flexibility, right?

2848
03:15:13,680 --> 03:15:16,560
So we can have same method name
but with different

2849
03:15:18,400 --> 03:15:20,280
overloaded methods.

2850
03:15:20,280 --> 03:15:25,680
Give programmers
the flexibility to call similar method

2851
03:15:27,680 --> 03:15:30,120
for different types of backup.

2852
03:15:30,360 --> 03:15:33,960
If you are working on a mathematics
program, for example,

2853
03:15:33,960 --> 03:15:36,840
you could use overloading

2854
03:15:36,840 --> 03:15:39,720
to create several multiply classes,

2855
03:15:39,920 --> 03:15:45,120
each of which multiplies
a different number of types of arguments.

2856
03:15:45,120 --> 03:15:50,280
Not integer A and B then multiplies
to integers more complicated.

2857
03:15:50,280 --> 03:15:53,400
Multiply three integers,
one double, two integers.

2858
03:15:53,680 --> 03:15:53,920
Yeah.

2859
03:15:53,920 --> 03:15:56,640
And you guys can keep
on having these variations

2860
03:15:56,960 --> 03:15:59,960
so you don't have to come up
with different names.

2861
03:16:00,200 --> 03:16:02,480
But instead that class will be on Monday.

2862
03:16:02,480 --> 03:16:09,120
If it is planned for Monday, it will be
announced in the course on version of.

2863
03:16:09,120 --> 03:16:12,840
So that said about today's class,

2864
03:16:12,960 --> 03:16:16,440
because I got a good response from you.

2865
03:16:16,840 --> 03:16:19,440
So now we will be learning two classes

2866
03:16:20,160 --> 03:16:23,560
in the same day because you guys are smart

2867
03:16:23,680 --> 03:16:29,240
and intelligent now
and now you understand more. So

2868
03:16:30,360 --> 03:16:32,520
we will be doing the method overloading as

2869
03:16:35,840 --> 03:16:36,960
is there anyone

2870
03:16:36,960 --> 03:16:39,800
by the way,
confused about method overloading?

2871
03:16:40,240 --> 03:16:42,440
I told you guys it is very easy.

2872
03:16:43,080 --> 03:16:47,880
I need now you need more examples.

2873
03:16:47,880 --> 03:16:50,080
Not giving more examples.

2874
03:16:50,080 --> 03:16:52,480
I am teaching you about method overwriting

2875
03:17:01,440 --> 03:17:05,960
right now.

2876
03:17:05,960 --> 03:17:08,400
You guys know you are more smart, right?

2877
03:17:09,000 --> 03:17:12,040
So let's have a 15 minute break.

2878
03:17:12,560 --> 03:17:15,840
After the break we will discuss about
by the way, we are not

2879
03:17:16,440 --> 03:17:20,520
I am not teaching two classes
in the same class.

2880
03:17:20,520 --> 03:17:23,960
This class was planned on Wednesday,

2881
03:17:24,240 --> 03:17:30,480
but because you guys had one day off
and as a was speaking, you so guy,

2882
03:17:30,520 --> 03:17:35,280
this class was planned for 2 hours
and you guys took 4 hours for this class.

2883
03:17:35,280 --> 03:17:38,120
Okay, so now you guys can

2884
03:17:41,400 --> 03:17:43,320
not ask me

2885
03:17:43,320 --> 03:17:45,600
if so I am not

2886
03:17:45,600 --> 03:17:49,080
we are not learning new things, but

2887
03:17:49,080 --> 03:17:51,320
we learning some part of the new class

2888
03:17:53,080 --> 03:17:56,000
master has out mastered us once again.

2889
03:17:56,480 --> 03:17:57,440
So now you guys.

2890
03:17:57,440 --> 03:18:01,600
You guys know better
if you are smart or intelligent.

2891
03:18:01,600 --> 03:18:07,320
Or maybe because we we in this class
were supposed to be completed in 3 hours.

2892
03:18:07,320 --> 03:18:12,760
You guys took 4 hours.

2893
03:18:12,760 --> 03:18:13,560
I'm just kidding.

2894
03:18:13,560 --> 03:18:15,400
But we said,

2895
03:18:15,640 --> 03:18:16,880
Let's have a break.

2896
03:18:16,880 --> 03:18:19,520
And after the break,
we will learn about overloading.

2897
03:18:19,560 --> 03:18:23,160
By the way, you guys have already learned
about the overloading.

2898
03:18:23,680 --> 03:18:24,480
Okay,

2899
03:18:25,080 --> 03:18:32,840
so it's just new terminologies.

2900
03:18:32,840 --> 03:18:36,600
So it will be just new terminologies

2901
03:18:36,760 --> 03:18:37,400
we learn.

2902
03:18:37,400 --> 03:18:39,960
And the issue for getting so fast,

2903
03:18:40,680 --> 03:18:43,240
you guys, by all means

2904
03:18:48,920 --> 03:18:50,480
literally, they help, believe me.

2905
03:18:50,480 --> 03:18:51,240
They help.

2906
03:18:51,240 --> 03:18:53,760
They help a lot.

2907
03:18:53,760 --> 03:18:56,520
Like you have to put them
in water at night

2908
03:18:57,120 --> 03:18:59,640
and in the morning
before you eat anything.

2909
03:18:59,640 --> 03:19:04,960
Try to eat 8 to 10 of those
all that you put in water at night.

2910
03:19:05,160 --> 03:19:06,360
Believe me, they will help you

2911
03:19:12,960 --> 03:19:16,080
know, you guys don't believe me

2912
03:19:16,080 --> 03:19:17,840
and the thing will work. What?

2913
03:19:17,840 --> 03:19:20,000
It will never work.

2914
03:19:20,000 --> 03:19:22,480
Smart classes, only learning,
even implements.

2915
03:19:22,480 --> 03:19:25,800
It's scientific fact that they did
studies.

2916
03:19:25,800 --> 03:19:30,680
So, you know, it is true.

2917
03:19:30,680 --> 03:19:31,680
It's a joke.

2918
03:19:31,680 --> 03:19:32,600
No, it's not.

2919
03:19:32,600 --> 03:19:34,800
I have been eating a lot of those.

2920
03:19:35,000 --> 03:19:38,160
When I was in my graduation,

2921
03:19:38,160 --> 03:19:40,200
and believe me, the GPA was

2922
03:19:41,360 --> 03:19:43,920
I got 90%, many of them.

2923
03:19:45,160 --> 03:19:47,840
Can you please push the code
after the class?

2924
03:19:47,840 --> 03:19:53,640
I did not copy more code because my five
my daughter is sick and I have to hold.

2925
03:19:53,800 --> 03:19:54,480
Okay, It's fine.

2926
03:19:54,480 --> 03:19:57,560
Yes, I will push that.

2927
03:19:57,560 --> 03:20:00,720
All right, guys, please be back
and reminding me about the regarding.

2928
03:20:02,160 --> 03:20:05,520
I think I again, you almost you are smart.

2929
03:20:05,520 --> 03:20:14,640
So whether eat or not,
it does not make sense. So

2930
03:20:15,680 --> 03:20:16,320
sorry.

2931
03:20:16,320 --> 03:20:23,600
This is how I am calling it in here.

2932
03:20:23,600 --> 03:20:26,800
The snack here in spirit

2933
03:20:30,080 --> 03:20:32,240
parent is it okay now

2934
03:20:32,240 --> 03:20:38,120
reject it.

2935
03:20:38,120 --> 03:20:41,000
No, no, no, no.

2936
03:20:41,080 --> 03:20:43,160
This is not a new topic.

2937
03:20:43,160 --> 03:20:45,600
You guys have already covered this
in the super

2938
03:20:45,600 --> 03:20:50,040
class.

2939
03:20:50,040 --> 03:20:56,080
We used to caramelized with sugar.

2940
03:20:56,080 --> 03:20:58,360
Can you show me Task for, please?

2941
03:20:59,040 --> 03:21:02,600
Yes, actually, let me push it

2942
03:21:04,240 --> 03:21:07,880
and then you guys can have a look at it

2943
03:21:08,200 --> 03:21:18,360
on your computers.

2944
03:21:18,360 --> 03:21:18,640
Okay.

2945
03:21:18,640 --> 03:21:24,000
So I have pushed it to the top.

2946
03:21:24,000 --> 03:21:24,320
Weird.

2947
03:21:24,320 --> 03:21:29,600
So all elements and apricot seeds
help with memory, not fish.

2948
03:21:29,600 --> 03:21:31,200
Gallbladder bang.

2949
03:21:31,200 --> 03:21:35,160
I was like this
I can cancel of my Amazon or

2950
03:21:37,880 --> 03:21:42,280
so I have heard something about these fish
and gallbladder as well.

2951
03:21:42,280 --> 03:21:46,120
Chinese did they use them a lot
and they are very expensive right

2952
03:21:46,440 --> 03:21:49,760
there is special fish
whose gallbladder does they use?

2953
03:21:50,000 --> 03:21:56,160
It's very expensive
and it's very beneficial for health.

2954
03:21:56,160 --> 03:21:58,840
So it's like I think, yeah,

2955
03:21:59,160 --> 03:22:02,280
8 to $10000 per fish.

2956
03:22:03,880 --> 03:22:05,920
But the gallbladder of that fish,

2957
03:22:05,920 --> 03:22:17,360
that there is some special type of fish.

2958
03:22:17,360 --> 03:22:17,680
Okay.

2959
03:22:19,680 --> 03:22:23,040
All right, guys,
because today my mode mode is different.

2960
03:22:23,040 --> 03:22:25,320
So let me give you a different example

2961
03:22:26,240 --> 03:22:32,720
of method overriding.

2962
03:22:32,720 --> 03:22:36,200
So let me create a

2963
03:22:41,200 --> 03:22:42,960
I hope you guys will understand

2964
03:22:42,960 --> 03:22:52,440
this.

2965
03:22:52,440 --> 03:22:57,320
So let's say like there is this parent
class, okay, no dogs, really?

2966
03:22:57,720 --> 03:23:02,280
No. I am in a very different world today.

2967
03:23:02,280 --> 03:23:06,320
So let's say there is this parent class
and the parent

2968
03:23:08,920 --> 03:23:09,640
like,

2969
03:23:10,320 --> 03:23:11,680
where is Emmett?

2970
03:23:11,680 --> 03:23:14,280
Emmett This example is for me.

2971
03:23:15,160 --> 03:23:17,640
So the name is

2972
03:23:18,040 --> 03:23:21,200
said that.

2973
03:23:21,200 --> 03:23:24,120
So this is the parent of

2974
03:23:24,120 --> 03:23:26,400
the father of Emmett. Right.

2975
03:23:26,400 --> 03:23:30,240
And we have a word method in here.

2976
03:23:30,240 --> 03:23:40,160
There C is putting name.

2977
03:23:40,160 --> 03:23:46,000
My name is

2978
03:23:50,280 --> 03:23:54,240
right.

2979
03:23:54,240 --> 03:23:55,680
Okay, let me put.

2980
03:23:55,680 --> 03:23:58,280
Okay.

2981
03:23:58,280 --> 03:24:04,760
Apologies for that. Yes.

2982
03:24:04,760 --> 03:24:06,840
Maybe that's that's why I look

2983
03:24:09,760 --> 03:24:11,040
s that

2984
03:24:13,680 --> 03:24:14,720
the name of.

2985
03:24:14,720 --> 03:24:15,000
Yeah.

2986
03:24:16,080 --> 03:24:19,080
And then there is this method

2987
03:24:19,080 --> 03:24:33,120
or so

2988
03:24:33,960 --> 03:24:35,680
I will

2989
03:24:36,360 --> 03:24:38,560
get Mary

2990
03:24:38,680 --> 03:24:42,360
my choice.

2991
03:24:42,400 --> 03:24:47,520
Okay, so, Emmett, this is a method

2992
03:24:47,840 --> 03:24:50,120
that is defined

2993
03:24:52,160 --> 03:24:53,280
in the parent class.

2994
03:24:53,280 --> 03:24:55,280
Okay, so now what can happen?

2995
03:24:55,880 --> 03:24:57,680
So let's say this is

2996
03:24:58,320 --> 03:25:00,040
okay, This is something,

2997
03:25:00,040 --> 03:25:07,560
you know,

2998
03:25:07,560 --> 03:25:10,960
and if this child class is inheriting

2999
03:25:10,960 --> 03:25:13,360
from this parent

3000
03:25:15,760 --> 03:25:20,880
with.

3001
03:25:20,880 --> 03:25:24,160
So what happens
is that when we inherit from something,

3002
03:25:25,520 --> 03:25:29,880
we have to accept those meters
from the parent class as it is.

3003
03:25:29,880 --> 03:25:30,720
Right.

3004
03:25:31,040 --> 03:25:34,440
But what can happen
is that the child classes,

3005
03:25:34,680 --> 03:25:37,600
they can also have their own

3006
03:25:39,720 --> 03:25:40,720
wishes, right?

3007
03:25:40,720 --> 03:25:43,080
And they can also have their own methods.

3008
03:25:43,080 --> 03:25:44,480
Maybe they don't like the method

3009
03:25:44,480 --> 03:25:49,320
from the parent blasted the methods
that are coming from the parent class.

3010
03:25:49,320 --> 03:25:51,080
So what can happen?

3011
03:25:52,200 --> 03:25:54,600
Emma can see

3012
03:26:06,120 --> 03:26:06,840
the Emmett

3013
03:26:06,840 --> 03:26:11,680
can define its own method inside
which class.

3014
03:26:12,240 --> 03:26:14,640
And now what Emmett is doing.

3015
03:26:15,000 --> 03:26:17,280
Emmett is over writing.

3016
03:26:17,280 --> 03:26:21,840
So the terminology is
terminology is overriding.

3017
03:26:21,920 --> 03:26:24,720
Okay, so we can override the method.

3018
03:26:24,720 --> 03:26:29,280
So there is something that is defined
in the parent class, child class.

3019
03:26:29,400 --> 03:26:31,200
It does not like it.

3020
03:26:31,200 --> 03:26:33,240
So what child class can do?

3021
03:26:33,840 --> 03:26:35,880
It can override that.

3022
03:26:35,880 --> 03:26:38,320
Okay, so what will happen now

3023
03:26:40,280 --> 03:26:43,520
if we create a

3024
03:26:44,640 --> 03:26:47,040
an object of the Charlie

3025
03:26:47,040 --> 03:26:55,480
class, The child

3026
03:26:55,480 --> 03:26:59,560
class will be having its own behavior.

3027
03:26:59,560 --> 03:26:59,840
Okay.

3028
03:26:59,840 --> 03:27:02,840
So what about whatever you guys

3029
03:27:04,400 --> 03:27:05,880
are, You can't imagine

3030
03:27:05,880 --> 03:27:08,560
in our programing
we read something that anybody

3031
03:27:09,120 --> 03:27:13,560
would like to see.

3032
03:27:13,560 --> 03:27:15,760
So now

3033
03:27:20,880 --> 03:27:22,400
the overridden

3034
03:27:22,400 --> 03:27:26,520
method from the child will be okay.

3035
03:27:26,960 --> 03:27:31,880
So you guys also notice this
in the super example, right?

3036
03:27:32,120 --> 03:27:36,280
Same name, apparently independent class,
same name at third in the child class.

3037
03:27:36,600 --> 03:27:38,400
And you were calling

3038
03:27:39,840 --> 03:27:40,400
the when

3039
03:27:40,400 --> 03:27:44,680
we call the method, the method
from the child class was being called

3040
03:27:44,680 --> 03:27:48,280
because child class had overridden
that thing.

3041
03:27:48,280 --> 03:27:51,200
Okay.

3042
03:27:51,200 --> 03:27:56,160
And now if Emmett is naughty,
he can do one more thing.

3043
03:27:56,160 --> 03:27:56,840
Okay?

3044
03:27:57,360 --> 03:28:09,320
He can have one more method.

3045
03:28:09,320 --> 03:28:11,720
And what he can do,

3046
03:28:11,880 --> 03:28:13,120
he can Mattie.

3047
03:28:13,120 --> 03:28:15,840
Both for both girls, right?

3048
03:28:15,840 --> 03:28:18,920
So what Emmett can do,
Emmett can say is super.

3049
03:28:19,080 --> 03:28:21,080
Yes. Pop up.

3050
03:28:21,080 --> 03:28:25,800
I, I am getting ready.

3051
03:28:25,800 --> 03:28:26,360
Okay.

3052
03:28:26,360 --> 03:28:30,560
So you can get ready to
the girl is parents like

3053
03:28:30,960 --> 03:28:34,600
and then he can also Mattie they go

3054
03:28:35,120 --> 03:28:38,280
that he likes it

3055
03:28:38,280 --> 03:28:42,000
okay so with the help of super keyword

3056
03:28:42,600 --> 03:28:45,320
we can also do that.

3057
03:28:45,320 --> 03:28:47,280
So now if we call

3058
03:28:47,280 --> 03:28:50,400
this let's do something crazy.

3059
03:28:50,400 --> 03:28:53,080
I will be getting both the outputs.

3060
03:28:53,080 --> 03:29:03,440
Okay, both the outputs.

3061
03:29:03,440 --> 03:29:05,120
Okay. So Emmett will get

3062
03:29:09,120 --> 03:29:13,320
let me fix that.

3063
03:29:13,320 --> 03:29:16,640
So now we are calling both the methods.

3064
03:29:16,640 --> 03:29:20,920
Okay, so this, this overriding thing, this

3065
03:29:23,120 --> 03:29:26,600
having the exact same name method

3066
03:29:27,680 --> 03:29:31,600
in, I think that's a good smoke
something during the good.

3067
03:29:32,640 --> 03:29:34,480
I don't smoke anything.

3068
03:29:34,480 --> 03:29:35,840
Now let's have the party.

3069
03:29:35,840 --> 03:29:37,120
What I must

3070
03:29:38,840 --> 03:29:42,440
if you have to.

3071
03:29:42,440 --> 03:29:46,280
I may.

3072
03:29:46,280 --> 03:29:47,880
You should be happy at the moment.

3073
03:29:47,880 --> 03:29:52,560
Just screaming.

3074
03:29:52,560 --> 03:29:55,360
And he didn't share.

3075
03:29:55,360 --> 03:29:58,640
I only drink water during the classes.

3076
03:29:59,440 --> 03:30:00,560
I don't want you.

3077
03:30:00,560 --> 03:30:03,880
I don't want to be teaching something else

3078
03:30:03,880 --> 03:30:06,880
in the class.

3079
03:30:06,880 --> 03:30:09,000
Believe me, it's just what

3080
03:30:16,800 --> 03:30:18,000
must be holy water.

3081
03:30:18,000 --> 03:30:21,280
Something so right.

3082
03:30:22,160 --> 03:30:23,840
And this.

3083
03:30:24,000 --> 03:30:29,280
This phenomena of having.

3084
03:30:29,280 --> 03:30:33,840
Okay, and this phenomena of having

3085
03:30:35,040 --> 03:30:38,040
the exact the same methods

3086
03:30:39,760 --> 03:30:42,720
inside the parent class, exact same name,
method

3087
03:30:42,720 --> 03:30:47,760
inside the parent class
and inside the child class is called

3088
03:30:48,920 --> 03:30:51,560
method overriding.

3089
03:30:51,560 --> 03:30:55,200
So what happens is actually this
is what happens in the real life as well.

3090
03:30:56,000 --> 03:30:58,720
You are inheriting from a class, okay.

3091
03:30:59,160 --> 03:31:02,120
And maybe you don't like the from
that class.

3092
03:31:02,200 --> 03:31:02,640
Okay.

3093
03:31:02,640 --> 03:31:07,040
So what you can do,
you can define your own method.

3094
03:31:07,440 --> 03:31:11,400
And whenever you will be calling that
method.

3095
03:31:11,400 --> 03:31:15,040
Now the method from
your class will be called

3096
03:31:15,840 --> 03:31:18,080
Does it make sense where it can be
useful guys

3097
03:31:18,160 --> 03:31:20,280
method overriding

3098
03:31:29,000 --> 03:31:32,720
only makes sense, but I'm not.

3099
03:31:32,720 --> 03:31:36,480
So when we are inheriting
from a class, yes,

3100
03:31:36,960 --> 03:31:39,360
we inherit all the matters

3101
03:31:40,760 --> 03:31:41,400
we want.

3102
03:31:41,400 --> 03:31:45,800
All the but
sometimes we don't want all the methods.

3103
03:31:46,200 --> 03:31:49,680
Okay.

3104
03:31:49,680 --> 03:31:51,680
Okay. So let let's come back.

3105
03:31:52,760 --> 03:31:56,000
Let's get back to class.

3106
03:31:56,000 --> 03:32:00,600
So we are having a method in here
inside the parent class.

3107
03:32:00,960 --> 03:32:01,400
Okay?

3108
03:32:01,600 --> 03:32:06,960
And then the child class
is extending from the parent class.

3109
03:32:07,320 --> 03:32:08,080
Okay.

3110
03:32:08,120 --> 03:32:12,760
Now, if the child class does not like

3111
03:32:12,760 --> 03:32:17,080
the behavior from the parent class, then

3112
03:32:19,040 --> 03:32:21,600
we can override that behavior.

3113
03:32:21,600 --> 03:32:24,400
We can define our own methods.

3114
03:32:24,480 --> 03:32:28,200
Okay,

3115
03:32:28,200 --> 03:32:31,840
So that is called method overriding,

3116
03:32:32,040 --> 03:32:35,240
but which if we did it before.

3117
03:32:35,240 --> 03:32:38,840
No, no, we did the same thing
almost in the super example,

3118
03:32:39,240 --> 03:32:42,240
but we didn't use this
terminology of overriding

3119
03:32:52,920 --> 03:32:56,760
and what we can also do or we can also do.

3120
03:32:56,960 --> 03:33:00,520
So method overriding,
Do we do that at the beginning of the code

3121
03:33:00,520 --> 03:33:01,800
or the other not method.

3122
03:33:01,800 --> 03:33:05,120
So it only it is only required

3123
03:33:06,320 --> 03:33:09,840
if you don't like something
from your parent class.

3124
03:33:09,840 --> 03:33:13,680
If all is good from the parent class,
then you guys don't need to override it.

3125
03:33:14,480 --> 03:33:16,440
So let's say your.

3126
03:33:16,440 --> 03:33:19,680
And the best case example is that whenever

3127
03:33:21,000 --> 03:33:23,120
there is an update

3128
03:33:23,120 --> 03:33:25,760
in the JDK or in the methods,

3129
03:33:26,800 --> 03:33:29,960
when whenever
there is this performance improvement

3130
03:33:30,400 --> 03:33:34,200
or whenever you are introducing
new features, So what do we do?

3131
03:33:34,720 --> 03:33:38,200
Because changing something
inside the parent,

3132
03:33:38,200 --> 03:33:42,200
you guys remember changing something
inside the parent can change everything

3133
03:33:42,840 --> 03:33:44,600
in all the child classes.

3134
03:33:44,600 --> 03:33:46,640
So what do we do instead?

3135
03:33:46,640 --> 03:33:49,040
We create a new class.

3136
03:33:49,040 --> 03:33:51,960
We include use those new features

3137
03:33:51,960 --> 03:33:54,200
in the child class.

3138
03:33:55,400 --> 03:33:58,160
We improve the code, we write new code,

3139
03:33:58,520 --> 03:34:01,200
and then we use the written code.

3140
03:34:01,400 --> 03:34:04,800
We combine these two
and then we release new features.

3141
03:34:04,880 --> 03:34:07,640
I need that override in your life.

3142
03:34:07,640 --> 03:34:09,000
Is it really overwriting?

3143
03:34:09,000 --> 03:34:12,040
If we are calling the method
from the class we like

3144
03:34:12,240 --> 03:34:15,560
is not it over redone, but rather

3145
03:34:15,560 --> 03:34:17,800
we pick the method we like.

3146
03:34:18,600 --> 03:34:20,600
So what happens is that Mohammad,

3147
03:34:21,000 --> 03:34:24,360
if there is no method present

3148
03:34:24,480 --> 03:34:28,720
inside the child class
and if now I think you the score

3149
03:34:32,640 --> 03:34:35,280
I will be getting the results,

3150
03:34:35,840 --> 03:34:41,400
both the results from the parent class
when I write my own method.

3151
03:34:41,400 --> 03:34:44,840
Now I have overridden that method and now

3152
03:34:46,840 --> 03:34:49,080
I will be getting the results

3153
03:34:49,520 --> 03:34:53,520
from my own class if I don't use super.

3154
03:34:53,800 --> 03:34:59,120
So that's why it is called overriding.

3155
03:34:59,120 --> 03:35:04,640
So when we use method override, it takes
the child class but not the parent. Yes.

3156
03:35:04,640 --> 03:35:08,680
So if method is defined in the child
class, call it from there.

3157
03:35:09,040 --> 03:35:14,760
If it is not defined,
call it from different class.

3158
03:35:14,760 --> 03:35:15,600
Does it make sense?

3159
03:35:15,600 --> 03:35:22,120
Guys?

3160
03:35:22,120 --> 03:35:24,720
I mean, the example is very simple.

3161
03:35:24,720 --> 03:35:26,120
Well, it's very realistic.

3162
03:35:26,120 --> 03:35:30,440
Now, what is this line 15?

3163
03:35:30,440 --> 03:35:31,320
This one.

3164
03:35:32,280 --> 03:35:35,880
Okay, So this override here,

3165
03:35:36,000 --> 03:35:40,120
these are, by the way,
these are called annotations.

3166
03:35:40,120 --> 03:35:42,960
These are part
A called annotations and notations.

3167
03:35:42,960 --> 03:35:48,480
They are extra pieces of information
that you provide to your compiler.

3168
03:35:48,640 --> 03:35:49,320
Okay.

3169
03:35:49,320 --> 03:35:53,200
So let's say, for example,
if we write this,

3170
03:35:53,520 --> 03:35:56,400
if we remove this override,
we will not be getting any issues.

3171
03:35:56,400 --> 03:35:57,800
Okay? But what happens is that

3172
03:35:59,600 --> 03:36:02,320
if you oops, if you write this.

3173
03:36:02,720 --> 03:36:06,360
So sometimes let's say
you are making a very small mistake.

3174
03:36:06,360 --> 03:36:06,720
Okay?

3175
03:36:06,720 --> 03:36:10,160
Let's say you are you change this m2m

3176
03:36:10,960 --> 03:36:15,120
And if you use this override annotation

3177
03:36:15,680 --> 03:36:20,520
now at compile time,
you know that you are making a mistake.

3178
03:36:20,520 --> 03:36:23,400
You are not overriding a matter. Okay?

3179
03:36:23,760 --> 03:36:27,600
Because there is no method matching
this name in here.

3180
03:36:27,600 --> 03:36:31,560
So this override annotation,
it is helping you

3181
03:36:32,240 --> 03:36:36,040
by telling you
if you are overwriting in actual or not.

3182
03:36:36,040 --> 03:36:39,640
If there is something in the parent class
or not that you can override.

3183
03:36:40,000 --> 03:36:44,240
But if we remove this annotation,
you see I will not be getting any errors.

3184
03:36:45,000 --> 03:36:47,560
So if I write this override

3185
03:36:49,000 --> 03:36:52,560
Java performs this extra checking for us.

3186
03:36:52,800 --> 03:36:55,680
It makes sure that there is a method
with the same name

3187
03:36:55,680 --> 03:36:59,760
in the parent class, in the child
class, the arguments are the same

3188
03:36:59,920 --> 03:37:03,000
and it is following
all the rules of overwriting.

3189
03:37:03,600 --> 03:37:08,440
But after in the next class, maybe
we will learn the rules about overriding.

3190
03:37:08,800 --> 03:37:14,720
So this overriding make sure that we are
always, always following all the rules.

3191
03:37:14,720 --> 03:37:17,800
So these are called annotations
you guys will be learning about

3192
03:37:18,120 --> 03:37:22,000
these annotations
more in the selenium and testing classes.

3193
03:37:23,520 --> 03:37:25,720
We didn't write that override.

3194
03:37:25,720 --> 03:37:28,560
It was system
generated, intelligent is generating this.

3195
03:37:28,920 --> 03:37:34,360
Okay, intelligent is doing this.

3196
03:37:34,920 --> 03:37:37,440
If you don't need it,
you guys can remove this.

3197
03:37:38,280 --> 03:37:43,320
So it's just an extra step to make sure
that everything is is good at compile

3198
03:37:43,320 --> 03:37:48,960
time.

3199
03:37:48,960 --> 03:37:52,880
Oh, it's to explicitly say
the method needs to be overridden.

3200
03:37:52,880 --> 03:37:55,760
If it was not there

3201
03:37:56,720 --> 03:37:59,880
and spelling of the method was different,
the code will compile.

3202
03:37:59,880 --> 03:38:01,200
But yes.

3203
03:38:01,200 --> 03:38:05,360
So even if the spelling are different,
so let's say there is no more method

3204
03:38:05,760 --> 03:38:08,680
in the independent class,
so there is nothing to override.

3205
03:38:08,840 --> 03:38:10,520
And if you are still thinking

3206
03:38:10,520 --> 03:38:13,160
that you are overriding
something, you are making a mistake.

3207
03:38:13,720 --> 03:38:15,280
So what will

3208
03:38:15,640 --> 03:38:17,560
intelligent will still?

3209
03:38:17,560 --> 03:38:19,560
It will still give you an error.

3210
03:38:19,560 --> 03:38:24,560
So it does not matter if the only spelling
are incorrect, if you are not following

3211
03:38:24,960 --> 03:38:28,240
all the rules of overriding
it will give you an error.

3212
03:38:29,000 --> 03:38:31,280
I will teach you about
the rules of overwriting.

3213
03:38:33,120 --> 03:38:34,000
Yes, we will do one

3214
03:38:34,000 --> 03:38:37,040
more example, but let me quickly show
you more things.

3215
03:38:37,040 --> 03:38:42,720
Okay, so string name is equal to

3216
03:38:44,640 --> 03:38:48,800
omit.

3217
03:38:48,800 --> 03:38:52,800
And if.

3218
03:38:52,800 --> 03:38:56,280
Yep, yep, it's fine. It's fine.

3219
03:38:56,280 --> 03:39:01,360
We say print name

3220
03:39:14,160 --> 03:39:17,080
and let me make

3221
03:39:18,440 --> 03:39:20,600
one more

3222
03:39:22,200 --> 03:39:24,200
I hope is not married in real life.

3223
03:39:24,200 --> 03:39:27,120
Well, I might be his last class with this

3224
03:39:29,640 --> 03:39:35,120
stage name.

3225
03:39:35,120 --> 03:39:36,160
If thief

3226
03:39:40,280 --> 03:39:42,960
but I brand is waiting for you

3227
03:39:50,440 --> 03:39:52,560
so we cannot overload

3228
03:39:55,560 --> 03:39:56,320
fields.

3229
03:39:56,320 --> 03:40:05,240
But we can override fields time

3230
03:40:12,120 --> 03:40:15,720
So let them create

3231
03:40:15,720 --> 03:40:43,240
actually a test for class.

3232
03:40:43,240 --> 03:40:45,000
How many of you don't understand this?

3233
03:40:45,000 --> 03:40:48,600
That if we have a method
defined in the parent class

3234
03:40:49,200 --> 03:40:52,920
and if same method is defined in the child
class,

3235
03:40:52,920 --> 03:40:55,760
then you will be calling the method
from the child.

3236
03:40:56,960 --> 03:40:59,640
Always
the child class method will be called.

3237
03:41:00,760 --> 03:41:02,160
And the difference We will discuss.

3238
03:41:02,160 --> 03:41:03,440
The difference

3239
03:41:05,280 --> 03:41:08,600
is that anyone who don't understand this

3240
03:41:10,800 --> 03:41:13,080
and you guys also understand this, that

3241
03:41:13,840 --> 03:41:16,800
if I don't like something from the parent,
I can override it.

3242
03:41:16,800 --> 03:41:21,120
I can provide my own method,
I can provide my own implementation,

3243
03:41:21,120 --> 03:41:26,440
I can write my own method,
which is also possible in Java,

3244
03:41:26,440 --> 03:41:30,720
and it is called overwriting.

3245
03:41:30,720 --> 03:41:31,440
Okay.

3246
03:41:31,880 --> 03:41:35,880
Uh, and, and if a field

3247
03:41:35,880 --> 03:41:39,280
is present in the parent class

3248
03:41:39,280 --> 03:41:40,840
and if same name field

3249
03:41:40,840 --> 03:41:43,240
is also present in the child class,

3250
03:41:44,520 --> 03:41:47,280
again, the priority will be given

3251
03:41:47,280 --> 03:41:49,400
to which class guys

3252
03:41:52,760 --> 03:41:54,120
child class.

3253
03:41:54,120 --> 03:42:00,600
The priority is given to the child class.

3254
03:42:00,600 --> 03:42:02,680
So this example will make it more clear.

3255
03:42:03,200 --> 03:42:06,120
Okay, so let me declare

3256
03:42:07,720 --> 03:42:10,200
the GI

3257
03:42:10,440 --> 03:42:16,960
child is equal to on male.

3258
03:42:16,960 --> 03:42:19,600
And if I say child not

3259
03:42:20,680 --> 03:42:21,040
put into

3260
03:42:21,040 --> 03:42:24,120
name, can you guys tell me the output?

3261
03:42:24,120 --> 03:42:27,920
So I am having same name field
in the parent,

3262
03:42:28,440 --> 03:42:33,320
same name field in the child,
same name field in tied the method.

3263
03:42:33,320 --> 03:42:36,320
And then I am writing three print out
statements.

3264
03:42:36,320 --> 03:42:39,320
First, I am simply writing
the name of the variable.

3265
03:42:39,880 --> 03:42:42,000
In the second, I am using this keyword

3266
03:42:42,320 --> 03:42:45,240
and in the third
I am using this super keyword.

3267
03:42:46,240 --> 03:42:47,520
Don't execute on this code.

3268
03:42:47,520 --> 03:42:55,280
Tell me the output from the rules
that you have understood.

3269
03:42:55,280 --> 03:42:58,200
And not to show Eve and said that

3270
03:43:03,320 --> 03:43:05,640
Sherif will be the first output.

3271
03:43:05,640 --> 03:43:08,880
Okay.

3272
03:43:08,880 --> 03:43:13,880
Remember all the rules that we learned
about the variables, instance

3273
03:43:13,880 --> 03:43:42,560
variables, local variables, super keyword.

3274
03:43:42,560 --> 03:43:45,240
Let me execute the score

3275
03:43:45,240 --> 03:43:48,240
and then let me explain

3276
03:43:48,320 --> 03:43:53,720
why we are getting this output.

3277
03:43:53,720 --> 03:43:54,960
So you guys remember

3278
03:43:56,680 --> 03:43:59,120
the use of this keyword

3279
03:43:59,640 --> 03:44:03,120
and b so the difference
between local variables.

3280
03:44:04,920 --> 03:44:06,920
Yes. Niyaz answer was correct.

3281
03:44:06,920 --> 03:44:08,920
So guys,

3282
03:44:09,880 --> 03:44:13,320
if I have a local variable

3283
03:44:15,000 --> 03:44:18,240
and if I only use its name

3284
03:44:19,120 --> 03:44:23,000
always, always
the local variable gets the priority,

3285
03:44:23,360 --> 03:44:26,840
but always, always
the local variable gets priority.

3286
03:44:28,440 --> 03:44:31,440
But in the same second line,

3287
03:44:31,640 --> 03:44:37,080
I am explicitly saying this dot name,
you guys remember what we're about.

3288
03:44:37,080 --> 03:44:39,120
What do we do with this keyword?

3289
03:44:39,120 --> 03:44:42,600
What happens when we use this keyword
with the variables?

3290
03:44:42,960 --> 03:44:47,040
Which variables are always referred?

3291
03:44:47,040 --> 03:44:51,120
We refer to the instance variables, guys.

3292
03:44:51,520 --> 03:44:54,240
So this in this case,

3293
03:44:54,400 --> 03:44:57,520
this is the instance variable, right?

3294
03:44:57,520 --> 03:45:01,920
Because yes,
we have this field in the parent as well,

3295
03:45:02,360 --> 03:45:07,360
but because we have defined our own field,

3296
03:45:07,360 --> 03:45:10,680
now the priority is given to that field.

3297
03:45:10,880 --> 03:45:13,680
The priority is the child class.

3298
03:45:13,880 --> 03:45:15,960
It can be a method, it can be a field.

3299
03:45:16,160 --> 03:45:19,720
If A class is defining

3300
03:45:19,720 --> 03:45:23,000
its own variables or methods.

3301
03:45:23,480 --> 03:45:24,760
Always, always.

3302
03:45:24,760 --> 03:45:27,640
The property is given to matters.

3303
03:45:27,840 --> 03:45:28,560
Okay?

3304
03:45:29,080 --> 03:45:34,200
And when we explicitly say
a super dot name, what does it mean, guys?

3305
03:45:35,320 --> 03:45:37,440
Super facility parent class.

3306
03:45:38,000 --> 03:45:41,320
So that's why we get the sheriff

3307
03:45:41,320 --> 03:45:44,760
first, then them

3308
03:45:45,360 --> 03:45:47,920
and then the student.

3309
03:45:49,240 --> 03:45:51,960
I talk to this only for constructor.

3310
03:45:51,960 --> 03:45:54,240
No, no. And this can be for peers.

3311
03:45:54,840 --> 03:45:57,240
I think we spend
more than one hour on that.

3312
03:45:59,040 --> 03:46:02,680
And is there
anyone who still don't understand why

3313
03:46:02,680 --> 03:46:13,240
we getting these three outputs?

3314
03:46:13,240 --> 03:46:16,320
Okay, so let me know this

3315
03:46:17,160 --> 03:46:20,120
if I comment this out.

3316
03:46:20,360 --> 03:46:23,760
If if I comment this out
now, tell me what output

3317
03:46:23,800 --> 03:46:27,640
they will get.

3318
03:46:27,640 --> 03:46:41,680
So animate animate

3319
03:46:42,040 --> 03:46:44,440
and then saw the

3320
03:46:46,680 --> 03:46:48,400
so now

3321
03:46:49,000 --> 03:46:54,200
let me execute this.

3322
03:46:54,200 --> 03:46:57,360
So now there is no competition

3323
03:46:57,640 --> 03:47:03,000
between instance fear
and a local field, right?

3324
03:47:03,040 --> 03:47:07,440
There is no local field
so it does not matter if we write this

3325
03:47:07,880 --> 03:47:12,000
or if we write the field name
without this right,

3326
03:47:12,000 --> 03:47:16,040
it will always be referring
to the instance field.

3327
03:47:16,400 --> 03:47:17,000
Okay.

3328
03:47:17,480 --> 03:47:21,480
And then in here
we are explicitly, explicitly using super

3329
03:47:21,520 --> 03:47:24,880
so that that's why
we get this sort of in here.

3330
03:47:25,320 --> 03:47:27,480
Is there anyone who don't understand this?

3331
03:47:28,240 --> 03:47:28,960
No, not will.

3332
03:47:28,960 --> 03:47:34,080
We will not be getting null
because now the name will also

3333
03:47:34,080 --> 03:47:40,800
refer to the instance field.

3334
03:47:40,800 --> 03:47:41,360
Okay.

3335
03:47:41,360 --> 03:47:47,560
And if I comment this out
as well, now what I will get

3336
03:48:10,400 --> 03:48:12,480
all products right?

3337
03:48:12,480 --> 03:48:15,120
Because what happens, guys,

3338
03:48:15,120 --> 03:48:20,240
when we expand from a class,
all the features

3339
03:48:20,400 --> 03:48:24,840
which are not private, they are kind of

3340
03:48:26,080 --> 03:48:27,960
you remember the inheritance class,

3341
03:48:27,960 --> 03:48:31,320
they are kind of copied to the child
class, right?

3342
03:48:31,680 --> 03:48:35,040
So this name and this

3343
03:48:35,040 --> 03:48:38,720
and this doc name,
they are referring it from the child class

3344
03:48:38,720 --> 03:48:42,200
and this is coming from the parent class,
but they are all same.

3345
03:48:42,360 --> 03:48:45,920
Okay? They are all same.

3346
03:48:45,920 --> 03:48:47,360
All right, All right.

3347
03:48:47,360 --> 03:48:50,920
So now you guys understand

3348
03:48:51,720 --> 03:48:54,040
how all the writing works

3349
03:48:54,080 --> 03:48:57,960
a little bit right?

3350
03:48:57,960 --> 03:49:00,000
Okay. So and you guys.

3351
03:49:00,000 --> 03:49:03,840
So let me instead of this crazy let me

3352
03:49:06,520 --> 03:49:08,840
let me

3353
03:49:09,400 --> 03:49:12,280
also make it clear

3354
03:49:12,280 --> 03:49:17,280
how methods look.

3355
03:49:17,280 --> 03:49:24,840
So right now,

3356
03:49:24,840 --> 03:49:27,400
the name of the project
should be overriding

3357
03:49:33,440 --> 03:49:35,440
or I wrote overloading.

3358
03:49:37,000 --> 03:49:39,280
Let me add refactoring.

3359
03:49:39,280 --> 03:49:42,080
So if I have to change something,
I go to the effective

3360
03:49:42,760 --> 03:49:46,080
and then I write.

3361
03:49:46,080 --> 03:49:46,360
Okay,

3362
03:49:47,400 --> 03:49:51,080
so this is how I refactor team.

3363
03:49:51,200 --> 03:49:54,240
Okay.

3364
03:49:54,240 --> 03:50:00,200
And then it will change the overriding
here, here, inside all the classes.

3365
03:50:00,280 --> 03:50:01,200
Okay, we will.

3366
03:50:01,200 --> 03:50:01,640
So do it.

3367
03:50:01,640 --> 03:50:05,040
We don't have to go inside the classes
and have to change it

3368
03:50:05,520 --> 03:50:07,160
if we use the developer.

3369
03:50:07,160 --> 03:50:09,280
So guys, now

3370
03:50:10,160 --> 03:50:13,800
I have this parent class
in which I have this printer method.

3371
03:50:14,520 --> 03:50:15,080
Okay.

3372
03:50:15,360 --> 03:50:17,920
And then this. Sorry, not this.

3373
03:50:17,920 --> 03:50:20,120
Get it get married method.

3374
03:50:20,120 --> 03:50:22,960
And I have the same method

3375
03:50:22,960 --> 03:50:27,760
and my frozen.

3376
03:50:27,760 --> 03:50:29,040
Okay.

3377
03:50:31,040 --> 03:50:31,680
Okay.

3378
03:50:31,800 --> 03:50:37,320
So if I have same name method in parent
and in child

3379
03:50:37,920 --> 03:50:43,400
and if I create the object of child class
and I call that matter.

3380
03:50:44,080 --> 03:50:46,560
So which method will execute?

3381
03:50:46,800 --> 03:50:49,560
Which will which method will get priority?

3382
03:50:50,360 --> 03:50:52,560
The method from there.

3383
03:50:54,120 --> 03:50:56,280
I like someone

3384
03:50:58,240 --> 03:51:02,400
so the method

3385
03:51:03,760 --> 03:51:06,840
from the child class will be executed.

3386
03:51:07,080 --> 03:51:09,560
And if I don't have

3387
03:51:11,120 --> 03:51:13,160
that maternal and child class,

3388
03:51:14,880 --> 03:51:20,960
then the parent class

3389
03:51:20,960 --> 03:51:23,520
method will be executed.

3390
03:51:25,160 --> 03:51:26,040
Then in exit.

3391
03:51:26,040 --> 03:51:28,200
This is overriding.

3392
03:51:28,200 --> 03:51:32,280
If you have something
same inside the parent parent child

3393
03:51:33,240 --> 03:51:35,920
priority is for the child class.

3394
03:51:36,680 --> 03:51:39,120
If you don't have it,
it comes from the parent.

3395
03:51:39,920 --> 03:51:43,520
And this be this this phenomena
of having same name method.

3396
03:51:43,960 --> 03:51:47,000
It's called.

3397
03:51:47,000 --> 03:51:49,960
We can override a field,
we can override the method.

3398
03:51:50,880 --> 03:51:53,520
Are we going to cover this same class? No.

3399
03:51:53,520 --> 03:51:55,080
Model? Yes.

3400
03:51:55,080 --> 03:51:57,120
It is required for the next class.

3401
03:51:57,480 --> 03:52:02,120
Is there anyone who is still confused
about the overriding why we need it?

3402
03:52:02,400 --> 03:52:05,320
How it works?

3403
03:52:05,320 --> 03:52:08,080
Is it important for now?

3404
03:52:08,080 --> 03:52:08,680
So don't worry.

3405
03:52:08,680 --> 03:52:14,400
I will try to show you at least
maybe three more examples on overriding.

3406
03:52:14,400 --> 03:52:15,080
Okay.

3407
03:52:15,640 --> 03:52:17,680
But overloading is good, right?

3408
03:52:18,360 --> 03:52:20,120
Overloading is good.

3409
03:52:20,120 --> 03:52:25,920
Having same name method
but different parameters so far.

3410
03:52:25,920 --> 03:52:26,480
Overriding.

3411
03:52:26,480 --> 03:52:31,880
We will do more examples.

3412
03:52:31,880 --> 03:52:32,600
All right.

3413
03:52:32,600 --> 03:52:37,880
And then we can always use super keyword
to prioritize things

3414
03:52:37,880 --> 03:52:41,760
if we don't want to use something
from child, mainly

3415
03:52:41,760 --> 03:52:46,840
for advising a privatizing
child class methods and variables. Yes,

3416
03:52:47,800 --> 03:52:50,120
if we have overrides parent class

3417
03:52:50,640 --> 03:52:54,920
with a lot of child matters,
can the parent override all the same?

3418
03:52:55,720 --> 03:52:57,920
If we have overriding parent class

3419
03:52:58,240 --> 03:53:01,680
with a lot of child class methods,
then parent override.

3420
03:53:02,200 --> 03:53:03,400
So he knows

3421
03:53:04,360 --> 03:53:04,760
this.

3422
03:53:04,760 --> 03:53:07,440
This question is not correct.

3423
03:53:07,440 --> 03:53:11,520
Only the child can override
that and the classes

3424
03:53:11,520 --> 03:53:16,080
can never override something from child
classes first thing days.

3425
03:53:16,680 --> 03:53:19,640
And then it does not matter
how many methods there,

3426
03:53:20,600 --> 03:53:24,240
you can always override all the methods

3427
03:53:24,720 --> 03:53:27,240
that participate in inheritance.

3428
03:53:28,000 --> 03:53:30,680
So can I override private methods?

3429
03:53:30,840 --> 03:53:31,720
Nice.

3430
03:53:31,960 --> 03:53:35,080
Very famous interview question
can override private methods?

3431
03:53:35,520 --> 03:53:39,520
No. Can I overload private methods?

3432
03:53:39,520 --> 03:53:43,880
Can I overload private methods? Yes.

3433
03:53:44,320 --> 03:53:51,360
Can I override constructors?

3434
03:53:51,360 --> 03:53:53,800
Can I override constructors?

3435
03:53:54,120 --> 03:53:58,680
Override?

3436
03:53:58,680 --> 03:54:00,360
So first everyone was saying yes.

3437
03:54:00,360 --> 03:54:05,520
Now no, because I emphasize doing that.

3438
03:54:05,520 --> 03:54:10,760
It's it's those things
which do not participate in inheritance.

3439
03:54:10,760 --> 03:54:12,800
We cannot override them.

3440
03:54:13,080 --> 03:54:14,040
So constructors,

3441
03:54:14,040 --> 03:54:17,760
we cannot override them because they don't
participate in inheritance.

3442
03:54:18,320 --> 03:54:20,040
And this is from inheritance class.

3443
03:54:21,440 --> 03:54:21,960
Can I

3444
03:54:21,960 --> 03:54:27,880
overload the constructor?

3445
03:54:27,880 --> 03:54:29,880
Yes, I can overload the constructor.

3446
03:54:29,880 --> 03:54:32,120
Right. No issues with that.

3447
03:54:32,120 --> 03:54:34,200
And on

3448
03:54:35,760 --> 03:54:36,240
okay.

3449
03:54:36,240 --> 03:54:40,880
Everything looks good for now.

3450
03:54:40,880 --> 03:54:43,200
So let me.

3451
03:54:43,200 --> 03:54:44,760
I have one error please.

3452
03:54:44,760 --> 03:54:52,080
Now is not you are available.

3453
03:54:52,080 --> 03:55:01,440
My mind is overriding
and overloading today.

3454
03:55:01,440 --> 03:55:21,280
Let me check what
What is the error that you are getting?

3455
03:55:21,280 --> 03:55:26,880
So now you are trying to define the child
class inside of the parent class.

3456
03:55:27,240 --> 03:55:29,320
This is not possible.

3457
03:55:29,320 --> 03:55:31,560
So this giant class,

3458
03:55:31,560 --> 03:55:35,080
it must be outside of these parentheses.

3459
03:55:35,120 --> 03:55:37,440
These these in brackets. Okay.

3460
03:55:37,440 --> 03:55:49,880
That's why you are getting this error.

3461
03:55:49,880 --> 03:55:51,080
All right.

3462
03:55:51,080 --> 03:55:57,600
So let's discuss.

3463
03:55:57,600 --> 03:56:01,320
I know, I know all of you
are waiting for this keyword, right?

3464
03:56:01,920 --> 03:56:04,480
If Java is the best option for execution.

3465
03:56:04,480 --> 03:56:08,320
Actually, to me, the third thing
it is to use Java two, two of methods.

3466
03:56:09,600 --> 03:56:10,240
Yes, you

3467
03:56:10,240 --> 03:56:14,560
can. It's

3468
03:56:20,440 --> 03:56:21,600
so on.

3469
03:56:21,600 --> 03:56:23,760
But I am married with my lovely wife.

3470
03:56:23,840 --> 03:56:24,360
I know.

3471
03:56:24,360 --> 03:56:28,120
Because your wife is standing right
behind you and she has the right planning

3472
03:56:28,240 --> 03:56:28,640
to handle.

3473
03:56:28,640 --> 03:56:31,920
That's why I will never show this class
to her partial.

3474
03:56:33,280 --> 03:56:36,680
My parents of the word

3475
03:56:38,520 --> 03:56:40,080
is I am not.

3476
03:56:40,080 --> 03:56:41,720
You don't have to say this to class.

3477
03:56:41,720 --> 03:56:46,320
Everyone understands.

3478
03:56:46,320 --> 03:56:48,640
We know that you are saying it
to your wife,

3479
03:56:48,640 --> 03:56:50,800
but you are showing it to us. Right?

3480
03:56:50,800 --> 03:56:52,200
So I guess

3481
03:56:54,560 --> 03:56:57,480
this the

3482
03:56:57,680 --> 03:57:00,760
I don't know why my my mood
is totally different today,

3483
03:57:01,680 --> 03:57:04,800
although I have to submit
so many assignments

3484
03:57:07,120 --> 03:57:09,240
know they are not all means.

3485
03:57:09,240 --> 03:57:12,720
So whenever same method name

3486
03:57:13,480 --> 03:57:17,160
is the existing in both base class.

3487
03:57:18,160 --> 03:57:21,840
No, it's 20

3488
03:57:23,200 --> 03:57:27,600
as you a bad idea to do brain for. But

3489
03:57:28,920 --> 03:57:32,440
how can I be so happy if I am married?

3490
03:57:32,440 --> 03:57:34,760
It's it should be obvious, man.

3491
03:57:35,720 --> 03:57:36,440
Literally.

3492
03:57:36,440 --> 03:57:41,360
Believe me, I have seen married people
when they go out with their friends

3493
03:57:41,360 --> 03:57:45,920
and if their wives they
they can hear them laughing with friends.

3494
03:57:46,080 --> 03:57:49,120
The next thing that then
when they will come back they will say,

3495
03:57:49,320 --> 03:57:50,680
You never laugh with me.

3496
03:57:50,680 --> 03:57:53,960
You, you talk with me like that
with your friend.

3497
03:57:53,960 --> 03:57:56,440
You are very happy, always smiling.

3498
03:57:58,120 --> 03:57:59,720
Because all of the members

3499
03:57:59,720 --> 03:58:03,040
my, my, my brothers and sisters,
they are married.

3500
03:58:03,040 --> 03:58:04,320
So I know

3501
03:58:07,120 --> 03:58:10,080
every single thing is being noticed
when you get married.

3502
03:58:10,240 --> 03:58:12,600
That is what I would talk about too.
I just.

3503
03:58:13,760 --> 03:58:14,640
I don't think so.

3504
03:58:14,640 --> 03:58:18,600
I can even one single.

3505
03:58:18,600 --> 03:58:20,240
You will have that question too,

3506
03:58:21,240 --> 03:58:25,280
as I am, I am observing everything.

3507
03:58:25,480 --> 03:58:31,440
I would make sure
that this never happens to me.

3508
03:58:31,440 --> 03:58:35,520
So whenever same method name is existing

3509
03:58:35,640 --> 03:58:37,680
in both the base class, I remember

3510
03:58:38,680 --> 03:58:41,680
all writing happens in,

3511
03:58:42,600 --> 03:58:47,680
in, in the classes where you
you have that parent child relationships.

3512
03:58:47,680 --> 03:58:48,360
Okay.

3513
03:58:50,480 --> 03:58:51,840
But overloading

3514
03:58:51,840 --> 03:58:55,360
happens inside the same class.

3515
03:58:55,360 --> 03:58:55,760
Okay.

3516
03:58:55,760 --> 03:58:57,960
There is no parent child relationship.

3517
03:58:57,960 --> 03:58:59,520
There is no inheritance.

3518
03:58:59,520 --> 03:59:04,960
So this is the one of the biggest
difference are overloading

3519
03:59:05,160 --> 03:59:07,800
inside of the same class over writing

3520
03:59:08,200 --> 03:59:12,840
parent and child relationship.

3521
03:59:12,840 --> 03:59:13,720
No, no.

3522
03:59:13,720 --> 03:59:18,440
I can not be happy by getting married
and I would class

3523
03:59:18,760 --> 03:59:22,200
with the same types of bad meters.

3524
03:59:23,360 --> 03:59:24,080
Okay.

3525
03:59:24,120 --> 03:59:26,600
So in overloading

3526
03:59:27,480 --> 03:59:29,840
and overriding always

3527
03:59:29,840 --> 03:59:32,600
the matter name should be

3528
03:59:32,600 --> 03:59:36,360
okay.

3529
03:59:36,360 --> 03:59:40,000
So the cluster name, it's

3530
03:59:47,400 --> 03:59:49,000
so far

3531
03:59:49,000 --> 03:59:53,240
overriding
and overloading the method name.

3532
03:59:53,680 --> 03:59:57,920
It should be same.

3533
03:59:57,920 --> 03:59:59,640
So method name that should be same.

3534
03:59:59,640 --> 04:00:01,840
But in overloading

3535
04:00:03,080 --> 04:00:04,640
bad on meters

3536
04:00:04,640 --> 04:00:07,680
shit, there always be different

3537
04:00:08,760 --> 04:00:12,280
but in overriding
they should never be different.

3538
04:00:13,200 --> 04:00:14,760
Focus on this

3539
04:00:15,120 --> 04:00:20,120
for both method
overloading and overriding method.

3540
04:00:20,120 --> 04:00:22,320
The name should be same

3541
04:00:23,800 --> 04:00:26,240
for overloading parameters

3542
04:00:26,240 --> 04:00:30,640
should be different
for overriding parameters.

3543
04:00:30,640 --> 04:00:35,880
It should be exactly the same.

3544
04:00:35,880 --> 04:00:40,400
Oh okay.

3545
04:00:40,480 --> 04:00:44,640
So whenever same method

3546
04:00:44,640 --> 04:00:47,040
third name is existing

3547
04:00:54,240 --> 04:00:57,800
in both base class and derived class

3548
04:01:00,600 --> 04:01:01,600
class

3549
04:01:01,600 --> 04:01:07,280
with same type of parameters or same order

3550
04:01:07,440 --> 04:01:12,000
or of parameter
is known as method overriding,

3551
04:01:12,400 --> 04:01:15,120
so which was not required

3552
04:01:15,480 --> 04:01:17,760
for the overloading

3553
04:01:18,480 --> 04:01:22,280
is not required for overriding.

3554
04:01:22,680 --> 04:01:30,600
Okay,
so do you guys understand this which was

3555
04:01:30,960 --> 04:01:33,920
which was required for overloading

3556
04:01:35,480 --> 04:01:37,840
which was required for overloading

3557
04:01:37,840 --> 04:01:41,000
is now totally the opposite.

3558
04:01:41,000 --> 04:01:44,680
If we do the same thing in here.

3559
04:01:45,480 --> 04:01:48,600
The overriding yes, completely opposite.

3560
04:01:48,600 --> 04:01:51,640
The overriding will not happen in here.

3561
04:01:52,240 --> 04:01:55,080
Parameters should be exactly the same.

3562
04:01:55,520 --> 04:01:59,120
They have sequence, they have numbers,
they are tied.

3563
04:01:59,160 --> 04:02:01,160
They should be exactly the same.

3564
04:02:02,280 --> 04:02:06,120
The return type in overloading in

3565
04:02:06,120 --> 04:02:09,840
do not have any effect in overriding

3566
04:02:09,840 --> 04:02:13,680
it should be exactly the same.

3567
04:02:13,680 --> 04:02:14,480
Okay.

3568
04:02:15,240 --> 04:02:17,960
If subclass general class has the same

3569
04:02:17,960 --> 04:02:20,240
method as declared

3570
04:02:21,840 --> 04:02:24,120
in the parent,

3571
04:02:24,120 --> 04:02:26,440
we are already scared and as good.

3572
04:02:27,160 --> 04:02:30,360
If if subclass has the same method

3573
04:02:30,360 --> 04:02:33,480
as declared in the parent class,

3574
04:02:33,480 --> 04:02:36,480
it is known as method overriding.

3575
04:02:36,960 --> 04:02:39,280
Okay.

3576
04:02:39,280 --> 04:02:41,280
And remember the small guys

3577
04:02:41,280 --> 04:02:44,880
without the inheritance
method overriding is not possible.

3578
04:02:44,920 --> 04:02:45,560
Okay.

3579
04:02:45,560 --> 04:02:48,240
The overriding concept is only

3580
04:02:49,800 --> 04:02:51,400
when you have the parent child

3581
04:02:51,400 --> 04:02:55,240
relationship. Now,

3582
04:02:56,520 --> 04:02:59,480
as we have the benefits from overloading,

3583
04:02:59,480 --> 04:03:01,800
we also get the benefits from overriding

3584
04:03:05,560 --> 04:03:06,240
method.

3585
04:03:06,240 --> 04:03:10,320
Overriding is used to provide
specific implementation

3586
04:03:11,040 --> 04:03:13,720
of a method that is

3587
04:03:13,720 --> 04:03:17,160
already provided by its superclass.

3588
04:03:17,160 --> 04:03:19,200
So method is already there.

3589
04:03:19,200 --> 04:03:22,200
But for some reason we don't like that
method.

3590
04:03:22,480 --> 04:03:24,880
We override the variable
in the same class.

3591
04:03:24,880 --> 04:03:28,560
In the same class, No,

3592
04:03:28,560 --> 04:03:33,240
overriding always happens in full classes
and there should always be

3593
04:03:33,240 --> 04:03:39,880
this parent child relationship,
this inheritance relationship.

3594
04:03:39,880 --> 04:03:40,320
Perhaps

3595
04:03:43,240 --> 04:03:44,400
there should be a subclass.

3596
04:03:44,400 --> 04:03:48,680
Yes, there should be a subclass.

3597
04:03:48,680 --> 04:03:55,320
The private methods cannot be overridden
but can be overloaded.

3598
04:03:55,360 --> 04:04:00,840
Yes. Moment.

3599
04:04:01,080 --> 04:04:01,720
Right. Right.

3600
04:04:01,720 --> 04:04:04,720
This code you are declaring two variables
with same name.

3601
04:04:05,160 --> 04:04:08,800
It does not allow that inside
same class or inside same method.

3602
04:04:09,320 --> 04:04:22,000
Right.

3603
04:04:22,000 --> 04:04:27,360
Is there anyone else who is confused?

3604
04:04:27,360 --> 04:04:31,200
So method overloading is used

3605
04:04:31,200 --> 04:04:34,560
for compile time polymorphism

3606
04:04:36,600 --> 04:04:38,560
and method overwriting

3607
04:04:38,560 --> 04:04:42,440
is used for runtime polymorphism.

3608
04:04:42,560 --> 04:04:43,200
Okay.

3609
04:04:44,280 --> 04:04:46,080
Your favorite topic

3610
04:04:46,080 --> 04:04:50,400
without inheritance
method overriding is not possible.

3611
04:04:50,400 --> 04:04:54,360
Why are you doing this to yourself?

3612
04:04:54,360 --> 04:04:57,720
Yes, I know Mohammad is very responsive.

3613
04:04:57,720 --> 04:05:03,160
He always participates in class
and I can tell from my previous experience

3614
04:05:03,840 --> 04:05:07,280
the students who participate in the class,
they are the

3615
04:05:07,680 --> 04:05:10,680
they are the students
who usually get their job in fast

3616
04:05:11,200 --> 04:05:15,840
one or two weeks
because it only makes you like.

3617
04:05:15,840 --> 04:05:17,000
If you are not doing anything,

3618
04:05:17,000 --> 04:05:19,400
just sitting and watching,
you can be super, super lazy.

3619
04:05:19,400 --> 04:05:22,960
You can go to sleep,
but when you are active it also

3620
04:05:23,280 --> 04:05:26,040
you kind of get
involved in the class as well

3621
04:05:28,400 --> 04:05:29,760
so you don't feel sleepy

3622
04:05:29,760 --> 04:05:36,480
and things like that.

3623
04:05:36,480 --> 04:05:44,280
So yep,

3624
04:05:44,280 --> 04:05:49,360
I slept for 5 hours.

3625
04:05:49,360 --> 04:05:51,640
So advantage of method overriding.

3626
04:05:52,040 --> 04:05:57,000
We can have our own implementations.

3627
04:05:57,000 --> 04:05:57,320
Yeah,

3628
04:05:58,960 --> 04:06:01,160
that's good
because when I get stuck in something

3629
04:06:01,160 --> 04:06:04,120
I, I have brother

3630
04:06:05,280 --> 04:06:10,080
is not only he will be helping you
in your jobs in during the classes right.

3631
04:06:10,080 --> 04:06:12,440
And doing the assignments

3632
04:06:12,480 --> 04:06:16,000
the sisters the

3633
04:06:17,200 --> 04:06:19,440
they always have this benefit

3634
04:06:19,440 --> 04:06:21,920
from the brother so rules

3635
04:06:21,920 --> 04:06:25,640
for method overriding
so three more minutes

3636
04:06:25,960 --> 04:06:30,400
so first rule very simple must be
it must be is a relationship.

3637
04:06:30,600 --> 04:06:33,120
There must be inheritance

3638
04:06:35,240 --> 04:06:38,080
method must have the same name

3639
04:06:38,360 --> 04:06:42,440
as in the parent class and child class.

3640
04:06:42,440 --> 04:06:48,600
Okay, so same name, same names,
method must have same parameters.

3641
04:06:48,720 --> 04:06:54,120
Well, while this condition
also there are overloading guys,

3642
04:06:54,120 --> 04:06:58,360
should we be having same parameters
for method overloading as well?

3643
04:06:58,680 --> 04:07:04,520
What was the condition
about parameters in overloading?

3644
04:07:04,520 --> 04:07:07,080
They should always be different.

3645
04:07:07,440 --> 04:07:09,000
They should always be different

3646
04:07:09,960 --> 04:07:11,640
either in numbers

3647
04:07:11,640 --> 04:07:13,800
or in sequence or in type

3648
04:07:15,240 --> 04:07:15,840
method.

3649
04:07:15,840 --> 04:07:19,120
They must have the same return type
lost this condition,

3650
04:07:19,560 --> 04:07:22,200
therefore overloading

3651
04:07:25,040 --> 04:07:25,960
or overloading.

3652
04:07:25,960 --> 04:07:30,760
We don't care about the return type,
but in all the writing

3653
04:07:31,080 --> 04:07:35,040
we hear about return type it must be same.

3654
04:07:36,320 --> 04:07:41,480
Okay, so this is just an example.

3655
04:07:41,760 --> 04:07:43,360
There is this walking class.

3656
04:07:43,360 --> 04:07:48,360
The man is extending from walking
and he is giving his own implementation

3657
04:07:53,760 --> 04:07:55,560
the method signature.

3658
04:07:55,560 --> 04:08:00,600
That is the method name
and the parameter list and the return type

3659
04:08:00,600 --> 04:08:03,920
have to match exactly in super

3660
04:08:03,920 --> 04:08:07,920
and subclasses for overriding.

3661
04:08:07,920 --> 04:08:10,960
Also, there is a restriction
about the excess modifier.

3662
04:08:10,960 --> 04:08:15,080
Was there a restriction about
the excess modifier in overloading guys?

3663
04:08:16,320 --> 04:08:22,520
The no

3664
04:08:22,800 --> 04:08:27,080
and there was no restriction
on access modifiers,

3665
04:08:27,080 --> 04:08:30,120
but in overriding excess

3666
04:08:30,120 --> 04:08:33,720
level can cannot be more restrictive.

3667
04:08:34,240 --> 04:08:36,920
Okay. What does this mean? It means

3668
04:08:38,360 --> 04:08:41,040
if I have

3669
04:08:41,360 --> 04:08:44,040
public access modified in here,

3670
04:08:45,520 --> 04:08:48,120
I can not make it to default

3671
04:08:48,640 --> 04:08:51,480
or private or protected.

3672
04:08:51,480 --> 04:08:54,600
I cannot make it more restrictive.

3673
04:08:54,920 --> 04:09:00,880
But if I have default,
I can make it public.

3674
04:09:00,880 --> 04:09:06,480
So I can increase the visibility,
but I cannot decrease visibility.

3675
04:09:06,520 --> 04:09:07,240
Okay.

3676
04:09:08,040 --> 04:09:10,840
Is this point player guys

3677
04:09:12,840 --> 04:09:13,720
perfect?

3678
04:09:16,080 --> 04:09:17,400
The access level

3679
04:09:17,400 --> 04:09:21,240
cannot be more restrictive. Yes.

3680
04:09:21,480 --> 04:09:25,440
If parent has public
child must have at least public,

3681
04:09:26,400 --> 04:09:29,080
then the overridden
method of access level.

3682
04:09:29,080 --> 04:09:32,240
For example,
if superclass method is declared public,

3683
04:09:33,320 --> 04:09:36,200
then overriding method in some class

3684
04:09:36,200 --> 04:09:40,360
cannot be private default or work after.

3685
04:09:40,360 --> 04:09:42,600
So I just wanted to complete this slide

3686
04:09:43,920 --> 04:09:47,760
so that I can give you some tasks

3687
04:09:48,040 --> 04:09:50,520
and we will cover the differences.

3688
04:09:50,520 --> 04:09:52,920
What is not possible in overriding

3689
04:09:54,000 --> 04:09:57,600
and then the difference
between overloading and overriding.

3690
04:09:57,600 --> 04:09:59,840
We will we will be doing two more examples

3691
04:10:00,600 --> 04:10:03,080
and then we will start
your favorite topic.

3692
04:10:03,720 --> 04:10:10,800
Yeah, thank you.

3693
04:10:10,800 --> 04:10:15,160
So I have shared the homework
in the course announcement.

3694
04:10:15,160 --> 04:10:17,280
Oh, it's not that difficult.

3695
04:10:17,280 --> 04:10:18,360
I was just kidding You

3696
04:10:20,160 --> 04:10:21,200
are. You guys will see it.

3697
04:10:21,200 --> 04:10:22,920
It's very easy.

3698
04:10:22,920 --> 04:10:24,200
No, no, it's not that hard.

3699
04:10:24,200 --> 04:10:25,840
Like it is very simple.

3700
04:10:25,840 --> 04:10:28,480
Only I'm in three slides, I guess.

3701
04:10:28,880 --> 04:10:31,080
So it's very similar to casting.

3702
04:10:31,080 --> 04:10:33,880
If you guys understand
the casting in primitives

3703
04:10:34,200 --> 04:10:37,080
that is actually casting in objects,
there's

3704
04:10:37,080 --> 04:10:40,320
there's the difference.

3705
04:10:40,320 --> 04:10:41,880
I am not really single.

3706
04:10:41,880 --> 04:10:43,320
I am dating myself.

3707
04:10:43,320 --> 04:10:45,920
I take myself out,

3708
04:10:45,960 --> 04:10:48,240
I buy myself clothes, I love me.

3709
04:10:48,240 --> 04:10:51,000
I am awesome.

3710
04:10:51,000 --> 04:10:53,080
Sandy slide please Overwriting.

3711
04:10:53,120 --> 04:10:56,880
Yes, I even send the slides from the class

3712
04:10:56,880 --> 04:11:00,560
and I will share the video as well

3713
04:11:03,200 --> 04:11:05,840
and I hope to have us to this class.

3714
04:11:05,840 --> 04:11:06,440
My manager.

3715
04:11:06,440 --> 04:11:16,600
You are not cannot override my really
if she is not accessible.

3716
04:11:16,600 --> 04:11:17,600
All right.

3717
04:11:17,600 --> 04:11:21,360
Take some rest and I will see you to model

3718
04:11:21,960 --> 04:11:28,000
and hopefully my mode will be same
tomorrow.

3719
04:11:28,000 --> 04:11:31,040
Thank you. Bye bye.
