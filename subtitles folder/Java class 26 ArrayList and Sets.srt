1
00:00:09,560 --> 00:00:10,560
Good morning.

2
00:00:10,560 --> 00:00:12,640
Good morning. Theme.

3
00:00:13,200 --> 00:00:14,440
Hello. Hello.

4
00:00:14,440 --> 00:00:16,840
How are you guys?

5
00:00:18,320 --> 00:00:20,520
I know.

6
00:00:26,160 --> 00:00:27,120
That's good.

7
00:00:27,240 --> 00:00:29,800
Well, listen, there's been a

8
00:00:32,880 --> 00:00:36,440
you know, I cannot say it was bad, right?

9
00:00:36,480 --> 00:00:38,760
I always have to say it was great. It's

10
00:00:44,000 --> 00:00:47,360
Alec Costello.

11
00:00:52,760 --> 00:00:56,160
Well, because is.

12
00:00:56,160 --> 00:01:07,200
I'm doing great.

13
00:01:07,200 --> 00:01:20,080
I mean,

14
00:01:20,680 --> 00:01:24,640
so we didn't do this task last year.

15
00:01:25,080 --> 00:01:27,440
Let's start from this task.

16
00:01:27,440 --> 00:01:31,080
And before we start,
if you guys have any questions,

17
00:01:31,360 --> 00:01:33,520
ask me where I can ask

18
00:01:39,360 --> 00:01:42,440
one morning and all.

19
00:01:43,960 --> 00:01:46,640
Do you guys can you guys see

20
00:01:46,960 --> 00:01:59,640
videos from other groups
as well on Flipboard?

21
00:01:59,640 --> 00:02:04,360
Try to watch the videos from other
especially from, you know, Sebastian,

22
00:02:04,760 --> 00:02:08,280
the way they have explained things

23
00:02:09,720 --> 00:02:13,080
slowly, peacefully and with examples.

24
00:02:13,920 --> 00:02:18,120
It's good
if you guys are explaining in this way

25
00:02:18,120 --> 00:02:20,840
it will be good.

26
00:02:21,160 --> 00:02:22,520
I saw from Alan.

27
00:02:22,520 --> 00:02:26,440
Okay, so I have only watch
the videos from the group

28
00:02:27,680 --> 00:02:29,760
and all and all that belong.

29
00:02:29,760 --> 00:02:32,160
But I will try to watch
the remaining videos

30
00:02:32,160 --> 00:02:34,800
and then I will share the feedback
with you guys.

31
00:02:36,720 --> 00:02:38,640
But why do they.

32
00:02:38,640 --> 00:02:41,040
We are
you have seen it like 8 to 10 people.

33
00:02:41,640 --> 00:02:43,680
It was it was great.

34
00:02:43,680 --> 00:02:46,920
As compared to the previous videos
that you guys

35
00:02:46,920 --> 00:02:49,320
recorded.

36
00:02:50,560 --> 00:02:51,320
Good morning.

37
00:02:51,320 --> 00:03:11,520
Morning.

38
00:03:11,760 --> 00:03:15,480
I want you to feel worse
so that you guys keep on improving

39
00:03:15,480 --> 00:03:20,600
slowly and Carmen does not work with me.

40
00:03:20,600 --> 00:03:23,640
So let me let me put the

41
00:03:23,840 --> 00:03:26,280
this last task as well in here.

42
00:03:28,000 --> 00:03:30,240
I saw I a great improvement for

43
00:03:30,240 --> 00:03:32,280
Illini as well as compared to last time.

44
00:03:33,240 --> 00:03:34,960
So I will share the feedback.

45
00:03:34,960 --> 00:03:37,320
Personal.

46
00:03:39,000 --> 00:03:43,560
Okay, let's do this
task inside this class.

47
00:03:43,560 --> 00:03:48,040
25, the last task

48
00:03:49,520 --> 00:03:50,720
task for you

49
00:03:57,200 --> 00:03:57,880
and in the

50
00:03:57,880 --> 00:04:00,080
task find you guys had to

51
00:04:05,280 --> 00:04:07,400
create a web driver interface

52
00:04:09,680 --> 00:04:13,560
to create driver interface

53
00:04:17,440 --> 00:04:19,480
and define

54
00:04:20,600 --> 00:04:24,120
matters like open floors and open.

55
00:04:24,800 --> 00:04:31,320
So wide open

56
00:04:34,200 --> 00:04:36,800
or with

57
00:04:45,680 --> 00:04:48,920
inward.

58
00:04:52,120 --> 00:04:56,680
Then we have to create another interface,

59
00:04:56,680 --> 00:04:58,760
big screen shortcut interface.

60
00:05:00,480 --> 00:05:03,600
So let's create that in here.

61
00:05:03,600 --> 00:05:05,680
Interface

62
00:05:07,400 --> 00:05:09,960
is not a string title.

63
00:05:11,480 --> 00:05:13,640
Oh yes, you are right.

64
00:05:13,840 --> 00:05:15,000
Next you

65
00:05:19,560 --> 00:05:22,480
the screenshot

66
00:05:35,160 --> 00:05:37,360
and get screenshot.

67
00:05:39,120 --> 00:05:49,040
The method here.

68
00:05:49,040 --> 00:05:51,200
What is the return type
for this screenshot?

69
00:05:52,080 --> 00:05:54,920
Is it wide in real life?

70
00:05:54,920 --> 00:05:58,080
They will give like this pictures job

71
00:05:59,520 --> 00:06:03,280
or not in real life they will give like

72
00:06:04,520 --> 00:06:06,280
this picture in

73
00:06:06,280 --> 00:06:08,360
Can you can you do you face your question

74
00:06:09,440 --> 00:06:11,560
interview maybe

75
00:06:13,920 --> 00:06:16,880
Oh no in on your jobs.

76
00:06:16,880 --> 00:06:19,760
If you are building a framework,

77
00:06:20,320 --> 00:06:24,320
there will be a requirement document
as authorities.

78
00:06:24,480 --> 00:06:26,520
There are many different types
of documents

79
00:06:26,520 --> 00:06:28,520
and everything will be clearly explained.

80
00:06:29,720 --> 00:06:31,320
And if something is not clear,

81
00:06:31,320 --> 00:06:36,600
you guys will be having team
leads and architect and you will

82
00:06:37,680 --> 00:06:38,360
be is.

83
00:06:38,360 --> 00:06:40,600
So you can always consult with those.

84
00:06:41,240 --> 00:06:43,640
If some requirements are not clear

85
00:06:43,640 --> 00:06:46,880
and if your team is small,
you can directly ask the client as well.

86
00:06:46,880 --> 00:06:49,960
You can also ask for pictures
or further explanation.

87
00:06:49,960 --> 00:06:53,160
You will be having meetings
that will not be a problem.

88
00:06:53,160 --> 00:07:02,040
Don't worry about the requirement.

89
00:07:02,040 --> 00:07:06,720
And then we have the remote web driver
interface

90
00:07:08,160 --> 00:07:10,960
and under the interface

91
00:07:12,120 --> 00:07:13,680
the remote

92
00:07:14,840 --> 00:07:20,600
web driver, and it has the navigate

93
00:07:20,640 --> 00:07:26,040
method,

94
00:07:26,040 --> 00:07:30,440
avoid, navigate

95
00:07:32,720 --> 00:07:34,840
In this remote web driver,

96
00:07:35,920 --> 00:07:39,840
it is inheriting from web driver
and takes screenshot.

97
00:07:40,080 --> 00:07:43,160
So what is the key word
that I should use guide

98
00:07:43,320 --> 00:07:45,960
if I want to inherit
from another interface

99
00:07:48,720 --> 00:07:50,160
extends right.

100
00:07:50,160 --> 00:07:54,960
So extend the screenshot and then extends

101
00:07:58,040 --> 00:08:02,200
subscribe.

102
00:08:02,200 --> 00:08:05,920
And then you guys had to create

103
00:08:05,920 --> 00:08:09,720
three classes Chrome Driver,
Firefox and Safari Driver

104
00:08:10,240 --> 00:08:14,160
in which you guys had to implement
all of these methods.

105
00:08:15,600 --> 00:08:19,520
So last

106
00:08:20,040 --> 00:08:24,120
grown driver.

107
00:08:24,120 --> 00:08:28,400
And now if I have the implementing
methods, should I use the expense keyword

108
00:08:30,840 --> 00:08:31,960
of implement?

109
00:08:31,960 --> 00:08:37,480
So chrome driver implements
which interface I should implement?

110
00:08:37,880 --> 00:08:39,760
Do I need to implement all of these?

111
00:08:39,760 --> 00:08:43,840
All three of these?

112
00:08:43,840 --> 00:08:46,840
No, I only need to implement

113
00:08:46,840 --> 00:08:50,280
the remote web driver

114
00:08:50,280 --> 00:08:55,760
and if I press all to enter on Windows,

115
00:08:55,760 --> 00:08:58,400
I can implement all the matters like this

116
00:09:00,320 --> 00:09:01,760
because it has everything.

117
00:09:01,760 --> 00:09:04,600
So let me put some printouts

118
00:09:42,880 --> 00:09:44,400
was the shortcut.

119
00:09:44,400 --> 00:09:46,760
Sorry I didn't pay attention format.

120
00:09:47,040 --> 00:09:49,440
It was options and enter

121
00:10:29,120 --> 00:10:32,080
it. Is

122
00:10:32,080 --> 00:10:34,760
it okay if
I created the next class as well in here?

123
00:10:35,320 --> 00:10:39,560
But finger title do
we need to give parameter in our or not?

124
00:10:40,280 --> 00:10:42,320
It's a simple

125
00:10:43,160 --> 00:10:48,160
exercise to practice the inheritance
and interface implementation.

126
00:10:48,160 --> 00:10:51,360
So don't worry about giving parameters
to this method

127
00:10:51,840 --> 00:10:55,440
because even if you see in this picture,
there are no parameters

128
00:10:55,440 --> 00:10:57,800
that are being passed
to any of these methods.

129
00:10:58,760 --> 00:11:01,000
So you guys had to implement this picture.

130
00:11:01,440 --> 00:11:04,560
So that's why
we don't need to place any parameters.

131
00:11:06,160 --> 00:11:08,040
So class

132
00:11:11,720 --> 00:11:13,560
Firefox

133
00:11:17,000 --> 00:11:20,160
Driver Welcome,

134
00:11:20,160 --> 00:11:25,600
implement.

135
00:11:25,600 --> 00:11:28,320
Let's bring more private

136
00:11:29,720 --> 00:11:33,240
new You guys explore the methods from Top

137
00:11:33,240 --> 00:11:42,960
end our classes.

138
00:11:42,960 --> 00:11:46,320
Actually let me copy

139
00:11:48,320 --> 00:12:17,040
the matters from here.

140
00:12:17,040 --> 00:12:19,840
You pass

141
00:12:23,600 --> 00:12:25,560
Safari driver

142
00:12:25,560 --> 00:12:28,800
which also implements

143
00:12:28,960 --> 00:12:33,800
a little

144
00:12:34,240 --> 00:12:36,840
or then yes try to explore them

145
00:12:36,960 --> 00:12:40,920
because they are really helpful and
copy these methods are being

146
00:12:46,240 --> 00:12:49,960
let me replace

147
00:12:50,400 --> 00:12:52,400
Firefox

148
00:12:55,200 --> 00:12:59,080
with Safari

149
00:13:01,240 --> 00:13:01,960
because

150
00:13:16,040 --> 00:13:18,120
now we have implemented

151
00:13:20,120 --> 00:13:22,320
how to replace word shortcut.

152
00:13:22,320 --> 00:13:26,040
It's control are Sebastian control are

153
00:13:29,120 --> 00:13:29,760
okay.

154
00:13:29,760 --> 00:13:32,600
So can you send me the

155
00:13:34,080 --> 00:13:37,200
polymorphism implementation

156
00:13:37,200 --> 00:13:43,680
for this task?

157
00:13:43,680 --> 00:13:54,200
Create the driver

158
00:13:56,280 --> 00:13:58,320
that's for the class

159
00:14:05,240 --> 00:14:10,800
you mean

160
00:14:10,800 --> 00:14:18,720
method?

161
00:14:18,720 --> 00:14:20,680
Are you guys able to follow me?

162
00:14:20,680 --> 00:14:28,240
Is anyone following me?

163
00:14:28,240 --> 00:14:32,520
That means you guys are now great
at typing and coding.

164
00:14:32,520 --> 00:14:35,440
Was this task homework? No, it was.

165
00:14:35,440 --> 00:14:36,880
It was

166
00:14:37,320 --> 00:14:39,360
in your group project

167
00:14:39,880 --> 00:15:02,720
in group project.

168
00:15:02,720 --> 00:15:04,680
You are too fast.

169
00:15:04,680 --> 00:15:08,160
Do you guys want me to slow down

170
00:15:12,800 --> 00:15:15,280
or. Yeah.

171
00:15:15,600 --> 00:15:21,480
No, we will.

172
00:15:21,480 --> 00:15:25,880
As the all email is

173
00:15:27,040 --> 00:15:29,160
using

174
00:15:29,320 --> 00:15:31,120
these

175
00:15:31,120 --> 00:15:37,080
the cloud.

176
00:15:37,080 --> 00:15:42,360
It looks like you
in this issue for yourself.

177
00:15:42,360 --> 00:15:44,520
Okay, so you guys can always stop me.

178
00:15:44,520 --> 00:15:47,400
Let me know once you guys are done typing

179
00:16:01,600 --> 00:16:02,240
and let me know

180
00:16:02,240 --> 00:16:05,240
if you guys want me to scroll down a lot.

181
00:16:05,280 --> 00:16:07,600
Because this shortcut so far worked.

182
00:16:07,600 --> 00:16:08,680
Not good.

183
00:16:09,000 --> 00:16:10,240
I just don't feel good.

184
00:16:10,240 --> 00:16:12,800
That's why I am not responding as much.

185
00:16:13,320 --> 00:16:14,640
No, no. I want you to.

186
00:16:14,640 --> 00:16:17,640
I want you to respond
and I want you to follow.

187
00:16:17,640 --> 00:16:20,800
Whenever I am typing something,
I always want you to

188
00:16:20,800 --> 00:16:24,880
follow.

189
00:16:24,880 --> 00:16:27,680
Option Enter does not look good.

190
00:16:27,720 --> 00:16:31,240
You are using Windows or Mac

191
00:16:31,560 --> 00:16:34,040
and no Hartmut, I don't want you to copy.

192
00:16:34,040 --> 00:16:37,360
I want you to type with me.

193
00:16:37,360 --> 00:16:40,920
Yes, I can scroll down

194
00:16:42,520 --> 00:16:43,320
to the fast.

195
00:16:43,320 --> 00:16:45,600
Anyway, please share this when you finish.

196
00:16:45,600 --> 00:16:48,600
No, I don't want you guys to copy me.

197
00:16:48,600 --> 00:16:51,400
I want you to type with me.

198
00:16:51,400 --> 00:16:53,200
That's what I was trying my.

199
00:16:53,200 --> 00:16:54,720
Why are you guys the desktop? Me

200
00:16:57,440 --> 00:16:58,640
in a YouTube videos?

201
00:16:58,640 --> 00:17:00,680
We have option to play fast or slow.

202
00:17:02,040 --> 00:17:04,200
I have met so it will be options

203
00:17:04,200 --> 00:17:08,520
and enter. Yes.

204
00:17:08,520 --> 00:17:11,480
We have so many

205
00:17:22,280 --> 00:17:23,120
in your time.

206
00:17:23,120 --> 00:17:25,200
Don't right. Type it.

207
00:17:25,200 --> 00:17:27,240
I want you to type it all

208
00:17:27,880 --> 00:17:31,840
using the shortcuts, copying and pasting
using be replaced.

209
00:17:31,840 --> 00:17:36,080
But all of these skills
they will be very very helpful

210
00:17:36,200 --> 00:17:40,240
in your jobs when you guys will be dealing
with large projects

211
00:17:40,240 --> 00:17:44,640
and you guys will be writing the code,
you will be much, much faster

212
00:17:45,080 --> 00:17:47,400
in typing and writing the code.

213
00:17:47,760 --> 00:17:54,080
If you guys know all these tricks,
I means copy, I will write them down.

214
00:17:54,080 --> 00:18:05,760
Okay, so you are one of those format.

215
00:18:05,960 --> 00:18:09,960
So for example, when I used to copy paste
assignments in my bachelors,

216
00:18:10,760 --> 00:18:13,920
I was one of those who used to understand

217
00:18:13,920 --> 00:18:17,080
that assignment
as well, not just copying and pasting

218
00:18:32,400 --> 00:18:35,160
for windows. It's

219
00:18:35,200 --> 00:18:37,320
old and enter

220
00:18:46,200 --> 00:18:46,640
that.

221
00:18:47,000 --> 00:18:47,800
Are you Officer?

222
00:18:47,800 --> 00:18:59,040
Look,

223
00:18:59,040 --> 00:19:02,680
are you guys done writing Bill Line 40?

224
00:19:03,480 --> 00:19:17,480
Is there anyone who is still writing
this piece of code?

225
00:19:17,480 --> 00:19:20,240
Okay, let me scroll down then

226
00:19:53,240 --> 00:19:54,720
and try to use the shortcuts.

227
00:19:54,720 --> 00:20:05,920
Guys.

228
00:20:05,920 --> 00:20:09,480
By the way, I didn't
I didn't understand what you said

229
00:20:09,480 --> 00:20:12,600
at the end of your
at the end of the recording.

230
00:20:12,600 --> 00:20:57,280
I think it was in the native language.

231
00:20:57,280 --> 00:21:00,000
How do you replace that
word on multiple lines?

232
00:21:00,000 --> 00:21:01,440
By different ones.

233
00:21:01,440 --> 00:21:05,520
Control are
so you have to press control are

234
00:21:06,880 --> 00:21:10,200
then you specify the word
that you want to replace.

235
00:21:10,920 --> 00:21:13,960
Whom did you not understand?

236
00:21:13,960 --> 00:21:20,360
Oh, I was talking about the recordings, so

237
00:21:21,400 --> 00:21:24,600
I re now
said something in her native language

238
00:21:24,960 --> 00:21:29,320
at the end of her video.

239
00:21:29,320 --> 00:21:34,560
And then the words that you guys
want to replace this word with.

240
00:21:35,160 --> 00:21:39,280
And then once you fill these two boxes,

241
00:21:39,280 --> 00:21:42,760
it will highlight
the words that will be replaced.

242
00:21:42,760 --> 00:21:43,680
So, for example,

243
00:21:45,080 --> 00:21:47,760
I hear Katrina, so

244
00:21:50,960 --> 00:21:53,680
so then you guys can

245
00:21:54,960 --> 00:21:57,960
press this replace button.

246
00:21:57,960 --> 00:22:01,920
I guess I start adding maybe,
maybe there is some kind of network issue.

247
00:22:01,920 --> 00:22:05,040
So and if you want to replace all of them,
you can replace this.

248
00:22:05,040 --> 00:22:08,360
Replace all or replace
will start replacing from here.

249
00:22:08,360 --> 00:22:10,640
And it will replace
all the highlighted words.

250
00:22:11,120 --> 00:22:15,360
And if you don't want to replace anything,
you can press this downwards.

251
00:22:15,360 --> 00:22:16,160
Arrow

252
00:22:18,000 --> 00:22:20,520
to replace the next one.

253
00:22:20,520 --> 00:22:22,080
So you see it has moved in here.

254
00:22:22,080 --> 00:22:28,400
So now it will start replacing from here.

255
00:22:28,400 --> 00:22:31,400
And if you want to replace all of them,
you can select based

256
00:22:34,400 --> 00:22:35,920
in, then you have the options

257
00:22:35,920 --> 00:22:39,760
to replace in only commands
and string literals.

258
00:22:39,760 --> 00:22:45,680
Accept commands,
accept strings frozen all of that.

259
00:22:45,680 --> 00:22:57,520
And you guys can also
learn about this from you.

260
00:22:57,520 --> 00:23:07,280
You guys aren't typing this code.

261
00:23:07,280 --> 00:23:31,440
All of it.

262
00:23:31,440 --> 00:23:34,840
Now in here
we are just creating three objects

263
00:23:35,600 --> 00:23:38,360
of chrome driver Firefox and Safari

264
00:23:39,360 --> 00:23:41,360
and we are floating it inside

265
00:23:41,360 --> 00:23:46,200
the remote web driver.

266
00:23:46,200 --> 00:23:48,760
So why you have written this?

267
00:23:48,760 --> 00:23:51,280
If health conditions

268
00:23:54,840 --> 00:23:55,400
is an order,

269
00:23:55,400 --> 00:24:02,640
the same method
that is available inside all the classes?

270
00:24:02,640 --> 00:24:05,040
I don't think so.
I don't think we need this.

271
00:24:05,480 --> 00:24:07,560
If health conditions

272
00:24:22,440 --> 00:24:24,800
because put parameter in title

273
00:24:26,000 --> 00:24:30,800
just to use it for practice.

274
00:24:30,800 --> 00:24:36,280
What?

275
00:24:36,280 --> 00:24:39,760
So I see the output I do the same

276
00:24:40,080 --> 00:24:47,480
or from all the browsers.

277
00:24:47,480 --> 00:24:49,960
Are there any questions from this task?

278
00:24:49,960 --> 00:24:59,800
Guys.

279
00:24:59,800 --> 00:25:02,080
All right then.

280
00:25:02,120 --> 00:25:20,120
I closed these two files.

281
00:25:20,120 --> 00:25:23,080
We create a new

282
00:25:31,320 --> 00:25:53,120
26 or 60.

283
00:25:53,120 --> 00:25:58,080
So in the last class
we started learning about,

284
00:25:58,080 --> 00:26:01,760
can I ask
name of the class cannot be released?

285
00:26:01,760 --> 00:26:03,840
Yes, it can be released.

286
00:26:04,080 --> 00:26:07,560
You can have this name,
but then there will be a conflict

287
00:26:08,280 --> 00:26:13,560
because Java always prefers
the classes that are created by you.

288
00:26:13,920 --> 00:26:17,120
It will always look for the methods
from your class

289
00:26:17,240 --> 00:26:21,680
instead of the classes
that are in JDK from Java guys.

290
00:26:21,920 --> 00:26:24,320
So you will not be able
to call those matters.

291
00:26:24,320 --> 00:26:25,680
But yes, yes, you can create.

292
00:26:25,680 --> 00:26:32,600
But this is the problem that you will get.

293
00:26:32,600 --> 00:26:35,440
So keep it simple and board.

294
00:26:36,120 --> 00:26:38,640
Call it dog. Yes, Sebastian

295
00:26:39,920 --> 00:26:40,520
Alert guys.

296
00:26:40,520 --> 00:26:43,840
So we
started learning about the wrapper classes

297
00:26:44,960 --> 00:26:47,160
and you guys tell me, what is that

298
00:26:47,160 --> 00:26:55,000
upper class.

299
00:26:55,000 --> 00:27:10,080
So object

300
00:27:10,080 --> 00:27:12,760
type of primitive variables.

301
00:27:13,640 --> 00:27:30,280
Okay, but

302
00:27:30,680 --> 00:27:34,440
upper
type of primitive variable assignment,

303
00:27:34,520 --> 00:27:41,040
do you mean by upper type
way to use primitive types inside and use?

304
00:27:41,040 --> 00:27:42,720
We have now

305
00:27:43,120 --> 00:27:45,480
it's a class for each primitive variable.

306
00:27:46,320 --> 00:27:52,360
So wrapper

307
00:27:54,320 --> 00:27:57,200
wrapper classes are

308
00:28:00,600 --> 00:28:03,120
object classes

309
00:28:08,400 --> 00:28:09,960
around

310
00:28:12,240 --> 00:28:13,800
primitive

311
00:28:14,400 --> 00:28:17,920
types that have

312
00:28:19,800 --> 00:28:21,320
building

313
00:28:22,240 --> 00:28:24,000
methods

314
00:28:30,680 --> 00:28:33,440
and are used

315
00:28:34,640 --> 00:28:37,000
as objects

316
00:28:38,400 --> 00:28:39,440
where

317
00:28:41,600 --> 00:28:46,080
necessity.

318
00:28:46,080 --> 00:28:49,240
So they are simple classes
that are built around

319
00:28:49,240 --> 00:28:53,480
the primitive data types.

320
00:28:53,480 --> 00:28:56,760
Wrapper classes are object
classes around primitive

321
00:28:56,760 --> 00:29:00,360
that are type that have built in
returns are not used as objects.

322
00:29:00,360 --> 00:29:04,520
We are necessity.

323
00:29:04,520 --> 00:29:08,760
For example, in

324
00:29:13,560 --> 00:29:27,080
collection.

325
00:29:27,080 --> 00:29:29,080
And what are the what?

326
00:29:29,080 --> 00:29:31,920
What is this
concept of boxing and unboxing

327
00:29:38,160 --> 00:29:42,000
wrapper classes provide us

328
00:29:48,120 --> 00:29:49,640
provide us

329
00:29:51,440 --> 00:29:55,520
a mechanism

330
00:29:57,600 --> 00:29:59,520
to use primitive data types

331
00:29:59,520 --> 00:30:04,320
as objects.

332
00:30:04,320 --> 00:30:08,280
The automatic convergence
of primitive data type

333
00:30:08,440 --> 00:30:10,920
into its equivalent wrapper

334
00:30:13,560 --> 00:30:14,680
or third

335
00:30:19,040 --> 00:30:20,520
boxing

336
00:30:28,680 --> 00:30:30,000
is the

337
00:30:51,120 --> 00:30:53,760
automatic convergence of primitive data

338
00:30:53,760 --> 00:30:56,280
types into its equivalent wrapper

339
00:31:02,680 --> 00:31:07,040
is filed.

340
00:31:07,040 --> 00:31:09,720
Boxing is not automatic.

341
00:31:09,720 --> 00:31:13,960
Yes, it's not automatic.

342
00:31:14,320 --> 00:31:18,440
You have to punch someone first,
then the boxing starts.

343
00:31:18,440 --> 00:31:19,160
Right?

344
00:31:19,320 --> 00:31:25,320
It's not automatic.

345
00:31:25,320 --> 00:31:38,880
So because of convergence
of primitive data,

346
00:31:38,880 --> 00:31:42,400
type into its equivalent
wrapper class is called

347
00:31:45,120 --> 00:31:46,320
boxing

348
00:31:51,800 --> 00:31:55,800
or belt.

349
00:31:55,800 --> 00:31:58,080
If we type

350
00:31:58,080 --> 00:31:59,760
integer

351
00:32:00,120 --> 00:32:04,160
I equal to narrow in bigger

352
00:32:06,760 --> 00:32:09,960
and then we pass a primitive.

353
00:32:09,960 --> 00:32:12,200
Then it is called

354
00:32:12,480 --> 00:32:16,680
in boxing.

355
00:32:16,680 --> 00:32:25,160
But in the art of boxing

356
00:32:34,640 --> 00:32:35,680
is they

357
00:32:36,600 --> 00:32:38,960
are called pneumatic

358
00:32:42,200 --> 00:32:44,400
and virgin of primitive are type

359
00:32:46,600 --> 00:32:47,680
into execution.

360
00:32:47,680 --> 00:32:48,880
Purpose

361
00:32:49,920 --> 00:32:51,360
is called

362
00:32:54,400 --> 00:33:08,640
R2 in boxing.

363
00:33:08,640 --> 00:33:13,760
So for example, instead of this
we simply stay.

364
00:33:13,760 --> 00:33:18,600
I is equal to kind still we are doing
the same thing, exact same thing.

365
00:33:19,440 --> 00:33:22,560
But in here we are simply assigning

366
00:33:22,560 --> 00:33:25,840
this primitive to the wrapper type.

367
00:33:26,360 --> 00:33:27,240
So this is called

368
00:33:28,440 --> 00:33:31,080
auto boxing,
so you can think of it like this.

369
00:33:31,440 --> 00:33:32,600
So this is a wrapper class.

370
00:33:32,600 --> 00:33:35,000
This is a box.

371
00:33:35,000 --> 00:33:37,880
And inside this box

372
00:33:37,880 --> 00:33:42,000
we have this integer.

373
00:33:42,000 --> 00:33:51,480
So when we are placing this integer
inside this box, it is called boxing.

374
00:33:51,480 --> 00:33:54,560
And when we get back out of this box,

375
00:33:56,040 --> 00:33:57,800
we call it

376
00:33:59,040 --> 00:34:00,840
unboxing

377
00:34:06,360 --> 00:34:07,560
like this

378
00:34:32,320 --> 00:34:48,840
is the conversion of wrapper.

379
00:34:48,840 --> 00:34:52,080
It will turn to primitive Dada type

380
00:34:55,480 --> 00:34:57,000
is called

381
00:34:58,080 --> 00:34:59,320
Unbox can ensure

382
00:34:59,320 --> 00:35:01,640
the result of previous task in console.

383
00:35:02,440 --> 00:35:06,120
Well, it's already in console before

384
00:35:08,000 --> 00:35:09,120
to make it

385
00:35:09,120 --> 00:35:14,160
so I hope you can still read it.

386
00:35:14,160 --> 00:35:17,480
The conversion of equivalent wrapper
to primitive data types

387
00:35:17,960 --> 00:35:20,680
is called unboxing.

388
00:35:20,680 --> 00:35:23,160
So for example, if we said

389
00:35:24,280 --> 00:35:26,480
and I is equal to

390
00:35:31,360 --> 00:35:40,160
I got the value of what we had

391
00:35:40,160 --> 00:35:47,480
is the title.

392
00:35:47,480 --> 00:35:54,600
I didn't call the title, let

393
00:35:56,120 --> 00:35:57,320
me check it.

394
00:35:57,320 --> 00:36:06,640
They call that title.

395
00:36:06,640 --> 00:36:08,960
I was expecting that

396
00:36:09,960 --> 00:36:12,320
I would see the output here

397
00:36:14,400 --> 00:36:16,680
and did I miss something

398
00:36:18,160 --> 00:36:20,520
or because I didn't print it out

399
00:36:22,680 --> 00:36:23,800
the string. Right.

400
00:36:23,800 --> 00:36:26,480
So you have to put it inside the printout

401
00:36:28,120 --> 00:36:29,480
of the

402
00:36:30,520 --> 00:36:32,640
let me know. It's

403
00:36:37,960 --> 00:36:41,120
in the title now.

404
00:36:41,120 --> 00:36:42,920
This is why he had this.

405
00:36:42,920 --> 00:36:44,240
None on. This is there.

406
00:36:44,240 --> 00:36:45,960
That's not the reason

407
00:36:46,800 --> 00:36:49,600
you guys take decisions very quickly.

408
00:36:49,880 --> 00:36:51,040
Very easy to confuse.

409
00:36:51,040 --> 00:36:52,000
You guys

410
00:36:52,880 --> 00:36:55,360
have faith in your concepts. No,

411
00:36:56,600 --> 00:36:59,120
that was not really that

412
00:37:01,680 --> 00:37:03,560
you guys are lightning fast.

413
00:37:03,560 --> 00:37:07,920
So if I ask something twice
and if your answer is yes,

414
00:37:07,920 --> 00:37:12,960
you quickly change it to no.

415
00:37:12,960 --> 00:37:17,280
Okay, But

416
00:37:33,360 --> 00:37:36,680
when I say no, I am rejecting
it is not right.

417
00:37:36,680 --> 00:37:40,200
What I said. Yes, it is not right.

418
00:37:40,200 --> 00:37:44,440
But this adviser, I

419
00:37:46,440 --> 00:37:48,240
hope it is not going to

420
00:37:48,240 --> 00:37:59,560
happen in the interview.

421
00:37:59,560 --> 00:38:03,680
So if I have already placed a value inside

422
00:38:04,560 --> 00:38:07,120
a wrapper class, you see the

423
00:38:07,120 --> 00:38:09,480
how I get back the value

424
00:38:11,040 --> 00:38:13,640
from that after the power of editing

425
00:38:13,640 --> 00:38:19,880
and deleting our customers.

426
00:38:19,880 --> 00:38:23,440
So this is how I can get the value back,

427
00:38:23,640 --> 00:38:25,680
the primitive value back from me

428
00:38:26,800 --> 00:38:37,600
wrapper, part time.

429
00:38:37,600 --> 00:38:40,160
I want you to have this confidence
in your interview,

430
00:38:40,280 --> 00:38:43,720
that interview
that you are born for this job.

431
00:38:44,160 --> 00:38:46,320
At least this is the interview
that I have read about.

432
00:38:46,320 --> 00:38:49,160
I am giving an interview to the companies

433
00:38:52,120 --> 00:39:00,840
and I stuck to the devil

434
00:39:00,840 --> 00:39:03,960
when I was five.

435
00:39:03,960 --> 00:39:06,040
Can you comment out next to the code

436
00:39:08,680 --> 00:39:11,120
and when you were born, you

437
00:39:20,520 --> 00:39:22,800
by the way, I am having a severe flu.

438
00:39:22,800 --> 00:39:24,640
We might have two days class

439
00:39:26,560 --> 00:39:27,760
ugly.

440
00:39:27,840 --> 00:39:32,040
Let's see how far I can go.

441
00:39:32,040 --> 00:39:35,760
So it is boxing.

442
00:39:35,880 --> 00:39:39,560
It is boxing happening here and it is

443
00:39:41,000 --> 00:39:42,600
unboxing.

444
00:39:42,600 --> 00:39:47,760
My son is getting interested
in forwarding.

445
00:39:47,760 --> 00:39:48,280
Okay.

446
00:39:48,280 --> 00:39:54,360
What do you think the age.

447
00:39:54,360 --> 00:39:55,440
Thank you.

448
00:39:55,440 --> 00:39:58,360
My mom tells a story about the job
and she pregnant

449
00:39:58,360 --> 00:40:12,040
with me. It's

450
00:40:14,400 --> 00:40:17,080
may and make him land
and he will never do easy.

451
00:40:17,160 --> 00:40:19,200
He will never ask you for anything.

452
00:40:19,440 --> 00:40:21,640
He will just ask you to give.

453
00:40:21,640 --> 00:40:23,320
He will be frozen

454
00:40:24,040 --> 00:40:25,320
is it

455
00:40:26,840 --> 00:40:28,920
will give your girlfriend to make a food

456
00:40:28,960 --> 00:40:32,320
since you are not willing will

457
00:40:32,520 --> 00:40:34,800
she will say make two soups, one for you

458
00:40:34,800 --> 00:40:41,720
and one for me.

459
00:40:41,720 --> 00:40:43,960
We all started together. You can get good.

460
00:40:43,960 --> 00:40:50,040
Do you guys remember the tears in scenes
like this bird to get a lot of money?

461
00:40:51,040 --> 00:40:58,920
But. All right,

462
00:40:59,760 --> 00:41:18,000
let me put.

463
00:41:18,000 --> 00:41:20,520
And it is auto unboxing

464
00:41:38,520 --> 00:41:41,680
and the awesome number of their dog class.

465
00:41:41,680 --> 00:41:43,560
Okay so this talked about thing

466
00:41:43,560 --> 00:41:48,440
not unboxing.

467
00:41:48,440 --> 00:42:12,560
Are there any questions arise from this?

468
00:42:12,560 --> 00:42:13,000
Yeah.

469
00:42:13,240 --> 00:42:25,600
So then we started about the collections
plain look right.

470
00:42:25,600 --> 00:42:28,520
Well what is this? Collections frame rate.

471
00:42:28,560 --> 00:42:29,880
A moment please.

472
00:42:29,880 --> 00:43:04,280
Yes. Dennis, do

473
00:43:04,440 --> 00:43:36,040
you guys want to scroll up?

474
00:43:36,040 --> 00:43:47,280
Do you have any question
or do you just want me to stop?

475
00:43:47,280 --> 00:43:48,240
I don't know.

476
00:43:48,240 --> 00:43:52,440
I think the little ones, they are
all they are always more smarter than the

477
00:43:53,640 --> 00:43:54,440
elder ones.

478
00:43:54,440 --> 00:44:07,800
Right?

479
00:44:07,800 --> 00:44:09,840
It just look like that.

480
00:44:09,840 --> 00:44:21,880
Learn fast.

481
00:44:21,880 --> 00:44:24,200
You know, we definitely

482
00:44:28,080 --> 00:44:28,440
already.

483
00:44:28,440 --> 00:44:30,480
Guys, can we move forward now?

484
00:44:30,480 --> 00:44:33,320
You mean five years old?

485
00:44:33,320 --> 00:44:34,320
Well, reliable.

486
00:44:34,320 --> 00:44:37,320
You have started discussing
how to family days.

487
00:44:37,320 --> 00:44:40,160
We are learning daily.

488
00:44:40,160 --> 00:44:41,160
Please come back

489
00:44:43,920 --> 00:44:46,120
with the

490
00:44:47,480 --> 00:44:49,040
Everyone is now.

491
00:44:49,040 --> 00:44:52,680
It looks like
everyone is from the government over to us

492
00:44:53,240 --> 00:44:54,960
All the paintings right.

493
00:44:54,960 --> 00:44:59,320
How many people working day
what are their ages and all that.

494
00:44:59,320 --> 00:45:01,360
All right I'm just kidding.

495
00:45:01,720 --> 00:45:04,240
So collections framework, guys.

496
00:45:04,240 --> 00:45:05,560
I am.

497
00:45:05,560 --> 00:45:10,960
I am still against that if I have kids.

498
00:45:10,960 --> 00:45:13,440
27 year old kid.

499
00:45:13,440 --> 00:45:17,200
So what is collections framework is

500
00:45:19,680 --> 00:45:20,840
collection framework.

501
00:45:20,840 --> 00:45:25,200
Help us reduce programing effort
and give us data structures

502
00:45:25,200 --> 00:45:27,760
that are easy to manipulate. Yep.

503
00:45:30,720 --> 00:45:41,160
So. Yep. Yep.

504
00:45:41,160 --> 00:46:08,640
I am 27.

505
00:46:08,640 --> 00:46:11,160
I think I got I got this flow from her.

506
00:46:12,000 --> 00:46:16,600
I will call her after the class.

507
00:46:16,600 --> 00:46:18,960
Looks like

508
00:46:21,680 --> 00:46:24,440
let good give you a long

509
00:46:31,280 --> 00:46:31,920
collection.

510
00:46:31,920 --> 00:46:34,920
Provides architecture to store

511
00:46:35,920 --> 00:46:38,120
and we have all the recording

512
00:46:38,680 --> 00:46:43,400
and they manipulate the group of
objects that are represented

513
00:46:44,760 --> 00:46:48,760
as single unit.

514
00:46:48,760 --> 00:46:53,280
We have many interfaces and

515
00:46:54,640 --> 00:46:55,920
classes

516
00:46:57,880 --> 00:47:00,480
inside the

517
00:47:01,200 --> 00:47:04,120
framework to

518
00:47:06,120 --> 00:47:19,200
achieve this.

519
00:47:19,200 --> 00:47:30,480
Thank you.

520
00:47:30,480 --> 00:47:33,920
Okay,
so there are many classes and interfaces

521
00:47:34,360 --> 00:47:38,160
and we started learning about one class

522
00:47:40,680 --> 00:47:42,120
in the last class gaining guys.

523
00:47:42,120 --> 00:47:44,160
Name that class,

524
00:47:44,520 --> 00:47:45,760
the ArrayList class.

525
00:47:45,760 --> 00:47:50,520
Right.

526
00:47:50,520 --> 00:47:55,240
And we also learned
about the diamond operator.

527
00:47:55,240 --> 00:48:02,640
And you guys tell me, what is the purpose
of that diamond operator. Yes.

528
00:48:03,560 --> 00:48:09,000
So it's called diamond Operator

529
00:48:09,000 --> 00:48:12,200
And why do we use them to diamond operator

530
00:48:12,200 --> 00:48:16,800
It is used to specify the

531
00:48:18,240 --> 00:48:21,240
data type in

532
00:48:23,160 --> 00:48:24,840
collections

533
00:48:24,840 --> 00:48:31,440
framework.

534
00:48:31,440 --> 00:48:34,440
All right.

535
00:48:34,440 --> 00:48:38,120
So let's say we want oops,
we want to create this

536
00:48:39,840 --> 00:48:40,680
ArrayList.

537
00:48:40,680 --> 00:48:42,280
We specify a string.

538
00:48:42,280 --> 00:48:42,720
Okay.

539
00:48:42,720 --> 00:48:45,160
Have you asking to match so many times?

540
00:48:45,640 --> 00:48:48,760
So let me use double

541
00:48:50,520 --> 00:48:53,880
unit export numbers.

542
00:48:53,880 --> 00:48:55,720
What was the other name for this

543
00:48:57,040 --> 00:49:00,080
genetics is this syntax for genetics.

544
00:49:00,800 --> 00:49:02,880
Genetics is a mechanism in Java

545
00:49:04,520 --> 00:49:06,960
that we used to generalize.

546
00:49:07,680 --> 00:49:10,480
So for example,
if you want to use the same class

547
00:49:10,480 --> 00:49:15,240
and same method for multiple data types,
we can use the genetics.

548
00:49:16,440 --> 00:49:21,640
So for example,
if you guys want to have a look.

549
00:49:21,640 --> 00:49:26,160
So for example, for example,
if you open the analyst class,

550
00:49:26,280 --> 00:49:29,280
you guys see this E if angle bracketing.

551
00:49:29,280 --> 00:49:34,400
D So this E means
when I will be creating the object of this

552
00:49:34,400 --> 00:49:37,800
class,
whatever data type I specify in here.

553
00:49:38,280 --> 00:49:41,720
So for example, while creating the object
type by specify a string

554
00:49:43,960 --> 00:49:45,040
java will replace

555
00:49:45,040 --> 00:49:48,720
all of this is with string listing.

556
00:49:48,880 --> 00:49:53,400
All of this is distinct
and this class will start

557
00:49:53,480 --> 00:49:57,640
behaving as if this class
was built to handle a string data type.

558
00:49:58,720 --> 00:50:00,840
If we specify integer,

559
00:50:00,840 --> 00:50:04,120
it will start behaving
as if this class was built for integers.

560
00:50:04,240 --> 00:50:08,720
So these genetics, you guys remember
when we were discussing about overloading,

561
00:50:08,720 --> 00:50:11,080
I told you how to reduce

562
00:50:12,960 --> 00:50:14,760
the that you guys have to write

563
00:50:14,760 --> 00:50:16,880
if you are dealing
with multiple data types.

564
00:50:17,920 --> 00:50:22,760
So we learned how we can use
those warthogs

565
00:50:23,120 --> 00:50:25,200
to handle multiple parameters.

566
00:50:26,040 --> 00:50:28,800
We discussed
how the automatic convergence happens

567
00:50:29,080 --> 00:50:32,600
and this was the last
last piece of the puzzle.

568
00:50:32,600 --> 00:50:37,440
So if you want to use the exact
same method for different data types,

569
00:50:38,000 --> 00:50:39,600
you guys can use the genetics.

570
00:50:39,600 --> 00:50:42,920
It's an advanced concept.

571
00:50:42,920 --> 00:50:46,080
If we had some time, we will

572
00:50:46,080 --> 00:50:48,880
is still speaking English.

573
00:50:48,880 --> 00:50:52,320
I am speaking Java, so we can we

574
00:50:53,160 --> 00:50:56,160
we will discuss about about this genetics.

575
00:50:56,400 --> 00:50:58,320
Okay.

576
00:50:58,320 --> 00:51:00,760
Public boolean and object element.

577
00:51:00,760 --> 00:51:02,720
Why is there method boolean?

578
00:51:03,960 --> 00:51:05,560
We are adding an object.

579
00:51:05,560 --> 00:51:09,800
So how to manage or falls
that are done by the element.

580
00:51:09,800 --> 00:51:12,960
So if you look at this

581
00:51:12,960 --> 00:51:24,600
add method, it takes this e.

582
00:51:25,280 --> 00:51:28,760
Now this e when you specify inside those

583
00:51:29,320 --> 00:51:33,680
that diamond operator, if it is a string,
it will become a string.

584
00:51:34,040 --> 00:51:37,520
The integer, it will become integer,
but the return type is always boolean.

585
00:51:38,120 --> 00:51:42,360
This return type tells us
if there was enough space

586
00:51:42,360 --> 00:51:45,920
on your computer
and your Java was successfully able

587
00:51:45,920 --> 00:51:54,080
to store that element inside your RAM,

588
00:51:54,080 --> 00:51:56,960
if the guy was unable to add the element

589
00:52:02,600 --> 00:52:05,600
on. If you are to come

590
00:52:09,200 --> 00:52:12,840
to if there was no error,
there was enough memory

591
00:52:12,840 --> 00:52:17,400
on your computer,
then it will return true.

592
00:52:17,400 --> 00:52:20,880
And if anything goes wrong,
then defaults will be returned from here.

593
00:52:22,400 --> 00:52:22,960
So that's why

594
00:52:22,960 --> 00:52:29,360
we have this proven false.

595
00:52:29,360 --> 00:52:31,440
Yes, I am vaccinated. It's just a flu.

596
00:52:31,800 --> 00:52:35,640
But I think I should also
I should also not

597
00:52:36,080 --> 00:52:39,400
so and also not getting the flu as well
if I am.

598
00:52:40,680 --> 00:52:41,880
No, I don't think so.

599
00:52:41,880 --> 00:52:44,640
I am vaccinated for flu.

600
00:52:44,640 --> 00:52:47,320
I thought I have enough vaccinations
for this year,

601
00:52:47,320 --> 00:52:51,880
so let's not have another vaccination.

602
00:52:51,880 --> 00:52:53,160
So I had

603
00:52:53,600 --> 00:52:58,840
a B injections for hepatitis
and then Corona, COVID and all that.

604
00:52:58,840 --> 00:53:01,640
I think that's enough for this year.

605
00:53:01,640 --> 00:53:02,600
That one is good, too.

606
00:53:02,600 --> 00:53:03,840
Yes, maybe next year.

607
00:53:03,840 --> 00:53:07,320
I will have that one.

608
00:53:07,320 --> 00:53:11,280
I think that too many vaccinations
are also not good, right?

609
00:53:12,080 --> 00:53:14,360
I heard we need to take
the booster as well.

610
00:53:15,240 --> 00:53:17,440
Oh, my God.

611
00:53:17,440 --> 00:53:19,320
They did their booster shot, too.

612
00:53:20,520 --> 00:53:21,680
Okay. Yes.

613
00:53:21,680 --> 00:53:25,640
They both tried out for this label.

614
00:53:25,640 --> 00:53:29,400
Vaccination does not mean
you will not have a disease.

615
00:53:29,640 --> 00:53:31,800
Put flu against the building

616
00:53:34,440 --> 00:53:43,800
or is equal

617
00:53:43,800 --> 00:53:47,280
to nil.

618
00:53:47,280 --> 00:53:56,080
At least in.

619
00:53:56,080 --> 00:53:59,720
So we learned about some matters as well.

620
00:53:59,720 --> 00:54:01,520
It's all fake.

621
00:54:02,280 --> 00:54:10,640
Like you still think it's all fake.

622
00:54:10,640 --> 00:54:11,880
All right.

623
00:54:11,880 --> 00:54:14,360
So do you also believe that it is flat?

624
00:54:14,560 --> 00:54:18,000
It's not round.

625
00:54:18,000 --> 00:54:25,040
I have two shots and I am giving a scale.

626
00:54:26,440 --> 00:54:30,000
And then you my you must also believe
that there are non dinosaurs

627
00:54:30,000 --> 00:54:33,960
and nothing outdoors or dead also fake

628
00:54:35,280 --> 00:54:45,680
and on die in total with that effect.

629
00:54:45,680 --> 00:54:48,480
And then there are aliens between us right

630
00:54:56,320 --> 00:54:57,040
until around.

631
00:54:57,040 --> 00:54:58,080
But COVID is fake.

632
00:54:58,080 --> 00:55:02,160
Okay, so there are still people

633
00:55:03,080 --> 00:55:06,240
there is a big community of people
who still thinks be

634
00:55:06,320 --> 00:55:19,160
ultra still flat.

635
00:55:19,160 --> 00:55:22,200
I don't know, whatever is this, it's
not good.

636
00:55:22,600 --> 00:55:26,400
So can you guys tell me the names
of the methods that we learn from this

637
00:55:26,640 --> 00:55:37,080
in this class
and how we can use those methods?

638
00:55:37,080 --> 00:55:39,160
So we learned about the ad method, right?

639
00:55:39,920 --> 00:55:41,800
And what is the purpose? This method

640
00:55:48,000 --> 00:55:49,840
add the

641
00:55:49,840 --> 00:55:52,200
element to the

642
00:55:54,480 --> 00:55:56,920
ad at least right then

643
00:55:58,200 --> 00:56:00,520
I think these
methods are self explanatory.

644
00:56:00,520 --> 00:56:07,320
Do you guys want me to write this inside
the notes?

645
00:56:07,320 --> 00:56:09,600
They are simple, easy, right?

646
00:56:09,600 --> 00:56:15,720
Let's Google.

647
00:56:15,720 --> 00:56:20,880
Okay.

648
00:56:20,880 --> 00:56:24,480
There are

649
00:56:41,760 --> 00:56:46,440
so as we can store multiple element

650
00:56:48,640 --> 00:56:50,160
different types of objects

651
00:56:50,160 --> 00:56:52,200
in array with the help of polymorphism

652
00:56:56,040 --> 00:56:57,360
there.

653
00:56:58,680 --> 00:57:00,320
We can also do that with the added.

654
00:57:00,320 --> 00:57:06,800
So for example, if I have a class root

655
00:57:14,120 --> 00:57:16,680
and then I have a class

656
00:57:16,680 --> 00:57:54,160
apple X and root,

657
00:57:54,160 --> 00:57:57,880
just the name, it's

658
00:57:59,160 --> 00:58:17,200
okay.

659
00:58:17,200 --> 00:58:21,400
It's a very simple example
just to demonstrate that we can also use p

660
00:58:21,400 --> 00:58:33,800
polymorphism in here.

661
00:58:33,800 --> 00:58:37,600
Right now
the world is having so many problems.

662
00:58:37,600 --> 00:58:42,800
There is this go weird and then all of
these political situations,

663
00:58:43,000 --> 00:58:47,880
storms and global warming temperature
and ladies day, they're still there

664
00:58:48,040 --> 00:58:59,160
they are still looking for diamonds.

665
00:58:59,160 --> 00:59:00,440
It is we did

666
00:59:16,120 --> 00:59:20,080
yes men went out also are

667
00:59:21,120 --> 00:59:24,440
there is a complete series of

668
00:59:24,840 --> 00:59:27,960
ads on on Indian period about the

669
00:59:29,040 --> 00:59:31,240
about both men's the men's will be men

670
00:59:33,520 --> 00:59:37,960
so if I me in matrilineal what I can have

671
00:59:39,120 --> 00:59:40,960
like an event at least

672
00:59:40,960 --> 00:59:43,560
I can write fruit in here

673
00:59:51,960 --> 00:59:56,040
and then I can see through look and

674
00:59:59,440 --> 01:00:00,440
apple

675
01:00:01,320 --> 01:00:05,720
fruit dot and oops

676
01:00:06,960 --> 01:00:09,360
you know orange

677
01:00:11,160 --> 01:00:13,840
and then guys looking for beer

678
01:00:13,840 --> 01:00:19,680
and so the polymorphism is good solution

679
01:00:19,680 --> 01:00:30,440
for these problems.

680
01:00:30,440 --> 01:00:30,840
Would you,

681
01:00:30,840 --> 01:00:34,720
would we please do a simple example
with the red list and standard letters.

682
01:00:34,800 --> 01:00:36,320
Yes. Remind me and deliver.

683
01:00:36,320 --> 01:00:40,320
We will do the example which kind of
I think you guys are always

684
01:00:40,920 --> 01:00:43,440
been having this problem
with scanner and add a

685
01:00:43,480 --> 01:00:50,600
then loops right.

686
01:00:50,600 --> 01:00:53,400
So as I can look through

687
01:00:54,600 --> 01:00:56,160
an area

688
01:00:56,160 --> 01:00:58,640
I can also look through

689
01:00:58,640 --> 01:01:01,800
the ArrayList are using any of the loop.

690
01:01:01,800 --> 01:01:04,200
So for example I can see for each

691
01:01:05,360 --> 01:01:08,280
where electrolytes specify
as the data type in here life

692
01:01:08,720 --> 01:01:24,240
inside this for each.

693
01:01:24,240 --> 01:01:25,760
So fruit

694
01:01:26,880 --> 01:01:27,680
Loops.

695
01:01:28,680 --> 01:01:33,200
And then I should write fruits in here
and then I can say

696
01:01:33,360 --> 01:01:35,520
not putting to name

697
01:01:47,920 --> 01:01:50,120
all either

698
01:01:50,160 --> 01:01:53,600
categories is there and here we are
adding whole class.

699
01:01:53,600 --> 01:01:58,360
In the early years
we have always been adding whole class.

700
01:01:58,360 --> 01:02:02,360
You'll get the string you
the class integer in the class.

701
01:02:03,280 --> 01:02:04,200
So you see,

702
01:02:04,200 --> 01:02:08,920
that's the reason why the collections
framework only works with classes.

703
01:02:09,120 --> 01:02:13,240
That's the reason why we learned
to wrapper classes, because collection,

704
01:02:13,280 --> 01:02:14,760
they don't allow primitives.

705
01:02:14,760 --> 01:02:17,680
So we will always be adding a class.

706
01:02:18,000 --> 01:02:20,440
It will always be a class

707
01:02:20,440 --> 01:02:23,800
in the only difference is that here
we are creating our own class.

708
01:02:24,320 --> 01:02:27,160
Previously we were using the class
that is created by dialog

709
01:02:27,160 --> 01:02:35,280
life. So

710
01:02:38,320 --> 01:02:39,560
quick question inside.

711
01:02:39,560 --> 01:02:40,880
Why don't we have string?

712
01:02:40,880 --> 01:02:44,760
Because we are not dealing with strings
anymore.

713
01:02:44,760 --> 01:02:47,120
We are dealing with fruit now.

714
01:02:47,120 --> 01:02:49,560
Why should we have strings

715
01:02:56,400 --> 01:02:58,680
I used in class when I have to store

716
01:02:59,880 --> 01:03:02,160
sequence of letters, write

717
01:03:04,000 --> 01:03:06,120
fruit,
which is the parent is the whole class?

718
01:03:06,280 --> 01:03:11,520
Yes. How many of you think
that I should be putting string in here?

719
01:03:11,760 --> 01:03:15,600
Or maybe at least before this example,
you guys were thinking of putting

720
01:03:15,600 --> 01:03:28,200
a string in here.

721
01:03:28,200 --> 01:03:29,400
Okay, So I will.

722
01:03:29,400 --> 01:03:30,840
I will show more examples.

723
01:03:30,840 --> 01:03:32,640
Don't do that. It will be clear.

724
01:03:32,640 --> 01:03:35,280
Or should I specify in here

725
01:03:44,000 --> 01:03:46,640
I am sitting here thinking that the fruit,

726
01:03:46,800 --> 01:03:49,240
the word fruit looks wrong and weird.

727
01:03:50,880 --> 01:03:54,120
This will did.

728
01:03:54,720 --> 01:03:55,880
This should not go.

729
01:03:55,880 --> 01:03:58,200
It's already a rule of right.

730
01:03:59,680 --> 01:04:01,080
Sorry English champion.

731
01:04:01,080 --> 01:04:04,120
It's already okay.

732
01:04:04,520 --> 01:04:08,000
Thank you.

733
01:04:08,000 --> 01:04:10,120
I just type good so many times.

734
01:04:10,120 --> 01:04:12,760
Looks wrong now. Yes,

735
01:04:14,400 --> 01:04:17,880
but now we know our classes which we have,
which we create.

736
01:04:17,880 --> 01:04:21,160
It needs to go there too,
so we can use class names.

737
01:04:21,160 --> 01:04:21,960
Esther.

738
01:04:22,000 --> 01:04:23,040
No, no, we are.

739
01:04:23,040 --> 01:04:26,680
We are always using a class name.

740
01:04:26,680 --> 01:04:34,280
If this thing is a class,
we passed on for this thing

741
01:04:34,280 --> 01:04:37,720
after thinking for a second, banded fruit
string was a class

742
01:04:37,720 --> 01:04:41,000
integer was a class boolean
or they were all classes.

743
01:04:41,680 --> 01:04:45,560
We always specify a class inside
the inside of this diamond operator.

744
01:04:46,480 --> 01:04:51,240
We always specify a class.

745
01:04:51,240 --> 01:04:53,320
Is there anyone who is truly confused?

746
01:04:53,320 --> 01:04:55,080
What do we specify inside?

747
01:04:55,080 --> 01:04:59,480
In here we specify the type of object
that we want to add.

748
01:04:59,480 --> 01:05:02,520
Inside this,
at least we specify the name of the class.

749
01:05:02,520 --> 01:05:02,880
And here

750
01:05:19,560 --> 01:05:21,200
anybody eat fruit?

751
01:05:21,200 --> 01:05:25,160
Now, after this task, it

752
01:05:36,600 --> 01:05:37,080
could drink

753
01:05:37,080 --> 01:05:40,640
a lot of orange juice use to enter.

754
01:05:40,640 --> 01:05:45,480
Here in Pakistan,
we have so many types of citrus

755
01:05:45,640 --> 01:05:48,520
citrus families very famous in here.

756
01:05:48,520 --> 01:05:56,640
And it's very cheap.

757
01:05:56,640 --> 01:05:58,920
One one big glass of

758
01:05:59,720 --> 01:06:02,640
of a good citrus family.

759
01:06:02,640 --> 01:06:05,000
A juice will cost you around

760
01:06:07,640 --> 01:06:10,240
around 70 to $0.80

761
01:06:10,480 --> 01:06:14,080
as cheap as cow in Ukraine.

762
01:06:14,080 --> 01:06:30,960
Yes, We are so loyal to building classes

763
01:06:30,960 --> 01:06:34,080
we still didn't get back
much used to our own classes.

764
01:06:34,080 --> 01:06:36,520
I think that that's why

765
01:06:38,080 --> 01:06:39,720
that's why I have showed you this example.

766
01:06:39,720 --> 01:06:41,320
I will show more

767
01:06:42,880 --> 01:06:43,120
again.

768
01:06:43,120 --> 01:06:45,960
Can we move to the next example?

769
01:06:45,960 --> 01:06:47,160
Is not this faster?

770
01:06:47,160 --> 01:06:50,840
The new fruit.

771
01:06:50,840 --> 01:06:53,120
Fruit in. Yes, Mama. There it is. Faster.

772
01:06:53,640 --> 01:06:56,960
Yes, it is faster.

773
01:06:56,960 --> 01:07:01,200
But remember then you cannot perform
all of those things.

774
01:07:01,840 --> 01:07:05,320
Removing a certain object,
inserting an object in between,

775
01:07:05,320 --> 01:07:06,600
searching for an object.

776
01:07:06,600 --> 01:07:11,160
If you are using arrays, you have to write
all of those matters on your own

777
01:07:12,840 --> 01:07:15,360
and you will lose that flexibility.

778
01:07:15,360 --> 01:07:17,960
Yes, it is faster, but there's the

779
01:07:17,960 --> 01:07:31,200
that's the issue.

780
01:07:31,200 --> 01:07:32,440
Yep. Yep.

781
01:07:32,440 --> 01:07:49,960
No matter.

782
01:07:49,960 --> 01:07:52,240
You said we will be afraid of Pauline.

783
01:07:52,240 --> 01:07:54,600
Now see, everyone is in love with one.

784
01:07:55,360 --> 01:07:58,680
Oh, it was a trick so that you guys don't

785
01:08:00,080 --> 01:08:11,880
know to ask too many questions
from polymorphism.

786
01:08:11,880 --> 01:08:22,680
I need to tell you about my tricks.

787
01:08:22,680 --> 01:08:24,120
Okay. Can we move to the next thing?

788
01:08:24,120 --> 01:08:28,920
The apple guys?

789
01:08:28,920 --> 01:08:31,920
By the way, which topic you guys find

790
01:08:31,920 --> 01:08:34,960
the hardest in this advanced

791
01:08:34,960 --> 01:08:43,720
part of Java?

792
01:08:43,720 --> 01:08:46,080
I think it's the overriding

793
01:08:46,840 --> 01:08:50,240
or overloading or what is it?

794
01:08:50,240 --> 01:08:53,080
Okay, so

795
01:08:55,680 --> 01:08:56,480
let me check

796
01:08:56,480 --> 01:09:01,040
if we are missing all Java.

797
01:09:01,040 --> 01:09:01,360
Okay,

798
01:09:03,600 --> 01:09:05,880
so we already discussed about

799
01:09:06,800 --> 01:09:09,240
where do we start?

800
01:09:09,240 --> 01:09:11,360
Okay, don't please

801
01:09:11,360 --> 01:09:18,360
don't start.

802
01:09:18,360 --> 01:09:24,000
So, so

803
01:09:25,480 --> 01:09:28,400
in this these are the blue ones.

804
01:09:28,400 --> 01:09:32,240
They are the interfaces, the green ones,
they are the classes.

805
01:09:32,880 --> 01:09:36,840
So today we will discuss about list
a red list

806
01:09:36,840 --> 01:09:38,560
and linked list

807
01:09:43,880 --> 01:09:47,640
the you guys already know
about the URL method

808
01:09:48,960 --> 01:09:53,240
because used to insert an element at all.

809
01:09:53,400 --> 01:09:55,400
Well,
what is the difference between an add?

810
01:09:55,400 --> 01:09:58,400
All guys.

811
01:09:58,400 --> 01:09:59,840
Yes, I think you should.

812
01:09:59,840 --> 01:10:03,960
Yes you you guys don't
you guys have these slides on canvas?

813
01:10:04,680 --> 01:10:05,600
I think they are.

814
01:10:05,600 --> 01:10:15,320
They are available in the.

815
01:10:15,320 --> 01:10:21,720
So if I want to add only one element,
I use the add method.

816
01:10:22,360 --> 01:10:26,600
If I want to add entire list inside
another list,

817
01:10:27,880 --> 01:10:30,360
then I use add all metadata.

818
01:10:30,440 --> 01:10:33,240
You ask static question already.

819
01:10:33,640 --> 01:10:36,440
Static question then is
what do you mean by static question

820
01:10:37,920 --> 01:10:38,560
and then the

821
01:10:38,560 --> 01:10:42,600
remove is same.

822
01:10:42,600 --> 01:10:47,240
We are, if we want to remove one element,

823
01:10:47,880 --> 01:10:50,280
we use the removal method.

824
01:10:50,560 --> 01:10:54,480
If we want to remove a set

825
01:10:54,720 --> 01:10:57,200
elements from a list,

826
01:10:57,880 --> 01:11:03,960
we passed that completely as to the
removal method and all of those elements

827
01:11:03,960 --> 01:11:09,440
which are in this list
will be removed from the other list.

828
01:11:09,440 --> 01:11:12,240
Now let's discuss about this retain
all match code.

829
01:11:12,440 --> 01:11:16,480
So the question you always ask
and we are still not sure.

830
01:11:16,520 --> 01:11:20,040
Oh, okay.

831
01:11:20,040 --> 01:11:22,080
Okay, now I get it.

832
01:11:22,080 --> 01:11:27,000
So can I use static
method inside of the instance

833
01:11:27,000 --> 01:11:30,960
method guys?

834
01:11:30,960 --> 01:11:36,160
No, don't ask.

835
01:11:36,160 --> 01:11:37,640
Oh my god.

836
01:11:37,640 --> 01:11:38,880
I am still getting.

837
01:11:38,880 --> 01:11:41,240
No, I seem like still No.

838
01:11:41,240 --> 01:11:47,880
Come on man.

839
01:11:47,880 --> 01:12:06,120
Oh my God.

840
01:12:06,120 --> 01:12:09,280
Okay, you guys will be fine. At least.

841
01:12:09,280 --> 01:12:11,160
At least you guys will not.

842
01:12:11,160 --> 01:12:15,720
I hope
At least you guys will not make a mistake.

843
01:12:16,480 --> 01:12:19,560
If this question is asked
in the interview,

844
01:12:20,000 --> 01:12:23,720
Just observe the expressions
of the interviewer If you said yes

845
01:12:23,720 --> 01:12:27,960
with Google it
and you know if you see these expressions,

846
01:12:29,800 --> 01:12:30,840
they use static.

847
01:12:30,840 --> 01:12:33,040
So it'll be at least

848
01:12:33,440 --> 01:12:35,560
and you guys are masters of this, right?

849
01:12:36,440 --> 01:12:47,680
Can you do no and no do. Yes.

850
01:12:47,680 --> 01:13:02,160
A cleaner can use this one.

851
01:13:02,160 --> 01:13:06,040
So let's say nice
and then you realize that you changed

852
01:13:06,040 --> 01:13:10,080
your answer to the wrong one.

853
01:13:10,080 --> 01:13:10,400
No, no.

854
01:13:10,400 --> 01:13:21,520
You have to observe the expressions first,
then only change.

855
01:13:21,520 --> 01:13:38,320
And so let's say, guys,

856
01:13:38,320 --> 01:13:41,560
okay, the way you need to use the Neo's.

857
01:13:42,040 --> 01:13:45,600
So if you have the right way to do a

858
01:13:52,360 --> 01:13:55,120
so let's say, guys, I have these two lists

859
01:13:57,320 --> 01:14:03,560
and these elements.

860
01:14:03,560 --> 01:14:07,320
They are also present in here.

861
01:14:07,320 --> 01:14:14,480
So. Okay.

862
01:14:14,760 --> 01:14:18,040
And then there are some elements

863
01:14:18,040 --> 01:14:21,880
which are not present

864
01:14:22,000 --> 01:14:24,120
inside this list right now.

865
01:14:24,120 --> 01:14:27,920
What I want are we on Demo six already

866
01:14:29,680 --> 01:14:32,560
know are we are on demo number for hard.

867
01:14:32,640 --> 01:14:42,440
If you combine the demos from previous
class, we are learning new methods.

868
01:14:42,440 --> 01:14:47,560
We are not repeating the old ones.

869
01:14:47,560 --> 01:14:48,360
So let's say guys

870
01:14:49,800 --> 01:14:52,280
from a list

871
01:14:52,840 --> 01:14:55,040
you want to retain

872
01:14:55,040 --> 01:15:00,320
all the elements, all the elements.

873
01:15:01,560 --> 01:15:05,520
So now it's kind of more practical,
more and more practical.

874
01:15:05,520 --> 01:15:10,320
Java will now be more and more practical
from this collection framework,

875
01:15:10,840 --> 01:15:12,880
less concepts, more practicality.

876
01:15:13,520 --> 01:15:17,880
So that's why
we will be having thousands of demos.

877
01:15:17,880 --> 01:15:20,880
If you guys want,
I can just explain it like without

878
01:15:20,880 --> 01:15:25,320
trying to demo.

879
01:15:25,320 --> 01:15:30,920
Yes, in layman's tips.

880
01:15:34,440 --> 01:15:39,600
So if you guys want to remove everything

881
01:15:39,600 --> 01:15:42,960
from this list, nice focus in here.

882
01:15:43,400 --> 01:15:45,240
Everyone, please pay attention.

883
01:15:45,240 --> 01:15:49,800
If I want to remove everything from this

884
01:15:50,680 --> 01:15:53,560
and only want to retain the elements

885
01:15:53,560 --> 01:15:57,000
which are present in here

886
01:15:57,000 --> 01:15:59,680
and in here,

887
01:15:59,680 --> 01:16:02,760
then I use the retained all method.

888
01:16:02,760 --> 01:16:06,600
Can you guys tell me
before a security score or

889
01:16:08,840 --> 01:16:10,920
which elements will be left inside

890
01:16:10,920 --> 01:16:13,760
this list are Australian
security retain all method.

891
01:16:14,720 --> 01:16:19,240
So if
you guys have understood the explanation.

892
01:16:19,240 --> 01:16:21,600
So I am doing this

893
01:16:21,600 --> 01:16:22,280
subject.

894
01:16:22,280 --> 01:16:24,120
One note

895
01:16:25,280 --> 01:16:27,680
retained all and I am passing.

896
01:16:28,640 --> 01:16:31,280
So what's object to in here?

897
01:16:33,000 --> 01:16:35,920
And after that if I put in subject

898
01:16:35,920 --> 01:16:40,080
one word output,
I will be left with inside this subject.

899
01:16:40,080 --> 01:16:53,320
One. So let me repeat again.

900
01:16:54,120 --> 01:16:57,240
Let me repeat it again.

901
01:16:57,240 --> 01:17:02,560
Those elements
which are present in here and in here,

902
01:17:03,440 --> 01:17:08,280
the elements
which are present in both the lists,

903
01:17:08,280 --> 01:17:12,160
only those elements will be retained
inside of this list.

904
01:17:12,160 --> 01:17:15,000
The rest of the elements,
they will be removed.

905
01:17:15,000 --> 01:17:18,880
Can you guys tell me the output now?

906
01:17:18,880 --> 01:17:20,000
Just tell me the line number.

907
01:17:20,000 --> 01:17:36,400
For example, will I see in this line
number if that's a BLT or not? So

908
01:17:37,880 --> 01:17:39,080
let me check.

909
01:17:39,360 --> 01:17:41,520
Is this ls SDLC present

910
01:17:41,680 --> 01:17:46,560
here?

911
01:17:46,560 --> 01:17:48,360
That means it will be retained,

912
01:17:49,400 --> 01:17:50,240
right?

913
01:17:50,240 --> 01:17:53,280
Because it is not present
in both of the lists.

914
01:17:53,440 --> 01:17:56,200
Right.

915
01:17:56,200 --> 01:17:58,520
Is this manual testing present in here?

916
01:17:59,640 --> 01:18:01,240
In both This

917
01:18:02,840 --> 01:18:04,040
it is also not present.

918
01:18:04,040 --> 01:18:06,680
It should also be retained.

919
01:18:06,680 --> 01:18:11,240
Is dollar present in both of the lists?

920
01:18:11,240 --> 01:18:13,960
It will be retained.
Is it present in both the list?

921
01:18:13,960 --> 01:18:14,760
It will be retained.

922
01:18:14,760 --> 01:18:16,800
Is selenium present in both of the lists.

923
01:18:17,440 --> 01:18:20,000
It will be returned is test
and you present the yes

924
01:18:20,040 --> 01:18:22,800
test and is present here and in here.

925
01:18:23,360 --> 01:18:28,120
So it will be removed.

926
01:18:28,120 --> 01:18:30,840
Is cucumber present
and more delicious Removed

927
01:18:31,120 --> 01:18:33,840
is still present in both
the list is removed.

928
01:18:34,320 --> 01:18:36,480
Is a paste pattern in both this? Yes.

929
01:18:36,960 --> 01:18:39,440
So I should have left

930
01:18:42,280 --> 01:18:44,080
with this element.

931
01:18:44,440 --> 01:18:50,440
Do you guys understand it now?

932
01:18:50,440 --> 01:18:54,320
So today I am having a flu
and you guys know when someone has flu,

933
01:18:54,600 --> 01:18:56,680
half of their minds don't work.

934
01:18:56,680 --> 01:18:59,240
If we the opposite opposite results.

935
01:18:59,240 --> 01:19:01,880
When I hear the score, please forgive me.

936
01:19:03,040 --> 01:19:03,600
Let me

937
01:19:03,760 --> 01:19:12,920
go to put.

938
01:19:12,920 --> 01:19:18,240
Okay, so we

939
01:19:18,240 --> 01:19:30,080
see the opposite result, right?

940
01:19:30,080 --> 01:19:31,560
I was just kidding.

941
01:19:31,560 --> 01:19:35,520
Let me explain.

942
01:19:35,520 --> 01:19:37,560
So Java

943
01:19:37,760 --> 01:19:41,080
Java will scan this completes
complete list.

944
01:19:41,400 --> 01:19:42,120
Okay.

945
01:19:42,600 --> 01:19:46,360
And Java, let me make it some other

946
01:19:49,200 --> 01:19:49,600
things up.

947
01:19:49,600 --> 01:19:58,080
Now you guys can see it.

948
01:19:58,080 --> 01:19:59,880
Don't play with my

949
01:20:04,080 --> 01:20:06,720
So guys, what does this written word for?

950
01:20:06,720 --> 01:20:09,000
Written keyword means

951
01:20:12,800 --> 01:20:15,080
retained means.

952
01:20:15,080 --> 01:20:19,800
So I am saying subject one to retain all

953
01:20:20,080 --> 01:20:24,160
and then I am passing subject
to which means

954
01:20:24,720 --> 01:20:27,960
I want to retain all the elements

955
01:20:27,960 --> 01:20:31,200
which are President inside

956
01:20:33,000 --> 01:20:35,640
this list of tool

957
01:20:36,240 --> 01:20:37,600
in here.

958
01:20:37,600 --> 01:20:41,760
That means if best n d is present in here,

959
01:20:42,280 --> 01:20:45,360
it will be retained inside of this list.

960
01:20:45,680 --> 01:20:51,000
And if it is not present, it will be
removed yes, it will be removed.

961
01:20:52,560 --> 01:20:54,200
So that's ten D is

962
01:20:54,200 --> 01:20:58,160
present inside the subject to please
retain it.

963
01:20:58,160 --> 01:21:01,520
Okay is present.

964
01:21:01,920 --> 01:21:03,120
Please return it.

965
01:21:03,120 --> 01:21:04,280
A skill is present.

966
01:21:04,280 --> 01:21:08,520
Please retain If API is present
please that it then it so

967
01:21:08,520 --> 01:21:11,640
is the opposite of remove

968
01:21:11,640 --> 01:21:15,680
all in Remove all We remove the elements

969
01:21:15,680 --> 01:21:20,720
which are present inside this list
that we passed to this matter.

970
01:21:21,360 --> 01:21:22,080
Okay.

971
01:21:23,520 --> 01:21:26,520
And in return all we remove everything

972
01:21:26,520 --> 01:21:31,920
but retained those elements
which are present in here and in here.

973
01:21:32,280 --> 01:21:32,960
Okay.

974
01:21:33,400 --> 01:21:38,400
Is it clear why we see this test
and you will see this test and in here,

975
01:21:38,880 --> 01:21:41,240
because it was present in here.

976
01:21:42,000 --> 01:21:43,560
Why? We see this cucumber.

977
01:21:43,560 --> 01:21:46,960
We see this cucumber
because it was also present in here.

978
01:21:48,800 --> 01:21:52,600
Why we see a school Because it was present
in here and in here.

979
01:21:52,600 --> 01:21:57,840
Why we don't see our SDLC,
because it was not present in here.

980
01:21:57,840 --> 01:22:03,280
So it will not be retained.

981
01:22:03,280 --> 01:22:05,120
You just played with my little brain,

982
01:22:06,920 --> 01:22:09,480
but waiting for another plot twist.

983
01:22:10,200 --> 01:22:14,680
It will keep those elements
which are present in both the classes.

984
01:22:14,880 --> 01:22:17,920
Yes. So whichever is the
is the easiest way for you

985
01:22:17,920 --> 01:22:22,760
to memorize this, but
I hope this will retain all this discover.

986
01:22:22,760 --> 01:22:26,600
This itself is conveying
the logic behind this method.

987
01:22:26,600 --> 01:22:30,760
Not enough fluid actually means remove

988
01:22:30,760 --> 01:22:33,200
and remove means that

989
01:22:34,600 --> 01:22:35,720
retains means.

990
01:22:35,720 --> 01:22:38,280
Retain those elements

991
01:22:38,440 --> 01:22:39,840
and remove everything.

992
01:22:39,840 --> 01:22:41,920
As you remove everything.

993
01:22:41,920 --> 01:22:44,720
So remove means remove these elements

994
01:22:44,960 --> 01:22:47,600
and retain everything else for opposite

995
01:22:48,600 --> 01:22:50,120
these methods to matter.

996
01:22:50,120 --> 01:22:53,760
They are opposite of each.

997
01:22:53,760 --> 01:22:55,880
Okay,

998
01:22:56,400 --> 01:22:57,760
so just.

999
01:22:57,760 --> 01:23:00,160
Just to

1000
01:23:02,280 --> 01:23:05,240
make it more clear,

1001
01:23:05,240 --> 01:23:09,200
let's have one more demo
because these classes,

1002
01:23:09,880 --> 01:23:13,120
they will be heavily
used in your real life problems.

1003
01:23:13,120 --> 01:23:15,840
So I want all of you to be super,
super clear

1004
01:23:16,440 --> 01:23:20,960
about all the matters
you guys will never be using.

1005
01:23:20,960 --> 01:23:22,360
I don't want to say this.

1006
01:23:23,520 --> 01:23:26,280
It's very
rare that you will be using arrays.

1007
01:23:27,120 --> 01:23:32,240
You will always be using edit lists,
so it will print out every.

1008
01:23:32,280 --> 01:23:39,560
Can you share the code for this demo? Yep.

1009
01:23:39,560 --> 01:23:47,280
Yes. Written means keep safe.

1010
01:23:47,280 --> 01:23:49,560
We will never use arrays.

1011
01:23:49,560 --> 01:23:53,160
Translation
You will use nothing but arrays

1012
01:23:53,160 --> 01:24:13,080
arrays.

1013
01:24:13,080 --> 01:24:15,080
Okay, so let me do this guys.

1014
01:24:15,480 --> 01:24:17,920
Just just so that we are clear.

1015
01:24:17,920 --> 01:24:22,360
If I say subject to

1016
01:24:24,240 --> 01:24:27,160
not retain all and subject one

1017
01:24:28,240 --> 01:24:30,920
and if I print out subjects to tell me

1018
01:24:30,960 --> 01:24:32,040
the output

1019
01:24:35,320 --> 01:24:37,520
to date is they are super, super real.

1020
01:24:37,680 --> 01:24:43,720
No, don't worry about them.

1021
01:24:43,720 --> 01:24:47,160
We only have two days
so that you guys learn about the nested

1022
01:24:47,160 --> 01:24:50,640
loops.

1023
01:24:50,640 --> 01:24:52,520
It is the same.

1024
01:24:52,720 --> 01:24:59,760
It will be the same output, same output.

1025
01:24:59,760 --> 01:25:04,040
Okay, so now we are saying from subject

1026
01:25:04,040 --> 01:25:09,280
to in here, remove everything but not

1027
01:25:10,920 --> 01:25:12,800
what is present

1028
01:25:12,800 --> 01:25:16,080
inside the subject. One.

1029
01:25:16,080 --> 01:25:17,960
Okay, so let us check.

1030
01:25:17,960 --> 01:25:21,000
Is this best and is it present inside this

1031
01:25:22,280 --> 01:25:23,880
list? One Yes.

1032
01:25:23,880 --> 01:25:26,520
So it will be retained.

1033
01:25:26,520 --> 01:25:30,760
Is this cucumber present
inside this list? Yes.

1034
01:25:30,840 --> 01:25:32,880
So almost

1035
01:25:34,240 --> 01:25:34,880
everything.

1036
01:25:34,880 --> 01:25:38,120
No, this this mobile testing.

1037
01:25:38,640 --> 01:25:41,120
It is not present

1038
01:25:42,160 --> 01:25:42,600
in here.

1039
01:25:42,600 --> 01:25:45,080
Right.

1040
01:25:45,080 --> 01:25:50,160
So it will be removed.

1041
01:25:50,160 --> 01:25:52,440
No, it is that present

1042
01:25:53,840 --> 01:25:57,480
mobile testing.

1043
01:25:57,480 --> 01:25:59,600
So I can use manual testing

1044
01:26:00,480 --> 01:26:03,320
on what I am having flu and no.

1045
01:26:03,360 --> 01:26:04,080
Do you

1046
01:26:07,800 --> 01:26:10,240
to this mobile testing

1047
01:26:10,800 --> 01:26:15,120
it is not present in here
so it will not be retained.

1048
01:26:15,120 --> 01:26:15,920
Right.

1049
01:26:16,560 --> 01:26:17,320
Are you guys sure?

1050
01:26:17,320 --> 01:26:23,320
You sure you will not be returned?

1051
01:26:23,320 --> 01:26:26,000
How many of you are sure that I will see
this?

1052
01:26:26,680 --> 01:26:27,160
I will.

1053
01:26:27,160 --> 01:26:34,520
I will not see this
mobile testing in my output. So

1054
01:26:36,440 --> 01:26:38,480
let me at least

1055
01:26:40,720 --> 01:26:42,400
I think I need to complete

1056
01:26:42,400 --> 01:26:46,760
box issues now.

1057
01:26:48,760 --> 01:26:52,840
It is global,

1058
01:26:52,840 --> 01:27:00,080
so let me execute this.

1059
01:27:00,080 --> 01:27:01,440
Okay.

1060
01:27:01,440 --> 01:27:04,200
You guys see mobile testing

1061
01:27:04,200 --> 01:27:07,640
is not present in the output, so

1062
01:27:08,280 --> 01:27:17,320
I hope it is now clear.

1063
01:27:17,320 --> 01:27:18,400
Okay.

1064
01:27:21,400 --> 01:27:22,080
All right,

1065
01:27:22,080 --> 01:27:24,600
Your Highness, we will have a break.

1066
01:27:26,280 --> 01:27:28,680
Prince Lobo of Java,

1067
01:27:29,200 --> 01:27:31,600
can we have released Lupo?

1068
01:27:31,840 --> 01:27:33,120
Break is equal to note.

1069
01:27:33,120 --> 01:27:43,600
Yes, we can have that.

1070
01:27:43,600 --> 01:27:44,680
All right, All right.

1071
01:27:44,680 --> 01:27:50,080
Kings and queens.

1072
01:27:50,080 --> 01:28:03,760
Let's have a break.

1073
01:28:03,760 --> 01:28:05,480
Initial media shortcode to change.

1074
01:28:05,480 --> 01:28:09,360
Subject one to subject to shortcut to the.

1075
01:28:09,360 --> 01:28:10,880
There is no shortcut to change.

1076
01:28:10,880 --> 01:28:13,840
Subject end subject to.

1077
01:28:14,040 --> 01:28:19,080
I just copied and pasted it.

1078
01:28:19,080 --> 01:28:21,920
You guys are always looking,
but yes, it would be mouth.

1079
01:28:22,320 --> 01:28:26,440
Oh, you just need to double click
to select the complete complete word

1080
01:28:28,440 --> 01:28:30,560
and then you have to press control C

1081
01:28:31,440 --> 01:28:33,600
and then you can double click in here

1082
01:28:33,600 --> 01:28:37,480
to place that word.

1083
01:28:37,480 --> 01:28:39,000
I am worried about your health.

1084
01:28:39,000 --> 01:28:42,960
I think you need more break time.

1085
01:28:42,960 --> 01:28:45,600
Okay.

1086
01:28:45,600 --> 01:28:46,200
We will see.

1087
01:28:46,200 --> 01:28:49,200
We will see if we are able
to cover enough contents.

1088
01:28:49,200 --> 01:28:52,920
Maybe we will learn D class or Tool 30.

1089
01:28:52,920 --> 01:28:55,480
Maybe we will see.

1090
01:28:55,680 --> 01:28:57,880
I will try to drink some

1091
01:28:57,880 --> 01:29:00,120
something, coffee or something

1092
01:29:00,400 --> 01:29:03,200
asking if there are any solutions
for our double cropping.

1093
01:29:03,600 --> 01:29:07,680
For example, if I want to copy this
and that and then choose what to pay for.

1094
01:29:07,720 --> 01:29:11,760
Yes, actually there is a complete shortcut
which will keep

1095
01:29:12,600 --> 01:29:16,080
you can copy 15 things and you can paste

1096
01:29:16,560 --> 01:29:18,840
which one of them you want to do that

1097
01:29:20,280 --> 01:29:23,680
which one of you
you want to paste from on that.

1098
01:29:23,680 --> 01:29:26,000
I will show you
after the break how to do that

1099
01:29:28,880 --> 01:29:30,800
all plus choose

1100
01:29:36,240 --> 01:29:48,640
Oops.

1101
01:29:48,640 --> 01:29:52,280
I want to copy what is in your brain
and demanded a reading shortcut.

1102
01:29:52,560 --> 01:29:54,800
Elon Musk is working on Medium.

1103
01:29:55,120 --> 01:30:03,360
Maybe we will have that in future.

1104
01:30:03,360 --> 01:30:11,960
All right guys, please be back
and reminding me about everybody.

1105
01:30:11,960 --> 01:30:36,400
I hope you guys are back.

1106
01:30:36,400 --> 01:30:40,200
I mean, to how do you do this when I ask?

1107
01:30:40,520 --> 01:30:41,880
Oh, you're old.

1108
01:30:41,880 --> 01:30:47,040
And then you can select things
vertically all down your all the button

1109
01:30:47,040 --> 01:30:50,480
or options button on Mac,

1110
01:30:50,480 --> 01:31:03,680
and then you can edit vertically.

1111
01:31:03,680 --> 01:31:04,680
All right.

1112
01:31:04,680 --> 01:31:07,320
So you guys already know about this size.

1113
01:31:08,440 --> 01:31:10,520
The Clear Method

1114
01:31:10,520 --> 01:31:14,040
player
just removes everything from a list.

1115
01:31:15,800 --> 01:31:18,240
Contains your text
if something is present.

1116
01:31:18,240 --> 01:31:19,240
Yes, we are recording.

1117
01:31:19,240 --> 01:31:19,920
Thank

1118
01:31:21,000 --> 01:31:24,840
contains instruct if something is present
inside that list or not.

1119
01:31:24,840 --> 01:31:29,000
And if you if we want to check
if a complete list is present inside

1120
01:31:29,000 --> 01:31:34,320
another list or not,
then we use this contains all.

1121
01:31:34,320 --> 01:31:38,520
Okay then we have this iterator
method is a very special method

1122
01:31:46,640 --> 01:31:48,120
for that.

1123
01:31:48,120 --> 01:31:50,120
How many of you

1124
01:31:53,960 --> 01:31:54,840
do we

1125
01:32:07,360 --> 01:32:10,320
and you guys will not face, you know?

1126
01:32:10,320 --> 01:32:12,360
So I want every one of you

1127
01:32:14,480 --> 01:32:15,440
to pay attention.

1128
01:32:15,440 --> 01:32:17,920
Now, this is something important

1129
01:32:43,200 --> 01:32:45,440
we. Didn't put anything in demo two.

1130
01:32:46,800 --> 01:32:48,320
Okay?

1131
01:32:48,320 --> 01:32:52,920
You know, we have something in here.

1132
01:32:52,920 --> 01:32:57,480
Or if just about the size.

1133
01:32:57,480 --> 01:33:18,360
All right, All right.

1134
01:33:18,360 --> 01:33:19,680
Copy this

1135
01:33:20,880 --> 01:33:31,560
and remove rest of these.

1136
01:33:31,560 --> 01:33:32,040
Okay.

1137
01:33:32,040 --> 01:33:36,600
So, guys,
if I do something like this, if I see.

1138
01:33:36,600 --> 01:33:39,960
So I can also

1139
01:33:40,200 --> 01:33:43,720
access the elements of
and edit list by index.

1140
01:33:43,720 --> 01:33:47,600
If so, what I can say

1141
01:33:47,600 --> 01:33:51,120
I can see subjects dot size

1142
01:33:53,000 --> 01:33:54,480
and then

1143
01:33:54,800 --> 01:33:57,480
I can print out the elements

1144
01:33:58,200 --> 01:34:01,240
by saying subject and item get.

1145
01:34:01,240 --> 01:34:03,160
So this get method.

1146
01:34:03,160 --> 01:34:06,320
If we pass the index to this matter,

1147
01:34:06,320 --> 01:34:09,880
we will be getting the element
at that specific index.

1148
01:34:11,360 --> 01:34:13,280
So for example, before I

1149
01:34:13,280 --> 01:34:17,520
go to this code,
if I say subject started get

1150
01:34:17,880 --> 01:34:20,360
and if I said three, what

1151
01:34:20,680 --> 01:34:31,440
I will advise, I should get it

1152
01:34:31,560 --> 01:34:34,080
because index is the start

1153
01:34:36,320 --> 01:34:38,240
from zero.

1154
01:34:38,240 --> 01:34:38,880
Here we go.

1155
01:34:38,880 --> 01:34:41,640
Now this is history.

1156
01:34:42,120 --> 01:34:47,160
First answer always the wrong answer.

1157
01:34:47,160 --> 01:34:51,520
Now don't worry, I'm just getting No,
don't stop this far, okay?

1158
01:34:51,840 --> 01:34:58,960
Don't get discouraged.

1159
01:34:58,960 --> 01:34:59,880
That's how you learn.

1160
01:34:59,880 --> 01:35:05,760
That's how you will learn.

1161
01:35:05,760 --> 01:35:08,520
The more mistakes you make anymore,
you guys will learn.

1162
01:35:10,320 --> 01:35:12,760
All right.

1163
01:35:12,760 --> 01:35:20,680
So, no, for it does not matter.

1164
01:35:21,320 --> 01:35:24,120
Let me. Let me tell you why.

1165
01:35:24,120 --> 01:35:25,440
Yup. It's.

1166
01:35:25,440 --> 01:35:28,200
I just don't want you to get discouraged.

1167
01:35:28,800 --> 01:35:31,880
And I always tell
that I keep on making door to door to do

1168
01:35:32,000 --> 01:35:33,560
and during the classes and all that.

1169
01:35:33,560 --> 01:35:36,640
But some of the students get serious
that why instructor

1170
01:35:36,640 --> 01:35:39,360
is always just making jokes on us
or like that.

1171
01:35:40,120 --> 01:35:41,000
What you can do.

1172
01:35:41,000 --> 01:35:45,120
You can make jokes on me,
but don't stop responding, okay?

1173
01:35:45,120 --> 01:35:48,240
And you can tell me that
I don't like this.

1174
01:35:48,720 --> 01:35:51,120
I don't like this.
Please don't make any jokes. Okay?

1175
01:35:52,520 --> 01:35:55,080
Okay.

1176
01:35:55,080 --> 01:35:56,760
It depends who you are.

1177
01:35:56,760 --> 01:36:00,120
Just joking with it.

1178
01:36:00,120 --> 01:36:02,840
Some people will get mad.

1179
01:36:02,840 --> 01:36:05,280
So, guys, let's see.

1180
01:36:05,280 --> 01:36:09,360
Okay, so first, let me show you this.

1181
01:36:09,360 --> 01:36:11,760
So this is a simple

1182
01:36:13,080 --> 01:36:16,160
program in which I am

1183
01:36:16,160 --> 01:36:21,280
printing out the elements.

1184
01:36:21,280 --> 01:36:26,840
Okay,
So now, guys, I have this requirement.

1185
01:36:27,360 --> 01:36:30,240
I want to remove

1186
01:36:31,000 --> 01:36:34,440
all the elements
which have more than four characters.

1187
01:36:34,880 --> 01:36:36,600
How can I do that?

1188
01:36:37,320 --> 01:36:38,760
No, it will not say.

1189
01:36:38,760 --> 01:36:39,840
Just give me one moment.

1190
01:36:39,840 --> 01:36:47,160
It will not change to an envelope.

1191
01:36:47,160 --> 01:36:49,520
So we write. If

1192
01:36:53,200 --> 01:36:54,840
we write, if.

1193
01:36:54,840 --> 01:37:06,320
And then what
should I write inside of the if?

1194
01:37:06,320 --> 01:37:08,880
Well, I write some dark start.

1195
01:37:10,040 --> 01:37:12,600
Get it, boss I

1196
01:37:14,040 --> 01:37:19,200
and if the length.

1197
01:37:20,120 --> 01:37:22,920
No, no it will not be subject or size.

1198
01:37:23,280 --> 01:37:26,640
Remember
I am now accessing when I say subjects.

1199
01:37:26,640 --> 01:37:29,880
Note that this method
will return me a string.

1200
01:37:29,880 --> 01:37:30,280
Right?

1201
01:37:32,040 --> 01:37:32,840
Right.

1202
01:37:33,480 --> 01:37:37,800
So I now can call all the methods
which are present inside the string class.

1203
01:37:38,080 --> 01:37:40,240
For example, length.

1204
01:37:40,520 --> 01:37:47,120
And if length is greater than four,
I want to say

1205
01:37:48,240 --> 01:37:54,480
subjects not remove.

1206
01:37:54,480 --> 01:37:56,680
And then I write

1207
01:37:59,320 --> 01:38:01,920
This is how I can remove
an element, right?

1208
01:38:02,440 --> 01:38:05,000
Is there anyone
who don't understand this code?

1209
01:38:06,360 --> 01:38:09,440
If I want to remove the elements,

1210
01:38:09,440 --> 01:38:13,560
we are having more than four characters.

1211
01:38:15,120 --> 01:38:17,520
I will write a loop

1212
01:38:18,120 --> 01:38:21,040
starting from zero,

1213
01:38:21,520 --> 01:38:24,360
less than the size of the list,

1214
01:38:24,360 --> 01:38:28,320
accessing all the elements one by one.

1215
01:38:28,320 --> 01:38:33,240
And then because the first element
they are off type strings.

1216
01:38:34,200 --> 01:38:36,880
So I can call the length method
from string class.

1217
01:38:36,880 --> 01:38:39,120
I can if it returns more than four.

1218
01:38:39,400 --> 01:38:43,680
If it is the case,
I call subjects, not remove and I pass

1219
01:38:44,720 --> 01:38:46,000
that I in here.

1220
01:38:46,000 --> 01:38:48,120
So that specific element will be removed.

1221
01:38:48,120 --> 01:38:48,840
Right?

1222
01:38:50,240 --> 01:38:53,280
So now let me execute this code

1223
01:38:56,520 --> 01:38:59,680
or I have to print out this list as well.

1224
01:39:01,640 --> 01:39:02,800
After we are done

1225
01:39:02,800 --> 01:39:12,280
removing the elements.

1226
01:39:12,280 --> 01:39:15,520
Okay, so this is the output that I get.

1227
01:39:16,440 --> 01:39:21,240
Is there anything wrong
that you guys see inside this code?

1228
01:39:21,240 --> 01:39:24,440
Take 2 minutes, observe the code

1229
01:39:24,440 --> 01:39:26,880
and check if there is

1230
01:39:26,880 --> 01:39:36,040
anything wrong in here.

1231
01:39:36,040 --> 01:39:37,400
Okay.

1232
01:39:37,400 --> 01:39:40,800
So this best Benji,

1233
01:39:41,880 --> 01:39:46,360
it should not be in here right?

1234
01:39:46,360 --> 01:39:47,440
It should not be in here.

1235
01:39:47,440 --> 01:39:49,880
It should be removed from the list.

1236
01:39:49,880 --> 01:39:53,040
So if I remove.

1237
01:39:54,600 --> 01:39:56,400
Okay So let me do this.

1238
01:39:56,400 --> 01:39:57,040
Let me.

1239
01:39:57,040 --> 01:40:04,640
Let me run it again.

1240
01:40:04,640 --> 01:40:05,400
Okay.

1241
01:40:05,400 --> 01:40:10,440
It will.

1242
01:40:10,440 --> 01:40:13,520
So what is happening in here?

1243
01:40:13,520 --> 01:40:15,920
If the last element

1244
01:40:17,400 --> 01:40:19,880
so it is not checking the condition
of our last element.

1245
01:40:20,760 --> 01:40:24,840
Can you guys explain me what is going on
in here, why we are having this problem?

1246
01:40:26,160 --> 01:40:28,600
And let me you the hint

1247
01:40:28,600 --> 01:40:34,520
areas,
they can digest their size at runtime.

1248
01:40:35,280 --> 01:40:40,440
It is in our digest
and their size at runtime.

1249
01:40:40,440 --> 01:40:43,000
They are dynamic.

1250
01:40:43,000 --> 01:40:51,680
They are dynamic.

1251
01:40:51,680 --> 01:40:54,600
So yes, this logic is correct.

1252
01:40:54,880 --> 01:40:56,720
I am starting from index zero.

1253
01:40:56,720 --> 01:40:59,080
I should not be going more than five.

1254
01:41:00,000 --> 01:41:03,720
But what happens is that because it is,

1255
01:41:03,720 --> 01:41:07,080
they can adjust to their size at runtime.

1256
01:41:08,000 --> 01:41:11,000
We never use for loops

1257
01:41:11,000 --> 01:41:15,560
or for each loops to perform any operation

1258
01:41:15,920 --> 01:41:19,440
that changes the size of an edit list

1259
01:41:19,440 --> 01:41:23,080
because it can be dangerous,
it can lead to bugs.

1260
01:41:23,760 --> 01:41:56,440
And if you guys try to use a
for each loop, if you guys try to use

1261
01:42:01,440 --> 01:42:03,720
it for each loop to do this,

1262
01:42:05,520 --> 01:42:08,480
you will be getting an edit.

1263
01:42:08,480 --> 01:42:09,960
You will be getting an error.

1264
01:42:11,240 --> 01:42:12,800
Why? You are getting an error.

1265
01:42:12,800 --> 01:42:16,480
You are getting an error
because of this same issue.

1266
01:42:16,680 --> 01:42:22,200
Because it is
they can adjust their size at runtime.

1267
01:42:23,320 --> 01:42:25,040
Java is saying their task.

1268
01:42:25,040 --> 01:42:28,640
You are trying to perform an operation
inside this list

1269
01:42:29,400 --> 01:42:31,800
and you are trying to perform two parallel

1270
01:42:31,800 --> 01:42:35,040
operations,
one operation to access the element

1271
01:42:35,280 --> 01:42:37,920
and the other operation
to remove the elements.

1272
01:42:38,280 --> 01:42:41,520
Now how internally loops are implemented,

1273
01:42:41,760 --> 01:42:44,960
they are implemented for static data
structures, right?

1274
01:42:44,960 --> 01:42:48,600
The data structure
which don't change their side.

1275
01:42:49,240 --> 01:42:51,320
If something is changing your size,

1276
01:42:51,600 --> 01:42:54,360
it can lead to bugs
that can lead to arrest.

1277
01:42:54,360 --> 01:42:58,440
So that's why we go to this exception
that stays concurrent.

1278
01:42:58,600 --> 01:43:01,440
We will be getting the same issue
with the Y loop as well.

1279
01:43:02,840 --> 01:43:05,640
Loops cannot be used safely.

1280
01:43:06,000 --> 01:43:09,600
Sometimes they will work,
sometimes they will not work.

1281
01:43:10,240 --> 01:43:12,800
And it can be super, super frustrating

1282
01:43:12,800 --> 01:43:15,720
for you to find out about the issue. No.

1283
01:43:16,080 --> 01:43:18,520
So for each loop is not restricted at all.

1284
01:43:20,160 --> 01:43:20,760
So let me

1285
01:43:20,760 --> 01:43:23,800
show you why why this is happening.

1286
01:43:23,800 --> 01:43:26,400
So let's debug this code
that's debug this code

1287
01:43:26,400 --> 01:43:28,520
to find out why we are facing this issue.

1288
01:43:29,560 --> 01:43:32,040
Yes, that's why we have operators.

1289
01:43:32,520 --> 01:43:35,880
We don't use loops with collections,

1290
01:43:35,880 --> 01:43:38,080
but we always press for iterator,

1291
01:43:39,080 --> 01:43:41,160
especially in those cases

1292
01:43:41,800 --> 01:43:45,800
which especially for those matters
on those operations

1293
01:43:45,800 --> 01:43:49,000
which can change the size
of your regional list.

1294
01:43:49,400 --> 01:43:51,760
We don't perform these operations
with the loops.

1295
01:43:52,320 --> 01:43:55,040
So let me let me show
you step by step like this.

1296
01:43:55,200 --> 01:43:56,720
This Adam is happening.

1297
01:43:56,720 --> 01:43:57,040
Okay?

1298
01:43:57,040 --> 01:44:00,760
How this change of size at runtime is

1299
01:44:01,000 --> 01:44:04,120
is changing our logic,
how it is leading us to bugs

1300
01:44:04,200 --> 01:44:13,360
and why we should not use loops.

1301
01:44:13,360 --> 01:44:18,400
So let me just move this up in here
so that you guys can see

1302
01:44:18,400 --> 01:44:23,160
the complete picture.

1303
01:44:23,160 --> 01:44:26,400
So let me put a debug point in here.

1304
01:44:27,120 --> 01:44:27,720
Okay.

1305
01:44:27,920 --> 01:44:30,760
And then let me debug

1306
01:44:30,960 --> 01:44:35,400
application.

1307
01:44:35,400 --> 01:44:36,720
Okay.

1308
01:44:36,720 --> 01:44:39,240
So you guys see right now what is the size

1309
01:44:39,240 --> 01:44:44,480
of this ArrayList?

1310
01:44:44,480 --> 01:44:47,640
So arrays,
they are fixed in size at compile time.

1311
01:44:50,080 --> 01:44:50,800
So areas are

1312
01:44:50,800 --> 01:44:54,320
fixed in size, compile time,
not at runtime.

1313
01:44:55,320 --> 01:45:01,600
It is.

1314
01:45:01,600 --> 01:45:03,000
Come on.

1315
01:45:03,840 --> 01:45:04,520
Okay.

1316
01:45:04,800 --> 01:45:06,240
Not this time

1317
01:45:08,000 --> 01:45:09,680
is and we can give this size.

1318
01:45:09,680 --> 01:45:13,000
So once this size is given to an area,

1319
01:45:13,560 --> 01:45:15,640
the size after that is fixed,

1320
01:45:16,360 --> 01:45:19,600
you can give their size at compile time
by encoding the value.

1321
01:45:19,920 --> 01:45:24,400
You can give their size at runtime
by asking the user, by asking the user

1322
01:45:25,120 --> 01:45:28,440
for the size of their data
and then placing that inside a variable

1323
01:45:28,440 --> 01:45:30,720
and using that variable
as the size of the area.

1324
01:45:31,760 --> 01:45:36,640
This is how it works.

1325
01:45:36,640 --> 01:45:41,360
So right now
decide this six we execute the next line.

1326
01:45:41,360 --> 01:45:44,920
So first we will be getting the SDLC
right.

1327
01:45:44,920 --> 01:45:47,760
SDLC has size four.

1328
01:45:47,760 --> 01:45:51,000
If I want to check out the output
of this part guys,

1329
01:45:51,840 --> 01:45:55,320
during my debugging,
I want to go a little deeper.

1330
01:45:55,320 --> 01:46:00,040
I want to check over this subject
computer and I get I is returning me.

1331
01:46:00,040 --> 01:46:01,000
How can I do that?

1332
01:46:02,800 --> 01:46:05,360
Maybe there
are multiple operations on a single line

1333
01:46:05,360 --> 01:46:07,440
and I want to check
the output of each of them.

1334
01:46:08,520 --> 01:46:15,800
Do you guys remember what we can use
in this kind of scenarios?

1335
01:46:15,800 --> 01:46:18,080
So no.

1336
01:46:18,840 --> 01:46:22,720
Yes, we can use this step in,
but there is this option off what

1337
01:46:24,600 --> 01:46:26,080
and what if.

1338
01:46:26,080 --> 01:46:29,920
So you see subjects dot
get is returning SDLC

1339
01:46:30,760 --> 01:46:32,960
subjects don't get to not learn

1340
01:46:34,920 --> 01:46:38,280
is returning me for

1341
01:46:39,480 --> 01:46:42,240
and subjects don't get
the talent is greater

1342
01:46:42,240 --> 01:46:43,680
than for

1343
01:46:45,640 --> 01:46:47,240
is returning me false

1344
01:46:47,240 --> 01:46:51,280
so I can check the output out at each step

1345
01:46:51,280 --> 01:46:55,240
with the help of this,
what are you guys able to create this?

1346
01:46:55,240 --> 01:46:58,680
What is okay?

1347
01:47:00,240 --> 01:47:02,120
So if I want to have a detailed

1348
01:47:02,120 --> 01:47:06,960
look at the execution steps
and if there are multiple steps in

1349
01:47:06,960 --> 01:47:13,000
a single line, I use this. So

1350
01:47:14,600 --> 01:47:18,280
what the
first element did is annihilation.

1351
01:47:18,280 --> 01:47:18,800
This.

1352
01:47:18,800 --> 01:47:22,000
If condition will be false,
then we will be getting the second

1353
01:47:22,960 --> 01:47:25,080
element, which is manual testing.

1354
01:47:25,080 --> 01:47:27,240
And now the size is 14

1355
01:47:28,600 --> 01:47:30,920
and this is condition will return me.

1356
01:47:30,960 --> 01:47:31,920
True.

1357
01:47:32,280 --> 01:47:34,040
You said a lot. Yes.

1358
01:47:34,040 --> 01:47:36,760
And they are called what is what

1359
01:47:39,800 --> 01:47:45,960
like this one.

1360
01:47:45,960 --> 01:47:48,400
So this time the condition

1361
01:47:49,120 --> 01:47:51,720
to still decide is six days, right

1362
01:47:52,200 --> 01:47:54,600
So this time the condition will be true

1363
01:47:55,280 --> 01:47:57,600
and this element will be removed.

1364
01:47:58,400 --> 01:47:59,280
Right.

1365
01:47:59,680 --> 01:48:01,280
So what is the size now?

1366
01:48:01,280 --> 01:48:04,600
This size has been reduced to

1367
01:48:05,880 --> 01:48:07,720
five now.

1368
01:48:07,720 --> 01:48:08,680
Okay.

1369
01:48:09,960 --> 01:48:12,240
Okay.

1370
01:48:12,240 --> 01:48:16,200
And next time
we get geared to no change in size,

1371
01:48:17,280 --> 01:48:21,480
next time we get selenium, no change size.

1372
01:48:21,480 --> 01:48:21,960
Oh, sorry.

1373
01:48:21,960 --> 01:48:25,680
This time again,
the size will be reduced to four.

1374
01:48:26,840 --> 01:48:28,800
And then

1375
01:48:28,800 --> 01:48:32,360
we get the best ending, right?

1376
01:48:33,000 --> 01:48:35,600
So right now the size is four,

1377
01:48:36,120 --> 01:48:39,200
the value of Y is three.

1378
01:48:39,400 --> 01:48:42,360
So is three.

1379
01:48:42,360 --> 01:48:46,160
Less than four.

1380
01:48:46,160 --> 01:48:47,920
So the size of us four.

1381
01:48:47,920 --> 01:48:52,560
So four is a four less than four, No.

1382
01:48:53,120 --> 01:48:55,800
So this loop, it terminates

1383
01:48:56,520 --> 01:48:59,760
because if this size was fixed

1384
01:48:59,800 --> 01:49:02,800
so the I was incrementing one by one.

1385
01:49:02,880 --> 01:49:04,200
Let me let me do it again.

1386
01:49:04,200 --> 01:49:06,240
You guys did you guys observe the change?

1387
01:49:06,480 --> 01:49:13,680
Why the last condition was not executed,

1388
01:49:13,680 --> 01:49:16,680
By the way,
let me show you one more trick.

1389
01:49:16,920 --> 01:49:19,240
So let's say you are executing a code.

1390
01:49:20,120 --> 01:49:21,800
You executing a code.

1391
01:49:21,800 --> 01:49:25,760
And that code, it involves
many, many loops

1392
01:49:25,800 --> 01:49:29,320
before you reach your specific case.

1393
01:49:29,760 --> 01:49:33,080
Does mean
that you have to go through all the steps.

1394
01:49:33,720 --> 01:49:36,960
Like, for example, in our case,
we want to see the result of our test

1395
01:49:36,960 --> 01:49:40,840
and yes, we do that Position number six,
I have go through first

1396
01:49:40,840 --> 01:49:44,400
five iterations of the loop
during the debug process

1397
01:49:44,640 --> 01:49:48,200
and then only I can check out the business
for our test ending.

1398
01:49:48,480 --> 01:49:50,200
So here is a neat trick.

1399
01:49:50,200 --> 01:49:54,120
If your iterations
the involves thousands of I feel loops,

1400
01:49:54,120 --> 01:49:58,200
they involve thousands of iterations,
what do you guys can do?

1401
01:49:58,240 --> 01:50:02,680
You can right click on your debug blank
and you can place a condition.

1402
01:50:03,160 --> 01:50:05,760
So when you want to stop this loop.

1403
01:50:05,760 --> 01:50:08,160
So let's say, for example,
I want to stop this loop when,

1404
01:50:08,360 --> 01:50:11,000
when the value either
equal to equal to two.

1405
01:50:11,520 --> 01:50:16,200
Now I don't need to go through
the first two steps to check the results.

1406
01:50:16,640 --> 01:50:22,000
And now this loop will stop,
will be stopped at iteration number two.

1407
01:50:22,280 --> 01:50:23,520
So we don't care.

1408
01:50:23,520 --> 01:50:26,320
We can skip thousand
first thousand vibrations.

1409
01:50:26,320 --> 01:50:30,520
I want to skip and I want to check
the results for iteration number 1001.

1410
01:50:30,720 --> 01:50:32,560
I can also do that.

1411
01:50:32,560 --> 01:50:35,480
Does it make sense, guys,
if you are debugging a code

1412
01:50:36,480 --> 01:50:38,000
and that would

1413
01:50:38,000 --> 01:50:40,600
involve a thousand self iterations

1414
01:50:41,400 --> 01:50:45,880
and you want to check out the result of of
maybe the last vibration.

1415
01:50:46,560 --> 01:50:49,200
If you are not using
the debugging process, let me show

1416
01:50:49,200 --> 01:50:53,120
you first,
let me show you by doing it manually.

1417
01:50:53,120 --> 01:50:56,760
So let's say if I wanted to check the test
and you result, how can I do that?

1418
01:50:57,920 --> 01:51:01,920
I have to go through first vibrations.

1419
01:51:02,160 --> 01:51:04,400
So I have to do this, this, this.

1420
01:51:04,400 --> 01:51:05,200
I have to wait.

1421
01:51:05,200 --> 01:51:07,640
When will be the test and you coming?

1422
01:51:07,640 --> 01:51:09,400
Okay. Selenium. Selenium.

1423
01:51:09,400 --> 01:51:10,960
I have to click multiple times.

1424
01:51:10,960 --> 01:51:11,800
Multiple times.

1425
01:51:11,800 --> 01:51:16,960
Finally I see testing right.

1426
01:51:16,960 --> 01:51:18,400
Okay. So

1427
01:51:19,000 --> 01:51:21,800
and then if I don't want to do that,

1428
01:51:21,800 --> 01:51:27,160
I want to directly jump to this iteration
when the value I is three.

1429
01:51:27,480 --> 01:51:32,600
So what I can do, I can right click,
I can say there, take out intelligence

1430
01:51:32,880 --> 01:51:36,640
only stop this loop
when the value of I is two.

1431
01:51:38,160 --> 01:51:40,440
And now if I debug discord

1432
01:51:43,440 --> 01:51:46,080
you see I directly start my debugger.

1433
01:51:46,200 --> 01:51:48,200
This is starting from gate.

1434
01:51:48,200 --> 01:51:51,840
It has skipped SDLC,
it has skipped manual testing,

1435
01:51:51,840 --> 01:51:55,360
it has skip to Java
and now I see my debugging in here.

1436
01:51:55,920 --> 01:51:56,360
Why too?

1437
01:51:56,360 --> 01:52:02,120
Because I want to check the results
for digression.

1438
01:52:02,120 --> 01:52:05,200
How many of you have got a
how many of you have understood

1439
01:52:05,240 --> 01:52:22,200
the benefit of this?

1440
01:52:22,200 --> 01:52:25,720
Okay, I will show again. Don't worry,

1441
01:52:25,720 --> 01:52:26,520
it does not matter.

1442
01:52:26,520 --> 01:52:29,880
You can stop it at any iteration.

1443
01:52:29,880 --> 01:52:32,800
Yes, we tell where to start the debugging.

1444
01:52:33,720 --> 01:52:35,760
Skip the first 500 iterations.

1445
01:52:35,840 --> 01:52:37,200
Yes, they will be skipped.

1446
01:52:37,200 --> 01:52:40,320
You don't have to click
multiple times the end and again and again

1447
01:52:40,320 --> 01:52:43,040
to reach the iteration number 5000.

1448
01:52:44,880 --> 01:52:46,120
It's very useful.

1449
01:52:46,120 --> 01:52:48,600
Very, very useful when debugging loops

1450
01:52:51,960 --> 01:52:54,000
and why to

1451
01:52:54,000 --> 01:52:58,760
to go to class and because it is adjusting
your size dynamically.

1452
01:52:58,760 --> 01:53:02,560
Hasim Because the list is only testing
your size dynamically.

1453
01:53:02,960 --> 01:53:05,880
So the will be all acquisition
number, iteration

1454
01:53:05,880 --> 01:53:13,000
number two,
I will show you it with another one.

1455
01:53:13,080 --> 01:53:15,720
Okay.

1456
01:53:15,720 --> 01:53:17,240
Let me do it manually.

1457
01:53:17,240 --> 01:53:19,520
The longer we're

1458
01:53:20,560 --> 01:53:23,160
there is nothing and we cannot skip
any operation.

1459
01:53:23,160 --> 01:53:25,000
Let's do it. The manual.

1460
01:53:25,000 --> 01:53:27,160
Let me skip this

1461
01:53:27,400 --> 01:53:28,320
for for good guys.

1462
01:53:28,320 --> 01:53:36,720
Whatever I have showed you in last
five units, forget about Netflix. It's

1463
01:53:40,960 --> 01:53:44,400
I will show you
the benefit of this debugging.

1464
01:53:45,240 --> 01:53:49,960
What if it is about asking the interview?

1465
01:53:49,960 --> 01:53:52,640
So I will show you it with another example
here.

1466
01:53:52,640 --> 01:53:56,360
This size is being understood dynamically,
so it will be harder for you to grasp

1467
01:53:56,440 --> 01:53:57,160
this concept.

1468
01:53:57,160 --> 01:53:58,000
I understand that.

1469
01:53:58,000 --> 01:54:00,320
Don't worry,
I will show you with another example.

1470
01:54:01,440 --> 01:54:04,240
So okay,

1471
01:54:04,640 --> 01:54:08,320
so I get the SDLC can't be forgotten.

1472
01:54:08,320 --> 01:54:11,240
It is recorded.

1473
01:54:11,240 --> 01:54:14,040
Okay, so I take the next iteration.

1474
01:54:14,520 --> 01:54:15,280
Okay.

1475
01:54:15,360 --> 01:54:17,640
Right now the value of AI is one.

1476
01:54:18,840 --> 01:54:26,120
This size is four.

1477
01:54:26,120 --> 01:54:28,560
So this size has been reduced to five.

1478
01:54:28,600 --> 01:54:31,200
If you guys see in here

1479
01:54:33,080 --> 01:54:34,560
again condition.

1480
01:54:34,560 --> 01:54:36,720
So we get it.

1481
01:54:36,720 --> 01:54:38,640
And now

1482
01:54:39,360 --> 01:54:41,400
for the next iteration.

1483
01:54:41,840 --> 01:54:45,440
So let me show this this subject

1484
01:54:45,480 --> 01:54:47,880
and dot size

1485
01:54:52,560 --> 01:54:54,760
is four, right?

1486
01:54:55,680 --> 01:54:59,000
And the value of AI,
you guys can see it from here.

1487
01:54:59,000 --> 01:55:01,560
The value of AI is three, right?

1488
01:55:02,360 --> 01:55:05,040
So, okay,

1489
01:55:06,080 --> 01:55:08,120
it is not showing that last step.

1490
01:55:08,760 --> 01:55:13,200
So this size for this selenium
after this GitHub

1491
01:55:13,720 --> 01:55:16,400
it it changes to three

1492
01:55:17,080 --> 01:55:20,760
and then three is not less than three.

1493
01:55:20,760 --> 01:55:24,320
So it terminates the loop
and it never checks

1494
01:55:24,920 --> 01:55:27,480
for this best ending. So

1495
01:55:28,480 --> 01:55:30,800
you guys might ask this that, Hey Oscar,

1496
01:55:31,080 --> 01:55:34,680
why don't you put less equal
to sign in here?

1497
01:55:35,400 --> 01:55:38,280
And if I do this.

1498
01:55:38,400 --> 01:55:39,560
Yes. Third place.

1499
01:55:39,560 --> 01:55:43,840
If I do this, I will be getting

1500
01:55:44,880 --> 01:55:47,080
an index.

1501
01:55:47,080 --> 01:55:50,560
So an index out of bounds
if I try to do that.

1502
01:55:51,040 --> 01:55:52,440
Okay.

1503
01:55:52,440 --> 01:55:57,400
And if I don't do this,
I am skipping this last element.

1504
01:55:57,400 --> 01:55:59,960
Because for this last element,

1505
01:56:00,640 --> 01:56:03,360
the value of AI

1506
01:56:03,360 --> 01:56:07,360
and the condition that this this objects,
it is returning.

1507
01:56:07,920 --> 01:56:11,160
They don't match
and the loop gets terminated.

1508
01:56:11,800 --> 01:56:12,520
Okay.

1509
01:56:12,600 --> 01:56:16,720
How many of you have understood this,
that why

1510
01:56:17,120 --> 01:56:29,760
this last entry is not being processed?

1511
01:56:29,760 --> 01:56:32,280
So let me let me try it and try to draw it

1512
01:56:36,480 --> 01:56:38,560
for for this iteration.

1513
01:56:40,200 --> 01:56:43,280
This size will be five or 30

1514
01:56:44,640 --> 01:56:45,600
and decide

1515
01:56:45,600 --> 01:56:48,280
this, this this less than equal to

1516
01:56:49,520 --> 01:56:51,360
so the size will return me

1517
01:56:51,360 --> 01:56:54,440
six the 1 to 3, four,

1518
01:56:54,480 --> 01:56:56,960
five six sides will return with six

1519
01:56:57,480 --> 01:57:00,720
and the value of I will be zero.

1520
01:57:01,120 --> 01:57:01,480
Right.

1521
01:57:01,480 --> 01:57:05,080
Let me try again here

1522
01:57:05,160 --> 01:57:06,160
then it be fixed?

1523
01:57:06,160 --> 01:57:08,840
Yes, there are so many ways to fix it, but

1524
01:57:09,080 --> 01:57:12,000
you guys will always be in trouble, right?

1525
01:57:12,720 --> 01:57:17,280
Because once the data changes,
your loop will break.

1526
01:57:17,480 --> 01:57:18,240
So maybe less.

1527
01:57:18,240 --> 01:57:21,760
Let's say at the last position
if I put an element

1528
01:57:22,520 --> 01:57:24,560
so add the second last position.

1529
01:57:24,560 --> 01:57:27,600
If I put an element
which is which has an size less than four,

1530
01:57:28,000 --> 01:57:30,520
then this loop it will work perfectly fine

1531
01:57:33,320 --> 01:57:33,720
because

1532
01:57:33,720 --> 01:57:35,800
for the last element,
the size will not be changed.

1533
01:57:36,920 --> 01:57:38,080
So let me first.

1534
01:57:38,080 --> 01:57:38,520
Right.

1535
01:57:38,520 --> 01:57:42,840
Okay, so I is zero in here.

1536
01:57:42,840 --> 01:57:43,560
Total sizes.

1537
01:57:43,560 --> 01:57:47,760
States, right?

1538
01:57:47,760 --> 01:57:49,960
Can we do a subject?

1539
01:57:49,960 --> 01:57:53,040
I so try to do all of these things

1540
01:57:53,040 --> 01:57:57,720
on your computer.

1541
01:57:57,720 --> 01:57:58,440
Okay.

1542
01:57:58,760 --> 01:58:02,040
So I am trying to teach you
that don't use loops.

1543
01:58:02,240 --> 01:58:04,400
Then you are changing this size.

1544
01:58:04,400 --> 01:58:05,840
Okay. Simple.

1545
01:58:07,400 --> 01:58:08,560
How many of you

1546
01:58:08,560 --> 01:58:13,920
just believe me that using the loops
when you are changing this size,

1547
01:58:13,920 --> 01:58:16,800
it cannot be problematic
and you should never use it.

1548
01:58:16,920 --> 01:58:19,200
That's what I am trying to explain this.

1549
01:58:19,200 --> 01:58:22,600
All I want you to say
if you guys believe me,

1550
01:58:22,600 --> 01:58:31,360
you guys that okay, we can move forward.

1551
01:58:31,360 --> 01:58:35,920
We believed until today is

1552
01:58:37,040 --> 01:58:41,040
So let me try one more time.

1553
01:58:41,040 --> 01:58:43,480
I was about to say

1554
01:58:43,960 --> 01:58:46,240
so after this iteration, the value of

1555
01:58:46,240 --> 01:58:49,080
I will be one

1556
01:58:55,280 --> 01:58:59,280
and the total size.

1557
01:58:59,280 --> 01:59:03,240
So after this iteration, guys,

1558
01:59:03,240 --> 01:59:06,400
the total size will be five, right

1559
01:59:09,120 --> 01:59:10,680
after this

1560
01:59:11,360 --> 01:59:14,360
I will be to

1561
01:59:14,360 --> 01:59:19,360
total size will be five,

1562
01:59:19,360 --> 01:59:22,000
I will be three.

1563
01:59:22,560 --> 01:59:26,000
Total
size is still five for this operation.

1564
01:59:26,080 --> 01:59:28,440
This is where the problem happens.

1565
01:59:28,440 --> 01:59:30,000
I will be four

1566
01:59:31,640 --> 01:59:34,160
and size will be reduced to four.

1567
01:59:34,160 --> 01:59:40,320
Also for this last element,
this condition will not hold true

1568
01:59:40,320 --> 01:59:43,880
because I four is not less than four.

1569
01:59:44,160 --> 01:59:46,160
Look, I still don't understand this.

1570
01:59:46,160 --> 01:59:48,600
Why this last element is being skipped

1571
01:59:49,040 --> 01:59:52,040
because now I is not less than four.

1572
01:59:52,080 --> 01:59:53,760
Right? Four is not less than four.

1573
01:59:53,760 --> 01:59:55,840
This condition is not holding
true anymore.

1574
01:59:56,400 --> 02:00:01,040
The loops they keep on iterating unless
and until only

1575
02:00:01,200 --> 02:00:04,240
if this condition that we write in here,

1576
02:00:04,520 --> 02:00:07,320
if this condition returns true

1577
02:00:07,320 --> 02:00:09,960
as soon as this condition returns

1578
02:00:10,160 --> 02:00:13,680
cause the loops they break, right?

1579
02:00:15,040 --> 02:00:21,480
They loops, they break right.

1580
02:00:21,480 --> 02:00:26,200
So that's
why the last element will be skipped,

1581
02:00:26,200 --> 02:00:29,720
because size is changing at runtime

1582
02:00:30,360 --> 02:00:32,760
and we

1583
02:00:35,720 --> 02:00:36,560
we didn't

1584
02:00:36,560 --> 02:00:43,080
change our condition with that size.

1585
02:00:43,080 --> 02:00:46,840
So what you guys can try
you guys can try one more thing.

1586
02:00:46,840 --> 02:00:48,520
Maybe you guys can try this.

1587
02:00:48,520 --> 02:00:51,160
Maybe store the size

1588
02:00:53,400 --> 02:00:56,640
in a variable first

1589
02:00:58,240 --> 02:01:02,040
and then use their size

1590
02:01:02,520 --> 02:01:03,120
inside.

1591
02:01:03,120 --> 02:01:07,560
This condition will change size and
we will be really size change at runtime.

1592
02:01:07,560 --> 02:01:14,560
Now. But really,

1593
02:01:14,640 --> 02:01:20,560
will this code work now?

1594
02:01:20,560 --> 02:01:22,440
No, it will not work

1595
02:01:22,440 --> 02:01:26,400
because is there any element
which is present at index number five?

1596
02:01:26,520 --> 02:01:32,240
I if I remove these two elements there
will be no element at index number five.

1597
02:01:32,880 --> 02:01:37,680
Now I will be getting an exception
index out of bound.

1598
02:01:37,680 --> 02:01:41,240
Let me let me show it again.

1599
02:01:41,240 --> 02:01:43,440
It's important guys. Let's try to focus.

1600
02:01:43,880 --> 02:01:50,400
So you see size is six, but in actual

1601
02:01:50,880 --> 02:01:55,680
the size of the error
list has been reduced to five four.

1602
02:01:55,920 --> 02:01:58,920
So when you will try to get to the element

1603
02:01:59,160 --> 02:02:02,240
index number five,

1604
02:02:02,240 --> 02:02:06,480
you will be having no element
at index number five because elements

1605
02:02:06,480 --> 02:02:09,520
have been removed
and the size is already being shrink

1606
02:02:09,840 --> 02:02:14,720
to four.

1607
02:02:14,720 --> 02:02:18,320
Okay, so you guys now understand
the frustration.

1608
02:02:18,600 --> 02:02:23,400
So it's not even easy to understand
why you why in this call is not working.

1609
02:02:24,080 --> 02:02:25,760
Well, that was my whole point.

1610
02:02:25,760 --> 02:02:27,840
It's not even easy to understand.

1611
02:02:27,840 --> 02:02:31,640
Now, you guys can imagine
debugging this code and trying to fix out

1612
02:02:31,680 --> 02:02:33,600
your behavior issue.

1613
02:02:33,600 --> 02:02:38,640
So the conclusion is please don't use lose

1614
02:02:39,120 --> 02:02:42,760
when you are changing this size.

1615
02:02:42,760 --> 02:02:45,960
When you are performing
any operation on the error list

1616
02:02:46,160 --> 02:02:50,240
that can change its size,
it can be adding the element.

1617
02:02:51,000 --> 02:02:54,640
If you are adding element inside a loop,
it can be problematic.

1618
02:02:54,640 --> 02:02:57,600
If you are removing an element,
it can also be problematic.

1619
02:02:57,600 --> 02:03:00,080
Whichever operation changes this size,

1620
02:03:00,680 --> 02:03:03,880
please don't perform
those operations inside the loops.

1621
02:03:05,320 --> 02:03:06,040
Okay.

1622
02:03:06,120 --> 02:03:08,200
And I
hope you guys will never try to do that.

1623
02:03:09,360 --> 02:03:11,040
I should say no.

1624
02:03:11,040 --> 02:03:15,480
And as in the sports general related
to these these these issues.

1625
02:03:15,480 --> 02:03:15,800
Okay.

1626
02:03:15,800 --> 02:03:18,800
Well, I am sure you brought the point home
with that

1627
02:03:18,800 --> 02:03:22,680
hour and half explanation.

1628
02:03:22,680 --> 02:03:25,840
So what do we do now?

1629
02:03:25,840 --> 02:03:26,440
Right.

1630
02:03:26,440 --> 02:03:28,400
I can not use the default loop.

1631
02:03:28,400 --> 02:03:30,240
I cannot use the Y loop.

1632
02:03:30,240 --> 02:03:32,160
I cannot use h loop.

1633
02:03:32,160 --> 02:03:33,720
So what can I use, right?

1634
02:03:33,720 --> 02:03:36,200
Or what can I use?

1635
02:03:36,200 --> 02:03:41,040
I can use something called iterator.

1636
02:03:41,040 --> 02:03:41,840
Okay.

1637
02:03:42,840 --> 02:03:46,440
I can use something
called as I played this.

1638
02:03:46,480 --> 02:04:06,160
Now what is this iteration?

1639
02:04:06,160 --> 02:04:08,560
So this iterator,

1640
02:04:08,640 --> 02:04:12,320
it's again an interface. It's

1641
02:04:13,520 --> 02:04:15,040
not closed for sure.

1642
02:04:15,040 --> 02:04:17,320
So this iterator,

1643
02:04:18,560 --> 02:04:22,400
it's an interface.

1644
02:04:22,400 --> 02:04:25,680
And we again
use the diamond operator in here.

1645
02:04:25,680 --> 02:04:29,640
We specify the data
type that we are dealing with

1646
02:04:31,080 --> 02:04:33,840
and we can create an object of this.

1647
02:04:34,120 --> 02:04:38,720
We can get an object of the class
that is implementing this iterator.

1648
02:04:39,120 --> 02:04:45,880
So if you guys look at this picture,
you see this table interface

1649
02:04:46,800 --> 02:04:48,880
early is super, super, very, very top.

1650
02:04:50,560 --> 02:04:54,200
That means this iterator will be present

1651
02:04:54,200 --> 02:04:57,360
in all the interfaces and classes in here.

1652
02:04:58,160 --> 02:04:58,800
Okay.

1653
02:04:58,920 --> 02:05:01,440
So for collections,
whenever you are using collections,

1654
02:05:01,480 --> 02:05:04,600
always, always to use I

1655
02:05:05,200 --> 02:05:08,520
if you are changing this size

1656
02:05:08,560 --> 02:05:10,800
so this hydrator,
it will be available everywhere.

1657
02:05:10,800 --> 02:05:12,760
So don't worry about this availability.

1658
02:05:12,760 --> 02:05:16,360
It is the topmost line in the hierarchy.

1659
02:05:16,680 --> 02:05:21,840
So and how can I get that each class,
like for example, this analyst class

1660
02:05:21,920 --> 02:05:26,080
they are implementing this iterator
interface which means to whichever method

1661
02:05:26,080 --> 02:05:31,200
I present inside this iterator interface,
they are implemented by all the classes.

1662
02:05:31,200 --> 02:05:32,560
So I can simply say

1663
02:05:35,720 --> 02:05:37,320
I can see

1664
02:05:37,320 --> 02:05:41,120
some dark start.

1665
02:05:41,120 --> 02:05:45,440
I and I will get the object of our trigger
from this method.

1666
02:05:46,160 --> 02:05:48,960
Is it okay guys, here's the top interface.

1667
02:05:49,480 --> 02:05:54,760
All the classes are implementing
this interface so I can get the object

1668
02:05:54,760 --> 02:05:59,640
of this iterator from any of the class
and I can float inside this interface.

1669
02:05:59,720 --> 02:06:06,360
Is it clear?

1670
02:06:06,360 --> 02:06:07,440
Okay.

1671
02:06:07,880 --> 02:06:10,800
So now how this iterator works?

1672
02:06:10,800 --> 02:06:13,480
This iterator has three methods.

1673
02:06:14,640 --> 02:06:17,880
So the first method is

1674
02:06:20,400 --> 02:06:21,040
iterator.

1675
02:06:21,040 --> 02:06:24,960
Dot has the next word.

1676
02:06:24,960 --> 02:06:27,600
This map meter does

1677
02:06:27,600 --> 02:06:30,360
iterate through.

1678
02:06:30,360 --> 02:06:32,960
If there are elements

1679
02:06:33,240 --> 02:06:37,920
inside this ArrayList.

1680
02:06:37,920 --> 02:06:40,400
So for example, if I have your discord,

1681
02:06:41,160 --> 02:06:43,440
I will be getting a true

1682
02:06:45,160 --> 02:06:45,960
okay.

1683
02:06:46,520 --> 02:06:53,040
And if I want to get out the ops,

1684
02:06:53,040 --> 02:06:56,240
if I want to get out the elements,

1685
02:06:56,800 --> 02:07:00,400
you with the help of this iterator,
I say our iterator dot

1686
02:07:05,240 --> 02:07:07,200
iterator dot

1687
02:07:08,200 --> 02:07:09,240
next.

1688
02:07:09,240 --> 02:07:12,800
Then it will return me the element

1689
02:07:14,440 --> 02:07:18,720
which is present at first allocation.

1690
02:07:18,720 --> 02:07:19,720
So I get through.

1691
02:07:19,720 --> 02:07:22,920
There are elements. I get SDLC forward.

1692
02:07:22,920 --> 02:07:26,680
This has next to again, it just tells you

1693
02:07:26,680 --> 02:07:30,040
if there are any elements
inside the iterator download.

1694
02:07:30,080 --> 02:07:31,440
So what what is happening in here?

1695
02:07:31,440 --> 02:07:33,480
You guys can think of it like this.

1696
02:07:34,640 --> 02:07:38,480
I treated yesterday from that structure

1697
02:07:41,000 --> 02:07:43,200
and when you call this iterator method

1698
02:07:43,200 --> 02:07:46,600
all the elements from the list,
they are kind of copied.

1699
02:07:47,400 --> 02:07:50,440
They are not copied in actual,
but they are kind of copied

1700
02:07:50,440 --> 02:07:52,520
inside of this iterator.

1701
02:07:52,520 --> 02:07:53,240
Okay.

1702
02:07:53,480 --> 02:07:56,600
And the pointer,

1703
02:07:56,600 --> 02:07:58,440
it is index number minus one.

1704
02:07:58,440 --> 02:07:59,960
This is zero. And this one.

1705
02:07:59,960 --> 02:08:03,400
So initially the pointer

1706
02:08:04,920 --> 02:08:07,040
is at index minus one.

1707
02:08:07,040 --> 02:08:10,440
When we call this this next method,

1708
02:08:11,040 --> 02:08:14,760
this pointer is mode one location ahead

1709
02:08:15,240 --> 02:08:20,080
and it returns as the element
that is present at the location.

1710
02:08:20,080 --> 02:08:23,560
Therefore,
why we get to this SDLC, because it was

1711
02:08:25,680 --> 02:08:26,880
first element

1712
02:08:27,360 --> 02:08:30,280
and if I call the next method
one more time,

1713
02:08:30,280 --> 02:08:32,160
the pointer will be moved in here.

1714
02:08:32,160 --> 02:08:36,240
If I call the next method three times
we should get any elements.

1715
02:08:36,240 --> 02:08:40,640
Guys.

1716
02:08:40,640 --> 02:08:41,880
No. Right.

1717
02:08:41,880 --> 02:08:45,720
Because I have consumed all the elements.

1718
02:08:45,720 --> 02:08:47,760
So if I repeat this code

1719
02:08:54,360 --> 02:08:55,520
so I am

1720
02:08:55,520 --> 02:09:00,440
I am taking if the if the pointer if it
is still at the last location or not,

1721
02:09:00,440 --> 02:09:04,400
if there are still elements left or not,
it will return me to.

1722
02:09:04,400 --> 02:09:06,360
Then I call the next matrix.

1723
02:09:06,360 --> 02:09:10,280
The pointer will move one location ahead
and then I again check

1724
02:09:10,280 --> 02:09:12,480
if there are any elements. So

1725
02:09:14,160 --> 02:09:16,440
can you guys tell me what this hasn't
last has?

1726
02:09:16,440 --> 02:09:18,680
Next will return me

1727
02:09:18,760 --> 02:09:21,120
once I have consumed both of the elements.

1728
02:09:21,480 --> 02:09:29,800
So the table true Still true or false?

1729
02:09:29,800 --> 02:09:31,760
So I get through.

1730
02:09:31,760 --> 02:09:35,640
I get the SDLC again, go through,
I get malware testing.

1731
02:09:35,840 --> 02:09:39,000
But last night try to check

1732
02:09:39,640 --> 02:09:42,120
if there is a third
element present or not.

1733
02:09:42,360 --> 02:09:44,040
Is there any third element?

1734
02:09:44,040 --> 02:09:47,360
No. So I will be getting it false.

1735
02:09:48,400 --> 02:09:50,040
So can I write a loop with this?

1736
02:09:50,040 --> 02:09:52,240
Has an extra method

1737
02:09:52,800 --> 02:09:54,200
with this has an X method.

1738
02:09:54,200 --> 02:09:58,080
Cannot write a loop.

1739
02:09:58,080 --> 02:10:01,640
So as far as there are elements

1740
02:10:02,520 --> 02:10:05,520
in the list, I will be getting through

1741
02:10:06,160 --> 02:10:08,880
and add as soon as I am,

1742
02:10:09,280 --> 02:10:11,440
I am done consuming all the elements.

1743
02:10:12,000 --> 02:10:14,520
I will get that false
so I can use this as a condition

1744
02:10:14,520 --> 02:10:19,600
inside a loop.

1745
02:10:19,600 --> 02:10:22,080
Oh, I am not immune to that.

1746
02:10:22,080 --> 02:10:25,160
Don't use the loop without the iterator

1747
02:10:25,920 --> 02:10:29,760
with the iterator you guys
can use the loops because that dynamic

1748
02:10:29,760 --> 02:10:34,200
or adjustment of size,
it will be taken care of by this hydrator.

1749
02:10:34,800 --> 02:10:39,280
Okay, so it's kind of that
that structure that is

1750
02:10:40,120 --> 02:10:42,440
that is handling this size

1751
02:10:42,440 --> 02:10:46,200
dynamically at runtime.

1752
02:10:46,200 --> 02:10:48,000
So let let let's let me first complete.

1753
02:10:48,000 --> 02:10:51,120
So if there are no elements

1754
02:10:51,720 --> 02:10:54,400
and I tried to call this next method

1755
02:10:54,400 --> 02:11:00,520
again, okay, if there are no elements
and I try to call the next method again,

1756
02:11:00,960 --> 02:11:06,520
I will be getting an error.

1757
02:11:06,520 --> 02:11:09,320
Okay. No such element exception.

1758
02:11:10,160 --> 02:11:14,200
So is it here how this treat
how these two methods are total?

1759
02:11:14,280 --> 02:11:19,800
They are working.

1760
02:11:19,800 --> 02:11:22,320
So let me do this. If

1761
02:11:23,480 --> 02:11:25,960
if if

1762
02:11:25,960 --> 02:11:28,200
I say let's say maybe.

1763
02:11:29,960 --> 02:11:32,040
Oh okay.

1764
02:11:32,040 --> 02:11:34,040
If I check

1765
02:11:34,040 --> 02:11:36,680
that there are any elements or not.

1766
02:11:36,720 --> 02:11:40,360
And after that, if

1767
02:11:40,680 --> 02:11:47,560
I try to remove an element, okay.

1768
02:11:47,840 --> 02:11:50,880
If the wide type

1769
02:11:51,840 --> 02:11:53,760
so I checked

1770
02:11:53,760 --> 02:11:56,320
if there are any elements or not,
after that

1771
02:11:56,400 --> 02:11:58,600
I call to remove the element.

1772
02:11:59,840 --> 02:12:01,000
Okay.

1773
02:12:01,000 --> 02:12:03,480
And then I am
calling the next method again.

1774
02:12:03,480 --> 02:12:13,760
Will I get any other guys
if I execute the code?

1775
02:12:13,760 --> 02:12:16,720
So I got the first element,

1776
02:12:17,600 --> 02:12:21,040
so I to one element
and I remove the other element.

1777
02:12:21,200 --> 02:12:26,080
So I have already consumed two elements
and there were total two elements, right?

1778
02:12:26,760 --> 02:12:38,160
And now I am trying to get the third one.

1779
02:12:38,160 --> 02:12:44,080
Okay, let me check why we have.

1780
02:12:44,280 --> 02:12:44,760
Okay.

1781
02:12:44,760 --> 02:12:50,320
Sorry, sorry, sorry, let me do this.

1782
02:12:50,320 --> 02:12:59,840
So what is happening in here?

1783
02:12:59,840 --> 02:13:05,200
I got this SDLC in here and this

1784
02:13:06,720 --> 02:13:08,840
were testing in here.

1785
02:13:09,120 --> 02:13:14,320
So this next method,
what the next method is doing.

1786
02:13:14,320 --> 02:13:18,840
So initially the pointer is in, here

1787
02:13:20,040 --> 02:13:22,840
it is index number zero,
and it is index number one.

1788
02:13:23,400 --> 02:13:26,440
When I call the next method,

1789
02:13:26,440 --> 02:13:28,600
you can think of it like this

1790
02:13:28,600 --> 02:13:30,960
when I call the next method

1791
02:13:33,240 --> 02:13:39,440
in here,

1792
02:13:39,440 --> 02:13:44,880
it will move the pointer in here
and it will grab me.

1793
02:13:44,880 --> 02:13:47,040
So in this SDLC will be stored

1794
02:13:51,080 --> 02:13:53,840
inside this, this, next.

1795
02:13:55,680 --> 02:13:58,080
And when I check

1796
02:13:58,560 --> 02:14:02,520
the has an next
because there is still one element in here

1797
02:14:02,520 --> 02:14:06,200
I get true when I call this remove method.

1798
02:14:06,200 --> 02:14:10,120
It is actually removing SDLC. Not.

1799
02:14:10,480 --> 02:14:13,760
Yes it is removing the the the element

1800
02:14:13,760 --> 02:14:18,680
which was previously stored inside it,
not the menu testing.

1801
02:14:19,200 --> 02:14:21,840
If I have to remove the men were testing,

1802
02:14:22,040 --> 02:14:25,480
I have to call this next method
one more time.

1803
02:14:25,840 --> 02:14:29,520
Then it will move the pointer in here

1804
02:14:30,120 --> 02:14:33,760
and this will contain manual testing.

1805
02:14:33,760 --> 02:14:49,320
So I think it will be clear
in this way. So.

1806
02:14:49,320 --> 02:14:53,880
So what I am doing, I am calling
this has the next returns through.

1807
02:14:54,240 --> 02:14:57,480
I got the next element, which is SDLC.

1808
02:14:57,560 --> 02:15:01,920
First element first I am calling the next,
then checking has next returns be true.

1809
02:15:01,920 --> 02:15:04,920
Then I am removing element from this list.

1810
02:15:04,960 --> 02:15:05,760
Right?

1811
02:15:06,120 --> 02:15:15,280
So now if I execute this code,
I should still see manual testing

1812
02:15:15,280 --> 02:15:18,400
in my list because the last element

1813
02:15:18,400 --> 02:15:21,360
that was stored back was grabbed by next

1814
02:15:21,840 --> 02:15:24,960
and next method was SDLC.

1815
02:15:25,320 --> 02:15:29,800
So there is still one element
present inside my list.

1816
02:15:29,800 --> 02:15:34,080
So this removal method,
it actually works on the memory off

1817
02:15:34,080 --> 02:15:39,760
next method,
whatever is returned by the next method.

1818
02:15:39,760 --> 02:15:41,520
Last time.

1819
02:15:41,520 --> 02:15:44,080
If we call the remove method
after the back,

1820
02:15:44,080 --> 02:15:47,760
it removes that element,
not the current element.

1821
02:15:47,760 --> 02:15:52,800
Is it clear days?

1822
02:15:52,800 --> 02:15:56,160
So if I want to remove the manual testing,
let's say

1823
02:15:56,160 --> 02:16:00,720
if I want to remove the manual testing,
what should I do?

1824
02:16:00,720 --> 02:16:01,840
I should say

1825
02:16:03,480 --> 02:16:05,360
I prefer

1826
02:16:05,640 --> 02:16:08,760
not the next one more time.

1827
02:16:08,760 --> 02:16:12,600
Now next element
will grab the manual testing

1828
02:16:12,600 --> 02:16:15,640
and it restored it inside in here.

1829
02:16:15,640 --> 02:16:16,960
Okay.

1830
02:16:16,960 --> 02:16:19,480
And now if I call the remove method,

1831
02:16:20,920 --> 02:16:32,520
which element
I should see in my output guide?

1832
02:16:32,520 --> 02:16:36,680
I see SDLC because last time

1833
02:16:37,400 --> 02:16:39,920
I called the next method

1834
02:16:39,920 --> 02:16:43,080
it was manual testing.

1835
02:16:43,080 --> 02:16:46,800
So so this line to start from minus one.

1836
02:16:47,240 --> 02:16:51,360
It gives every time we call
the next method, it

1837
02:16:51,360 --> 02:16:55,920
moves to the next location and it stores
the previous element inside it.

1838
02:16:56,520 --> 02:16:57,080
Okay.

1839
02:16:57,080 --> 02:17:01,320
Well, you can you can say that it keeps
the pointer at that location still.

1840
02:17:02,240 --> 02:17:06,280
And when we call the police
this next method and remove method of

1841
02:17:06,280 --> 02:17:07,800
they are interlinked.

1842
02:17:07,800 --> 02:17:11,800
Whatever you have
got from calling the next method.

1843
02:17:12,920 --> 02:17:14,560
If you call the remove method

1844
02:17:14,560 --> 02:17:17,480
after the back,
it will remove that element.

1845
02:17:18,760 --> 02:17:21,800
So grab the element from the operator
one by one,

1846
02:17:22,440 --> 02:17:26,600
whichever is the element
that you grabbed last from the list.

1847
02:17:27,480 --> 02:17:30,240
And after that
if you call remove, remove that element,

1848
02:17:31,120 --> 02:17:33,480
it is clear

1849
02:17:36,960 --> 02:17:38,280
yes has an X

1850
02:17:38,280 --> 02:17:41,560
and does not remove the pointer.

1851
02:17:41,800 --> 02:17:43,920
There is no way to and the pointer.

1852
02:17:43,920 --> 02:17:48,720
There is another type of iterator
which can move in both directions.

1853
02:17:48,960 --> 02:17:53,960
You can move it forward
and you can move it backwards.

1854
02:17:53,960 --> 02:17:56,440
So let me

1855
02:17:57,840 --> 02:17:59,880
I don't know if you guys will be confused

1856
02:17:59,880 --> 02:18:10,800
or not.

1857
02:18:10,800 --> 02:18:13,920
It is called
I think it is called a list Hydrator.

1858
02:18:15,840 --> 02:18:17,160
Yes, this one.

1859
02:18:17,160 --> 02:18:21,280
So this list I created,
it can move in both directions.

1860
02:18:22,240 --> 02:18:26,800
So it is only for assignment guys.

1861
02:18:27,200 --> 02:18:29,600
Notably it is only for assignment.

1862
02:18:30,160 --> 02:18:31,840
So string or typewriter.

1863
02:18:31,840 --> 02:18:35,560
You see it has a previous,

1864
02:18:35,560 --> 02:18:37,880
so it has a previous next index

1865
02:18:38,680 --> 02:18:40,920
and a previous and previous index.

1866
02:18:40,920 --> 02:18:50,400
The method to move in
more to do that actions.

1867
02:18:50,400 --> 02:18:51,400
So we did.

1868
02:18:51,400 --> 02:18:53,640
We do not discuss this list. Right. Okay.

1869
02:18:54,320 --> 02:18:56,600
Imagine we never did this. So

1870
02:18:58,600 --> 02:19:04,200
let me let me show you more examples. Yes.

1871
02:19:04,440 --> 02:19:08,760
So this has a next it tells you

1872
02:19:09,640 --> 02:19:13,960
if there are any elements

1873
02:19:13,960 --> 02:19:17,040
left inside this iterator,

1874
02:19:18,200 --> 02:19:20,600
this next method.

1875
02:19:20,600 --> 02:19:25,240
On the other hand,
it goes inside of that typewriter,

1876
02:19:25,440 --> 02:19:30,240
one by one, grabs the elements and move

1877
02:19:30,240 --> 02:19:32,880
the pointer one location ahead.

1878
02:19:33,640 --> 02:19:36,000
And this remove method,

1879
02:19:36,240 --> 02:19:40,000
it actually keeps track of that pointer.

1880
02:19:40,080 --> 02:19:42,840
So let me explain.
I think it will make more sense

1881
02:19:44,400 --> 02:19:47,000
if I explain
all of this in terms of pointer.

1882
02:19:47,000 --> 02:19:51,400
So guys, let me try one time. So

1883
02:19:58,200 --> 02:20:00,480
so this is my list

1884
02:20:02,200 --> 02:20:03,880
to remove.

1885
02:20:03,880 --> 02:20:07,840
We should always call
after calling be next.

1886
02:20:07,840 --> 02:20:09,280
Yep, yep, yep.

1887
02:20:09,280 --> 02:20:09,960
You are right.

1888
02:20:09,960 --> 02:20:14,520
So if I say so, I have.

1889
02:20:14,600 --> 02:20:16,680
So let's say if I am not calling the next

1890
02:20:17,760 --> 02:20:20,400
and if I directly call the remove

1891
02:20:23,840 --> 02:20:24,760
I will be getting

1892
02:20:24,760 --> 02:20:31,920
an add of the addresses.

1893
02:20:31,920 --> 02:20:34,920
Yes. Let me read this
look and fail for multiple reasons.

1894
02:20:35,240 --> 02:20:37,080
It depends on the data.

1895
02:20:37,080 --> 02:20:38,080
You are right.

1896
02:20:38,080 --> 02:20:42,320
So If I try to call
this illegal state argument,

1897
02:20:42,680 --> 02:20:45,400
if I try to call remove directly, we

1898
02:20:45,440 --> 02:20:48,840
we are about the pointer guys
in the first vibration.

1899
02:20:48,840 --> 02:20:54,920
If I have not call the next method,
the pointer applies to index minus one.

1900
02:20:56,760 --> 02:20:57,600
Right.

1901
02:20:57,600 --> 02:21:00,920
Is there any element present
at minus one? No.

1902
02:21:01,200 --> 02:21:03,480
Then how can I try to remove that element?

1903
02:21:03,920 --> 02:21:04,360
Right.

1904
02:21:04,360 --> 02:21:08,960
How can I try to remove that element
first we should move the pointer

1905
02:21:08,960 --> 02:21:12,560
to proper location
by calling the next method.

1906
02:21:12,920 --> 02:21:15,240
Then only we can remove this element.

1907
02:21:15,400 --> 02:21:16,480
Right.

1908
02:21:16,760 --> 02:21:20,640
So when commented this out,
the next method

1909
02:21:21,120 --> 02:21:24,960
and I directly called to remove
the pointer was at minus one.

1910
02:21:25,200 --> 02:21:27,440
So I got an add. It.

1911
02:21:27,440 --> 02:21:29,240
I got an active

1912
02:21:31,200 --> 02:21:33,320
if I want to remove
the element on index float

1913
02:21:33,360 --> 02:21:36,600
so I have to call the next four times
then say remove.

1914
02:21:36,600 --> 02:21:37,360
Yes but hard.

1915
02:21:37,360 --> 02:21:38,320
You are right.

1916
02:21:38,440 --> 02:21:40,760
Yes. Yes you are right.

1917
02:21:40,760 --> 02:21:43,480
So if I want to remove.

1918
02:21:43,600 --> 02:21:46,200
So now you guys will tell me

1919
02:21:46,320 --> 02:21:50,440
if I want to remove SDLC.

1920
02:21:50,440 --> 02:21:53,400
SDLC which code I should write?

1921
02:21:54,920 --> 02:21:56,000
No index.

1922
02:21:56,000 --> 02:22:03,960
The next
method should be called four times.

1923
02:22:03,960 --> 02:22:06,600
So you see
when we call the next method once

1924
02:22:08,760 --> 02:22:10,320
we are will be deploying. Right.

1925
02:22:10,320 --> 02:22:12,240
So let me explain.

1926
02:22:12,240 --> 02:22:13,320
Give me just one moment.

1927
02:22:13,320 --> 02:22:15,840
Maybe you are right.

1928
02:22:15,840 --> 02:22:20,240
So when I called the next method
and here we are will be the pointer.

1929
02:22:21,560 --> 02:22:24,120
The point
at which index the pointer will be

1930
02:22:25,200 --> 02:22:28,120
it be in here, right?

1931
02:22:28,320 --> 02:22:30,000
It will be in here.

1932
02:22:30,000 --> 02:22:33,480
And now if I call the remove element

1933
02:22:33,840 --> 02:22:39,640
which which element should be removed.

1934
02:22:39,640 --> 02:22:43,640
The element that is present at location.

1935
02:22:45,200 --> 02:22:47,640
How many of you are confused
with this example?

1936
02:22:47,640 --> 02:22:48,800
I can look

1937
02:22:51,360 --> 02:22:53,960
actually let me do this.

1938
02:22:53,960 --> 02:22:54,720
Okay.

1939
02:22:55,400 --> 02:22:57,080
Is it clear now

1940
02:22:59,440 --> 02:23:01,440
let me remove this as well.

1941
02:23:01,440 --> 02:23:02,040
Okay.

1942
02:23:02,040 --> 02:23:06,440
So as the next.

1943
02:23:06,440 --> 02:23:07,800
Okay, let me now try it again

1944
02:23:21,880 --> 02:23:24,920
in this is manual testing, okay,

1945
02:23:24,920 --> 02:23:26,200
blah, blah, blah.

1946
02:23:26,560 --> 02:23:28,600
So initially the pointer is in here

1947
02:23:30,240 --> 02:23:32,760
and you guys just have to keep

1948
02:23:33,040 --> 02:23:36,120
you guys just have to understand
one thing.

1949
02:23:37,120 --> 02:23:39,240
This pointer is only

1950
02:23:39,240 --> 02:23:43,080
and only moved
when you the next method their state

1951
02:23:43,520 --> 02:23:46,240
and at whichever location
this pointer will be.

1952
02:23:46,520 --> 02:23:48,760
Once you call the remove method,
it will remove that

1953
02:23:49,320 --> 02:23:51,720
and it always starts
at location of minus one.

1954
02:23:51,720 --> 02:23:54,560
Yes, yes. Just focus on these two points.

1955
02:23:55,400 --> 02:23:59,440
So this pointer is only moved
when we call the next method.

1956
02:23:59,520 --> 02:24:01,920
So right now the pointer is at minus one.

1957
02:24:02,840 --> 02:24:06,000
So if I call the remove method in here

1958
02:24:06,800 --> 02:24:10,280
after this line, will I get any other

1959
02:24:12,720 --> 02:24:15,480
or I can show you
the value of our territory as well.

1960
02:24:15,560 --> 02:24:15,960
Okay.

1961
02:24:15,960 --> 02:24:21,280
Okay you guys, let me let me show you
the value of our territory as well.

1962
02:24:21,280 --> 02:24:22,960
The pull the value of pointer.

1963
02:24:22,960 --> 02:24:25,960
I didn't It's a good point, actually.

1964
02:24:25,960 --> 02:24:28,440
You guys will be able
to visualize it more.

1965
02:24:28,440 --> 02:24:33,000
So if I debug this application, you guys
will be able to see any blind as well.

1966
02:24:34,920 --> 02:24:38,080
So if I expand my window

1967
02:24:40,280 --> 02:24:41,520
and you will see

1968
02:24:41,520 --> 02:24:43,640
once I move to the next step,

1969
02:24:44,520 --> 02:24:46,720
the iterator is declared in here.

1970
02:24:47,720 --> 02:24:51,240
So in here

1971
02:24:52,320 --> 02:24:54,320
you guys see this?

1972
02:24:54,360 --> 02:24:58,040
This minus one,

1973
02:24:58,040 --> 02:25:00,680
the last odd oddity.

1974
02:25:01,040 --> 02:25:02,160
You see this?

1975
02:25:02,160 --> 02:25:04,760
Observe this. What happens to this one?

1976
02:25:04,760 --> 02:25:05,240
No, no, no.

1977
02:25:05,240 --> 02:25:08,560
It is actually
the iterator is internally actually

1978
02:25:09,320 --> 02:25:12,400
implemented in the same way
the way I am explaining it.

1979
02:25:12,400 --> 02:25:12,920
Okay.

1980
02:25:12,920 --> 02:25:15,840
You see this last read

1981
02:25:15,840 --> 02:25:19,480
minus one. So

1982
02:25:19,920 --> 02:25:20,600
focus on this.

1983
02:25:20,600 --> 02:25:21,440
This what happens.

1984
02:25:21,440 --> 02:25:27,080
So if I call head next, you see,
nothing has changed.

1985
02:25:27,320 --> 02:25:30,400
Last check is, still minus one, right?

1986
02:25:31,000 --> 02:25:33,040
Expected mode count is still two.

1987
02:25:33,400 --> 02:25:34,160
Right.

1988
02:25:34,760 --> 02:25:36,920
And as soon as I call this

1989
02:25:36,960 --> 02:25:41,280
next, you guys see

1990
02:25:41,560 --> 02:25:44,280
the last threat has changed to zero,

1991
02:25:44,800 --> 02:25:49,400
which means the pointer
has moved to location number.

1992
02:25:49,400 --> 02:25:51,520
Okay. Does move to location number.

1993
02:25:51,680 --> 02:25:57,240
What is present at location number zero,
guys, DLC is present.

1994
02:25:57,480 --> 02:25:58,320
Right?

1995
02:25:58,400 --> 02:26:01,200
So when I will be calling
the remove method,

1996
02:26:02,080 --> 02:26:08,960
which which element should be removed?

1997
02:26:08,960 --> 02:26:11,160
The SDLC. Right.

1998
02:26:11,160 --> 02:26:16,320
Because it is present at location
number zero and my right is at zero.

1999
02:26:16,320 --> 02:26:22,440
So if I call this remove you guys see
the size has changed at runtime.

2000
02:26:22,760 --> 02:26:28,080
SDLC is gone
and now I only men who are testing.

2001
02:26:28,080 --> 02:26:33,360
Now tell me if some of you are still
confused about this next or has next.

2002
02:26:33,360 --> 02:26:40,080
I remove.

2003
02:26:40,080 --> 02:26:56,960
So I should tell me the line number
which is confusing you.

2004
02:26:56,960 --> 02:26:58,720
So when we say next

2005
02:27:00,640 --> 02:27:04,360
so remove has a dependency on next

2006
02:27:06,480 --> 02:27:09,200
remove has a dependency on next.

2007
02:27:09,200 --> 02:27:12,760
So if I draw this,

2008
02:27:13,960 --> 02:27:16,560
my operator has two values

2009
02:27:19,240 --> 02:27:23,920
and the pointer

2010
02:27:23,920 --> 02:27:28,080
starts at location number minus one.

2011
02:27:28,080 --> 02:27:32,920
When this this pointer
which is pointing to minus one right now

2012
02:27:33,240 --> 02:27:38,280
it only and only changes
it only advances once.

2013
02:27:38,280 --> 02:27:40,520
I call this next method

2014
02:27:41,800 --> 02:27:44,600
and add whichever location is pointer is

2015
02:27:44,760 --> 02:27:47,680
is present at that moment.

2016
02:27:47,680 --> 02:27:49,320
If I call the remove method

2017
02:27:49,320 --> 02:27:53,520
at whichever location
this pointer, it will remove that element.

2018
02:27:53,960 --> 02:27:56,520
So if I call this remove method

2019
02:27:56,520 --> 02:28:00,120
right now, right now I am on location
index number minus one.

2020
02:28:00,400 --> 02:28:02,760
Which element should be removed
or should I get an error

2021
02:28:17,360 --> 02:28:18,840
by understanding SDLC?

2022
02:28:18,840 --> 02:28:23,720
Why is your understanding SDLC
at index number minus one?

2023
02:28:23,720 --> 02:28:25,680
What is present
index number two minus one?

2024
02:28:25,680 --> 02:28:26,920
This is the index zero.

2025
02:28:26,920 --> 02:28:32,880
This is the index number one.

2026
02:28:32,880 --> 02:28:33,360
No, no.

2027
02:28:33,360 --> 02:28:37,080
I am saying if I don't call this next,
if I don't call this next.

2028
02:28:37,360 --> 02:28:47,200
If I don't call this next
and I directly try call this move.

2029
02:28:47,200 --> 02:28:51,360
And if I call the next method first

2030
02:28:52,440 --> 02:28:55,720
and then I call the remove method.

2031
02:28:56,080 --> 02:29:00,320
So this next method, it
will also ask the pointer to this location

2032
02:29:01,320 --> 02:29:05,520
and then it will remove SDLC.

2033
02:29:06,240 --> 02:29:07,800
So I show will tell us the call.

2034
02:29:07,800 --> 02:29:11,920
Now what should I do
if I want to remove testing

2035
02:29:11,920 --> 02:29:14,640
and not SDLC?

2036
02:29:15,000 --> 02:29:34,440
What should I write?

2037
02:29:34,440 --> 02:29:38,080
I want to remove SDLC after removal.

2038
02:29:38,360 --> 02:29:43,360
Next again
before, before remove or after emotion.

2039
02:29:43,360 --> 02:29:46,040
I call the next method
before remove or after remove.

2040
02:29:46,480 --> 02:29:49,960
If I want to retain SDLC
and want to remove manual testing,

2041
02:29:51,000 --> 02:29:53,760
so I should call this next

2042
02:29:54,800 --> 02:29:56,200
slice.

2043
02:29:56,200 --> 02:30:00,760
And now the pointer will be at location
at index number one.

2044
02:30:01,600 --> 02:30:03,880
And now if I call the remove method,

2045
02:30:04,400 --> 02:30:08,000
it will remove the element

2046
02:30:08,000 --> 02:30:17,160
at that location location.

2047
02:30:17,160 --> 02:30:20,560
So now I see
SDLC and manual testing is gone.

2048
02:30:21,600 --> 02:30:22,040
Yeah,

2049
02:30:23,040 --> 02:30:25,960
when we're testing is gone.

2050
02:30:25,960 --> 02:30:27,360
Is it clear now?

2051
02:30:27,360 --> 02:30:35,400
Is there anyone who is still confused?

2052
02:30:35,400 --> 02:30:38,520
Okay, now let's try to use this operator.

2053
02:30:39,400 --> 02:30:42,960
Now let's try to use the typewriter
for the last example.

2054
02:30:42,960 --> 02:30:45,160
So in the last example, I guess

2055
02:30:46,120 --> 02:30:49,120
it was this one. No,

2056
02:30:49,120 --> 02:30:51,200
it was this one.

2057
02:30:51,200 --> 02:30:51,800
This one. Right.

2058
02:30:51,800 --> 02:30:53,880
And here
we were trying to remove best ending.

2059
02:30:54,600 --> 02:30:58,080
Now let's try to do that
with the help of left.

2060
02:30:58,320 --> 02:31:00,560
Maybe I should remove this.

2061
02:31:00,560 --> 02:31:19,640
Let's try to do that
with the help of our iterator.

2062
02:31:19,640 --> 02:31:19,960
Well,

2063
02:31:21,200 --> 02:31:29,840
no, no, no.

2064
02:31:29,840 --> 02:31:36,040
Okay.

2065
02:31:36,040 --> 02:31:39,280
So what I will do, I will always whenever.

2066
02:31:39,280 --> 02:31:39,600
Right.

2067
02:31:39,600 --> 02:31:42,200
I will be changing the size of the error
list.

2068
02:31:42,200 --> 02:31:47,160
Whenever I will be performing an operation
that can change size, I will always use

2069
02:31:47,200 --> 02:31:54,920
iterator and I will always use iterator
with y loop.

2070
02:31:54,920 --> 02:31:57,120
Yes, Farhad, you are. You are right.

2071
02:31:57,920 --> 02:32:02,480
So what I can do, I can get in idea later

2072
02:32:04,760 --> 02:32:06,960
virtualize specify inside Daniel bracket

2073
02:32:08,680 --> 02:32:11,320
s model and let me show you
how we can use that next.

2074
02:32:11,320 --> 02:32:12,840
And it has an x

2075
02:32:14,440 --> 02:32:15,480
spring, right?

2076
02:32:15,480 --> 02:32:18,000
Because my list is of types things.

2077
02:32:18,080 --> 02:32:18,960
Right right.

2078
02:32:18,960 --> 02:32:22,160
Later is equal to
how can I get the iterator

2079
02:32:39,360 --> 02:32:41,200
subject got.

2080
02:32:41,200 --> 02:32:42,880
I tried the

2081
02:32:45,040 --> 02:32:49,320
and then I can write a y loop
so I can say why?

2082
02:32:49,320 --> 02:32:51,480
What should I put inside
the condition? Guys

2083
02:32:54,960 --> 02:32:58,720
remove next on has next

2084
02:33:06,440 --> 02:33:07,800
as an exit.

2085
02:33:07,800 --> 02:33:12,480
As far as there are elements

2086
02:33:13,920 --> 02:33:17,200
present, keep on iterating

2087
02:33:18,680 --> 02:33:20,960
and if I want to get

2088
02:33:22,200 --> 02:33:26,360
the element which method I should call

2089
02:33:28,480 --> 02:33:33,680
next, remove or has next.

2090
02:33:33,680 --> 02:33:36,280
So I should say iterator dot next.

2091
02:33:37,560 --> 02:33:40,560
And if the size

2092
02:33:41,560 --> 02:33:43,640
of element

2093
02:33:44,800 --> 02:33:48,280
is greater than four,

2094
02:33:48,280 --> 02:33:50,440
how can I remove that element? Guys

2095
02:33:53,200 --> 02:33:57,400
by saying I prefer not remove?

2096
02:33:59,280 --> 02:34:05,400
And after this,

2097
02:34:05,400 --> 02:34:08,000
if I print out the size

2098
02:34:11,040 --> 02:34:13,920
I will be getting

2099
02:34:18,480 --> 02:34:22,840
only SDLC java
and you guys see the difference.

2100
02:34:23,040 --> 02:34:27,240
When we were trying
do the same thing with for Loop,

2101
02:34:27,520 --> 02:34:31,320
we were not getting the proper results
when we tried before each loop,

2102
02:34:31,520 --> 02:34:36,760
we were getting an exception,
but we use iterator with the y loop.

2103
02:34:36,760 --> 02:34:38,720
Now the results are but a fact.

2104
02:34:38,720 --> 02:34:42,560
We don't care about that dynamic size
changing thing.

2105
02:34:42,960 --> 02:34:45,680
And let me you one more beautiful thing.

2106
02:34:45,800 --> 02:34:47,880
It is lambda.

2107
02:34:47,880 --> 02:34:51,800
The next thing that I am going to show
you, they are the lambda expression

2108
02:34:52,280 --> 02:34:54,520
you can replace all of this code

2109
02:34:55,960 --> 02:35:00,000
with a single line
with the help of lambda expression.

2110
02:35:00,200 --> 02:35:07,920
Oops, you guys still needed.

2111
02:35:07,920 --> 02:35:10,520
So I am planning to show you

2112
02:35:12,400 --> 02:35:13,240
lambda

2113
02:35:37,560 --> 02:35:39,720
so this whole line can be replaced.

2114
02:35:39,720 --> 02:35:42,640
You don't need to confuse about this
at all.

2115
02:35:42,640 --> 02:35:44,680
Fine What is happening in here?

2116
02:35:45,560 --> 02:35:47,640
A press all can enter

2117
02:36:01,200 --> 02:36:04,600
the first one comment and show the short
one please.

2118
02:36:04,800 --> 02:36:06,840
If not make problem again.

2119
02:36:07,520 --> 02:36:11,040
Okay,

2120
02:36:11,040 --> 02:36:13,800
so you guys can do this as well.

2121
02:36:14,240 --> 02:36:14,720
You can.

2122
02:36:14,720 --> 02:36:18,560
You can solve this in single and
this is the beauty of Lambda expressions.

2123
02:36:19,080 --> 02:36:21,600
So I will be getting the same results, but

2124
02:36:21,600 --> 02:36:28,080
with a single line of code,

2125
02:36:28,080 --> 02:36:32,080
Lambda expressions can reduce
your complete classes to a single line.

2126
02:36:32,440 --> 02:36:41,480
In some cases.

2127
02:36:41,480 --> 02:36:45,040
So if I had time, I will show you
how to use Lambda expressions.

2128
02:36:45,400 --> 02:36:48,240
And if you guys have patience,

2129
02:36:48,480 --> 02:36:53,800
patience, all entries always so always.

2130
02:36:54,000 --> 02:36:56,160
Whenever intelligence
giving you a suggestion,

2131
02:36:57,040 --> 02:36:59,960
let's all enter and intelligible write
the code for you

2132
02:37:00,720 --> 02:37:05,960
the proper code that a good professional
developer should write intelligible

2133
02:37:06,000 --> 02:37:14,160
show you that code
if you are doing something wrong.

2134
02:37:14,160 --> 02:37:16,800
Same format just options. Enter

2135
02:37:22,200 --> 02:37:23,960
then you do the same.

2136
02:37:23,960 --> 02:37:35,160
Does it make sense now?

2137
02:37:35,160 --> 02:37:37,520
Okay, so

2138
02:37:40,480 --> 02:37:42,040
this is how we use iterator.

2139
02:37:42,040 --> 02:37:48,240
So only use our operators
when you are performing thinking of it

2140
02:37:48,720 --> 02:37:52,680
when you performing an operation
that can change

2141
02:37:52,720 --> 02:37:56,640
the size of the edit list
in those scenarios,

2142
02:37:56,920 --> 02:37:59,520
use purpose

2143
02:38:05,160 --> 02:38:05,520
to do it.

2144
02:38:05,520 --> 02:38:06,680
Move to the next example.

2145
02:38:06,680 --> 02:38:09,160
Or do you guys have any questions?

2146
02:38:09,160 --> 02:38:10,280
I think it is simple.

2147
02:38:10,280 --> 02:38:19,800
Now, once you understand that
how to remove the elements,

2148
02:38:19,800 --> 02:38:21,280
I think we need a break.

2149
02:38:21,280 --> 02:38:24,400
Okay, let's have a break

2150
02:38:34,440 --> 02:38:37,480
and remind me about the recording.

2151
02:38:37,480 --> 02:38:40,440
If I forget

2152
02:38:40,480 --> 02:38:43,160
to repeat what is the why condition

2153
02:38:43,160 --> 02:38:47,640
and if are doing so while is checking

2154
02:38:47,640 --> 02:38:50,640
if there are any elements
left in the iterator

2155
02:38:51,760 --> 02:38:53,720
and if condition is checking

2156
02:38:53,720 --> 02:38:56,960
if the size of each element

2157
02:38:56,960 --> 02:39:00,480
that we are getting one by one in here
if desired.

2158
02:39:00,520 --> 02:39:04,800
If the length of the number of characters
are more than four, if it is the case.

2159
02:39:04,800 --> 02:39:05,960
So remove that element.

2160
02:39:05,960 --> 02:39:09,040
Otherwise keep on looping.

2161
02:39:09,040 --> 02:39:11,760
You you guys can convert
to lambda expression.

2162
02:39:11,760 --> 02:39:13,440
If you have your mouse over this

2163
02:39:13,440 --> 02:39:16,800
yellowish line,
it will say replace loop with collection.

2164
02:39:16,800 --> 02:39:26,400
Start remove work.

2165
02:39:26,400 --> 02:39:27,600
Eliminate which one?

2166
02:39:27,600 --> 02:39:31,640
So right now I will recommend you
to use this approach later on once

2167
02:39:31,640 --> 02:39:35,440
I have taught you
about lambda expressions,

2168
02:39:35,440 --> 02:39:37,920
then maybe you guys can start
using lambda expressions.

2169
02:39:38,560 --> 02:39:39,240
So. Right, right.

2170
02:39:39,240 --> 02:39:43,000
Now let's use this one.

2171
02:39:43,000 --> 02:39:44,440
Eliminate which one?

2172
02:39:44,440 --> 02:39:47,160
The elements
which are greater than which are having

2173
02:39:47,160 --> 02:39:53,800
a let's get rid of them for.

2174
02:39:53,800 --> 02:39:57,840
So with the help of lambda expressions
and collections, you can eliminate

2175
02:39:58,680 --> 02:40:02,720
completely almost in every scenario,
you guys can remove the loop

2176
02:40:02,840 --> 02:40:05,240
loop conditions
if health conditions and all that,

2177
02:40:05,680 --> 02:40:10,040
and you can convert your five
or ten lines, 10 to 1520 lines

2178
02:40:10,040 --> 02:40:13,360
in a single line, you can convert
your code in some scenarios.

2179
02:40:14,400 --> 02:40:14,880
So that is

2180
02:40:14,880 --> 02:40:17,880
why with
three elements in that output, yes,

2181
02:40:18,080 --> 02:40:28,920
it is the same example that we were
trying to do with the for loop.

2182
02:40:31,680 --> 02:40:32,080
Are there

2183
02:40:32,080 --> 02:41:10,920
other questions?

2184
02:41:10,920 --> 02:41:14,440
I am only confused why maybe men
were testing it and aren't there?

2185
02:41:14,440 --> 02:41:18,280
What is this kind of manual testing idea?

2186
02:41:18,280 --> 02:41:20,760
How many characters are there

2187
02:41:24,640 --> 02:41:38,120
in manual testing?

2188
02:41:38,120 --> 02:41:50,120
Have you got it?

2189
02:41:50,120 --> 02:41:53,560
If it is more than four characters,
I am saying remove those elements

2190
02:41:53,560 --> 02:41:57,400
right?

2191
02:41:57,400 --> 02:42:00,040
I think No, no, no.
We are taking the side of this.

2192
02:42:00,040 --> 02:42:02,360
These characters,
even they are more than four.

2193
02:42:02,360 --> 02:42:11,640
We are removing them.

2194
02:42:11,640 --> 02:42:16,040
So Assignment
B, the purpose of Lambda Expressions

2195
02:42:16,040 --> 02:42:29,640
is to reduce the amount of code
that you have to write.

2196
02:42:29,640 --> 02:42:33,520
SIMON Is it clear the purpose of Lambda
expression is to reduce

2197
02:42:34,040 --> 02:42:36,360
the amount of code that we have to write?

2198
02:42:41,280 --> 02:42:41,800
I will.

2199
02:42:41,800 --> 02:42:45,480
Once I teach you about Lambda expressions,
it will be more clear, don't worry.

2200
02:42:45,560 --> 02:42:49,360
Right now, just

2201
02:42:49,480 --> 02:42:51,960
just think about this
line is not for this time.

2202
02:42:52,440 --> 02:42:53,320
There is no line.

2203
02:42:53,320 --> 02:42:55,080
There is no line

2204
02:42:55,400 --> 02:42:57,680
for you in here.

2205
02:42:59,600 --> 02:43:01,920
Okay, so

2206
02:43:01,920 --> 02:43:06,200
58, Let's come back by 15. Yes.

2207
02:43:06,200 --> 02:43:07,280
Pretend you guys don't see.

2208
02:43:07,280 --> 02:43:43,680
It's only for those who understand.

2209
02:43:43,680 --> 02:43:52,120
Oh, let me check

2210
02:43:52,120 --> 02:43:57,000
what else we are missing.

2211
02:43:57,000 --> 02:43:59,520
13 all contains I tried to clear.

2212
02:43:59,880 --> 02:44:03,080
All right,

2213
02:44:03,080 --> 02:44:05,840
Now, the point that we were discussing
yesterday

2214
02:44:06,240 --> 02:44:09,080
get our collection was non genetic before

2215
02:44:09,080 --> 02:44:12,360
JDK 1.561.5.

2216
02:44:12,360 --> 02:44:14,160
It is generic Java.

2217
02:44:14,160 --> 02:44:19,440
New generic collection allows you to have
only one type of object in collection.

2218
02:44:20,040 --> 02:44:21,280
Now this type save.

2219
02:44:21,280 --> 02:44:29,800
So typecasting is not required at runtime.

2220
02:44:29,800 --> 02:44:36,560
So now let's discuss
some properties of list.

2221
02:44:36,560 --> 02:44:37,040
So this

2222
02:44:38,880 --> 02:44:41,320
time this list interface.

2223
02:44:42,560 --> 02:44:45,320
There are these three classes at alias
link place

2224
02:44:45,320 --> 02:44:48,720
vector instead and the edit BQ

2225
02:44:48,880 --> 02:44:52,000
well which are implementing
this list interface.

2226
02:44:52,000 --> 02:44:55,040
So what will be the properties?

2227
02:44:55,040 --> 02:44:56,040
These

2228
02:44:57,440 --> 02:44:59,400
these classes
will get from this interface?

2229
02:44:59,400 --> 02:45:03,880
So first the list it allows to store

2230
02:45:03,880 --> 02:45:08,640
duplicate objects
you guys will learn in the next class.

2231
02:45:08,640 --> 02:45:11,640
Or maybe to date there are data structures

2232
02:45:18,920 --> 02:45:23,280
which don't allow us to store duplicate
objects.

2233
02:45:24,240 --> 02:45:26,680
Well, we have a week last fall on Monday.

2234
02:45:26,680 --> 02:45:28,760
Yes, I will do the review

2235
02:45:31,560 --> 02:45:32,160
so at least

2236
02:45:32,160 --> 02:45:35,880
we can store the elements inside the list
and the list.

2237
02:45:35,880 --> 02:45:38,640
It maintains the order.

2238
02:45:38,640 --> 02:45:40,480
Engagement of the order.

2239
02:45:40,480 --> 02:45:43,560
The order in which
I am inserting the element when I will be

2240
02:45:43,560 --> 02:45:47,640
printing out the element or I will be
getting the elements and using a loop.

2241
02:45:47,640 --> 02:45:51,000
I will be getting the elements
in same sequence in same order

2242
02:45:52,640 --> 02:45:54,720
list may contain duplicate elements.

2243
02:45:54,720 --> 02:45:58,160
Elements can be inserted
or accessed by the opposition

2244
02:45:58,200 --> 02:46:00,960
in the list using a zero based index

2245
02:46:02,040 --> 02:46:04,680
listed in order to collection
that can contain

2246
02:46:04,680 --> 02:46:08,240
duplicate elements.

2247
02:46:08,240 --> 02:46:10,880
I think we are required. Yes.

2248
02:46:10,880 --> 02:46:13,680
List is one of the most
to use collection type,

2249
02:46:13,680 --> 02:46:16,640
so these are some classes
we will be discussing these two classes.

2250
02:46:16,640 --> 02:46:22,360
So what is the difference
between these two classes?

2251
02:46:22,360 --> 02:46:25,160
So in ADD is the element.

2252
02:46:25,160 --> 02:46:30,880
They are stored
in consecutive memory locations, but

2253
02:46:33,240 --> 02:46:35,960
in this second class that we are,

2254
02:46:36,360 --> 02:46:40,560
we will now discuss
this is called the link list in here.

2255
02:46:41,280 --> 02:46:46,360
The elements, they are not stored
in consecutive memory locations.

2256
02:46:46,360 --> 02:46:48,560
So let me ask you this, guys.

2257
02:46:48,560 --> 02:46:51,560
Let me ask you this. If

2258
02:46:52,440 --> 02:46:54,640
if in a society

2259
02:46:54,640 --> 02:46:58,560
I let's say
you do the need addresses to be called E.

2260
02:46:58,560 --> 02:46:59,760
S moment.

2261
02:46:59,880 --> 02:47:04,240
So let's say in a society
I have maybe let's say 100 houses

2262
02:47:04,920 --> 02:47:09,040
and all of these houses,
they are consecutive to each other.

2263
02:47:09,600 --> 02:47:11,080
And there is this label

2264
02:47:12,240 --> 02:47:14,000
outside of their house that

2265
02:47:14,000 --> 02:47:16,960
this is house number one,
two, three, four or five and so on.

2266
02:47:18,120 --> 02:47:20,640
And they are all in a straight draw

2267
02:47:21,760 --> 02:47:23,480
connected to each other.

2268
02:47:23,480 --> 02:47:25,800
If I know the address of House number one,

2269
02:47:26,640 --> 02:47:29,040
can I reach to House number 100

2270
02:47:29,040 --> 02:47:31,680
without asking anyone

2271
02:47:32,320 --> 02:47:37,120
if they the items I could do each other?

2272
02:47:37,120 --> 02:47:38,920
Okay. So it's super easy, right?

2273
02:47:38,920 --> 02:47:44,440
I can go to any house number,
but if I have to insert

2274
02:47:44,440 --> 02:47:47,560
a new house in between,
what do I have to do?

2275
02:47:49,440 --> 02:47:53,360
Can I do that?

2276
02:47:53,360 --> 02:47:55,080
Only if I have to

2277
02:47:55,520 --> 02:47:56,040
demolish.

2278
02:47:56,040 --> 02:47:58,040
All right.

2279
02:47:58,040 --> 02:48:01,040
And then reconstruct all in all the case

2280
02:48:01,040 --> 02:48:04,560
in areas once we have stored the data,

2281
02:48:04,680 --> 02:48:07,440
the data is stored
in consecutive memory locations.

2282
02:48:07,800 --> 02:48:11,840
And if we have to insert a new element
in between, we have to shift

2283
02:48:13,120 --> 02:48:13,600
towards

2284
02:48:13,600 --> 02:48:16,600
the right
and then only we can insert the data.

2285
02:48:16,600 --> 02:48:19,680
In simple words, we have to demolish,
let's say we want in certain

2286
02:48:19,920 --> 02:48:22,600
and new house at location number 50.

2287
02:48:23,160 --> 02:48:27,040
I have to demolish all the houses
from either side.

2288
02:48:27,040 --> 02:48:27,400
Right?

2289
02:48:27,400 --> 02:48:32,640
And then I can insert the new element to
build the houses again, label them again.

2290
02:48:33,000 --> 02:48:38,000
So this is same as inserting an element
inside the added inside to be added.

2291
02:48:38,640 --> 02:48:43,480
But we also get a benefit from
this add is right is super easy

2292
02:48:43,480 --> 02:48:48,000
to find some hard some any of the houses
but what is the drawback?

2293
02:48:48,680 --> 02:48:51,240
It is very very expensive.

2294
02:48:51,240 --> 02:48:55,040
Insert something in between
or to remove something from in between.

2295
02:48:56,880 --> 02:48:58,920
Now these are linked list.

2296
02:48:58,920 --> 02:49:01,080
Then they follow this approach.

2297
02:49:01,080 --> 02:49:05,160
The houses,
they are scattered all over the society.

2298
02:49:06,240 --> 02:49:09,080
And if I have to go to house number two,

2299
02:49:09,680 --> 02:49:12,400
I can only go to house number two

2300
02:49:13,040 --> 02:49:15,720
if I know its exact location

2301
02:49:15,720 --> 02:49:19,120
on some kind of map or if I know the path.

2302
02:49:19,120 --> 02:49:22,000
And that part it is

2303
02:49:22,000 --> 02:49:23,520
in house number one.

2304
02:49:23,520 --> 02:49:26,040
So I have to go to house number one.

2305
02:49:26,280 --> 02:49:28,640
I have to call them.
I have to ask them that.

2306
02:49:28,680 --> 02:49:33,960
Hey guys, can you tell me the location,
the the location of house similar to once

2307
02:49:34,240 --> 02:49:37,200
once I know the location, number of two,
I can go to house number two

2308
02:49:37,880 --> 02:49:41,880
and then if I have to go to house number
three first, I have to go to house

2309
02:49:41,880 --> 02:49:44,920
number two, I have lost the location
of house number three.

2310
02:49:45,240 --> 02:49:48,840
So the locations, they are remembered
by the previous houses.

2311
02:49:49,400 --> 02:49:52,400
In the second case, this link list,

2312
02:49:52,760 --> 02:49:54,840
it exactly follows that approach.

2313
02:49:55,480 --> 02:49:58,560
If I have to reach to the element e

2314
02:49:58,960 --> 02:50:03,960
first I have to go to element,
then I will ask element E about element B,

2315
02:50:03,960 --> 02:50:07,720
then element C and D,
and then only I can go to E.

2316
02:50:08,200 --> 02:50:10,960
But what is the flexibility that I get,

2317
02:50:10,960 --> 02:50:14,320
I can now insert any element in between

2318
02:50:14,320 --> 02:50:17,120
and I just have to upgrade the House
member.

2319
02:50:17,360 --> 02:50:20,440
Let's say I want to insert
element number Z in between.

2320
02:50:21,200 --> 02:50:23,160
I only have to read out,

2321
02:50:23,160 --> 02:50:26,920
I only have to obtain this information
back, Where is this house?

2322
02:50:27,640 --> 02:50:29,280
So I only have me there.

2323
02:50:29,280 --> 02:50:33,360
Tell me now
if someone asks you about the next house

2324
02:50:33,360 --> 02:50:36,720
instead of telling them the address of C,
tell them the address of Z.

2325
02:50:37,880 --> 02:50:39,400
So I get this flexibility.

2326
02:50:39,400 --> 02:50:42,000
I can now insert any house in between.

2327
02:50:42,000 --> 02:50:44,160
I can remove any house from in between.

2328
02:50:44,160 --> 02:50:48,600
The only thing that I have to do is to
and just the point of

2329
02:50:48,600 --> 02:50:50,720
is to re address the addresses

2330
02:50:52,640 --> 02:50:53,360
that make sense.

2331
02:50:53,360 --> 02:50:55,920
But now the traversal is slow.

2332
02:50:56,160 --> 02:51:00,880
If I have to reach to the last element,
I have to go through all the elements

2333
02:51:00,880 --> 02:51:04,720
before back and then only I can reach
to the last element.

2334
02:51:04,720 --> 02:51:05,160
Right?

2335
02:51:05,160 --> 02:51:10,080
If I want to go to the last house,
I first have to go to house number one.

2336
02:51:10,080 --> 02:51:12,240
No, there I have lost the address there.

2337
02:51:12,320 --> 02:51:15,800
Hey guys, can you tell the address
of the last house?

2338
02:51:16,240 --> 02:51:18,680
They will say
we don't know about the last element.

2339
02:51:18,680 --> 02:51:23,120
The only thing that we know
is the address of the next.

2340
02:51:23,120 --> 02:51:26,160
So at Max, we can only tell you
the address of next house.

2341
02:51:26,480 --> 02:51:30,240
Okay, Then we will say, please
tell us the House address of next member.

2342
02:51:30,640 --> 02:51:34,560
We go to the next member, ask the address
of the next member to that.

2343
02:51:35,160 --> 02:51:37,200
And then we keep on doing, doing,
doing this again.

2344
02:51:37,200 --> 02:51:39,240
Eventually we will be at the last index.

2345
02:51:39,960 --> 02:51:43,440
So link list, they are super, super good.

2346
02:51:43,440 --> 02:51:47,200
If we have to insert something in between,
if we have to remove

2347
02:51:47,200 --> 02:51:51,240
something from in between,
but then downsize is down

2348
02:51:51,800 --> 02:51:54,960
is they are super super slow to traverse.

2349
02:51:55,800 --> 02:51:59,600
So linked list is more flexible
but slower than a normal list. Yes.

2350
02:51:59,600 --> 02:52:03,120
And you are right.

2351
02:52:03,120 --> 02:52:05,400
So tell me guys, if I am

2352
02:52:06,600 --> 02:52:07,840
if I know that I will

2353
02:52:07,840 --> 02:52:10,440
never be inserting any element in between

2354
02:52:10,920 --> 02:52:13,600
and I know that 90% of the times

2355
02:52:13,600 --> 02:52:17,560
I will be accessing the elements
from a data structure.

2356
02:52:17,560 --> 02:52:26,640
Should I use a link list
ought to be at list, Yes.

2357
02:52:26,640 --> 02:52:31,560
So I should always use the array list
because they super, super fast

2358
02:52:32,160 --> 02:52:34,760
when it comes to accessing the elements.

2359
02:52:35,320 --> 02:52:38,000
And if I know that 90% of the time

2360
02:52:38,000 --> 02:52:41,000
I will be inserting
and removing the elements in between

2361
02:52:41,000 --> 02:52:44,640
and only maybe 10% of the time,
I have access to these elements.

2362
02:52:44,760 --> 02:52:48,440
So I use an ink list, or at least

2363
02:52:48,480 --> 02:52:50,640
then I should use the link list.

2364
02:52:51,440 --> 02:52:54,200
Exact same methods
which are present in charge.

2365
02:52:54,200 --> 02:52:54,840
The list list.

2366
02:52:54,840 --> 02:52:57,800
They are also present
inside the link list.

2367
02:52:57,920 --> 02:53:02,040
The only difference is
how are implemented internally.

2368
02:53:02,640 --> 02:53:03,280
Okay.

2369
02:53:03,280 --> 02:53:06,120
And and I have explained that in here.

2370
02:53:06,440 --> 02:53:10,880
So all the methods
which are present in the array list,

2371
02:53:10,880 --> 02:53:14,160
they are also present inside the link
list.

2372
02:53:14,160 --> 02:53:16,280
But the only difference

2373
02:53:17,280 --> 02:53:20,400
is in how they are implemented internally.

2374
02:53:20,400 --> 02:53:22,680
So if I say

2375
02:53:26,080 --> 02:53:26,880
link list

2376
02:53:26,880 --> 02:53:32,440
or demo one, so this is how I can
I can declare all English.

2377
02:53:32,440 --> 02:53:34,720
So link list

2378
02:53:42,640 --> 02:53:44,160
or let me actually copy this

2379
02:53:44,160 --> 02:53:51,640
from the previous one.

2380
02:53:51,640 --> 02:53:57,040
So I only need to change this class
to link list.

2381
02:53:57,040 --> 02:53:58,720
And that's it.

2382
02:53:59,280 --> 02:54:03,680
That's it.

2383
02:54:03,680 --> 02:54:06,440
I need the main method.

2384
02:54:06,800 --> 02:54:08,240
Okay, here we go.

2385
02:54:08,240 --> 02:54:11,200
The exact same from top, same

2386
02:54:12,240 --> 02:54:14,000
same results, everything.

2387
02:54:14,000 --> 02:54:18,960
You say them, but they will differ
in the way how you are using them.

2388
02:54:19,200 --> 02:54:23,280
There can be a very bad performance impact

2389
02:54:23,800 --> 02:54:26,800
if you are not using the proper
data structure.

2390
02:54:27,120 --> 02:54:31,560
So first you should have the knowledge
that to how your program will be here.

2391
02:54:32,240 --> 02:54:36,520
You should have the knowledge of domain,
the type of data that you will be dealing,

2392
02:54:36,840 --> 02:54:40,640
and then you choose the proper
data structure and then you write

2393
02:54:40,640 --> 02:54:52,880
the program using back
and data structure in the database.

2394
02:54:52,880 --> 02:54:55,880
So normally whenever we have to access

2395
02:54:55,880 --> 02:54:59,760
the elements more,
then updating those elements

2396
02:55:01,440 --> 02:55:02,080
whenever, we

2397
02:55:02,080 --> 02:55:05,880
have all of the elements
still stored from zero one.

2398
02:55:05,880 --> 02:55:09,320
Yes, everything is same indexes,
same all the same

2399
02:55:10,560 --> 02:55:15,120
The differences in because you see
the both classes, the link list

2400
02:55:15,120 --> 02:55:22,680
and the analyst
they are both implementing.

2401
02:55:22,680 --> 02:55:24,640
They are both implementing this list

2402
02:55:24,640 --> 02:55:27,000
interface
to all the methods that you guys saw.

2403
02:55:27,000 --> 02:55:32,600
First, they were actually coming
the list interface, but this linked list,

2404
02:55:32,600 --> 02:55:37,680
it is additionally implementing this BQ
and this you as well.

2405
02:55:38,440 --> 02:55:41,960
So you see additional methods as well
inside of the linked list.

2406
02:55:42,520 --> 02:55:45,200
Okay, I will show you.

2407
02:55:45,200 --> 02:55:47,480
Let me first check how much

2408
02:55:49,120 --> 02:55:56,000
we have before level.

2409
02:55:56,000 --> 02:55:59,000
So add remove index

2410
02:55:59,000 --> 02:56:03,560
all if you guys already know that in
SA it contains the you guys only

2411
02:56:04,160 --> 02:56:06,840
you guys only don't know
about the first method.

2412
02:56:06,840 --> 02:56:08,160
So let me show that as well.

2413
02:56:09,480 --> 02:56:10,400
So let's say

2414
02:56:10,400 --> 02:56:13,360
I want to replace this job
with something else.

2415
02:56:14,400 --> 02:56:15,440
So this is Java.

2416
02:56:15,440 --> 02:56:19,320
Presenter 201 second index, right?

2417
02:56:19,320 --> 02:56:21,040
So if I

2418
02:56:22,600 --> 02:56:27,000
print out subjects,

2419
02:56:27,000 --> 02:56:31,760
you guys will see.

2420
02:56:31,760 --> 02:56:32,160
Okay,

2421
02:56:33,160 --> 02:56:35,240
so Java is present at index number two.

2422
02:56:35,240 --> 02:56:38,640
If I want to replace this java
with something else,

2423
02:56:39,200 --> 02:56:43,200
I can use this type
method, I have to specify the index,

2424
02:56:43,200 --> 02:56:45,800
the index
at which I want to replace the element

2425
02:56:48,280 --> 02:56:48,760
which

2426
02:56:53,640 --> 02:56:57,200
so let's say next number to it.

2427
02:56:58,840 --> 02:57:01,200
And then the element
that I want to replace

2428
02:57:01,200 --> 02:57:08,760
may be by a ton.

2429
02:57:08,760 --> 02:57:19,600
And now if I print this out, Lazy

2430
02:57:20,040 --> 02:57:22,800
Java has been replaced

2431
02:57:22,800 --> 02:57:26,760
with Python is a clear case.

2432
02:57:26,760 --> 02:57:36,280
You see.

2433
02:57:36,280 --> 02:57:38,920
So still I am using a

2434
02:57:40,280 --> 02:57:42,440
I am right now using a link list.

2435
02:57:42,440 --> 02:57:46,800
So let's check if all the methods are
present inside of the link list or not. So

2436
02:57:47,960 --> 02:57:48,200
it is.

2437
02:57:48,200 --> 02:57:51,600
But I learned settings descending.

2438
02:57:51,600 --> 02:57:55,200
I don't need to worry about add add
all clear size

2439
02:57:55,440 --> 02:57:59,520
so we have this additional
method does not add first and last.

2440
02:57:59,520 --> 02:58:02,880
So if you want to insert an element
and add the first location

2441
02:58:03,840 --> 02:58:06,280
of the list, you can call the add first.

2442
02:58:07,480 --> 02:58:10,680
How can we achieve this
same thing inside of the earliest days?

2443
02:58:11,560 --> 02:58:14,040
If I want to insert the element add

2444
02:58:14,040 --> 02:58:16,520
index number zero, can I do that?

2445
02:58:16,520 --> 02:58:21,840
Java is on index number, but
when you put in it is index number three.

2446
02:58:21,840 --> 02:58:23,080
How not?

2447
02:58:23,080 --> 02:58:28,360
No, it is still on index number two, SDLC
index zero, manual testing

2448
02:58:28,840 --> 02:58:33,960
number one by tone index number two.

2449
02:58:33,960 --> 02:58:38,760
But how do you see it at index
number three?

2450
02:58:38,760 --> 02:58:41,800
Okay, link list, behave the same way off

2451
02:58:41,800 --> 02:58:45,160
and edit list when you use the shared
method inside the list. Yes.

2452
02:58:45,720 --> 02:58:49,640
So from the perspective of writing,
because you guys will not see

2453
02:58:49,640 --> 02:58:50,720
any difference.

2454
02:58:50,720 --> 02:58:57,080
The difference is in the
in the final performance.

2455
02:58:57,080 --> 02:58:59,880
So if I have the element or the location
number first,

2456
02:59:00,400 --> 02:59:03,120
I can call the add overloaded

2457
02:59:03,120 --> 02:59:06,280
method
in which I can pass the index to that.

2458
02:59:06,520 --> 02:59:07,080
Right.

2459
02:59:07,200 --> 02:59:09,640
So it's just they have created
a separate method in here.

2460
02:59:10,200 --> 02:59:15,040
Contains again, same exact pattern
element is present or not.

2461
02:59:15,040 --> 02:59:18,240
Got to get the first get last index off.

2462
02:59:18,480 --> 02:59:21,600
So they are all so many methods.

2463
02:59:21,600 --> 02:59:22,800
Start out by the end here.

2464
02:59:22,800 --> 02:59:26,560
Okay.

2465
02:59:26,560 --> 02:59:30,240
But all the methods that we have learned
in the Analyst Day are also present

2466
02:59:30,240 --> 02:59:37,080
in dealing for the list.

2467
02:59:37,080 --> 02:59:39,480
Okay. It is just because

2468
02:59:40,440 --> 02:59:41,680
how to look at it.

2469
02:59:41,680 --> 02:59:46,160
As you guys already know, our iterator

2470
02:59:47,640 --> 02:59:51,560
identity is used for protecting
the classes in the collection framework

2471
02:59:51,560 --> 02:59:51,960
we use.

2472
02:59:51,960 --> 02:59:55,320
And I tried to create the elements
of the collection classes.

2473
02:59:55,440 --> 02:59:58,320
The effect is that an interface

2474
02:59:58,320 --> 03:00:03,120
arbitration can be done only once
if you reach the end of series it's done.

2475
03:00:03,120 --> 03:00:06,000
If we need to iterate again,
we should get a new art.

2476
03:00:06,400 --> 03:00:08,360
Now what does this mean?

2477
03:00:08,360 --> 03:00:09,800
This means

2478
03:00:15,640 --> 03:00:18,000
there,

2479
03:00:18,000 --> 03:00:20,400
this arbitrator that I am getting in here.

2480
03:00:21,040 --> 03:00:25,160
I can only use it once, once
I have used it

2481
03:00:26,840 --> 03:00:27,920
after

2482
03:00:28,480 --> 03:00:30,360
if I try to reuse it again.

2483
03:00:30,360 --> 03:00:32,520
So let's say I petered out next.

2484
03:00:32,520 --> 03:00:48,680
If I try to do that,

2485
03:00:48,680 --> 03:00:53,560
if I tried to do that, the pointers
and all that, they will still be behaving.

2486
03:00:53,560 --> 03:00:57,640
They will keeping this history
and I should create a new arbitrator.

2487
03:00:57,800 --> 03:01:02,040
Is it clear, Dave Thereby I am saying that
I should, if I want to start

2488
03:01:02,040 --> 03:01:05,520
the arbitration from beginning,
I want to perform some more operations.

2489
03:01:05,520 --> 03:01:07,560
I should either I should

2490
03:01:08,600 --> 03:01:09,480
get a new

2491
03:01:09,480 --> 03:01:26,840
straight up.

2492
03:01:26,840 --> 03:01:33,000
Okay.

2493
03:01:33,000 --> 03:01:36,920
The three methods in the iterator has an x
and x

2494
03:01:37,080 --> 03:01:39,440
and remove

2495
03:01:40,120 --> 03:01:43,800
these audio or tasks

2496
03:01:58,040 --> 03:02:00,600
in order to start the process class

2497
03:02:17,800 --> 03:02:19,800
so at least works as a link list.

2498
03:02:20,080 --> 03:02:25,400
ArrayList is the best
alternative to add is in

2499
03:02:25,400 --> 03:02:29,480
Java as ArrayList is dynamic
data structure.

2500
03:02:29,480 --> 03:02:34,320
So right now
we are discussing Arrays and ArrayList.

2501
03:02:34,320 --> 03:02:36,720
It is are they starting data structure?

2502
03:02:37,040 --> 03:02:41,320
And it can contain both primitive,
primitive objects,

2503
03:02:41,320 --> 03:02:43,440
but ArrayList can only

2504
03:02:46,000 --> 03:02:46,840
objects.

2505
03:02:46,840 --> 03:02:50,360
No primitives are allowed in case of

2506
03:02:51,960 --> 03:02:57,960
ArrayList, you can use length variable

2507
03:02:57,960 --> 03:03:00,880
to calculate the length of an array,

2508
03:03:01,000 --> 03:03:04,400
but size 30 is used

2509
03:03:04,400 --> 03:03:06,320
inside the additive,

2510
03:03:06,400 --> 03:03:10,600
and it uses the assignment operator
for the assignment

2511
03:03:10,600 --> 03:03:13,800
and those square brackets
to access on up to the elements.

2512
03:03:13,800 --> 03:03:17,640
But in at least
we have add or remove method

2513
03:03:19,040 --> 03:03:20,760
and it can be multi dimensional.

2514
03:03:20,760 --> 03:03:25,040
While the error list is always
single dimension, but we can have areas

2515
03:03:25,040 --> 03:03:26,600
of arrays.

2516
03:03:26,600 --> 03:03:28,920
Do you guys want to learn
how to the arrays?

2517
03:03:28,920 --> 03:03:38,240
Looks like?

2518
03:03:38,240 --> 03:03:39,960
Okay,

2519
03:03:40,440 --> 03:03:42,440
if the array inside

2520
03:03:42,440 --> 03:03:46,800
and another a yes,

2521
03:03:46,800 --> 03:03:52,680
sometimes you guys might need them.

2522
03:03:52,680 --> 03:03:55,200
Okay on the request of

2523
03:03:56,320 --> 03:03:58,440
same and dummy.

2524
03:03:58,600 --> 03:03:59,920
Here we go.

2525
03:04:00,280 --> 03:04:03,040
Are you as ready to get confused

2526
03:04:19,720 --> 03:04:21,240
as everything to confuse us

2527
03:04:21,240 --> 03:04:25,960
till the end of the course.

2528
03:04:25,960 --> 03:04:53,240
Okay.

2529
03:04:53,240 --> 03:04:54,960
So if you have

2530
03:04:55,120 --> 03:05:03,800
so many lists right, and you want to store

2531
03:05:04,440 --> 03:05:10,520
instead of floating string or number
or boolean or character,

2532
03:05:10,520 --> 03:05:13,520
if you want to store a list inside
another list,

2533
03:05:14,040 --> 03:05:17,320
so you write array list

2534
03:05:17,600 --> 03:05:19,080
and diamond operator.

2535
03:05:19,080 --> 03:05:21,920
And then inside the diamond
operator, you again write

2536
03:05:25,920 --> 03:05:28,680
array list and again diamond operator.

2537
03:05:28,680 --> 03:05:33,680
And then you write the actual data side.

2538
03:05:33,680 --> 03:05:37,080
This will be in
and this will be an array of ArrayList

2539
03:05:42,840 --> 03:05:44,000
like this.

2540
03:05:44,160 --> 03:05:47,280
And now instead of adding a string

2541
03:05:47,280 --> 03:05:51,360
or a number or two,
you guys can do a list of early start,

2542
03:05:51,360 --> 03:05:56,000
and now you can add a complete list
inside another layer.

2543
03:05:56,000 --> 03:05:59,760
So for example, subject

2544
03:06:03,880 --> 03:06:07,360
oops depth

2545
03:06:08,400 --> 03:06:10,560
to three.

2546
03:06:10,560 --> 03:06:13,200
I think it's easy is not an easy, nice

2547
03:06:14,400 --> 03:06:16,400
list of lists like to date is

2548
03:06:18,960 --> 03:06:20,280
it? Sales marketing.

2549
03:06:20,280 --> 03:06:27,080
What I am just stating.

2550
03:06:27,080 --> 03:06:29,400
So this is how we can create
a list of list

2551
03:06:29,880 --> 03:06:33,240
and we can create a list of list
of list of list of list.

2552
03:06:33,240 --> 03:06:38,040
We can go as deep as we want.

2553
03:06:38,040 --> 03:06:44,160
Is it clear, guys,
or should we get back to this nice.

2554
03:06:44,160 --> 03:06:53,120
Not clear.

2555
03:06:53,120 --> 03:06:54,080
Okay.

2556
03:06:54,080 --> 03:06:57,360
So it was only if I made nested list.

2557
03:06:57,720 --> 03:07:01,680
And who else asked about this?

2558
03:07:01,680 --> 03:07:05,480
It was only for possible
and the meet and see.

2559
03:07:05,520 --> 03:07:06,120
Okay.

2560
03:07:06,120 --> 03:07:16,600
This has never happened
for the rest of you.

2561
03:07:16,600 --> 03:07:18,480
So think of

2562
03:07:19,840 --> 03:07:22,160
just so let's

2563
03:07:22,160 --> 03:07:25,320
say you have a box and inside

2564
03:07:26,120 --> 03:07:27,800
that box

2565
03:07:40,880 --> 03:07:42,080
let's say

2566
03:07:42,360 --> 03:07:45,480
there is this box
previously what you guys were doing

2567
03:07:46,200 --> 03:07:54,240
when you were creating the list,
you were placing strings.

2568
03:07:54,240 --> 03:07:56,280
The inside of him in here, right?

2569
03:07:58,080 --> 03:08:00,080
String one string, two.

2570
03:08:01,000 --> 03:08:04,080
But now what you guys are doing

2571
03:08:09,680 --> 03:08:10,440
instead of

2572
03:08:10,440 --> 03:08:18,360
putting strings directly.

2573
03:08:18,360 --> 03:08:25,520
So this is this is one that
at least it contains strings.

2574
03:08:25,520 --> 03:08:28,560
Then there is a lot
less than if there is a list.

2575
03:08:29,640 --> 03:08:31,080
Then there is another list.

2576
03:08:31,080 --> 03:08:35,760
And now you are putting all those lists
inside and other list,

2577
03:08:36,680 --> 03:08:40,680
and you can put those lists inside
and other list as well if you want.

2578
03:08:41,160 --> 03:08:41,760
Like this.

2579
03:08:41,760 --> 03:08:46,320
It's a nesting list inside
and one another.

2580
03:08:46,320 --> 03:08:52,280
Once you show us there is no going back.

2581
03:08:52,280 --> 03:09:00,520
Okay,
I will not show you as well from now.

2582
03:09:00,520 --> 03:09:03,280
So link list is a class so question.

2583
03:09:03,800 --> 03:09:05,800
We are just jumping from one to another.

2584
03:09:05,800 --> 03:09:08,360
It makes us confused.

2585
03:09:08,360 --> 03:09:10,880
Jumping from bear to where?

2586
03:09:10,880 --> 03:09:12,640
You mean drying and slides

2587
03:09:21,000 --> 03:09:21,480
and the

2588
03:09:21,480 --> 03:09:24,400
end to use for loop for that nesting.

2589
03:09:24,960 --> 03:09:28,880
So question how long list are structured
is a structure assumed

2590
03:09:28,880 --> 03:09:33,480
by adding a second ArrayList to be all
you guys want to check the structure?

2591
03:09:34,640 --> 03:09:35,880
They are

2592
03:09:36,720 --> 03:09:40,360
structured with the help of

2593
03:09:41,240 --> 03:09:42,800
Node North.

2594
03:09:42,800 --> 03:09:47,920
So in the link list we have a special data
structure that is called.

2595
03:09:48,600 --> 03:09:50,840
So this is how to link list
and they are implemented

2596
03:09:51,200 --> 03:09:57,200
internally.

2597
03:09:57,200 --> 03:10:00,200
So inside this middle box we put the data

2598
03:10:05,040 --> 03:10:07,320
in for the first element.

2599
03:10:07,320 --> 03:10:11,640
Can you possibly edit list inside
another list code or so it again is like

2600
03:10:11,720 --> 03:10:13,880
just give me on
the first element will be null.

2601
03:10:14,760 --> 03:10:16,960
The next element will find

2602
03:10:22,840 --> 03:10:24,480
to the next block.

2603
03:10:24,480 --> 03:10:27,840
In here we will store the data

2604
03:10:28,520 --> 03:10:31,600
and then this will point to the next block

2605
03:10:34,560 --> 03:10:36,960
in here again, tie in here.

2606
03:10:37,400 --> 03:10:41,800
Then it will point to
this is how it is structured. Mean

2607
03:10:44,880 --> 03:10:50,920
with the help of nodes.

2608
03:10:50,920 --> 03:10:54,280
Okay, here is the list of

2609
03:10:55,800 --> 03:10:57,080
another list.

2610
03:10:57,080 --> 03:11:27,120
Next lists.

2611
03:11:27,120 --> 03:11:27,880
Are you guys good?

2612
03:11:27,880 --> 03:11:32,160
Should we move?

2613
03:11:32,160 --> 03:11:34,800
Don't worry too much about the

2614
03:11:35,080 --> 03:11:36,720
about this

2615
03:11:37,240 --> 03:11:39,720
nested is

2616
03:11:47,640 --> 03:11:50,080
so link

2617
03:11:50,080 --> 03:11:54,000
list to the class which implements
the list interface of collection framework

2618
03:11:54,960 --> 03:11:57,600
like at least link list also can contain

2619
03:11:57,600 --> 03:12:00,720
duplicate elements
and also maintain the insertion order.

2620
03:12:02,040 --> 03:12:05,400
We can declare the link list
same way as the ArrayList

2621
03:12:06,560 --> 03:12:10,240
and perform operations
like insertion and deletion.

2622
03:12:10,400 --> 03:12:12,840
There they are. Same as ArrayList.

2623
03:12:12,840 --> 03:12:15,640
The only difference in
at least in English, is the list.

2624
03:12:15,720 --> 03:12:19,000
All the elements
in a doubly linked list of data structure.

2625
03:12:19,120 --> 03:12:21,000
The data structure
that you have just drawn.

2626
03:12:22,400 --> 03:12:22,920
While

2627
03:12:22,920 --> 03:12:26,640
ArrayList
stores the elements in a backing adding

2628
03:12:27,240 --> 03:12:29,760
so array uses internally and added

2629
03:12:30,960 --> 03:12:33,600
but linked list uses

2630
03:12:33,600 --> 03:12:37,000
a separate data structure for doubly

2631
03:12:37,080 --> 03:12:38,320
linked list

2632
03:12:41,160 --> 03:12:43,800
so when to use which

2633
03:12:43,880 --> 03:12:45,520
arraylist internally

2634
03:12:45,520 --> 03:12:48,840
uses dynamic area to store the elements

2635
03:12:49,000 --> 03:12:51,480
linked list uses doubly linked list

2636
03:12:52,920 --> 03:12:56,640
manipulate with arraylist manipulation
with the array list is low

2637
03:12:56,680 --> 03:13:00,880
because internally uses arrays,
one element is removed from the array.

2638
03:13:00,880 --> 03:13:03,520
All the birds are shifted in memory.

2639
03:13:03,520 --> 03:13:06,480
Remember that example of how
you have to shift everything?

2640
03:13:06,880 --> 03:13:08,800
Indicators of arrays

2641
03:13:09,760 --> 03:13:12,920
Manipulation
with the linked list is faster than arrays

2642
03:13:12,920 --> 03:13:17,280
because it uses the list of no base
shifting is required.

2643
03:13:17,720 --> 03:13:20,000
We just reported yesterday point us

2644
03:13:22,560 --> 03:13:23,200
ArrayList

2645
03:13:23,200 --> 03:13:27,400
can act as a list
only because it implements implement list,

2646
03:13:27,400 --> 03:13:31,440
but linked list as list and a Q bullet
because it is implementing

2647
03:13:31,440 --> 03:13:32,640
most the interfaces

2648
03:13:34,320 --> 03:13:36,560
array list is better for accessing data

2649
03:13:38,280 --> 03:13:40,440
linked list is better for storing

2650
03:13:40,440 --> 03:13:42,000
and removing

2651
03:13:46,000 --> 03:13:48,800
adding It maintains
index is an element that are linked.

2652
03:13:48,800 --> 03:13:51,920
List contains elements
that bind to pointers for neighboring

2653
03:13:51,920 --> 03:13:55,480
north
and the memory is high in the linked list.

2654
03:13:55,480 --> 03:13:59,840
Comparatively.

2655
03:13:59,840 --> 03:14:16,200
Okay, these are your next tasks.

2656
03:14:16,200 --> 03:14:17,960
Now this first

2657
03:14:21,440 --> 03:14:21,840
serves.

2658
03:14:21,840 --> 03:14:34,560
They are very simple.

2659
03:14:34,560 --> 03:14:47,520
All is a all is very simple.

2660
03:14:47,520 --> 03:14:48,680
Okay.

2661
03:14:48,720 --> 03:14:53,760
Not simple.

2662
03:14:53,760 --> 03:14:58,320
So the on the three can use

2663
03:14:58,320 --> 03:15:02,240
trendy calls for the link list.

2664
03:15:02,240 --> 03:15:04,200
It is better if I push this code.

2665
03:15:04,200 --> 03:15:06,360
Will you guys be able to

2666
03:15:07,320 --> 03:15:10,240
get the call from GitHub

2667
03:15:28,280 --> 03:15:28,760
etc.?

2668
03:15:28,960 --> 03:15:53,760
Simple will start
and then you can feel this.

2669
03:15:53,760 --> 03:15:57,240
So the first class we discussed
was ArrayList.

2670
03:15:58,080 --> 03:16:00,600
Then we discussed the list, same

2671
03:16:00,600 --> 03:16:04,080
as the released
only difference in the performance.

2672
03:16:05,400 --> 03:16:08,080
The next class is the

2673
03:16:09,720 --> 03:16:11,640
hash set.

2674
03:16:11,720 --> 03:16:12,840
Okay.

2675
03:16:12,840 --> 03:16:15,600
And this hash set

2676
03:16:26,400 --> 03:16:28,880
the now we are discussing these classes

2677
03:16:30,720 --> 03:16:31,600
start interface.

2678
03:16:31,600 --> 03:16:39,760
I started certainly a certain precursor.

2679
03:16:39,760 --> 03:16:43,440
So Head Start Diamond and operator string

2680
03:16:45,160 --> 03:16:48,120
I certainly towards the new hash sec

2681
03:16:51,440 --> 03:16:52,080
so hash

2682
03:16:52,080 --> 03:16:57,840
said dot add.

2683
03:16:57,840 --> 03:17:03,640
So this add method is also available
inside the high set.

2684
03:17:03,640 --> 03:17:07,800
And let's say I inserting a file

2685
03:17:10,920 --> 03:17:13,080
has said not add

2686
03:17:14,360 --> 03:17:16,040
and then

2687
03:17:16,480 --> 03:17:18,480
mangle

2688
03:17:20,240 --> 03:17:22,320
hash cert

2689
03:17:22,840 --> 03:17:27,760
not add dv

2690
03:17:32,560 --> 03:17:36,360
asset not add

2691
03:17:36,600 --> 03:17:38,640
epilog in

2692
03:17:39,960 --> 03:17:42,840
set not add

2693
03:17:43,400 --> 03:17:44,880
apple again.

2694
03:17:45,480 --> 03:17:48,480
So the property of self is that guys

2695
03:17:48,600 --> 03:17:52,680
they don't allow duplicate elements.

2696
03:17:52,680 --> 03:17:53,480
Okay.

2697
03:17:53,480 --> 03:17:56,360
If I tried to print out this hash sir,

2698
03:17:58,080 --> 03:18:01,560
I am trying to insert the apple
three times,

2699
03:18:01,720 --> 03:18:07,680
but in the output I will see it only what?

2700
03:18:07,680 --> 03:18:07,880
Yeah.

2701
03:18:09,760 --> 03:18:12,360
So first was apples

2702
03:18:13,240 --> 03:18:13,960
right to make it.

2703
03:18:13,960 --> 03:18:19,080
That would.

2704
03:18:19,080 --> 03:18:19,400
Yeah.

2705
03:18:19,720 --> 03:18:22,960
So Apple TV and mango.

2706
03:18:24,120 --> 03:18:24,960
Yeah.

2707
03:18:24,960 --> 03:18:30,520
So start link list we can store
duplicate elements linked list.

2708
03:18:30,520 --> 03:18:32,040
They maintain the order.

2709
03:18:32,040 --> 03:18:35,120
You see
the order is also not maintained in here.

2710
03:18:35,520 --> 03:18:37,040
First I inserted the apple.

2711
03:18:37,040 --> 03:18:40,760
I see the second I inserted the mango.

2712
03:18:40,760 --> 03:18:43,520
But I see added position number three.

2713
03:18:43,800 --> 03:18:47,200
I should see it at in here in link list.

2714
03:18:47,200 --> 03:18:51,680
If you are trying to insert this element,
you will see it in the same location.

2715
03:18:51,680 --> 03:18:57,240
So for example, if, if I change this to

2716
03:18:59,040 --> 03:19:00,720
link list

2717
03:19:03,720 --> 03:19:04,440
how many elements

2718
03:19:04,440 --> 03:19:13,440
I will see you guys.

2719
03:19:13,440 --> 03:19:14,120
All of them.

2720
03:19:14,120 --> 03:19:22,000
Right?

2721
03:19:22,000 --> 03:19:25,680
Because in list
I can store all the elements.

2722
03:19:25,760 --> 03:19:27,920
No issues with the list.

2723
03:19:28,040 --> 03:19:34,320
So Apple and you do see the order.

2724
03:19:34,320 --> 03:19:36,360
If I am inserting the apple first,

2725
03:19:37,480 --> 03:19:39,080
I see the apple first.

2726
03:19:39,080 --> 03:19:42,560
If I am inserting the mango second,
I see it as second position.

2727
03:19:43,040 --> 03:19:45,520
Give me kiwi, apple, apple.

2728
03:19:45,520 --> 03:19:47,840
But these two properties,

2729
03:19:49,400 --> 03:19:52,160
they don't hold

2730
03:19:53,160 --> 03:19:55,080
for the hash effect.

2731
03:19:55,080 --> 03:19:59,280
And this is the difference
between a certain and increased

2732
03:19:59,760 --> 03:20:03,840
link list maintains
the order allows duplicate

2733
03:20:04,520 --> 03:20:08,440
why I start changes the list order does
set prints in alphabetical order.

2734
03:20:09,240 --> 03:20:11,240
Let me change you.

2735
03:20:11,240 --> 03:20:15,000
They really want to learn
why the order is not maintained.

2736
03:20:15,440 --> 03:20:17,920
So it is not maintained because

2737
03:20:21,360 --> 03:20:25,320
internally this hash
that is using a special type

2738
03:20:25,320 --> 03:20:28,240
of data structure that is called hash.

2739
03:20:29,040 --> 03:20:32,000
Now Latasha is doing hash

2740
03:20:36,600 --> 03:20:37,240
stored

2741
03:20:37,240 --> 03:20:40,840
the elements inside your memory
in such a way

2742
03:20:42,000 --> 03:20:47,000
that once you give the input for hash,
either function

2743
03:20:47,640 --> 03:20:51,320
in which you give some kind of input
and the output, it will give you

2744
03:20:51,320 --> 03:20:56,240
the exact memory, location of that element
where it is stored.

2745
03:20:56,960 --> 03:21:00,400
So for example,
if there are a million memory locations

2746
03:21:00,720 --> 03:21:05,640
inside the RAM and I want to search,
if is present inside the memory or not,

2747
03:21:05,960 --> 03:21:09,720
I will adjust inside this apple
to a special function

2748
03:21:10,520 --> 03:21:13,080
and that function will return me
a memory address.

2749
03:21:13,080 --> 03:21:16,080
I will directly go to the memory location
and I can check

2750
03:21:16,080 --> 03:21:18,040
if that that is present or not.

2751
03:21:18,040 --> 03:21:20,280
Does it happen
the same way in the address guys?

2752
03:21:20,600 --> 03:21:22,920
Or I have to look through
all the elements in the areas

2753
03:21:31,560 --> 03:21:33,360
if I have to find an

2754
03:21:33,360 --> 03:21:36,120
element is present or not inside the area,

2755
03:21:37,320 --> 03:21:38,640
can I?

2756
03:21:38,640 --> 03:21:41,280
How many elements I have to compare?

2757
03:21:41,280 --> 03:21:44,840
I am how many elements I have to check

2758
03:21:46,920 --> 03:21:48,320
all right there.

2759
03:21:48,320 --> 03:21:53,640
So I will buy three.

2760
03:21:53,640 --> 03:21:57,440
So this hash function
and these hash cells,

2761
03:21:57,480 --> 03:22:02,200
they have this special property
that something is super, super fast.

2762
03:22:02,200 --> 03:22:05,600
And we will combine this searching benefit
with another thing

2763
03:22:05,880 --> 03:22:07,880
and we will learn about maps

2764
03:22:08,640 --> 03:22:12,840
that if you have to perform searching,
you will be those maps

2765
03:22:12,840 --> 03:22:15,480
and those maps,
they will be super, super fast.

2766
03:22:17,040 --> 03:22:19,880
So each data structure
that we are discussing,

2767
03:22:19,880 --> 03:22:22,840
whether they are hash search
link list or released,

2768
03:22:23,200 --> 03:22:26,600
first, they are implemented
differently in the memory

2769
03:22:27,000 --> 03:22:30,400
and they all have some kind of benefits
over the other.

2770
03:22:30,960 --> 03:22:33,320
Now, choosing proper data structure.

2771
03:22:33,320 --> 03:22:37,040
Now what what you have to do
as a programmer, you have to as per

2772
03:22:37,080 --> 03:22:40,800
your needs, do you have to choose
a proper data structure

2773
03:22:41,200 --> 03:22:44,360
and then the program
using that data factors.

2774
03:22:44,360 --> 03:22:46,280
So the performance is good.

2775
03:22:46,280 --> 03:22:48,480
Otherwise you can almost achieve
everything with this.

2776
03:22:48,480 --> 03:22:50,240
Simply simply with the atlas.

2777
03:22:51,320 --> 03:22:52,440
Does Does it make sense?

2778
03:22:52,440 --> 03:22:52,960
Great

2779
03:22:55,720 --> 03:22:58,400
to have says super, super fast

2780
03:22:58,400 --> 03:23:02,600
if we have to search something,
but what is the downside?

2781
03:23:03,200 --> 03:23:05,280
They don't maintain the order.

2782
03:23:05,920 --> 03:23:09,600
They don't allow duplicates.

2783
03:23:11,000 --> 03:23:15,360
Disorganized, yes,
but they are super, super fast insulting.

2784
03:23:15,360 --> 03:23:19,640
So if you know that your data
will never contain duplicates,

2785
03:23:20,360 --> 03:23:22,440
you can store them inside a set

2786
03:23:22,960 --> 03:23:25,600
and you can send to them very fast.

2787
03:23:27,280 --> 03:23:31,600
Genius, but just organized.

2788
03:23:31,600 --> 03:23:33,840
The issue is to understand
which one to use.

2789
03:23:33,840 --> 03:23:37,680
Yes, depending upon your needs, which one

2790
03:23:37,680 --> 03:23:39,000
we should use

2791
03:23:41,520 --> 03:23:45,120
link list, prep prints, all the elements.

2792
03:23:45,120 --> 03:23:47,520
But it does not. Oh, it is.

2793
03:23:47,680 --> 03:23:51,640
It is not printing because in
it is not storing these two elements.

2794
03:23:51,640 --> 03:23:55,840
As soon as it sees a duplicate element,
it will discard that.

2795
03:23:55,840 --> 03:23:59,640
It will not store that.

2796
03:23:59,640 --> 03:24:03,680
But there are other variations
of the high sets as well, which allow

2797
03:24:05,040 --> 03:24:06,200
many different things.

2798
03:24:06,200 --> 03:24:09,720
So let's say, for example,

2799
03:24:09,720 --> 03:24:15,720
if you want the order, if you still want
the benefit of fast searching,

2800
03:24:16,160 --> 03:24:20,000
but you want the ADD, then you can use

2801
03:24:21,520 --> 03:24:23,680
another type of

2802
03:24:26,280 --> 03:24:28,600
another type of set,

2803
03:24:28,600 --> 03:24:34,240
which is called link to the hash set.

2804
03:24:34,240 --> 03:24:36,120
So still, how do you print?

2805
03:24:36,120 --> 03:24:46,760
Because I change it to two linked list.

2806
03:24:46,760 --> 03:24:51,600
So if you guys want to maintain the order
and still don't want duplicates,

2807
03:24:52,560 --> 03:24:55,080
you can use

2808
03:24:56,040 --> 03:24:58,920
link the hair six.

2809
03:24:59,400 --> 03:25:04,080
They are very simple.

2810
03:25:04,080 --> 03:25:04,760
They are very simple.

2811
03:25:04,760 --> 03:25:07,120
Right in link
bisect order will be maintained.

2812
03:25:07,120 --> 03:25:08,640
No duplicates.

2813
03:25:08,640 --> 03:25:10,200
These are it hard guys.

2814
03:25:10,200 --> 03:25:13,800
It's very simple.

2815
03:25:13,800 --> 03:25:17,080
So apple, mango and then kiwi.

2816
03:25:17,160 --> 03:25:24,520
Now you see the older guys in here,
the order is maintained.

2817
03:25:24,520 --> 03:25:27,840
For me, it's simple.

2818
03:25:27,840 --> 03:25:29,760
I mean, what is hard in this?

2819
03:25:29,760 --> 03:25:33,360
If you want the order
and not duplicate your list.

2820
03:25:33,840 --> 03:25:37,320
If no order not obligated to the high set,

2821
03:25:37,320 --> 03:25:47,800
if simple, I'm not ready to die.

2822
03:25:49,320 --> 03:25:51,560
And if

2823
03:25:51,560 --> 03:25:57,720
you guys want those for your elements
in alphabetical order,

2824
03:25:57,720 --> 03:26:02,440
we have a third type of set
that is called preset.

2825
03:26:02,600 --> 03:26:03,120
Right?

2826
03:26:03,120 --> 03:26:05,800
Again, very simple

2827
03:26:15,720 --> 03:26:19,400
to reset

2828
03:26:20,160 --> 03:26:22,320
what preset will do.

2829
03:26:22,320 --> 03:26:26,760
It will sort all your elements

2830
03:26:28,120 --> 03:26:29,840
in a specific order.

2831
03:26:29,840 --> 03:26:35,200
So if even if I insert elements like the

2832
03:26:44,280 --> 03:26:46,560
then if I think the last one,

2833
03:26:46,560 --> 03:26:54,160
the last one is six.

2834
03:26:55,080 --> 03:27:00,880
So if I say the x here

2835
03:27:03,120 --> 03:27:06,880
and if I print this,

2836
03:27:08,280 --> 03:27:10,280
what was the benefit of labor?

2837
03:27:10,320 --> 03:27:13,440
So it maintains the order.

2838
03:27:13,440 --> 03:27:19,320
It maintains the order.

2839
03:27:19,320 --> 03:27:23,080
So you see and it s enforced

2840
03:27:23,720 --> 03:27:27,400
and it don't allow duplicate.

2841
03:27:27,400 --> 03:27:32,120
So all the cells that you say linked to
the three said

2842
03:27:32,680 --> 03:27:35,880
said they will not allow duplicate.

2843
03:27:35,880 --> 03:27:38,040
This is the property
that is coming from first

2844
03:27:39,000 --> 03:27:41,240
now has

2845
03:27:41,240 --> 03:27:46,480
no order linked to high start order three.

2846
03:27:46,480 --> 03:27:51,320
I said 13 for example in here
we are sorting the elements.

2847
03:27:51,320 --> 03:27:54,240
I inserted that first text, then
and then there.

2848
03:27:54,480 --> 03:27:58,280
But in here I a z

2849
03:28:16,480 --> 03:28:18,160
with my vertical order in place after.

2850
03:28:18,160 --> 03:28:22,400
Yes, if you are splitting numbers
they will be sorted in numerical order

2851
03:28:30,920 --> 03:28:35,280
and you get a few regions right.

2852
03:28:35,280 --> 03:28:49,240
That suit that well the class.

2853
03:28:49,240 --> 03:28:53,400
So certainly the collection
that can't contain duplicate elements

2854
03:28:54,600 --> 03:28:57,600
there three main implementations of hash

2855
03:28:57,840 --> 03:29:06,600
linked hash and set.

2856
03:29:06,600 --> 03:29:16,360
So can I see certain demo two. Yes.

2857
03:29:16,360 --> 03:29:34,880
Yep. That's all.

2858
03:29:34,880 --> 03:29:35,400
Let me know.

2859
03:29:35,400 --> 03:29:37,520
And also once you are done

2860
03:29:56,680 --> 03:30:00,240
so third class
that implements that interface,

2861
03:30:00,360 --> 03:30:02,760
it does not allow duplicates,

2862
03:30:03,560 --> 03:30:06,720
does not guarantee any insertion order.

2863
03:30:08,160 --> 03:30:10,920
You just let me go through the
slides then you guys can go.

2864
03:30:12,120 --> 03:30:14,200
It allows null elements

2865
03:30:14,360 --> 03:30:17,600
or one more way
we can insert of the nodes as well.

2866
03:30:18,960 --> 03:30:20,920
Link the asset

2867
03:30:20,920 --> 03:30:24,360
class that implements
that interface does not allow duplicates.

2868
03:30:24,600 --> 03:30:28,760
So all these are will not allowed.

2869
03:30:28,760 --> 03:30:29,320
Okay.

2870
03:30:29,320 --> 03:30:32,440
And order is in the elements

2871
03:30:32,440 --> 03:30:35,640
is based on the order
in which they were inserted.

2872
03:30:35,800 --> 03:30:39,600
So if you are inserting something first
you will be getting that thing first

2873
03:30:41,040 --> 03:30:44,040
and then we have preset
is similar to hash start,

2874
03:30:44,040 --> 03:30:47,720
except that it sorts
the elements in ascending order.

2875
03:30:47,720 --> 03:30:50,760
While I started does not maintain any of

2876
03:30:54,480 --> 03:30:58,520
so I started the class
which implements certain interface

2877
03:30:59,040 --> 03:31:05,080
so it does not guarantee
any insertion order.

2878
03:31:05,080 --> 03:31:08,040
So it can be used in place
of at least to sort objects.

2879
03:31:08,040 --> 03:31:14,520
If you are require no duplicate
and don't care about insertion,

2880
03:31:14,520 --> 03:31:17,160
anybody else is confused or it is just me.

2881
03:31:17,200 --> 03:31:17,880
No me.

2882
03:31:17,880 --> 03:31:24,520
I am also confused, but

2883
03:31:41,480 --> 03:32:00,840
so assert

2884
03:32:01,720 --> 03:32:06,120
is the class we to implement
this self interface in java

2885
03:32:07,120 --> 03:32:09,480
have certain does not allow

2886
03:32:11,160 --> 03:32:12,880
does not have any additional methods

2887
03:32:12,880 --> 03:32:15,920
beyond those found in this set interface.

2888
03:32:15,920 --> 03:32:18,240
Now is the language
we are confusion about is

2889
03:32:20,360 --> 03:32:25,080
said does not guarantee
any insertion order

2890
03:32:25,200 --> 03:32:30,240
why we need high start
because laying to start looks perfect.

2891
03:32:30,240 --> 03:32:33,440
No link that is low in performance.

2892
03:32:34,160 --> 03:32:36,840
Head Start is more fast than the length

2893
03:32:36,840 --> 03:32:41,160
of the haystack.

2894
03:32:41,160 --> 03:32:45,160
Okay,

2895
03:32:45,160 --> 03:32:47,520
so it can be used in place of

2896
03:32:50,160 --> 03:32:50,560
do they?

2897
03:32:50,560 --> 03:32:56,320
We are all has said can be used in place
of at least to store the all elements.

2898
03:32:56,320 --> 03:32:59,200
If you don't care about the insertion

2899
03:32:59,600 --> 03:33:02,480
and you don't want duplicated

2900
03:33:04,560 --> 03:33:06,960
as there does not allow duplicate

2901
03:33:07,560 --> 03:33:09,000
the same thing

2902
03:33:12,720 --> 03:33:13,840
and later start

2903
03:33:13,840 --> 03:33:18,000
it maintains the order.

2904
03:33:18,000 --> 03:33:22,440
It is simplest implementation
of start interface again

2905
03:33:23,240 --> 03:33:26,040
same methods
which are present in this set.

2906
03:33:26,040 --> 03:33:29,400
I need to bring this again
on my computer screen for be working

2907
03:33:29,400 --> 03:33:30,360
all to be concerned.

2908
03:33:30,360 --> 03:33:34,120
Otherwise I will be lost.

2909
03:33:34,120 --> 03:33:36,840
When in doubt, throw a hash map

2910
03:33:40,000 --> 03:33:41,280
if yes.

2911
03:33:41,280 --> 03:33:43,200
And then you are right. Oh my God.

2912
03:33:43,200 --> 03:33:51,560
I don't like things that
that look like each other.

2913
03:33:51,560 --> 03:33:52,440
And then you show.

2914
03:33:52,440 --> 03:33:54,880
Then you should never visit China.

2915
03:33:54,880 --> 03:33:57,800
Because in China
everyone looks all Chinese.

2916
03:33:58,440 --> 03:34:01,200
If they are,
they are saying brothers and sisters,

2917
03:34:01,200 --> 03:34:05,120
right?

2918
03:34:05,120 --> 03:34:07,840
Hey said does not allow

2919
03:34:09,760 --> 03:34:12,960
duplicates and does not maintain the order

2920
03:34:14,480 --> 03:34:17,200
Link maintains the order does not allow

2921
03:34:17,200 --> 03:34:20,280
duplicate things at source
the elements alphabetically.

2922
03:34:20,280 --> 03:34:21,600
Yes, you are right.

2923
03:34:21,600 --> 03:34:25,480
And again, no duplicates.

2924
03:34:25,480 --> 03:34:29,080
And that's why they don't pay.

2925
03:34:29,080 --> 03:34:32,680
That's why they don't like.

2926
03:34:32,680 --> 03:34:46,200
I lived in China for three years. Wow.

2927
03:34:46,200 --> 03:34:48,800
I've been doing Java for link to high.

2928
03:34:48,800 --> 03:34:50,960
Said maintains the insertion order

2929
03:34:52,560 --> 03:34:54,080
Elements get started

2930
03:34:54,080 --> 03:34:57,680
in the same sequence
in which they have been added to this.

2931
03:34:57,680 --> 03:34:57,960
Checked

2932
03:35:00,000 --> 03:35:01,800
linked start achieves good

2933
03:35:01,800 --> 03:35:05,600
performance
by using a hash to store the object

2934
03:35:05,600 --> 03:35:08,760
in this part of the hash allows fast

2935
03:35:08,880 --> 03:35:12,440
lookup. So

2936
03:35:14,120 --> 03:35:18,800
this is just another example.

2937
03:35:18,800 --> 03:35:22,080
Restart
is simplest implementation of third place

2938
03:35:22,200 --> 03:35:25,200
does not allow
any additional methods of same thing.

2939
03:35:25,880 --> 03:35:29,600
So it does not allow
no and so is similar to start,

2940
03:35:29,600 --> 03:35:35,600
except it sorts
the elements in ascending order.

2941
03:35:35,600 --> 03:35:37,120
Bangladesh going to

2942
03:35:38,760 --> 03:35:40,080
this is an example.

2943
03:35:40,080 --> 03:35:52,880
These are some tasks, simple tasks.

2944
03:35:54,000 --> 03:35:55,920
Piece of cake

2945
03:35:56,040 --> 03:36:01,440
for you guys.

2946
03:36:01,440 --> 03:36:15,040
Okay, let's go to the next class as well.

2947
03:36:15,040 --> 03:36:17,120
How many are we giving us?

2948
03:36:18,280 --> 03:36:21,680
It's a lot.

2949
03:36:21,680 --> 03:36:29,640
They are just 20 to 25 slides
in the next class.

2950
03:36:29,640 --> 03:36:32,320
I need rest.

2951
03:36:32,320 --> 03:36:34,000
Very funny.

2952
03:36:34,440 --> 03:36:35,520
Not ready.

2953
03:36:35,520 --> 03:36:39,800
So, guys, to do your tasks, there is
one thing that you guys will be needing,

2954
03:36:40,920 --> 03:36:42,800
and their thing is

2955
03:36:43,960 --> 03:36:47,240
you can convert any collection.

2956
03:36:47,240 --> 03:36:50,360
So any class you inside,

2957
03:36:50,880 --> 03:36:55,320
inside their collections,
you can convert between one type

2958
03:36:55,320 --> 03:36:59,720
and other type by simply passing
that data to the constructor.

2959
03:36:59,720 --> 03:37:01,320
So let's say, for example,

2960
03:37:01,320 --> 03:37:04,680
if you want convert to this
hash, start to an error list.

2961
03:37:05,280 --> 03:37:08,040
You would just create an error list.

2962
03:37:08,040 --> 03:37:10,080
You will be requiring this in your tasks.

2963
03:37:11,200 --> 03:37:13,320
You you mention the same data type

2964
03:37:17,920 --> 03:37:19,560
and inside this constructor

2965
03:37:19,560 --> 03:37:23,040
if I boss hash said this has said

2966
03:37:23,520 --> 03:37:27,400
this is a
will now have all the elements from this

2967
03:37:27,400 --> 03:37:30,880
this has set and it is now
converted to it to an analyst.

2968
03:37:31,560 --> 03:37:34,520
So now I can use
all the methods from the analyst

2969
03:37:34,520 --> 03:37:37,600
and if I have to convert it
back to an asset,

2970
03:37:38,240 --> 03:37:41,520
I can create a new hash cert

2971
03:37:44,920 --> 03:37:46,360
like this,

2972
03:37:47,320 --> 03:37:48,480
a search tool.

2973
03:37:48,480 --> 03:37:51,360
And I can pass this ArrayList in here

2974
03:37:51,880 --> 03:37:54,720
so you can convert one type and other die,

2975
03:37:54,720 --> 03:37:57,840
but by just passing it inside,
the constructor

2976
03:37:59,360 --> 03:38:01,200
should be done before tomorrow's class.

2977
03:38:01,200 --> 03:38:05,400
Yes, try to do it,
but if you guys are unable to do it,

2978
03:38:05,400 --> 03:38:10,760
we can do it during the class as well.

2979
03:38:10,760 --> 03:38:14,040
If we continue in this space,
we will be able to cover

2980
03:38:14,040 --> 03:38:18,240
the rest of the Java classes today.

2981
03:38:18,240 --> 03:38:24,840
Yes, tomorrow.

2982
03:38:24,840 --> 03:38:27,400
And preview.

2983
03:38:27,400 --> 03:38:30,960
Yes. Oh.

2984
03:38:31,960 --> 03:38:33,040
Oh my God.

2985
03:38:33,040 --> 03:38:36,600
My mind is
is really not working to Sunday.

2986
03:38:36,720 --> 03:38:40,640
Okay, then you have the complete week
to complete this

2987
03:38:40,680 --> 03:38:46,240
task.

2988
03:38:46,240 --> 03:38:49,920
I talked to day Saturday
and we will be having

2989
03:38:49,920 --> 03:38:52,120
another class

2990
03:38:53,160 --> 03:38:55,040
tomorrow on Sunday.

2991
03:38:55,040 --> 03:38:58,080
So. All right.

2992
03:38:58,080 --> 03:39:02,160
I need to eat some fish
and take some medicine.

2993
03:39:02,240 --> 03:39:06,840
So sorry guys, if I have confused you,
but I will.

2994
03:39:06,840 --> 03:39:08,960
On the next feature it is class.

2995
03:39:09,280 --> 03:39:14,040
I will revise all of these concepts
and then I will give you more examples.

2996
03:39:14,040 --> 03:39:19,200
And you guys, by that time you will be
have gone to the tasks as well.

2997
03:39:19,720 --> 03:39:23,920
So everything will make more sense
for from in the next two. And

2998
03:39:24,880 --> 03:39:27,960
if something not clear in the next class,

2999
03:39:28,800 --> 03:39:32,600
then you guys can tell me
and we can spend more time on that.

3000
03:39:32,600 --> 03:39:36,920
But don't worry
if something has confused you today,

3001
03:39:36,920 --> 03:39:39,360
I hope it will not confuse
you in the next week.

3002
03:39:40,800 --> 03:39:43,600
Today was all about confusing us.

3003
03:39:44,040 --> 03:39:47,400
How you also confused

3004
03:39:47,760 --> 03:39:54,120
Too late.

3005
03:39:54,120 --> 03:39:56,600
All right. All right.

3006
03:39:56,600 --> 03:40:00,640
So a lesson D today

3007
03:40:01,640 --> 03:40:04,400
you are confused
about everything around me.

3008
03:40:04,680 --> 03:40:08,280
I don't remember to whom I am talking,
what I am teaching.

3009
03:40:08,720 --> 03:40:11,600
I don't remember anything

3010
03:40:11,840 --> 03:40:16,040
but tomorrow, Selenium
tomorrow is Java review.

3011
03:40:16,560 --> 03:40:20,640
And yes, it will be done by me.

3012
03:40:20,640 --> 03:40:25,240
No, that was not confusing.

3013
03:40:25,240 --> 03:40:29,240
Okay, I'm just getting in the next week
we will revise everything.

3014
03:40:29,240 --> 03:40:29,600
So don't.

3015
03:40:29,600 --> 03:40:31,680
Don't worry if something has confused you

3016
03:40:42,400 --> 03:40:43,880
or I am in love

3017
03:40:43,880 --> 03:40:47,560
for the last seven years, I will not.

3018
03:40:47,560 --> 03:40:52,360
Don't ask me what happened.

3019
03:40:52,360 --> 03:40:54,480
I feel better.

3020
03:40:54,480 --> 03:40:56,160
You learn, guys.

3021
03:40:56,160 --> 03:40:59,520
Take some of Bye bye.
