1
00:00:05,760 --> 00:00:08,960
We should be regarding.

2
00:00:08,960 --> 00:00:13,040
Don't be that pessimistic.

3
00:00:14,120 --> 00:00:14,600
All right.

4
00:00:14,600 --> 00:00:19,680
So those who are for my moment,
is facing this issue, this issue.

5
00:00:20,040 --> 00:00:25,800
So let's say I make a mistake

6
00:00:27,080 --> 00:00:29,520
inside this file, okay?

7
00:00:29,520 --> 00:00:32,840
And now if I try to run this file in side

8
00:00:32,840 --> 00:00:36,480
this glass 15

9
00:00:40,600 --> 00:00:43,120
intelligent will take me to the file

10
00:00:43,600 --> 00:00:46,960
where I am having that issue
instead of running that file.

11
00:00:47,760 --> 00:00:50,800
So those who are facing this issue,
what do you guys can do?

12
00:00:51,000 --> 00:00:54,160
So I want you to double
click your shift button quickly.

13
00:00:55,400 --> 00:00:59,240
If you do that, you will see this window.

14
00:01:01,360 --> 00:01:03,480
Do you guys see this window?

15
00:01:03,760 --> 00:01:06,240
Then you showed us how to transfer

16
00:01:06,240 --> 00:01:10,000
from intelligent clips from Mac.

17
00:01:10,000 --> 00:01:14,360
So, Sheriff, I will not suggest you
to do that right now.

18
00:01:14,360 --> 00:01:17,000
Okay? At least to spend
one week with intelligent.

19
00:01:18,120 --> 00:01:21,240
Once you are a little familiar
about the interface

20
00:01:21,440 --> 00:01:22,880
with the interface, then I will.

21
00:01:22,880 --> 00:01:24,600
I will show you how to do that.

22
00:01:24,600 --> 00:01:26,640
It is very simple. Very simple.

23
00:01:27,520 --> 00:01:30,520
So do you see the screen?

24
00:01:34,000 --> 00:01:35,600
Now I want you to type

25
00:01:35,600 --> 00:01:46,960
exclude,

26
00:01:46,960 --> 00:01:49,560
not exclude

27
00:01:56,480 --> 00:02:01,720
or ignore,

28
00:02:01,720 --> 00:02:04,480
and let me first find it manually

29
00:02:06,040 --> 00:02:21,600
and then I will show you.

30
00:02:21,600 --> 00:02:24,960
Not excludes, not exclude it.

31
00:02:25,040 --> 00:02:30,360
Excuse, but

32
00:02:31,400 --> 00:02:37,280
we will.

33
00:02:37,280 --> 00:02:38,280
Here we go.

34
00:02:38,280 --> 00:02:42,000
So guys, type exclude

35
00:02:42,000 --> 00:02:44,760
double shift
your double click on your shift

36
00:02:44,760 --> 00:02:46,840
button quickly twice.

37
00:02:48,720 --> 00:02:58,320
And then you should see this window.

38
00:02:58,840 --> 00:03:03,880
So from here you can search
almost everything inside your intelligent.

39
00:03:03,920 --> 00:03:08,920
It can be a file,
it can be a note by Java file directory

40
00:03:08,920 --> 00:03:14,360
setting the get tab, any menu,
anything that exists in the intelligent.

41
00:03:14,360 --> 00:03:18,280
You can search that from this window.

42
00:03:18,280 --> 00:03:22,040
All the methods, variables, classes,
no packages,

43
00:03:22,040 --> 00:03:25,320
settings, everything.

44
00:03:26,840 --> 00:03:29,000
So do you guys see this excludes option

45
00:03:29,400 --> 00:03:33,200
or now

46
00:03:34,640 --> 00:03:37,560
I want you to click on back

47
00:03:42,680 --> 00:03:43,560
and after that

48
00:03:43,560 --> 00:03:47,720
you guys should see this window.

49
00:03:47,720 --> 00:03:49,200
Do you guys saved

50
00:04:00,160 --> 00:04:02,560
now those packages.

51
00:04:04,240 --> 00:04:07,200
So we can exclude
if you want to follow those that way

52
00:04:07,800 --> 00:04:10,800
in the future
you might want to use this feature.

53
00:04:11,880 --> 00:04:14,200
So in here,

54
00:04:15,120 --> 00:04:20,120
if some classes in my project,
if they are having issues

55
00:04:20,240 --> 00:04:23,760
and I don't know how to fix them
or I just want to run any file

56
00:04:24,200 --> 00:04:28,560
and I am unable to do that
because I am having errors in other files.

57
00:04:29,120 --> 00:04:33,240
So what I can do, I can tell invalidate
to ignore those files

58
00:04:33,440 --> 00:04:36,000
or even you can ignore complete packages.

59
00:04:36,600 --> 00:04:39,600
Now, if you ignore
a complete package of the file,

60
00:04:39,600 --> 00:04:42,000
that file will not be a part of execution.

61
00:04:42,640 --> 00:04:48,000
So you have to click on this plus button.

62
00:04:48,000 --> 00:04:49,720
Then you expand your project

63
00:04:52,400 --> 00:04:54,000
scores.

64
00:04:54,360 --> 00:04:58,600
How? And in here
you will see a list of all the packages.

65
00:04:58,640 --> 00:05:03,400
Okay, So right now I am having an issue
in this main dark java.

66
00:05:03,400 --> 00:05:04,640
So I will click on.

67
00:05:04,640 --> 00:05:07,640
Okay.

68
00:05:07,640 --> 00:05:11,640
And then do you guys
have you guys selected a file?

69
00:05:12,160 --> 00:05:15,640
Just make any syntax error and select

70
00:05:15,640 --> 00:05:24,160
that file.

71
00:05:24,160 --> 00:05:27,600
So sorry if you have to click on this
plus button that says add

72
00:05:33,840 --> 00:05:37,840
and then you should see all the projects
inside the intelligent

73
00:05:37,840 --> 00:05:40,480
and then you expand your project
like this.

74
00:05:41,320 --> 00:05:43,840
Then this whole folder

75
00:05:43,840 --> 00:05:46,120
excludes exclude will

76
00:05:46,120 --> 00:05:48,880
exclude these files from compiler.

77
00:05:48,880 --> 00:05:55,280
I so compiler
will not compile these files.

78
00:05:55,280 --> 00:06:01,080
Do you have any project
in your intelligent?

79
00:06:01,080 --> 00:06:02,680
If you guys don't have any project,

80
00:06:02,680 --> 00:06:05,080
then you definitely
you will not be seeing this.

81
00:06:05,080 --> 00:06:05,800
Right?

82
00:06:06,000 --> 00:06:15,720
So first you have to create the project.

83
00:06:15,720 --> 00:06:16,480
Okay, I'm not.

84
00:06:16,480 --> 00:06:21,960
I will summarize this for you,
but those who don't have any projects,

85
00:06:22,320 --> 00:06:26,640
definitely you guys will not be facing
this issue and you guys don't need that.

86
00:06:26,640 --> 00:06:30,560
If you faced this issue,
maybe you can later, at later

87
00:06:30,560 --> 00:06:32,800
point of time,
you can watch this recording.

88
00:06:32,800 --> 00:06:36,400
So just just watch me carefully
what I am doing in here.

89
00:06:36,440 --> 00:06:36,720
Okay?

90
00:06:36,720 --> 00:06:40,600
And then in the future,
if you guys need this, you can

91
00:06:41,280 --> 00:06:45,840
you can follow these steps.

92
00:06:45,840 --> 00:06:47,920
Now select that file which contains error

93
00:06:48,880 --> 00:06:49,720
and then click on.

94
00:06:49,720 --> 00:07:06,040
Okay,

95
00:07:06,040 --> 00:07:08,520
It takes me to the document folder.

96
00:07:09,160 --> 00:07:12,680
I can also share the screenshot
how you are selecting that file,

97
00:07:13,200 --> 00:07:26,200
and then you guys have to click on apply
and then okay, so

98
00:07:26,240 --> 00:07:56,400
let me repeat.

99
00:07:56,400 --> 00:07:59,520
Okay, so now if you guys focus,

100
00:08:00,440 --> 00:08:03,280
you should see a cross sign,

101
00:08:03,280 --> 00:08:05,400
a very small cross sign

102
00:08:07,200 --> 00:08:08,760
on ontology

103
00:08:08,760 --> 00:08:13,920
or the title of your file towards
the left, left of your file.

104
00:08:14,280 --> 00:08:19,320
That means this file has been excluded
from compilation.

105
00:08:19,320 --> 00:08:23,640
It will not be compiled,
it will not be executed.

106
00:08:23,640 --> 00:08:29,160
Then we can share the screenshot.

107
00:08:29,160 --> 00:08:30,880
And now

108
00:08:33,720 --> 00:08:35,840
we are third file.

109
00:08:35,960 --> 00:08:39,440
And now if I execute my program

110
00:08:45,240 --> 00:08:46,640
now intelligent

111
00:08:46,640 --> 00:08:49,600
don't care about that file anymore.

112
00:08:50,040 --> 00:08:53,560
You can exclude the complete directories,
complete packages

113
00:08:55,880 --> 00:08:59,400
and even complete project
if you are working on multi project

114
00:09:01,080 --> 00:09:02,640
application.

115
00:09:03,280 --> 00:09:05,280
But give me and I shall kindly

116
00:09:05,280 --> 00:09:12,040
share the screenshots.

117
00:09:12,040 --> 00:09:13,960
It saves the code automatically.

118
00:09:13,960 --> 00:09:16,840
You guys don't have to save
or you guys don't have to do anything

119
00:09:41,480 --> 00:09:42,000
I share.

120
00:09:42,000 --> 00:09:46,000
And you me First,
you guys have to look at your project so.

121
00:09:46,000 --> 00:09:46,240
Right.

122
00:09:46,240 --> 00:09:50,160
If you expand this window,
this is where my project is stored.

123
00:09:50,160 --> 00:09:50,760
It is stored.

124
00:09:50,760 --> 00:09:55,600
And see you the resident of the Idea
project and then blah, blah, blah.

125
00:09:55,600 --> 00:09:57,360
Okay,
so first we have to look here, there,

126
00:09:57,360 --> 00:10:05,160
and then you have to go inside the SBC
folder.

127
00:10:05,160 --> 00:10:07,800
Did you open the project first time?

128
00:10:07,800 --> 00:10:08,640
Is that beginning?

129
00:10:08,640 --> 00:10:12,760
No, that was the part of that, that video

130
00:10:13,200 --> 00:10:15,600
in which I showed you
how to create a project.

131
00:10:15,800 --> 00:10:19,080
I hope you everyone has and has a project

132
00:10:19,840 --> 00:10:29,200
in in Delhi.

133
00:10:29,200 --> 00:10:32,080
Okay, let's create some
files and then I will repeat

134
00:10:33,600 --> 00:10:35,800
these instructions again.

135
00:10:35,800 --> 00:10:36,520
Okay.

136
00:10:36,520 --> 00:10:39,880
These instructions again.

137
00:10:39,880 --> 00:10:43,440
Is there anyone who who can not still run

138
00:10:43,440 --> 00:10:49,400
that hallowed program?

139
00:10:49,400 --> 00:10:51,800
No one. Everyone can run the intelligent.

140
00:10:51,800 --> 00:10:54,440
Everyone can run the So

141
00:10:54,440 --> 00:10:55,800
to create a new project.

142
00:10:55,800 --> 00:10:59,600
But now I can not run the first
hello project and I will

143
00:10:59,600 --> 00:11:01,760
I will show you how to do that.

144
00:11:01,760 --> 00:11:02,400
How to do that.

145
00:11:02,400 --> 00:11:07,760
Don't worry. Yes.

146
00:11:08,000 --> 00:11:08,840
Dennis,

147
00:11:09,960 --> 00:11:12,000
your your approach looks good.

148
00:11:12,000 --> 00:11:15,280
Now you have to select that file
that contains the issue.

149
00:11:15,800 --> 00:11:18,000
So this is the base package

150
00:11:19,400 --> 00:11:21,280
and then these are the sub packages.

151
00:11:21,280 --> 00:11:26,120
So if I want to create a new package,
I will right click,

152
00:11:27,120 --> 00:11:31,680
then I will say a new
and then package here

153
00:11:33,560 --> 00:11:37,040
and then I can see

154
00:11:37,080 --> 00:11:39,240
last thing

155
00:11:47,960 --> 00:11:51,920
and I'm creating a file
to write the note for you.

156
00:11:52,080 --> 00:12:04,680
You guys don't need to do this.

157
00:12:04,680 --> 00:12:06,960
Give me
You have selected the complete project.

158
00:12:07,840 --> 00:12:10,040
You have excluded the complete project.

159
00:12:11,000 --> 00:12:11,640
Well, why are you

160
00:12:11,640 --> 00:12:14,280
have opened the project structure window

161
00:12:19,920 --> 00:12:21,640
for it?

162
00:12:21,640 --> 00:12:22,680
It was running.

163
00:12:22,680 --> 00:12:25,280
That means you have to include that
file again.

164
00:12:25,440 --> 00:12:25,680
I will.

165
00:12:25,680 --> 00:12:32,880
Do you see this crawl sign on your file?

166
00:12:32,880 --> 00:12:33,240
Okay.

167
00:12:33,240 --> 00:12:38,400
So if you want to include a file back,
you guys can repeat these steps.

168
00:12:38,400 --> 00:12:41,120
Double to double click on the shift
button.

169
00:12:42,000 --> 00:12:44,320
Type excludes

170
00:12:46,680 --> 00:12:49,120
and then you should see this file in here

171
00:12:49,120 --> 00:12:52,440
so you can select that file
and you can click on this minus button

172
00:12:53,640 --> 00:12:57,920
that should include the file
in compilation again.

173
00:12:58,920 --> 00:12:59,520
Okay.

174
00:12:59,560 --> 00:13:01,760
But make sure now you

175
00:13:01,760 --> 00:13:05,080
remove the errors before you run back.

176
00:13:05,080 --> 00:13:05,360
Okay?

177
00:13:05,480 --> 00:13:09,080
So that's how we include
and exclude file from compilation.

178
00:13:09,360 --> 00:13:10,320
So ha.

179
00:13:10,320 --> 00:13:15,200
So we add all projects from
previous classes and that is that's it.

180
00:13:15,320 --> 00:13:16,200
Nothing else.

181
00:13:16,200 --> 00:13:18,400
So right now we will not be doing that.

182
00:13:18,400 --> 00:13:22,440
Alex We will do at least after one week

183
00:13:23,360 --> 00:13:26,480
and then in a weekend class,
not make the class

184
00:13:26,480 --> 00:13:33,000
because you guys will be facing
a lot of issues.

185
00:13:33,000 --> 00:13:34,320
Can you please show me

186
00:13:35,400 --> 00:13:37,480
again how to create a project?

187
00:13:37,480 --> 00:13:39,960
So, I mean,
this is how we create a project.

188
00:13:39,960 --> 00:13:42,960
We right click on base package

189
00:13:46,080 --> 00:13:49,320
and then new and then package.

190
00:13:49,560 --> 00:13:51,480
You should see this package option.

191
00:13:51,480 --> 00:13:56,240
It you take

192
00:14:15,760 --> 00:14:19,280
medium expand that.

193
00:14:19,280 --> 00:14:21,320
So this is what you see right now.

194
00:14:21,320 --> 00:14:23,160
Expand your project.

195
00:14:23,160 --> 00:14:25,480
Then you should see this SBC folder.

196
00:14:25,960 --> 00:14:29,120
Then you should see your base package
create a new package

197
00:14:29,120 --> 00:14:31,920
inside your base package
and then you can start following

198
00:14:40,160 --> 00:14:40,760
all our guys.

199
00:14:40,760 --> 00:14:43,000
Let's start from the recap.

200
00:14:43,880 --> 00:14:46,320
So can you guys tell me, what did we cover

201
00:14:46,320 --> 00:14:48,480
in the last class

202
00:14:57,280 --> 00:14:58,320
construct

203
00:14:58,320 --> 00:15:05,160
right?

204
00:15:05,160 --> 00:15:06,280
What are the structures?

205
00:15:06,280 --> 00:15:11,320
Can you guys define a constructor
the way you will be answering it

206
00:15:11,320 --> 00:15:19,200
in your interviews?

207
00:15:19,200 --> 00:15:21,720
I can't do it f as

208
00:15:23,280 --> 00:15:26,120
it is this special type of method

209
00:15:26,120 --> 00:15:30,160
which is used to initialize
the object are not method.

210
00:15:30,160 --> 00:15:35,800
For one,
you can say it's a special block of code,

211
00:15:35,800 --> 00:15:39,240
same as method,
but with the restrictions and limitations.

212
00:15:39,680 --> 00:15:48,280
Okay, block off

213
00:15:48,280 --> 00:15:50,760
code to initialize the instance variables.

214
00:15:51,440 --> 00:15:53,600
So I don't know, but

215
00:15:54,240 --> 00:15:56,440
it's not a discouragement for others.

216
00:15:56,440 --> 00:16:02,720
So try to look at the definitions
from your little guys.

217
00:16:02,720 --> 00:16:06,360
He always writes a good definition

218
00:16:08,080 --> 00:16:10,600
and the students who are able

219
00:16:10,600 --> 00:16:14,960
to explain the concepts
in a well manner to others.

220
00:16:15,600 --> 00:16:19,640
Usually these are the students
who will be getting the jobs faster.

221
00:16:20,640 --> 00:16:24,040
So it's a very important skill
to have to be able

222
00:16:24,040 --> 00:16:26,480
to explain something in a proper way.

223
00:16:27,360 --> 00:16:29,640
Constructing a Java is a block of words

224
00:16:29,640 --> 00:16:32,960
similar to a method
that Vanguard mycology shows.

225
00:16:32,960 --> 00:16:36,120
You have written this on
your own and not from Google

226
00:16:37,200 --> 00:16:38,080
called automatically

227
00:16:38,080 --> 00:16:41,880
when a new instance of an object
is created.

228
00:16:41,880 --> 00:16:46,240
It's a block of code similar to the method
because in your interviews

229
00:16:46,240 --> 00:16:49,080
they will not allow you to use Google

230
00:16:56,600 --> 00:16:56,920
again.

231
00:16:56,960 --> 00:17:02,160
So the structure is a

232
00:17:03,240 --> 00:17:07,840
special block of code that

233
00:17:11,160 --> 00:17:13,760
help us

234
00:17:14,240 --> 00:17:15,320
build

235
00:17:16,600 --> 00:17:19,240
or construct

236
00:17:22,920 --> 00:17:23,600
the object.

237
00:17:23,600 --> 00:17:26,000
And what do I mean

238
00:17:28,800 --> 00:17:30,320
by builder construct?

239
00:17:30,320 --> 00:17:34,200
Can you guys tell me,
what do I mean when I say I am building

240
00:17:34,200 --> 00:17:37,120
a meeting, an object,
or constructing an object

241
00:17:38,720 --> 00:17:41,360
is Class 18 is created as a class?

242
00:17:42,680 --> 00:17:46,240
No, it's a package.

243
00:17:46,240 --> 00:17:49,600
I mean, it's a package.

244
00:17:49,600 --> 00:17:52,320
A special type of matter.

245
00:17:52,320 --> 00:17:53,760
This is not correct.

246
00:17:53,760 --> 00:17:56,000
Constructor is not a method.

247
00:17:56,000 --> 00:17:57,240
Initialize.

248
00:17:57,240 --> 00:17:59,080
Constructors are a block of code.

249
00:17:59,080 --> 00:18:01,560
It has a same name as class name.

250
00:18:02,040 --> 00:18:04,640
It does not have written type even wide.

251
00:18:04,920 --> 00:18:12,000
There would also be.

252
00:18:12,000 --> 00:18:14,040
Can you guys tell me what what does

253
00:18:15,480 --> 00:18:15,920
what?

254
00:18:16,000 --> 00:18:18,200
What do I mean by build or construct

255
00:18:19,400 --> 00:18:22,000
the block of code similar to a method

256
00:18:22,000 --> 00:18:25,360
that's called an instance

257
00:18:25,560 --> 00:18:27,920
or an instance of an object

258
00:18:33,280 --> 00:18:34,040
block of code

259
00:18:34,040 --> 00:18:38,840
to execute preconditions for the object?

260
00:18:38,840 --> 00:18:40,720
Yes, that is also correct.

261
00:18:40,720 --> 00:18:44,160
Two types of constructors
non argument and parameterized

262
00:18:45,840 --> 00:18:47,040
when we create an object.

263
00:18:47,040 --> 00:18:49,160
Constructors already called. Okay.

264
00:18:49,160 --> 00:18:53,160
So all of these answers
are not kind of clause,

265
00:18:54,120 --> 00:18:55,560
but not

266
00:18:56,880 --> 00:18:59,240
what the interviewers will be looking for.

267
00:18:59,440 --> 00:19:02,040
Again,
if you guys are answering like this,

268
00:19:02,880 --> 00:19:05,120
most probably they will not be liking you

269
00:19:05,560 --> 00:19:09,120
so try to write something

270
00:19:09,120 --> 00:19:13,320
more formal and complete a special method
to initialize.

271
00:19:14,040 --> 00:19:16,720
No, it's a special type of method

272
00:19:16,720 --> 00:19:18,760
which is used to initialize the object.

273
00:19:20,360 --> 00:19:23,280
So if this is written on
the slides, let me fix that.

274
00:19:25,120 --> 00:19:25,600
We go there.

275
00:19:25,600 --> 00:19:27,200
It is not. Would

276
00:19:27,440 --> 00:19:28,560
you give me a

277
00:19:29,320 --> 00:19:38,280
can you tell me this slide number?

278
00:19:38,280 --> 00:19:40,200
How can I import my java?

279
00:19:40,200 --> 00:19:42,360
Please import my java.

280
00:19:42,400 --> 00:20:12,240
You mean Java projects Now?

281
00:20:12,240 --> 00:20:12,760
Okay.

282
00:20:12,800 --> 00:20:16,080
Can you guys tell me what that
what does it mean

283
00:20:16,080 --> 00:20:19,560
by initialize the object?

284
00:20:19,680 --> 00:20:22,880
The constructors are used to better
control your code

285
00:20:22,880 --> 00:20:27,440
and go through specific parameters
before executing a block of code.

286
00:20:27,560 --> 00:20:28,600
Looks good.

287
00:20:28,600 --> 00:20:31,720
Also, we can say it's a constructor name
which is with the class name

288
00:20:31,720 --> 00:20:36,400
and if it does not have a written type,
yes, declare create an object.

289
00:20:36,600 --> 00:20:38,720
So by constructing we mean

290
00:20:49,560 --> 00:20:53,440
giving any initial value

291
00:20:57,680 --> 00:20:59,840
to the fields.

292
00:21:00,040 --> 00:21:12,600
Okay.

293
00:21:12,600 --> 00:21:13,200
All right.

294
00:21:13,200 --> 00:21:19,320
So when we write New and then

295
00:21:20,520 --> 00:21:23,760
class name and these parentheses,

296
00:21:24,560 --> 00:21:29,560
this is the line that triggers
the execution of the constructor.

297
00:21:29,560 --> 00:21:33,120
When would our new class name?

298
00:21:34,240 --> 00:21:36,120
This is the

299
00:21:36,120 --> 00:21:38,520
world that

300
00:21:40,800 --> 00:21:44,720
executes the

301
00:21:45,800 --> 00:21:49,080
character for

302
00:21:49,680 --> 00:21:51,120
our class.

303
00:21:51,120 --> 00:22:00,640
Okay, guys,
what if I am not providing a constructor?

304
00:22:00,640 --> 00:22:03,720
What happens then?

305
00:22:03,720 --> 00:22:07,160
Builder constructor
means to initialize the states and behave.

306
00:22:07,160 --> 00:22:10,560
Yes. Yes, you are right.

307
00:22:10,560 --> 00:22:12,360
Java will do this for us.

308
00:22:12,360 --> 00:22:14,920
Right? When we do

309
00:22:16,040 --> 00:22:18,800
not world wide

310
00:22:21,360 --> 00:22:23,160
and we do not.

311
00:22:23,160 --> 00:22:25,320
I make some structure

312
00:22:30,920 --> 00:22:32,720
before

313
00:22:33,720 --> 00:22:34,920
vector

314
00:22:35,360 --> 00:22:37,800
is provided

315
00:22:38,840 --> 00:22:41,000
by java

316
00:22:43,720 --> 00:23:06,000
compiler.

317
00:23:06,000 --> 00:23:07,080
All right.

318
00:23:07,080 --> 00:23:11,960
And if I have multiple constructors
guys in a class,

319
00:23:11,960 --> 00:23:16,760
if I have multiple constructors,
how do Java know which constructor

320
00:23:16,760 --> 00:23:17,720
to call

321
00:23:24,000 --> 00:23:25,960
by the parameters?

322
00:23:25,960 --> 00:23:29,000
Yes. But how? How what? What? What?

323
00:23:29,000 --> 00:23:35,640
It will look inside those parameters.

324
00:23:35,640 --> 00:23:38,880
Okay, so one way is it can check

325
00:23:38,880 --> 00:23:44,000
how many parameters we are passing.

326
00:23:44,000 --> 00:23:46,440
But what if I am having a constructor

327
00:23:47,040 --> 00:23:49,680
with same number of parameters?

328
00:23:49,680 --> 00:23:53,960
One is taking a string and an integer
and the other one is taking two integers.

329
00:23:54,160 --> 00:23:57,280
Okay, so in here the number of parameters
they are same.

330
00:23:57,280 --> 00:24:00,120
Both of the constructors
are taking two parameters.

331
00:24:00,240 --> 00:24:01,400
Now what Java will do

332
00:24:05,200 --> 00:24:08,200
by this type of parameters to

333
00:24:10,040 --> 00:24:12,960
say And what if I am

334
00:24:13,440 --> 00:24:17,800
specifying the parameters
in a different order?

335
00:24:18,120 --> 00:24:21,560
In one constructor
I provide string first, then integer.

336
00:24:21,720 --> 00:24:25,320
In the second constructor I provide
an integer first and then a string.

337
00:24:25,560 --> 00:24:32,240
Now what I will do Now I have same number
of parameters, different types

338
00:24:32,240 --> 00:24:40,800
of parameter, different data,
types of parameters, checks three things.

339
00:24:41,400 --> 00:24:43,920
It will check the number of parameters,

340
00:24:44,800 --> 00:24:49,960
type of parameters, and then the sequence
of parameters as well.

341
00:24:50,400 --> 00:24:59,800
So if,

342
00:24:59,800 --> 00:25:02,480
if there are

343
00:25:04,600 --> 00:25:06,520
multiple

344
00:25:08,760 --> 00:25:10,320
factors

345
00:25:11,120 --> 00:25:14,040
in a class

346
00:25:19,280 --> 00:25:25,320
Java will check

347
00:25:25,360 --> 00:25:27,600
the number of

348
00:25:30,680 --> 00:25:32,160
number of

349
00:25:34,560 --> 00:25:35,680
meters

350
00:25:36,520 --> 00:25:38,920
type of parameters

351
00:25:40,440 --> 00:25:43,320
and sequence of

352
00:25:44,480 --> 00:25:45,480
parameters.

353
00:25:45,480 --> 00:25:47,400
So for some of you, it might not be clear.

354
00:25:47,400 --> 00:26:02,120
So let me do an example for you. So

355
00:26:03,360 --> 00:26:05,320
how do I create a constructor, guys?

356
00:26:05,320 --> 00:26:08,640
What should I write
If I want to have a constructor

357
00:26:10,840 --> 00:26:12,720
class name,

358
00:26:13,000 --> 00:26:17,720
can I can I use the access modifiers?

359
00:26:17,720 --> 00:26:36,000
By the way,
what are access modifiers guys?

360
00:26:36,000 --> 00:26:38,880
Public priority

361
00:26:38,920 --> 00:26:40,200
is is static.

362
00:26:40,200 --> 00:26:43,680
A is a static and excess modifier

363
00:26:48,400 --> 00:26:50,320
engrained so

364
00:26:50,400 --> 00:26:52,680
I can have access modifiers

365
00:26:52,680 --> 00:26:58,360
like public in here.

366
00:26:58,360 --> 00:27:15,320
So let's say
I have a string named integer H.

367
00:27:15,320 --> 00:27:17,800
Yes, static is non access modifier

368
00:27:34,800 --> 00:27:40,480
and then if I try to write a constructor

369
00:27:40,560 --> 00:27:44,480
in which I am again passing a string

370
00:27:45,360 --> 00:27:49,800
and and indeed it also does these names,
they also matter

371
00:27:49,920 --> 00:27:53,560
if I change these names will be like,
will I be unable?

372
00:27:53,560 --> 00:27:58,040
Will I be able to get rid of this error
but only the data type

373
00:27:58,040 --> 00:28:14,960
that matters?

374
00:28:14,960 --> 00:28:17,400
So these names, they can be anything.

375
00:28:17,400 --> 00:28:18,800
They don't matter. Okay,

376
00:28:20,280 --> 00:28:23,280
so if I pass this in procedure first

377
00:28:26,960 --> 00:28:28,840
and then the string again,

378
00:28:28,840 --> 00:28:32,040
Java does not give me any issues.

379
00:28:32,320 --> 00:29:01,200
Okay,

380
00:29:01,200 --> 00:29:03,600
then then let me also have

381
00:29:07,920 --> 00:29:09,720
B for the constructor.

382
00:29:09,720 --> 00:29:16,840
That's only a zero argument constructor
not to default Me.

383
00:29:16,920 --> 00:29:22,800
All right.

384
00:29:22,800 --> 00:29:23,080
Okay.

385
00:29:23,080 --> 00:29:26,480
Just to explain things,
let me just put the numbers inside

386
00:29:26,480 --> 00:29:28,480
these constructors

387
00:29:30,040 --> 00:29:40,800
do three

388
00:29:51,080 --> 00:29:51,840
and four.

389
00:29:51,840 --> 00:29:56,520
Okay, So now I have multiple constructors.

390
00:29:58,200 --> 00:30:01,000
Multiple constructors.

391
00:30:01,000 --> 00:30:04,200
Okay, In here I am only explaining

392
00:30:05,120 --> 00:30:08,160
how Java decides
which constructor to call.

393
00:30:09,000 --> 00:30:19,040
Okay.

394
00:30:19,040 --> 00:30:22,080
In intelligent

395
00:30:24,240 --> 00:30:26,520
Now, did you try that before

396
00:30:28,480 --> 00:30:36,240
e map? Yes.

397
00:30:36,240 --> 00:30:43,080
It will be slower, but with the time.

398
00:30:43,080 --> 00:30:49,160
What intelligent does it
creates indexes off your code.

399
00:30:49,160 --> 00:30:50,840
Your files and everything.

400
00:30:50,840 --> 00:30:55,920
So let's say if you are working on a big
project, having maybe a thousand files

401
00:30:56,880 --> 00:30:58,160
now after having

402
00:30:58,160 --> 00:31:02,240
thousand files in delegate
will be much, much faster

403
00:31:02,240 --> 00:31:07,480
and the eclipse will get slow
because it creates indexes of the files.

404
00:31:08,040 --> 00:31:12,360
And at the moment you type something
to search through those files

405
00:31:12,360 --> 00:31:15,480
or if you want to refactor something
or if you are want to do

406
00:31:15,480 --> 00:31:19,600
anything about itself with those files,
it will be simpler, quick.

407
00:31:20,040 --> 00:31:22,360
So with time it will get faster.

408
00:31:22,360 --> 00:31:26,480
So. Right, because you guys are most
probably installing it the first time.

409
00:31:26,840 --> 00:31:29,920
So it will take some time to

410
00:31:31,200 --> 00:31:34,320
index all of your autofill settings

411
00:31:34,320 --> 00:31:37,960
and other things and all that

412
00:31:53,040 --> 00:31:53,720
searching.

413
00:31:53,720 --> 00:31:55,080
Okay, let me show you one more.

414
00:31:55,080 --> 00:31:58,480
Okay, So double click
the shift button quickly

415
00:32:01,600 --> 00:32:03,880
and then type

416
00:32:03,920 --> 00:32:05,880
font size

417
00:32:05,880 --> 00:32:10,200
that is now

418
00:32:13,120 --> 00:32:14,760
it's not giving me the option.

419
00:32:14,760 --> 00:32:16,880
What type of file.

420
00:32:17,160 --> 00:32:20,680
So say you just create file.

421
00:32:20,800 --> 00:32:24,360
And if you put an extension

422
00:32:25,240 --> 00:32:29,560
with the name like Dot XD,
it will create a text file.

423
00:32:30,240 --> 00:32:34,200
If you write the extension as dot neo,
it will create a word file

424
00:32:34,440 --> 00:32:36,760
excel file
so you can create any type of file.

425
00:32:37,680 --> 00:32:41,320
Just click on that file
or you want to create a java file

426
00:32:41,320 --> 00:32:44,640
and you are unable
to get an option for that.

427
00:32:45,160 --> 00:32:47,720
So you have again imported the project

428
00:32:47,720 --> 00:32:50,720
from Eclipse.

429
00:32:50,720 --> 00:32:52,920
Oh no, this is not how we do that.

430
00:32:52,920 --> 00:33:01,000
So you have to create a new project.

431
00:33:01,000 --> 00:33:06,400
So to create a new package
now you have to write click,

432
00:33:06,400 --> 00:33:10,160
and then you have to select
new and then package it

433
00:33:14,120 --> 00:33:18,520
to double click on your shift button.

434
00:33:18,520 --> 00:33:21,680
Quickly.

435
00:33:21,680 --> 00:33:23,680
That's it. Twice.

436
00:33:24,000 --> 00:33:24,840
Quickly.

437
00:33:25,680 --> 00:33:29,840
One. Now,
do you see the option to create a package

438
00:33:30,160 --> 00:33:39,440
to welcome?

439
00:33:39,440 --> 00:33:41,840
Yes, if this is what I am showing.

440
00:33:42,080 --> 00:33:44,560
So you guys have to double click quickly.

441
00:33:44,560 --> 00:33:48,080
Then you have to click on font size

442
00:33:48,080 --> 00:33:51,000
and then there is a quick
shortcut tools that

443
00:33:54,080 --> 00:33:56,160
retain the font size from here.

444
00:33:57,840 --> 00:34:01,240
And then you will see this option
that says change

445
00:34:01,240 --> 00:34:06,880
font size with the control
plus mouse wheel.

446
00:34:06,880 --> 00:34:08,040
The last option.

447
00:34:08,040 --> 00:34:10,560
Do you guys see this option

448
00:34:13,600 --> 00:34:16,600
and font size with control plus mouse Will

449
00:34:40,840 --> 00:34:42,960
Alexa Right now I will suggest you

450
00:34:42,960 --> 00:34:46,760
to create a new project,
but don't delete this one.

451
00:34:46,760 --> 00:34:47,520
It will work.

452
00:34:47,520 --> 00:34:50,440
I will tell you how to do that

453
00:34:51,120 --> 00:34:51,720
on the Mac.

454
00:34:51,720 --> 00:34:58,080
Your same check
if you have the shifter button.

455
00:34:58,080 --> 00:35:00,120
How to change the appearance of Dark.

456
00:35:01,280 --> 00:35:01,680
Okay.

457
00:35:01,920 --> 00:35:04,280
I will tell you that as a

458
00:35:05,720 --> 00:35:08,520
what do you mean by double
clicking on shift button?

459
00:35:08,520 --> 00:35:10,200
So, Nabeel, this is my keyboard.

460
00:35:10,200 --> 00:35:11,120
This is my favorite button.

461
00:35:11,120 --> 00:35:13,200
I click twice on the the button.

462
00:35:13,200 --> 00:35:23,720
This is what I mean,

463
00:35:23,720 --> 00:35:30,520
click press.

464
00:35:30,520 --> 00:35:33,240
So you guys have to double click

465
00:35:35,000 --> 00:35:36,200
your shift button.

466
00:35:36,200 --> 00:35:41,600
You have to press your shift
button twice quickly.

467
00:35:41,600 --> 00:35:41,880
Okay?

468
00:35:41,880 --> 00:35:45,000
And then I see how you can hold down
your control button and then you can use

469
00:35:45,000 --> 00:35:58,080
the wheel of your mouth
to increase and decrease the font.

470
00:35:58,080 --> 00:36:01,120
Okay. So do you guys see this option? Now,

471
00:36:01,120 --> 00:36:03,200
I want you to turn on this feature

472
00:36:11,560 --> 00:36:12,320
you select.

473
00:36:12,320 --> 00:36:27,680
You have to click on new and then project,

474
00:36:27,680 --> 00:36:32,440
and now you can hold down your control
and then press the you can

475
00:36:33,680 --> 00:36:36,320
move your wheel

476
00:36:36,320 --> 00:36:38,800
to increase the zoom or decrease it.

477
00:36:40,280 --> 00:36:41,040
Click on next.

478
00:36:41,040 --> 00:36:42,200
Alex.

479
00:36:42,200 --> 00:36:46,320
Alex I share that with you in the course
and also our channel

480
00:36:46,320 --> 00:36:50,400
in which I showed
how to create a new project

481
00:36:50,400 --> 00:36:56,760
and how to install a JDK
if you don't have one.

482
00:36:56,760 --> 00:37:01,440
And those who are asking for team,
you guys don't need to memorize

483
00:37:01,440 --> 00:37:04,080
those long

484
00:37:06,280 --> 00:37:09,960
and long navigations to the side view.

485
00:37:09,960 --> 00:37:11,760
Just dive team

486
00:37:12,000 --> 00:37:16,920
and you should it should appear in here,
you press in it, that's their team.

487
00:37:16,920 --> 00:37:20,480
You'll see intelligent light windows
then Dracula.

488
00:37:21,000 --> 00:37:32,760
By contrast, you can select whichever
you guys want. Yes.

489
00:37:32,800 --> 00:37:36,040
Or double
click your shift button twice quickly

490
00:37:37,200 --> 00:37:39,720
and then type team

491
00:37:45,240 --> 00:37:46,800
so you guys can

492
00:37:46,800 --> 00:37:49,360
then switch almost everything inside

493
00:37:49,480 --> 00:38:04,720
the intelligent from here.

494
00:38:04,720 --> 00:38:07,400
Do you see this
option? The option for teams

495
00:38:11,320 --> 00:38:13,680
and this is how you choose the 18.

496
00:38:14,040 --> 00:38:32,280
Are there other options?

497
00:38:32,280 --> 00:38:33,120
Okay,

498
00:38:33,720 --> 00:38:37,320
so okay,
I have created these constructors.

499
00:38:37,320 --> 00:38:41,280
Now let me clear to test class

500
00:38:56,200 --> 00:38:58,680
and let me open your

501
00:39:22,960 --> 00:39:24,480
I hope you guys can read.

502
00:39:24,480 --> 00:39:27,120
You are going to celebrate default

503
00:39:35,040 --> 00:39:35,760
all our day.

504
00:39:35,760 --> 00:39:40,040
So there is one more feature
of intelligent and that will confuse you.

505
00:39:40,040 --> 00:39:43,240
So let me show you that we see Class 18.

506
00:39:43,240 --> 00:39:46,760
We choose new file or plain class file,
new Java file.

507
00:39:48,000 --> 00:39:50,160
You should see an option

508
00:39:50,160 --> 00:39:53,880
to create a new Java file.

509
00:39:53,880 --> 00:39:57,680
So let me create a

510
00:40:00,440 --> 00:40:03,000
let me create an object

511
00:40:31,800 --> 00:40:33,960
I have drive these two parameters

512
00:40:35,720 --> 00:40:39,600
and now what intelligent will do,

513
00:40:40,640 --> 00:40:45,160
it will show you to which variable
this string will copied.

514
00:40:45,160 --> 00:40:48,120
So this named or colon,
you guys don't have to type it.

515
00:40:49,360 --> 00:40:50,160
It is just

516
00:40:50,160 --> 00:40:54,080
a just a suggestion
that this string variable

517
00:40:54,080 --> 00:40:57,520
will be copied to a variable

518
00:40:57,520 --> 00:41:02,200
which is named name inside this class.

519
00:41:02,200 --> 00:41:06,480
So this named or column is to kind of hint
from the intelligent.

520
00:41:06,480 --> 00:41:09,320
Okay, so you guys don't have a type.

521
00:41:09,320 --> 00:41:11,040
Would you just type string comma

522
00:41:11,040 --> 00:41:13,480
and then pull
and then you should see these suggestions.

523
00:41:13,720 --> 00:41:21,000
You guys see these suggestions?

524
00:41:21,000 --> 00:41:23,200
You guys don't have to type
in these suggestions.

525
00:41:23,200 --> 00:41:23,800
Okay.

526
00:41:24,760 --> 00:41:27,360
Previous pages,
they were making a lot of mistakes.

527
00:41:27,360 --> 00:41:29,720
They they were trying to type
these name call

528
00:41:29,720 --> 00:41:34,560
and then double code things
and then all that.

529
00:41:34,560 --> 00:41:41,440
But you guys don't have to do that.

530
00:41:41,440 --> 00:41:44,520
Remove that because we don't need that.

531
00:41:44,960 --> 00:41:48,960
So now is there any hot forces out
in intelligent.

532
00:41:48,960 --> 00:41:52,840
Yes it's s out and then you hit enter

533
00:41:56,840 --> 00:41:59,960
I disabled that

534
00:42:06,960 --> 00:42:08,840
did not work Katrina.

535
00:42:08,840 --> 00:42:12,280
What what didn't work

536
00:42:12,280 --> 00:42:14,680
as not you guys have to type s

537
00:42:14,720 --> 00:42:24,920
out like this.

538
00:42:24,920 --> 00:42:28,320
How many of you have not watched the video
on basic

539
00:42:28,320 --> 00:42:34,040
overview of intelligent?

540
00:42:34,040 --> 00:42:36,840
Because I have showed these things
already in that video.

541
00:42:36,840 --> 00:42:38,120
Then that's why I showed them.

542
00:42:38,120 --> 00:42:40,080
Because I don't.

543
00:42:40,080 --> 00:42:46,560
I don't want to waste the time of class.

544
00:42:46,560 --> 00:42:50,720
How to create a package, how to create
a class, how to create a project,

545
00:42:50,840 --> 00:42:55,640
how to find out these shortcuts,
how to write these s out.

546
00:42:55,680 --> 00:43:05,120
I showed everything.

547
00:43:05,120 --> 00:43:09,120
All right, can you guys tell me
which constructor will be called

548
00:43:09,120 --> 00:43:12,400
if I pass a string and an integer,

549
00:43:13,760 --> 00:43:15,400
The number one, two, three,

550
00:43:15,400 --> 00:43:23,640
or four.

551
00:43:23,640 --> 00:43:27,840
So in intelligent, you can right click
and then click on run test or you can

552
00:43:27,840 --> 00:43:29,240
click on this green button

553
00:43:30,320 --> 00:43:32,160
and then you can run or

554
00:43:32,160 --> 00:43:40,280
click on run test multiclass from here.

555
00:43:40,280 --> 00:43:44,920
And then you should see the output
in your console.

556
00:43:45,160 --> 00:43:46,960
Okay.

557
00:43:46,960 --> 00:43:54,600
And if I change this to

558
00:43:54,720 --> 00:44:01,920
like this, so still I'm passing an integer

559
00:44:02,000 --> 00:44:07,720
and and a string,

560
00:44:07,720 --> 00:44:11,040
but this time Java will execute

561
00:44:12,600 --> 00:44:15,280
the constructor

562
00:44:15,280 --> 00:44:24,880
number three.

563
00:44:24,880 --> 00:44:29,120
And if I don't pass anything,

564
00:44:29,120 --> 00:44:33,320
then the constructor number one
will be executed.

565
00:44:33,320 --> 00:44:37,840
And if I pass three parameters, first,
add a string second, then beta

566
00:44:38,840 --> 00:44:41,920
and third as double, then the fourth one,

567
00:44:41,920 --> 00:45:09,480
which we will be called by mistake.

568
00:45:09,480 --> 00:45:11,760
By the way, your instructor for Hal,

569
00:45:12,760 --> 00:45:16,960
he is not feeling well.

570
00:45:18,680 --> 00:45:21,600
He is having severe flu cough

571
00:45:22,080 --> 00:45:26,160
and some other issues
and he might be hospitalized tomorrow.

572
00:45:26,600 --> 00:45:29,160
So you guys might want to ask
how he's viewed,

573
00:45:29,520 --> 00:45:33,680
how he feels once he is back.

574
00:45:33,680 --> 00:45:35,080
New name.

575
00:45:35,080 --> 00:45:37,760
So you see you have made the same mistake.

576
00:45:38,200 --> 00:45:40,320
So this is what I was saying.

577
00:45:40,320 --> 00:45:44,280
Can you guys tell me what is the mistake?

578
00:45:44,280 --> 00:45:46,960
Well, why? And he is getting an error.

579
00:45:48,440 --> 00:45:52,240
He he typed the name and then call and is

580
00:45:55,040 --> 00:45:57,880
so you you don't have to type this name.

581
00:45:57,880 --> 00:45:59,800
And then Colon

582
00:46:01,040 --> 00:46:06,440
I still will do the review multiple.

583
00:46:06,440 --> 00:46:10,920
So you guys only type string double course
and then don't type

584
00:46:10,920 --> 00:46:15,200
this name and then column
if just a suggestion from the invalidate

585
00:46:15,200 --> 00:46:22,520
that the string will be copied
to this name variable.

586
00:46:22,520 --> 00:46:25,800
Is there anyone else
who is facing any issues

587
00:46:33,960 --> 00:46:34,920
if this string

588
00:46:34,920 --> 00:46:37,720
and so are you guys done typing the score

589
00:46:39,440 --> 00:46:42,360
then can I close these files?

590
00:46:42,360 --> 00:46:59,800
Just this string and save?

591
00:46:59,800 --> 00:47:00,480
Give me.

592
00:47:00,480 --> 00:47:08,800
You have also done the same mistake.

593
00:47:08,800 --> 00:47:11,800
You don't have to type that name
dot column

594
00:47:14,480 --> 00:47:18,120
and not worry Maria.

595
00:47:18,280 --> 00:47:20,240
I am immune to you guys.

596
00:47:20,240 --> 00:47:23,280
I will always be here is there is no place

597
00:47:23,280 --> 00:47:45,880
to go.

598
00:47:45,880 --> 00:47:47,120
Well, I had a problem.

599
00:47:47,120 --> 00:47:51,240
It turns out by misspelled
the name of my constructor only drove

600
00:47:51,240 --> 00:47:57,200
me insane for 5 minutes. And

601
00:47:59,400 --> 00:48:05,040
so Dennis, you do not have a main method.

602
00:48:05,040 --> 00:48:07,360
Come on, man,

603
00:48:07,360 --> 00:48:07,960
I'm in this.

604
00:48:07,960 --> 00:48:11,840
Is this the very first thing
that we taught you

605
00:48:11,840 --> 00:48:17,760
that you guys need the main?

606
00:48:17,760 --> 00:48:20,520
Please don't get sick
and don't get sick of us. Do

607
00:48:41,360 --> 00:48:45,320
multi class guns Demo one related problem.

608
00:48:45,320 --> 00:48:49,160
So, Katrina,
you are creating a class inside a class

609
00:48:51,560 --> 00:48:54,720
line three and line four

610
00:49:00,080 --> 00:49:01,200
import

611
00:49:01,200 --> 00:49:05,120
com dot company and or multi class in fine

612
00:49:05,480 --> 00:49:09,040
silver art fine.

613
00:49:09,040 --> 00:49:11,600
You have created

614
00:49:11,600 --> 00:49:14,920
that class in a different package.

615
00:49:15,360 --> 00:49:17,920
So now intelligent is importing

616
00:49:17,920 --> 00:49:25,080
that class from that package.

617
00:49:25,080 --> 00:49:29,640
Are there other issues quickly
if there is if there are too many issues

618
00:49:29,640 --> 00:49:33,560
in this four channel you guys can send
some of the issues in here

619
00:49:35,840 --> 00:49:38,000
how to combine these two classes.

620
00:49:39,120 --> 00:49:40,360
They now you mean how to

621
00:49:40,360 --> 00:49:43,320
display them side by side

622
00:49:45,360 --> 00:49:48,680
or you just need to drag
and drop your file

623
00:49:48,680 --> 00:49:50,160
and then it will show you the option.

624
00:49:50,160 --> 00:49:55,920
So for example, if I my mouse
is not working correctly, actually, if I,

625
00:49:55,920 --> 00:50:02,240
if I drag and move this class in different
places, lady will show me where to.

626
00:50:02,240 --> 00:50:11,040
Where do you want to place that file?

627
00:50:11,040 --> 00:50:12,720
I am not getting a double file.

628
00:50:12,720 --> 00:50:23,240
This is what I am getting now.

629
00:50:23,240 --> 00:50:25,680
Will you have created a Kotlin project?

630
00:50:25,680 --> 00:50:30,840
And you wrote that code in quarterly
as well in the previous file as well

631
00:50:31,520 --> 00:50:33,960
so make sure you are creating
in Java project.

632
00:50:34,240 --> 00:50:37,880
Not calling because invalidate or multiple

633
00:50:37,880 --> 00:50:42,120
programing languages.

634
00:50:42,120 --> 00:50:47,160
So when you when you say file new
and then project,

635
00:50:47,720 --> 00:50:51,120
make sure you you select this
java from here, this JDK step two

636
00:50:51,120 --> 00:50:54,920
and you don't select this
for clean JVM or anything else.

637
00:50:56,680 --> 00:50:59,000
No, it's not an installation issue.

638
00:50:59,000 --> 00:51:02,000
It's the project.

639
00:51:02,000 --> 00:51:03,960
Yes, you guys can write Python as well.

640
00:51:03,960 --> 00:51:08,080
In the Intelligent, they did a variant of
intelligent in which you can write Python

641
00:51:10,040 --> 00:51:12,040
now will create a new project

642
00:51:12,040 --> 00:51:16,840
and then select Java and make sure
you have the JDK and then you click Next,

643
00:51:17,560 --> 00:51:21,120
create a project from template
command line and then you press notes

644
00:51:21,120 --> 00:51:31,800
and you should see a project.

645
00:51:31,800 --> 00:52:12,760
Are there other issues?

646
00:52:12,760 --> 00:52:15,400
Just give me one moment. This

647
00:52:48,440 --> 00:52:50,520
What do you do with Double Sieve?

648
00:52:50,800 --> 00:52:53,440
We was adding something

649
00:52:57,480 --> 00:53:00,000
so you same as you do in your database

650
00:53:00,280 --> 00:53:03,440
that click on keep operating on that

651
00:53:04,840 --> 00:53:06,600
header of this file

652
00:53:06,600 --> 00:53:10,360
in this title area
and then you can drag and drop your file.

653
00:53:10,360 --> 00:53:12,840
And what do we do with double shift?

654
00:53:12,840 --> 00:53:15,200
So with double shift,
you can search to the intelligent

655
00:53:50,360 --> 00:53:50,960
so medium.

656
00:53:50,960 --> 00:53:52,200
You have done the same thing.

657
00:53:52,200 --> 00:53:55,640
You have imported
the classes from Eclipse.

658
00:53:55,640 --> 00:53:57,160
You have to create a new project.

659
00:53:57,160 --> 00:54:27,440
Otherwise you have to fix all the issues
in your or all of your classes.

660
00:54:27,440 --> 00:54:28,160
Okay.

661
00:54:30,560 --> 00:54:33,440
Let's go back to the notes

662
00:54:34,320 --> 00:54:42,840
of these files.

663
00:54:42,840 --> 00:54:43,240
Okay.

664
00:54:43,320 --> 00:54:46,800
So tell me, guys, what what are
the other things that you remember

665
00:54:46,800 --> 00:55:04,560
about the constructors?

666
00:55:04,560 --> 00:55:09,960
Are we just typing manually name and age
or can you repeat it please?

667
00:55:09,960 --> 00:55:15,120
So right now you are again
the same mistake.

668
00:55:15,120 --> 00:55:17,680
You guys don't have to type
that name and age

669
00:55:24,160 --> 00:55:25,240
before the this keyword.

670
00:55:25,240 --> 00:55:30,320
Can you guys
tell me more about the constructors?

671
00:55:30,320 --> 00:55:33,480
Like for example,
can I have the return type or not?

672
00:55:33,680 --> 00:55:36,360
When the constructor

673
00:55:40,640 --> 00:55:44,000
who we have
two constructors are default constructor

674
00:55:44,000 --> 00:55:48,120
and the parameterized constructor
must be of the same name as of class.

675
00:55:48,120 --> 00:55:57,880
So these are some of the rules.

676
00:55:57,880 --> 00:55:59,400
Constructors have

677
00:56:01,320 --> 00:56:04,560
the same name

678
00:56:05,160 --> 00:56:06,760
as the

679
00:56:07,600 --> 00:56:09,160
class name

680
00:56:25,720 --> 00:56:29,560
and then constructors

681
00:56:43,320 --> 00:56:45,080
don't have

682
00:56:46,920 --> 00:56:49,320
a rewritten types

683
00:56:49,320 --> 00:56:51,560
not even required

684
00:56:54,040 --> 00:56:55,120
by constructor.

685
00:56:55,120 --> 00:56:57,000
Non argument and parameters.

686
00:56:57,000 --> 00:57:00,440
If constructor does not have parameter,
it means before constructor.

687
00:57:00,440 --> 00:57:02,880
No, it means that the zero argument
constructor

688
00:57:04,120 --> 00:57:07,560
you are using constructor
to only slightly data series.

689
00:57:07,560 --> 00:57:10,640
Yes, that is correct.

690
00:57:10,640 --> 00:57:12,040
Use of code is executed.

691
00:57:12,040 --> 00:57:14,040
Really? Yes.

692
00:57:14,400 --> 00:57:16,440
How? If I have multiple

693
00:57:16,440 --> 00:57:19,400
constructors in a class

694
00:57:20,280 --> 00:57:22,480
and if I am doing something

695
00:57:22,600 --> 00:57:25,600
similar in all the constructors,

696
00:57:26,920 --> 00:57:29,040
can I do something to remove

697
00:57:29,040 --> 00:57:34,320
the code duplication or maybe reuse
some code from one instructor

698
00:57:34,320 --> 00:57:38,400
inside the other instructor?

699
00:57:38,400 --> 00:57:39,240
How can I do that?

700
00:57:39,240 --> 00:57:48,760
Guys, this scalar drive,

701
00:57:48,760 --> 00:57:52,680
we can use this

702
00:57:58,080 --> 00:58:03,600
this user with

703
00:58:06,000 --> 00:58:07,320
this is

704
00:58:11,400 --> 00:58:13,000
so in work.

705
00:58:13,000 --> 00:58:13,440
By the way.

706
00:58:13,440 --> 00:58:16,720
It is also called
invoking the constructors.

707
00:58:16,800 --> 00:58:19,440
I can just another term. This to invoke

708
00:58:20,520 --> 00:58:22,480
the other

709
00:58:22,760 --> 00:58:23,440
things.

710
00:58:24,000 --> 00:58:25,680
Characters

711
00:58:25,960 --> 00:58:28,640
of the same class.

712
00:58:28,640 --> 00:58:29,160
Yeah.

713
00:58:30,720 --> 00:58:32,800
And there was one more

714
00:58:32,800 --> 00:58:36,360
use of the this keyword

715
00:58:36,600 --> 00:58:41,400
then you guys tell me that
and that as well.

716
00:58:41,400 --> 00:58:45,480
So now is going to we can not have
an example of default constructor.

717
00:58:45,920 --> 00:58:50,960
It is automatically added by a compiler
and it is hidden from the programmers.

718
00:58:50,960 --> 00:58:53,000
We don't see that.

719
00:58:53,280 --> 00:58:55,800
It's just what if we don't create one?

720
00:58:55,800 --> 00:58:56,520
It is created

721
00:58:56,520 --> 00:59:00,840
automatically injected automatically
and therefore called automatically.

722
00:59:01,440 --> 00:59:04,240
What is the other use of this keyword

723
00:59:07,400 --> 00:59:08,360
To differentiate

724
00:59:08,360 --> 00:59:12,480
between the instance variables
and the constructor variables?

725
00:59:14,000 --> 00:59:16,240
Can I distinguish between

726
00:59:16,240 --> 00:59:19,200
local variables of a method as well?

727
00:59:19,200 --> 00:59:20,200
Mohammad

728
00:59:25,600 --> 00:59:29,080
Can we invoke constructor
from another class? Yes.

729
00:59:29,080 --> 00:59:31,240
By creating the object,
this is what we do.

730
00:59:31,240 --> 00:59:35,400
For one, this is how we have been
invoking the constructors

731
00:59:38,760 --> 00:59:40,360
and when we write new

732
00:59:40,360 --> 00:59:43,480
and the name of the class
and then parentheses, this is what we are.

733
00:59:44,080 --> 00:59:46,160
This is what we were doing.

734
00:59:46,160 --> 00:59:48,120
We were in looking at constructor.

735
00:59:48,120 --> 00:59:50,080
This used to get instance.

736
00:59:50,080 --> 00:59:53,000
This keyword can be used
inside the constructor, so

737
00:59:59,520 --> 01:00:06,480
this can be,

738
01:00:06,480 --> 01:00:10,440
this can be used to

739
01:00:14,560 --> 01:00:17,080
differentiate

740
01:00:18,640 --> 01:00:21,400
local and

741
01:00:22,680 --> 01:00:24,840
instance

742
01:00:27,000 --> 01:00:27,840
variables.

743
01:00:27,840 --> 01:00:32,920
So these local variables,
they can be of a constructive

744
01:00:33,480 --> 01:00:37,200
and they can be of a method.

745
01:00:37,200 --> 01:00:37,920
All right.

746
01:00:37,920 --> 01:00:41,400
Now let's quickly solve the homeworks.

747
01:00:41,840 --> 01:00:44,800
So we solve the first two homework right?

748
01:00:44,800 --> 01:00:46,360
First, what tasks

749
01:00:49,360 --> 01:00:56,960
I like.

750
01:00:56,960 --> 01:01:00,080
Can you guys send me the

751
01:01:01,720 --> 01:01:02,880
description,

752
01:01:02,880 --> 01:01:05,920
the question statement for question

753
01:01:05,920 --> 01:01:09,720
number three? Yes.

754
01:01:10,000 --> 01:01:17,280
Just give me one moment.

755
01:01:17,280 --> 01:01:17,760
Okay.

756
01:01:18,680 --> 01:01:21,360
I hope you guys can see it now

757
01:01:26,360 --> 01:01:27,040
of eight

758
01:01:27,040 --> 01:01:33,920
Java class that have four constructors.

759
01:01:33,920 --> 01:01:37,680
And I close this
because I will be sharing this business

760
01:01:37,720 --> 01:01:42,280
with you.

761
01:01:42,280 --> 01:01:43,920
Yes, I sure we can do that.

762
01:01:43,920 --> 01:01:57,440
Remind me if I don't.

763
01:01:57,440 --> 01:01:58,440
You get concerned.

764
01:01:58,440 --> 01:02:03,640
All you can do, you can always send me
a feedback and we can discuss in a class.

765
01:02:03,880 --> 01:02:06,880
If majority is majority master, we can

766
01:02:06,880 --> 01:02:21,240
do there.

767
01:02:21,240 --> 01:02:23,080
Okay. So

768
01:02:33,800 --> 01:02:36,800
yeah, sure, we will be writing these notes

769
01:02:37,600 --> 01:02:45,200
in the start of every class from now on.

770
01:02:45,200 --> 01:02:50,280
So right in Java class
that have four constructors

771
01:02:50,600 --> 01:02:53,400
with four different access levels

772
01:02:53,960 --> 01:02:57,880
of constructor,
private public default protected

773
01:02:58,560 --> 01:03:02,080
and create for object of this class

774
01:03:02,400 --> 01:03:04,440
one inside the same class

775
01:03:05,960 --> 01:03:08,160
two from outside the class

776
01:03:10,080 --> 01:03:12,360
three from different class inside

777
01:03:12,360 --> 01:03:15,240
different package and observe the results.

778
01:03:15,600 --> 01:03:19,160
Okay, so

779
01:03:19,160 --> 01:03:21,600
let me quickly create

780
01:03:21,600 --> 01:03:31,200
a private constructor.

781
01:03:31,200 --> 01:03:34,640
Okay, let me call it one

782
01:03:37,840 --> 01:03:38,760
then.

783
01:03:38,800 --> 01:03:43,080
What is the next level of access

784
01:03:43,080 --> 01:03:45,120
after private

785
01:03:52,000 --> 01:03:53,600
if the default one.

786
01:03:53,600 --> 01:03:56,440
Okay, not not known or public

787
01:03:58,560 --> 01:03:59,520
and well, why?

788
01:03:59,520 --> 01:04:01,760
I'm getting another race

789
01:04:03,120 --> 01:04:04,400
are not protected.

790
01:04:04,400 --> 01:04:07,920
Comes after the default one.

791
01:04:07,920 --> 01:04:10,320
And today
we will learn about the protected

792
01:04:10,320 --> 01:04:11,120
as the

793
01:04:15,440 --> 01:04:16,880
duplication default

794
01:04:16,880 --> 01:04:20,800
needs to be first
default are not need to be first.

795
01:04:20,800 --> 01:04:24,720
It can be anywhere
but most restricted is private.

796
01:04:25,440 --> 01:04:28,320
Then we have default, then protected,

797
01:04:28,480 --> 01:04:36,040
and then public.

798
01:04:36,040 --> 01:04:39,920
Okay, I can I can pass any argument

799
01:04:41,040 --> 01:04:41,800
for their java.

800
01:04:41,800 --> 01:04:49,480
Then allow me multiple constructors.

801
01:04:49,480 --> 01:04:52,760
Then we have the

802
01:04:52,760 --> 01:04:54,360
affected one

803
01:04:54,720 --> 01:04:57,080
next class in period in here

804
01:05:00,840 --> 01:05:03,360
and then the

805
01:05:03,920 --> 01:05:05,520
public one

806
01:05:07,040 --> 01:05:09,360
works fast

807
01:05:10,760 --> 01:05:12,960
and double with me.

808
01:05:12,960 --> 01:05:13,560
Okay.

809
01:05:13,800 --> 01:05:18,600
So this is how I can create
for constructors with the different access

810
01:05:18,600 --> 01:05:21,440
levels.

811
01:05:21,440 --> 01:05:27,760
Now as per question, what we have to do,
we have to create

812
01:05:28,880 --> 01:05:31,120
the objects

813
01:05:31,120 --> 01:05:33,920
using all of these for constructors

814
01:05:34,440 --> 01:05:37,200
first inside this same class

815
01:05:37,200 --> 01:05:39,840
and we have to observe,
observe the result.

816
01:05:39,840 --> 01:05:43,000
So let me try to create an object

817
01:05:45,040 --> 01:05:46,200
to be

818
01:05:47,160 --> 01:05:47,960
okay.

819
01:05:47,960 --> 01:05:50,640
I am able to create an object for

820
01:05:50,640 --> 01:05:52,720
by using this first constructor.

821
01:05:53,880 --> 01:05:59,880
Then let me try this second one. The.

822
01:06:00,480 --> 01:06:03,360
For the second one I have to pass a string

823
01:06:04,520 --> 01:06:08,440
name for the third one I have to pass.

824
01:06:08,760 --> 01:06:09,760
And indeed here.

825
01:06:10,880 --> 01:06:13,400
And for the fourth one

826
01:06:13,400 --> 01:06:16,960
I have to pass a double

827
01:06:17,520 --> 01:06:19,840
so I don't get any issues.

828
01:06:19,840 --> 01:06:27,960
Okay, then I am doing this.

829
01:06:27,960 --> 01:06:31,440
Inside this same class
I am able to create constructor

830
01:06:32,520 --> 01:06:34,720
for the objects

831
01:06:35,600 --> 01:06:41,400
using any of the constructors.

832
01:06:41,400 --> 01:06:43,920
Now let's try to do the same,

833
01:06:44,840 --> 01:06:47,520
but this time in a different class.

834
01:06:49,200 --> 01:06:52,400
So let's copy this code

835
01:07:03,520 --> 01:07:05,800
and then when you demand method

836
01:07:05,800 --> 01:07:19,200
and then let me open Firebase,
now we get an error.

837
01:07:20,040 --> 01:07:44,880
Can you guys tell me why
we are getting an error?

838
01:07:44,880 --> 01:07:45,240
Right?

839
01:07:45,240 --> 01:07:53,040
It will be accessed only within the class.

840
01:07:53,040 --> 01:07:53,440
Yeah.

841
01:07:53,440 --> 01:07:58,400
So the access modifier as it works

842
01:07:58,400 --> 01:08:00,840
with the features and the method

843
01:08:02,280 --> 01:08:05,960
is the same with the constructors as well.

844
01:08:07,480 --> 01:08:09,840
So because this constructor

845
01:08:10,760 --> 01:08:12,960
is a private constructor,

846
01:08:14,000 --> 01:08:16,720
I cannot create an object

847
01:08:16,720 --> 01:08:20,360
by using this constructor
in a different class.

848
01:08:21,160 --> 01:08:22,520
And by the way, this was,

849
01:08:24,280 --> 01:08:26,240
this was a question.

850
01:08:26,240 --> 01:08:29,320
So I gave an interview

851
01:08:29,880 --> 01:08:33,480
and this was a question inside
that interview,

852
01:08:33,520 --> 01:08:35,560
the question was

853
01:08:36,920 --> 01:08:38,720
Make this class.

854
01:08:38,720 --> 01:08:42,080
So there was a constructor
and there was no access modified

855
01:08:42,080 --> 01:08:45,960
with that constructor,
and the question was modified.

856
01:08:45,960 --> 01:08:49,720
This class
so that it cannot be instantiated

857
01:08:50,400 --> 01:08:53,440
from a different class.

858
01:08:53,440 --> 01:08:56,920
So we make the constructor private

859
01:08:57,600 --> 01:09:02,520
and then no one will be able
to instantiate that class

860
01:09:03,000 --> 01:09:08,080
from another class.

861
01:09:08,080 --> 01:09:31,720
Is it frozen for everyone?

862
01:09:31,720 --> 01:09:36,640
Okay, now, so right now
we are inside the same package

863
01:09:37,560 --> 01:09:40,560
at the inside of the same package.

864
01:09:40,560 --> 01:09:42,360
The You were a recruiter?

865
01:09:42,360 --> 01:09:44,200
No, I was not a recruiter.

866
01:09:44,200 --> 01:09:49,880
I was the candidate.

867
01:09:49,880 --> 01:09:53,360
So let me create a class

868
01:09:53,640 --> 01:09:57,040
outside of this package, mega

869
01:09:57,440 --> 01:10:00,000
outside of this is

870
01:10:08,240 --> 01:10:11,120
and let's try to copy

871
01:10:12,080 --> 01:10:14,480
all the because

872
01:10:15,760 --> 01:10:16,920
from here

873
01:10:17,240 --> 01:10:20,440
oops the main method first

874
01:10:25,640 --> 01:10:29,080
actually let me do this check me print

875
01:10:31,680 --> 01:10:33,120
by make

876
01:10:36,400 --> 01:10:38,760
the default

877
01:10:49,920 --> 01:10:52,200
and then

878
01:10:59,480 --> 01:11:01,400
I have been already hired

879
01:11:01,400 --> 01:11:14,040
by more than 200 companies.

880
01:11:14,040 --> 01:11:18,600
So let me try to.

881
01:11:18,600 --> 01:11:25,160
Oh, by the way,
I forgot to take the screenshots.

882
01:11:25,160 --> 01:11:28,040
Let me check if she had shared

883
01:11:47,160 --> 01:11:48,120
only the email

884
01:11:48,120 --> 01:11:56,680
from the company.

885
01:11:56,680 --> 01:12:10,120
So at least we have one screenshot.

886
01:12:10,120 --> 01:12:21,600
But like

887
01:12:23,360 --> 01:12:26,680
I say, you can
you can have that in your repository.

888
01:12:27,040 --> 01:12:27,640
By the way.

889
01:12:27,640 --> 01:12:30,440
Now I guess it was you

890
01:12:30,960 --> 01:12:34,480
you were deleting the file from the

891
01:12:34,680 --> 01:12:37,040
from that shared repository

892
01:12:39,520 --> 01:12:40,960
from batch ten.

893
01:12:40,960 --> 01:12:42,560
So they,

894
01:12:42,560 --> 01:12:46,920
they did, they were very confused why
someone is trying to delete that files.

895
01:12:46,920 --> 01:12:51,000
I think you tried to edit those files
or tried to do something like that.

896
01:12:51,680 --> 01:12:56,320
So guys, make sure you don't delete the
that are the questions on the screenshot

897
01:12:57,040 --> 01:12:59,640
which are already there
if you want to modify something

898
01:12:59,640 --> 01:13:02,680
or if you want to add more force for you,

899
01:13:03,120 --> 01:13:07,520
you can create a copy of that file
and then you can modify

900
01:13:07,760 --> 01:13:13,400
that file.

901
01:13:13,400 --> 01:13:14,760
So you see Oops

902
01:13:33,680 --> 01:13:34,480
is wrong.

903
01:13:34,480 --> 01:13:36,520
But 11

904
01:13:40,040 --> 01:13:40,480
always.

905
01:13:40,480 --> 01:13:43,320
This keeps trying to clear things
from interview prep log

906
01:13:44,520 --> 01:13:45,160
to see.

907
01:13:45,160 --> 01:13:47,280
Now I barely

908
01:14:02,640 --> 01:14:03,000
so let's

909
01:14:03,000 --> 01:14:06,760
please make sure you don't delete the

910
01:14:06,760 --> 01:14:23,280
existing data.

911
01:14:23,280 --> 01:14:24,720
No I don't mean GitHub.

912
01:14:24,720 --> 01:14:31,160
I mean the file.

913
01:14:31,160 --> 01:14:35,280
I mean you will not study yourself
and you will not let others to study.

914
01:14:35,280 --> 01:14:36,080
Right.

915
01:14:36,520 --> 01:14:38,560
Okay. So

916
01:14:41,960 --> 01:14:52,920
if it wasn't an interview question.

917
01:14:52,920 --> 01:14:57,960
So guys, it right now
I am in a different package

918
01:14:58,680 --> 01:15:01,840
and yes, I am unable to access

919
01:15:01,840 --> 01:15:06,720
the private constructor.

920
01:15:06,720 --> 01:15:08,800
So now you guys will

921
01:15:08,800 --> 01:15:11,080
oops see the difference up.

922
01:15:11,520 --> 01:15:15,440
I am also unable to access

923
01:15:16,800 --> 01:15:19,720
this default constructor in here.

924
01:15:20,440 --> 01:15:23,480
Okay.

925
01:15:23,480 --> 01:15:28,160
So if I am inside a different package,

926
01:15:28,840 --> 01:15:33,000
I can not access the private
plus I cannot access

927
01:15:34,240 --> 01:15:35,400
the default ones,

928
01:15:36,720 --> 01:15:40,560
but I can still access the protected one

929
01:15:41,240 --> 01:15:43,480
and then the public one.

930
01:15:44,360 --> 01:15:53,720
Okay, so

931
01:15:54,680 --> 01:16:01,040
this is the difference.

932
01:16:01,040 --> 01:16:03,360
So it's a little different from Eclipse.

933
01:16:03,800 --> 01:16:04,920
Yes. Yes.

934
01:16:04,920 --> 01:16:07,400
If you're seeing different from the views.

935
01:16:07,400 --> 01:16:11,320
You mean the way we are unable to access
some of the files?

936
01:16:11,840 --> 01:16:35,120
It's not because of intelligent
Java, Right.

937
01:16:35,120 --> 01:16:37,560
Is there the task? Two and three?

938
01:16:37,560 --> 01:16:58,800
Should we move to the task for.

939
01:16:58,800 --> 01:17:02,280
But I just put all the questions in
same page to print them

940
01:17:02,280 --> 01:17:07,320
and I didn't realize it until I printed
but open Google docs and make my copy.

941
01:17:07,880 --> 01:17:11,800
It's fine.

942
01:17:11,800 --> 01:17:14,640
Can you guys send me the question
number four?

943
01:17:15,720 --> 01:17:17,160
Could you please post notes?

944
01:17:17,160 --> 01:17:18,720
I checked for some.

945
01:17:18,720 --> 01:17:20,440
I couldn't find it.

946
01:17:20,440 --> 01:17:22,760
You couldn't find because I didn't post

947
01:17:24,280 --> 01:17:26,640
right
program that have started constructors.

948
01:17:27,000 --> 01:17:29,400
So sometimes I have to be north, slid

949
01:17:30,240 --> 01:17:33,040
on the canvas, I publish on the canvas.

950
01:17:33,040 --> 01:17:36,920
Sometimes I push
them, will be on the from now on

951
01:17:37,600 --> 01:17:41,400
I will be pushing everything to the gate
hub, so nodes and everything will be

952
01:17:41,400 --> 01:17:45,920
pushed to the gate and you guys can clone
these projects on your intelligence

953
01:17:46,680 --> 01:17:49,840
and you can quickly get an update from the

954
01:17:51,240 --> 01:17:54,120
variety program
that have static constructor

955
01:17:54,120 --> 01:17:57,680
and observe the results.

956
01:17:57,680 --> 01:18:03,480
So why did you create package for our task
if it's good for organization?

957
01:18:03,720 --> 01:18:08,880
So if your task requires multiple files,
you guys can create a sub package

958
01:18:08,880 --> 01:18:11,640
inside another package for further

959
01:18:13,800 --> 01:18:22,320
organizing your code.

960
01:18:22,320 --> 01:18:25,480
Let me create a task for

961
01:18:26,600 --> 01:18:28,560
constructor

962
01:18:28,560 --> 01:18:31,560
and then let me try to write code

963
01:18:32,840 --> 01:18:33,920
parity with that.

964
01:18:33,920 --> 01:18:34,560
Okay.

965
01:18:34,600 --> 01:18:37,240
So the moment I did static,
I get an error.

966
01:18:37,240 --> 01:18:39,400
The modifier static is not allowed.

967
01:18:39,720 --> 01:18:44,080
No. We need to get back to intelligent
install for intelligent.

968
01:18:44,080 --> 01:18:48,240
No, you guys don't need the mutable has
nothing to do with eclipse or intelligent.

969
01:18:49,000 --> 01:18:52,960
You can push anything from any project
on your computer

970
01:18:52,960 --> 01:18:57,000
if that folder if you initialize
that folder as the get repository,

971
01:18:58,800 --> 01:19:01,120
if talk directly
to inherit your makeup or something,

972
01:19:01,120 --> 01:19:13,080
you can.

973
01:19:13,080 --> 01:19:13,800
Okay.

974
01:19:13,800 --> 01:19:16,480
So this is a non access modifier

975
01:19:16,480 --> 01:19:20,160
and none of the non access
modifiers allowed in here.

976
01:19:21,480 --> 01:19:23,520
So the first output, let's have a break

977
01:19:24,360 --> 01:19:28,080
and if you guys are having any issues
with the intelligence.

978
01:19:28,080 --> 01:19:29,520
So we still have 5 minutes,

979
01:19:29,520 --> 01:19:33,000
you guys can ask me those
who want to leave for a longer break.

980
01:19:33,000 --> 01:19:34,320
You can leave.

981
01:19:34,320 --> 01:19:36,000
I will not be showing anything.

982
01:19:36,000 --> 01:19:38,920
And after the break,
we will start with the new topic.

983
01:19:38,920 --> 01:19:41,440
From now on,
we are going to be using Intel.

984
01:19:41,720 --> 01:19:46,600
Yes, Sebastian,
and depends on the instructor.

985
01:19:46,600 --> 01:19:50,320
Some of the instructors
might be using different ideas

986
01:19:51,320 --> 01:19:56,280
or so for selenium

987
01:19:56,280 --> 01:20:01,040
cucumber test and you guys will be using
intelligent clips for that skill.

988
01:20:01,040 --> 01:20:02,640
You will be using something different.

989
01:20:02,640 --> 01:20:04,960
API is back to or eclipse.

990
01:20:05,400 --> 01:20:09,600
Yes, most of the time
it would be intelligent.

991
01:20:09,600 --> 01:20:11,880
I think I shared it over there.

992
01:20:11,880 --> 01:20:15,000
The interview questions here.

993
01:20:15,080 --> 01:20:16,160
Mohammad

994
01:20:17,040 --> 01:20:19,320
Aisha has the link for that repository

995
01:20:19,320 --> 01:20:23,160
so you can ask her for coding
when we are coming back.

996
01:20:23,520 --> 01:20:27,160
We are coming back on it 40

997
01:20:33,960 --> 01:20:35,400
No questions.

998
01:20:35,400 --> 01:20:38,440
You guys want me to have some rest

999
01:20:38,440 --> 01:20:40,440
squared? Thank you.

1000
01:20:40,440 --> 01:20:42,160
No issues in the intelligent.

1001
01:20:42,160 --> 01:20:42,800
All right, perfect.

1002
01:20:42,800 --> 01:20:45,600
Remind me about recording

1003
01:20:47,880 --> 01:20:49,680
once we get back

1004
01:20:51,160 --> 01:21:00,320
to, we start recording.

1005
01:21:00,320 --> 01:21:03,400
So can I close this and this task for

1006
01:21:03,400 --> 01:21:09,600
and task three files.

1007
01:21:09,600 --> 01:21:09,880
Great.

1008
01:21:09,880 --> 01:21:13,040
Maryam, to try to share
these kind of resources with each other.

1009
01:21:13,040 --> 01:21:23,400
Guys.

1010
01:21:23,400 --> 01:21:24,400
Alright, so

1011
01:21:33,080 --> 01:21:35,640
today we will discuss about inheritance.

1012
01:21:36,120 --> 01:21:38,800
Can you just tell me
what is inheritance in your life

1013
01:22:01,600 --> 01:22:03,640
when your father passed to you?

1014
01:22:03,680 --> 01:22:06,520
About only the wealth.

1015
01:22:06,520 --> 01:22:08,560
When you get something from a relative

1016
01:22:09,720 --> 01:22:11,320
parent's

1017
01:22:12,480 --> 01:22:15,360
is genes to all the habits

1018
01:22:15,880 --> 01:22:18,960
or not all the habits.

1019
01:22:18,960 --> 01:22:21,240
I mean most of the habits.

1020
01:22:21,240 --> 01:22:24,280
And then skin color, eye color,

1021
01:22:24,280 --> 01:22:31,840
hair color,

1022
01:22:31,840 --> 01:22:35,520
like we getting our genes
or anything comes from our elders

1023
01:22:39,840 --> 01:22:45,800
and so classes, they can also inheritance,

1024
01:22:46,680 --> 01:22:49,920
they can also do the inheritance,
they can also have parents.

1025
01:22:50,120 --> 01:22:52,440
They can also have jars.

1026
01:22:52,440 --> 01:22:55,160
So can you guys
guess what will what will happen

1027
01:22:56,040 --> 01:22:59,760
if there is a parent class
and there is a child class?

1028
01:23:00,480 --> 01:23:03,200
And if we do the inheritance

1029
01:23:03,200 --> 01:23:07,360
with those classes,

1030
01:23:07,360 --> 01:23:11,160
combine all properties to one main class.

1031
01:23:12,640 --> 01:23:13,960
Okay,

1032
01:23:14,880 --> 01:23:18,960
same behavior inherit matter

1033
01:23:20,080 --> 01:23:20,800
only matter.

1034
01:23:20,800 --> 01:23:27,000
The assignment.

1035
01:23:27,000 --> 01:23:31,440
When a class gives an output,
that output can be used

1036
01:23:31,440 --> 01:23:36,440
for another block of or are not know

1037
01:23:36,480 --> 01:23:39,800
Muhammad, This is not correct.

1038
01:23:39,800 --> 01:23:43,680
One class
and other ones that use the word extend.

1039
01:23:44,120 --> 01:23:45,320
Yes, yes.

1040
01:23:45,320 --> 01:23:48,600
The variables as well.

1041
01:23:48,800 --> 01:23:52,720
It's a mechanism in Java
in which we object acquired

1042
01:23:52,720 --> 01:23:58,080
all properties of the parent
object are not object class.

1043
01:23:58,080 --> 01:24:00,960
So if you replace the object

1044
01:24:00,960 --> 01:24:05,120
keyword with the class, your your
your definition is almost perfect.

1045
01:24:05,520 --> 01:24:10,160
New classes build up on existing classes
with similar properties and behavior

1046
01:24:11,560 --> 01:24:14,040
when object acquires all the properties.

1047
01:24:14,200 --> 01:24:30,600
So let me show you
with a very simple class.

1048
01:24:30,600 --> 01:24:34,680
Can you guys tell me,

1049
01:24:34,680 --> 01:24:38,600
can you guys tell me what is common
between a cat and a dog?

1050
01:24:39,200 --> 01:24:42,360
The common behaviors?

1051
01:24:42,360 --> 01:24:47,040
And is there anyone from a bio background
who can maybe tell us

1052
01:24:47,480 --> 01:24:50,800
if if there is something common between

1053
01:24:51,440 --> 01:24:55,080
not I think there is something common
between a cat and a lion, right?

1054
01:24:56,240 --> 01:24:58,040
Biologically

1055
01:25:00,320 --> 01:25:05,080
species,

1056
01:25:05,080 --> 01:25:08,840
they are mammals.

1057
01:25:08,840 --> 01:25:10,160
They are both animals.

1058
01:25:10,160 --> 01:25:13,440
Okay, let's keep it simple. Let's create

1059
01:25:13,440 --> 01:25:15,040
and okay,

1060
01:25:15,040 --> 01:25:19,800
so first let me create a class.

1061
01:25:19,800 --> 01:25:24,600
So tell me, guys,
some of the attributes of the via

1062
01:25:24,720 --> 01:25:27,440
the famous attributes of spring name

1063
01:25:29,760 --> 01:25:32,080
are Spring breed.

1064
01:25:33,560 --> 01:25:35,320
No cow. Yes, we can.

1065
01:25:35,320 --> 01:25:42,800
We can have a go as well.

1066
01:25:42,800 --> 01:25:45,240
So now you are
all of you are behind your guitar.

1067
01:25:45,720 --> 01:25:49,080
And that's why she disappeared.

1068
01:25:49,080 --> 01:25:56,520
Spring Bella Age

1069
01:26:02,520 --> 01:26:07,240
or GABA.

1070
01:26:08,840 --> 01:26:09,360
Okay.

1071
01:26:09,760 --> 01:26:14,760
And if you let me let me have some methods

1072
01:26:15,000 --> 01:26:17,720
well so avoid

1073
01:26:20,080 --> 01:27:03,760
it. Okay.

1074
01:27:04,040 --> 01:27:08,000
And let me create a dog class.

1075
01:27:08,000 --> 01:27:09,040
Be famous.

1076
01:27:09,040 --> 01:27:14,480
And the example.

1077
01:27:14,480 --> 01:27:16,640
Can you guys tell me

1078
01:27:19,920 --> 01:27:22,360
if I copy

1079
01:27:22,360 --> 01:27:25,280
everything from cat or dog

1080
01:27:28,320 --> 01:27:29,760
so cat can eat?

1081
01:27:29,760 --> 01:27:31,760
Dog can also eat like that.

1082
01:27:31,760 --> 01:27:34,000
Can sleep dog going out of sleep.

1083
01:27:34,000 --> 01:27:36,160
Cat can have a name, name dog can have.

1084
01:27:36,160 --> 01:27:39,200
So all these properties
that I am writing in here,

1085
01:27:40,080 --> 01:27:43,320
they are also present inside a cat, right?

1086
01:27:43,360 --> 01:27:46,560
They can also be present inside a

1087
01:27:47,560 --> 01:27:51,040
or almost all the mammals.

1088
01:27:51,040 --> 01:27:51,840
Right.

1089
01:27:52,040 --> 01:27:56,240
You guys will be seeing that those four
legged animals, you guys will be seeing.

1090
01:27:56,240 --> 01:27:58,800
You guys can have these
same properties, right.

1091
01:27:59,640 --> 01:28:00,200
But can't.

1092
01:28:00,200 --> 01:28:03,360
But yes. So

1093
01:28:03,360 --> 01:28:07,760
in the things in our real life,
the things which belong

1094
01:28:07,760 --> 01:28:11,640
to a specific group or something,
sometimes what happens is that

1095
01:28:13,240 --> 01:28:15,960
there is a lot of code duplication.

1096
01:28:15,960 --> 01:28:17,960
Can you guys see the code duplication?

1097
01:28:17,960 --> 01:28:28,000
So what I can do,
I can put some specific things as well,

1098
01:28:28,000 --> 01:28:33,120
but if I am building a real life
application and I am using

1099
01:28:33,120 --> 01:28:38,760
the object oriented programing,
I can be writing a lot of duplicate code

1100
01:28:45,960 --> 01:28:46,480
like this.

1101
01:28:46,480 --> 01:28:48,640
Right?
What is something specific about Cat?

1102
01:28:48,760 --> 01:28:49,920
Meow, Meow.

1103
01:28:49,920 --> 01:28:52,680
Imagine that could work.

1104
01:28:52,680 --> 01:28:54,480
You guys can write those programs

1105
01:28:54,480 --> 01:28:58,680
maybe in which you in your programs,
they will bark and everything like

1106
01:29:09,280 --> 01:29:10,520
you guys will definitely

1107
01:29:10,520 --> 01:29:17,720
be writing these programs.

1108
01:29:17,720 --> 01:29:18,080
Okay,

1109
01:29:18,960 --> 01:29:23,040
so how many lines of code
is being duplicated in here?

1110
01:29:23,040 --> 01:29:26,040
Guys, about cats Barking is

1111
01:29:31,200 --> 01:29:32,400
how many lines of code

1112
01:29:32,400 --> 01:29:38,600
are being duplicated in here?

1113
01:29:38,600 --> 01:29:43,120
And only two or three.

1114
01:29:43,120 --> 01:29:48,320
So this is one, This is two,
this is three, four, five.

1115
01:29:49,080 --> 01:29:53,480
These methods, let's count it one, six
and then seven so I can see seven.

1116
01:29:53,480 --> 01:30:01,800
But why you guys see only two.

1117
01:30:01,800 --> 01:30:06,440
And and now what you guys can imagine
is that

1118
01:30:07,920 --> 01:30:10,080
if you are trying to

1119
01:30:11,520 --> 01:30:14,440
create another class in the same family,

1120
01:30:14,760 --> 01:30:19,200
maybe a zebra class or a horse class.

1121
01:30:19,840 --> 01:30:22,800
So again, you will be repeating

1122
01:30:22,800 --> 01:30:25,680
this code inside that class.

1123
01:30:25,920 --> 01:30:38,800
Can you guys tell me
how can I avoid this duplication?

1124
01:30:38,800 --> 01:30:41,680
This by using expand

1125
01:30:42,760 --> 01:30:47,400
using method inheritance.

1126
01:30:47,400 --> 01:30:51,040
The the concepts
that you guys already know.

1127
01:30:52,440 --> 01:30:56,640
We cannot use those concepts
in this scenarios.

1128
01:30:57,240 --> 01:31:00,000
Again, to reduce the obligation.

1129
01:31:00,000 --> 01:31:04,440
To reduce this obligation,
we have a new concept

1130
01:31:04,440 --> 01:31:07,800
that is called inheritance
what do we do in inheritance?

1131
01:31:08,400 --> 01:31:11,040
If there are more, then

1132
01:31:11,600 --> 01:31:14,400
if there are multiple classes

1133
01:31:14,400 --> 01:31:18,160
and if they are logic
related to each other,

1134
01:31:19,440 --> 01:31:22,280
and if they are having
a lot of duplicate code,

1135
01:31:23,120 --> 01:31:25,720
we create a parent class.

1136
01:31:25,720 --> 01:31:30,560
We that common
common code inside that class

1137
01:31:31,480 --> 01:31:35,800
and we make these child classes inherit

1138
01:31:37,200 --> 01:31:38,160
from that class.

1139
01:31:38,160 --> 01:31:40,200
So I let me do that.

1140
01:31:40,320 --> 01:31:44,400
So what I can do,
instead of rewriting this code again

1141
01:31:44,400 --> 01:31:48,000
and again, I can create a class,

1142
01:31:49,080 --> 01:31:53,160
I can call it animal.

1143
01:31:53,160 --> 01:31:56,760
And instead of ordering
instead of putting this code

1144
01:31:58,400 --> 01:32:01,800
in here,

1145
01:32:01,800 --> 01:32:04,280
I can loop discord

1146
01:32:05,800 --> 01:32:08,040
inside

1147
01:32:09,680 --> 01:32:20,520
the animal class.

1148
01:32:20,520 --> 01:32:23,240
But we open inside of us.

1149
01:32:23,240 --> 01:32:25,560
All right.
I hope you guys can see the font.

1150
01:32:26,680 --> 01:32:29,560
It is still readable.

1151
01:32:29,560 --> 01:32:30,200
Okay,

1152
01:32:33,760 --> 01:32:36,920
so I will remove this code from this class

1153
01:32:37,920 --> 01:32:39,120
in here.

1154
01:32:39,120 --> 01:32:42,000
And now I get an error.

1155
01:32:42,000 --> 01:32:46,640
Now I get an error
that this name is not defined.

1156
01:32:46,880 --> 01:32:51,120
Okay, Andy, what are you trying to say?

1157
01:32:52,400 --> 01:32:54,320
Well, you just to make your subclass.

1158
01:32:54,320 --> 01:32:58,040
So what we do, we

1159
01:32:58,040 --> 01:33:03,680
check the when we combine the common code,

1160
01:33:03,680 --> 01:33:07,320
then you change to vertical,
then all slides be readable.

1161
01:33:07,440 --> 01:33:09,080
Slides.

1162
01:33:09,080 --> 01:33:12,000
I'm not building slides

1163
01:33:16,320 --> 01:33:18,960
now. Are you still lagging?

1164
01:33:18,960 --> 01:33:21,480
But I have not actually.

1165
01:33:21,480 --> 01:33:23,880
Windows. Shimmin

1166
01:33:24,160 --> 01:33:25,360
means windows.

1167
01:33:25,360 --> 01:33:37,560
Okay, so they are already vertical.

1168
01:33:37,560 --> 01:33:39,640
You are also feeling tired.

1169
01:33:39,640 --> 01:33:45,600
So these until.

1170
01:33:45,600 --> 01:33:47,240
All right. So

1171
01:33:52,040 --> 01:33:52,400
what?

1172
01:33:53,680 --> 01:33:55,920
Again,
we will not be able to see that well,

1173
01:33:56,760 --> 01:33:59,440
but I hope you guys can see it.

1174
01:33:59,520 --> 01:34:02,240
So I have removed
this cat class has only this.

1175
01:34:02,240 --> 01:34:04,440
We all matter. This dog has only bark.

1176
01:34:04,800 --> 01:34:10,880
And then I have placed everything else
inside the animal.

1177
01:34:10,880 --> 01:34:12,360
It's fine.

1178
01:34:12,560 --> 01:34:14,680
I also misspell things.

1179
01:34:14,680 --> 01:34:15,600
Right?

1180
01:34:16,200 --> 01:34:18,680
So I was working on my assignment
for the last

1181
01:34:18,960 --> 01:34:21,120
I guess we are logs

1182
01:34:21,720 --> 01:34:24,040
and then I am teaching a class and

1183
01:34:25,520 --> 01:34:27,400
so now what?

1184
01:34:27,400 --> 01:34:30,080
I can do, I can write here.

1185
01:34:30,280 --> 01:34:33,360
A keyword extends in here

1186
01:34:34,440 --> 01:34:39,360
and I can write the name of the class,

1187
01:34:40,280 --> 01:34:43,400
the name of the parent class in here.

1188
01:34:43,440 --> 01:34:46,680
And you guys will see as soon as I write

1189
01:34:46,680 --> 01:34:51,040
this animal,
that editor from the name is gone.

1190
01:34:51,600 --> 01:34:54,000
Okay, so what is happening right now?

1191
01:34:55,120 --> 01:34:58,080
All the fears from this class

1192
01:34:58,080 --> 01:35:01,920
and all the matters from this class,

1193
01:35:02,600 --> 01:35:04,800
they are behind the scenes.

1194
01:35:05,280 --> 01:35:08,960
They are kind of copied to this cat class.

1195
01:35:10,040 --> 01:35:12,520
Okay. So

1196
01:35:12,520 --> 01:35:15,240
technically they are still there
in the animal class.

1197
01:35:15,240 --> 01:35:18,120
But because of this expense keyword

1198
01:35:19,160 --> 01:35:22,240
and with the help of this

1199
01:35:24,160 --> 01:35:28,680
inheritance, now this cat class can access

1200
01:35:28,960 --> 01:35:32,000
all the things from this animal class.

1201
01:35:32,640 --> 01:35:35,880
So if you have already written
a class, guys,

1202
01:35:36,200 --> 01:35:41,640
and if that class contain
maybe 50 meters, 100 fields,

1203
01:35:42,240 --> 01:35:46,200
and now you want to create a new class
with slight modifications,

1204
01:35:46,800 --> 01:35:50,160
you don't have to rewrite
or copy paste that code.

1205
01:35:50,160 --> 01:35:53,680
But you can do
you can inherit from that class,

1206
01:35:54,360 --> 01:35:57,680
and then you can also add new code to

1207
01:35:57,720 --> 01:36:00,880
to that class so that new class will have

1208
01:36:00,880 --> 01:36:05,400
we will be having all
the features, plus the method

1209
01:36:06,840 --> 01:36:07,600
and then

1210
01:36:07,600 --> 01:36:10,440
the new
code that you guys will be writing.

1211
01:36:10,760 --> 01:36:13,560
So I can also do the same with expense.

1212
01:36:14,800 --> 01:36:17,880
And as soon as I write animal

1213
01:36:18,360 --> 01:36:21,840
now every thing from animal class
is available

1214
01:36:21,880 --> 01:36:25,080
to the dog class as well.

1215
01:36:25,080 --> 01:36:29,120
Just inherited
and can write the code in there. Yes.

1216
01:36:29,120 --> 01:36:29,440
Okay.

1217
01:36:29,640 --> 01:36:37,960
Now I can access all the fields as if
they are declared inside this same class.

1218
01:36:38,080 --> 01:36:40,520
Inside same dog and cat class.

1219
01:36:40,520 --> 01:36:43,920
Okay, So for example, I can write a method

1220
01:36:53,320 --> 01:36:54,760
in here

1221
01:36:57,120 --> 01:36:59,840
with an all in for

1222
01:37:03,080 --> 01:37:06,600
and I can access the name.

1223
01:37:07,920 --> 01:37:12,120
I can access the breed,

1224
01:37:12,120 --> 01:37:14,640
I can access the color,

1225
01:37:15,560 --> 01:37:20,040
I can access the same
as if they are declared

1226
01:37:20,720 --> 01:37:23,480
inside side the same class.

1227
01:37:23,480 --> 01:37:27,360
If as if these fields are declared
inside the same class

1228
01:37:28,480 --> 01:37:30,000
and then

1229
01:37:30,760 --> 01:37:38,280
let okay, then it show us examples.

1230
01:37:38,280 --> 01:37:44,000
So sorry for what is this
that we are doing it right now.

1231
01:37:44,000 --> 01:37:44,720
Okay.

1232
01:37:47,120 --> 01:37:53,960
Got it.

1233
01:37:53,960 --> 01:37:59,040
You guys also had a long day.

1234
01:37:59,040 --> 01:38:02,280
So whenever I teach a new concept,

1235
01:38:02,400 --> 01:38:04,400
first of all, I try to

1236
01:38:06,480 --> 01:38:09,760
write as simple as possible examples

1237
01:38:09,760 --> 01:38:12,240
so that you guys
can understand the concept.

1238
01:38:12,920 --> 01:38:14,280
And then

1239
01:38:14,640 --> 01:38:17,000
for real life example,

1240
01:38:17,000 --> 01:38:22,120
I can always show you real life examples
from JDK of writing, but other examples.

1241
01:38:22,120 --> 01:38:25,800
But first I will always try to write
simple examples just

1242
01:38:26,200 --> 01:38:29,600
just give me some time and I will show you
the real life examples as well.

1243
01:38:29,920 --> 01:38:33,560
This concept is heavily used in

1244
01:38:33,800 --> 01:38:36,440
in all the Java classes
throughout the year.

1245
01:38:36,800 --> 01:38:38,520
Okay. In all of the real life

1246
01:38:40,040 --> 01:38:41,360
programs

1247
01:38:45,360 --> 01:38:49,200
and I
can call this method as well in here.

1248
01:38:49,440 --> 01:38:57,480
Okay, I can call, I can say it

1249
01:38:57,840 --> 01:39:02,760
same as if this method is declared inside
same class.

1250
01:39:02,760 --> 01:39:05,520
Okay. And let me

1251
01:39:05,520 --> 01:39:09,040
so let me close one of these classes.

1252
01:39:09,040 --> 01:39:13,200
How about if we want to add field
only for dog?

1253
01:39:13,560 --> 01:39:15,760
Yes, you can also have that.

1254
01:39:15,760 --> 01:39:19,320
So let's say, for example,
tell me something specific

1255
01:39:19,320 --> 01:39:26,000
about a dog.

1256
01:39:26,000 --> 01:39:28,440
This smell,

1257
01:39:29,520 --> 01:39:32,160
you want to have a a Boolean smell

1258
01:39:33,040 --> 01:39:35,880
inside the dog class.

1259
01:39:35,880 --> 01:39:37,080
Loyal tags.

1260
01:39:37,080 --> 01:39:38,600
I'm not loyal.

1261
01:39:38,920 --> 01:39:41,640
Okay.

1262
01:39:41,640 --> 01:39:45,240
No, I mean,

1263
01:39:45,240 --> 01:39:48,160
I can see
I saw some videos on the Internet.

1264
01:39:48,640 --> 01:39:54,120
They have more attitude than a girlfriend.

1265
01:39:54,120 --> 01:40:00,200
Want you to be loyal.

1266
01:40:00,200 --> 01:40:02,000
The boolean

1267
01:40:02,640 --> 01:40:04,680
loyal is equal to Crowe.

1268
01:40:05,080 --> 01:40:06,560
Like yes.

1269
01:40:06,560 --> 01:40:10,800
So this field is only specific to the dog

1270
01:40:12,560 --> 01:40:16,000
and the cat can not access this

1271
01:40:21,160 --> 01:40:21,720
service.

1272
01:40:21,720 --> 01:40:24,880
They don't care about anything.

1273
01:40:24,880 --> 01:40:28,240
So now let's create
a test for class as well.

1274
01:40:28,920 --> 01:40:34,560
And so I'm closing this class for now.

1275
01:40:34,560 --> 01:40:38,640
Let me squeeze this.

1276
01:40:38,640 --> 01:40:40,720
So I'm making the font a little smaller.

1277
01:40:40,720 --> 01:40:43,320
But what I hope you guys can see it

1278
01:41:21,400 --> 01:41:23,040
the let me clear the main

1279
01:41:23,040 --> 01:41:26,240
method of descending is get in the sports
channel.

1280
01:41:26,240 --> 01:41:31,000
That's how bad cats are.

1281
01:41:31,000 --> 01:41:32,520
So it is Java.

1282
01:41:32,520 --> 01:41:34,560
Back. Back to Muhammad, your cat.

1283
01:41:35,600 --> 01:41:37,680
She went to sleep.

1284
01:41:37,720 --> 01:41:43,360
So last time
she was looking at the screen,

1285
01:41:43,360 --> 01:41:45,680
if she had an issue done with Java

1286
01:41:57,000 --> 01:41:59,520
sleep 16 hours a day.

1287
01:41:59,680 --> 01:42:04,600
All right, So let me create
an object of the dog class race.

1288
01:42:04,640 --> 01:42:09,040
So dog dog is equal to new.

1289
01:42:10,440 --> 01:42:16,280
No. Okay.

1290
01:42:16,280 --> 01:42:18,720
My dog is learning Java just every day

1291
01:42:21,320 --> 01:42:24,000
so I can see your dog books.

1292
01:42:24,280 --> 01:42:27,560
Not to I can say your dog dot

1293
01:42:29,760 --> 01:42:37,320
name.

1294
01:42:37,320 --> 01:42:40,440
And so, guys, I don't have this name

1295
01:42:41,440 --> 01:42:44,040
field inside this dog class

1296
01:42:44,040 --> 01:42:46,760
from where the skill is coming

1297
01:42:53,280 --> 01:42:57,400
animal class how with the help of

1298
01:43:01,320 --> 01:43:03,520
this expense schema. Okay

1299
01:43:04,960 --> 01:43:08,160
and now if

1300
01:43:08,400 --> 01:43:13,080
if I think that cat is equal to neo cat

1301
01:43:13,840 --> 01:43:16,120
and then cat or dog name

1302
01:43:18,440 --> 01:43:20,160
you give me a name for the cat

1303
01:43:20,160 --> 01:43:22,320
because dog inherited all the info

1304
01:43:28,160 --> 01:43:31,640
taxi.

1305
01:43:31,640 --> 01:43:38,080
So can you guys tell me if I bring dog
or dog name what output I will get?

1306
01:43:38,080 --> 01:44:00,840
Will I get bobby our taxi taxi?

1307
01:44:00,840 --> 01:44:03,760
So because this name field

1308
01:44:04,600 --> 01:44:09,440
is an instance field and instance fears

1309
01:44:09,440 --> 01:44:13,200
they always have their own
separate copies.

1310
01:44:13,800 --> 01:44:14,960
Okay. And

1311
01:44:16,040 --> 01:44:18,800
this is same as if we have created

1312
01:44:19,880 --> 01:44:25,200
in this name
field, inside the cat and inside the dog.

1313
01:44:25,720 --> 01:44:29,200
So there is no common storage

1314
01:44:30,240 --> 01:44:33,000
if we are inheriting from a class.

1315
01:44:33,000 --> 01:44:35,520
Okay,
So if we are inheriting from this class,

1316
01:44:35,520 --> 01:44:39,480
it does not mean that this name will be
same for the cat and for the dog.

1317
01:44:39,480 --> 01:44:39,720
Okay.

1318
01:44:39,720 --> 01:44:42,240
So they will be having
their separate copies

1319
01:44:43,000 --> 01:44:45,720
and everything that you guys can do

1320
01:44:46,680 --> 01:44:49,600
if you write these fields.

1321
01:44:49,600 --> 01:44:53,120
Indeed, they are in the dog class
separately or in the cat class.

1322
01:44:53,120 --> 01:44:55,680
Everything that you can do

1323
01:44:55,680 --> 01:44:57,960
if you write them separately, you can do

1324
01:44:59,040 --> 01:45:02,520
all those things when you write them

1325
01:45:02,520 --> 01:45:06,840
inside the animal class
and you inherit from the animal class.

1326
01:45:06,840 --> 01:45:11,280
So there is no change
the way you use the fields

1327
01:45:11,280 --> 01:45:14,880
or matters when we use the inheritance.

1328
01:45:14,880 --> 01:45:19,440
Okay, For the instance fields or instance
method static,

1329
01:45:19,840 --> 01:45:21,160
they work a little different

1330
01:45:25,000 --> 01:45:28,120
and I can call.

1331
01:45:28,160 --> 01:45:29,360
I can say your dog.

1332
01:45:29,360 --> 01:45:33,960
Dog, dog, dog

1333
01:45:35,240 --> 01:45:36,000
bark.

1334
01:45:36,000 --> 01:45:41,800
I can call the methods
which are only specific to the dog class

1335
01:45:42,920 --> 01:45:46,240
or to the cat class.

1336
01:45:46,240 --> 01:45:48,720
Same as if these methods are

1337
01:45:49,800 --> 01:45:52,240
present in combination with other methods.

1338
01:45:52,560 --> 01:45:55,680
I can call the matters

1339
01:45:55,720 --> 01:45:58,440
which are coming from the parent class

1340
01:46:01,440 --> 01:46:03,560
like the

1341
01:46:03,640 --> 01:46:06,040
E to sleep

1342
01:46:06,440 --> 01:46:07,120
method.

1343
01:46:07,120 --> 01:46:11,400
So this is a common method.

1344
01:46:11,400 --> 01:46:14,440
Let me talk this line

1345
01:46:14,440 --> 01:46:15,840
on here

1346
01:46:16,160 --> 01:46:16,800
and now.

1347
01:46:16,800 --> 01:46:20,600
If I execute this code

1348
01:46:26,960 --> 01:46:28,680
to call this matter as well.

1349
01:46:28,680 --> 01:46:37,520
After I set the name.

1350
01:46:37,520 --> 01:46:41,320
So Bobby is barking, Bobby is eating

1351
01:46:42,600 --> 01:46:43,280
meow meow.

1352
01:46:43,280 --> 01:46:47,040
And then we get the Bobby
because we printed the dog.

1353
01:46:47,760 --> 01:46:53,000
Okay,
so this is how we use the inheritance.

1354
01:46:53,000 --> 01:46:57,960
One thing when running output comes
faster than eclipse light because eclipse

1355
01:46:58,920 --> 01:47:00,960
reads one file

1356
01:47:00,960 --> 01:47:05,680
intelligence checks all the files
for all the issues

1357
01:47:06,000 --> 01:47:10,200
inside your project,
and then it executes your file eclipses

1358
01:47:10,200 --> 01:47:13,360
directly only executing that specific file

1359
01:47:13,360 --> 01:47:15,120
on which you click

1360
01:47:23,800 --> 01:47:26,640
that when

1361
01:47:26,640 --> 01:47:35,000
all our dates Are there any questions?

1362
01:47:35,000 --> 01:47:38,200
No, no. It's very simple.

1363
01:47:38,200 --> 01:47:39,520
Very simple.

1364
01:47:40,360 --> 01:47:42,480
So there are certain things

1365
01:47:43,440 --> 01:47:46,400
which are not in the tree,
not make sure you are

1366
01:47:46,400 --> 01:47:49,520
setting the name first
and then you are calling them at first.

1367
01:47:50,440 --> 01:47:55,240
If you do the reverse,
like all the method, the first.

1368
01:47:55,240 --> 01:47:59,520
So I wish the entire
java was like this serif, which

1369
01:47:59,520 --> 01:48:01,920
which class you find

1370
01:48:02,560 --> 01:48:05,040
hard questions will only be

1371
01:48:05,040 --> 01:48:08,080
when completing the homework.

1372
01:48:08,080 --> 01:48:13,000
So which class you guys find the most hard
or hardest during all the class?

1373
01:48:13,040 --> 01:48:14,640
Oh, my God, Don't ask me.

1374
01:48:14,640 --> 01:48:15,400
There are these.

1375
01:48:15,400 --> 01:48:21,520
There are remarkable classes.

1376
01:48:21,520 --> 01:48:23,720
Gutierrez Don't worry about it.

1377
01:48:23,720 --> 01:48:27,440
Or the areas
I have never seen to the areas

1378
01:48:28,160 --> 01:48:33,480
in my 40 years of coding experience.

1379
01:48:33,480 --> 01:48:34,080
Strings.

1380
01:48:34,080 --> 01:48:36,480
No, no strings are very heavily used.

1381
01:48:36,600 --> 01:48:41,320
Strings are very heavily used.

1382
01:48:41,320 --> 01:48:44,480
Instructors are also very heavily used.

1383
01:48:45,000 --> 01:48:48,280
I don't like the
it is not very if you don't like the areas

1384
01:48:57,480 --> 01:48:59,920
console very long relax

1385
01:49:00,440 --> 01:49:03,240
me wide use use of less

1386
01:49:03,240 --> 01:49:06,400
loops are also very important

1387
01:49:07,920 --> 01:49:11,080
strings
matters classes of decks and other stuff.

1388
01:49:11,080 --> 01:49:11,720
That's great.

1389
01:49:11,720 --> 01:49:12,800
Taisha

1390
01:49:17,160 --> 01:49:18,360
As to that,

1391
01:49:18,360 --> 01:49:22,560
I feel like you are not telling us
everything

1392
01:49:23,160 --> 01:49:27,400
in this of what we don't need to learn.

1393
01:49:27,840 --> 01:49:29,640
So. Silva

1394
01:49:30,120 --> 01:49:33,400
So for example, the two areas like that,
they are not used.

1395
01:49:33,400 --> 01:49:39,960
So I have told you clearly,
but what happens is that at the tester,

1396
01:49:39,960 --> 01:49:45,760
80 to 90% of the time, you guys will be
setting this solution on the Google.

1397
01:49:45,760 --> 01:49:48,960
You guys will be reading the code
written by others.

1398
01:49:48,960 --> 01:49:51,480
Now, if you don't know the concepts,
if you don't know,

1399
01:49:51,480 --> 01:49:53,000
what does these words mean?

1400
01:49:53,000 --> 01:49:57,320
If you don't know how inheritance work,
you will never be able to figure out

1401
01:49:57,320 --> 01:49:58,320
how this matters.

1402
01:49:58,320 --> 01:50:03,040
Our fields are coming to this class,
and if you don't understand already

1403
01:50:03,040 --> 01:50:06,000
written code, you will never be able
to modify that code.

1404
01:50:06,200 --> 01:50:07,920
You can not introduce new features.

1405
01:50:07,920 --> 01:50:09,920
You cannot integrate new test cases.

1406
01:50:10,760 --> 01:50:13,840
So some of the concepts they are,

1407
01:50:14,640 --> 01:50:18,200
we are teaching you
so that you guys can understand and

1408
01:50:19,720 --> 01:50:21,520
the code that is written by others.

1409
01:50:21,520 --> 01:50:21,960
Okay.

1410
01:50:21,960 --> 01:50:25,520
Now the code might be written
by some advanced developers.

1411
01:50:25,760 --> 01:50:28,680
Every developers
totally depends on the company.

1412
01:50:29,000 --> 01:50:32,560
So that's why some of the things
we have to learn

1413
01:50:33,960 --> 01:50:35,320
hard landing a job.

1414
01:50:35,320 --> 01:50:36,640
It's not that hard work.

1415
01:50:36,640 --> 01:50:39,960
Keeping that job is really hard
if you don't know what you are doing.

1416
01:50:39,960 --> 01:50:42,960
Yes, it's true.

1417
01:50:42,960 --> 01:50:43,400
True what?

1418
01:50:43,400 --> 01:50:46,800
I mean, like memorizing the whole thing,
but understanding logic only

1419
01:50:46,800 --> 01:50:50,080
focus on the don't
focus on the memorizing part.

1420
01:50:50,640 --> 01:50:53,520
You will eliminating the memorizing part
for your interviews.

1421
01:50:53,760 --> 01:50:55,440
And again, once you are on your job,

1422
01:50:55,440 --> 01:50:59,120
you will be allowed to use Google notes
or anything that you like.

1423
01:50:59,440 --> 01:51:01,880
Then you will be needing that.

1424
01:51:01,880 --> 01:51:04,560
Now you will not be needing
that memorization part.

1425
01:51:04,560 --> 01:51:08,040
You will be only needing that skill
as debugging

1426
01:51:08,040 --> 01:51:12,600
skills,
searching skills, troubleshooting skills

1427
01:51:12,880 --> 01:51:17,240
and the logic building skills.

1428
01:51:17,240 --> 01:51:21,160
Yes, it's fine,
but I'll try to read these slides 5

1429
01:51:21,160 --> 01:51:26,120
to 6 times a day and it will be fine.

1430
01:51:26,120 --> 01:51:34,520
You will be able to memorize them.

1431
01:51:34,520 --> 01:51:35,400
So let's

1432
01:51:36,640 --> 01:51:38,040
let's go through some of the

1433
01:51:38,040 --> 01:51:40,040
concepts about the inheritance

1434
01:51:43,920 --> 01:51:46,880
5 to 6 times until you die.

1435
01:51:47,280 --> 01:51:51,960
And so there was a bit of this teacher
of art in the college.

1436
01:51:51,960 --> 01:51:55,200
He used to say that
you guys don't have to memorize anything.

1437
01:51:56,520 --> 01:51:58,520
So we were learning English
from him, right?

1438
01:51:58,520 --> 01:51:59,880
So and he said,

1439
01:52:00,480 --> 01:52:03,400
Read this, this, this story three times

1440
01:52:03,400 --> 01:52:06,720
in English, read this story
three times in Urdu.

1441
01:52:06,960 --> 01:52:11,400
Our native language was then read three
more times combined with English and Urdu.

1442
01:52:11,400 --> 01:52:16,160
And you guys don't need to memorize it.

1443
01:52:16,160 --> 01:52:19,720
So inheritance in Java

1444
01:52:20,000 --> 01:52:25,200
is a mechanism.

1445
01:52:25,200 --> 01:52:28,800
Hope you will live long
to have enough time to learn all the Java.

1446
01:52:28,800 --> 01:52:33,840
So if you ask me, I don't have to learn

1447
01:52:34,560 --> 01:52:37,520
all the Java
because I have the basics clear.

1448
01:52:38,120 --> 01:52:40,440
I know the be all the keywords,

1449
01:52:40,840 --> 01:52:44,000
the meaning behind those keywords
I can understand any good.

1450
01:52:45,120 --> 01:52:47,440
And if I don't even
know, if I don't understand something,

1451
01:52:47,440 --> 01:52:50,880
I can quickly Google it because I know how
we are to find data sources.

1452
01:52:51,800 --> 01:52:55,280
Therefore the developers and the testers
that they do on their jobs,

1453
01:52:55,600 --> 01:53:00,640
they they are always using Google.

1454
01:53:00,640 --> 01:53:05,880
So inheritance in Java is a mechanism
in which one object acquires

1455
01:53:06,160 --> 01:53:09,240
all the properties and behavior

1456
01:53:09,240 --> 01:53:11,320
is like, for example, the methods

1457
01:53:13,320 --> 01:53:15,120
of the parent object.

1458
01:53:15,120 --> 01:53:28,080
Okay, it's more.

1459
01:53:28,080 --> 01:53:31,920
But the idea behind inheritance in Java

1460
01:53:31,920 --> 01:53:38,000
is that you can create new classes
that are built upon existing classes.

1461
01:53:38,000 --> 01:53:41,200
So let's say
if you already have a class, right?

1462
01:53:41,520 --> 01:53:44,840
For example
there is a class in the JDK, right?

1463
01:53:44,840 --> 01:53:48,720
And Java guys have already written
a class, but that class

1464
01:53:49,880 --> 01:53:52,480
has, let's say only 50 to 60%.

1465
01:53:52,480 --> 01:53:54,240
What do you need to do it?

1466
01:53:54,240 --> 01:53:57,560
So what you can
do, you can extend from that class,

1467
01:53:58,040 --> 01:54:04,080
you can get that 50 to 60% from that class
and then you can write the remaining 40%

1468
01:54:04,080 --> 01:54:09,560
inside that class
and then you can use that code.

1469
01:54:09,560 --> 01:54:14,640
So that's how it will be useful for you
if you are creating

1470
01:54:14,680 --> 01:54:17,160
multiple similar classes

1471
01:54:18,000 --> 01:54:20,880
and if you see you are repeating

1472
01:54:20,880 --> 01:54:23,520
a lot of code in all those classes,

1473
01:54:24,240 --> 01:54:27,600
what you can do,
you can create a parent class,

1474
01:54:28,280 --> 01:54:32,320
you can put repeated
code inside that class

1475
01:54:33,400 --> 01:54:36,480
and you can make your classes

1476
01:54:36,480 --> 01:54:38,280
inherit from that class.

1477
01:54:38,280 --> 01:54:42,560
In that way, you have to rewrite that code
again and again.

1478
01:54:43,440 --> 01:54:44,880
Works in the same package only.

1479
01:54:44,880 --> 01:54:47,160
No, no, it will work everywhere.

1480
01:54:47,160 --> 01:54:50,280
Will extend
also work on private method structures.

1481
01:54:50,280 --> 01:54:51,600
Are all there limitation?

1482
01:54:51,600 --> 01:54:53,280
Yeah. No, no, no. There are limitations.

1483
01:54:53,280 --> 01:54:55,480
It does not work
with private and constructors.

1484
01:54:55,480 --> 01:54:58,920
We will discuss that.

1485
01:54:58,920 --> 01:55:03,360
So when we inherit from an existing class
we can reuse

1486
01:55:03,720 --> 01:55:07,400
methods and fields of the parent class

1487
01:55:08,960 --> 01:55:12,480
and we can add new methods and fields
also.

1488
01:55:12,480 --> 01:55:15,480
Okay,
so use something that is already created

1489
01:55:16,000 --> 01:55:19,520
and then you can your methods

1490
01:55:19,520 --> 01:55:21,880
and fears as well to the child class

1491
01:55:23,040 --> 01:55:25,560
and extends is the keyword

1492
01:55:25,640 --> 01:55:28,200
that we use for the inheritance

1493
01:55:29,360 --> 01:55:34,600
to inherit properties and methods.

1494
01:55:34,600 --> 01:55:38,080
So for example, in this example
there is this LP class

1495
01:55:41,720 --> 01:55:44,720
that has some background members
and some matters.

1496
01:55:45,120 --> 01:55:50,640
Now, if this student is inheriting
from this faculty,

1497
01:55:51,920 --> 01:55:55,280
all the that are members logically is

1498
01:55:55,280 --> 01:55:59,160
same as if you have written those fields,

1499
01:55:59,160 --> 01:56:03,960
those methods inside that student class
once you extend from that class.

1500
01:56:04,200 --> 01:56:07,440
Okay, in the diagram

1501
01:56:07,440 --> 01:56:09,560
that our members and methods

1502
01:56:10,560 --> 01:56:15,720
are represented in Broken
Line are inherited from the faculty class

1503
01:56:15,720 --> 01:56:20,040
and they are visible in this student
class, logically,

1504
01:56:21,360 --> 01:56:24,640
you will not see them,
but logically they are there.

1505
01:56:24,640 --> 01:56:27,640
You can access,
you can store the values inside them.

1506
01:56:27,640 --> 01:56:30,600
You can call the matters.

1507
01:56:30,720 --> 01:56:33,000
You can do all the things that you do

1508
01:56:33,000 --> 01:56:34,000
with the

1509
01:56:36,200 --> 01:56:38,520
methods and fields of that

1510
01:56:39,520 --> 01:56:40,920
child class.

1511
01:56:40,920 --> 01:56:45,360
Well, we have a terminology class
at the end of the course.

1512
01:56:45,360 --> 01:56:47,280
Well, we have a terminology test.

1513
01:56:48,720 --> 01:56:51,040
There will be mock interviews.

1514
01:56:51,040 --> 01:56:54,840
And in those mock interviews,

1515
01:56:54,840 --> 01:56:59,040
we will be testing you
how well you can explain the concepts.

1516
01:56:59,560 --> 01:57:02,040
If you don't explain the concepts well,

1517
01:57:03,800 --> 01:57:05,160
you will

1518
01:57:05,160 --> 01:57:08,400
we will not be suggesting you
to apply on the jobs unless

1519
01:57:08,400 --> 01:57:11,520
and until you work on your terminologies
and the way you explain.

1520
01:57:12,960 --> 01:57:15,240
And once you are good,

1521
01:57:15,240 --> 01:57:18,600
so your mock interviews
will be held for each week.

1522
01:57:19,280 --> 01:57:24,800
And once you pass those mock interviews,
then we will build resumes

1523
01:57:24,840 --> 01:57:28,040
and then you guys can start
applying on the jobs

1524
01:57:29,080 --> 01:57:30,080
If we don't.

1525
01:57:30,080 --> 01:57:31,320
Or do you give correction?

1526
01:57:31,320 --> 01:57:33,120
Yes, we will be giving you the feedback.

1527
01:57:33,120 --> 01:57:46,280
Definitely Definitely.

1528
01:57:46,280 --> 01:57:49,560
Right now, maybe you guys
can try to record your videos

1529
01:57:50,160 --> 01:57:52,680
or maybe you can stand
in front of a mirror

1530
01:57:52,680 --> 01:57:57,080
or maybe you can try to explain
these concepts to someone in your family

1531
01:57:57,440 --> 01:58:01,360
who are don't have an IQ background,
and then you will know how

1532
01:58:01,360 --> 01:58:04,320
well you can explain.
It will be individual.

1533
01:58:05,280 --> 01:58:08,160
The interviews be individual,
I guess the preparation and everything.

1534
01:58:08,160 --> 01:58:09,480
It will be groups

1535
01:58:10,240 --> 01:58:13,600
I do every single time
mock interviews. This

1536
01:58:15,800 --> 01:58:16,760
so we can go back

1537
01:58:16,760 --> 01:58:19,760
and look at the feedback. Yes,

1538
01:58:20,040 --> 01:58:22,080
I will explain it to my cat.

1539
01:58:22,320 --> 01:58:25,400
Take your cat in your interview question.

1540
01:58:25,400 --> 01:58:27,200
So we should go through all the slides.

1541
01:58:27,200 --> 01:58:28,920
Definitely.

1542
01:58:29,760 --> 01:58:33,120
We are going to do the studies till March

1543
01:58:33,120 --> 01:58:35,920
and then the rest of the country
is processed. Yes.

1544
01:58:36,880 --> 01:58:40,240
Okay, Good listener
if it makes sense for them.

1545
01:58:41,800 --> 01:58:45,600
So inheritance represents
the is a relationship.

1546
01:58:45,800 --> 01:58:49,480
So let's say you are trying to solve
a real life problem

1547
01:58:49,480 --> 01:58:53,120
and you don't know if you should be going
for inheritance or not.

1548
01:58:53,640 --> 01:58:59,280
So there is a simple check
we call the check as is a relationship.

1549
01:58:59,960 --> 01:59:03,720
So cat is an animal right?

1550
01:59:03,720 --> 01:59:05,160
A dog is an animal.

1551
01:59:05,160 --> 01:59:09,680
So if you see this relationship
between these entities,

1552
01:59:10,400 --> 01:59:15,520
then you should definitely
go for inheritance, right? So

1553
01:59:16,680 --> 01:59:18,520
a cat is not an animal, so

1554
01:59:18,520 --> 01:59:22,320
you should not create an animal class
and then you should not inherit

1555
01:59:23,600 --> 01:59:24,280
from that.

1556
01:59:24,280 --> 01:59:27,800
You should not a car class
you've not inherited from that

1557
01:59:27,800 --> 01:59:32,640
animal class, then
maybe you need to think about your design.

1558
01:59:32,720 --> 01:59:35,640
So this is how you guys will be.

1559
01:59:35,640 --> 01:59:41,040
This this simple test will help you design
these classes better so that the others

1560
01:59:41,040 --> 01:59:45,040
who will be reading your code,
they will not be looking for you.

1561
01:59:46,040 --> 01:59:50,560
Just try to decide to kill you.

1562
01:59:50,560 --> 01:59:51,160
Right.

1563
01:59:51,160 --> 01:59:55,920
Because reading the code, it can be
so frustrated if it is not making sense.

1564
01:59:55,920 --> 01:59:59,880
If you have not used the proper name
for your variables, methods and classes.

1565
02:00:01,120 --> 02:00:04,200
So it will be very frustrating.

1566
02:00:04,200 --> 02:00:06,760
Can we find a parent from different
package? Yes, we can

1567
02:00:11,080 --> 02:00:13,160
inherit inheritance represents.

1568
02:00:13,160 --> 02:00:16,680
There is a relationship
also known as parent child relationship.

1569
02:00:17,280 --> 02:00:19,600
So if you see this relationship

1570
02:00:20,320 --> 02:00:23,760
you can use the inheritance there.

1571
02:00:24,640 --> 02:00:28,840
Now, other than this code duplication,

1572
02:00:30,160 --> 02:00:32,520
what are the other things

1573
02:00:32,520 --> 02:00:36,040
that we can improve with the inheritance
other than this code?

1574
02:00:36,040 --> 02:00:38,880
Duplication is application development.

1575
02:00:38,880 --> 02:00:41,600
Time will be less write you.

1576
02:00:41,600 --> 02:00:45,320
If you are writing less code, definitely
it will be taking you less time

1577
02:00:46,520 --> 02:00:49,400
applying and will take less memory.

1578
02:00:50,080 --> 02:00:53,160
Okay, if you are repeating
because again and again

1579
02:00:53,160 --> 02:00:55,440
because these classes that you guys write,

1580
02:00:56,680 --> 02:00:59,920
these are the things that get in
that that are loaded

1581
02:00:59,920 --> 02:01:03,800
inside the memory
when your program is being executed

1582
02:01:04,800 --> 02:01:08,680
and application
execution time will be less.

1583
02:01:08,920 --> 02:01:11,440
Okay. So it also reduces the time.

1584
02:01:12,160 --> 02:01:15,040
So it will make your applications faster

1585
02:01:16,040 --> 02:01:16,760
to the

1586
02:01:16,760 --> 02:01:21,120
pre benefits.

1587
02:01:21,120 --> 02:01:25,200
But there is also this advantage
of the inheritance.

1588
02:01:25,400 --> 02:01:27,560
Can you think of any disadvantage

1589
02:01:48,240 --> 02:01:50,840
if we change something in parent class?

1590
02:01:51,240 --> 02:01:54,440
All other child class

1591
02:01:55,760 --> 02:01:56,960
will get

1592
02:01:57,440 --> 02:01:59,440
No, we cannot less

1593
02:01:59,440 --> 02:02:03,080
minimal and time forgetting what matters.

1594
02:02:03,080 --> 02:02:06,480
We used.

1595
02:02:06,480 --> 02:02:11,160
If something happens to parent
when we make a change in parent child,

1596
02:02:11,160 --> 02:02:17,200
it will be it will be everywhere.

1597
02:02:17,200 --> 02:02:19,280
That's not thinking negatively.

1598
02:02:19,280 --> 02:02:22,040
So even if we're not team negatively,
like the issue

1599
02:02:22,040 --> 02:02:26,920
will still be there.

1600
02:02:26,920 --> 02:02:30,480
So guys, if

1601
02:02:30,480 --> 02:02:34,880
so, let me let me show this.

1602
02:02:34,880 --> 02:02:38,400
So right now I am inside the animal class.

1603
02:02:38,400 --> 02:02:40,920
What if accidentally

1604
02:02:41,960 --> 02:02:52,280
I gained you something,
I changed something

1605
02:02:52,280 --> 02:02:55,680
inside the parent class and now

1606
02:02:56,120 --> 02:03:01,000
do you guys see the issue?

1607
02:03:01,000 --> 02:03:06,080
Now we must update all the child classes

1608
02:03:06,480 --> 02:03:10,760
if they are using this feature
from the parent class.

1609
02:03:11,040 --> 02:03:13,840
Okay, so once we have written something

1610
02:03:13,840 --> 02:03:17,000
and if some other classes

1611
02:03:17,600 --> 02:03:19,960
have extended from that class

1612
02:03:20,640 --> 02:03:23,320
now making one simple change

1613
02:03:24,240 --> 02:03:27,960
can cause the issue to all those classes.

1614
02:03:28,320 --> 02:03:33,240
Okay, so this is what again,
the parent class will be protected.

1615
02:03:33,240 --> 02:03:36,040
Some not so such mistakes don't happen.

1616
02:03:38,040 --> 02:03:41,280
Yes. Mohammed we can do that as a

1617
02:03:43,440 --> 02:03:45,640
so it's like a virus

1618
02:03:46,680 --> 02:03:50,600
if the word
what what do we call this issue?

1619
02:03:50,600 --> 02:03:53,760
We call
these classes are now tightly coupled.

1620
02:03:55,000 --> 02:03:57,680
So if we make did

1621
02:03:57,680 --> 02:03:59,640
in the parent class

1622
02:03:59,640 --> 02:04:02,280
now they all guys,

1623
02:04:02,280 --> 02:04:04,560
all the children, they will get defective.

1624
02:04:06,000 --> 02:04:08,880
So we need to be super, super careful

1625
02:04:09,560 --> 02:04:12,600
when we have to make any change

1626
02:04:12,600 --> 02:04:15,200
or when we are designing a class

1627
02:04:16,040 --> 02:04:18,960
which we what we are planning to act

1628
02:04:19,000 --> 02:04:21,960
as a parent class,
we need to be very careful

1629
02:04:22,440 --> 02:04:27,640
about our writing,
the matters, writing the fields.

1630
02:04:27,880 --> 02:04:30,840
Now we have to have the about

1631
02:04:30,840 --> 02:04:34,200
all the child classes
that will be inheriting from that class.

1632
02:04:34,200 --> 02:04:39,720
So it's a very,

1633
02:04:39,720 --> 02:04:43,440
very difficult
to design the classes in this way. And

1634
02:04:44,760 --> 02:04:47,200
because in the software world,

1635
02:04:47,200 --> 02:04:51,120
the code is always changing,
it's almost always changing.

1636
02:04:51,120 --> 02:04:56,040
And especially especially the environment
in which you guys will be working

1637
02:04:56,040 --> 02:04:59,120
the Agile environment,
the Agile is all about change.

1638
02:05:00,080 --> 02:05:03,960
So in these kind of scenarios
you should be super careful

1639
02:05:03,960 --> 02:05:10,000
if you are using the inheritance,
like if the grand die,

1640
02:05:10,000 --> 02:05:13,320
all the family will be dead
in this In this scenario,

1641
02:05:13,320 --> 02:05:17,480
if you remove the parent class,
none of the child classes will work.

1642
02:05:18,440 --> 02:05:21,000
So Grandpa takes all the power with him

1643
02:05:29,280 --> 02:05:32,280
and Grandpa is digging in.

1644
02:05:32,280 --> 02:05:34,600
So this is the issue with the

1645
02:05:35,960 --> 02:05:38,080
parent child relationship.

1646
02:05:38,080 --> 02:05:42,640
When we create a parent child relationship
or when we have inheritance.

1647
02:05:43,280 --> 02:05:47,040
Now advantages,

1648
02:05:48,600 --> 02:05:50,960
good reusability,

1649
02:05:50,960 --> 02:05:56,040
the same methods and variables
which are defined in parent.

1650
02:05:57,000 --> 02:06:00,960
Okay, so we have multiple names for the
for dependent class.

1651
02:06:01,200 --> 02:06:05,280
Sometimes you guys will see that
in the industry.

1652
02:06:05,640 --> 02:06:08,280
They will be called super classes.

1653
02:06:08,280 --> 02:06:11,280
They are also called base classes.

1654
02:06:11,520 --> 02:06:15,240
They are also called parent classes.

1655
02:06:15,240 --> 02:06:19,920
So in the child classes they are called
subclasses and then derived classes.

1656
02:06:19,920 --> 02:06:22,200
So there are multiple names for these.

1657
02:06:22,200 --> 02:06:25,080
So Barbara, they are all same.

1658
02:06:25,080 --> 02:06:28,160
That is when we get the heritage,
when the grandpa is that

1659
02:06:30,240 --> 02:06:32,720
so? Now you have to be on your own.

1660
02:06:32,720 --> 02:06:37,480
You have to create your own fields,
you have to write your own letters.

1661
02:06:38,040 --> 02:06:41,560
Now, Grandpa
is not helping you anymore, nor

1662
02:06:43,120 --> 02:06:45,760
is there any way to connect them
to the parent class.

1663
02:06:45,760 --> 02:06:49,760
That is, you make a big change in parent
class will automatically

1664
02:06:49,760 --> 02:06:52,640
you updated the child classes.

1665
02:06:54,080 --> 02:06:56,480
It's not possible, Michael,
because what happens

1666
02:06:56,480 --> 02:06:59,160
is that let's say
the Java guy is written, the

1667
02:07:00,240 --> 02:07:02,400
classes in the JDK, right?

1668
02:07:02,400 --> 02:07:06,320
And then the team makes it so you
and you are inheriting from that class.

1669
02:07:06,840 --> 02:07:11,880
Now, Java guys don't know if you have
inherited from their class or not, okay?

1670
02:07:12,240 --> 02:07:14,440
And you don't know the Java guys, right?

1671
02:07:14,440 --> 02:07:17,520
But you are using their classes
with the help of inherit.

1672
02:07:17,560 --> 02:07:21,840
And so what happens is that in industry,
usually whenever there is a new version,

1673
02:07:22,200 --> 02:07:25,400
there is a document
that they release a document

1674
02:07:25,400 --> 02:07:28,800
in which they mention the changes
that they have made,

1675
02:07:28,800 --> 02:07:32,080
and then you can read their document
and you can modify your code

1676
02:07:32,080 --> 02:07:36,480
accordingly.

1677
02:07:36,480 --> 02:07:39,720
Yeah, that million dollar idea. Yep. Yep.

1678
02:07:39,920 --> 02:07:40,680
You are right.

1679
02:07:42,440 --> 02:07:46,600
No. So good reusability.

1680
02:07:46,600 --> 02:07:50,360
We are reusing the code from the parent
so it's useless to make it private or

1681
02:07:50,400 --> 02:07:54,360
protected constructor
because accidentally lurks.

1682
02:07:54,360 --> 02:07:55,880
Use private and protected.

1683
02:07:55,880 --> 02:07:58,560
No, no drivers.

1684
02:07:58,560 --> 02:08:01,880
Even if you use expense keyword private

1685
02:08:02,400 --> 02:08:06,320
fields, private matters,
private constructors,

1686
02:08:06,400 --> 02:08:12,960
they don't participate in inheritance,
so they will still be the part

1687
02:08:12,960 --> 02:08:16,040
of only that class
in which you have written

1688
02:08:16,040 --> 02:08:20,400
those.

1689
02:08:20,400 --> 02:08:21,960
So application performance.

1690
02:08:21,960 --> 02:08:24,400
Application performance is enhanced?

1691
02:08:24,400 --> 02:08:26,400
Yes, protected ones are inherited here.

1692
02:08:26,440 --> 02:08:30,200
So I will show you how what is
the difference between a protected one.

1693
02:08:30,920 --> 02:08:34,200
So redundancy reputation of the code

1694
02:08:34,200 --> 02:08:39,640
is reduced.

1695
02:08:39,640 --> 02:08:44,760
The main disadvantage of using inheritance
is back to classes, parent and child.

1696
02:08:44,840 --> 02:08:47,000
You are tightly coupled here.

1697
02:08:47,480 --> 02:08:52,320
This parent class should be very useful
for saving time.

1698
02:08:52,320 --> 02:08:54,680
Yes, this class is easy.

1699
02:08:55,360 --> 02:08:56,280
Thanks a lot.

1700
02:08:56,280 --> 02:09:01,200
So if we need those, we need to create
those variables and method.

1701
02:09:02,360 --> 02:09:03,240
Yes, if you want

1702
02:09:03,240 --> 02:09:07,320
to use the private ones,
they don't participate in inheritance.

1703
02:09:07,320 --> 02:09:09,160
You have to create

1704
02:09:10,160 --> 02:09:14,920
on your own in your classes.

1705
02:09:14,920 --> 02:09:19,560
This means that
if we change the code of parent class,

1706
02:09:20,280 --> 02:09:25,600
it will affect to all child classes
which are inheriting

1707
02:09:25,600 --> 02:09:31,600
deriving the parent class and hence
it cannot be independent of each other.

1708
02:09:32,840 --> 02:09:35,040
Now, if we don't want to break this code,

1709
02:09:35,400 --> 02:09:38,640
we need to go in all the child classes.

1710
02:09:38,640 --> 02:09:41,880
We need to check which classes are using,
which features,

1711
02:09:42,200 --> 02:09:46,720
and then we need to be very careful
when we need to change something in the

1712
02:09:47,800 --> 02:09:49,160
parent class.

1713
02:09:49,160 --> 02:09:54,240
Now there are multiple types
of inheritance.

1714
02:09:54,240 --> 02:09:57,040
The famous

1715
02:09:57,040 --> 02:10:00,280
types of inheritance, there are four.

1716
02:10:00,280 --> 02:10:02,600
There are four ways in which we can

1717
02:10:03,000 --> 02:10:05,840
in which classes
can, inheritance in programing.

1718
02:10:07,640 --> 02:10:08,520
But one of

1719
02:10:08,520 --> 02:10:11,160
the types is not supported in Java,

1720
02:10:11,640 --> 02:10:14,360
but the three once
they are supported in Java.

1721
02:10:14,360 --> 02:10:18,960
So we will be discussing those three types
guys.

1722
02:10:18,960 --> 02:10:22,800
Do you think it will be easy after this,
as we have it today?

1723
02:10:24,720 --> 02:10:27,040
So sure, if there is only one class

1724
02:10:27,040 --> 02:10:31,080
that might bother you and this time

1725
02:10:31,440 --> 02:10:35,520
I am planning to break that class
into two classes.

1726
02:10:36,000 --> 02:10:38,640
So hopefully that class will also not.

1727
02:10:38,880 --> 02:10:42,160
But it will not be that difficult for you.

1728
02:10:42,960 --> 02:10:46,760
Then the child class
behave as parent Child to another class.

1729
02:10:46,760 --> 02:10:47,640
Yes, ma'am.

1730
02:10:47,640 --> 02:10:51,960
So this is how we would define the four.

1731
02:10:51,960 --> 02:10:55,120
How do you do
you know someone in these previous

1732
02:10:55,120 --> 02:10:58,840
batches?

1733
02:10:58,840 --> 02:11:02,440
Okay, then, then, then, then, then.

1734
02:11:02,440 --> 02:11:05,560
Let's not write
anything in the live journal

1735
02:11:05,560 --> 02:11:08,560
about the difficult.

1736
02:11:08,560 --> 02:11:14,000
I know over here from last batch.

1737
02:11:14,000 --> 02:11:16,800
So based on a number of ways

1738
02:11:19,200 --> 02:11:23,240
inheriting
the so based on the number of ways

1739
02:11:23,240 --> 02:11:29,520
we inherit the features of the base class,
the parent class, there are two types.

1740
02:11:29,560 --> 02:11:31,000
The first is

1741
02:11:31,680 --> 02:11:34,800
single inheritance of the simplest,
the easiest one.

1742
02:11:36,400 --> 02:11:40,680
And then we have multi level
and then hierarchical inheritance.

1743
02:11:40,680 --> 02:11:47,280
So let me let me first discuss
the single inheritance.

1744
02:11:47,280 --> 02:11:48,920
Single inheritance is very simple.

1745
02:11:48,920 --> 02:11:50,960
We have a class

1746
02:11:52,880 --> 02:11:55,200
one parent class,

1747
02:11:55,200 --> 02:11:57,520
and there is only one

1748
02:11:57,520 --> 02:12:00,480
child of that of that class.

1749
02:12:00,680 --> 02:12:03,720
So in real life,
if the parents, they only have

1750
02:12:03,720 --> 02:12:06,720
one boy or one girl, right?

1751
02:12:07,680 --> 02:12:10,560
So this is
this is something similar to that.

1752
02:12:10,600 --> 02:12:11,040
Okay.

1753
02:12:11,040 --> 02:12:15,360
So a parent is having only one child
if this is the case.

1754
02:12:15,760 --> 02:12:19,120
So in the previous example,
how how many cards were there, guys?

1755
02:12:20,520 --> 02:12:23,280
The example
I showed you, there were two types.

1756
02:12:23,280 --> 02:12:28,800
So was that single inheritance?

1757
02:12:28,800 --> 02:12:32,160
No, that was not single inheritance.

1758
02:12:32,160 --> 02:12:34,320
Okay. So in single inheritance,

1759
02:12:35,480 --> 02:12:38,000
a parent has only one child.

1760
02:12:39,360 --> 02:12:41,480
Okay, So In this example, we have class

1761
02:12:41,480 --> 02:12:44,040
and there is only one one class.

1762
02:12:44,720 --> 02:12:47,920
Class
B, which is inheriting from this class.

1763
02:12:48,000 --> 02:12:50,480
Is it easy to understand

1764
02:12:50,760 --> 02:12:53,240
or do you guys want me to explain it more?

1765
02:12:53,360 --> 02:12:55,040
It's easy, like

1766
02:12:55,440 --> 02:12:57,880
a parent having one child.

1767
02:12:57,880 --> 02:13:00,560
If a parent can have multiple,

1768
02:13:01,640 --> 02:13:04,840
multiple times

1769
02:13:04,840 --> 02:13:06,760
multiple children,

1770
02:13:06,800 --> 02:13:10,160
then it is called
hierarchical inheritance.

1771
02:13:10,160 --> 02:13:10,920
Okay.

1772
02:13:11,960 --> 02:13:15,000
No, no, multiple is not supported.

1773
02:13:15,000 --> 02:13:18,240
Fatma In Java we have multi level

1774
02:13:19,160 --> 02:13:30,040
single and Oracle.

1775
02:13:30,040 --> 02:13:34,880
So if there are multiple dies,
which type of inheritance

1776
02:13:34,880 --> 02:13:35,760
is this

1777
02:13:39,120 --> 02:13:39,800
hierarchical?

1778
02:13:39,800 --> 02:13:46,080
So the last example that I showed you,
which type of inheritance was there

1779
02:13:47,880 --> 02:13:49,440
hierarchical, right.

1780
02:13:49,440 --> 02:13:52,320
So this is what we call
as this second type.

1781
02:13:52,320 --> 02:13:55,400
So when a class has more than one
child classes

1782
02:13:56,520 --> 02:13:58,200
are subclasses.

1783
02:13:58,200 --> 02:14:02,040
In other words, more than one
child classes have the same parent class.

1784
02:14:02,040 --> 02:14:06,440
Then this type of inheritance is known
as hierarchical inheritance.

1785
02:14:07,720 --> 02:14:12,160
We then we have like 11.

1786
02:14:12,600 --> 02:14:16,520
Oh, what do we mean
by multi level in real life guys,

1787
02:14:16,800 --> 02:14:19,560
when we use the multi level

1788
02:14:19,560 --> 02:14:21,760
keyword in our real life?

1789
02:14:21,760 --> 02:14:26,440
Can you guys tell me how it can be
mapped to inheritance?

1790
02:14:26,440 --> 02:14:30,280
What will happen
in the multi level inheritance?

1791
02:14:32,040 --> 02:14:35,800
So now the fields
and the property has multiple stages.

1792
02:14:36,040 --> 02:14:39,200
So the fields and the properties are

1793
02:14:39,400 --> 02:14:43,360
they will propagate to multiple levels.

1794
02:14:43,720 --> 02:14:44,840
So what will happen?

1795
02:14:44,840 --> 02:14:46,400
There will be a grandparent,

1796
02:14:47,400 --> 02:14:48,480
the parent

1797
02:14:48,480 --> 02:14:51,280
inherit the fields and matters
from the grandparent.

1798
02:14:51,280 --> 02:14:54,320
Then there will be a child, child

1799
02:14:54,320 --> 02:14:58,520
will inherit from parent,
then there will be a grandchild.

1800
02:14:58,520 --> 02:15:00,760
That grandchild will inherit from child.

1801
02:15:00,760 --> 02:15:03,320
So there will be multiple,
multiple levels.

1802
02:15:03,640 --> 02:15:08,400
All of this of fields and matters
propagate.

1803
02:15:08,400 --> 02:15:13,680
Again, if we see this case,
if a class is inheriting from Class

1804
02:15:13,680 --> 02:15:18,680
B, Class B is inheriting from class
C classes, inheriting from class D,

1805
02:15:20,120 --> 02:15:24,960
then it is called multi level inheritance.

1806
02:15:24,960 --> 02:15:25,800
Okay?

1807
02:15:26,400 --> 02:15:31,040
And then we have multiple inheritance.

1808
02:15:31,360 --> 02:15:34,400
Okay, so there is a difference,
multi level and multiple.

1809
02:15:35,040 --> 02:15:39,480
Now it also not makes sense
in the real life, right?

1810
02:15:39,480 --> 02:15:43,880
So multiple inheritance means one child

1811
02:15:43,920 --> 02:15:45,960
class can have multiple parents

1812
02:15:46,880 --> 02:15:49,720
of more than one parent three, four,
five, six.

1813
02:15:50,400 --> 02:15:53,640
It is supported in C++
and other programing languages,

1814
02:15:53,960 --> 02:15:58,680
but it is not supported in Java
because it creates an issue.

1815
02:15:59,160 --> 02:16:03,520
And that issue is is very famous
that it has this special name.

1816
02:16:03,520 --> 02:16:05,560
It's called the Diamond Problem.

1817
02:16:06,400 --> 02:16:10,400
But would you know,
is the parent class the class

1818
02:16:10,400 --> 02:16:14,280
which you are writing after
the extents keyword is the parent class.

1819
02:16:15,720 --> 02:16:16,240
That's how

1820
02:16:16,240 --> 02:16:30,360
we know. So

1821
02:16:31,400 --> 02:16:35,400
how often do you use
multi level inheritance in real life?

1822
02:16:35,400 --> 02:16:39,320
It will be used heavily.

1823
02:16:39,320 --> 02:16:50,960
So do you guys know how many of you know
about the diamond problem?

1824
02:16:50,960 --> 02:16:56,160
So if we have my people inheritance,

1825
02:16:56,200 --> 02:17:02,160
like there is this parent of 1b1,
there is another parent B two,

1826
02:17:02,520 --> 02:17:07,520
there is another parent B three
and there is this child C one.

1827
02:17:07,520 --> 02:17:11,880
Now, this child is inherited
in from this parent, from this parent

1828
02:17:11,880 --> 02:17:12,680
from this parent.

1829
02:17:12,680 --> 02:17:16,120
Can you guys tell me
what kind of issue it can cause

1830
02:17:18,480 --> 02:17:20,080
if a child is inheriting

1831
02:17:20,080 --> 02:17:23,960
from multiple parents,
that means all the fears

1832
02:17:24,600 --> 02:17:28,800
from all the parents
they will get inherited inside.

1833
02:17:28,800 --> 02:17:31,440
C one. Right?

1834
02:17:32,160 --> 02:17:36,360
So what can happen
is that what can happen is that

1835
02:17:37,440 --> 02:17:38,760
what if parent one

1836
02:17:38,760 --> 02:17:41,480
is having a failed called name,

1837
02:17:41,840 --> 02:17:45,440
then parent who is also having a field
called name two?

1838
02:17:45,760 --> 02:17:48,120
Parent three is also having the same name.

1839
02:17:48,760 --> 02:17:52,840
Parent one has a method
and two also have the same name Method.

1840
02:17:52,840 --> 02:17:54,600
Parent three
also has the same name better.

1841
02:17:54,600 --> 02:17:58,800
Now there is a confusion right
whose method

1842
02:17:58,920 --> 02:18:02,680
the child should set, right
title should accept.

1843
02:18:03,920 --> 02:18:06,360
So it's a very big problem, right?

1844
02:18:06,360 --> 02:18:10,440
So to avoid these issues
and because it causes a lot of issues,

1845
02:18:10,680 --> 02:18:13,440
Galois guys decided to not have

1846
02:18:13,840 --> 02:18:17,040
my people inheritance in Java.

1847
02:18:17,160 --> 02:18:20,640
Okay,
So they didn't allow multiple inheritance,

1848
02:18:20,640 --> 02:18:26,640
but it was present in C++,
and C++ was invented before Java.

1849
02:18:26,640 --> 02:18:28,920
So this is a very famous interview
question.

1850
02:18:28,960 --> 02:18:32,320
They, they will ask you,
can you explain the diamond problem?

1851
02:18:33,760 --> 02:18:35,840
What is the advantage of this?

1852
02:18:35,840 --> 02:18:36,920
There is no advantage.

1853
02:18:36,920 --> 02:18:40,240
You know, we are just discussing that.

1854
02:18:40,520 --> 02:18:42,160
There is and there is a feature

1855
02:18:42,160 --> 02:18:44,760
which is not allowed in Java
and why it is not allowed

1856
02:18:45,640 --> 02:18:49,080
and that there is no advantage,
I mean, in real life.

1857
02:18:49,520 --> 02:18:52,680
So the advantage is
that you will be writing

1858
02:18:52,920 --> 02:18:57,560
less buggy code.

1859
02:18:57,560 --> 02:18:59,360
It's not allowed in Java.

1860
02:18:59,360 --> 02:19:00,680
So the benefit is that

1861
02:19:00,680 --> 02:19:04,600
you will not be getting so many bugs
related to this inheritance.

1862
02:19:04,600 --> 02:19:07,240
There there's the benefit

1863
02:19:07,360 --> 02:19:09,360
know you have tips for us

1864
02:19:09,360 --> 02:19:13,560
what we have more focus on.

1865
02:19:13,560 --> 02:19:16,560
You have to focus on everything sheriff
because

1866
02:19:17,560 --> 02:19:19,760
let me be honest guys

1867
02:19:19,760 --> 02:19:23,040
I did my engineering in

1868
02:19:23,520 --> 02:19:28,120
in 40 years
I studied 44 courses on my job.

1869
02:19:28,120 --> 02:19:33,240
I only used three courses, 41 courses.

1870
02:19:33,240 --> 02:19:38,040
Then I don't even remember their names.

1871
02:19:38,040 --> 02:19:41,360
But somehow they are helping me in in

1872
02:19:41,400 --> 02:19:45,840
almost every program or in in every job.

1873
02:19:45,840 --> 02:19:50,080
So what you guys are doing
you are skipping that 40 years of degree,

1874
02:19:50,440 --> 02:19:52,720
a computer, A computer degree.

1875
02:19:52,720 --> 02:19:57,120
Then you are skipping 3
to 4 years of industry experience

1876
02:19:58,200 --> 02:19:58,680
and you

1877
02:19:58,680 --> 02:20:01,600
will be directly earning the same salary

1878
02:20:02,440 --> 02:20:07,320
that a person has to first attend
the college for four years of university

1879
02:20:07,320 --> 02:20:11,000
and then have to spend three times
in the three years in the industry.

1880
02:20:11,400 --> 02:20:14,600
So you guys will be competing
with those people, right?

1881
02:20:15,240 --> 02:20:17,920
So you are already taking a shortcut.

1882
02:20:17,920 --> 02:20:21,520
A very, very long

1883
02:20:21,520 --> 02:20:26,640
path is already combining
to adjust to six months or seven months.

1884
02:20:26,640 --> 02:20:29,840
So please don't find further shortcuts
in this course,

1885
02:20:29,840 --> 02:20:34,480
even to try to learn the things.

1886
02:20:34,480 --> 02:20:39,680
So we are using a cheat code
for financial security,

1887
02:20:39,680 --> 02:20:42,520
so please don't look for further
shortcuts.

1888
02:20:42,520 --> 02:20:44,760
Okay. I try to learn everything.

1889
02:20:46,200 --> 02:20:50,320
Diamond problem is same variables
in different class, right?

1890
02:20:50,360 --> 02:20:54,000
Yes. Then you are right.

1891
02:20:54,000 --> 02:20:56,560
So do we get any kind of certificate
from syntax?

1892
02:20:56,560 --> 02:20:58,240
So for harder you will not be needing

1893
02:20:58,240 --> 02:21:02,000
as in a certificate deal
directly with getting a job

1894
02:21:03,000 --> 02:21:04,200
in IP.

1895
02:21:04,200 --> 02:21:05,840
There is no

1896
02:21:06,360 --> 02:21:09,400
big on
the there is not that much of a difference

1897
02:21:09,400 --> 02:21:14,280
if you have a certificate or a degree
or a certification,

1898
02:21:14,280 --> 02:21:18,320
if you know how to solve a problem there
saying that's what they did.

1899
02:21:18,360 --> 02:21:21,800
They are looking for 40% of the employers
from the Google.

1900
02:21:21,800 --> 02:21:24,640
They don't even have degrees
or anything like that.

1901
02:21:26,280 --> 02:21:29,440
I hired some jobs, ask for W2

1902
02:21:30,880 --> 02:21:32,520
Silver. I am not sure about that.

1903
02:21:32,520 --> 02:21:36,000
But you can ask the placement team
and the Aziz or others.

1904
02:21:36,000 --> 02:21:41,040
But I have not seen any of the students
having any issues with having a degree

1905
02:21:41,240 --> 02:21:43,840
because there are so many jobs
that they don't care about.

1906
02:21:44,040 --> 02:21:47,920
Degrees.

1907
02:21:47,920 --> 02:21:53,680
Do I look better on your wallet
or it looks good on walls?

1908
02:21:53,680 --> 02:21:55,760
We have W-2 that for taxes.

1909
02:21:55,760 --> 02:21:56,760
All right, guys. So

1910
02:21:59,080 --> 02:22:00,480
do you guys now know the

1911
02:22:00,480 --> 02:22:04,080
famous diamond problem
that can happen with

1912
02:22:05,400 --> 02:22:07,440
multiple inheritance

1913
02:22:07,920 --> 02:22:11,040
and you guys also explain
if the interviewer

1914
02:22:11,040 --> 02:22:25,480
asked about it.

1915
02:22:25,480 --> 02:22:29,680
Okay, so this was multilevel in multilevel
inheritance,

1916
02:22:29,680 --> 02:22:32,600
there exist a single best class,

1917
02:22:34,080 --> 02:22:38,120
single driver
class and multiple intermediate

1918
02:22:38,400 --> 02:22:42,280
based classes one child and more than one

1919
02:22:42,280 --> 02:22:47,160
parent, single best class,

1920
02:22:47,160 --> 02:22:50,840
single drive class, and multiple
intermediate based classes.

1921
02:22:52,240 --> 02:22:53,840
And intermediate base class

1922
02:22:53,840 --> 02:22:57,840
is one in
one context will access drive class

1923
02:22:57,840 --> 02:23:01,440
and in other context
the same class access base class.

1924
02:23:01,440 --> 02:23:07,320
Okay, so B is an extending from a, C
is extending from B,

1925
02:23:07,320 --> 02:23:10,920
B is extending from C,
So everything that E have

1926
02:23:12,040 --> 02:23:14,120
will be inside the B,

1927
02:23:15,000 --> 02:23:17,840
then everything that B plus

1928
02:23:17,920 --> 02:23:22,280
everything that it inherited from me
will be available to C

1929
02:23:22,920 --> 02:23:28,240
and then D will have access to C, B
and A duplicate names of variables.

1930
02:23:28,240 --> 02:23:30,760
So day weekend,
but tomorrow everything will be deleted.

1931
02:23:32,040 --> 02:23:32,840
They may

1932
02:23:32,840 --> 02:23:36,000
going to ask about W2,
but you have the right to refuse

1933
02:23:36,000 --> 02:23:40,840
because they are not allowed
to ask for that.

1934
02:23:40,840 --> 02:23:44,160
So this is another example of can you guys

1935
02:23:44,560 --> 02:23:47,520
tell me which kind of

1936
02:23:47,520 --> 02:23:55,120
inheritance is used in this example?

1937
02:23:55,120 --> 02:23:58,760
What is W2 form of paycheck?

1938
02:23:58,880 --> 02:24:00,840
No, Alex

1939
02:24:08,560 --> 02:24:11,520
So here's the multi level inheritance.

1940
02:24:11,640 --> 02:24:16,160
So at John is extending from cycle B, D

1941
02:24:16,240 --> 02:24:21,360
is extending from HRT
and then size is extending from there.

1942
02:24:21,560 --> 02:24:25,920
So can you guys tell me
will this floor total,

1943
02:24:25,920 --> 02:24:35,760
will it be available to size?

1944
02:24:35,760 --> 02:24:38,240
Yes, it will be available to Sisyphean

1945
02:24:41,880 --> 02:24:43,920
in multiple inheritance.

1946
02:24:44,760 --> 02:24:47,600
There exist multiple classes,

1947
02:24:48,000 --> 02:24:51,200
multiple parent classes classes

1948
02:24:59,440 --> 02:25:01,760
and single derived class.

1949
02:25:02,120 --> 02:25:05,560
The concept of multiple inheritance

1950
02:25:06,000 --> 02:25:08,520
is not supported in Java

1951
02:25:09,240 --> 02:25:11,520
through the concept of classes,

1952
02:25:12,000 --> 02:25:16,440
but it can be supported
through the concept of interface.

1953
02:25:16,440 --> 02:25:22,000
So this interface is another concept
that we will be discussing next week. Week

1954
02:25:22,120 --> 02:25:26,280
we have this workaround
that we can achieve something similar

1955
02:25:27,360 --> 02:25:29,440
in a better way.

1956
02:25:29,600 --> 02:25:32,240
If you still want to do this

1957
02:25:32,240 --> 02:25:35,800
multiple inheritance thing in your core.

1958
02:25:35,840 --> 02:25:39,520
Okay, If you still want to inherit
something from a

1959
02:25:39,520 --> 02:25:43,600
as well as from B as well as from C, D,
or any number of classes.

1960
02:25:44,000 --> 02:25:46,840
There is a workaround and that workaround

1961
02:25:46,840 --> 02:25:48,920
is with the help of interfaces

1962
02:25:50,400 --> 02:25:53,160
and the interfaces,
they have also a mechanism

1963
02:25:53,160 --> 02:25:57,000
to solve the diamond problem,

1964
02:25:57,000 --> 02:26:00,840
to reduce the complexity and simplify
the language.

1965
02:26:00,840 --> 02:26:05,040
Multiple inheritance is not supported in.

1966
02:26:05,040 --> 02:26:05,960
Java.

1967
02:26:07,160 --> 02:26:08,520
Consider a scenario

1968
02:26:08,520 --> 02:26:11,560
where A, B and C are three classes.

1969
02:26:11,600 --> 02:26:15,920
The C class inherits A and, B class

1970
02:26:15,920 --> 02:26:19,240
if A and B classes have same

1971
02:26:19,240 --> 02:26:22,720
method, same

1972
02:26:23,920 --> 02:26:28,440
name method,
and you call it from child class object,

1973
02:26:28,440 --> 02:26:31,440
there will be an ambiguity

1974
02:26:32,640 --> 02:26:35,760
to which method
from A or B should be called.

1975
02:26:37,680 --> 02:26:39,000
Okay.

1976
02:26:39,000 --> 02:26:47,080
Now you are lost in diamond
problem are multiple inheritance.

1977
02:26:47,080 --> 02:26:49,680
Or if you can tell me this slide number

1978
02:26:51,720 --> 02:26:54,760
words the difference between multi level

1979
02:26:55,440 --> 02:26:57,920
and a multiple inheritance.

1980
02:26:58,800 --> 02:27:01,800
Can someone tell Mariam the difference why

1981
02:27:01,800 --> 02:27:05,760
there should be multiple parents
if everything can be done with one parent?

1982
02:27:06,000 --> 02:27:07,360
So for other it is.

1983
02:27:07,360 --> 02:27:10,760
Sometimes it can happen
that maybe some of the methods

1984
02:27:10,920 --> 02:27:15,080
only present in class
C, some of the methods are only present

1985
02:27:15,080 --> 02:27:18,880
in class B,
and now you lock all those matters.

1986
02:27:19,200 --> 02:27:22,320
So in that scenario will be needing

1987
02:27:23,240 --> 02:27:26,160
you will be inheriting
from multiple classes

1988
02:27:28,760 --> 02:27:30,760
multi-level go from main

1989
02:27:30,760 --> 02:27:33,400
to child and child or grandchild.

1990
02:27:35,040 --> 02:27:37,320
I wish we have live examples

1991
02:27:37,720 --> 02:27:40,560
so far multiple
because it is not supported

1992
02:27:40,760 --> 02:27:43,520
and because you guys don't know
about the interfaces.

1993
02:27:43,840 --> 02:27:46,200
So even if I showed the example.

1994
02:27:46,200 --> 02:27:47,760
So first it is not possible.

1995
02:27:47,760 --> 02:27:49,320
So we will not be able to do that.

1996
02:27:49,320 --> 02:27:51,600
Only thing that I can show you is that

1997
02:27:54,000 --> 02:27:54,720
so. Let's say for

1998
02:27:54,720 --> 02:27:58,000
example,
this dog is already extending from animal

1999
02:27:58,560 --> 02:28:01,800
and now if you try to extend it
from there.

2000
02:28:02,880 --> 02:28:05,640
So now in here, which type of inheritance

2001
02:28:05,640 --> 02:28:14,520
I am trying to achieve, Guys.

2002
02:28:14,520 --> 02:28:15,320
So I am.

2003
02:28:15,320 --> 02:28:19,320
But it is not supported
through classes and.

2004
02:28:19,320 --> 02:28:23,240
If even if it is supported
with the help of

2005
02:28:24,400 --> 02:28:26,200
interfaces,

2006
02:28:26,920 --> 02:28:28,400
it's not that perfect.

2007
02:28:28,400 --> 02:28:30,080
It's just a workaround.

2008
02:28:30,080 --> 02:28:30,640
Okay.

2009
02:28:30,640 --> 02:28:34,080
That you can use if you want.

2010
02:28:34,080 --> 02:28:36,120
So it is not supported

2011
02:28:36,120 --> 02:28:40,840
through classes.

2012
02:28:40,840 --> 02:28:43,920
So we are learning this,
but no, don't need to use

2013
02:28:44,880 --> 02:28:47,720
sometimes if you badly need this

2014
02:28:48,360 --> 02:28:52,520
you can go with the interfaces
but it is never recommended.

2015
02:28:52,520 --> 02:28:53,280
It is.

2016
02:28:53,440 --> 02:28:57,200
It's always a bad practice
to have multiple inheritance

2017
02:28:57,200 --> 02:29:01,000
so yes, you guys will not be needing
it, but you should it.

2018
02:29:02,760 --> 02:29:03,080
We will

2019
02:29:03,080 --> 02:29:05,400
do never know what the interviewer can ask

2020
02:29:06,200 --> 02:29:09,920
to which type inheritance
I am trying to do in here.

2021
02:29:10,520 --> 02:29:15,560
I am making this dog
extend from animal and get you.

2022
02:29:15,560 --> 02:29:19,320
Can you tell me what type of inheritance
I am trying to do in here?

2023
02:29:21,160 --> 02:29:23,320
It's multi word

2024
02:29:23,360 --> 02:29:26,240
file or level

2025
02:29:30,240 --> 02:29:32,720
is the multiple inheritance.

2026
02:29:32,720 --> 02:29:33,680
Right?

2027
02:29:33,760 --> 02:29:36,040
So this is not allowed in Java.

2028
02:29:36,040 --> 02:29:37,360
Okay. So

2029
02:29:38,600 --> 02:29:40,560
we will be getting an error.

2030
02:29:40,560 --> 02:29:44,720
And if if I do this

2031
02:29:46,520 --> 02:29:48,840
so dog is extending from animal

2032
02:29:49,920 --> 02:29:52,680
and if I where is that gap class

2033
02:30:00,800 --> 02:30:05,160
and if I say that extends from dog

2034
02:30:06,240 --> 02:30:09,480
Oops dog.

2035
02:30:09,480 --> 02:30:11,480
Now can you guys tell me what

2036
02:30:11,480 --> 02:30:14,640
type, which type of inheritance
is being used in here?

2037
02:30:16,280 --> 02:30:20,160
So now we have
B might be level inheritance.

2038
02:30:20,160 --> 02:30:21,480
Okay, so

2039
02:30:24,040 --> 02:30:26,880
it is extending from dog and then dog,

2040
02:30:27,640 --> 02:30:31,000
whereas dog dog is extending from animal.

2041
02:30:31,080 --> 02:30:33,240
Okay, So now we have multi-level

2042
02:30:34,520 --> 02:30:46,920
inheritance.

2043
02:30:46,920 --> 02:30:48,560
Okay, so this is also important

2044
02:30:48,560 --> 02:30:52,480
since compile time
errors are better than runtime errors.

2045
02:30:52,480 --> 02:30:53,760
Can you guys tell me why?

2046
02:30:53,760 --> 02:31:03,840
Why compile time
errors are better than runtime errors.

2047
02:31:03,840 --> 02:31:08,680
Sorry, no rest memory.

2048
02:31:09,720 --> 02:31:13,680
They are actually waste of memory,
money and time.

2049
02:31:14,040 --> 02:31:15,600
So less of them guys.

2050
02:31:15,600 --> 02:31:17,920
You have a

2051
02:31:20,080 --> 02:31:23,840
you have an error
that only occurs on the runtime

2052
02:31:23,840 --> 02:31:26,480
and when the user is trying to run
that application.

2053
02:31:26,480 --> 02:31:27,120
Okay.

2054
02:31:27,240 --> 02:31:29,560
So the developers have already developed

2055
02:31:29,560 --> 02:31:32,440
the application,
the testers have already tested it,

2056
02:31:33,360 --> 02:31:37,320
they deployed it on the US server
staging server production server,

2057
02:31:37,760 --> 02:31:42,680
everything is done and now an actual user
is trying to use that application.

2058
02:31:42,960 --> 02:31:46,040
Now that user is getting that issue
right now.

2059
02:31:46,520 --> 02:31:52,000
We first of all, it can cause millions
if you are having this issue now.

2060
02:31:52,040 --> 02:31:55,920
Second of all, if second,
if you have to fix that issue,

2061
02:31:55,960 --> 02:31:59,040
you you have to go through so many cycles.

2062
02:31:59,040 --> 02:32:03,680
But if you know
at the time of compilation,

2063
02:32:03,720 --> 02:32:05,920
the moment you are pressing
that player button

2064
02:32:05,920 --> 02:32:09,200
and if the error you can
you can check out the error,

2065
02:32:09,800 --> 02:32:15,040
you can fix it right away and it can avoid
so much frustration, right?

2066
02:32:15,040 --> 02:32:17,280
So much money and time. So that's why

2067
02:32:18,360 --> 02:32:19,960
compile time error.

2068
02:32:19,960 --> 02:32:23,480
They are always preferred over
runtime matters.

2069
02:32:24,440 --> 02:32:28,320
So since compile time
errors are better than runtime

2070
02:32:28,320 --> 02:32:31,440
errors and java renders
compile time error.

2071
02:32:31,440 --> 02:32:35,760
If you inherit two classes
then it means compiler.

2072
02:32:35,760 --> 02:32:36,880
We can see and fix it.

2073
02:32:36,880 --> 02:32:39,240
But the other one
we have to go and find out.

2074
02:32:39,240 --> 02:32:42,000
See what is the problem. Yes,

2075
02:32:42,280 --> 02:32:43,800
once the application is already

2076
02:32:43,800 --> 02:32:46,520
running, it's very hard to find the issue.

2077
02:32:46,800 --> 02:32:48,240
You can only guess the issue.

2078
02:32:48,240 --> 02:32:50,720
So let's say, for example,
if you are trying to use Google

2079
02:32:50,720 --> 02:32:54,080
Chrome and Google Chrome
is not working for some reason right

2080
02:32:54,600 --> 02:32:56,720
now, you cannot debug that. Right?

2081
02:32:57,040 --> 02:33:00,720
So what they do they have these

2082
02:33:01,600 --> 02:33:04,120
this mechanism of

2083
02:33:04,120 --> 02:33:07,200
do you guys see that option
if some of the programs

2084
02:33:07,200 --> 02:33:11,440
they don't work the trial and error
they ask you to send and report.

2085
02:33:12,480 --> 02:33:14,640
So when an application is is running

2086
02:33:15,680 --> 02:33:20,000
what that what developers
do, they write a file in which

2087
02:33:20,040 --> 02:33:23,840
all the steps that the user is doing,

2088
02:33:23,840 --> 02:33:26,760
all of those steps are recorded.

2089
02:33:27,160 --> 02:33:31,840
Okay so we are in which button
you are clicking,

2090
02:33:31,840 --> 02:33:34,600
which button you click first
and then you click next button.

2091
02:33:34,600 --> 02:33:37,000
Then you use this option,
then you use this feature.

2092
02:33:37,360 --> 02:33:40,920
So all of these steps,
they are recorded behind the scenes.

2093
02:33:41,440 --> 02:33:43,960
And when you get that error there,

2094
02:33:44,280 --> 02:33:48,560
the application is asking you that, can I,

2095
02:33:48,880 --> 02:33:53,000
should I send these steps to the developer
so that they can figure this out.

2096
02:33:53,160 --> 02:33:57,120
That's why they need your permission,
because technically, whatever

2097
02:33:57,120 --> 02:34:00,360
you have been doing on that software,
everything was recorded

2098
02:34:02,160 --> 02:34:03,680
and we never had developers.

2099
02:34:05,560 --> 02:34:08,080
Yes. Like
bug report we did in manual testing.

2100
02:34:08,080 --> 02:34:12,960
Yep. So that's why it's it's very hard.

2101
02:34:13,760 --> 02:34:16,280
So whether you have same method
or different,

2102
02:34:16,280 --> 02:34:20,520
there will be done by time at our now
by the way, Google Chrome,

2103
02:34:20,520 --> 02:34:24,640
it also records all of your steps
when you are browsing on Google Chrome.

2104
02:34:26,080 --> 02:34:30,760
So now what is not in inhabitants

2105
02:34:31,440 --> 02:34:34,640
private members of this superclass

2106
02:34:34,640 --> 02:34:38,680
are not inherited by the subclass.

2107
02:34:38,680 --> 02:34:40,920
So private fears,

2108
02:34:40,920 --> 02:34:42,600
private matters.

2109
02:34:42,600 --> 02:34:43,960
They are not in

2110
02:34:45,040 --> 02:34:48,480
the structures
are also not inherited any of us.

2111
02:34:48,480 --> 02:34:49,680
Tell me why. Why?

2112
02:34:49,680 --> 02:34:53,000
It makes like makes sense
that the constructors

2113
02:34:53,000 --> 02:34:59,160
should not participate in inheritance.

2114
02:34:59,160 --> 02:35:01,200
What do you what do you want to do?

2115
02:35:01,200 --> 02:35:07,560
What do constructors, logos?

2116
02:35:07,560 --> 02:35:09,640
It's not the same class name.

2117
02:35:09,640 --> 02:35:11,200
Same class name

2118
02:35:14,120 --> 02:35:18,080
The initialize the fields of a class right

2119
02:35:22,000 --> 02:35:24,120
now if

2120
02:35:24,480 --> 02:35:28,160
if we are inheriting the constructors

2121
02:35:29,280 --> 02:35:31,800
there no point in

2122
02:35:32,640 --> 02:35:34,800
initializing the fields

2123
02:35:34,800 --> 02:35:38,400
in the child class because child
might be having some other fields

2124
02:35:38,400 --> 02:35:42,000
and it might initialize
only two fields, three fields.

2125
02:35:42,440 --> 02:35:45,040
So what happens is that Java allows

2126
02:35:45,680 --> 02:35:49,320
to call the constructor
from a child class,

2127
02:35:49,320 --> 02:35:52,320
but it is not inherited
inside of the child class.

2128
02:35:52,560 --> 02:35:54,600
We will learn about this in the next class

2129
02:35:55,400 --> 02:35:57,840
and about the protected keyword as well.

2130
02:35:58,200 --> 02:36:00,400
But I can show you the protected giver

2131
02:36:02,040 --> 02:36:05,160
before we are done

2132
02:36:05,160 --> 02:36:07,840
with this class. So

2133
02:36:10,800 --> 02:36:14,160
let me make

2134
02:36:16,560 --> 02:36:18,600
this class

2135
02:36:18,760 --> 02:36:24,360
a variable as private.

2136
02:36:24,360 --> 02:36:27,800
Okay,
So you guys see, as soon as I make this,

2137
02:36:28,640 --> 02:36:32,160
we use the expense keyword as well.

2138
02:36:32,160 --> 02:36:35,520
And inheritance
can be a lot of players. Yes.

2139
02:36:35,800 --> 02:36:41,400
So as soon as I made this private,

2140
02:36:41,400 --> 02:36:45,360
you guys can not extend
extend that field in the class

2141
02:36:46,320 --> 02:36:47,800
because now it's private.

2142
02:36:47,800 --> 02:36:51,640
So it means if make something as private,

2143
02:36:52,440 --> 02:37:01,280
they don't participate in the inheritance.

2144
02:37:01,280 --> 02:37:03,440
So let me remove that

2145
02:37:15,960 --> 02:37:18,440
and bring it up

2146
02:37:18,440 --> 02:37:22,240
and ready to it.

2147
02:37:22,240 --> 02:37:25,280
And now the difference between protected

2148
02:37:29,000 --> 02:37:30,600
and the default.

2149
02:37:30,600 --> 02:37:35,600
So this annual class right now,
it is present in package number 18.

2150
02:37:35,920 --> 02:37:39,240
So when using do not make private.

2151
02:37:39,280 --> 02:37:41,080
No, not make private.

2152
02:37:41,080 --> 02:37:45,560
But if you are planning to share
that information

2153
02:37:45,560 --> 02:37:51,480
with your child classes,
then you should not make it private.

2154
02:37:51,480 --> 02:37:54,400
So guys, right now,

2155
02:37:54,680 --> 02:37:58,240
guys, I want you to focus right now
this field.

2156
02:37:58,240 --> 02:38:01,920
I have made this protected field
so I am not getting any issues.

2157
02:38:03,760 --> 02:38:07,240
If I am inside the same package right

2158
02:38:07,240 --> 02:38:11,200
now, all the classes,
they are inside this inheritance right.

2159
02:38:11,200 --> 02:38:15,240
But what what happens if I move this dog

2160
02:38:16,440 --> 02:38:17,400
in a different

2161
02:38:17,400 --> 02:38:25,440
package? Now

2162
02:38:27,960 --> 02:38:34,480
I am having issues on color,
so I am having an issue on color.

2163
02:38:34,480 --> 02:38:36,840
Guys.

2164
02:38:36,840 --> 02:38:39,600
Well, it is having a default access.

2165
02:38:40,400 --> 02:38:43,040
What happens when we move something

2166
02:38:43,200 --> 02:38:46,040
from a package to a different package

2167
02:38:46,040 --> 02:38:49,000
and the access modifier is protect

2168
02:38:49,280 --> 02:38:55,080
is is default.

2169
02:38:55,080 --> 02:38:57,520
It will not be accessible. Right.

2170
02:38:58,200 --> 02:39:00,960
But what what what are what is happening

2171
02:39:00,960 --> 02:39:03,400
with the breed guys, you see this breed.

2172
02:39:04,160 --> 02:39:07,960
We are not getting the error on breed.

2173
02:39:07,960 --> 02:39:09,800
We are not getting the error on breed.

2174
02:39:09,800 --> 02:39:13,200
So if you want to something

2175
02:39:13,200 --> 02:39:16,360
in a different package,

2176
02:39:16,440 --> 02:39:18,880
but only with the classes

2177
02:39:19,760 --> 02:39:23,920
which inherit from your class,
you make it protected

2178
02:39:25,200 --> 02:39:25,520
macro.

2179
02:39:25,520 --> 02:39:30,320
You make it protected
because defaults are not accessible

2180
02:39:30,320 --> 02:39:35,520
outside of the package
and publics are accessible everywhere.

2181
02:39:36,120 --> 02:39:39,880
Now what if you want to make something

2182
02:39:40,200 --> 02:39:43,200
available only the child classes

2183
02:39:44,280 --> 02:39:45,960
and you want to make sure

2184
02:39:45,960 --> 02:39:49,440
that even
if they are in a different package,

2185
02:39:50,200 --> 02:39:52,680
they it is it of this field

2186
02:39:52,680 --> 02:39:56,280
is available to those child
but only to those child.

2187
02:39:56,280 --> 02:40:00,000
If there is another class,
it is not available to that class.

2188
02:40:00,000 --> 02:40:02,720
If you make it public,
it will be available to everyone.

2189
02:40:03,320 --> 02:40:05,560
But if you make it protected,

2190
02:40:06,160 --> 02:40:09,000
only your child can access it.

2191
02:40:09,360 --> 02:40:14,000
Whether it is inside the same package,
whether it is outside of that package.

2192
02:40:14,000 --> 02:40:17,400
Okay,
so there's the functionality of protected,

2193
02:40:19,280 --> 02:40:22,480
but it makes sense, guys.

2194
02:40:22,480 --> 02:40:26,000
If you want to feed your child,
you need to protect

2195
02:40:26,000 --> 02:40:29,520
first. Yes.

2196
02:40:29,520 --> 02:40:31,440
Can we do examples of this tomorrow?

2197
02:40:31,440 --> 02:40:33,040
Yep. Sure.

2198
02:40:33,040 --> 02:40:34,640
Yeah.

2199
02:40:34,640 --> 02:40:38,240
So let me move this dog
back to the same package

2200
02:40:39,840 --> 02:40:41,640
and now all the arrows up.

2201
02:40:42,640 --> 02:40:43,840
Yes, there is a homework.

2202
02:40:43,840 --> 02:40:44,280
Well,

2203
02:40:49,320 --> 02:40:52,120
can you guys give me just find one
winners.

2204
02:40:52,440 --> 02:40:54,800
So members that have default.

2205
02:40:54,800 --> 02:40:58,160
Accessibility in the superclass are also

2206
02:40:58,440 --> 02:41:01,560
not inherited

2207
02:41:01,560 --> 02:41:04,800
by subclasses in other packages,

2208
02:41:04,920 --> 02:41:08,760
so the child can go away to college
and still take from the parents.

2209
02:41:08,760 --> 02:41:13,560
Yes, my.

2210
02:41:13,560 --> 02:41:18,840
As these members are only accessible by
their simple names in this have classes.

2211
02:41:18,840 --> 02:41:19,080
Okay.

2212
02:41:19,080 --> 02:41:21,480
So this is what it means
if you make default,

2213
02:41:21,760 --> 02:41:23,960
it will not be available
in a different package.

2214
02:41:24,680 --> 02:41:27,960
Should the classes
be already assigned to parent

2215
02:41:27,960 --> 02:41:30,640
then change to variable protected

2216
02:41:32,000 --> 02:41:34,440
so the classes will be
already assigned to parent.

2217
02:41:34,880 --> 02:41:38,680
What do you mean by assign classes
that are assigned to parent

2218
02:41:40,000 --> 02:41:42,520
and then change to variable protected

2219
02:41:45,480 --> 02:41:47,360
like in the last
thing which we make you see

2220
02:41:48,600 --> 02:41:51,840
since
constructors and any slider blocks are not

2221
02:41:51,840 --> 02:41:55,760
members of the class,
they are not inhabited by a subclass.

2222
02:41:55,800 --> 02:42:00,560
If subclass can extend only one
super class.

2223
02:42:00,960 --> 02:42:03,600
Okay, so let me share

2224
02:42:03,600 --> 02:42:15,240
the tasks with you.

2225
02:42:15,240 --> 02:42:18,600
I will share so tomorrow or tomorrow

2226
02:42:18,600 --> 02:42:21,120
the very simple class

2227
02:42:29,480 --> 02:42:33,240
or the in very simple class

2228
02:42:33,760 --> 02:42:38,400
voting for.

2229
02:42:38,400 --> 02:42:45,480
Okay, so are there any questions guys?

2230
02:42:45,480 --> 02:42:47,640
I like very simple classes.

2231
02:42:47,640 --> 02:42:51,880
What if we move the child
class to a different class?

2232
02:42:51,880 --> 02:42:54,000
Is it still accessible with protected

2233
02:42:55,640 --> 02:42:57,120
move to a different class?

2234
02:42:57,120 --> 02:42:59,800
But maybe you mean different package?

2235
02:43:00,760 --> 02:43:04,240
Yes, it will still be accessible

2236
02:43:05,360 --> 02:43:05,600
there.

2237
02:43:05,760 --> 02:43:06,240
Simple.

2238
02:43:06,240 --> 02:43:09,520
So we'll ask for this class. Hard.

2239
02:43:09,520 --> 02:43:13,960
It's a simple question.

2240
02:43:13,960 --> 02:43:15,640
All right, guys, take some of the above.

2241
02:43:15,640 --> 02:43:17,880
I see you tomorrow, Will. Right

2242
02:43:19,040 --> 02:43:19,880
now then inherit.

2243
02:43:19,880 --> 02:43:22,800
But why do you smile and don't comment

2244
02:43:24,640 --> 02:43:26,160
then If you are, you also know

2245
02:43:26,160 --> 02:43:29,160
someone in the previous badges.

2246
02:43:29,520 --> 02:43:31,560
Please don't make my students afraid

2247
02:43:31,800 --> 02:43:34,080
of that polymorphic

2248
02:43:38,760 --> 02:43:40,760
in the class and ask M.A.

2249
02:43:40,760 --> 02:43:41,880
Now's a good

2250
02:43:48,800 --> 02:43:50,040
I will share business.

2251
02:43:50,040 --> 02:43:50,880
Aisha.

2252
02:43:51,360 --> 02:43:56,640
I will share for previous classes
the difference between multiple

2253
02:43:56,640 --> 02:44:01,320
and multilevel from what
I will explain in the next next class.
