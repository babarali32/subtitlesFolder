1
00:00:52,800 --> 00:00:54,840
I hope you guys are doing great.

2
00:00:54,840 --> 00:01:02,120
Checking to check that.

3
00:01:02,120 --> 00:01:20,640
Malik Salam Sharif, how are you?

4
00:01:24,360 --> 00:01:28,040
13 120 So, yes.

5
00:01:29,200 --> 00:01:31,800
Aisha, you should only see rebels still.

6
00:01:31,800 --> 00:01:35,680
One 2030

7
00:01:35,680 --> 00:01:39,080
I will release the rebels on the variables

8
00:01:41,640 --> 00:01:43,320
keyword

9
00:01:43,880 --> 00:01:47,760
access modifiers,
constructors, this keyword

10
00:01:49,440 --> 00:01:53,360
so I will release around

11
00:01:53,360 --> 00:01:58,200
30 more rebels today.

12
00:01:58,200 --> 00:02:01,680
And then for your quiz,
I think the quiz is also ready.

13
00:02:02,600 --> 00:02:06,720
I see more than 120.

14
00:02:06,720 --> 00:02:12,080
So those are the rebels that you see
after 120.

15
00:02:12,080 --> 00:02:13,800
They are the previous batch.

16
00:02:13,800 --> 00:02:17,680
So you guys are only supposed to solve
until 120

17
00:02:36,840 --> 00:02:40,160
Is the quiz

18
00:02:50,240 --> 00:02:55,200
rate is 11 two days for think.

19
00:02:55,200 --> 00:03:12,600
So let me give you one week for this quiz.

20
00:03:12,600 --> 00:03:14,640
Just keep an eye on the deadline.

21
00:03:14,640 --> 00:03:17,520
Is there a mistake on 119?

22
00:03:17,560 --> 00:03:18,880
Answer why?

23
00:03:18,880 --> 00:03:23,080
Mohammed Mine stops
and one one line and skips to 127.

24
00:03:23,080 --> 00:03:32,200
Should I see 120 as well?

25
00:03:32,200 --> 00:03:34,920
And yes, you guys should see this as well.

26
00:03:35,960 --> 00:03:40,200
The 121 that is related to variables.

27
00:03:40,880 --> 00:03:41,240
Okay.

28
00:03:41,600 --> 00:03:45,440
I did one our time off with two
and now it does not

29
00:03:45,440 --> 00:03:48,800
show me the results

30
00:03:49,280 --> 00:03:50,200
or not.

31
00:03:50,400 --> 00:03:53,840
The new day was last night.

32
00:03:54,600 --> 00:03:57,000
So if you go to that, I, I take

33
00:03:57,080 --> 00:04:00,080
now you can see the results

34
00:04:00,080 --> 00:04:02,520
because the example
and if you don't see the results

35
00:04:02,880 --> 00:04:06,960
shared a screenshot
in the course in the syntax sport down

36
00:04:07,560 --> 00:04:10,440
because the example of code
does not match the answer

37
00:04:10,720 --> 00:04:22,680
for computer signs.

38
00:04:22,680 --> 00:04:28,920
So you guys don't see this
number one quantity.

39
00:04:28,920 --> 00:04:32,040
Let me and publish
your candidate can publish it again

40
00:04:36,280 --> 00:04:37,880
and does not show me.

41
00:04:37,880 --> 00:04:39,600
Just check now

42
00:04:40,320 --> 00:04:48,240
checking out those
who don't see the results.

43
00:04:48,240 --> 00:04:51,920
Are there any other issues
that you guys want to discuss

44
00:04:51,960 --> 00:04:55,880
before the class?

45
00:04:55,880 --> 00:04:59,880
Yes, you if you guys don't see 120,
you have a lot of

46
00:04:59,880 --> 00:05:28,320
and then you have to log in again.

47
00:05:28,320 --> 00:05:31,120
All right. So we are left.

48
00:05:32,440 --> 00:05:35,120
So this week

49
00:05:35,120 --> 00:05:38,480
there will be two classes
and then two classes in the next week.

50
00:05:39,000 --> 00:05:43,400
And from 30 you guys will be starting
the selenium classes.

51
00:05:43,960 --> 00:05:46,280
So guys, you still have two weeks

52
00:05:47,040 --> 00:05:49,800
before you start the selenium classes.

53
00:05:50,400 --> 00:05:52,840
You should know all the Java concepts

54
00:05:53,400 --> 00:05:56,880
that I have been teaching to you
or I'll have property.

55
00:05:56,880 --> 00:05:57,240
Okay?

56
00:05:57,240 --> 00:06:01,560
Otherwise the selenium classes,
they will be very tough for you

57
00:06:01,640 --> 00:06:07,080
because in here you guys will be using
all the concepts, all those loops, arrays,

58
00:06:07,960 --> 00:06:11,600
classes, methods and everything
that you guys have learned to build

59
00:06:12,000 --> 00:06:16,560
some applications which will actually be
doing something useful.

60
00:06:16,680 --> 00:06:17,440
Yeah.

61
00:06:17,440 --> 00:06:20,880
Like for example,
opening the browsers on your computer,

62
00:06:21,360 --> 00:06:26,760
clicking on different buttons on websites
and you guys can write an email

63
00:06:27,000 --> 00:06:32,160
or whatever you can do manually
on your computer inside your browser.

64
00:06:32,360 --> 00:06:36,120
Almost everything you guys will be able to
do using your Java code.

65
00:06:36,720 --> 00:06:41,640
And if your Java skills are not code,
you guys will not be able to write better

66
00:06:41,640 --> 00:06:46,240
programs or you guys will not be able to
even you guys will not even

67
00:06:47,240 --> 00:06:47,800
be able to

68
00:06:47,800 --> 00:06:50,880
understand the code that the instructors
will be writing for you.

69
00:06:51,560 --> 00:06:55,360
So you guys still have to make sure
that everything is good

70
00:06:56,440 --> 00:07:00,080
and you guys
and you guys have some practice before

71
00:07:00,120 --> 00:07:12,640
you start your selenium classes.

72
00:07:12,640 --> 00:07:13,240
All right.

73
00:07:13,240 --> 00:07:15,760
So today is class number 17

74
00:07:18,640 --> 00:07:21,680
and there are 10 to 12 more Java classes.

75
00:07:21,680 --> 00:07:25,840
So you guys are also
almost also done with Java.

76
00:07:25,840 --> 00:07:29,120
So make sure you guys are not for

77
00:07:29,280 --> 00:07:32,760
not for not forgetting
what we are teaching to you.

78
00:07:33,400 --> 00:07:36,080
Otherwise, as you move

79
00:07:36,080 --> 00:07:38,400
through this course,

80
00:07:38,400 --> 00:07:42,000
things will get messy for you.

81
00:07:42,000 --> 00:07:44,200
Mohammad please post in this for channel.

82
00:07:45,200 --> 00:07:47,200
So today is class number

83
00:07:48,240 --> 00:07:50,520
and at the end of today's class

84
00:07:51,200 --> 00:07:55,240
I will also share two videos on

85
00:07:56,280 --> 00:08:00,480
one will show you the instructions
on how to install the intelligent

86
00:08:00,960 --> 00:08:05,960
and the other one will show you how to use
the basic features of the intelligent.

87
00:08:06,000 --> 00:08:08,720
So right to watch those videos as well.

88
00:08:08,720 --> 00:08:13,400
Before you do this class, various

89
00:08:13,400 --> 00:08:27,120
class number 17.

90
00:08:27,120 --> 00:08:30,240
So let's quickly realize the concepts

91
00:08:35,320 --> 00:08:39,040
that we check if we can

92
00:08:53,320 --> 00:08:55,960
know we can't

93
00:08:56,760 --> 00:08:57,800
open intelligent

94
00:08:57,800 --> 00:09:34,880
for there.

95
00:09:34,880 --> 00:09:35,640
All right, guys.

96
00:09:35,640 --> 00:09:38,600
So yesterday is this Hondo

97
00:09:39,000 --> 00:09:42,600
question, please revisit
why is second modifier

98
00:09:43,160 --> 00:09:47,800
to a method, say a static
when there is already a public so now

99
00:09:47,840 --> 00:09:52,520
Well first
the static is not an excess modifier.

100
00:09:53,160 --> 00:09:57,480
Static final synchronized abstract

101
00:09:57,960 --> 00:10:03,720
they are all known access modifiers
while public private protected

102
00:10:04,080 --> 00:10:08,240
they are access modifiers.

103
00:10:08,240 --> 00:10:11,920
So that's why we can have
a non access modifier

104
00:10:11,920 --> 00:10:14,200
and an access modifier

105
00:10:15,000 --> 00:10:32,320
in in a single matter.

106
00:10:32,320 --> 00:10:36,960
All right, guys, what do you guys remember
about the access modifiers?

107
00:10:37,960 --> 00:10:48,160
Well, what is access modification?

108
00:10:48,160 --> 00:10:51,200
And giving access or controlling access

109
00:10:51,200 --> 00:10:56,120
may be more appropriate, right?

110
00:10:56,120 --> 00:10:59,320
Or maybe limiting access.

111
00:10:59,320 --> 00:11:00,120
It's fine.

112
00:11:00,120 --> 00:11:04,200
I we have just started.

113
00:11:04,200 --> 00:11:07,720
So access modifiers, they are keywords

114
00:11:09,200 --> 00:11:13,560
with control.

115
00:11:13,560 --> 00:11:16,080
The access or

116
00:11:18,320 --> 00:11:20,160
members, right?

117
00:11:20,160 --> 00:11:22,560
Or what are members guys

118
00:11:22,560 --> 00:11:24,680
what is,
what does this member keyword mean.

119
00:11:25,920 --> 00:11:33,120
So keywords, keywords

120
00:11:33,120 --> 00:11:36,720
which control the access of

121
00:11:38,280 --> 00:11:40,800
members of the blocks.

122
00:11:40,920 --> 00:11:44,000
Can you guys tell me
an example of a member of a class

123
00:11:50,080 --> 00:11:52,840
so matter to the member of the class?

124
00:11:52,840 --> 00:11:53,680
Right?

125
00:11:54,200 --> 00:11:55,880
Variable is a member of class.

126
00:11:55,880 --> 00:11:58,720
Everything that we define

127
00:11:58,720 --> 00:12:00,680
inside a class,

128
00:12:00,680 --> 00:12:03,800
they are called members of desks
in that class.

129
00:12:03,800 --> 00:12:04,760
Okay, so

130
00:12:05,560 --> 00:12:08,160
they can be creoles,

131
00:12:09,400 --> 00:12:12,600
they can be methods, they can be

132
00:12:16,160 --> 00:12:16,800
instructors.

133
00:12:16,800 --> 00:12:18,880
Today we will learn about the constructor.

134
00:12:19,560 --> 00:12:23,040
Today we will learn about the constructor

135
00:12:24,560 --> 00:12:28,000
and how many access levels we have in Java

136
00:12:31,320 --> 00:12:35,240
or right.

137
00:12:35,240 --> 00:12:37,680
We have more

138
00:12:39,880 --> 00:12:43,440
access levels in Java.

139
00:12:44,120 --> 00:12:49,720
And how many keywords are there
to control these for access levels?

140
00:12:50,360 --> 00:12:55,480
How many keywords we have?

141
00:12:55,480 --> 00:12:57,240
We have three keywords. Okay.

142
00:12:57,240 --> 00:13:00,720
Not for the default is not a keyword.

143
00:13:01,560 --> 00:13:03,920
If we don't specify anything

144
00:13:03,920 --> 00:13:07,400
that's alert, that's when we mean default.

145
00:13:07,400 --> 00:13:11,040
Okay,
so there are four access levels in Java

146
00:13:12,000 --> 00:13:14,320
and to be

147
00:13:15,520 --> 00:13:17,640
keywords to

148
00:13:17,640 --> 00:13:22,920
control, to

149
00:13:22,920 --> 00:13:27,480
control these access levels.

150
00:13:27,720 --> 00:13:28,560
Okay.

151
00:13:29,040 --> 00:13:31,320
And if I ask you what

152
00:13:31,320 --> 00:13:35,720
is the most restrictive access,
what is the keyword

153
00:13:35,720 --> 00:13:38,640
that we use for most restrictive access?

154
00:13:39,840 --> 00:13:42,040
So we have the

155
00:13:42,120 --> 00:13:46,600
okay, so we have the private

156
00:13:46,800 --> 00:13:50,280
and what comes after private

157
00:13:57,680 --> 00:14:01,440
be protected.

158
00:14:01,440 --> 00:14:14,880
Then we have the default,
which is not a keyword,

159
00:14:14,880 --> 00:14:17,160
and then we have

160
00:14:18,600 --> 00:14:20,400
the public ones, right?

161
00:14:20,400 --> 00:14:29,160
So let's discuss about describing.

162
00:14:29,160 --> 00:14:35,400
So what happens, guys,
if I write this private keyword

163
00:14:35,640 --> 00:14:39,280
with a method or a field,
what happens to that

164
00:14:39,280 --> 00:14:42,640
feel field or method

165
00:14:51,480 --> 00:14:53,040
only in class,

166
00:14:53,040 --> 00:14:56,400
It can only be accessed
inside the same class.

167
00:14:58,160 --> 00:15:02,040
So if we write

168
00:15:03,560 --> 00:15:06,240
for either keyword

169
00:15:06,240 --> 00:15:08,840
with any class

170
00:15:08,840 --> 00:15:13,160
number,

171
00:15:13,160 --> 00:15:15,240
you can be

172
00:15:17,280 --> 00:15:19,320
accessed only

173
00:15:21,360 --> 00:15:23,720
in that class.

174
00:15:23,840 --> 00:15:27,480
Yes. Then we access on in this class

175
00:15:32,160 --> 00:15:33,120
and we we

176
00:15:33,120 --> 00:15:36,320
are not discussing the protective one
we will use.

177
00:15:36,320 --> 00:15:38,640
This class will be on inheritance

178
00:15:38,640 --> 00:15:42,840
and then the end of that class
I will discuss about the protected one.

179
00:15:42,840 --> 00:15:45,000
Remind me if I forget.

180
00:15:45,000 --> 00:15:52,560
Okay, so then we have the default one.

181
00:15:52,560 --> 00:15:56,120
What happens if I, if I don't provide

182
00:15:56,120 --> 00:15:59,240
any keyword, any access modifier

183
00:15:59,280 --> 00:16:04,680
with the member of the class, it's

184
00:16:04,680 --> 00:16:07,000
accessible in same package.

185
00:16:07,840 --> 00:16:11,760
Within that package.

186
00:16:11,760 --> 00:16:16,080
So if we write, if we

187
00:16:17,440 --> 00:16:20,720
do not write name

188
00:16:21,280 --> 00:16:25,120
keyword with

189
00:16:25,440 --> 00:16:30,600
class members,

190
00:16:30,600 --> 00:16:36,360
we can access those members

191
00:16:39,880 --> 00:16:42,160
inside

192
00:16:43,440 --> 00:16:45,960
the same class and

193
00:16:47,000 --> 00:16:49,320
in any other

194
00:16:52,040 --> 00:16:54,600
any other class

195
00:16:54,600 --> 00:16:58,440
inside the same

196
00:17:07,160 --> 00:17:09,480
even in the same page

197
00:17:09,480 --> 00:17:24,760
package. Yes.

198
00:17:24,760 --> 00:17:33,320
Then we have the public.

199
00:17:33,320 --> 00:17:34,200
Public Uber.

200
00:17:34,200 --> 00:17:37,480
Okay, what happens, guys, if I, if I write

201
00:17:37,480 --> 00:17:41,240
the public keyword, it is universal,
right?

202
00:17:41,480 --> 00:17:47,280
Can be accessed everywhere
inside the program.

203
00:17:47,280 --> 00:17:48,640
If we use

204
00:17:52,000 --> 00:17:55,360
public keyword

205
00:17:56,400 --> 00:17:58,920
with and

206
00:17:58,920 --> 00:18:03,440
class member, that member

207
00:18:05,640 --> 00:18:09,960
is accessible

208
00:18:13,600 --> 00:18:15,280
and we will

209
00:18:22,960 --> 00:18:29,000
be in the anti project

210
00:18:30,160 --> 00:18:33,720
or quality best practices

211
00:18:34,200 --> 00:18:34,320
here.

212
00:18:34,320 --> 00:18:38,080
They always make my field private

213
00:18:38,080 --> 00:18:40,200
or public or default

214
00:18:43,200 --> 00:18:44,040
or should be the best

215
00:18:44,040 --> 00:18:51,560
practice guides for the fields.

216
00:18:51,560 --> 00:18:53,160
Always

217
00:18:54,480 --> 00:18:58,960
try to declare the fields as

218
00:19:01,720 --> 00:19:06,480
as private.

219
00:19:06,480 --> 00:19:08,080
Always

220
00:19:09,120 --> 00:19:10,440
or to

221
00:19:11,240 --> 00:19:13,160
declare be

222
00:19:15,120 --> 00:19:17,120
methods as

223
00:19:20,520 --> 00:19:21,280
as public.

224
00:19:21,280 --> 00:19:24,160
Okay.

225
00:19:24,160 --> 00:19:26,800
Or you can see

226
00:19:32,360 --> 00:19:33,040
more.

227
00:19:34,680 --> 00:19:39,040
Most of the methods are

228
00:19:42,360 --> 00:19:44,040
declared

229
00:19:45,880 --> 00:19:46,960
as public,

230
00:19:46,960 --> 00:19:49,080
but sometimes you guys will be

231
00:19:50,640 --> 00:19:52,600
declaring the private methods as well.

232
00:19:52,600 --> 00:19:56,080
So let's say, for example,
if you are writing a method

233
00:19:56,520 --> 00:20:02,360
and you know that this method is specific
to that class, only

234
00:20:03,440 --> 00:20:05,680
then there is no need

235
00:20:05,680 --> 00:20:08,280
to make those matters as

236
00:20:09,400 --> 00:20:10,560
public.

237
00:20:10,600 --> 00:20:14,640
Can you please again clear
from yesterday's accounts task and task to

238
00:20:14,640 --> 00:20:19,160
the we're not we are not same approach.

239
00:20:19,160 --> 00:20:21,600
I want to understand
how to choose approach.

240
00:20:22,680 --> 00:20:23,280
Any place

241
00:20:23,280 --> 00:20:26,080
I can clear from yesterday's
account class.

242
00:20:27,000 --> 00:20:29,880
Now, what do you want me to clear

243
00:20:30,720 --> 00:20:32,760
Which method is more useful?

244
00:20:32,760 --> 00:20:35,880
Should if it depends on on your program

245
00:20:35,880 --> 00:20:39,320
and depends on your requirements

246
00:20:45,960 --> 00:20:46,560
assignment

247
00:20:46,560 --> 00:20:49,720
that protected keyword
is related to inheritance.

248
00:20:50,000 --> 00:20:53,120
On Tuesday
we will discuss about the inheritance

249
00:20:53,760 --> 00:20:57,000
and then we will call over the perpetual
keyword,

250
00:20:59,040 --> 00:21:01,600
declare private
and change to public later.

251
00:21:02,200 --> 00:21:04,600
No, this is not what we do now.

252
00:21:04,840 --> 00:21:07,960
We are never first to declare
something private and then change it

253
00:21:07,960 --> 00:21:15,040
for public.

254
00:21:15,040 --> 00:21:17,680
What same approach
we don't use in task today.

255
00:21:19,120 --> 00:21:20,760
We don't do that.

256
00:21:20,760 --> 00:21:23,640
So most of the time we use
private or public keyword.

257
00:21:23,640 --> 00:21:27,800
Yes, Most of the time
you guys will be using these bookkeepers.

258
00:21:28,560 --> 00:21:31,840
How about non excess 25?

259
00:21:31,920 --> 00:21:38,080
So up till now you guys have only learned
about one non nexus modifier.

260
00:21:38,080 --> 00:21:39,720
The static one.

261
00:21:39,720 --> 00:21:44,000
And I hope you guys already know
when you should be using this static

262
00:21:44,000 --> 00:21:46,360
and when you should not
be using this static.

263
00:21:46,880 --> 00:21:49,840
If it's not clear sorba,
then you should be using

264
00:21:49,840 --> 00:21:53,320
the static keyword with variables or

265
00:21:55,320 --> 00:21:56,720
everything that turns.

266
00:21:56,720 --> 00:22:01,320
So now we always try to declare the fields
as private.

267
00:22:01,360 --> 00:22:04,200
Okay, we never do this
first will be closed in private,

268
00:22:04,200 --> 00:22:05,960
then change them to public.

269
00:22:05,960 --> 00:22:11,120
And then we most of the time you guys
will be seeing the methods as public.

270
00:22:11,400 --> 00:22:13,800
Okay?

271
00:22:13,800 --> 00:22:16,960
This is the approach that we used
in the task. Be

272
00:22:18,200 --> 00:22:23,840
so in here,

273
00:22:23,840 --> 00:22:27,440
the task task explicitly

274
00:22:28,960 --> 00:22:30,560
in the task, it was explicit,

275
00:22:30,560 --> 00:22:33,840
only asked that
the method should be private.

276
00:22:34,000 --> 00:22:38,240
That's why we made this method as private.

277
00:22:38,360 --> 00:22:39,080
Okay.

278
00:22:39,920 --> 00:22:42,000
Otherwise the best practice is that

279
00:22:42,880 --> 00:22:45,320
we always try to make fields private

280
00:22:45,880 --> 00:22:58,560
and most of the times
the methods they are public.

281
00:22:58,560 --> 00:23:01,880
All right, so

282
00:23:02,320 --> 00:23:05,840
today
we will discuss about the constructors.

283
00:23:05,960 --> 00:23:08,160
So first let me show you the constructor.

284
00:23:08,160 --> 00:23:11,400
What is a constructor?

285
00:23:11,400 --> 00:23:14,400
And for the for the example

286
00:23:14,400 --> 00:23:19,240
for this example,
we will be using the famous class.

287
00:23:19,240 --> 00:23:22,360
What is the most famous class days
that we use?

288
00:23:22,360 --> 00:23:25,520
For examples,

289
00:23:25,520 --> 00:23:32,280
we build class right?

290
00:23:32,280 --> 00:23:32,760
That we know.

291
00:23:32,760 --> 00:23:35,680
Once you guys are
bored with this blog example,

292
00:23:36,720 --> 00:23:39,360
then I will look for another example.

293
00:23:39,720 --> 00:23:41,640
So let's create a dog.

294
00:23:41,640 --> 00:23:50,840
Give us.

295
00:23:50,840 --> 00:23:53,160
How about Bird?

296
00:23:53,160 --> 00:23:56,440
Yes, we will see once you guys are bored.

297
00:23:56,560 --> 00:24:00,240
So we still have almost 13 more classes.

298
00:24:00,240 --> 00:24:06,840
So have you guys watched
the videos on constructors?

299
00:24:07,080 --> 00:24:10,440
And you can you guys tell me a little bit
about the constructor?

300
00:24:10,440 --> 00:24:26,640
What is a constructor?

301
00:24:26,640 --> 00:24:28,240
Same name as class.

302
00:24:28,240 --> 00:24:31,280
Okay, so this is one of the properties
of the constructor.

303
00:24:32,360 --> 00:24:35,480
It's like creating object.

304
00:24:35,480 --> 00:24:37,040
Okay, you are close.

305
00:24:37,040 --> 00:24:43,640
How soon?

306
00:24:43,640 --> 00:24:45,560
All in one is a block?

307
00:24:45,560 --> 00:24:47,480
Of course. Similar to my third.

308
00:24:47,480 --> 00:24:49,160
Yes, that is more formal.

309
00:24:49,160 --> 00:24:52,680
Sebastian.

310
00:24:52,680 --> 00:24:55,440
It is a block of code,
but method is also a block of code.

311
00:24:55,440 --> 00:24:56,640
And then what is the difference?

312
00:24:56,640 --> 00:24:59,520
Constructor is so similar with methods,

313
00:25:00,320 --> 00:25:05,000
but same name as class
and without a written type

314
00:25:06,000 --> 00:25:07,400
similar to a method.

315
00:25:07,400 --> 00:25:12,320
Initialize is object called
an instance of class object created.

316
00:25:12,520 --> 00:25:13,800
All might go there.

317
00:25:13,800 --> 00:25:16,440
That's the perfect definition

318
00:25:16,440 --> 00:25:18,960
and block of code similar to a method
that's called

319
00:25:18,960 --> 00:25:20,800
an instance of an object is creator.

320
00:25:20,800 --> 00:25:24,040
So this is
this is a good definition of code.

321
00:25:24,040 --> 00:25:28,920
Creating too many classes in this same
method are creating

322
00:25:28,920 --> 00:25:33,600
too many classes in the same method.

323
00:25:33,600 --> 00:25:36,480
Now, this is this is this is not correct.

324
00:25:37,800 --> 00:25:42,360
No, it is helpful class with making
less code lines with parameters.

325
00:25:42,480 --> 00:25:45,840
This is a keyword.

326
00:25:45,840 --> 00:25:48,560
They are not classes like matters.

327
00:25:49,920 --> 00:25:53,640
I'll building on

328
00:25:53,640 --> 00:25:55,760
the constructor

329
00:25:55,800 --> 00:25:57,680
is a block of gold.

330
00:25:57,680 --> 00:25:59,960
It is very similar to a method.

331
00:26:00,720 --> 00:26:01,400
Okay.

332
00:26:01,400 --> 00:26:05,880
But it also differs from the method
in many ways.

333
00:26:05,880 --> 00:26:10,560
So the first difference is that in meters
we have the written types,

334
00:26:11,400 --> 00:26:14,360
but the constructors, they don't have any

335
00:26:14,360 --> 00:26:17,520
written types like a method.

336
00:26:17,880 --> 00:26:21,440
It can have any name, but constructors
they have.

337
00:26:21,520 --> 00:26:22,960
They always have these.

338
00:26:24,520 --> 00:26:26,960
They always have a name,

339
00:26:26,960 --> 00:26:30,080
same as of the name of the class.

340
00:26:30,080 --> 00:26:32,920
So same name as the name of class.

341
00:26:33,960 --> 00:26:38,320
And then we have to explicitly
call a method

342
00:26:38,320 --> 00:26:43,320
by writing object name or sign
and then method name.

343
00:26:43,520 --> 00:26:47,640
Then whatever code override
inside of that method is executed.

344
00:26:48,840 --> 00:26:50,520
But for constructors.

345
00:26:50,520 --> 00:26:55,240
Okay, as soon as we create
the object of that class,

346
00:26:55,800 --> 00:26:58,280
the constructor is executed here.

347
00:26:58,280 --> 00:27:00,280
So let's try to create one

348
00:27:01,800 --> 00:27:05,840
constructor in here.

349
00:27:05,840 --> 00:27:08,840
So constructors as they don't have

350
00:27:08,840 --> 00:27:12,320
a return pipe,
but can they have access modifiers?

351
00:27:12,320 --> 00:27:22,320
You guys can constructors
have access modifiers? Yes.

352
00:27:22,320 --> 00:27:28,560
So let me write constructor.

353
00:27:28,560 --> 00:27:31,920
Let me write an access modifier
for the constructors of public

354
00:27:32,520 --> 00:27:34,680
and then the name will be same

355
00:27:35,560 --> 00:27:37,800
as the name of the class,

356
00:27:37,800 --> 00:27:41,400
then parentheses
as we have the parentheses format first

357
00:27:43,080 --> 00:27:44,320
and then

358
00:27:45,280 --> 00:27:46,960
to create brackets.

359
00:27:46,960 --> 00:27:47,680
Okay.

360
00:27:48,200 --> 00:28:02,840
And let's put this out in here.

361
00:28:02,840 --> 00:28:05,040
And as you

362
00:28:05,040 --> 00:28:17,000
have some fields as well,

363
00:28:17,000 --> 00:28:22,080
and there are seven methods
so far, methods we need to return type.

364
00:28:22,080 --> 00:28:23,880
So we write word.

365
00:28:23,880 --> 00:28:30,240
We can also now start using the public
keyword because we have learned about it.

366
00:28:30,240 --> 00:28:32,760
So public void

367
00:28:34,560 --> 00:28:36,400
the name

368
00:28:38,640 --> 00:28:41,720
and then we simply filled out

369
00:28:43,440 --> 00:28:45,120
the name of the dog.

370
00:28:45,120 --> 00:28:48,360
Okay,
so this is the constructor for this class?

371
00:28:48,560 --> 00:28:49,440
No class.

372
00:28:49,440 --> 00:28:52,760
So it has the same name
as the name of the class.

373
00:28:54,320 --> 00:28:58,440
In Method, we have this return type,
but in the constructor

374
00:28:58,440 --> 00:29:01,960
we don't write any return type,
not even wide.

375
00:29:01,960 --> 00:29:02,280
Okay.

376
00:29:02,280 --> 00:29:05,880
So if you try to write right word in here

377
00:29:06,480 --> 00:29:09,120
now Java will create

378
00:29:09,240 --> 00:29:12,440
this method,
this constructor as the method.

379
00:29:12,600 --> 00:29:20,880
And if you hold your mouse in here,
the eclipse does not show you a warning,

380
00:29:20,880 --> 00:29:23,320
but intelligent will tell you
that you are trying

381
00:29:23,320 --> 00:29:26,400
to write a method with the same name
as the name of the class.

382
00:29:26,400 --> 00:29:28,080
Okay, so

383
00:29:29,640 --> 00:29:32,840
we should
not be writing the written type in here,

384
00:29:32,840 --> 00:29:37,080
otherwise Java will not treat them
as the constructor.

385
00:29:37,080 --> 00:29:37,880
Okay.

386
00:29:38,760 --> 00:29:43,920
And then we have parentheses
as we have the parentheses for a matter.

387
00:29:44,000 --> 00:29:45,520
Oops.

388
00:29:45,520 --> 00:29:51,400
And after that, whatever
we can do with a method, for example,

389
00:29:51,400 --> 00:29:57,320
we can pass the parameters in here,
as we can pass the parameters to a method,

390
00:29:57,640 --> 00:30:00,560
and then we can write
any piece of logic in here.

391
00:30:01,360 --> 00:30:03,520
And that logic

392
00:30:03,720 --> 00:30:06,080
will be executed automatically.

393
00:30:06,480 --> 00:30:11,240
When you create the object of that class.

394
00:30:11,240 --> 00:30:14,120
Let me add, I can test

395
00:30:28,360 --> 00:30:53,640
oops class.

396
00:30:54,320 --> 00:30:57,800
So. So how can I create
the object of the class?

397
00:30:57,800 --> 00:30:59,360
Is it either or?

398
00:30:59,360 --> 00:31:01,680
Can you construct or methods?

399
00:31:03,120 --> 00:31:06,360
Is it either or?

400
00:31:06,360 --> 00:31:08,560
And use constructor or method?

401
00:31:08,600 --> 00:31:10,800
You'll get a
Can you rephrase your question?

402
00:31:11,000 --> 00:31:12,360
Can you elaborate a bit more?

403
00:31:12,360 --> 00:31:16,800
What more do you want to ask? So

404
00:31:19,520 --> 00:31:21,320
we can create the

405
00:31:21,320 --> 00:31:23,520
object by writing the new keyword.

406
00:31:24,480 --> 00:31:26,520
What is the purpose of the constructor?

407
00:31:28,080 --> 00:31:30,480
I will show you the purpose
in just a minute.

408
00:31:31,920 --> 00:31:33,960
Constructors and methods are same.

409
00:31:33,960 --> 00:31:36,240
Are the constructors and methods same guys

410
00:31:38,120 --> 00:31:39,240
and you guys still should.

411
00:31:39,240 --> 00:31:47,160
If if the methods
and constructors are same.

412
00:31:47,160 --> 00:31:51,080
No, they look similar,
but they have many differences

413
00:31:51,080 --> 00:31:58,120
so if they are not same.

414
00:31:58,120 --> 00:32:01,720
So when to go for constructor
and when to go for method, somebody

415
00:32:01,800 --> 00:32:03,320
just give me 2 minutes. Okay.

416
00:32:03,320 --> 00:32:06,720
One or 2 minutes I will show you
the purpose of constructors

417
00:32:06,720 --> 00:32:12,880
and then you guys know
when to use my holiday.

418
00:32:12,920 --> 00:32:16,400
So what I am doing in here,
what is the proper

419
00:32:16,400 --> 00:32:19,800
terminology for this line of code
that I have written in here?

420
00:32:19,800 --> 00:32:25,360
What I am doing in here, in

421
00:32:28,960 --> 00:32:30,160
I am creating an

422
00:32:30,160 --> 00:32:32,400
object, okay, I'm creating an object

423
00:32:34,280 --> 00:32:39,760
and so this keyword,

424
00:32:39,760 --> 00:32:42,240
this new keyword creates the object

425
00:32:44,160 --> 00:32:47,360
and then you see this dog
and then parenthesis

426
00:32:48,760 --> 00:32:51,400
this piece of code
that we would argue in here,

427
00:32:52,440 --> 00:32:56,640
it will actually all this constructor,

428
00:32:57,880 --> 00:33:01,440
once this line of code is executed.

429
00:33:02,200 --> 00:33:05,880
So can you guys
tell me if I execute this line?

430
00:33:06,920 --> 00:33:19,000
Will I get any output on my console?

431
00:33:19,000 --> 00:33:22,680
So yes,
because we are calling the constructor

432
00:33:24,560 --> 00:33:25,960
we will be getting.

433
00:33:25,960 --> 00:33:28,840
This dog's constructor is called.

434
00:33:29,760 --> 00:33:30,440
Okay.

435
00:33:31,160 --> 00:33:34,880
So this is the difference between a method
and a constructor.

436
00:33:36,240 --> 00:33:39,400
For a method to work
what you guys have to do.

437
00:33:39,880 --> 00:33:42,680
You guys have to

438
00:33:42,680 --> 00:33:46,360
create the object.

439
00:33:46,360 --> 00:33:51,240
And then on that object
you explicitly call

440
00:33:52,280 --> 00:33:55,920
a method.

441
00:33:55,920 --> 00:34:01,560
So that's when the code inside
the method is executed.

442
00:34:01,800 --> 00:34:05,040
Okay. But as soon as you guys write the

443
00:34:06,360 --> 00:34:08,520
yes, when as you declare the object

444
00:34:09,600 --> 00:34:11,720
of that class,

445
00:34:12,400 --> 00:34:14,720
that code is already executed.

446
00:34:14,720 --> 00:34:14,960
Okay.

447
00:34:14,960 --> 00:34:18,120
So as soon as the object creation

448
00:34:18,800 --> 00:34:21,600
will happen inside the memory,

449
00:34:22,400 --> 00:34:26,760
all the code inside
this block of code will be executed.

450
00:34:27,360 --> 00:34:30,680
So can you guys now
tell me where it can be useful?

451
00:34:30,680 --> 00:34:34,640
So let me repeat
as soon as the object of this class

452
00:34:34,640 --> 00:34:39,760
will be created, the piece of code inside
the constructor is executed.

453
00:34:39,960 --> 00:34:42,200
So can you guys
tell me where it can be useful

454
00:34:58,560 --> 00:35:01,400
so you can also guess it from its name?

455
00:35:01,400 --> 00:35:05,400
So constructor it comes from construct

456
00:35:06,360 --> 00:35:08,920
and we are trying to construct an object

457
00:35:09,200 --> 00:35:12,200
right after entering
username and password.

458
00:35:12,480 --> 00:35:17,440
So every piece of code that you guys want
will be executed

459
00:35:17,760 --> 00:35:22,000
before any method is
called on your object.

460
00:35:22,880 --> 00:35:26,600
You want to put that code inside
that constructor.

461
00:35:27,280 --> 00:35:29,760
The initialization of the variables.

462
00:35:29,880 --> 00:35:33,640
If you want to initialize the fields off

463
00:35:33,640 --> 00:35:37,320
your class, you want to do that
inside the constructor.

464
00:35:37,840 --> 00:35:41,320
If you want to set up anything before

465
00:35:41,400 --> 00:35:45,240
anyone can call any method on your class,

466
00:35:45,840 --> 00:35:49,440
you want to do that
thing inside the constructor.

467
00:35:50,880 --> 00:35:53,760
Okay, so all those

468
00:35:53,760 --> 00:35:57,200
let's see all those pre requirements
pre wrecks.

469
00:35:57,520 --> 00:36:01,400
Okay that you want to have before someone,

470
00:36:01,400 --> 00:36:04,920
you start using any thing

471
00:36:04,920 --> 00:36:08,720
from your class, any field or any method.

472
00:36:08,880 --> 00:36:20,040
You want to put that code
inside the constructors. Yes.

473
00:36:20,040 --> 00:36:24,800
Those beams can also be achieved inside
the method, but then you are not sure

474
00:36:25,640 --> 00:36:28,760
that if that method is called or not
before

475
00:36:28,760 --> 00:36:32,600
that person is using your classes

476
00:36:32,600 --> 00:36:34,040
and that can

477
00:36:34,040 --> 00:36:36,880
that can lead your class to misbehave.

478
00:36:38,160 --> 00:36:41,360
Constructors
initialize the object with the default.

479
00:36:41,440 --> 00:36:45,040
Yes, be the default and
you can put any value inside that as well.

480
00:36:46,080 --> 00:36:49,240
So you'll get the all the initialization

481
00:36:49,240 --> 00:36:54,600
of the fields
or anything that you want to set up

482
00:36:54,760 --> 00:37:00,400
before any method or field
is accessed from your class.

483
00:37:00,840 --> 00:37:04,480
You want to put that code
inside the constructor

484
00:37:04,880 --> 00:37:08,160
so the party school
for and most of the time

485
00:37:09,680 --> 00:37:10,480
we will be

486
00:37:10,480 --> 00:37:13,600
initializing the fields inside a class.

487
00:37:13,600 --> 00:37:18,280
So let's say, for example,

488
00:37:18,280 --> 00:37:21,520
we have some fields

489
00:37:37,400 --> 00:37:37,880
here,

490
00:37:39,000 --> 00:37:40,320
so we have some field.

491
00:37:40,320 --> 00:37:45,040
Now what we have been doing up till now,
we have been explicitly

492
00:37:45,040 --> 00:37:48,360
accessing these fields

493
00:37:48,360 --> 00:37:49,680
in here

494
00:37:50,200 --> 00:37:54,440
and we have been assigning the values

495
00:37:55,520 --> 00:37:56,520
to these fields.

496
00:37:56,520 --> 00:38:01,560
Now if you use the access modifiers,
you guys know

497
00:38:01,920 --> 00:38:07,440
that we can not access the fields
outside of that class, right?

498
00:38:07,440 --> 00:38:11,800
So what we will have,
we will be having something like this

499
00:38:12,120 --> 00:38:15,160
in real life.

500
00:38:15,160 --> 00:38:18,720
And as soon as you make your fields
private,

501
00:38:18,720 --> 00:38:24,480
it can only access them in another class
days.

502
00:38:24,480 --> 00:38:26,280
No, we can not access.

503
00:38:26,280 --> 00:38:28,800
Then how do we initialize these fields?

504
00:38:29,880 --> 00:38:32,480
How do we initialize these fields
automatically?

505
00:38:32,480 --> 00:38:33,720
So what we can do

506
00:39:00,280 --> 00:39:03,280
use in methods and
then column matters in different class.

507
00:39:03,280 --> 00:39:08,200
So what we can do,
we can force these fields

508
00:39:08,880 --> 00:39:12,560
inside this constructor, so we can say

509
00:39:13,680 --> 00:39:21,160
string dog name, string log.

510
00:39:21,960 --> 00:39:27,120
Well, calling

511
00:39:27,120 --> 00:39:30,120
constructor and creating object
is the same, right?

512
00:39:30,120 --> 00:39:31,800
And these are dogs all the same. Yes.

513
00:39:31,800 --> 00:39:36,240
You cannot call a constructor
without creating your object.

514
00:39:36,240 --> 00:39:37,440
So they are.

515
00:39:37,800 --> 00:40:18,120
They are something
very closely interlinked.

516
00:40:18,120 --> 00:40:20,840
So now previously

517
00:40:22,080 --> 00:40:25,680
you guys didn't have any mechanism

518
00:40:26,680 --> 00:40:28,920
to force

519
00:40:29,520 --> 00:40:31,120
this class

520
00:40:31,120 --> 00:40:35,720
that whenever
the object of this class is created,

521
00:40:36,240 --> 00:40:39,960
the values for these must be passed.

522
00:40:40,760 --> 00:40:44,240
Now, if you have a parameter constructor

523
00:40:45,040 --> 00:40:48,680
now, the object will not be created

524
00:40:48,720 --> 00:40:51,400
unless and until someone is passing

525
00:40:52,160 --> 00:40:55,600
all these things inside the constructor.

526
00:40:55,600 --> 00:40:58,800
So now you are forcing that here. Hey hey.

527
00:40:58,800 --> 00:41:01,520
The user or everyone
that is trying to use this class,

528
00:41:02,080 --> 00:41:04,320
you have to pass these values

529
00:41:04,840 --> 00:41:07,160
for my class to work properly

530
00:41:07,600 --> 00:41:13,560
and then you can call any method
or you can use any field from my class.

531
00:41:13,560 --> 00:41:17,560
So now you are forcing this
with the help of a constructor. So

532
00:41:18,720 --> 00:41:19,800
it all

533
00:41:21,960 --> 00:41:25,000
name is equal to

534
00:41:27,000 --> 00:41:28,200
dog name

535
00:41:29,520 --> 00:41:31,240
unless specified.

536
00:41:31,240 --> 00:41:31,640
So yes.

537
00:41:31,640 --> 00:41:35,920
So you can create
a parameterized constructor for this.

538
00:41:36,000 --> 00:41:36,720
Okay.

539
00:41:36,800 --> 00:41:39,120
Now no one will be able to call

540
00:41:48,640 --> 00:41:50,640
any method

541
00:41:55,600 --> 00:41:59,320
on your class.

542
00:41:59,320 --> 00:41:59,760
Sorry.

543
00:41:59,760 --> 00:42:00,680
Can you repeat?

544
00:42:00,680 --> 00:42:03,480
Because I missed last 5 hours.

545
00:42:03,600 --> 00:42:06,000
So certainly which line
you want me to explain.

546
00:42:06,680 --> 00:42:09,600
And if you have missed more,
more than that, then

547
00:42:10,120 --> 00:42:14,680
I think it will be better if you can
ask me this question during the break.

548
00:42:14,680 --> 00:42:19,200
Or maybe you can watch the recording.

549
00:42:19,200 --> 00:42:22,920
So what I will try to give you
kind of a summary.

550
00:42:22,920 --> 00:42:24,840
Let me complete this code.

551
00:42:24,840 --> 00:42:27,480
So breed

552
00:42:30,200 --> 00:42:32,520
is required to

553
00:42:32,520 --> 00:42:34,080
dog breed

554
00:42:37,920 --> 00:42:44,120
and we reported the dog age

555
00:42:45,680 --> 00:42:48,280
and in the last we had

556
00:42:51,280 --> 00:42:53,520
the dog bit

557
00:43:01,480 --> 00:43:13,000
of weird, right?

558
00:43:14,080 --> 00:43:17,720
So now you guys see that

559
00:43:17,720 --> 00:43:18,360
in here.

560
00:43:18,360 --> 00:43:20,880
I am getting an error now.

561
00:43:21,120 --> 00:43:24,560
Okay, so Java is not allowing me

562
00:43:24,560 --> 00:43:27,920
to create an object of this class, okay?

563
00:43:27,960 --> 00:43:32,200
And if I cover my mouth,
it says this constructor

564
00:43:32,840 --> 00:43:35,560
without any parameters.

565
00:43:35,560 --> 00:43:37,520
It is not defined.

566
00:43:37,520 --> 00:43:42,000
Okay, that means now,
if I want to do anything with my class,

567
00:43:42,000 --> 00:43:45,080
I must pass

568
00:43:45,080 --> 00:43:47,400
these values in here.

569
00:43:47,520 --> 00:44:04,880
Okay, so let me put an input in here

570
00:44:04,960 --> 00:44:18,840
so that you guys can see.

571
00:44:18,840 --> 00:44:21,120
Can you guys tell me a breed bulldog,

572
00:44:22,320 --> 00:44:24,240
maybe the data breed.

573
00:44:24,240 --> 00:44:24,960
Right?

574
00:44:26,360 --> 00:44:29,880
And then we have the age.

575
00:44:29,880 --> 00:44:32,320
Maybe then

576
00:44:33,080 --> 00:44:36,480
and then we maybe then fly. Fly.

577
00:44:37,960 --> 00:44:41,520
So now, as soon as

578
00:44:41,520 --> 00:44:47,040
I was all the arguments inside this method

579
00:44:48,000 --> 00:44:51,760
do we should pass all values or not?

580
00:44:51,760 --> 00:44:53,120
No, I'm not.

581
00:44:53,120 --> 00:44:56,320
If you don't pass even a single value.

582
00:44:56,320 --> 00:44:59,520
So let's say
even if we are missing this weight,

583
00:45:00,080 --> 00:45:02,560
you will be getting an of now

584
00:45:02,600 --> 00:45:06,320
it is a must to pass all the values

585
00:45:06,440 --> 00:45:11,040
inside this constructor
if you want an object of this class.

586
00:45:11,280 --> 00:45:15,920
So now we have enforced this
with the help of a parameter

587
00:45:15,920 --> 00:45:19,320
sized constructor.

588
00:45:19,320 --> 00:45:24,560
And now you can call any method
or you can use anything from this class.

589
00:45:25,760 --> 00:45:26,280
The player

590
00:45:26,280 --> 00:45:29,400
dice those
who are asking for the constructor.

591
00:45:29,400 --> 00:45:32,960
The use case of a constructor
when you guys should use them.

592
00:45:33,640 --> 00:45:37,960
So it gives you more control over
how your class is.

593
00:45:37,960 --> 00:45:42,800
Constructor, how your ID, how
the object of your class is constructed.

594
00:45:43,320 --> 00:45:46,680
Whether you want to allow maybe

595
00:45:47,400 --> 00:45:49,800
initialization of only two fields

596
00:45:50,400 --> 00:45:54,320
or you want the values for all the fields

597
00:45:54,360 --> 00:45:57,440
before anyone can use your class.

598
00:45:57,640 --> 00:45:58,240
Okay.

599
00:45:58,240 --> 00:46:03,000
And it also gives you like
I see that there's more cleaner code

600
00:46:03,360 --> 00:46:06,080
instead of accessing the fields and

601
00:46:06,080 --> 00:46:09,000
by writing this object's name in here,

602
00:46:09,440 --> 00:46:13,000
it's a it's a sharper code
and it's more cleaner.

603
00:46:13,240 --> 00:46:18,360
And you can see
all the values in a single line.

604
00:46:18,360 --> 00:46:20,640
But same thing in method parameter.

605
00:46:20,640 --> 00:46:24,520
We have not forced to pass
all values in parameter.

606
00:46:24,520 --> 00:46:26,880
Is this correct? Yes, it is.

607
00:46:26,960 --> 00:46:31,840
This behavior is same
inside method, but the method

608
00:46:33,320 --> 00:46:34,760
totally depends on you.

609
00:46:34,760 --> 00:46:38,000
You can
you can not call the method of a class

610
00:46:38,000 --> 00:46:40,040
and you can still create an object.

611
00:46:40,040 --> 00:46:42,360
We don't want to do that.

612
00:46:42,360 --> 00:46:45,240
What about if we want to create
another dog?

613
00:46:45,520 --> 00:46:50,000
These same rules will be applicable
if we try to create another dog.

614
00:46:50,000 --> 00:46:56,240
Global.

615
00:46:56,240 --> 00:46:58,440
So now

616
00:46:59,400 --> 00:47:03,080
if I call this method,

617
00:47:03,080 --> 00:47:05,400
what are what
I will inject on my console guys?

618
00:47:06,240 --> 00:47:09,480
How many lines I will see

619
00:47:20,440 --> 00:47:23,160
now we my execute this code,

620
00:47:24,680 --> 00:47:27,640
this dog's constructor is called

621
00:47:28,520 --> 00:47:31,400
because I have this printout in here

622
00:47:31,680 --> 00:47:34,800
inside the constructor as well.

623
00:47:34,800 --> 00:47:36,320
And then I see the bubbles.

624
00:47:36,320 --> 00:47:41,280
So you guys see this sequence
before any method call or anything.

625
00:47:41,280 --> 00:47:42,480
Always, always.

626
00:47:42,480 --> 00:47:51,240
The constructor is the executed first.

627
00:47:51,240 --> 00:47:52,960
Why I am getting an error.

628
00:47:52,960 --> 00:47:56,200
Silva Is there no one
in this potential certainty

629
00:47:56,200 --> 00:48:15,840
from which line you missed
the in the class?

630
00:48:15,840 --> 00:48:18,240
Silva on line 15.

631
00:48:18,960 --> 00:48:20,720
You okay?

632
00:48:20,720 --> 00:48:25,920
So on line 12 the name
the dog name is with a lowercase.

633
00:48:25,920 --> 00:48:27,440
You have to make it uppercase.

634
00:48:28,400 --> 00:48:32,760
It's your capitalization issue.

635
00:48:32,760 --> 00:48:35,600
So certainly this, this,
this code in here,

636
00:48:36,480 --> 00:48:41,040
this is this special piece of code
that we call as the constructor.

637
00:48:41,400 --> 00:48:42,240
Okay.

638
00:48:42,240 --> 00:48:45,680
And the purpose of constructor
is to initialize

639
00:48:45,680 --> 00:48:47,680
the fields of a class.

640
00:48:48,720 --> 00:48:51,200
We don't have any

641
00:48:51,200 --> 00:48:53,400
written type for the constructors.

642
00:48:54,480 --> 00:48:58,360
The name is always
the same as the name of the class,

643
00:48:59,560 --> 00:49:02,280
and then we can pass
the arguments like this

644
00:49:03,000 --> 00:49:07,200
and that's how we initialize the fields
inside the constructor.

645
00:49:07,200 --> 00:49:07,800
Okay.

646
00:49:07,840 --> 00:49:12,840
And when we clear the object in here,

647
00:49:12,840 --> 00:49:16,920
the values will be passed in here
and the fields will be initialized.

648
00:49:17,640 --> 00:49:18,840
So constructor.

649
00:49:18,840 --> 00:49:22,000
It's a kind of having materials get ready

650
00:49:22,000 --> 00:49:24,840
before construction of an object happens.

651
00:49:25,040 --> 00:49:28,280
No, this is where the construction
happens, you know,

652
00:49:29,080 --> 00:49:31,080
This is where the construction happens

653
00:49:32,640 --> 00:49:36,240
all to print all variables of constructor.

654
00:49:37,920 --> 00:49:39,880
You mean for one

655
00:49:39,880 --> 00:49:42,240
these variables, this dog named or color?

656
00:49:43,120 --> 00:49:43,520
You you.

657
00:49:43,520 --> 00:49:45,960
You can just write a print out
inside the constructor.

658
00:49:45,960 --> 00:49:48,520
Then you can print them
same as with Dementors.

659
00:49:49,520 --> 00:49:52,720
When you create the object,
the value given

660
00:49:52,720 --> 00:49:57,720
has to be in the same order
as constructor. No.

661
00:49:57,720 --> 00:49:58,080
Okay.

662
00:49:58,080 --> 00:50:02,800
So in here, if you are asking me
about the sequence. Yes.

663
00:50:04,200 --> 00:50:06,760
If this is a string,

664
00:50:06,760 --> 00:50:08,840
the first should be a string.

665
00:50:08,960 --> 00:50:12,920
If the second value is a string,
the second out of the if it's the same

666
00:50:12,920 --> 00:50:15,200
as methods,
same as with the methods naming.

667
00:50:16,560 --> 00:50:19,360
So I cannot do this,
I cannot pass this. Then

668
00:50:21,840 --> 00:50:22,360
in here.

669
00:50:22,360 --> 00:50:25,520
Okay, so the sequence should be same.

670
00:50:25,520 --> 00:50:26,760
Same as with the methods

671
00:50:31,440 --> 00:50:32,440
are we going to

672
00:50:32,440 --> 00:50:35,600
face with this kind of task in real life?

673
00:50:35,600 --> 00:50:39,560
So not almost everything
that you guys are learning

674
00:50:39,560 --> 00:50:43,080
in this class,
you will be facing more than this.

675
00:50:43,240 --> 00:50:44,760
These are just basics.

676
00:50:44,760 --> 00:50:57,000
You guys will be facing more than this.

677
00:50:57,000 --> 00:50:59,440
If something is not that important.

678
00:51:00,400 --> 00:51:05,040
I will tell you about that thing.

679
00:51:05,040 --> 00:51:08,040
So private on name is one less because

680
00:51:08,040 --> 00:51:10,160
we enter it in public void,

681
00:51:11,560 --> 00:51:14,160
we can access it and everywhere

682
00:51:16,400 --> 00:51:19,320
so alone now we can access it everywhere,

683
00:51:19,320 --> 00:51:22,440
but we cannot set it from everywhere.

684
00:51:23,280 --> 00:51:25,360
So still it's more better

685
00:51:25,680 --> 00:51:30,800
than having your field as public
because when you have something as public,

686
00:51:30,800 --> 00:51:33,760
everyone can set any value to that

687
00:51:33,840 --> 00:51:37,320
and you can also put
you can also have a mechanism

688
00:51:39,800 --> 00:51:42,840
inside this method that someone can

689
00:51:44,040 --> 00:51:46,680
if someone is passing
some piece of information,

690
00:51:46,680 --> 00:51:50,000
only then this information
is visible to that

691
00:51:55,240 --> 00:51:56,280
from first.

692
00:51:56,280 --> 00:52:00,000
And you went right new dog in

693
00:52:02,240 --> 00:52:04,600
object it was print dog

694
00:52:04,600 --> 00:52:07,360
constructor is called

695
00:52:08,400 --> 00:52:11,120
and now to call dog

696
00:52:11,760 --> 00:52:16,640
dog new dog.

697
00:52:16,640 --> 00:52:19,320
So Sunday is not

698
00:52:19,320 --> 00:52:22,320
the expected output
or what do you expect instead

699
00:52:22,880 --> 00:52:26,400
how can we print
the other variables on constructor?

700
00:52:26,520 --> 00:52:29,760
You can print you want to print
inside the constructor. Guys

701
00:52:33,480 --> 00:52:35,520
you want to print inside the constructor

702
00:52:35,520 --> 00:52:42,240
or you want to write methods
to print out those values.

703
00:52:42,240 --> 00:52:45,360
Yes, I will add the differences
and the differences are also

704
00:52:45,360 --> 00:52:48,240
mentioned in this slides.

705
00:52:48,480 --> 00:52:51,480
Can we use constructor with any method?

706
00:52:52,440 --> 00:52:52,920
Chérif.

707
00:52:52,920 --> 00:52:55,560
This question is not technically correct.

708
00:52:56,480 --> 00:53:01,440
What constructor
has to do with the method?

709
00:53:01,440 --> 00:53:03,120
You may be asked?

710
00:53:03,120 --> 00:53:05,640
Can we use constructor with any class?

711
00:53:05,640 --> 00:53:06,880
Maybe this is what you mean.

712
00:53:08,760 --> 00:53:10,480
Oh yes, we can clear the

713
00:53:10,480 --> 00:53:13,320
constructors for any of the classes

714
00:53:17,880 --> 00:53:20,000
and then maybe we can write

715
00:53:30,840 --> 00:53:32,000
if I want.

716
00:53:32,000 --> 00:53:34,040
Print Edge I, M.J.

717
00:53:34,040 --> 00:53:37,120
and 2221

718
00:53:40,640 --> 00:53:42,000
Alexa on my Alexa

719
00:53:42,000 --> 00:53:45,840
on which line are inside the dog class
or the dog test for class.

720
00:53:46,600 --> 00:53:49,640
So in to print the variables,
we have to create a method for it.

721
00:53:49,680 --> 00:53:54,320
Yes, we can, but we can also print it
inside the constructor as well.

722
00:53:54,320 --> 00:53:57,480
If you want, you can also

723
00:53:57,480 --> 00:54:00,000
print inside the constructor in here.

724
00:54:01,040 --> 00:54:03,480
Like for example, you guys can print out

725
00:54:04,400 --> 00:54:07,440
the values of

726
00:54:08,400 --> 00:54:09,800
dog name like this.

727
00:54:09,800 --> 00:54:13,560
You can also do that, can

728
00:54:18,600 --> 00:54:21,960
okay, you can get specific terms

729
00:54:21,960 --> 00:54:31,960
as well.

730
00:54:31,960 --> 00:54:33,520
Like this

731
00:54:39,240 --> 00:54:42,680
one to go for constructor
and went to go for method.

732
00:54:42,960 --> 00:54:44,280
So constructors.

733
00:54:44,280 --> 00:54:48,080
Most of the time you will be initialized
in the fields and you'll get the

734
00:54:49,400 --> 00:54:49,840
converse.

735
00:54:49,840 --> 00:54:52,320
Then you
should be going for the constructor.

736
00:54:52,320 --> 00:54:55,200
Can we create any method
inside of constructor?

737
00:54:55,480 --> 00:54:57,960
No, we can not create, but we can call it.

738
00:54:58,920 --> 00:55:01,440
So for example, we can call this

739
00:55:03,040 --> 00:55:04,560
print name

740
00:55:04,560 --> 00:55:06,760
or print page inside the constructor,

741
00:55:07,000 --> 00:55:09,120
but we cannot define a new method.

742
00:55:10,360 --> 00:55:13,480
It looks like we can use method
after constructor

743
00:55:13,480 --> 00:55:16,520
to put some conditions inside for you
in real life.

744
00:55:16,520 --> 00:55:17,960
Makes sense.

745
00:55:18,720 --> 00:55:20,280
So pretty much everything

746
00:55:20,280 --> 00:55:23,760
that you guys can do with the metro,
you can do with the constructor.

747
00:55:23,760 --> 00:55:27,960
But the difference is
that constructors are called

748
00:55:27,960 --> 00:55:30,960
automatically when the object is created.

749
00:55:31,440 --> 00:55:33,840
The constructors don't have a return type.

750
00:55:33,840 --> 00:55:36,600
Constructors cannot have any randomly.

751
00:55:36,680 --> 00:55:43,640
The name must be same as the class name.

752
00:55:43,640 --> 00:55:45,280
Then we can say print

753
00:55:48,240 --> 00:55:49,080
it like

754
00:55:49,080 --> 00:56:01,960
this.

755
00:56:01,960 --> 00:56:05,600
We get this line
and all constructor is called

756
00:56:05,600 --> 00:56:08,360
because we have placed this line

757
00:56:09,120 --> 00:56:12,120
inside the constructor.

758
00:56:12,120 --> 00:56:14,600
We get this body

759
00:56:14,600 --> 00:56:18,760
because we are printing the name
of the dog inside the constructor.

760
00:56:19,560 --> 00:56:25,520
We get this then
because we are printing the age, we again

761
00:56:25,520 --> 00:56:29,960
get this name
because we are calling that method

762
00:56:30,680 --> 00:56:33,840
and we get this age

763
00:56:33,840 --> 00:56:36,400
because we are calling index method.

764
00:56:36,400 --> 00:56:38,160
Specifically

765
00:56:40,480 --> 00:56:42,840
it clear guys,
why I'm getting five lines on

766
00:56:43,680 --> 00:57:01,080
on the console.

767
00:57:01,080 --> 00:57:04,600
All of

768
00:57:26,160 --> 00:57:27,000
within the plus

769
00:57:27,000 --> 00:57:30,520
variable is is a built in word

770
00:57:30,920 --> 00:57:35,520
or we create them
put in the breed print name print page.

771
00:57:35,520 --> 00:57:37,560
No, but we have created both methods.

772
00:57:39,280 --> 00:57:44,160
I think I am starting to get good
and we have private constructors issue.

773
00:57:44,280 --> 00:57:46,160
We can have private constructors,

774
00:57:47,160 --> 00:57:49,200
then we have multiple constructors.

775
00:57:49,200 --> 00:57:52,360
Yes, we can have multiple constructors.

776
00:57:52,360 --> 00:58:00,440
Can you clarify lines 18 and 23?

777
00:58:00,440 --> 00:58:05,040
So this line 18 is a simply print out
statement number.

778
00:58:05,720 --> 00:58:09,240
I am printing the value of this variable,

779
00:58:09,320 --> 00:58:11,840
so whatever value is being passed

780
00:58:12,440 --> 00:58:14,880
from this constructor in here,

781
00:58:15,600 --> 00:58:20,400
it will be copied to this variable
and then it will get printed

782
00:58:20,400 --> 00:58:24,440
on the console next in line 23.

783
00:58:25,160 --> 00:58:27,760
It's again same. It's again same.

784
00:58:27,760 --> 00:58:32,080
But this time this,
this method is printing the value

785
00:58:32,080 --> 00:58:34,240
of the instance variable.

786
00:58:34,320 --> 00:58:38,000
In here I am
printing the value of a local variable.

787
00:58:38,000 --> 00:58:39,080
This is the difference.

788
00:58:39,080 --> 00:58:42,200
If you are asking. Yeah.

789
00:58:42,240 --> 00:58:45,560
So dog name is a local variable, but

790
00:58:46,080 --> 00:58:48,320
name is an instance variable.

791
00:58:49,600 --> 00:58:54,040
If we can have multiple constructors, will
all of them be named with the same name?

792
00:58:54,160 --> 00:58:59,000
Yes. They will all be having
the same name. Yes.

793
00:58:59,080 --> 00:58:59,480
Selecting.

794
00:58:59,480 --> 00:59:11,960
Scroll down.

795
00:59:11,960 --> 00:59:17,640
So let's try to read a little bit
about these constructors.

796
00:59:17,640 --> 00:59:19,800
Let's try to understand some rules.

797
00:59:19,920 --> 00:59:25,200
What is more cleaner code download
print the name or case out dog name.

798
00:59:26,240 --> 00:59:27,280
This one is more plain.

799
00:59:27,280 --> 00:59:29,640
The writing a method
and then calling a method.

800
00:59:31,080 --> 00:59:35,480
Can we create another constructor
and create another object as an example?

801
00:59:35,640 --> 00:59:40,120
Yes. The next example
they mean we will be creating more objects

802
00:59:40,120 --> 00:59:42,880
and we will be creating more constructors.

803
00:59:43,920 --> 00:59:46,240
So I don't want to complicate
this example.

804
00:59:46,600 --> 00:59:53,080
So let's keep it to initial stages.

805
00:59:53,080 --> 00:59:55,600
I want more examples for sure.

806
00:59:55,600 --> 00:59:58,080
Yes, we will do that, more examples.

807
00:59:59,160 --> 01:00:02,920
So if you guys are comfortable
with this piece of code

808
01:00:02,920 --> 01:00:05,720
and if you guys don't
have any questions, then

809
01:00:06,360 --> 01:00:08,520
maybe we should move to the next example.

810
01:00:09,680 --> 01:00:13,840
I just want to see two constructors
in the same class to see how it works.

811
01:00:13,840 --> 01:00:23,720
Don't worry, we will learn about that.

812
01:00:23,720 --> 01:00:26,440
Are there any questions
guys, from this example?

813
01:00:27,480 --> 01:00:28,440
The constructor

814
01:00:28,440 --> 01:00:31,080
sequence should be same when we call it.

815
01:00:31,840 --> 01:00:35,640
There is no such thing
as constructor sequence.

816
01:00:35,640 --> 01:00:39,360
Then it's because whenever
you will be creating the object,

817
01:00:40,800 --> 01:00:43,080
the constructor
will automatically be called

818
01:00:43,200 --> 01:00:47,040
and you cannot call in method
or anything like that

819
01:00:47,160 --> 01:00:48,880
unless and until you have an object.

820
01:00:48,880 --> 01:00:51,000
So a sequence will always be same.

821
01:00:51,080 --> 01:00:54,840
First, the object will be created
and then you will be able

822
01:00:54,840 --> 01:00:57,000
to call any methods or anything.

823
01:00:57,080 --> 01:00:58,320
So you cannot do this.

824
01:00:58,320 --> 01:01:02,960
You cannot call a method first
and then an instance method first,

825
01:01:02,960 --> 01:01:07,320
and then call and create the object.

826
01:01:07,320 --> 01:01:11,640
Yes, first we will go through this slide
and then we will do more examples.

827
01:01:13,120 --> 01:01:15,000
I mean, name, breed, age and so on.

828
01:01:15,000 --> 01:01:18,200
Yes. This one, they can be anywhere.

829
01:01:18,440 --> 01:01:19,320
They can be anywhere.

830
01:01:20,760 --> 01:01:24,200
You can even write it in here.

831
01:01:24,200 --> 01:01:27,720
You can put the age even in here.

832
01:01:28,800 --> 01:01:30,000
No issues with that.

833
01:01:30,000 --> 01:01:31,200
No issues.

834
01:01:31,680 --> 01:01:35,200
I did not understand how we got five lines
output.

835
01:01:35,200 --> 01:01:37,800
Would you please show your console again?

836
01:01:39,200 --> 01:01:41,240
So this is my console

837
01:01:43,400 --> 01:01:46,000
line nine in dog tested?

838
01:01:46,320 --> 01:01:49,600
Yes. We can change the sequence in here.

839
01:01:50,160 --> 01:01:50,760
Three methods.

840
01:01:50,760 --> 01:01:53,040
We can print the age first
and then the name.

841
01:01:53,360 --> 01:01:55,560
No issues with that

842
01:02:05,360 --> 01:02:05,800
button.

843
01:02:05,800 --> 01:02:06,520
Do you understand?

844
01:02:06,520 --> 01:02:22,320
Now? Okay,

845
01:02:24,040 --> 01:02:27,200
so printed in line
18 will be using line six.

846
01:02:27,400 --> 01:02:39,040
Line 26. Yes.

847
01:02:39,040 --> 01:02:41,840
This line 22 print page

848
01:02:42,960 --> 01:02:47,080
is being used from here.

849
01:02:47,080 --> 01:02:48,520
All right.

850
01:02:49,520 --> 01:02:51,760
22 and 26. Yes.

851
01:02:51,800 --> 01:02:55,720
You mean what is
what is the issue in line 22

852
01:02:55,720 --> 01:03:01,680
and 26?

853
01:03:01,680 --> 01:03:05,080
Automotive need, line 21 and 22.

854
01:03:05,440 --> 01:03:07,680
Mine is different.

855
01:03:07,680 --> 01:03:10,160
The Sure, your output is different

856
01:03:19,880 --> 01:03:21,440
for main line.

857
01:03:21,440 --> 01:03:27,360
Okay, so let me put these matters back
because this is the best practice.

858
01:03:27,600 --> 01:03:30,240
First we declare the fields,

859
01:03:31,080 --> 01:03:34,520
then we try to deconstruct first and then

860
01:03:35,840 --> 01:03:39,760
we write the methods.

861
01:03:39,760 --> 01:03:49,760
And don't forget output.

862
01:03:49,760 --> 01:03:53,560
Then you have to share complete
screenshot of the dog

863
01:03:53,560 --> 01:03:56,560
best drug class because you are having
some issues on that.

864
01:03:56,600 --> 01:04:00,840
Also, share the complete screenshot
of error and post these kind of issues

865
01:04:00,840 --> 01:04:09,480
in the sports channel.

866
01:04:09,480 --> 01:04:12,720
As always, there she will assist you

867
01:04:12,720 --> 01:04:16,960
and let me know guys, once
you guys are comfortable with this code

868
01:04:17,800 --> 01:04:34,680
so that we can move to these slides.

869
01:04:34,680 --> 01:04:37,800
When declaring the figures, do
they have to be private?

870
01:04:37,800 --> 01:04:55,080
It's a best practice,
but you can have any type of food.

871
01:04:55,080 --> 01:04:57,240
Depends on what
you are working on, I guess.

872
01:04:58,800 --> 01:04:59,760
Not really.

873
01:04:59,760 --> 01:05:04,640
Jamie Farley feels it's
always better to have them as private

874
01:05:04,760 --> 01:05:09,040
because you don't want others
to mess your dirt

875
01:05:09,080 --> 01:05:11,760
on that
you will be storing inside your class.

876
01:05:12,960 --> 01:05:17,400
If the data is not correct,
your methods, they can misbehave.

877
01:05:17,440 --> 01:05:21,720
So you are so you always want to have
the fields as private

878
01:05:23,040 --> 01:05:25,080
and then maybe write a method to

879
01:05:26,160 --> 01:05:28,200
set of values for those fields

880
01:05:28,200 --> 01:05:31,160
or initialize them
through the constructor.

881
01:05:31,520 --> 01:05:34,320
But before you do that,
you write some rules.

882
01:05:34,320 --> 01:05:37,360
Like for example, inside this age

883
01:05:37,360 --> 01:05:40,360
field,
you don't want the negative values, right?

884
01:05:40,480 --> 01:05:45,400
You don't want maybe values
more than 3000 or 200 or like this, right?

885
01:05:45,840 --> 01:05:49,760
So that you
you don't have bad data in your class.

886
01:05:50,400 --> 01:05:53,840
Why did we initialize the parameters
inside the constructor

887
01:05:53,840 --> 01:05:56,840
while we already had it inside the class?

888
01:05:57,960 --> 01:05:59,400
Well, almost.

889
01:05:59,400 --> 01:06:00,840
Where did we have it?

890
01:06:00,840 --> 01:06:02,880
Inside the class in here.

891
01:06:03,600 --> 01:06:05,760
I am only defining variables.

892
01:06:05,960 --> 01:06:11,280
In here I am assigning values
to those variables so it's not seen.

893
01:06:11,720 --> 01:06:13,560
This is called a declaration.

894
01:06:13,560 --> 01:06:15,720
This is called initialization.

895
01:06:15,720 --> 01:06:17,960
These are two different things.

896
01:06:17,960 --> 01:06:19,920
How can we print out the line?

897
01:06:19,920 --> 01:06:24,800
14, 15 and 17 on dog page

898
01:06:27,160 --> 01:06:28,880
down the line, 1415.

899
01:06:28,880 --> 01:06:34,360
Same as we are doing
with these other variables.

900
01:06:34,360 --> 01:06:38,040
That is why need to put into private.

901
01:06:38,040 --> 01:06:40,880
We still use them later in the test
subclass.

902
01:06:41,760 --> 01:06:46,200
So in here
I am doing it through the methods.

903
01:06:46,200 --> 01:06:46,920
Okay.

904
01:06:47,120 --> 01:06:52,000
To keep this example simple,
I am not writing any rules in here

905
01:06:52,200 --> 01:06:56,040
and I am simply printing out the values
in here.

906
01:06:56,040 --> 01:06:57,160
But in real life

907
01:06:57,160 --> 01:07:00,600
you guys will be writing some rules
if you want to protect your data.

908
01:07:02,040 --> 01:07:05,160
What about
when working with other coworkers?

909
01:07:05,160 --> 01:07:08,000
Does not it have to be public
so they can access it?

910
01:07:08,000 --> 01:07:12,920
Sebastian
You made the access through matters

911
01:07:13,680 --> 01:07:15,880
because if there is a not a developer,

912
01:07:17,520 --> 01:07:18,320
right?

913
01:07:18,560 --> 01:07:24,200
Like said,
if they can change the data of your fears

914
01:07:24,200 --> 01:07:29,080
in set in such a way
that they can manipulate your matter,

915
01:07:29,120 --> 01:07:34,400
they can control how your methods
will execute, or they can break your code.

916
01:07:34,400 --> 01:07:36,680
So you don't want to do that.

917
01:07:36,680 --> 01:07:39,160
That's how the applications are hacked.

918
01:07:39,160 --> 01:07:42,720
They don't control
if you are not controlling the data

919
01:07:43,440 --> 01:07:48,480
that is flowing inside your class
and that is flowing outside of your class,

920
01:07:48,840 --> 01:07:50,960
you are potentially letting others to

921
01:07:53,400 --> 01:07:55,680
others to make your code misbehave.

922
01:07:56,040 --> 01:07:59,000
You don't want to do that.

923
01:07:59,000 --> 01:08:02,720
So public double blind,
then use a constructor in other words,

924
01:08:02,720 --> 01:08:06,200
and members right methods.

925
01:08:06,200 --> 01:08:08,520
Yes, they are matters.
This is a constructive

926
01:08:13,080 --> 01:08:17,200
this is a constructive approach.

927
01:08:17,200 --> 01:08:21,120
Think about the applications
like banking applications.

928
01:08:21,120 --> 01:08:23,800
If I design up data

929
01:08:23,800 --> 01:08:27,520
of the applications, the financial data
of the application right,

930
01:08:27,840 --> 01:08:31,920
you don't want anyone to set
any random values to your fields, right?

931
01:08:31,920 --> 01:08:37,200
Because this data will be having
so much value in real life, right?

932
01:08:37,440 --> 01:08:41,760
You don't want to create a class in which
anyone can set any account balance.

933
01:08:43,360 --> 01:08:47,720
So this is very important
how you you control the access,

934
01:08:47,720 --> 01:09:02,440
how you control the flow of information,
log this.

935
01:09:02,440 --> 01:09:03,880
You're creating an object.

936
01:09:03,880 --> 01:09:06,720
And this is also a way to call
constructor. Yes.

937
01:09:06,720 --> 01:09:09,640
You get to on the second line.

938
01:09:09,640 --> 01:09:18,880
You are also creating a constructor
and calling a constructor.

939
01:09:18,880 --> 01:09:23,840
Are there a lot of accessible classes
in Java like Scanner?

940
01:09:23,840 --> 01:09:27,000
Then someone changed the methods
inside this kind of class?

941
01:09:27,560 --> 01:09:30,280
No. For these classes
they are only readable.

942
01:09:30,840 --> 01:09:36,440
You guys cannot change the code
inside that JDK.

943
01:09:36,440 --> 01:09:37,760
So which way to follow?

944
01:09:37,760 --> 01:09:42,120
So you'll get that
if you are planning to use that object in

945
01:09:43,400 --> 01:09:45,080
after this line.

946
01:09:45,080 --> 01:09:49,560
So like I am calling it a method,
then you should be first

947
01:09:49,560 --> 01:09:54,320
just floating the object inside a variable
and then you can use that activity.

948
01:09:54,600 --> 01:09:57,200
If you are not learning
to use that constructor,

949
01:09:58,320 --> 01:10:01,960
then you
you don't need to store that in a variable

950
01:10:02,840 --> 01:10:06,000
and then call the methods on there.

951
01:10:06,000 --> 01:10:10,160
Most of the time
this is what you will be doing.

952
01:10:10,160 --> 01:10:12,320
We should do separate out.

953
01:10:13,280 --> 01:10:16,400
We should do separate this out
for each constructor

954
01:10:16,400 --> 01:10:18,680
if we want to print out all of them.

955
01:10:19,160 --> 01:10:19,960
Yes. No.

956
01:10:19,960 --> 01:10:24,000
You can also use the single source out
and put all the variables inside that.

957
01:10:25,160 --> 01:10:28,320
If we are able to change Java class,
there will be no Java.

958
01:10:28,320 --> 01:10:31,320
Yes, you are right.

959
01:10:31,560 --> 01:10:33,480
You guys will destroy all the Java,

960
01:10:33,480 --> 01:10:40,400
all the JDK.

961
01:10:40,400 --> 01:10:43,200
Can you give a real
life example of constructor?

962
01:10:44,560 --> 01:10:45,560
Yes. That hard?

963
01:10:45,560 --> 01:10:49,680
I can give you a real life example,
but at this point

964
01:10:50,160 --> 01:10:53,400
that example will not make sense
because you guys

965
01:10:53,400 --> 01:10:57,720
are not aware of the real life
that you will be using.

966
01:10:57,720 --> 01:11:02,160
So for example, so one of the example
is this kind of class

967
01:11:02,480 --> 01:11:07,400
you guys remember
you guys used to pass system DOT in,

968
01:11:07,760 --> 01:11:12,360
so that was the constructor call, Okay,
That was something from the real life.

969
01:11:12,360 --> 01:11:18,960
So if we say scanner, scanner,

970
01:11:18,960 --> 01:11:25,560
scanner,

971
01:11:25,560 --> 01:11:28,920
you see,
if I am not passing that system dot in,

972
01:11:29,680 --> 01:11:32,880
I can not call any method
on the scanner class.

973
01:11:32,880 --> 01:11:35,760
I cannot execute
anything on the scanner class.

974
01:11:36,240 --> 01:11:39,440
So how that how Java guys are forcing
this?

975
01:11:39,440 --> 01:11:42,760
They are forcing
because they have created a constructor

976
01:11:43,280 --> 01:11:46,080
that expects that system

977
01:11:47,440 --> 01:11:50,920
in and then only you can use course.

978
01:11:50,920 --> 01:11:52,480
So if I

979
01:11:53,160 --> 01:11:54,960
hold on my control button

980
01:11:54,960 --> 01:11:58,560
and if I click on this scandal,

981
01:11:58,640 --> 01:12:00,960
you will see that in here

982
01:12:00,960 --> 01:12:06,720
you have a constructor
and Java guys need this information

983
01:12:06,720 --> 01:12:12,200
before you can use any of the members
from this class.

984
01:12:13,200 --> 01:12:14,640
Yes. System dot in.

985
01:12:14,640 --> 01:12:16,680
We are actually passing a parameter.

986
01:12:17,200 --> 01:12:22,160
We are passing an article
and this is the parameter.

987
01:12:22,160 --> 01:12:25,800
But how does it make sense?

988
01:12:25,800 --> 01:12:30,120
And you will see there are multiple
constructors and every construct

989
01:12:30,320 --> 01:12:32,560
constructor required something

990
01:12:34,520 --> 01:12:35,800
in here as well.

991
01:12:35,800 --> 01:12:38,120
And then you can read these instructions.

992
01:12:38,120 --> 01:12:38,840
What are they?

993
01:12:38,840 --> 01:12:41,720
Why we are passing them and all that.

994
01:12:41,720 --> 01:12:44,000
But in the next example we will create

995
01:12:44,600 --> 01:12:49,960
constructors
like, like this cannot last. And

996
01:12:51,560 --> 01:12:53,040
you guys remember that

997
01:12:54,040 --> 01:12:59,760
String Builder class?

998
01:12:59,760 --> 01:13:03,320
Almost all the classes

999
01:13:03,320 --> 01:13:05,240
in Java,

1000
01:13:05,520 --> 01:13:08,200
they have constructors, all of them,

1001
01:13:08,200 --> 01:13:11,280
99% of them I can't name.

1002
01:13:11,280 --> 01:13:13,840
There will hardly be any class

1003
01:13:14,520 --> 01:13:19,800
without constructors.

1004
01:13:19,800 --> 01:13:24,520
So if I again hold down my control button
and if I click on the string builder,

1005
01:13:25,360 --> 01:13:29,520
you see again,
this string is being passed in here

1006
01:13:29,520 --> 01:13:33,320
and I have written something in here
that is using that string

1007
01:13:35,280 --> 01:13:36,480
and you guys can see

1008
01:13:36,480 --> 01:13:39,520
I have another constructors builder
that takes

1009
01:13:39,520 --> 01:13:42,960
this job sequence and under constructor
and under constructors.

1010
01:13:43,560 --> 01:13:49,040
So basically these are different ways of
constructing this string builder object.

1011
01:13:49,040 --> 01:13:51,720
Okay, thing builder object.

1012
01:13:52,080 --> 01:13:54,720
So most of the time
you guys will be seeing 15

1013
01:13:54,720 --> 01:13:56,840
to 20 constructors per class,

1014
01:13:57,840 --> 01:14:00,360
or at least five or ten constructors
per class

1015
01:14:00,640 --> 01:14:05,600
in real life.

1016
01:14:05,600 --> 01:14:07,120
Is it better now?

1017
01:14:07,120 --> 01:14:09,640
Farhad, who is Alexander,

1018
01:14:09,640 --> 01:14:15,200
he wrote something in the chat on Zoom.

1019
01:14:15,200 --> 01:14:19,160
My clips right there
to constructor dog dogged undefined

1020
01:14:21,840 --> 01:14:23,320
Alexander Can you send

1021
01:14:23,320 --> 01:14:25,920
the messages in the check

1022
01:14:27,080 --> 01:14:28,880
in the slack

1023
01:14:36,000 --> 01:14:37,080
in the light question?

1024
01:14:37,080 --> 01:14:38,120
Send them

1025
01:14:40,040 --> 01:14:41,640
suggestion.

1026
01:14:41,960 --> 01:14:46,480
Can we please go through the slides first
and then we go to the examples.

1027
01:14:46,480 --> 01:14:50,640
If you explain each slide and
give an example I think that will help us

1028
01:14:51,400 --> 01:14:51,800
a bit.

1029
01:14:51,800 --> 01:14:56,920
I have asked this in multiple badges,
so almost all of the students,

1030
01:14:56,920 --> 01:15:02,640
they like the examples first
and then the slides, they make more sense.

1031
01:15:03,480 --> 01:15:06,240
So now if I
then I will be going to the slides.

1032
01:15:06,240 --> 01:15:16,320
You will see that most of the things,
terminologies will make more sense.

1033
01:15:16,320 --> 01:15:19,160
So I can I can follow any of the approach.

1034
01:15:19,480 --> 01:15:20,840
It totally depends on you.

1035
01:15:20,840 --> 01:15:26,440
If majority wants me to go through
the slides first, I can go to the slides.

1036
01:15:26,440 --> 01:15:27,160
No issues.

1037
01:15:27,160 --> 01:15:36,240
It totally depends on
you guys how you want to learn.

1038
01:15:36,240 --> 01:15:48,240
Okay, let's to the slides.

1039
01:15:48,240 --> 01:15:49,440
All right. So

1040
01:15:51,240 --> 01:15:54,040
yeah, so constructor

1041
01:15:54,040 --> 01:15:56,880
in Java a constructor

1042
01:15:56,920 --> 01:16:00,040
is a block of code similar to a method.

1043
01:16:00,040 --> 01:16:02,840
So you see, now
if I am reading this sentence,

1044
01:16:02,840 --> 01:16:06,000
you already have kind of an image
inside your mind.

1045
01:16:06,240 --> 01:16:07,720
What is a constructor?

1046
01:16:07,720 --> 01:16:10,280
What is a method?
And then you can relate to things.

1047
01:16:10,280 --> 01:16:13,400
You can ask more exam,
more questions, more

1048
01:16:13,560 --> 01:16:17,880
better questions.

1049
01:16:17,880 --> 01:16:22,800
It is called when an instance of the class

1050
01:16:23,400 --> 01:16:25,600
or object created

1051
01:16:26,360 --> 01:16:29,800
and the memory is allocated
for that object.

1052
01:16:31,720 --> 01:16:34,280
You need a special type of method

1053
01:16:34,280 --> 01:16:37,520
which is used to initialize the objects.

1054
01:16:37,520 --> 01:16:42,320
Okay, so this is the purpose
of a constructor initializing the object.

1055
01:16:42,360 --> 01:16:42,720
Okay.

1056
01:16:42,720 --> 01:16:45,960
You can be having 100 fields
in your class.

1057
01:16:46,080 --> 01:16:46,800
Okay.

1058
01:16:47,080 --> 01:16:51,000
And if you want to force that, everyone
first

1059
01:16:51,280 --> 01:16:54,480
must initialize those fields,

1060
01:16:54,480 --> 01:16:57,560
give initial values to those fields,

1061
01:16:58,320 --> 01:17:01,320
and then they should be able to use
or class.

1062
01:17:01,320 --> 01:17:08,160
You force this
with the help of constructor.

1063
01:17:08,160 --> 01:17:13,360
And now there is also a not
so before this constructor example

1064
01:17:13,560 --> 01:17:16,640
we never created, but

1065
01:17:16,640 --> 01:17:19,880
it is not an object constructor.

1066
01:17:19,880 --> 01:17:21,680
Yes, constructor is not an object.

1067
01:17:21,680 --> 01:17:25,440
Constructor is something different.

1068
01:17:25,440 --> 01:17:28,640
So guys,
before this example we never created

1069
01:17:30,000 --> 01:17:32,040
a constructor, right? So

1070
01:17:33,400 --> 01:17:35,880
what was happening behind the scene?

1071
01:17:35,880 --> 01:17:37,320
Always. Always.

1072
01:17:37,320 --> 01:17:39,680
Your compiler was creating

1073
01:17:40,640 --> 01:17:42,880
a constructor for you.

1074
01:17:42,880 --> 01:17:45,920
So if there is no construct
building a class

1075
01:17:46,240 --> 01:17:50,960
compiler automatically creates
a default constructor.

1076
01:17:50,960 --> 01:17:54,120
Now what is the default? Constructing

1077
01:17:54,120 --> 01:17:56,960
the construct per

1078
01:18:07,080 --> 01:18:09,400
without

1079
01:18:10,200 --> 01:18:13,080
any parameters

1080
01:18:13,880 --> 01:18:15,040
is called a default

1081
01:18:15,040 --> 01:18:24,640
constructor.

1082
01:18:24,640 --> 01:18:28,560
Okay, so this is what we call
as the default constructor

1083
01:18:28,800 --> 01:18:32,560
me constructor
which do not take any parameters.

1084
01:18:33,000 --> 01:18:36,840
So when you guys don't create
any constructor

1085
01:18:36,840 --> 01:18:41,880
at all compiler
automatically behind the scenes, right?

1086
01:18:41,880 --> 01:18:44,800
This piece of code for that's why

1087
01:18:45,160 --> 01:18:51,720
you guys were able to call this dog
and then empty parentheses

1088
01:18:52,280 --> 01:18:56,480
for all classes that you guys
have been creating the objects for

1089
01:18:57,240 --> 01:19:03,120
because a default constructor
was already there, always there.

1090
01:19:03,120 --> 01:19:05,400
So this is actually calling
that constructor.

1091
01:19:05,400 --> 01:19:06,560
This is the syntax.

1092
01:19:06,560 --> 01:19:09,320
If we don't have a constructor,
we will be getting an error.

1093
01:19:09,560 --> 01:19:13,920
So your compiler was
adding a constructor for you

1094
01:19:20,200 --> 01:19:22,800
and this
is called the default constructor.

1095
01:19:23,400 --> 01:19:23,680
Okay.

1096
01:19:23,680 --> 01:19:34,200
It's necessity to compile your code.

1097
01:19:34,200 --> 01:19:38,320
All right,
So for example, we can ask you to type

1098
01:19:38,320 --> 01:19:43,000
the username and password for enter
the construct ideas

1099
01:19:43,920 --> 01:19:46,480
and only after that

1100
01:19:46,480 --> 01:19:49,640
something inside
this constructor will be happened.

1101
01:19:49,960 --> 01:19:50,640
He has done this.

1102
01:19:50,640 --> 01:19:57,400
You are right.

1103
01:19:57,400 --> 01:20:00,080
So these are some of the terminologies.

1104
01:20:00,840 --> 01:20:03,280
So when we create an object,

1105
01:20:03,480 --> 01:20:06,480
so when we write the name of the class,
right?

1106
01:20:06,480 --> 01:20:09,120
So this is the name of the class.

1107
01:20:09,120 --> 01:20:13,440
Then we write any name for the variable
for the object.

1108
01:20:13,680 --> 01:20:16,480
Okay,
so it is also called a reference variable.

1109
01:20:17,640 --> 01:20:19,440
Then we borrowed this assignment.

1110
01:20:19,440 --> 01:20:23,040
Operator. It's an assignment operator.

1111
01:20:23,040 --> 01:20:28,120
Then this new is
actually where your object is created.

1112
01:20:28,280 --> 01:20:30,400
The keyword used to create the object.

1113
01:20:30,920 --> 01:20:33,840
And this of code that you guys write

1114
01:20:34,480 --> 01:20:36,600
name of the class and in parentheses

1115
01:20:37,080 --> 01:20:39,360
you are actually calling a constructor.

1116
01:20:40,120 --> 01:20:43,240
But then you guys were not
this constructor.

1117
01:20:43,520 --> 01:20:46,400
Your compiler was doing it
automatically for you.

1118
01:20:46,480 --> 01:20:46,720
Okay.

1119
01:20:46,720 --> 01:20:51,120
That's why you guys didn't get any errors.

1120
01:20:51,120 --> 01:20:53,640
And then this is just a semicolon.

1121
01:20:53,640 --> 01:20:58,280
There is always a constructor,
whether defined by user or by default.

1122
01:20:58,640 --> 01:21:03,120
If you define one,
then Java will not creative default one.

1123
01:21:04,240 --> 01:21:06,280
If you don't define one,

1124
01:21:06,280 --> 01:21:10,320
then in default will be created.

1125
01:21:10,320 --> 01:21:13,480
And my right
constructor is the same as a method.

1126
01:21:14,400 --> 01:21:15,600
It is an

1127
01:21:17,880 --> 01:21:19,920
it is a name as the class name

1128
01:21:20,160 --> 01:21:23,080
as soon as we call the class on and

1129
01:21:24,360 --> 01:21:28,320
as soon as we call the class on an object
and no, no, no.

1130
01:21:28,720 --> 01:21:30,720
This is where you should practice.

1131
01:21:31,120 --> 01:21:33,880
When you create the object of a class,

1132
01:21:35,040 --> 01:21:37,560
the constructor is executed automatically.

1133
01:21:38,520 --> 01:21:41,360
If we want to make it private,
then we have to put

1134
01:21:41,360 --> 01:21:42,920
some fields in the parameters.

1135
01:21:42,920 --> 01:21:46,480
No, that is also not correct.

1136
01:21:46,480 --> 01:21:50,240
If you want the constructor to be private,

1137
01:21:51,800 --> 01:21:54,600
then you don't have to make any fields
private

1138
01:21:54,600 --> 01:21:56,800
or you don't have to do anything
with the fields

1139
01:21:58,760 --> 01:22:00,680
as soon as the parameters are passed.

1140
01:22:00,680 --> 01:22:01,560
Constructor. No,

1141
01:22:02,840 --> 01:22:03,800
as soon as you

1142
01:22:03,800 --> 01:22:07,520
write the constructor,
that's where the constructor is called.

1143
01:22:07,520 --> 01:22:12,520
It's not related to parameters.

1144
01:22:12,520 --> 01:22:17,320
So in every object creation statement
there is a construct of Yes,

1145
01:22:17,320 --> 01:22:20,800
there is always a constructor
when you are creating

1146
01:22:20,920 --> 01:22:27,520
object.

1147
01:22:27,520 --> 01:22:31,760
Okay, we will do the other examples. So

1148
01:22:33,960 --> 01:22:38,360
when we create instance object of a class

1149
01:22:39,280 --> 01:22:43,160
using new keyword,

1150
01:22:43,160 --> 01:22:46,960
how to understand
and remember all this form.

1151
01:22:46,960 --> 01:22:49,560
Now you guys have to go through the slides

1152
01:22:50,480 --> 01:22:52,720
again and again,

1153
01:22:52,720 --> 01:22:58,240
and after you start your job,
this will be on your fingertips

1154
01:22:58,240 --> 01:23:03,520
because this will be your day to day tasks
like writing the code, debugging code,

1155
01:23:04,680 --> 01:23:06,120
checking others code.

1156
01:23:06,120 --> 01:23:09,840
This will be your day to day tasks
so you guys don't have to memorize

1157
01:23:09,840 --> 01:23:11,160
these things anymore.

1158
01:23:11,160 --> 01:23:14,160
And then you are
always allowed to use Google

1159
01:23:15,800 --> 01:23:18,000
practice, practice and practice.

1160
01:23:18,360 --> 01:23:20,520
Try some more. Easy for now.

1161
01:23:20,520 --> 01:23:21,400
That's the key.

1162
01:23:21,400 --> 01:23:23,760
In order to use the constructor variables,

1163
01:23:24,880 --> 01:23:27,480
we still have to add new words.

1164
01:23:27,480 --> 01:23:31,480
You can also try all means if that helps.

1165
01:23:31,480 --> 01:23:34,560
In order to use the constructor variables,

1166
01:23:34,560 --> 01:23:38,400
we still have to define them first, right?

1167
01:23:40,080 --> 01:23:44,520
In order to use the constructor variables,
we still have to define them first.

1168
01:23:44,640 --> 01:23:47,880
We can just define them
inside the constructor. Yes.

1169
01:23:47,880 --> 01:23:50,960
Give me the if you are talking

1170
01:23:50,960 --> 01:23:56,040
about the parameters,

1171
01:23:56,040 --> 01:24:14,000
if the button and magic means
for your brain, become a tree,

1172
01:24:14,000 --> 01:24:19,080
and if when we create

1173
01:24:19,080 --> 01:24:22,320
instance of a class using new keyword,

1174
01:24:23,080 --> 01:24:25,880
a constructor for that class is called

1175
01:24:27,240 --> 01:24:31,200
new keyword is used to create object.

1176
01:24:31,200 --> 01:24:32,680
In Java

1177
01:24:33,720 --> 01:24:35,120
we okay

1178
01:24:37,080 --> 01:24:39,480
then we create object.

1179
01:24:39,480 --> 01:24:44,960
Who is born with that is lucky
otherwise all month will not work.

1180
01:24:46,400 --> 01:24:47,520
The two

1181
01:24:47,520 --> 01:24:51,120
years guys, we have some real stuff on TV.

1182
01:24:52,440 --> 01:24:56,800
I lost my brain
and I have to save the mental.

1183
01:24:56,800 --> 01:25:00,800
We don't have a leaderboard
hospital here in the US

1184
01:25:06,600 --> 01:25:10,840
when we create object
by using new operator

1185
01:25:11,400 --> 01:25:15,680
after new keyword back
part is constructor.

1186
01:25:16,240 --> 01:25:20,600
So in the part that you guys are right
after the new keyword

1187
01:25:21,080 --> 01:25:23,800
is actually call to the constructor

1188
01:25:24,840 --> 01:25:30,560
and it is executing a constructor.

1189
01:25:30,560 --> 01:25:35,080
All right, so rules to declare
constructor constructor

1190
01:25:35,080 --> 01:25:39,320
not allowed any return type, even void.

1191
01:25:39,680 --> 01:25:40,400
Okay,

1192
01:25:41,040 --> 01:25:45,240
so if you put a written type,
your java will get confused.

1193
01:25:45,240 --> 01:25:48,200
Okay. It will not

1194
01:25:48,840 --> 01:25:51,480
be that as deconstructive anymore.

1195
01:25:52,400 --> 01:25:54,600
So let's say for example,

1196
01:25:56,480 --> 01:26:00,680
if we put void in here

1197
01:26:03,680 --> 01:26:07,240
and if now I executed Discord,

1198
01:26:08,400 --> 01:26:11,480
now we already have starting
getting the other

1199
01:26:11,760 --> 01:26:16,440
and so it says the constructor dog,
blah blah is undefined.

1200
01:26:16,680 --> 01:26:20,560
So as soon as I put any return type

1201
01:26:21,400 --> 01:26:23,880
with the constructor that construct,

1202
01:26:23,960 --> 01:26:27,160
that constructor
is not a constructor anymore.

1203
01:26:27,360 --> 01:26:30,120
Now it is treated as a method.

1204
01:26:30,240 --> 01:26:30,960
Okay.

1205
01:26:31,080 --> 01:26:33,960
And you will be getting an error on that.

1206
01:26:34,080 --> 01:26:39,360
So this is not allowed with constructors.

1207
01:26:39,360 --> 01:26:48,040
We go there for having fun sometimes.

1208
01:26:48,040 --> 01:26:52,120
Constructors name class name must be same.

1209
01:26:52,120 --> 01:26:55,160
So the name of the constructor
and the name of the class

1210
01:26:55,800 --> 01:27:04,160
they must be seen.

1211
01:27:04,160 --> 01:27:07,240
I know these are desperate dramas,
you guys.

1212
01:27:07,240 --> 01:27:11,120
Even if you guys spend one odd per day
going to the slides,

1213
01:27:11,520 --> 01:27:25,440
you should remember all of this.

1214
01:27:25,440 --> 01:27:26,320
Easy for you.

1215
01:27:26,320 --> 01:27:35,640
Not for me though.

1216
01:27:35,640 --> 01:27:38,520
There are two types of constructors

1217
01:27:39,600 --> 01:27:40,480
no argument

1218
01:27:40,480 --> 01:27:43,760
constructor in which we don't pass
any parameters.

1219
01:27:44,400 --> 01:27:47,000
Thank you. I spent 5 hours.

1220
01:27:47,160 --> 01:27:49,320
Are we okay?

1221
01:27:49,320 --> 01:27:52,280
And then we have the parameterized
constructors.

1222
01:27:52,440 --> 01:27:55,440
Okay, so this is the example

1223
01:27:55,440 --> 01:27:59,400
of a non parameterized constructor

1224
01:27:59,400 --> 01:28:04,600
in which we are not passing
any parameters.

1225
01:28:04,600 --> 01:28:06,960
None is default.

1226
01:28:07,040 --> 01:28:08,440
Yes, this one is D for.

1227
01:28:08,440 --> 01:28:12,120
This is the constructor
that is created for you by Java.

1228
01:28:12,120 --> 01:28:20,440
Then you don't create one.

1229
01:28:20,440 --> 01:28:24,400
I You have a bad migraine over 24 hours

1230
01:28:25,800 --> 01:28:28,840
now and focusing now
and trying to understand

1231
01:28:28,840 --> 01:28:30,920
this compilation makes it worse.

1232
01:28:30,920 --> 01:28:34,320
So now when you have the situation,
think about in dollars

1233
01:28:34,320 --> 01:28:36,520
that you will be getting
when you get a job

1234
01:28:38,000 --> 01:28:39,880
that will resolve your migration

1235
01:28:39,880 --> 01:28:49,760
issue.

1236
01:28:49,760 --> 01:28:55,280
That's exactly what I am doing.

1237
01:28:55,280 --> 01:28:56,720
So this is called the

1238
01:28:58,760 --> 01:29:01,800
non parameterized constructor,
the default one.

1239
01:29:02,640 --> 01:29:04,960
And this one other one is the parameter

1240
01:29:05,200 --> 01:29:08,400
constructor.

1241
01:29:08,400 --> 01:29:15,320
I will never get rid of animals.

1242
01:29:15,320 --> 01:29:16,200
All right.

1243
01:29:16,200 --> 01:29:18,920
So inside this class,

1244
01:29:20,000 --> 01:29:23,640
if we are not declaring any constructor,

1245
01:29:24,600 --> 01:29:27,960
then compiler generates zero

1246
01:29:27,960 --> 01:29:32,040
argument constructor
with empty implementation

1247
01:29:32,960 --> 01:29:35,240
and the time of compilation

1248
01:29:35,360 --> 01:29:38,120
is called the default constructor.

1249
01:29:40,000 --> 01:29:44,960
Now this is how the default constructor
looks like.

1250
01:29:46,000 --> 01:29:50,400
So there will not
there will not be a single line of code

1251
01:29:51,000 --> 01:29:53,320
inside the default constructor.

1252
01:29:53,840 --> 01:29:54,920
There will.

1253
01:29:55,680 --> 01:29:56,600
There will.

1254
01:29:56,600 --> 01:29:59,640
There will be no parameters

1255
01:29:59,640 --> 01:30:01,240
for the default constructor.

1256
01:30:01,240 --> 01:30:04,720
So this is the code that your compiler
index for you

1257
01:30:05,040 --> 01:30:08,640
in your source code.

1258
01:30:08,640 --> 01:30:14,360
Get there dog and prior to constructed
by Java is a default constructor public?

1259
01:30:14,360 --> 01:30:15,560
Yes. Simon.

1260
01:30:15,560 --> 01:30:17,840
The default constructor is public.

1261
01:30:17,840 --> 01:30:20,200
Can we go for break please?

1262
01:30:20,200 --> 01:30:21,880
Yes, we can go for debris.

1263
01:30:21,880 --> 01:30:26,680
Definitely.

1264
01:30:26,680 --> 01:30:30,560
So we will discuss this example
after the break.

1265
01:30:30,560 --> 01:30:35,160
So let's have a shorter break this time
and the next break will be a longer one

1266
01:30:35,160 --> 01:30:39,040
and we will be solving some homework tasks

1267
01:30:39,120 --> 01:30:58,360
during that break.

1268
01:30:58,360 --> 01:30:58,840
Extreme.

1269
01:30:59,920 --> 01:31:01,840
All right, guys, please be back.

1270
01:31:01,840 --> 01:31:05,120
And please,
please remind me about the recording.

1271
01:31:05,120 --> 01:31:13,160
Is there anyone who can take this
responsibility?

1272
01:31:13,160 --> 01:31:15,960
Alexandre,
You have to post in the sport channel

1273
01:31:17,480 --> 01:31:20,920
if you are facing any issues.

1274
01:31:20,920 --> 01:31:23,280
All right, so we have multiple people.
That's great.

1275
01:31:23,840 --> 01:31:26,080
Let's see if you can remind me about this

1276
01:31:34,920 --> 01:31:37,200
because know it has already recorded the

1277
01:31:40,440 --> 01:31:41,520
has already coded

1278
01:31:41,520 --> 01:31:47,800
the Java program to remind us.

1279
01:31:47,800 --> 01:31:49,040
All right,

1280
01:31:51,480 --> 01:31:55,000
so this is how the default constructor

1281
01:31:55,080 --> 01:32:02,120
looks like.

1282
01:32:02,120 --> 01:32:05,720
So the compiler generated constructor

1283
01:32:06,360 --> 01:32:10,320
is called the default constructor inside

1284
01:32:11,840 --> 01:32:12,520
the class.

1285
01:32:12,520 --> 01:32:16,280
Default constructor is
it is in invisible mode.

1286
01:32:16,600 --> 01:32:20,400
So your source code that we write in Java

1287
01:32:21,880 --> 01:32:25,320
plus it is converted to
something called Bytecode,

1288
01:32:26,640 --> 01:32:30,720
and then that bytecode is translated
to the machine code.

1289
01:32:30,720 --> 01:32:36,240
And the machine code is the actual thing
that is executed on your computer.

1290
01:32:36,240 --> 01:32:40,920
So when it is converted
from the source code to the bytecode,

1291
01:32:40,920 --> 01:32:45,080
that will be compiler index,
those that default constructor

1292
01:32:46,960 --> 01:32:49,560
default values are assigned by JVM

1293
01:32:49,560 --> 01:32:53,880
to the fields
like zero or null, depending on the type.

1294
01:32:53,880 --> 01:32:57,840
So you guys see in the class
the instance fields.

1295
01:32:58,280 --> 01:33:00,760
If we don't assign any values

1296
01:33:01,120 --> 01:33:05,360
and if we try to use them,
we get the default values.

1297
01:33:05,360 --> 01:33:09,080
So who is assigning those default values
to these fields?

1298
01:33:09,400 --> 01:33:15,800
Is the JVM.

1299
01:33:15,800 --> 01:33:18,840
If any constructor contains

1300
01:33:19,240 --> 01:33:23,920
list of variable as in its signature,
I guess. So.

1301
01:33:23,920 --> 01:33:26,080
You guys don't know about the signature.

1302
01:33:27,040 --> 01:33:30,160
Do you guys know about the signature

1303
01:33:33,600 --> 01:33:36,480
over.

1304
01:33:36,480 --> 01:33:39,760
So this part that has this name

1305
01:33:40,520 --> 01:33:44,520
and the parameters is called
the signature.

1306
01:33:45,240 --> 01:33:48,280
Okay, the name of the class

1307
01:33:48,280 --> 01:33:53,480
Sorry, the name of the constructor or
the name of the method and the parameters.

1308
01:33:53,520 --> 01:33:56,440
This part is called the signature

1309
01:33:56,440 --> 01:34:00,560
of that Metro constructor,
and it's a very famous interview question.

1310
01:34:00,840 --> 01:34:01,760
What is it?

1311
01:34:01,800 --> 01:34:03,880
What is the signature of a method?

1312
01:34:03,880 --> 01:34:08,440
So it's only the name plus the parameters,
not the return type,

1313
01:34:08,440 --> 01:34:12,240
not the excess modifiers,
not the non excess modifiers.

1314
01:34:12,800 --> 01:34:17,280
The header, on the other hand,
for hard header also includes

1315
01:34:17,280 --> 01:34:22,160
these return are these access modifiers,
return types and non access modifiers,

1316
01:34:22,560 --> 01:34:25,440
but signature only means this block

1317
01:34:26,360 --> 01:34:43,920
parameters and name.

1318
01:34:43,920 --> 01:34:50,520
All right, so if any constructor
contains a list of variable

1319
01:34:51,480 --> 01:34:53,160
in x signature,

1320
01:34:53,160 --> 01:34:58,080
it is known as parameterized constructor.

1321
01:34:58,080 --> 01:35:00,960
Can you remind us in March?

1322
01:35:00,960 --> 01:35:01,560
Sure.

1323
01:35:01,560 --> 01:35:03,440
You will be having the slides.

1324
01:35:03,440 --> 01:35:08,640
You can go through those lines
and you will remember everything.

1325
01:35:08,640 --> 01:35:11,400
A parameterized constructor by the way,

1326
01:35:12,560 --> 01:35:15,000
apart from Doc, we will be having

1327
01:35:15,000 --> 01:35:19,800
we will continue having these sessions,
even if are done with the course.

1328
01:35:20,480 --> 01:35:24,040
So let's say for example,
if you guys don't understand

1329
01:35:24,040 --> 01:35:29,400
certain topics from Java or certain topics
from gate manual testing,

1330
01:35:29,400 --> 01:35:32,520
you guys can request us to host

1331
01:35:33,520 --> 01:35:38,040
those sessions again
and then we will arrange the instructors,

1332
01:35:38,040 --> 01:35:41,680
then we will host those sessions again

1333
01:35:42,000 --> 01:35:46,560
at the end of this course.

1334
01:35:46,560 --> 01:35:51,240
If parameterized constructor is one
which takes some parameters.

1335
01:35:51,480 --> 01:35:55,080
Okay, Parameterized constructor

1336
01:35:55,080 --> 01:36:00,520
is used to provide different values
to distinct objects.

1337
01:36:00,520 --> 01:36:05,160
Okay, so we can pass the parameter DE
and these parameters.

1338
01:36:05,160 --> 01:36:09,880
They will be assigned to fields
and we can have different different values

1339
01:36:09,880 --> 01:36:13,840
for different, different object.

1340
01:36:13,840 --> 01:36:16,240
So this is just an example.

1341
01:36:16,240 --> 01:36:18,680
This is a class
and this is the constructor.

1342
01:36:18,680 --> 01:36:21,360
And in here
we have some list of parameters

1343
01:36:22,800 --> 01:36:24,960
and that's how I create those.

1344
01:36:24,960 --> 01:36:29,760
So I pass value one value to
or I can say new class value one value,

1345
01:36:30,960 --> 01:36:38,520
just passing those values.

1346
01:36:38,520 --> 01:36:42,880
These are some important points
related to the parameterized constructor.

1347
01:36:43,520 --> 01:36:47,640
So whenever we create an object

1348
01:36:48,040 --> 01:36:52,920
using parameterized constructor,

1349
01:36:52,920 --> 01:36:57,040
it must and define
parameterized constructor.

1350
01:36:57,080 --> 01:36:59,880
Otherwise we will get compile time error.

1351
01:37:00,080 --> 01:37:03,920
So we must first
define in that constructor

1352
01:37:04,840 --> 01:37:07,600
and then we can call
the parameterized constructor

1353
01:37:09,720 --> 01:37:14,280
whenever we define the objects
with respect

1354
01:37:14,280 --> 01:37:19,880
to both parameterized constructor
and a default constructor.

1355
01:37:19,880 --> 01:37:20,200
Okay.

1356
01:37:20,320 --> 01:37:23,960
Can we call signature
also in typical method? Yes.

1357
01:37:24,320 --> 01:37:29,360
The signature is actually a term
from methods which the constructors also.

1358
01:37:29,360 --> 01:37:31,720
We can also use this term
for the constructors

1359
01:37:33,200 --> 01:37:34,320
and I am saying it again.

1360
01:37:34,320 --> 01:37:36,840
It's a very important interview question.

1361
01:37:37,200 --> 01:37:41,480
The difference between the method head
or they might ask you

1362
01:37:41,840 --> 01:37:47,240
if written type is included
in the method signature or not.

1363
01:37:47,240 --> 01:37:51,360
So the matter signature is only name
plus parameters, no return type.

1364
01:37:52,680 --> 01:37:55,720
Whenever we define the objects

1365
01:37:55,800 --> 01:37:58,880
with respect
to both parameterized constructor

1366
01:37:59,920 --> 01:38:04,000
and default constructor,
it must define both the constructors.

1367
01:38:04,880 --> 01:38:07,240
If first we must have those tokens factors

1368
01:38:07,680 --> 01:38:10,920
and then we can only call them in
any class

1369
01:38:10,960 --> 01:38:14,120
maximum one default constructor.

1370
01:38:14,320 --> 01:38:18,040
So only one default constructor

1371
01:38:18,200 --> 01:38:21,080
but and a number
of parameterized constructor.

1372
01:38:21,080 --> 01:38:28,200
So we can have
as many constructors as we like.

1373
01:38:28,200 --> 01:38:32,120
This is just another example
of the parameterized constructor.

1374
01:38:32,160 --> 01:38:36,800
So we have both Fields A and B
that is the name of the class.

1375
01:38:37,880 --> 01:38:39,920
So we again create a test,

1376
01:38:41,640 --> 01:38:44,040
then we boss integer values,

1377
01:38:44,800 --> 01:38:47,400
then We just put a green card statement.

1378
01:38:48,760 --> 01:38:50,760
We assign the values to the fields

1379
01:38:52,040 --> 01:38:55,160
and we are also printing values in here.

1380
01:38:55,160 --> 01:38:59,040
And this is where I create
the objects of text class

1381
01:38:59,040 --> 01:39:02,040
and all the parameterized constructor

1382
01:39:09,120 --> 01:39:12,760
will.

1383
01:39:12,760 --> 01:39:14,200
This is the name of the class.

1384
01:39:14,200 --> 01:39:16,200
Is this a construct provides?

1385
01:39:16,200 --> 01:39:21,760
Is this first one a constructor?

1386
01:39:21,760 --> 01:39:22,720
No. Why?

1387
01:39:22,720 --> 01:39:25,240
Because first it has a written type

1388
01:39:26,000 --> 01:39:29,640
and then the name is not
same as the class.

1389
01:39:30,600 --> 01:39:38,480
Is this a constructor?

1390
01:39:38,480 --> 01:39:43,600
Is it a default constructor?

1391
01:39:43,600 --> 01:39:50,360
Is it a default constructor?

1392
01:39:50,360 --> 01:39:52,640
No, it's not a default constructor.

1393
01:39:52,960 --> 01:39:55,920
Default
constructor is created by a compiler

1394
01:39:56,200 --> 01:40:00,360
and it does not have any lines of code
inside there in here.

1395
01:40:00,360 --> 01:40:02,640
First we are creating this constructor.

1396
01:40:03,000 --> 01:40:05,320
So again,
we have a line of code inside of this.

1397
01:40:05,800 --> 01:40:08,400
So this is called a zero argument
constructor.

1398
01:40:08,680 --> 01:40:11,640
Okay. Not default.

1399
01:40:11,640 --> 01:40:18,480
Is it also a constructor? Yes.

1400
01:40:18,680 --> 01:40:22,160
This one is a
what do we call this type of constructor

1401
01:40:22,880 --> 01:40:29,480
parameterized constructor.

1402
01:40:29,480 --> 01:40:34,680
So compiler generated
zero argument is called B

1403
01:40:34,720 --> 01:40:38,840
for constructor user
defined as zero argument.

1404
01:40:38,840 --> 01:40:42,280
Constructor is not a B for the constructor

1405
01:40:43,200 --> 01:40:46,560
constructor article are local variables.

1406
01:40:46,560 --> 01:40:48,960
Okay, so we are creating these.

1407
01:40:50,480 --> 01:40:52,080
So in here

1408
01:40:52,280 --> 01:40:54,760
I am first calling

1409
01:40:54,760 --> 01:40:57,560
my guess and let me clear this out.

1410
01:40:58,200 --> 01:41:01,320
So in here guys, I am creating an object

1411
01:41:01,520 --> 01:41:05,160
and I am not passing
anything to the constructor.

1412
01:41:05,160 --> 01:41:07,960
So can you guys
guess which constructor will be called?

1413
01:41:09,160 --> 01:41:11,520
So I have multiple constructors
in this class,

1414
01:41:12,120 --> 01:41:14,520
but on first line am

1415
01:41:15,000 --> 01:41:18,240
trying to create an object and I am not

1416
01:41:19,240 --> 01:41:21,920
passing anything to the constructor.

1417
01:41:22,440 --> 01:41:25,720
So can you guys tell me which constructor
does this number one

1418
01:41:26,280 --> 01:41:28,560
or this number
to which one of them will be called

1419
01:41:30,680 --> 01:41:32,040
the first one?

1420
01:41:32,040 --> 01:41:35,760
So compiler can automatically detect this

1421
01:41:35,760 --> 01:41:38,560
that if you have multiple constructors

1422
01:41:39,360 --> 01:41:43,280
and if you are not passing a value

1423
01:41:44,680 --> 01:41:48,960
in the form of arguments Java can detect

1424
01:41:49,320 --> 01:41:54,520
and it can the appropriate constructor
if you have multiple choices.

1425
01:41:55,480 --> 01:41:56,200
And when

1426
01:41:56,200 --> 01:41:59,280
we pass something to this constructor

1427
01:42:00,000 --> 01:42:02,800
now in Java, know
that there is a constructor

1428
01:42:03,720 --> 01:42:05,640
and this time

1429
01:42:09,720 --> 01:42:11,760
the number two will be called

1430
01:42:13,000 --> 01:42:13,680
this one.

1431
01:42:13,680 --> 01:42:16,840
So that's why first we get this output

1432
01:42:19,000 --> 01:42:22,240
and then we get this output

1433
01:42:23,000 --> 01:42:26,240
and then we are calling method one.

1434
01:42:26,560 --> 01:42:29,720
So there is also a print out statement.

1435
01:42:29,720 --> 01:42:32,800
So that's why
we get these print statements.

1436
01:42:34,400 --> 01:42:38,400
What if two constructors have same data
type inside its prime?

1437
01:42:38,640 --> 01:42:39,840
It's not possible.

1438
01:42:39,840 --> 01:42:43,800
MUHAMMAD If you put same data type,
you will be getting a net of

1439
01:42:45,120 --> 01:42:47,200
your smart allowed

1440
01:42:47,200 --> 01:42:50,800
same name and same data type in chalk.

1441
01:42:50,840 --> 01:42:53,640
If this signature is same,

1442
01:42:53,640 --> 01:42:55,960
you can not have two methods
with the same signature,

1443
01:42:57,360 --> 01:43:07,440
you will be getting in that.

1444
01:43:07,440 --> 01:43:12,880
What is the difference between
a user defined and the default one?

1445
01:43:13,240 --> 01:43:17,640
So default or default one,
he knows it created by compiler.

1446
01:43:18,360 --> 01:43:20,680
It does not have any piece of code

1447
01:43:21,800 --> 01:43:23,520
inside it

1448
01:43:23,600 --> 01:43:26,680
and that is called the default one.

1449
01:43:26,760 --> 01:43:31,520
The zero argument one is defined by a user
and I can put any piece of code inside

1450
01:43:31,520 --> 01:43:36,200
that is Mohammad.

1451
01:43:36,200 --> 01:43:40,560
So if these constructors, they belong
to the same class, you cannot do that.

1452
01:43:40,920 --> 01:43:42,120
You cannot do that.

1453
01:43:42,120 --> 01:43:48,920
You should not allow.

1454
01:43:48,920 --> 01:43:51,000
And also guys, this is also not allowed.

1455
01:43:51,360 --> 01:43:56,400
So this time I have only one constructor.

1456
01:43:56,400 --> 01:44:00,120
So when I write at least one
a constructor,

1457
01:44:01,000 --> 01:44:05,880
the default constructor
that Java provides, it's gone.

1458
01:44:05,880 --> 01:44:06,320
Okay.

1459
01:44:06,320 --> 01:44:10,280
Now compiler will not create
that default constructor.

1460
01:44:10,800 --> 01:44:13,720
So as

1461
01:44:13,720 --> 01:44:17,040
soon as I write at least one

1462
01:44:17,040 --> 01:44:20,880
constructor,
the default constructor is gone.

1463
01:44:20,920 --> 01:44:22,800
Okay, Java will not provide this one.

1464
01:44:22,800 --> 01:44:24,720
And now

1465
01:44:24,800 --> 01:44:27,440
if you tried to call,

1466
01:44:27,440 --> 01:44:30,320
if you try to create an object

1467
01:44:31,520 --> 01:44:33,880
and if the signature

1468
01:44:34,840 --> 01:44:38,760
of that object call is not mess

1469
01:44:39,040 --> 01:44:44,320
with the signature of this constructor,
you will be getting an error.

1470
01:44:44,720 --> 01:44:48,040
This Constructor is expecting an argument,

1471
01:44:49,560 --> 01:44:52,280
but I am not putting any argument in here.

1472
01:44:52,280 --> 01:44:56,040
If we try to do that,
we will be getting an error.

1473
01:44:56,280 --> 01:44:57,000
Okay.

1474
01:44:57,120 --> 01:45:00,440
So now only
this constructor is accepted, but

1475
01:45:06,240 --> 01:45:07,720
what is the difference?

1476
01:45:07,720 --> 01:45:12,880
Zero argument in default
and in defined is so zero

1477
01:45:12,880 --> 01:45:16,280
argument is defined by user
and default is defined

1478
01:45:16,280 --> 01:45:19,560
by compiler. Okay.

1479
01:45:19,560 --> 01:45:23,760
So you can also sorry if we are trying
to compile below application,

1480
01:45:23,760 --> 01:45:27,800
the compiler will generate
error message cannot find symbol

1481
01:45:27,800 --> 01:45:32,360
because compiler is unable
to generate the default constructor.

1482
01:45:32,600 --> 01:45:33,120
Okay.

1483
01:45:33,120 --> 01:45:39,000
So as soon as you write your own
constructor it can be zero argument.

1484
01:45:39,000 --> 01:45:41,240
It can be one argument to argument.

1485
01:45:41,240 --> 01:45:48,960
Any argument Now default one is gone
and now you must pass those arguments

1486
01:45:49,440 --> 01:45:53,120
inside the constructor call if you want.

1487
01:45:53,120 --> 01:45:54,520
That ought to be compiled.

1488
01:45:56,040 --> 01:45:57,240
Is it clear, guys,

1489
01:45:57,240 --> 01:46:22,800
why we get an error in here on line 14?

1490
01:46:22,800 --> 01:46:25,440
So far the rules of same

1491
01:46:26,320 --> 01:46:28,520
if you want to call a private matter,

1492
01:46:28,520 --> 01:46:32,040
how do you do that?

1493
01:46:32,040 --> 01:46:36,760
Same way you can call a private
constructor inside the same example.

1494
01:46:37,800 --> 01:46:54,960
What is confusing there?

1495
01:46:54,960 --> 01:46:57,600
Last part why we have an error.

1496
01:46:57,600 --> 01:46:59,840
Can you guys, can you guys tell now why

1497
01:46:59,840 --> 01:47:31,640
we are having attack on this line?

1498
01:47:31,640 --> 01:47:33,120
So now

1499
01:47:33,680 --> 01:47:36,720
in this test class,
is there any constructor

1500
01:47:36,920 --> 01:47:49,600
which does not take any parameters?

1501
01:47:49,600 --> 01:47:53,400
Where is that constructor which does not
take any parameters in this class?

1502
01:47:54,280 --> 01:47:56,680
Then you tell me the line number

1503
01:48:18,280 --> 01:48:19,360
is So

1504
01:48:19,360 --> 01:48:24,440
because this constructor on line,
Salman is expecting

1505
01:48:24,440 --> 01:48:30,280
an integer to be passed
and we are not passing that in there.

1506
01:48:32,040 --> 01:48:33,120
That argument.

1507
01:48:33,120 --> 01:48:36,080
That's why we got an error.

1508
01:48:36,080 --> 01:48:38,680
It is a signature matching issue. Yes.

1509
01:48:38,680 --> 01:48:44,200
And will you are you are right.

1510
01:48:44,200 --> 01:49:01,600
Is there anyone else
who is confused about this error?

1511
01:49:01,600 --> 01:49:05,120
No one is confused.

1512
01:49:05,120 --> 01:49:06,840
All right, let's do another example.

1513
01:49:06,840 --> 01:49:07,520
Let's

1514
01:49:11,480 --> 01:49:13,080
let's do it.

1515
01:49:13,080 --> 01:49:17,320
For example, this time, just

1516
01:49:24,400 --> 01:49:27,440
if there are two arguments

1517
01:49:27,440 --> 01:49:31,280
in line seven and we pass only one,
then it would still be an error.

1518
01:49:31,280 --> 01:49:33,960
Yes, it would still an error.

1519
01:49:33,960 --> 01:49:37,680
That means everyone is not sure
if they are confused or not.

1520
01:49:38,000 --> 01:49:40,240
All right, that's great

1521
01:49:42,680 --> 01:49:46,120
to hear.

1522
01:49:46,120 --> 01:49:50,160
Thank you for letting me do this,
this information,

1523
01:49:50,360 --> 01:49:53,280
letting me know about this information and

1524
01:49:59,000 --> 01:49:59,760
all our values.

1525
01:49:59,760 --> 01:50:03,480
So tell me about some fears of

1526
01:50:04,880 --> 01:50:08,200
a thought

1527
01:50:08,200 --> 01:50:10,000
I can have

1528
01:50:39,520 --> 01:50:41,120
them here.

1529
01:50:41,120 --> 01:50:43,560
This would be a number.

1530
01:50:43,560 --> 01:50:45,600
It can have characters, right?

1531
01:50:46,480 --> 01:50:52,160
It's not only numbers,
it's the players, particularly as

1532
01:50:53,440 --> 01:51:02,640
it's you guys tell me.

1533
01:51:02,640 --> 01:51:06,120
Two more fears, simpler one
that everyone can understand

1534
01:51:09,480 --> 01:51:11,000
is already there.

1535
01:51:11,000 --> 01:51:13,200
I can go out and check my car

1536
01:51:13,600 --> 01:51:15,520
and if you want it

1537
01:51:16,440 --> 01:51:20,160
or what modified mileage

1538
01:51:32,880 --> 01:51:33,640
match.

1539
01:51:34,000 --> 01:51:35,160
I think that these are enough.

1540
01:51:35,160 --> 01:51:39,480
So let's say, guys, I have this car, okay?

1541
01:51:40,080 --> 01:51:44,600
And I want to use the best practices and

1542
01:51:54,000 --> 01:51:57,360
I want to use the best practices

1543
01:51:57,360 --> 01:51:59,880
and I want to initialize

1544
01:52:01,200 --> 01:52:05,480
these fields
with the help of a constructor.

1545
01:52:05,760 --> 01:52:10,800
Okay, so how can I create a constructor?

1546
01:52:10,800 --> 01:52:12,720
Works for I'd

1547
01:52:17,760 --> 01:52:18,080
does.

1548
01:52:18,080 --> 01:52:19,920
Your field has to be private?

1549
01:52:19,920 --> 01:52:23,720
Yes. It's pathetic
if we make them private.

1550
01:52:23,720 --> 01:52:25,800
Okay, so

1551
01:52:25,800 --> 01:52:48,240
let me quickly do act.

1552
01:52:48,240 --> 01:52:51,080
So I need to write new car

1553
01:52:51,080 --> 01:52:52,720
or public car?

1554
01:52:52,720 --> 01:52:54,480
New car.

1555
01:52:54,640 --> 01:52:57,080
I'm not making fields private.

1556
01:52:57,080 --> 01:52:58,280
Okay? I need their.

1557
01:53:00,080 --> 01:53:01,600
Can we make them private?

1558
01:53:01,600 --> 01:53:03,600
Yes, we can also do that. Totally depends.

1559
01:53:04,000 --> 01:53:06,960
What are you trying to store
in those fields?

1560
01:53:06,960 --> 01:53:07,320
Okay.

1561
01:53:07,320 --> 01:53:10,640
It is not always the case
that all the rules

1562
01:53:10,640 --> 01:53:14,160
should always be private so we can have

1563
01:53:15,520 --> 01:53:18,000
a access modifier

1564
01:53:18,000 --> 01:53:21,080
and then the name of the class address.

1565
01:53:21,080 --> 01:53:23,400
So we are not trying to create an object.

1566
01:53:23,400 --> 01:53:28,680
Nassir and Fatima,
we are trying to create a constructor.

1567
01:53:28,680 --> 01:53:32,480
The syntax that you guys have written
is the syntax

1568
01:53:32,480 --> 01:53:35,480
to create an object.

1569
01:53:35,520 --> 01:53:38,920
So I write car and then I

1570
01:53:42,920 --> 01:53:47,400
and then I can initialize these fields.

1571
01:53:47,400 --> 01:53:52,560
I can see,

1572
01:53:52,560 --> 01:53:58,280
and then make

1573
01:54:05,600 --> 01:55:33,480
a right.

1574
01:55:33,960 --> 01:55:36,240
These are some of the fields

1575
01:55:37,440 --> 01:55:42,160
that an object can have in real life.

1576
01:55:42,400 --> 01:55:46,840
There will be
more, There will be more. And

1577
01:55:48,040 --> 01:55:51,160
if you are creating a construct

1578
01:55:51,640 --> 01:55:58,920
and if you make it mandatory,
it will be passed inside your constructor.

1579
01:55:59,040 --> 01:56:02,800
What do you guys think will be object
object creation?

1580
01:56:02,800 --> 01:56:05,560
Will it be easy or does

1581
01:56:17,400 --> 01:56:19,520
If someone has to pass

1582
01:56:19,520 --> 01:56:25,200
all of these fields when they are creating
the object of your class,

1583
01:56:25,680 --> 01:56:49,160
will it be easy for them or hard?

1584
01:56:49,160 --> 01:56:53,440
What if someone does not know the values
for all the fields?

1585
01:56:53,960 --> 01:56:56,560
It will be hard, right?

1586
01:56:56,560 --> 01:56:59,480
Having ID for zero or

1587
01:56:59,640 --> 01:57:03,560
having a default constructor
or zero argument constructor

1588
01:57:04,680 --> 01:57:05,680
is easy.

1589
01:57:05,680 --> 01:57:07,920
They don't have to pass any information.

1590
01:57:07,920 --> 01:57:12,640
They can create an object
when we make it compulsory

1591
01:57:12,840 --> 01:57:15,240
that they must pass these

1592
01:57:15,720 --> 01:57:19,640
five 1050, maybe 100 fields.

1593
01:57:20,280 --> 01:57:24,360
If they have to create the object,
it will be hard. Why?

1594
01:57:24,360 --> 01:57:27,840
First of all, they must have complete

1595
01:57:28,040 --> 01:57:30,960
information about your class

1596
01:57:31,960 --> 01:57:36,520
and then they must pass all that info.

1597
01:57:36,520 --> 01:57:42,160
Now what can happen is that as
you guys have used this kind of a class,

1598
01:57:42,760 --> 01:57:48,080
there are hundreds of methods
in that scanner class right?

1599
01:57:48,080 --> 01:57:50,960
And what

1600
01:57:51,280 --> 01:57:54,520
what can happen is that at most

1601
01:57:54,800 --> 01:57:58,440
how many methods you guys have used
from the scanner class, maybe two,

1602
01:57:58,680 --> 01:58:03,960
three at max, five, right where
there are other 100 meters in that class.

1603
01:58:04,440 --> 01:58:07,200
And not all the methods

1604
01:58:08,160 --> 01:58:11,400
they require

1605
01:58:12,720 --> 01:58:16,320
this information
to be passed to that class.

1606
01:58:16,320 --> 01:58:16,680
Right.

1607
01:58:16,680 --> 01:58:20,640
So what can happen
is that your methods in your class,

1608
01:58:21,160 --> 01:58:24,840
they might be using one
field of your class, might be using

1609
01:58:24,840 --> 01:58:28,440
two fears or three fields,
might not be using any field at all.

1610
01:58:28,880 --> 01:58:29,760
Right.

1611
01:58:29,760 --> 01:58:34,440
But when you and the
user, it might be only using

1612
01:58:35,560 --> 01:58:39,000
one method from your class two meters
or three meters.

1613
01:58:39,000 --> 01:58:42,160
Now, if someone is using

1614
01:58:42,960 --> 01:58:45,600
only one or two methods from your class

1615
01:58:45,600 --> 01:58:48,120
and you are asking that person

1616
01:58:48,640 --> 01:58:53,680
to, pass hundreds of values
before they can use that method,

1617
01:58:53,880 --> 01:58:56,360
how how that how that person will
feel. Guys

1618
01:59:12,880 --> 01:59:13,720
frustrated.

1619
01:59:13,720 --> 01:59:14,720
Right.

1620
01:59:14,720 --> 01:59:19,560
Because they might be using only one
method, right?

1621
01:59:19,560 --> 01:59:23,520
They as you guys have been doing
from this kind of class,

1622
01:59:23,520 --> 01:59:27,840
sometimes you only use the next method,
sometimes only

1623
01:59:29,200 --> 01:59:32,720
next boolean method or next integer
method.

1624
01:59:33,120 --> 01:59:36,920
Same is the case
with the builder class, right?

1625
01:59:37,160 --> 01:59:40,480
You might want to use the reverse method

1626
01:59:40,880 --> 01:59:44,200
now that those classes
they have so many fields.

1627
01:59:44,200 --> 01:59:45,040
Right?

1628
01:59:45,680 --> 01:59:48,000
So it's not fair to ask

1629
01:59:48,000 --> 01:59:50,640
for all the info from the user,

1630
01:59:51,080 --> 01:59:56,280
even if they will not be using that info
to make that happen.

1631
01:59:56,600 --> 01:59:57,520
What do we do?

1632
01:59:57,520 --> 02:00:00,680
We create multiple constructors.

1633
02:00:01,800 --> 02:00:03,480
We create multiple constructors

1634
02:00:03,480 --> 02:00:07,560
so that if a person is only trying to use

1635
02:00:08,000 --> 02:00:11,600
a small portion of the methods
from our class,

1636
02:00:12,200 --> 02:00:17,880
that person only passed the information
which is required for.

1637
02:00:17,880 --> 02:00:19,400
Those matters. Okay.

1638
02:00:19,400 --> 02:00:22,240
If something is not required
for those matters,

1639
02:00:22,640 --> 02:00:27,680
then we should not be forcing that person
to pass all the information.

1640
02:00:27,680 --> 02:00:31,920
We should not be forcing them
to initialize all the fields.

1641
02:00:32,280 --> 02:00:34,440
So in real life, what do we do?

1642
02:00:34,800 --> 02:00:39,320
We always, always create a zero argument
constructor.

1643
02:00:39,520 --> 02:00:40,200
Okay.

1644
02:00:40,520 --> 02:00:45,320
And then we also create multiple
constructor constructors

1645
02:00:45,600 --> 02:00:48,960
that requires less fields
so so in real life.

1646
02:00:49,200 --> 02:00:51,880
So let me complete this constructor.

1647
02:00:51,880 --> 02:00:54,240
So we will be saying

1648
02:00:57,000 --> 02:00:59,040
var model

1649
02:01:00,720 --> 02:01:02,520
and then

1650
02:01:03,720 --> 02:01:06,600
there will be is equal to on

1651
02:01:09,960 --> 02:01:11,160
marker

1652
02:01:11,600 --> 02:01:13,080
and then

1653
02:01:14,480 --> 02:01:16,800
here will be equal to

1654
02:01:18,800 --> 02:01:19,240
ugly.

1655
02:01:19,240 --> 02:01:23,000
Have already died this.

1656
02:01:23,000 --> 02:01:27,760
Thank you.

1657
02:01:27,760 --> 02:01:28,120
Okay.

1658
02:01:30,160 --> 02:01:32,200
And then you can see

1659
02:01:55,320 --> 02:01:56,280
and then we have

1660
02:01:56,280 --> 02:02:00,160
got we in the car mileage max period

1661
02:02:01,200 --> 02:02:19,560
and then some rules.

1662
02:02:19,560 --> 02:02:22,360
Let me create the classical assessment
and let me show

1663
02:02:24,880 --> 02:02:28,680
what will happen if we are forcing someone

1664
02:02:29,720 --> 02:02:33,520
to initialize

1665
02:02:33,520 --> 02:02:44,880
all of these fields.

1666
02:02:44,880 --> 02:02:47,640
Just yes, I will wait.

1667
02:02:48,080 --> 02:02:49,440
I will wait.

1668
02:02:49,440 --> 02:02:56,600
Let me know once you guys,
I'm done typing this code

1669
02:02:57,000 --> 02:02:59,160
and once you guys are done
typing this work,

1670
02:03:00,080 --> 02:03:04,760
excluding, make sure that you also don't

1671
02:03:04,760 --> 02:03:09,760
have any compilation error.

1672
02:03:09,760 --> 02:03:13,200
Maybe use loop for one week
and not use a loop in here

1673
02:03:14,080 --> 02:03:18,400
once a loop is used when we have arrays

1674
02:03:19,080 --> 02:03:22,600
or when we have to do something.

1675
02:03:23,160 --> 02:03:26,000
Well, it's very similar again and again.

1676
02:03:26,760 --> 02:03:30,640
And these variable names,
they are all different, right?

1677
02:03:30,960 --> 02:03:36,480
So even if you write a loop,
you will have to write these variables.

1678
02:03:36,800 --> 02:03:43,200
All of them.

1679
02:03:43,200 --> 02:03:45,120
Maybe I can send this code to you.

1680
02:03:45,120 --> 02:03:47,360
Okay, type. This call dies.

1681
02:03:47,400 --> 02:03:51,000
Let me to send this code for you.

1682
02:03:51,000 --> 02:03:52,440
Just create a class

1683
02:03:53,680 --> 02:03:55,440
and copy paste this code

1684
02:03:55,440 --> 02:04:15,960
inside that car class.

1685
02:04:15,960 --> 02:04:19,920
That's great
if your typing speed is improved.

1686
02:04:20,000 --> 02:04:21,200
Right?

1687
02:04:21,200 --> 02:04:24,920
Remember the days, nature days.

1688
02:04:24,920 --> 02:04:34,280
New York City used to take a lot of time.

1689
02:04:34,280 --> 02:04:37,200
Alexi Berardi from

1690
02:04:46,280 --> 02:04:46,920
Ukraine.

1691
02:04:46,920 --> 02:04:49,080
Oh, we have so many students from Ukraine.

1692
02:04:50,200 --> 02:04:56,160
Are you referred by someone?

1693
02:04:56,160 --> 02:05:00,360
So I heard in Ukraine
you can buy a goal for $5.

1694
02:05:00,440 --> 02:05:01,600
Is it true?

1695
02:05:01,600 --> 02:05:04,720
Is that cheap in Ukraine

1696
02:05:04,840 --> 02:05:15,360
if I go go for $5?

1697
02:05:15,360 --> 02:05:19,800
No, it's not empty.

1698
02:05:19,800 --> 02:05:24,000
Maybe a leg.

1699
02:05:24,000 --> 02:05:24,720
Okay.

1700
02:05:25,560 --> 02:05:29,080
How is it if you are getting paid 3000

1701
02:05:29,080 --> 02:05:33,000
to $4000 per month, 3000

1702
02:05:33,000 --> 02:05:36,360
to 4000 USD per month in Ukraine?

1703
02:05:37,200 --> 02:05:49,400
Am I going to play or should be under.

1704
02:05:49,400 --> 02:05:53,560
There was a student
who got a job around 30 $400

1705
02:05:53,560 --> 02:05:58,480
per month in Ukraine
and she was very, very happy.

1706
02:05:58,720 --> 02:06:00,480
I don't know how how foolishly

1707
02:06:02,240 --> 02:06:03,600
for quality of life

1708
02:06:03,600 --> 02:06:07,400
she can get in that.

1709
02:06:07,400 --> 02:06:10,160
And we don't need to start as the mean.

1710
02:06:10,160 --> 02:06:16,720
But no, no, we need that.

1711
02:06:16,720 --> 02:06:19,560
All right.

1712
02:06:19,560 --> 02:06:21,040
What is her name?

1713
02:06:21,040 --> 02:06:22,440
Her name was Maria.

1714
02:06:22,440 --> 02:06:24,000
She was from Batch eight.

1715
02:06:24,000 --> 02:06:26,400
Then there was another student
from Batch nine

1716
02:06:27,120 --> 02:06:30,360
and her name was

1717
02:06:33,080 --> 02:06:33,960
I don't remember her

1718
02:06:33,960 --> 02:06:50,160
name.

1719
02:06:50,160 --> 02:06:51,960
Oh, my God.

1720
02:06:52,200 --> 02:06:54,440
So next year.

1721
02:06:54,440 --> 02:06:56,280
And then after

1722
02:07:24,600 --> 02:07:27,000
we are all moving to our apartment song.

1723
02:07:28,720 --> 02:07:32,520
All right, so I arrived

1724
02:07:32,720 --> 02:07:34,320
in the core school.

1725
02:07:34,320 --> 02:07:39,960
You are.

1726
02:07:39,960 --> 02:07:40,640
Well, why?

1727
02:07:40,640 --> 02:07:51,760
I'm getting in error, guys.

1728
02:07:51,760 --> 02:07:55,320
Right there did not past parameters.

1729
02:07:56,880 --> 02:08:00,080
Name everything in the way

1730
02:08:00,120 --> 02:08:05,400
you are writing as my third.

1731
02:08:05,400 --> 02:08:07,440
We need to keep all the values

1732
02:08:08,400 --> 02:08:11,200
variables in art

1733
02:08:11,600 --> 02:08:16,920
so you mean it means

1734
02:08:18,000 --> 02:08:20,880
yes. So some of you
you still don't understand.

1735
02:08:20,880 --> 02:08:22,680
So it's not about math.

1736
02:08:22,680 --> 02:08:24,040
It's not about.

1737
02:08:24,040 --> 02:08:25,960
It's not about how I am doing it.

1738
02:08:25,960 --> 02:08:28,720
Like parameters of like that.

1739
02:08:28,720 --> 02:08:32,880
Because this parameter
experts, these values

1740
02:08:33,240 --> 02:08:37,920
outside of the structure, expect
these values and I am not passing them.

1741
02:08:38,200 --> 02:08:38,720
Okay?

1742
02:08:38,720 --> 02:08:42,280
That's why we are getting to Santa.

1743
02:08:42,280 --> 02:08:44,680
All right. Let's let's try to build that

1744
02:08:45,720 --> 02:08:48,840
have the class. So

1745
02:08:48,840 --> 02:08:51,360
can you guys quickly
tell me all the information

1746
02:08:51,360 --> 02:08:53,960
about related car

1747
02:08:55,320 --> 02:08:55,680
that is?

1748
02:08:55,680 --> 02:08:56,640
What do you mean?

1749
02:08:56,640 --> 02:08:58,640
No, this is not serious.

1750
02:08:58,640 --> 02:08:59,960
Keeping

1751
02:09:00,880 --> 02:09:04,120
change to constrict

1752
02:09:13,800 --> 02:09:20,000
your Tesla.

1753
02:09:20,000 --> 02:09:23,480
That's not the model X.

1754
02:09:23,520 --> 02:09:24,520
Maybe

1755
02:09:26,600 --> 02:09:28,440
make a Tesla

1756
02:09:29,400 --> 02:09:32,160
and then model is

1757
02:09:32,880 --> 02:09:38,840
model Y,

1758
02:09:38,840 --> 02:09:42,000
and then about the color black or white.

1759
02:09:43,240 --> 02:09:51,000
And tell me values.

1760
02:09:51,000 --> 02:09:53,440
And then here is Mr.

1761
02:09:53,440 --> 02:09:57,120
thousand 17, 18, 19, 18

1762
02:09:59,480 --> 02:10:02,200
and then CC.

1763
02:10:02,200 --> 02:10:03,120
I don't think so.

1764
02:10:03,120 --> 02:10:05,280
Electric cars have they have

1765
02:10:06,880 --> 02:10:09,120
are of power or something like that right.

1766
02:10:10,400 --> 02:10:12,200
Not available

1767
02:10:13,040 --> 02:10:15,440
let's put minus one

1768
02:10:16,120 --> 02:10:18,640
and then we are in week

1769
02:10:18,640 --> 02:10:21,640
and our last ones were trees and

1770
02:10:25,320 --> 02:10:28,880
then mileage is is again

1771
02:10:29,120 --> 02:10:32,000
we can see because it is an electric car

1772
02:10:33,480 --> 02:10:35,480
20215.

1773
02:10:35,480 --> 02:10:37,920
This is the mileage Alex on in one charge

1774
02:10:40,680 --> 02:10:43,200
plus minus one in here

1775
02:10:43,960 --> 02:10:46,520
upper please

1776
02:10:46,720 --> 02:10:50,640
if in and max speed is 350

1777
02:10:55,080 --> 02:10:57,480
and then sunroof is available or not

1778
02:11:01,280 --> 02:11:06,080
3.0 if you pay.

1779
02:11:06,480 --> 02:11:06,840
All right.

1780
02:11:06,840 --> 02:11:10,800
That's great.

1781
02:11:10,800 --> 02:11:16,200
So you see,
if I have to construct this object,

1782
02:11:16,480 --> 02:11:20,280
I have to pass all of these informations.

1783
02:11:20,280 --> 02:11:20,640
Okay?

1784
02:11:20,640 --> 02:11:24,240
If I want to utilize this class properly.

1785
02:11:24,240 --> 02:11:28,680
So in real life scenarios,
it will be very hard

1786
02:11:28,680 --> 02:11:33,200
for you to learn about all the classes
that are there.

1787
02:11:33,240 --> 02:11:37,760
I guess there are more than 6000 classes

1788
02:11:37,760 --> 02:11:41,280
in Java in JDK

1789
02:12:04,560 --> 02:12:06,440
and we go.

1790
02:12:06,880 --> 02:12:10,880
Joel, 14, has 4569 classes.

1791
02:12:11,000 --> 02:12:14,520
Okay, So, so many classes.

1792
02:12:14,520 --> 02:12:15,840
It will be very hard

1793
02:12:15,840 --> 02:12:19,760
for you to understand
those classes, understand

1794
02:12:19,760 --> 02:12:24,960
about all the parameters of those classes
and then use those classes.

1795
02:12:24,960 --> 02:12:29,280
So what happens
is that when you are developing a class,

1796
02:12:29,280 --> 02:12:33,160
you always provide
this flexibility to your user

1797
02:12:33,640 --> 02:12:37,200
that he or she can create the object

1798
02:12:38,760 --> 02:12:43,680
even without forcing any information.

1799
02:12:43,920 --> 02:12:44,280
Okay?

1800
02:12:44,280 --> 02:12:46,400
So you always go with the

1801
02:12:48,320 --> 02:12:52,920
zero argument constructor.

1802
02:12:52,920 --> 02:13:03,320
How can I create the zero argument
constructor guys?

1803
02:13:03,320 --> 02:13:07,480
So no parameters in here
and then parentheses.

1804
02:13:07,480 --> 02:13:12,520
Okay, so let's say for example,
a user is only trying to maybe

1805
02:13:13,920 --> 02:13:15,960
bring the name of the class.

1806
02:13:15,960 --> 02:13:17,640
So it's a very simple example.

1807
02:13:17,640 --> 02:13:22,320
So let's say a user is only interested
in getting the

1808
02:13:23,400 --> 02:13:26,840
name of this car right now.

1809
02:13:26,840 --> 02:13:31,880
If the user is only interested
in the name, we should not force their

1810
02:13:31,880 --> 02:13:36,360
to user to pass the Indians
to see the color

1811
02:13:36,360 --> 02:13:39,160
and all those parameters

1812
02:13:39,840 --> 02:13:42,560
that we have defined in here.

1813
02:13:42,560 --> 02:13:43,320
Right?

1814
02:13:43,520 --> 02:13:47,400
But what we can do is that we can create

1815
02:13:47,400 --> 02:13:51,520
a special constructor for that user

1816
02:13:51,720 --> 02:13:56,520
who is only interested
in this printed matter name.

1817
02:13:56,520 --> 02:13:58,880
We can see it's public,

1818
02:14:00,120 --> 02:14:06,000
but and we can see

1819
02:14:06,440 --> 02:14:08,680
only pass this information

1820
02:14:11,280 --> 02:14:13,040
and then

1821
02:14:14,080 --> 02:14:18,120
use this method print name from our class.

1822
02:14:18,360 --> 02:14:22,680
Does it make sense guys,
how having multiple constructors

1823
02:14:22,680 --> 02:14:24,160
can help us

1824
02:14:28,480 --> 02:14:34,320
know how the end user
can benefit from this?

1825
02:14:34,320 --> 02:14:35,920
What will the first want to do?

1826
02:14:35,920 --> 02:14:39,360
So I shall not say

1827
02:14:42,480 --> 02:14:44,640
here the user is saying

1828
02:14:46,000 --> 02:14:47,680
user is only interested

1829
02:14:47,680 --> 02:14:55,320
or user only wants to the printer name.

1830
02:14:55,320 --> 02:14:59,280
If there are thousands of methods
in this class and I am only interested

1831
02:14:59,280 --> 02:15:04,600
in print name, it is no point
asking all of this information.

1832
02:15:04,600 --> 02:15:06,840
Right? There is no point.

1833
02:15:06,840 --> 02:15:10,200
So what I can do, I can instead call

1834
02:15:10,800 --> 02:15:13,080
the one argument constructor

1835
02:15:13,560 --> 02:15:17,480
in this constructor
and I can still get the same results.

1836
02:15:18,240 --> 02:15:20,640
Why pass the other pieces of information

1837
02:15:20,960 --> 02:15:24,000
when I don't need them right
when I don't need it? Why?

1838
02:15:24,000 --> 02:15:24,880
Why should I pass it?

1839
02:15:24,880 --> 02:15:28,160
Why should I learn
about all the parameters?

1840
02:15:28,400 --> 02:15:32,680
Why should I care
what kind of values these parameters take

1841
02:15:32,960 --> 02:15:36,960
when I am only interested
in using one method from this class?

1842
02:15:36,960 --> 02:15:37,280
Right?

1843
02:15:37,280 --> 02:15:40,000
It's a great flexibility for the end user.

1844
02:15:41,880 --> 02:15:43,200
So If there are

1845
02:15:43,200 --> 02:15:46,880
any methods
which don't require any parameter at all.

1846
02:15:47,160 --> 02:15:50,120
That's where this zero argument

1847
02:15:50,120 --> 02:15:53,720
constructor will be helpful.

1848
02:15:53,720 --> 02:15:56,160
Okay, so let's say

1849
02:15:56,160 --> 02:16:00,640
there is a method in here

1850
02:16:01,040 --> 02:16:04,440
which do not require any parameter text
which it will be used for.

1851
02:16:04,440 --> 02:16:07,000
How can I know what the use of know
about car?

1852
02:16:07,320 --> 02:16:09,440
So Alexi, we don't know. Never know.

1853
02:16:09,560 --> 02:16:11,600
We never know. It depends on the user.

1854
02:16:12,120 --> 02:16:14,640
So for example,
when you use this kind of class,

1855
02:16:14,680 --> 02:16:19,480
Java guys don't know that if you will
be using only the next integer method

1856
02:16:19,800 --> 02:16:23,160
or if you will only be using
the next Boolean method. So

1857
02:16:23,160 --> 02:16:26,840
they have created multiple constructors,
they have created the matters.

1858
02:16:27,200 --> 02:16:28,480
Now it's up to you

1859
02:16:28,480 --> 02:16:32,560
which method you want to use
and which constructor you want to call

1860
02:16:34,320 --> 02:16:37,920
is. It
should be before another constructor.

1861
02:16:37,920 --> 02:16:39,240
So this is the best practice.

1862
02:16:39,240 --> 02:16:41,400
We start with zero argument constructor.

1863
02:16:41,960 --> 02:16:46,720
Then we write one argument, then two, then
three therefore, and we keep on going.

1864
02:16:46,720 --> 02:16:50,120
So right now is printing line 41 or 21.

1865
02:16:50,840 --> 02:16:54,720
So right now
it's still printing this line 41,

1866
02:16:55,240 --> 02:16:57,560
but the value is being initialized

1867
02:16:57,760 --> 02:17:07,400
through this constructor.

1868
02:17:07,400 --> 02:17:25,680
So GA two is equal to new.

1869
02:17:25,680 --> 02:17:28,640
So in one object I am passing

1870
02:17:28,920 --> 02:17:33,040
many pieces of information, but still

1871
02:17:33,080 --> 02:17:38,760
I am getting the results.

1872
02:17:38,760 --> 02:17:41,040
Still I am getting the same results.

1873
02:17:41,040 --> 02:17:43,240
So what is the point of passing
that information?

1874
02:17:43,240 --> 02:17:47,320
So what should we write in our class
for each parameter?

1875
02:17:47,320 --> 02:17:50,760
Separate code like we did for the name,
whatever needed? Yes.

1876
02:17:51,360 --> 02:17:53,560
So it depends on your methods.

1877
02:17:53,560 --> 02:17:54,720
Fatima.

1878
02:17:54,720 --> 02:17:59,120
If your methods they are required
certain pieces of information,

1879
02:17:59,760 --> 02:18:02,640
then you can build a specific constructor
for those.

1880
02:18:03,120 --> 02:18:06,000
What is zero argument
constructor purpose in this example?

1881
02:18:06,000 --> 02:18:07,000
So Mohammad, let's say

1882
02:18:08,960 --> 02:18:12,000
you have a method

1883
02:18:14,320 --> 02:18:16,800
that does not

1884
02:18:16,800 --> 02:18:21,000
use any arguments, any parameters

1885
02:18:25,200 --> 02:18:32,400
from this class.

1886
02:18:32,400 --> 02:18:36,920
Okay, so we have this method.

1887
02:18:36,920 --> 02:18:39,040
Now, if you are interested in this method,

1888
02:18:39,400 --> 02:18:42,680
do you need to pass the GA name
when you are creating the object?

1889
02:18:43,040 --> 02:18:45,080
Mohammad No. Right.

1890
02:18:45,480 --> 02:18:49,480
So in that case you can create the object

1891
02:18:49,840 --> 02:18:54,240
by saying three equal to new God

1892
02:18:55,840 --> 02:18:58,080
and say call three dot

1893
02:18:58,080 --> 02:19:03,640
C Hello.

1894
02:19:03,640 --> 02:19:08,120
Okay, so that's where the zero argument
constructor will be helpful.

1895
02:19:08,680 --> 02:19:12,000
But we need to write
all these separately. Yes.

1896
02:19:12,520 --> 02:19:17,040
As a designer of this class,
you will be getting this information

1897
02:19:17,040 --> 02:19:21,080
from the client that how you want,
you want to build,

1898
02:19:21,360 --> 02:19:25,560
and then architects and buyers
will help you out how you want to build

1899
02:19:25,560 --> 02:19:29,520
that Your architects are
the team lead specialists.

1900
02:19:29,520 --> 02:19:32,600
They will be telling you
the names of the classes we are what

1901
02:19:32,760 --> 02:19:36,120
which kind of method should be there
and all those things.

1902
02:19:36,120 --> 02:19:38,480
And then you will be coding those things.

1903
02:19:38,480 --> 02:19:42,560
How you called line
19 Constructor Investor Class.

1904
02:19:42,560 --> 02:19:45,880
Can you please repeat
on line 19 constructor.

1905
02:19:47,640 --> 02:19:48,920
So in here, in the

1906
02:19:48,920 --> 02:19:52,360
line, how

1907
02:19:52,360 --> 02:19:56,400
many arguments
I am passing to this this constructor

1908
02:19:56,400 --> 02:20:03,320
call Now?

1909
02:20:03,320 --> 02:20:04,080
One. Right.

1910
02:20:04,080 --> 02:20:07,840
So is there a construct of that takes
only one argument

1911
02:20:08,000 --> 02:20:10,800
inside this car class

1912
02:20:13,320 --> 02:20:14,800
is not a developer's job.

1913
02:20:14,800 --> 02:20:19,000
The developers will be developing
the applications same way

1914
02:20:19,240 --> 02:20:24,440
you guys will be developing the frameworks
to test those applications.

1915
02:20:24,800 --> 02:20:27,920
So if not

1916
02:20:27,920 --> 02:20:30,120
100%, you guys will be writing

1917
02:20:30,120 --> 02:20:33,120
3060 up to 60% of the code

1918
02:20:34,120 --> 02:20:37,080
as of the code
that the developers will be writing.

1919
02:20:38,000 --> 02:20:42,040
If you are doing the acclimation.

1920
02:20:42,040 --> 02:20:44,000
And so

1921
02:20:44,040 --> 02:20:47,520
this constructor knows
that there is a constructor

1922
02:20:48,240 --> 02:20:52,400
which takes only one argument,

1923
02:20:52,400 --> 02:20:56,200
so it will call that constructor in here.

1924
02:20:57,400 --> 02:20:58,720
In here

1925
02:20:59,080 --> 02:21:02,320
Java that you are passing
these many values.

1926
02:21:02,320 --> 02:21:05,440
The Java will start this class
from top to bottom

1927
02:21:06,080 --> 02:21:10,920
and it will call the matching
constructor from this class

1928
02:21:12,280 --> 02:21:14,280
scheme is the case for new country.

1929
02:21:14,280 --> 02:21:17,040
We are not passing a constructor job
insert.

1930
02:21:17,600 --> 02:21:22,680
If there is a constructor
does not take any parameters

1931
02:21:22,680 --> 02:21:33,320
so Java will call that constructor.

1932
02:21:33,320 --> 02:21:38,160
But that would have been achieved if we
just learned with the default constructor.

1933
02:21:38,160 --> 02:21:44,280
So Mohammad, if you remember,
as soon as we write at least one

1934
02:21:44,280 --> 02:21:49,760
constructor, the default constructor
provided by Java is gone.

1935
02:21:50,240 --> 02:21:54,280
So even if I remove this

1936
02:21:54,360 --> 02:22:00,840
zero argument constructor oops,

1937
02:22:00,840 --> 02:22:05,600
as soon as I remove this zero argument
constructor I will be getting an error.

1938
02:22:05,880 --> 02:22:07,080
Okay.

1939
02:22:07,080 --> 02:22:11,040
Because now Java is not providing

1940
02:22:11,520 --> 02:22:15,840
the default constructor.

1941
02:22:15,840 --> 02:22:16,920
Does it make sense now?

1942
02:22:16,920 --> 02:22:23,800
Mohammad.

1943
02:22:23,800 --> 02:22:26,800
So that's why we need a zero argument
constraint.

1944
02:22:27,400 --> 02:22:31,720
Why am I getting an error?

1945
02:22:31,720 --> 02:22:37,040
So I what do you have a one argument
constructor in your class

1946
02:22:37,040 --> 02:22:41,400
and you shared a
screenshot of the car class.

1947
02:22:43,160 --> 02:22:43,600
It is

1948
02:22:43,600 --> 02:22:46,680
better to create a zero constructor
just in case.

1949
02:22:46,680 --> 02:22:51,520
Yes, it's always better
if you have a method.

1950
02:22:51,520 --> 02:22:53,840
We don't need the fields

1951
02:22:55,000 --> 02:22:56,000
from your class.

1952
02:22:56,000 --> 02:22:58,480
You should always create
a zero constructor

1953
02:22:59,840 --> 02:23:03,320
so you need a new constructor
for a new object? Yes.

1954
02:23:03,360 --> 02:23:06,120
So now I have Georges.

1955
02:23:06,840 --> 02:23:11,960
If I am planning to use
only three fields from my class,

1956
02:23:12,280 --> 02:23:18,040
I can have a constructor
which only initializes those three fields.

1957
02:23:18,160 --> 02:23:19,960
I can create a constructive and.

1958
02:23:19,960 --> 02:23:24,280
That way the end user is not forced

1959
02:23:24,680 --> 02:23:27,440
to parse all the fields,

1960
02:23:27,440 --> 02:23:30,160
all the values
for all the fields in my class

1961
02:23:30,480 --> 02:23:33,920
so I can have one more constructor

1962
02:23:36,120 --> 02:23:37,560
like this,

1963
02:23:38,560 --> 02:23:42,000
which takes me b

1964
02:23:45,080 --> 02:23:46,040
fields

1965
02:23:50,160 --> 02:23:50,840
like this.

1966
02:23:50,840 --> 02:23:55,400
Okay, so now if a user wants,
he can create an object

1967
02:23:55,400 --> 02:23:59,360
by passing two pieces of information
on one piece of information.

1968
02:23:59,360 --> 02:24:00,920
All pieces of information.

1969
02:24:00,920 --> 02:24:02,720
No pieces of information.

1970
02:24:02,720 --> 02:24:07,760
So now a user is getting more
and more flexibility.

1971
02:24:07,760 --> 02:24:10,760
Yes, the law section contains these two

1972
02:24:10,760 --> 02:24:19,160
networks, right?

1973
02:24:20,160 --> 02:24:22,160
How how do you guys feel?

1974
02:24:22,160 --> 02:24:25,000
I can sense that a half

1975
02:24:25,000 --> 02:24:27,680
of the first
half of the class is going above

1976
02:24:28,160 --> 02:24:32,120
the above your heads.

1977
02:24:32,120 --> 02:24:37,880
Is it true?

1978
02:24:37,880 --> 02:24:48,080
Do not worry if this is the case,
you guys are not alone.

1979
02:24:48,080 --> 02:24:52,880
So why did we create line 28 to 42?

1980
02:24:52,880 --> 02:24:56,840
I am still not clear about that line

1981
02:24:56,840 --> 02:24:58,920
28 to 44

1982
02:25:01,680 --> 02:25:05,800
B to 44.

1983
02:25:06,240 --> 02:25:10,760
So this big giant constructor, Tom
or not, it's there.

1984
02:25:10,760 --> 02:25:16,800
If you want to initialize all the fields.

1985
02:25:16,800 --> 02:25:25,200
Okay, it's there
if you want to initialize all the fields.

1986
02:25:25,200 --> 02:25:29,640
That's
why we have this big giant constructor.

1987
02:25:29,640 --> 02:25:30,360
It's okay.

1988
02:25:30,360 --> 02:25:33,680
Like I said before,
because everything we are learning is

1989
02:25:33,960 --> 02:25:35,400
so similar to each other.

1990
02:25:35,400 --> 02:25:39,840
It is harder than loops.

1991
02:25:39,840 --> 02:25:43,680
I did not understand
after creating test for class

1992
02:25:43,680 --> 02:25:46,480
and to make changes again in car class.

1993
02:25:47,280 --> 02:25:50,840
So most of the changes
that we have made in the car class,

1994
02:25:51,160 --> 02:25:53,920
we have created new constructors

1995
02:25:54,320 --> 02:25:58,760
inside the car class
so that if someone wants

1996
02:25:58,920 --> 02:26:03,400
only initialize to four years,
he can initialize only two fields.

1997
02:26:03,400 --> 02:26:05,920
If someone wants to initialize
only one field,

1998
02:26:06,440 --> 02:26:09,520
he can have a constructor to initialize
only one field.

1999
02:26:09,800 --> 02:26:13,240
So we are giving this
flexibility to the end user.

2000
02:26:15,040 --> 02:26:17,400
Why don't we put in

2001
02:26:17,400 --> 02:26:19,920
parentheses or regional names

2002
02:26:19,920 --> 02:26:22,120
that we created originally

2003
02:26:25,360 --> 02:26:25,800
alone?

2004
02:26:25,800 --> 02:26:39,040
Can you tell me the line number?

2005
02:26:39,040 --> 02:26:42,000
The line number 28

2006
02:26:43,200 --> 02:26:44,880
why we have these benefits?

2007
02:26:44,880 --> 02:26:49,200
You mean?

2008
02:26:49,200 --> 02:26:50,400
Yes, some are not.

2009
02:26:50,400 --> 02:26:54,040
If we don't need all the fields,
we can have a constructor

2010
02:26:54,040 --> 02:26:55,160
with less fields.

2011
02:26:55,160 --> 02:26:57,160
It's that easy.

2012
02:26:57,160 --> 02:27:02,520
Why don't we enter name and model?

2013
02:27:02,520 --> 02:27:05,200
No, we did Alona on line seven.

2014
02:27:05,200 --> 02:27:06,160
We did.

2015
02:27:06,240 --> 02:27:07,560
We passed it as law.

2016
02:27:07,560 --> 02:27:08,640
We passed the model.

2017
02:27:08,640 --> 02:27:09,840
We did

2018
02:27:11,840 --> 02:27:18,200
right and we.

2019
02:27:18,200 --> 02:27:20,520
But not the original names.

2020
02:27:21,600 --> 02:27:24,480
Oh, you mean why we cannot have a

2021
02:27:24,960 --> 02:27:29,840
in here
as as as the name in here or there?

2022
02:27:29,880 --> 02:27:31,080
There is a trick.

2023
02:27:31,080 --> 02:27:33,160
There is a, there is an issue with that.

2024
02:27:33,840 --> 02:27:38,320
There is something you guys need to learn
before you can do that.

2025
02:27:38,320 --> 02:27:42,480
So that's why we are doing this.

2026
02:27:42,480 --> 02:27:46,760
And that is related to the discovered
that we will be learning next.

2027
02:27:48,400 --> 02:27:51,120
By the way,
how have you guys tried to give same names

2028
02:27:51,400 --> 02:27:54,480
to do the constructor parameters?

2029
02:27:55,400 --> 02:27:59,400
Does it work?

2030
02:27:59,400 --> 02:28:01,720
No, it can not work.

2031
02:28:01,920 --> 02:28:06,200
You guys must be doing something different
if you make so.

2032
02:28:06,200 --> 02:28:08,520
Let's say for example, if I make

2033
02:28:09,880 --> 02:28:12,120
this name

2034
02:28:12,360 --> 02:28:14,400
same as this name.

2035
02:28:14,400 --> 02:28:16,200
So this is the question of Alona alone.

2036
02:28:16,200 --> 02:28:20,320
I saying why we don't call this name
same as as this name.

2037
02:28:20,760 --> 02:28:23,560
So Alona,
if you try to do that, what what happens

2038
02:28:27,920 --> 02:28:34,480
if you execute this code?

2039
02:28:34,480 --> 02:28:38,560
You see we get a null value
on second point

2040
02:28:41,240 --> 02:28:43,080
as per constructor condition.

2041
02:28:43,080 --> 02:28:47,160
We have to give all values in parameter
when we call in the test the class.

2042
02:28:47,160 --> 02:28:51,400
So here we are making constructor
with one argument or with all argument.

2043
02:28:51,400 --> 02:28:54,440
Here we are
just understanding the difference

2044
02:28:54,440 --> 02:28:56,560
if we always put all arguments
linked to be.

2045
02:28:57,000 --> 02:28:57,960
Yes, yes.

2046
02:28:57,960 --> 02:29:01,560
Now you are right class. Best line nine.

2047
02:29:01,640 --> 02:29:03,720
So how put in all

2048
02:29:04,800 --> 02:29:06,240
line nine.

2049
02:29:06,240 --> 02:29:10,440
So Alexia, if you want to print you,
you just create a method.

2050
02:29:10,440 --> 02:29:12,840
You put everything inside that method.

2051
02:29:12,840 --> 02:29:17,760
Okay, So for example,

2052
02:29:17,760 --> 02:29:20,720
if I have a method, public wide

2053
02:29:22,000 --> 02:29:23,080
print

2054
02:29:23,640 --> 02:29:29,160
or in full,

2055
02:29:29,160 --> 02:29:31,400
then you can write this out

2056
02:29:32,360 --> 02:29:38,520
and then you can write,

2057
02:29:38,520 --> 02:29:40,800
you can write name

2058
02:29:42,000 --> 02:29:44,080
model

2059
02:29:45,360 --> 02:29:46,960
near,

2060
02:29:47,560 --> 02:29:49,720
and then make

2061
02:29:53,280 --> 02:29:56,440
and then you can keep on adding

2062
02:29:57,640 --> 02:30:00,000
the other pieces of information.

2063
02:30:00,000 --> 02:30:01,800
Okay.

2064
02:30:01,800 --> 02:30:02,360
Oops.

2065
02:30:03,160 --> 02:30:16,160
Which can be a plus sign,

2066
02:30:16,160 --> 02:30:16,680
which

2067
02:30:21,240 --> 02:30:24,240
let's see,
this is how you keep on doing this.

2068
02:30:24,720 --> 02:30:27,000
And then you can say card or

2069
02:30:28,000 --> 02:30:32,960
print.

2070
02:30:32,960 --> 02:30:38,200
Okay, Then you will be seeing all the info
in here as well.

2071
02:30:38,200 --> 02:30:43,400
So it's there for sake of completeness,
not completeness for the sake

2072
02:30:43,400 --> 02:30:48,800
of simplicity, for the sake of easiness,
for the sake of flexibility

2073
02:30:50,520 --> 02:30:52,440
to have these multiple constructors.

2074
02:30:52,440 --> 02:30:59,120
So, Alona, is it clear
now that if you have same name in here

2075
02:30:59,120 --> 02:31:07,440
and in here, it does not work?

2076
02:31:07,440 --> 02:31:09,480
So I will teach you why it does not work.

2077
02:31:09,480 --> 02:31:16,960
And what should we do to make it work?

2078
02:31:16,960 --> 02:31:21,840
So that's why I have different
variable names in here.

2079
02:31:21,840 --> 02:31:31,840
Now. It will work.

2080
02:31:31,840 --> 02:31:37,080
Now we get the proper results.

2081
02:31:37,080 --> 02:31:39,640
All right, guys,
are there other questions?

2082
02:31:39,640 --> 02:31:43,200
Nice.

2083
02:31:43,200 --> 02:31:45,560
We will learn a new topic today.

2084
02:31:46,040 --> 02:31:48,640
Totally depends on you guys.

2085
02:31:48,640 --> 02:31:51,600
If you guys are

2086
02:31:51,600 --> 02:31:54,520
left with an energy,

2087
02:31:54,720 --> 02:31:57,600
then yes, we can learn about new topics.

2088
02:31:57,600 --> 02:32:02,480
So that's why yesterday
I didn't teach you the new topic

2089
02:32:03,000 --> 02:32:06,760
because some of you were asking me
questions

2090
02:32:06,760 --> 02:32:09,800
and I realized that we need to spend

2091
02:32:09,800 --> 02:32:14,320
more time on that.

2092
02:32:14,320 --> 02:32:16,160
We scroll down regardless.

2093
02:32:17,680 --> 02:32:19,400
It totally depends on your feedback.

2094
02:32:19,400 --> 02:32:20,600
I have

2095
02:32:21,800 --> 02:32:25,200
I have been teaching multiple classes
on how to build

2096
02:32:25,360 --> 02:32:29,480
index top applications,
web applications, mobile applications,

2097
02:32:29,960 --> 02:32:34,920
how to use advanced concepts
like regular expressions like

2098
02:32:36,080 --> 02:32:39,760
lambda expressions,
functional programing to previous batches,

2099
02:32:39,760 --> 02:32:41,760
but it totally depends on the response

2100
02:32:41,760 --> 02:32:44,840
that I get
from the from that specific batch.

2101
02:32:45,560 --> 02:32:48,480
If we are left with time,
we can have both sessions

2102
02:32:52,040 --> 02:32:53,600
too. At one time.

2103
02:32:53,600 --> 02:32:55,800
It's too much.

2104
02:32:55,800 --> 02:32:58,880
So if we can create methods
for our objects

2105
02:32:58,880 --> 02:33:03,680
like, the linear constructors,
so give me the constructors.

2106
02:33:04,240 --> 02:33:07,680
They are there because what

2107
02:33:07,680 --> 02:33:11,280
first they are called automatically.

2108
02:33:11,600 --> 02:33:13,200
Then we call the constructor.

2109
02:33:13,200 --> 02:33:16,680
When we create the object,
they are called automatically,

2110
02:33:16,800 --> 02:33:20,440
but the methods are not called
automatically.

2111
02:33:20,840 --> 02:33:23,640
You cannot force through the methods

2112
02:33:24,040 --> 02:33:28,280
that someone is initializing
the proper features

2113
02:33:28,800 --> 02:33:31,760
before using any members from your class.

2114
02:33:31,760 --> 02:33:33,960
But you can force
that through constructors,

2115
02:33:35,400 --> 02:33:37,800
so that's why we should be going
for the constructors.

2116
02:33:37,800 --> 02:33:44,120
Constructors are called before
anything is executed from your class.

2117
02:33:44,120 --> 02:33:46,440
And yes, they also simplify code.

2118
02:33:47,080 --> 02:33:53,880
The object creation.

2119
02:33:53,880 --> 02:33:56,760
It's really hard for me to confuse today.

2120
02:33:57,200 --> 02:33:58,760
That's good for me.

2121
02:33:58,760 --> 02:34:01,560
If it is hard you to get confused,
then I get.

2122
02:34:01,680 --> 02:34:05,880
Then I can keep on teaching.

2123
02:34:05,880 --> 02:34:06,640
You told us.

2124
02:34:06,640 --> 02:34:09,280
You can tell later on how we are

2125
02:34:09,760 --> 02:34:12,840
doing compared to all all the bad news.

2126
02:34:13,280 --> 02:34:15,520
I think you guys are learning the answers.

2127
02:34:16,320 --> 02:34:18,000
Can you give us practical examples?

2128
02:34:18,000 --> 02:34:20,640
Forgive me. It's question, please.

2129
02:34:20,640 --> 02:34:23,800
So now the practical examples are

2130
02:34:28,000 --> 02:34:29,880
not start asking this question before

2131
02:34:29,880 --> 02:34:32,680
and I showed you the string builder class
and the

2132
02:34:34,960 --> 02:34:35,760
standard class,

2133
02:34:35,760 --> 02:34:38,880
so you guys can have a look
at the constructors of those classes.

2134
02:34:38,880 --> 02:34:41,840
Okay. So it is the same
answer for this question.

2135
02:34:42,840 --> 02:34:44,960
I mean, focus.

2136
02:34:44,960 --> 02:34:47,120
We are the worst so far.

2137
02:34:47,120 --> 02:34:49,840
No, no, no. This is not the case.

2138
02:34:49,840 --> 02:34:52,760
All right,
so let's create some more constructors

2139
02:34:53,560 --> 02:34:55,600
because

2140
02:34:55,920 --> 02:34:59,160
that's how you fix how I have

2141
02:35:00,720 --> 02:35:03,040
to teach you about the new

2142
02:35:03,040 --> 02:35:07,400
console.

2143
02:35:07,400 --> 02:35:29,560
Let's create a constructor
that the three parameters.

2144
02:35:29,560 --> 02:35:33,400
Let's create a constructor that makes

2145
02:35:33,400 --> 02:35:35,760
four parameters

2146
02:35:49,920 --> 02:35:51,280
posted in here

2147
02:35:51,280 --> 02:36:34,480
is not there in this channel.

2148
02:36:34,480 --> 02:36:37,120
All right, guys.

2149
02:36:37,120 --> 02:36:40,920
So I got this message from Russell
that you guys are not saving

2150
02:36:40,920 --> 02:36:43,400
the class before,

2151
02:36:45,240 --> 02:36:49,000
so you write a class and then you guys
don't to save that class.

2152
02:36:49,000 --> 02:36:52,320
And then you try to execute
that class from here.

2153
02:36:52,520 --> 02:36:55,680
If you are doing that,
you will be getting an error

2154
02:36:56,280 --> 02:36:59,760
and there is an automatic setting

2155
02:37:00,480 --> 02:37:04,880
that saves your files after,

2156
02:37:05,160 --> 02:37:27,720
I guess, 20 seconds or so. Now.

2157
02:37:27,720 --> 02:37:32,120
So he no, you do you have this constructor
that takes all these parameters,

2158
02:37:32,120 --> 02:37:36,560
the parameters that you are
trying to pass on line number eight.

2159
02:37:36,560 --> 02:37:39,960
If you don't have this constructor,
you will be getting an error

2160
02:37:42,760 --> 02:37:45,160
and make sure that

2161
02:37:45,160 --> 02:37:49,560
if you are passing,
if you are expecting three things in here,

2162
02:37:49,920 --> 02:37:54,160
you are exactly passing things,
then an integer to integers,

2163
02:37:54,160 --> 02:37:57,440
then again one string, then two integers,
and then a boolean at the end

2164
02:37:58,560 --> 02:38:22,200
and make sure you are saving your class.

2165
02:38:22,200 --> 02:38:24,040
So let me do this, guys.

2166
02:38:24,040 --> 02:38:29,040
Let me send you
everything that is President.

2167
02:38:29,040 --> 02:38:31,360
Actually,
let me share you the class with you.

2168
02:38:32,520 --> 02:38:35,280
So let me write some more constructors.

2169
02:38:35,640 --> 02:38:38,600
Or is it already too much

2170
02:38:39,560 --> 02:38:44,520
looking to send you this car class?

2171
02:38:44,520 --> 02:38:48,000
Okay, I open this car class
and then you can copy

2172
02:38:48,000 --> 02:38:55,800
and paste code.

2173
02:38:55,800 --> 02:38:57,640
I am sending it in the line.

2174
02:38:57,640 --> 02:38:58,680
Questions down here.

2175
02:38:58,680 --> 02:39:00,040
Is this class

2176
02:39:17,600 --> 02:39:19,680
is too much in for confusing?

2177
02:39:20,440 --> 02:39:21,120
Okay, let.

2178
02:39:21,120 --> 02:39:23,160
Let's keep it in here. In here?

2179
02:39:23,800 --> 02:39:28,920
Or maybe you guys can remove
some of these.

2180
02:39:28,920 --> 02:39:30,720
So let's create a new class

2181
02:39:34,280 --> 02:39:37,200
and let's have

2182
02:39:37,200 --> 02:39:39,400
a GED class this time

2183
02:39:43,400 --> 02:39:46,520
on the assembly to start to

2184
02:39:51,840 --> 02:39:55,120
please and locate and the car

2185
02:39:55,400 --> 02:39:56,520
maybe call or.

2186
02:39:56,520 --> 02:40:01,920
Yes, let's, let's create a call class.

2187
02:40:01,920 --> 02:40:12,800
If next class. Yes.

2188
02:40:13,600 --> 02:40:16,320
So we are done with this

2189
02:40:16,320 --> 02:40:20,320
God class.

2190
02:40:20,320 --> 02:40:27,680
And if some of you are getting errors,
you can copy and paste my code.

2191
02:40:27,680 --> 02:40:29,880
So let's put the first field as

2192
02:40:31,160 --> 02:40:35,360
raised and let's just put $5.

2193
02:40:35,360 --> 02:40:35,960
Okay?

2194
02:40:36,240 --> 02:40:41,280
And this is static.

2195
02:40:41,280 --> 02:40:43,160
All calls dollars.

2196
02:40:43,160 --> 02:40:44,880
Keep going.

2197
02:40:45,120 --> 02:40:47,120
Yes. Maybe I should rename this to you.

2198
02:40:47,120 --> 02:40:52,840
Call out our guys do call and do calls.

2199
02:40:52,840 --> 02:40:57,120
Have names.

2200
02:40:57,120 --> 02:40:59,880
Individual calls are fired in Ukraine.

2201
02:40:59,880 --> 02:41:00,960
The manner

2202
02:41:03,280 --> 02:41:27,840
of calls.

2203
02:41:27,840 --> 02:41:29,520
My name is Ludo.

2204
02:41:29,520 --> 02:41:30,840
It is.

2205
02:41:30,840 --> 02:41:34,800
It is lunchtime embargo.

2206
02:41:34,800 --> 02:41:36,240
Good call, Kamal.

2207
02:41:36,240 --> 02:41:40,600
All that I sell.

2208
02:41:40,600 --> 02:41:44,400
Let me tell you something, guys.

2209
02:41:44,400 --> 02:41:46,560
I don't know if it is available

2210
02:41:47,680 --> 02:41:48,160
and it

2211
02:41:48,160 --> 02:42:05,400
clips or not.

2212
02:42:05,400 --> 02:42:10,080
So if you guys right
click on your class name

2213
02:42:10,080 --> 02:42:14,040
and if you go to source
and then if you click on Generate

2214
02:42:14,040 --> 02:42:19,560
constructor using fills,
do you guys see this option?

2215
02:42:19,560 --> 02:42:25,440
All of you?

2216
02:42:25,440 --> 02:42:28,920
Because constructors,
sometimes they can be super lengthy.

2217
02:42:28,920 --> 02:42:33,120
So usually the idea is and they provide us

2218
02:42:33,200 --> 02:42:36,400
this assistance that they will create

2219
02:42:37,760 --> 02:42:40,320
the constructors for us automatically.

2220
02:42:40,400 --> 02:42:44,080
So if you select
you use like the fields that you want

2221
02:42:44,240 --> 02:42:48,080
inside that constructor
is like the access modified

2222
02:42:49,120 --> 02:42:54,120
and then you click on Generate and Boom,
the constructors is there for us,

2223
02:42:54,360 --> 02:43:06,800
even if there are thousand fields.

2224
02:43:06,800 --> 02:43:12,520
Okay, so you guys have to right click.

2225
02:43:12,520 --> 02:43:15,400
Oh, there are so many things
that I have not told you

2226
02:43:17,520 --> 02:43:19,680
and you guys will be surprised at the end

2227
02:43:19,680 --> 02:43:27,440
because I want you to learn.

2228
02:43:27,440 --> 02:43:33,360
So we right click, we, we go to source.

2229
02:43:33,360 --> 02:43:38,040
Let me tell you something, there is always
a solution, but you have to Google it.

2230
02:43:38,240 --> 02:43:41,920
If you Google so many of your problems,
you guys can solve them

2231
02:43:42,680 --> 02:43:46,160
very easily.

2232
02:43:46,160 --> 02:43:47,600
So source

2233
02:43:48,280 --> 02:43:50,440
and then

2234
02:43:51,600 --> 02:43:54,600
generate constructor and using fields.

2235
02:43:54,760 --> 02:43:56,080
This option

2236
02:44:09,600 --> 02:44:10,760
that there is so many

2237
02:44:10,760 --> 02:44:13,840
and there are so many things
which are available,

2238
02:44:13,840 --> 02:44:17,560
you can generate complete classes.

2239
02:44:17,760 --> 02:44:21,000
There are a lot to tell you,

2240
02:44:21,360 --> 02:44:27,240
but there are frameworks which we
you will guest once you guys have done

2241
02:44:27,240 --> 02:44:31,920
learning the testing,
you will learn about something

2242
02:44:31,920 --> 02:44:36,480
called as web elements
and they can generate the code

2243
02:44:36,480 --> 02:44:39,440
automatically
to test those elements and all that.

2244
02:44:39,600 --> 02:44:45,560
And you guys will be creating something
similar once you are done with selenium.

2245
02:44:45,560 --> 02:44:47,400
Okay? So once you have done this,

2246
02:44:49,000 --> 02:44:49,520
then you

2247
02:44:49,520 --> 02:44:52,520
need to select the fields that you want

2248
02:44:53,280 --> 02:44:57,000
inside that constructor
and you click on Generate.

2249
02:44:57,800 --> 02:45:00,880
Okay, Then a constructor

2250
02:45:00,880 --> 02:45:03,280
automatically will be generated for you

2251
02:45:06,960 --> 02:45:07,800
or the super.

2252
02:45:07,800 --> 02:45:09,280
You can ignore that.

2253
02:45:09,280 --> 02:45:22,240
I don't want you to get confused.

2254
02:45:22,240 --> 02:45:26,160
Will be super cool.

2255
02:45:26,160 --> 02:45:28,800
There is something related to that.

2256
02:45:30,720 --> 02:45:31,800
Are you guys done writing

2257
02:45:31,800 --> 02:45:39,720
these two constructors?

2258
02:45:39,720 --> 02:45:42,800
No, I will not tell you no,

2259
02:45:42,840 --> 02:45:46,120
because then you will not learn

2260
02:45:46,840 --> 02:45:53,160
all. Okay,

2261
02:45:53,200 --> 02:45:57,360
let's repeat this one more time
so that you guys are familiar with this.

2262
02:45:57,480 --> 02:45:59,400
So source.

2263
02:45:59,480 --> 02:46:04,000
And then generate the constructor
using fields

2264
02:46:04,480 --> 02:46:06,520
that are not clear to constructor far

2265
02:46:07,080 --> 02:46:16,960
on you appears.

2266
02:46:16,960 --> 02:46:19,120
And then we can have a constructor

2267
02:46:20,160 --> 02:46:23,160
for only two fields

2268
02:46:27,960 --> 02:46:30,400
and we can have a constructor for

2269
02:46:32,720 --> 02:46:39,000
only one field.

2270
02:46:39,000 --> 02:46:51,800
Then we can have a constructor for.

2271
02:46:51,800 --> 02:46:59,400
All right.

2272
02:46:59,400 --> 02:47:02,920
What is the combination to
pass and interview is really

2273
02:47:04,120 --> 02:47:06,360
combination is it?

2274
02:47:06,360 --> 02:47:08,200
Is the combination

2275
02:47:08,760 --> 02:47:12,240
sees output pass.

2276
02:47:12,240 --> 02:47:15,560
The combination is Java Selenium as well.

2277
02:47:15,560 --> 02:47:19,320
Give number test and API is a WAC

2278
02:47:20,040 --> 02:47:22,840
and then we are adding

2279
02:47:22,840 --> 02:47:24,200
other frameworks as well.

2280
02:47:24,200 --> 02:47:25,560
Why? Error.

2281
02:47:25,560 --> 02:47:29,720
So Sebastian,
make sure you don't have to constructors

2282
02:47:30,360 --> 02:47:32,760
with the same

2283
02:47:33,600 --> 02:47:35,240
parameters.

2284
02:47:36,240 --> 02:47:38,360
If you have to construct it
with same parameters,

2285
02:47:38,360 --> 02:47:40,920
then you would be getting this error

2286
02:47:40,920 --> 02:47:42,360
and try to read your errors.

2287
02:47:42,360 --> 02:47:46,000
Guys, always when you get an error,
try to read your errors

2288
02:47:46,000 --> 02:47:48,720
and try to figure out
what can be the reason,

2289
02:47:49,800 --> 02:47:52,640
because this is the most useful skill

2290
02:47:53,800 --> 02:47:57,800
that you guys will be needing
on your real life projects.

2291
02:47:57,800 --> 02:48:03,800
Because on jobs there will be no one
to tell you how to fix your issues, how to

2292
02:48:05,280 --> 02:48:06,760
figure out the solutions.

2293
02:48:06,760 --> 02:48:08,960
You will be
the one who will be doing all of this.

2294
02:48:08,960 --> 02:48:11,080
So try to make Google best friend

2295
02:48:12,440 --> 02:48:13,440
and you scroll down.

2296
02:48:13,440 --> 02:48:16,560
Yes, I will contact you every day

2297
02:48:18,440 --> 02:48:21,680
if you can contact me
and will try my best to help you out.

2298
02:48:22,080 --> 02:48:24,840
But as I am super,

2299
02:48:24,840 --> 02:48:27,360
super busy right now, I am

2300
02:48:29,000 --> 02:48:30,480
helping students

2301
02:48:30,480 --> 02:48:33,200
from Batch seven and it's batch 11.

2302
02:48:34,000 --> 02:48:37,240
So kind of having

2303
02:48:37,600 --> 02:48:40,160
it will be hard for me to help everyone.

2304
02:48:40,920 --> 02:48:44,520
Why I am getting super
I you can remove that super for now.

2305
02:48:44,720 --> 02:48:46,920
We will learn about this super
in next week

2306
02:48:50,000 --> 02:48:51,000
we are going to do.

2307
02:48:51,000 --> 02:48:53,480
I always love that

2308
02:48:54,600 --> 02:48:56,400
you need to take percentage of cell

2309
02:48:56,400 --> 02:49:00,680
people have only
and there is not enough and

2310
02:49:03,480 --> 02:49:05,040
from where we get

2311
02:49:05,040 --> 02:49:09,120
this north name.

2312
02:49:09,120 --> 02:49:10,920
Okay so

2313
02:49:11,400 --> 02:49:14,320
this is the this is about the

2314
02:49:15,920 --> 02:49:17,520
next keyword

2315
02:49:17,520 --> 02:49:20,280
that we will learning in the next keyword

2316
02:49:20,840 --> 02:49:24,920
is about this keyword.

2317
02:49:25,040 --> 02:49:25,440
Okay.

2318
02:49:25,440 --> 02:49:29,120
So this double course and keyword,

2319
02:49:30,400 --> 02:49:33,560
I will buy a car only if it costs five.

2320
02:49:33,600 --> 02:49:38,440
Helping them with interview or work mode,
helping them with interview and work.

2321
02:49:39,240 --> 02:49:43,200
So students need help
with what are different kind of things.

2322
02:49:43,200 --> 02:49:47,080
Sometimes they are working on a project
they don't know how to do something.

2323
02:49:47,680 --> 02:49:50,160
So They keep on posting other students.

2324
02:49:50,280 --> 02:49:51,760
They also help.

2325
02:49:51,760 --> 02:49:55,160
Sometimes
if someone is trying to switch their job,

2326
02:49:55,200 --> 02:49:57,640
they have to clear their interviews
and all that.

2327
02:49:57,640 --> 02:50:00,640
So kind of stuff.

2328
02:50:00,640 --> 02:50:04,560
So the next thing that we are going to
learn

2329
02:50:04,920 --> 02:50:07,560
is the this keyword.

2330
02:50:08,480 --> 02:50:10,840
Now, what is the use of keyword?

2331
02:50:12,240 --> 02:50:16,640
This keyword is used to distinguish

2332
02:50:17,640 --> 02:50:20,360
your instance variables

2333
02:50:21,360 --> 02:50:24,000
and your local variables.

2334
02:50:25,320 --> 02:50:27,840
If we use this

2335
02:50:28,560 --> 02:50:31,920
before the name of any variable,

2336
02:50:33,040 --> 02:50:36,360
we are saying that we mean.

2337
02:50:36,600 --> 02:50:41,720
So we are saying we are referring
to this name, not this name.

2338
02:50:42,480 --> 02:50:47,440
So variables
they can be instance variables

2339
02:50:47,440 --> 02:50:50,240
and there can be local variables, right?

2340
02:50:51,760 --> 02:50:53,600
So what can happen them

2341
02:50:53,600 --> 02:50:57,080
if they are having same names,

2342
02:50:58,320 --> 02:51:03,440
if they are having same names for example
in here, the local variable string,

2343
02:51:03,480 --> 02:51:07,720
it has the same name
as an instance variable

2344
02:51:08,720 --> 02:51:12,000
and now if you want

2345
02:51:12,840 --> 02:51:14,280
to travel to Java

2346
02:51:14,280 --> 02:51:18,240
that implied this assignment
on the left side,

2347
02:51:18,720 --> 02:51:20,880
you mean this variable

2348
02:51:21,720 --> 02:51:25,040
and on the right
you mean this local variable.

2349
02:51:25,080 --> 02:51:29,520
You can write this
and then sign and then name.

2350
02:51:29,840 --> 02:51:34,560
So when we this keyword
Java knows that you are trying,

2351
02:51:34,800 --> 02:51:37,800
you are referring to the instance
variable.

2352
02:51:38,320 --> 02:51:39,960
So if you remove this

2353
02:51:42,400 --> 02:51:43,520
now, what are you doing?

2354
02:51:43,520 --> 02:51:47,160
You are assigning a local variable
to a local variable

2355
02:51:47,360 --> 02:51:51,720
because whenever you are inside
block of code,

2356
02:51:52,280 --> 02:51:54,800
the priority is always,

2357
02:51:54,800 --> 02:51:57,960
always given to the local variables.

2358
02:51:58,040 --> 02:51:58,680
Okay.

2359
02:51:58,680 --> 02:52:03,120
So in here, if you are using
a local variable with the name,

2360
02:52:04,720 --> 02:52:09,960
then Java will never refer
to this instance variable.

2361
02:52:09,960 --> 02:52:13,560
And if you want to explicitly
tell Job out there to Java

2362
02:52:13,960 --> 02:52:17,560
when I say a name
and when I put this keyword, please

2363
02:52:18,320 --> 02:52:20,840
refer to the instance this variable.

2364
02:52:21,240 --> 02:52:25,440
So that's how we can use this variable
with keyword.

2365
02:52:25,800 --> 02:52:29,360
Does it make sense? Yes.

2366
02:52:29,400 --> 02:52:32,920
This is the indication for Java

2367
02:52:32,920 --> 02:52:35,400
of which variable we are talking about.

2368
02:52:35,400 --> 02:52:39,280
So if there is a confusion,
if there a duplication,

2369
02:52:39,880 --> 02:52:44,080
if there is this race between
a local variable

2370
02:52:44,080 --> 02:52:47,920
and an instance variable,
and if you want to distinguish

2371
02:52:48,720 --> 02:52:52,160
a local variable from a this instance

2372
02:52:52,160 --> 02:52:55,360
variable, you specify this keyword.

2373
02:52:55,360 --> 02:52:57,640
With that variable, it works.

2374
02:52:57,640 --> 02:53:00,040
What all types of variables

2375
02:53:02,880 --> 02:53:03,840
did you copy?

2376
02:53:03,840 --> 02:53:11,760
Instead of creating true source?

2377
02:53:11,760 --> 02:53:13,920
Why I have error in all

2378
02:53:16,200 --> 02:53:18,080
the same construct of having

2379
02:53:18,080 --> 02:53:21,400
same parameters
can not start with the name.

2380
02:53:21,400 --> 02:53:23,640
You have both singular constructors

2381
02:53:24,680 --> 02:53:27,680
you need delete,
you have same constructor.

2382
02:53:28,440 --> 02:53:29,360
All right.

2383
02:53:30,240 --> 02:53:34,520
So guys, is
this is the use of this variable

2384
02:53:34,520 --> 02:53:40,840
player.

2385
02:53:40,840 --> 02:53:43,600
Okay,
so that's why we use this keyword. Now

2386
02:53:46,800 --> 02:53:50,160
I want you to closely

2387
02:53:50,440 --> 02:53:51,640
analyze this code.

2388
02:53:51,640 --> 02:53:58,800
No, You guys see any duplication
in this code?

2389
02:53:58,800 --> 02:54:03,680
Am I repeating some lines of code again
and again inside with constructors?

2390
02:54:03,680 --> 02:54:12,000
In all the constructors.

2391
02:54:12,000 --> 02:54:15,480
So I am repeating
you see this name and breed.

2392
02:54:15,600 --> 02:54:16,880
It is in. Here it is.

2393
02:54:16,880 --> 02:54:19,320
I am repeating the same line of code
in here.

2394
02:54:19,320 --> 02:54:23,360
I am repeating the same line of code in
here I am repeating the same code in here.

2395
02:54:23,880 --> 02:54:24,680
Right?

2396
02:54:25,080 --> 02:54:27,960
If we see this name color,
I am repeating it again.

2397
02:54:27,960 --> 02:54:30,120
And here again. And here. Right.

2398
02:54:30,120 --> 02:54:32,920
So I am repeating the
same code again and again.

2399
02:54:34,240 --> 02:54:35,640
What if I tell you

2400
02:54:35,640 --> 02:54:39,000
guys that instead of rewriting this code?

2401
02:54:39,560 --> 02:54:42,880
So this constructor is assigning

2402
02:54:42,880 --> 02:54:46,360
values to these variables.

2403
02:54:46,880 --> 02:54:47,720
Okay.

2404
02:54:48,000 --> 02:54:51,440
What if instead
of rewriting these three variables,

2405
02:54:51,840 --> 02:54:55,400
if what if I can call
this constructor in here

2406
02:54:56,400 --> 02:55:00,880
and then I pass this information,
these three pieces of information

2407
02:55:00,880 --> 02:55:06,680
to that constructor and that constructor
initializes the code for us, right?

2408
02:55:07,040 --> 02:55:09,560
It will save a lot of duplication.

2409
02:55:09,640 --> 02:55:12,120
Okay, so

2410
02:55:12,120 --> 02:55:13,120
how can I do that?

2411
02:55:13,120 --> 02:55:16,400
But how can I do that? Is

2412
02:55:16,400 --> 02:55:18,640
how can I do that?

2413
02:55:18,640 --> 02:55:22,880
So this is the piece of code
that is being repeated, okay?

2414
02:55:23,400 --> 02:55:26,480
And I am doing same thing again in here.

2415
02:55:26,560 --> 02:55:26,960
Again.

2416
02:55:26,960 --> 02:55:31,480
So what I can do, I can remove this line,

2417
02:55:32,800 --> 02:55:35,760
I can I base

2418
02:55:35,760 --> 02:55:38,640
and parentheses

2419
02:55:38,640 --> 02:55:41,120
and when I pass name

2420
02:55:41,720 --> 02:55:46,680
now Java will call this constructor

2421
02:55:48,360 --> 02:55:49,800
on this line.

2422
02:55:49,800 --> 02:55:52,560
And the field which was initialized

2423
02:55:52,560 --> 02:55:56,240
in here will be passed to this constructor

2424
02:55:56,240 --> 02:56:00,480
and it will be initialized
through this constructor.

2425
02:56:01,400 --> 02:56:03,960
And I see that again.

2426
02:56:04,160 --> 02:56:06,720
I am repeating these two lines in here

2427
02:56:07,240 --> 02:56:09,640
so I can remove these two lines

2428
02:56:12,240 --> 02:56:15,000
and I can again try these.

2429
02:56:15,920 --> 02:56:18,520
Yes, We don't have to initialize
again, again.

2430
02:56:18,520 --> 02:56:21,160
And this time if I pass name

2431
02:56:22,960 --> 02:56:28,120
and breed, they will be initialized

2432
02:56:28,120 --> 02:56:31,800
with the help of this constructor
and this constructor.

2433
02:56:31,800 --> 02:56:34,120
But let's see, I don't need to do that.

2434
02:56:34,120 --> 02:56:36,400
I can do the same for for this.

2435
02:56:36,400 --> 02:56:40,840
Right?

2436
02:56:40,840 --> 02:56:45,760
I can remove these three lines
and instead of these three lines

2437
02:56:45,880 --> 02:56:49,400
I can write this and this time

2438
02:56:49,400 --> 02:56:52,440
I can force name,

2439
02:56:52,440 --> 02:56:54,840
breed and color.

2440
02:56:56,040 --> 02:56:57,040
Okay.

2441
02:56:57,040 --> 02:57:00,760
And again, now I have successfully removed
these three lines.

2442
02:57:01,120 --> 02:57:03,760
I have replaced these three lines
with a single line.

2443
02:57:03,760 --> 02:57:08,880
And here
I can do the same for these four lines.

2444
02:57:09,480 --> 02:57:11,440
I don't need to repeat them again

2445
02:57:12,560 --> 02:57:14,880
because I have already written this code.

2446
02:57:14,880 --> 02:57:18,320
So I will usually construct the above one

2447
02:57:19,440 --> 02:57:22,560
and I pass the information here

2448
02:57:28,000 --> 02:57:30,360
and those fears

2449
02:57:30,360 --> 02:57:34,560
will be initialized automatically.

2450
02:57:34,560 --> 02:57:36,680
I can remove all of this code.

2451
02:57:37,080 --> 02:57:38,960
All of this code

2452
02:57:40,000 --> 02:57:42,200
if I have to create multiple constructor.

2453
02:57:42,960 --> 02:57:47,080
So this is the second use of this keyword,

2454
02:57:48,040 --> 02:57:51,280
this keyword
to refer to instance, variables always.

2455
02:57:51,280 --> 02:57:52,720
Yes, you'll get them.

2456
02:57:52,720 --> 02:57:55,000
It will always refer
to the local variables.

2457
02:57:55,680 --> 02:57:58,560
So for instance, variables

2458
02:58:02,160 --> 02:58:08,240
we can we using it like this
if we don't want to change the value.

2459
02:58:08,240 --> 02:58:10,160
Well all the time.

2460
02:58:10,160 --> 02:58:14,600
Correct. Yes.

2461
02:58:14,600 --> 02:58:16,440
More cleaner code.

2462
02:58:16,440 --> 02:58:18,440
But why you don't get error?

2463
02:58:18,440 --> 02:58:20,880
Because duplicate variables.

2464
02:58:20,880 --> 02:58:23,000
Where are duplicate variables are

2465
02:58:23,560 --> 02:58:26,520
are you have commented out this code

2466
02:58:26,520 --> 02:58:28,600
so I can actually remove the score.

2467
02:58:28,800 --> 02:58:30,720
There are no duplicate variables

2468
02:58:41,360 --> 02:58:42,480
before.

2469
02:58:42,760 --> 02:58:44,760
On which
line can you tell me the line number

2470
02:58:48,120 --> 02:58:48,760
but still

2471
02:58:48,760 --> 02:58:52,040
repeating the same constructor
too many times? Yes.

2472
02:58:52,040 --> 02:58:54,800
So now I am repeating the constructor
call.

2473
02:58:55,440 --> 02:58:59,040
Earlier I was four lines of code in here.

2474
02:58:59,080 --> 02:59:01,560
Now I am writing only one line of code
in here.

2475
02:59:02,280 --> 02:59:04,800
Earlier
I was writing three lines of code in here.

2476
02:59:04,800 --> 02:59:07,280
Now I write only one line code.

2477
02:59:07,280 --> 02:59:10,920
So yes, I am repeating
but I now have to write

2478
02:59:10,920 --> 02:59:12,960
Very good

2479
02:59:16,120 --> 02:59:19,520
in line for piece 42 we have.

2480
02:59:19,800 --> 02:59:22,160
Wait, what will happen to that?

2481
02:59:22,160 --> 02:59:25,160
So this word will be initialized
from this constructor?

2482
02:59:25,880 --> 02:59:28,760
Yes. Let me go up

2483
02:59:30,320 --> 02:59:32,640
the y color age and wait.

2484
02:59:33,120 --> 02:59:34,760
Separate.

2485
02:59:35,320 --> 02:59:38,640
Mr.. What can you tell me the line number

2486
02:59:38,640 --> 02:59:42,240
you. I am passing the age in here
and passing the word in here.

2487
02:59:43,800 --> 02:59:47,440
Line 33.

2488
02:59:47,440 --> 02:59:49,480
This particular

2489
02:59:51,480 --> 02:59:54,160
Oh, because this constructor

2490
02:59:54,720 --> 02:59:57,760
can only initialize three fields,

2491
02:59:58,400 --> 03:00:02,880
I am using the constructor
above to initialize those two fields,

2492
03:00:03,240 --> 03:00:05,920
but still
I need to initialize the third field.

2493
03:00:06,000 --> 03:00:09,720
That's why I am writing it in here.

2494
03:00:09,720 --> 03:00:11,120
Same is the case in here.

2495
03:00:11,120 --> 03:00:14,400
I can initialize three fields
with the help of this

2496
03:00:14,400 --> 03:00:17,920
above constructor,
but I still need to initialize this edge.

2497
03:00:17,920 --> 03:00:30,480
That's why I have to write it manually.

2498
03:00:30,480 --> 03:00:34,280
Now let me let me debug this code for you
so that you guys understand

2499
03:00:34,280 --> 03:00:36,560
how everything gets initialized

2500
03:00:46,840 --> 03:00:54,280
and so to make the code shorter,

2501
03:00:54,280 --> 03:00:56,880
we should take the values from the above
constructor.

2502
03:00:56,880 --> 03:00:59,240
Yes. Not take the values above.

2503
03:00:59,240 --> 03:01:02,840
From above constructor
we should reuse the above constructor.

2504
03:01:03,200 --> 03:01:06,240
Yes. But why we need that repetition
instead of writing

2505
03:01:06,240 --> 03:01:09,680
only to clean code
with all the parameters.

2506
03:01:09,680 --> 03:01:11,040
Because if you have to write

2507
03:01:11,040 --> 03:01:14,040
multiple constructors
then you will be repeating a lot of code.

2508
03:01:15,360 --> 03:01:15,960
What is this?

2509
03:01:15,960 --> 03:01:18,480
Add a recursive constructor invocation.

2510
03:01:18,760 --> 03:01:23,640
So you are trying to call the same
constructor inside the same constructor.

2511
03:01:23,640 --> 03:01:25,560
It will be an infinite loop.

2512
03:01:25,560 --> 03:01:26,960
Try to execute this code.

2513
03:01:26,960 --> 03:01:29,520
Your computer will blow up.

2514
03:01:29,520 --> 03:01:30,680
I am so confused.

2515
03:01:30,680 --> 03:01:32,520
Sorry if I am also very confused.

2516
03:01:32,520 --> 03:01:34,880
Don't worry, I am with you.

2517
03:01:34,880 --> 03:01:36,360
Whatever Mustafa asked.

2518
03:01:36,360 --> 03:01:39,000
I heard the same question in my mind.

2519
03:01:39,000 --> 03:01:39,760
Okay, I will.

2520
03:01:39,760 --> 03:01:42,360
I will debug discord. Don't worry.

2521
03:01:42,360 --> 03:01:46,840
Is there a code to put everything inside
this, including the weight?

2522
03:01:46,840 --> 03:01:48,240
Or is that your going on?

2523
03:01:48,240 --> 03:01:50,320
Need extra data types? No.

2524
03:01:50,880 --> 03:01:53,640
Do you mean you can?

2525
03:01:53,640 --> 03:01:56,040
You can put the code in here as well.

2526
03:01:56,960 --> 03:01:57,320
Okay.

2527
03:01:57,320 --> 03:02:00,680
You can initialize the fields
with the default values in here

2528
03:02:04,680 --> 03:02:09,360
we say we are reusing
the constructor from a

2529
03:02:10,440 --> 03:02:10,840
category.

2530
03:02:10,840 --> 03:02:14,760
Also randomly coding.

2531
03:02:14,760 --> 03:02:20,400
Yes Nicolai that I don't worry.

2532
03:02:20,400 --> 03:02:21,960
I will debug report line by line.

2533
03:02:21,960 --> 03:02:25,480
We will see line by line
what is happening.

2534
03:02:25,480 --> 03:02:30,520
So let me create some methods

2535
03:02:30,520 --> 03:03:15,280
to display the values, putting in

2536
03:03:15,360 --> 03:03:17,680
some people being

2537
03:03:42,720 --> 03:03:43,640
everything.

2538
03:03:43,640 --> 03:03:45,680
So I don't want to type anymore.

2539
03:03:45,680 --> 03:03:46,040
It's fine.

2540
03:03:46,040 --> 03:03:50,520
You can just watch this video.

2541
03:03:50,520 --> 03:03:52,400
They were students
from the previous batch.

2542
03:03:52,400 --> 03:03:55,120
They were in hospital
and they were still taking classes,

2543
03:03:56,880 --> 03:03:58,960
but only listening

2544
03:04:00,600 --> 03:04:03,360
alert and then age

2545
03:04:18,640 --> 03:04:20,160
and golden age.

2546
03:04:20,160 --> 03:04:24,440
We have weird

2547
03:04:25,720 --> 03:04:28,240
and we should only watch and drink
plenty of water,

2548
03:04:28,240 --> 03:04:31,440
so I wish we would not go hospital.

2549
03:04:31,600 --> 03:04:33,840
They were in after classes

2550
03:04:34,560 --> 03:04:36,720
if because of COVID.

2551
03:04:37,920 --> 03:04:41,920
Someone told me I hear
jello from this concert on Twitter and

2552
03:04:43,280 --> 03:04:48,800
starting from the constructor Sheriff.

2553
03:04:48,800 --> 03:04:49,440
No, no man.

2554
03:04:49,440 --> 03:04:55,560
This is where the real fun starts.

2555
03:04:55,560 --> 03:05:06,200
Flash
that smiley with that tape on my mouth.

2556
03:05:06,200 --> 03:05:13,720
I'm just kidding.

2557
03:05:13,720 --> 03:05:14,720
It's easy, guys.

2558
03:05:14,720 --> 03:05:17,560
It's easy.

2559
03:05:17,560 --> 03:05:20,080
Yes, it will be on your fingertips.

2560
03:05:20,080 --> 03:05:25,680
Don't worry.

2561
03:05:25,680 --> 03:05:26,720
Let me.

2562
03:05:28,040 --> 03:05:30,280
Or to scold a little bit

2563
03:05:36,080 --> 03:05:38,760
the way if you guys are confused

2564
03:05:38,760 --> 03:05:42,040
about so many fields,
I can remove some of the fields.

2565
03:05:42,040 --> 03:05:43,560
You guys want me to do that?

2566
03:05:43,560 --> 03:05:50,360
Maybe we can understand this
with only three fields.

2567
03:05:50,360 --> 03:05:54,240
Or is there a shortcut
to organize the code and spacing? Yes.

2568
03:05:54,240 --> 03:05:56,400
Control shift F

2569
03:06:03,800 --> 03:06:04,600
right.

2570
03:06:04,960 --> 03:06:07,360
So let me create a call

2571
03:06:07,360 --> 03:06:20,280
texture.

2572
03:06:20,280 --> 03:06:23,360
So, Marina, after this example,

2573
03:06:23,360 --> 03:06:27,240
we will be having a break
and if you guys are facing any issues,

2574
03:06:27,680 --> 03:06:29,760
I want you to type this code

2575
03:06:30,520 --> 03:06:32,920
based those issues,

2576
03:06:33,000 --> 03:06:36,720
read the errors, fix those issues
I want you to learn.

2577
03:06:36,880 --> 03:06:37,560
Okay,

2578
03:06:38,280 --> 03:06:40,880
So I will not be sharing this code.

2579
03:06:40,880 --> 03:06:42,480
Is that okay?

2580
03:06:42,960 --> 03:06:45,880
But you can ask me
if you are getting any errors.

2581
03:06:45,880 --> 03:06:47,560
I want you to type it.

2582
03:06:47,560 --> 03:06:49,240
I want you to type it.

2583
03:06:49,240 --> 03:06:53,400
It will be better for you.

2584
03:06:53,400 --> 03:06:53,680
Okay?

2585
03:06:57,560 --> 03:06:59,760
Yes, I will display the coding break.

2586
03:06:59,760 --> 03:07:00,400
Okay.

2587
03:07:01,240 --> 03:07:03,680
So it's a very useful skill to have.

2588
03:07:03,760 --> 03:07:04,760
Okay. Don't feel bad.

2589
03:07:04,760 --> 03:07:07,680
It's a very useful skill to

2590
03:07:07,680 --> 03:07:09,000
fix your errors.

2591
03:07:09,000 --> 03:07:11,560
I want you to go through that.

2592
03:07:11,560 --> 03:07:30,320
And typing is also good.

2593
03:07:30,320 --> 03:07:33,680
It is still readable.

2594
03:07:33,680 --> 03:07:38,600
Guys, it's

2595
03:07:40,440 --> 03:07:40,800
okay.

2596
03:07:40,800 --> 03:07:43,440
I am not removing anything.

2597
03:07:43,440 --> 03:07:46,360
You guys can see all the code.

2598
03:07:46,360 --> 03:07:48,440
Let me give you 2 minutes. Okay?

2599
03:07:48,960 --> 03:07:52,360
And I want all of you to make sure

2600
03:07:52,360 --> 03:07:56,160
that you guys have
the exact same code on your computer.

2601
03:07:56,160 --> 03:07:58,080
And if you are facing any issues

2602
03:07:58,080 --> 03:08:01,560
or errors, you guys send them in here on
in this fourth channel

2603
03:08:02,040 --> 03:08:14,760
and we fix those issues
and then we move forward.

2604
03:08:14,760 --> 03:08:16,600
Who wanted to go?

2605
03:08:16,880 --> 03:08:37,440
So it's because of that person?

2606
03:08:37,440 --> 03:08:40,560
Sebastian No means today
and you are also busy typing

2607
03:08:40,560 --> 03:08:50,760
code, so

2608
03:08:52,040 --> 03:08:53,360
let me know guys, once you

2609
03:08:53,360 --> 03:09:17,520
are done typing this code.

2610
03:09:17,520 --> 03:09:21,000
So first let's do,
let's try to understand how

2611
03:09:21,240 --> 03:09:24,960
this multiple
chaining of constructors is happening.

2612
03:09:24,960 --> 03:09:29,840
Okay?

2613
03:09:29,840 --> 03:09:31,120
All right.

2614
03:09:31,120 --> 03:09:35,800
Article oh is equal to new out

2615
03:09:38,520 --> 03:09:39,440
and then nice.

2616
03:09:39,440 --> 03:09:42,000
Give me the values for these parameters.

2617
03:09:42,000 --> 03:09:45,080
The name of the call Lola.

2618
03:09:45,320 --> 03:09:49,920
The name of the call is Lola.

2619
03:09:49,920 --> 03:09:52,080
And what about the breed

2620
03:09:53,120 --> 03:09:54,000
that had

2621
03:10:01,760 --> 03:10:04,560
excellent Australian code

2622
03:10:07,200 --> 03:10:18,360
and Mejorar Lola

2623
03:10:25,600 --> 03:10:26,400
and the color

2624
03:10:26,400 --> 03:10:34,880
is now the white.

2625
03:10:34,880 --> 03:10:41,640
And then Lola is 16 years
old, is in her teenage

2626
03:10:42,480 --> 03:10:46,440
and her weight is her 80

2627
03:10:47,760 --> 03:10:48,280
legs.

2628
03:10:48,360 --> 03:10:53,880
At least it is soon we going to do

2629
03:10:57,600 --> 03:11:00,520
and then we say, Go start

2630
03:11:02,280 --> 03:11:03,440
putting all the info.

2631
03:11:03,440 --> 03:11:07,080
Okay, So let me put a

2632
03:11:10,720 --> 03:11:13,800
debug point in here on this line.

2633
03:11:13,800 --> 03:11:17,040
On this line and on this line.

2634
03:11:17,520 --> 03:11:21,960
Let me know, guys, once you have placed
these three debug points in here on both

2635
03:11:21,960 --> 03:11:29,320
the classic.

2636
03:11:29,320 --> 03:11:30,760
So I right click

2637
03:11:33,960 --> 03:11:36,440
play, I click on debugging as

2638
03:11:36,480 --> 03:12:06,760
Java application.

2639
03:12:06,760 --> 03:12:07,200
All right.

2640
03:12:07,200 --> 03:12:09,600
So right now we are on this constructor.

2641
03:12:09,600 --> 03:12:10,280
Okay.

2642
03:12:10,440 --> 03:12:12,960
And if I want to see how

2643
03:12:13,360 --> 03:12:16,920
the execution happened
inside this constructor,

2644
03:12:17,520 --> 03:12:20,720
which button
I should click this step into?

2645
03:12:20,720 --> 03:12:23,280
And can you,
can you guys tell me the number

2646
03:12:23,880 --> 03:12:27,320
which which line number
it will take me to from this call class?

2647
03:12:27,320 --> 03:12:30,000
If I step into

2648
03:12:34,560 --> 03:12:37,840
37. Perfect.

2649
03:12:37,840 --> 03:12:39,760
I have error

2650
03:12:43,200 --> 03:12:48,080
because you are defining
that method entirely.

2651
03:12:48,080 --> 03:12:50,120
Constructor and

2652
03:12:52,560 --> 03:12:56,120
so I say

2653
03:13:00,720 --> 03:13:16,920
step into okay, so right now
I am on this line.

2654
03:13:17,160 --> 03:13:19,560
Okay, I am passing name.

2655
03:13:19,720 --> 03:13:22,680
Oops, I am passing breed.

2656
03:13:22,680 --> 03:13:25,320
I am passing color ID and way. Okay.

2657
03:13:25,960 --> 03:13:28,000
And in this constructor

2658
03:13:28,680 --> 03:13:32,640
I have not written piece of code
to initialize

2659
03:13:32,680 --> 03:13:36,840
name, breed and color,
but what I am doing instead

2660
03:13:37,400 --> 03:13:41,720
I am passing this information
to another constructor.

2661
03:13:41,960 --> 03:13:46,400
This given that I am writing in here
in the parenthesis that I had written here

2662
03:13:47,440 --> 03:13:49,880
it is saying that there is a constructor

2663
03:13:51,280 --> 03:13:55,320
in this class that takes four parameters.

2664
03:13:55,760 --> 03:14:00,120
So what I will do, Java will search
all the constructors in here.

2665
03:14:00,400 --> 03:14:04,080
Which constructor takes four
four parameters, three of them

2666
03:14:04,080 --> 03:14:08,240
as three string variables
and one integer variable.

2667
03:14:08,280 --> 03:14:15,360
Is there a constructor in this class?

2668
03:14:15,360 --> 03:14:18,360
Here's the line number 31.

2669
03:14:18,360 --> 03:14:23,800
This constructor takes name
breed and color and age.

2670
03:14:24,000 --> 03:14:26,960
Okay, so it will jump.

2671
03:14:27,320 --> 03:14:30,960
If I press on in blue, it will jump.

2672
03:14:30,960 --> 03:14:34,920
Oops.

2673
03:14:34,920 --> 03:14:45,840
I accidentally pressed this step
and let me really object.

2674
03:14:45,840 --> 03:14:48,280
So I say step into. Okay.

2675
03:14:48,800 --> 03:14:52,560
So first of all, the

2676
03:14:54,480 --> 03:14:56,840
static fields are initialized in a class.

2677
03:14:56,840 --> 03:14:59,200
Okay?

2678
03:14:59,200 --> 03:15:02,640
After that we initialize the constructor

2679
03:15:03,920 --> 03:15:07,560
and we start from line number 37. Why?

2680
03:15:07,560 --> 03:15:10,680
Because I passing

2681
03:15:10,680 --> 03:15:14,240
five parameters,
and this is the constructor

2682
03:15:14,760 --> 03:15:18,000
in this class which takes five

2683
03:15:19,720 --> 03:15:20,920
parameters.

2684
03:15:20,920 --> 03:15:24,920
Three of them are strings
and two of them are one is integer,

2685
03:15:24,920 --> 03:15:25,840
another one is Williams.

2686
03:15:25,840 --> 03:15:28,080
So this is the perfect match.

2687
03:15:28,080 --> 03:15:31,440
So Java will execute this constructor
by looking at

2688
03:15:31,440 --> 03:15:34,440
this better in these parameters,

2689
03:15:34,440 --> 03:15:37,560
it will execute this constructor and after

2690
03:15:39,240 --> 03:15:41,840
I am again saying, Hey Java,

2691
03:15:41,840 --> 03:15:44,120
there is a constructor in this class

2692
03:15:44,760 --> 03:15:48,080
which takes four parameters, okay?

2693
03:15:48,920 --> 03:15:51,720
And three of them are

2694
03:15:52,480 --> 03:15:56,080
string type of type string and one is age.

2695
03:15:56,640 --> 03:15:59,400
So Joe will again
search all the parameters

2696
03:16:00,120 --> 03:16:04,480
and it will execute that constructor
in here.

2697
03:16:04,560 --> 03:16:14,480
Okay, so right now they'll this point.

2698
03:16:14,480 --> 03:16:19,920
Okay, so

2699
03:16:19,920 --> 03:16:22,520
at this point we have not initialized

2700
03:16:23,400 --> 03:16:25,840
any of these fields. Okay?

2701
03:16:26,040 --> 03:16:27,680
These they are still null.

2702
03:16:27,680 --> 03:16:32,200
Now let these name breed and these are
the parameters of this matter

2703
03:16:35,000 --> 03:16:35,800
morality, but

2704
03:16:35,800 --> 03:16:41,680
is asking for source code again,

2705
03:16:41,680 --> 03:16:48,040
I am so understand at this point.

2706
03:16:48,040 --> 03:16:49,040
All right, that's great.

2707
03:16:49,040 --> 03:16:52,160
Okay, so now, guys, tell me.

2708
03:16:52,480 --> 03:16:56,600
I am passing a string and other string
and other thing So I am passing

2709
03:16:56,600 --> 03:16:57,480
three strings.

2710
03:16:57,480 --> 03:17:01,440
Is there a constructor in this class
which expects

2711
03:17:01,560 --> 03:17:06,360
three strings?

2712
03:17:06,360 --> 03:17:08,080
Yes. Right.

2713
03:17:08,080 --> 03:17:10,600
I have another constructor.

2714
03:17:10,600 --> 03:17:15,360
So now Java will enter that constructor.

2715
03:17:15,680 --> 03:17:19,440
I am again saying Hey Java
there is a constructor

2716
03:17:19,800 --> 03:17:22,400
which to exclude string parameters.

2717
03:17:22,800 --> 03:17:25,560
Please that constructor first.

2718
03:17:26,080 --> 03:17:31,080
So now it will go inside this,
then it will go inside this.

2719
03:17:31,640 --> 03:17:35,640
And now I am not calling a constructor.

2720
03:17:35,640 --> 03:17:38,320
So the first field

2721
03:17:38,320 --> 03:17:41,440
which will get initialized,
which field will be guessed

2722
03:17:41,560 --> 03:17:52,120
that initialized first.

2723
03:17:52,120 --> 03:17:54,840
So I have passed this information

2724
03:17:55,560 --> 03:17:58,280
again and again from multiple constructor.

2725
03:17:58,280 --> 03:18:01,320
So from this constructor
I pass it in here.

2726
03:18:01,320 --> 03:18:05,040
From this I passed it in here
from this passage in here.

2727
03:18:05,480 --> 03:18:11,040
And finally this is the constructor
which will initialize

2728
03:18:13,520 --> 03:18:15,000
the name field.

2729
03:18:15,000 --> 03:18:22,440
Okay,
which will initialize the name field.

2730
03:18:22,440 --> 03:18:24,960
So the first field to get the value.

2731
03:18:25,680 --> 03:18:27,520
So you see this.

2732
03:18:27,520 --> 03:18:31,920
So this actually
is referring to the instance.

2733
03:18:31,920 --> 03:18:35,280
So you guys will see right now
the name is NULL in here,

2734
03:18:36,160 --> 03:18:39,280
but as soon as I execute

2735
03:18:39,280 --> 03:18:44,400
Discord, the name will now have Lola.

2736
03:18:44,920 --> 03:18:47,760
Okay, but I still don't initialize

2737
03:18:47,760 --> 03:18:51,080
breed color and age where the breed is.

2738
03:18:51,080 --> 03:18:55,200
Get initialize
after the call to this constructor.

2739
03:18:55,200 --> 03:18:58,800
So now we are coming back to those methods
again.

2740
03:18:58,920 --> 03:18:59,600
Okay.

2741
03:18:59,840 --> 03:19:04,160
So in inside a constructor we have,
we were calling another constructor.

2742
03:19:04,160 --> 03:19:08,120
Inside that constructor we were calling
another arguing another constructor.

2743
03:19:08,120 --> 03:19:10,720
So Java keeps on going inside
those constructors.

2744
03:19:10,720 --> 03:19:16,280
Now I will come back to those constructors
from which we called

2745
03:19:16,280 --> 03:19:20,680
the other constructors and now Java
will execute the remaining code.

2746
03:19:20,840 --> 03:19:21,960
Yes, the reverse.

2747
03:19:21,960 --> 03:19:25,240
We Can you guys tell me which
which line will be executed

2748
03:19:25,240 --> 03:19:40,040
next?

2749
03:19:40,040 --> 03:19:43,000
Perfect. Alexi. Perfect.
The line number. This.

2750
03:19:43,000 --> 03:19:44,600
This line has already executed.

2751
03:19:44,600 --> 03:19:46,840
When we when we initialized this field.

2752
03:19:47,520 --> 03:19:50,440
Now this line be executed.

2753
03:19:50,560 --> 03:19:53,560
Okay, so if I say step

2754
03:19:53,560 --> 03:19:56,640
over, you see, it will be initialized.

2755
03:19:56,640 --> 03:19:59,840
Now, can you guys tell me the next
line which will be executed?

2756
03:20:01,320 --> 03:20:03,040
It will be 26.

2757
03:20:03,040 --> 03:20:08,640
So now we are coming back from the methods
called method calls.

2758
03:20:08,640 --> 03:20:13,040
So now color will be initialized,

2759
03:20:13,040 --> 03:20:16,200
then edge will be initialized, then wait.

2760
03:20:17,520 --> 03:20:19,800
And now we are done

2761
03:20:20,800 --> 03:20:24,120
initializing
all the features, all the fields.

2762
03:20:24,720 --> 03:20:28,000
And now if we execute print all in full,

2763
03:20:29,440 --> 03:20:33,360
then we get all the values on our console.

2764
03:20:34,280 --> 03:20:37,600
It is better now, guys,
how these constructors

2765
03:20:37,600 --> 03:20:42,360
are calling other constructors
and how the values are being initialized.

2766
03:20:42,360 --> 03:20:45,520
Why it does not print color in my them. So

2767
03:20:46,560 --> 03:20:52,360
Maria, make sure that you have this color
in okay.

2768
03:20:52,400 --> 03:20:53,520
In here.

2769
03:20:54,240 --> 03:20:55,680
What about the price?

2770
03:20:55,680 --> 03:20:58,800
So price was static variable.

2771
03:20:58,840 --> 03:20:59,560
Okay.

2772
03:20:59,760 --> 03:21:01,320
I never initialized it.

2773
03:21:01,320 --> 03:21:03,320
I assigned it a fixed value. Okay.

2774
03:21:03,400 --> 03:21:05,480
If you want, you can also initialize it

2775
03:21:08,440 --> 03:21:09,760
support in constructor.

2776
03:21:09,760 --> 03:21:12,200
Go from down to upper
and from up and down.

2777
03:21:12,200 --> 03:21:12,840
So Alex,

2778
03:21:12,840 --> 03:21:18,800
if you are calling multiple constructors
inside other constructor like this, yes.

2779
03:21:18,800 --> 03:21:21,600
Then it will first go to ours up

2780
03:21:22,440 --> 03:21:27,080
to the smallest constructor,
then it will come back once it is done.

2781
03:21:27,080 --> 03:21:34,600
Executing all those constructors.

2782
03:21:34,600 --> 03:21:37,120
Maryam Let me have a look at

2783
03:21:48,080 --> 03:21:48,760
the Maryam.

2784
03:21:48,760 --> 03:21:52,320
You are assigning the color
to bleed on line number 18.

2785
03:21:53,560 --> 03:21:56,240
Let you get null. So

2786
03:21:56,240 --> 03:21:58,960
what about the first constructor
with line 12?

2787
03:21:59,840 --> 03:22:03,960
So like, well, we will never call this
constructor again if.

2788
03:22:03,960 --> 03:22:08,040
You want, you can call it as well in here
if that contains something important

2789
03:22:08,520 --> 03:22:12,120
that you always want to execute
whenever there is

2790
03:22:12,120 --> 03:22:16,520
construction of your object, you can you
you can put that as well.

2791
03:22:16,520 --> 03:22:23,880
So let's say
for example, important line of code

2792
03:22:25,120 --> 03:22:27,600
that you always want to

2793
03:22:27,600 --> 03:22:29,760
execute, you can say this

2794
03:22:30,840 --> 03:22:33,000
and then empty parenthesis.

2795
03:22:33,000 --> 03:22:41,120
Okay, Now
this constructor will also be executed.

2796
03:22:41,120 --> 03:22:47,880
And there is one more rule, guys,
we cannot place this on the second line.

2797
03:22:47,880 --> 03:22:50,960
It should be the first line always.

2798
03:22:51,400 --> 03:22:54,160
Okay,
we can not have it as the second line.

2799
03:22:54,160 --> 03:23:00,560
This must be the first line in.

2800
03:23:00,560 --> 03:23:01,040
Okay,

2801
03:23:02,920 --> 03:23:07,240
so let's go to the slides again.

2802
03:23:07,240 --> 03:23:12,360
Let's try to learn a little bit
about the theory about the rules.

2803
03:23:12,960 --> 03:23:16,440
Then we come back
and we follow the examples again.

2804
03:23:16,480 --> 03:23:18,480
I'll 2 to 3 examples again.

2805
03:23:20,160 --> 03:23:22,200
First, we will try to solve them.

2806
03:23:22,200 --> 03:23:24,360
You guys will try to solve them
during the break.

2807
03:23:24,360 --> 03:23:26,800
Then I will show you the solution again.

2808
03:23:27,440 --> 03:23:29,800
And hopefully, after all that, you

2809
03:23:29,840 --> 03:23:34,080
you guys will be able to get a good
understanding of this concept

2810
03:23:36,480 --> 03:23:37,560
is equal to call name.

2811
03:23:37,560 --> 03:23:44,360
Instead,
we can do this name or not this name.

2812
03:23:44,360 --> 03:23:46,080
Yes, this is what I am doing.

2813
03:23:46,080 --> 03:23:47,400
You will get the

2814
03:23:48,560 --> 03:23:50,720
this is what I am doing.

2815
03:23:50,760 --> 03:23:53,400
Can you tell me the line number?

2816
03:23:53,520 --> 03:24:03,720
And really I should do this?

2817
03:24:03,720 --> 03:24:04,760
Oh, I'm just asking.

2818
03:24:04,760 --> 03:24:07,360
Yes, we can do that
if you don't want to use this keyword.

2819
03:24:07,400 --> 03:24:12,120
But then you always have to come up
with the different variable names.

2820
03:24:12,120 --> 03:24:12,600
Okay?

2821
03:24:12,600 --> 03:24:27,640
Unnecessarily, you have to come up
with different variable names.

2822
03:24:27,640 --> 03:24:28,040
Right.

2823
03:24:28,040 --> 03:24:30,360
In Java class
that will have a constructor,

2824
03:24:30,360 --> 03:24:33,600
one with parameters, and second,
without any parameters.

2825
03:24:33,600 --> 03:24:35,040
Create a separate class.

2826
03:24:35,040 --> 03:24:39,040
We will execute both of the constructors
via the Java Class

2827
03:24:39,040 --> 03:24:40,280
Forum that

2828
03:24:51,400 --> 03:24:52,040
okay, I hope.

2829
03:24:52,040 --> 03:24:54,200
I think you guys can solve this without

2830
03:24:55,400 --> 03:24:56,920
learning about the rules.

2831
03:24:56,920 --> 03:24:59,480
Selecting both of them in the course
and I'll switch General

2832
03:25:28,080 --> 03:25:30,320
and you guys can also solve these tasks

2833
03:25:31,960 --> 03:25:33,360
without waiting

2834
03:25:33,360 --> 03:25:50,480
for that explanation.

2835
03:25:50,480 --> 03:25:52,680
And you guys can also solve this one

2836
03:25:53,600 --> 03:25:56,520
because you guys are brilliant

2837
03:26:03,560 --> 03:26:17,640
and, and now let's have a break.

2838
03:26:17,640 --> 03:26:25,240
How are you guys?

2839
03:26:25,240 --> 03:26:27,720
Tired. Okay, let's celebrate.

2840
03:26:27,720 --> 03:26:30,040
So here's 140.

2841
03:26:30,040 --> 03:26:33,840
I don't want you to sit
and keep on solving the questions.

2842
03:26:33,840 --> 03:26:37,440
I want you to at least take a 10 minutes
break.

2843
03:26:38,640 --> 03:26:41,000
And after that, maybe

2844
03:26:41,000 --> 03:26:44,000
you guys can try to solve them

2845
03:26:44,000 --> 03:26:48,760
and then I will show you the solutions.

2846
03:26:50,000 --> 03:26:53,280
We have quite

2847
03:26:58,920 --> 03:27:01,400
we will collapse if we don't take a break

2848
03:27:04,880 --> 03:27:07,680
to celebrate for

2849
03:27:07,680 --> 03:27:09,200
2015.

2850
03:27:09,720 --> 03:27:13,240
Okay.

2851
03:27:13,240 --> 03:27:16,400
Take some rest programing.

2852
03:27:16,400 --> 03:27:22,200
If you are not tired,
you are not doing it right.

2853
03:27:22,200 --> 03:27:24,720
Oh, my God. I remember those days.

2854
03:27:25,440 --> 03:27:28,080
I have not slept for

2855
03:27:29,640 --> 03:27:30,400
three days.

2856
03:27:30,400 --> 03:27:35,920
So there was an issue on the production
server and I used to get like 2 to 3 hours

2857
03:27:35,920 --> 03:27:41,960
sleep and I was there all the time
and that's how I learned Java.

2858
03:27:41,960 --> 03:27:44,000
I need to eat something and pray.

2859
03:27:44,000 --> 03:27:54,960
Okay, so we are having 35 minutes break,

2860
03:27:54,960 --> 03:27:58,160
but I want you guys to at least solve
two problems.

2861
03:27:58,560 --> 03:28:07,960
Well, at least solve the problem.

2862
03:28:07,960 --> 03:28:10,080
And remind me about the recording, please.

2863
03:28:10,080 --> 03:28:13,960
Can you check my code

2864
03:28:15,120 --> 03:28:17,040
SO constructor

2865
03:28:17,040 --> 03:28:27,160
call the bar so I'm wrong.

2866
03:28:27,160 --> 03:28:30,800
There is no constructor car or not.

2867
03:28:30,800 --> 03:28:33,720
There is a constructor bar.

2868
03:28:34,120 --> 03:28:37,760
Can you make sure
that you have a constructor

2869
03:28:37,760 --> 03:28:41,240
that is taking all fields
and in the same sequence

2870
03:28:41,680 --> 03:28:44,640
inside the constructor parking
to share the screenshot of back

2871
03:28:48,280 --> 03:28:49,120
22 years

2872
03:28:49,120 --> 03:28:53,240
old? Yes.

2873
03:28:53,520 --> 03:28:55,000
Total six tasks.

2874
03:28:55,000 --> 03:28:57,240
If you guys are unable to solve
some of them,

2875
03:28:58,600 --> 03:29:01,000
we will try to solve them

2876
03:29:01,000 --> 03:29:05,320
during the today's class,
but if we are unable to do that

2877
03:29:05,320 --> 03:29:15,360
we will solve them in the next class.

2878
03:29:15,360 --> 03:29:19,720
You guys remind me about the recording.

2879
03:29:19,720 --> 03:29:21,400
Yes, we are on break.

2880
03:29:21,400 --> 03:29:26,080
Or are we on break?

2881
03:29:26,080 --> 03:29:27,600
Thank you.

2882
03:29:28,240 --> 03:29:55,800
Let me close the call.

2883
03:29:55,800 --> 03:29:59,920
Could you check?

2884
03:29:59,920 --> 03:30:00,200
Okay.

2885
03:30:00,200 --> 03:30:04,880
Let me do the tasks and then you guys
can compare Your solutions is good.

2886
03:30:04,920 --> 03:30:08,520
Why don't you write a program
that when you turn on Zoom,

2887
03:30:08,520 --> 03:30:10,840
it starts recording automatically?

2888
03:30:11,840 --> 03:30:12,720
Yes, that's it.

2889
03:30:12,720 --> 03:30:15,120
That is a good suggestion. Google.

2890
03:30:15,120 --> 03:30:17,880
Maybe if I have time,
I will try to do something

2891
03:30:18,720 --> 03:30:21,960
like this.

2892
03:30:21,960 --> 03:30:23,200
Okay.

2893
03:30:24,520 --> 03:30:28,560
Actually, my research is going on
and I am super, super busy

2894
03:30:28,560 --> 03:30:32,960
all there right now.

2895
03:30:32,960 --> 03:30:40,920
Once you are created, ask one.

2896
03:30:40,920 --> 03:30:43,840
There is a zoom setting that you can apply
all that.

2897
03:30:43,840 --> 03:30:47,080
That's great.

2898
03:30:47,080 --> 03:30:54,960
I will try to find that searching.

2899
03:30:54,960 --> 03:30:57,440
So the first task was to

2900
03:30:59,440 --> 03:31:01,800
write a program

2901
03:31:02,040 --> 03:31:05,200
that will have a constructor,

2902
03:31:05,200 --> 03:31:07,640
the one with the parameters,

2903
03:31:07,640 --> 03:31:10,400
and second without parameters.

2904
03:31:11,480 --> 03:31:13,680
Create a separate test class

2905
03:31:13,800 --> 03:31:17,320
where you will execute
both of the constructors.

2906
03:31:17,640 --> 03:31:21,440
Okay, so

2907
03:31:21,440 --> 03:31:25,520
let's see, I
how can I create a constructor that works?

2908
03:31:25,520 --> 03:31:32,080
Should be the name of my constructor.

2909
03:31:32,080 --> 03:31:33,000
It should be.

2910
03:31:33,000 --> 03:31:35,440
Okay, so I can use any access modifier.

2911
03:31:35,440 --> 03:31:37,520
Then the name will be task one

2912
03:31:38,800 --> 03:31:40,880
and pair and fifties and then

2913
03:31:45,480 --> 03:31:47,400
I can type

2914
03:31:47,480 --> 03:31:56,440
zero constructors,

2915
03:31:56,440 --> 03:31:58,840
then I can copy

2916
03:32:00,760 --> 03:32:04,560
this constructor and I can pass

2917
03:32:07,280 --> 03:32:09,080
in number two, maybe in here

2918
03:32:09,080 --> 03:32:12,040
and I can say when argument constructor

2919
03:32:14,640 --> 03:32:16,680
and now

2920
03:32:17,240 --> 03:32:20,320
I can prepare

2921
03:32:20,320 --> 03:32:22,520
one faster

2922
03:32:36,760 --> 03:32:38,000
and how can I call

2923
03:32:38,000 --> 03:32:54,400
both the constructors?

2924
03:32:54,400 --> 03:32:54,920
Right, Right.

2925
03:32:54,920 --> 03:33:00,600
And you ask one.

2926
03:33:00,600 --> 03:33:02,520
And then again, I are new

2927
03:33:04,600 --> 03:33:08,000
on and I pass

2928
03:33:08,000 --> 03:33:10,320
a number in here.

2929
03:33:10,320 --> 03:33:18,320
Yeah.

2930
03:33:18,320 --> 03:33:22,960
And there's how the constructors
we called.

2931
03:33:22,960 --> 03:33:25,600
This is how you guys have done it

2932
03:33:40,440 --> 03:33:42,040
in the press.

2933
03:33:42,040 --> 03:33:52,200
Okay then that's perfect.

2934
03:33:52,200 --> 03:34:05,560
I'll call you. Go.

2935
03:34:05,560 --> 03:34:07,280
But Sebastian, you are,

2936
03:34:07,280 --> 03:34:11,960
you have first of all,
you have created only one constructor.

2937
03:34:11,960 --> 03:34:13,080
Second,

2938
03:34:13,920 --> 03:34:17,040
because you don't have that

2939
03:34:17,040 --> 03:34:19,840
zero argument constructor,
you cannot also call it.

2940
03:34:19,840 --> 03:34:21,920
So you need to create two constructor.

2941
03:34:22,000 --> 03:34:23,160
Okay, so

2942
03:34:23,880 --> 03:34:26,960
one with the parameters
and second without parameters.

2943
03:34:26,960 --> 03:34:28,080
So this is

2944
03:34:28,760 --> 03:34:31,160
without parameters
and this is with parameters.

2945
03:34:31,160 --> 03:34:34,160
So you guys were supposed to create pool
constructors.

2946
03:34:34,440 --> 03:34:36,320
Just give me one moment

2947
03:34:42,520 --> 03:34:44,520
new task and our task and ask one.

2948
03:34:44,520 --> 03:34:47,400
Well, both are work, Alex Both good.

2949
03:34:47,680 --> 03:34:50,120
But if you are not planning to use,

2950
03:34:51,000 --> 03:34:55,440
if you are not planning
to use the object that you are

2951
03:34:56,480 --> 03:34:59,240
creating this line, then maybe it's fine.

2952
03:34:59,520 --> 03:35:02,480
You don't need to store that

2953
03:35:02,480 --> 03:35:05,280
object in any variable,

2954
03:35:05,280 --> 03:35:09,240
but if you are planning
to call methods on that object then yes,

2955
03:35:09,280 --> 03:35:14,280
you should create,
you should create a variable

2956
03:35:14,280 --> 03:35:17,360
and then you should
you should store this object inside

2957
03:35:17,360 --> 03:35:24,400
of that variable.

2958
03:35:24,400 --> 03:35:26,640
Yes, you are right.

2959
03:35:26,640 --> 03:35:30,400
The parameter here is only to distinguish

2960
03:35:30,400 --> 03:35:34,080
the other constructor. Yes.

2961
03:35:34,080 --> 03:35:48,280
So do we go to the task to guys?

2962
03:35:48,280 --> 03:35:51,480
I did not understand the point of ten

2963
03:35:52,080 --> 03:35:54,360
client of ten

2964
03:35:55,920 --> 03:35:56,360
medium.

2965
03:35:56,360 --> 03:36:05,880
You mean the ten
that I am passing to this constructor?

2966
03:36:05,880 --> 03:36:11,160
So I am passing this ten
so that this constructor is called.

2967
03:36:11,160 --> 03:36:15,200
So this constructor
is expecting an integer parameter

2968
03:36:16,320 --> 03:36:19,160
and I am passing this integer number

2969
03:36:19,160 --> 03:36:22,520
in here so that Java, this constructor.

2970
03:36:23,520 --> 03:36:27,400
That's why I get the second output

2971
03:36:28,120 --> 03:36:49,560
and it's fine in

2972
03:36:49,560 --> 03:36:52,600
this is outside of just

2973
03:36:54,120 --> 03:36:56,560
there to make sure that we are executing

2974
03:36:56,560 --> 03:37:08,400
both the constructors.

2975
03:37:08,400 --> 03:37:11,920
Even if you write 50 instead of ten,
it would not bring any changes.

2976
03:37:11,920 --> 03:37:15,120
Yes, if you can write 50

2977
03:37:16,200 --> 03:37:18,360
500,000

2978
03:37:18,360 --> 03:37:22,360
any integer.

2979
03:37:22,360 --> 03:37:27,400
The second task
was to write a Java program

2980
03:37:27,480 --> 03:37:30,760
of class student

2981
03:37:30,760 --> 03:37:33,480
that takes student's name

2982
03:37:35,160 --> 03:37:38,400
and three subject groups

2983
03:37:41,000 --> 03:37:42,920
inside your class

2984
03:37:42,920 --> 03:37:45,920
also have a method
to calculate average grade.

2985
03:37:47,240 --> 03:37:48,920
Test this order

2986
03:37:49,080 --> 03:37:51,280
for five the first lesson

2987
03:37:52,560 --> 03:37:54,400
is Is it okay if I use this

2988
03:37:54,400 --> 03:37:56,840
name of task two instead of student

2989
03:37:57,840 --> 03:38:03,040
or should I create a new student class?

2990
03:38:03,040 --> 03:38:03,760
Okay,

2991
03:38:05,640 --> 03:38:09,360
so how many instance variables

2992
03:38:09,360 --> 03:38:22,240
I should have inside this class?

2993
03:38:22,240 --> 03:38:23,880
For which one?

2994
03:38:23,880 --> 03:38:34,680
Can you guys
tell me the instance variables?

2995
03:38:34,680 --> 03:38:39,400
So first I need to store the name,

2996
03:38:39,400 --> 03:38:43,480
then maybe
and be able to store the subject.

2997
03:38:43,480 --> 03:38:44,360
One marks

2998
03:38:48,720 --> 03:38:50,800
and another one

2999
03:38:51,200 --> 03:38:54,400
to study subject to
and subject three marks.

3000
03:38:54,400 --> 03:39:03,240
Okay,

3001
03:39:03,240 --> 03:39:05,320
we are creating

3002
03:39:06,480 --> 03:39:10,920
one variable
to hold B name and three variables

3003
03:39:10,920 --> 03:39:14,280
to hold the sum of decoders.

3004
03:39:15,320 --> 03:39:18,240
And we we don't need to sum them.

3005
03:39:18,640 --> 03:39:24,640
Okay,
maybe you can do that inside your method.

3006
03:39:24,640 --> 03:39:25,240
Okay.

3007
03:39:27,480 --> 03:39:30,720
And then I need to initialize these fields

3008
03:39:34,080 --> 03:39:36,320
and start

3009
03:39:36,320 --> 03:39:51,720
to name.

3010
03:39:51,720 --> 03:40:02,080
Let me actually use.

3011
03:40:02,080 --> 03:40:02,560
Okay.

3012
03:40:03,000 --> 03:40:08,560
So we have a constructor,
initialize these fields

3013
03:40:09,840 --> 03:40:12,560
and then we have to

3014
03:40:12,560 --> 03:40:16,560
calculate the average grade.

3015
03:40:16,560 --> 03:40:20,640
So public record

3016
03:40:22,040 --> 03:40:22,800
for the

3017
03:40:23,680 --> 03:40:25,320
average

3018
03:40:26,360 --> 03:40:30,240
grade.

3019
03:40:30,240 --> 03:40:35,640
Okay, so how do we calculate the average?

3020
03:40:35,640 --> 03:40:37,720
We calculate the average

3021
03:40:38,880 --> 03:40:41,640
by first adding these numbers

3022
03:40:50,600 --> 03:40:53,600
and then dividing the eight by three

3023
03:40:57,000 --> 03:40:57,840
zeros.

3024
03:40:57,840 --> 03:40:59,960
Different names for your

3025
03:41:01,200 --> 03:41:04,400
local and instance variables.

3026
03:41:04,480 --> 03:41:06,240
Y and

3027
03:41:15,240 --> 03:41:16,240
it's in the tasks

3028
03:41:20,160 --> 03:41:23,000
that's just ordering for five different
with different marks

3029
03:41:23,160 --> 03:41:29,320
will around should print an average
mark of each student.

3030
03:41:29,320 --> 03:41:35,760
It will be in the main method.

3031
03:41:35,760 --> 03:41:38,760
But where is this requirement
that I should use different names?

3032
03:41:40,600 --> 03:41:43,440
Pick what you share

3033
03:41:43,760 --> 03:41:44,680
is an alternative.

3034
03:41:44,680 --> 03:42:01,520
Second task.

3035
03:42:01,520 --> 03:42:03,520
Okay. Of the above.

3036
03:42:04,440 --> 03:42:05,680
Sorry Mr..

3037
03:42:05,680 --> 03:42:08,680
So I am not using

3038
03:42:10,200 --> 03:42:12,400
so in here

3039
03:42:12,680 --> 03:42:16,280
I am using the same names

3040
03:42:17,560 --> 03:42:21,120
as the name my class.

3041
03:42:21,120 --> 03:42:21,880
Okay.

3042
03:42:21,960 --> 03:42:24,320
And because I created this using the

3043
03:42:25,480 --> 03:42:28,640
eclipse feature next why it uses

3044
03:42:31,640 --> 03:42:34,120
the same names as the name of the class.

3045
03:42:34,120 --> 03:42:34,720
Okay, so.

3046
03:42:34,720 --> 03:42:38,960
But you guys have already learned
about the this keyword right?

3047
03:42:38,960 --> 03:42:43,840
So it's it's fine even if the names are
same all you guys want me to do.

3048
03:42:44,480 --> 03:42:45,800
You guys want me to condemn

3049
03:42:47,520 --> 03:42:48,320
you? You understand

3050
03:42:48,320 --> 03:42:55,000
this code, right?

3051
03:42:55,000 --> 03:42:57,200
And by the way, this is the best

3052
03:42:57,200 --> 03:43:00,800
this is the recommended approach
that this is the best practice.

3053
03:43:00,800 --> 03:43:02,880
You should not use different names.

3054
03:43:02,880 --> 03:43:05,400
You should use the same names,

3055
03:43:05,400 --> 03:43:07,560
and you should use this keyword

3056
03:43:09,480 --> 03:43:10,080
selected.

3057
03:43:10,080 --> 03:43:12,360
This is the task to

3058
03:43:14,240 --> 03:43:16,360
do it best.

3059
03:43:16,400 --> 03:43:21,960
So class maybe need to delete note
in the task or no, I actually

3060
03:43:21,960 --> 03:43:25,080
the task was supposed to be solved

3061
03:43:25,080 --> 03:43:31,040
before you guys know about this keyword,
but I shared all the task

3062
03:43:31,440 --> 03:43:34,640
all together
and that's why this notice, dear?

3063
03:43:35,200 --> 03:43:38,880
So that you guys don't get any errors

3064
03:43:41,040 --> 03:44:02,520
So how many of you have solved

3065
03:44:02,520 --> 03:44:14,640
more than two questions?

3066
03:44:14,640 --> 03:44:15,600
No. One

3067
03:44:17,160 --> 03:44:18,920
are to

3068
03:44:21,360 --> 03:44:23,440
only two

3069
03:44:26,440 --> 03:44:32,280
working on food,

3070
03:44:32,280 --> 03:44:35,520
so I will not so
solve the remaining questions

3071
03:44:36,720 --> 03:44:40,560
and those will be your homework first.

3072
03:44:40,560 --> 03:44:43,440
I want you to try it on your own

3073
03:44:44,040 --> 03:44:47,960
and then I will show you the structure
for the remaining questions.

3074
03:44:47,960 --> 03:44:57,680
Okay, so I say

3075
03:44:58,760 --> 03:45:00,480
ask to

3076
03:45:03,600 --> 03:45:05,320
task two

3077
03:45:05,760 --> 03:45:08,160
Foreign language Task one equal to

3078
03:45:11,120 --> 03:45:14,320
task two.

3079
03:45:14,320 --> 03:45:16,600
And in here I pass

3080
03:45:19,400 --> 03:45:20,880
and see

3081
03:45:22,680 --> 03:45:24,960
and 98

3082
03:45:26,360 --> 03:45:29,240
define 97

3083
03:45:35,400 --> 03:45:39,320
and fast learning about

3084
03:45:40,920 --> 03:45:41,480
being

3085
03:45:48,960 --> 03:45:51,360
okay so averages 96.6.

3086
03:45:53,040 --> 03:45:57,360
Then I can do this like this so I know

3087
03:45:58,560 --> 03:46:00,280
how to

3088
03:46:05,840 --> 03:46:09,640
and then I say well

3089
03:46:13,840 --> 03:46:16,920
and you know I

3090
03:46:17,800 --> 03:46:20,800
monitor for not

3091
03:46:20,800 --> 03:46:22,840
doing that so I can do that

3092
03:46:22,840 --> 03:46:25,800
in one single line as a

3093
03:46:28,880 --> 03:46:31,400
so I get the image like this.

3094
03:46:31,960 --> 03:46:58,920
Are there any questions from this task?

3095
03:46:58,920 --> 03:47:01,200
Only one confirmation.

3096
03:47:01,200 --> 03:47:03,560
Are you guys asleep

3097
03:47:05,320 --> 03:47:07,440
or tired

3098
03:47:07,560 --> 03:47:12,880
Because it's a five hour
class, All good looking LG.

3099
03:47:14,400 --> 03:47:14,880
I got

3100
03:47:14,880 --> 03:47:18,280
confused both Task one and task to date.

3101
03:47:18,360 --> 03:47:21,840
Maria When went in name of the student

3102
03:47:22,200 --> 03:47:25,680
as but so Maryam, you are audio
still confused or is it better now

3103
03:47:26,640 --> 03:47:29,560
try to catch you I mean in line

3104
03:47:29,600 --> 03:47:35,280
it with this line you on in here

3105
03:47:38,360 --> 03:47:39,840
I am just

3106
03:47:40,440 --> 03:47:43,840
creating an object
and I am calling the constructor

3107
03:47:44,080 --> 03:47:47,040
passing the parameters,
the arguments in here.

3108
03:47:47,480 --> 03:47:52,600
That's what I am doing.

3109
03:47:52,600 --> 03:47:55,560
I put task to task to, okay, all

3110
03:47:56,800 --> 03:47:58,240
this is what is confusing you.

3111
03:47:58,240 --> 03:48:00,000
You can name it anything.

3112
03:48:00,000 --> 03:48:03,200
It just a name of a variable you can name

3113
03:48:04,680 --> 03:48:15,160
no difference.

3114
03:48:15,160 --> 03:48:15,800
Okay.

3115
03:48:17,920 --> 03:48:19,320
What is this obsession?

3116
03:48:19,320 --> 03:48:21,040
Compulsive disorder.

3117
03:48:21,040 --> 03:48:23,280
I don't know what it is called. Not print.

3118
03:48:23,320 --> 03:48:27,360
A grade can replace the S out

3119
03:48:29,400 --> 03:48:33,760
or to print a big to replace the S out.

3120
03:48:34,800 --> 03:48:36,880
All right,

3121
03:48:37,320 --> 03:48:40,240
so I am
in here and I am calling this method,

3122
03:48:40,560 --> 03:48:44,040
and this method is called
This line will be executed next.

3123
03:48:44,040 --> 03:48:46,320
What is happening on line 11?

3124
03:48:46,320 --> 03:48:55,160
What do you mean by replace?

3125
03:48:55,160 --> 03:48:59,800
So I am simply calling a method in here.

3126
03:48:59,800 --> 03:49:00,520
Okay.

3127
03:49:02,400 --> 03:49:03,000
All right.

3128
03:49:03,000 --> 03:49:06,000
So let me

3129
03:49:06,000 --> 03:49:08,880
let me walk you through the slides next.

3130
03:49:08,880 --> 03:49:16,320
Let's see if we are missing something.

3131
03:49:16,320 --> 03:49:22,320
I'm self deconstruct.

3132
03:49:22,320 --> 03:49:26,280
You can call it whatever you want
or it should be specific method.

3133
03:49:26,400 --> 03:49:28,200
No, it can be any method.

3134
03:49:28,200 --> 03:49:36,800
It can be any mental.

3135
03:49:36,800 --> 03:49:41,600
So constructor will be called

3136
03:49:42,720 --> 03:49:44,600
automatically.

3137
03:49:44,600 --> 03:49:47,640
Welcome when the object is created.

3138
03:49:47,720 --> 03:49:48,120
Okay.

3139
03:49:48,120 --> 03:49:51,080
So is the part of object creation process

3140
03:49:53,320 --> 03:49:54,360
constructor

3141
03:49:54,360 --> 03:49:57,800
should not return any value even void.

3142
03:49:57,800 --> 03:50:01,760
So as with the methods,
sometimes we write in page,

3143
03:50:02,080 --> 03:50:05,200
sometimes override write,
sometimes we use void.

3144
03:50:05,840 --> 03:50:09,200
There is no such thing
for the constructor.

3145
03:50:09,720 --> 03:50:11,040
They don't even have void

3146
03:50:12,160 --> 03:50:14,200
because basic aim is

3147
03:50:14,200 --> 03:50:17,200
to place the value in the object.

3148
03:50:18,120 --> 03:50:21,120
If we write the return type
for the constructor,

3149
03:50:21,120 --> 03:50:25,320
then that constructor will be treated
as ordinary method.

3150
03:50:25,560 --> 03:50:26,160
Okay.

3151
03:50:26,840 --> 03:50:30,960
For one of the task
that says to create a static constructor.

3152
03:50:31,080 --> 03:50:34,320
So yes to me you can not do that. It is.

3153
03:50:34,400 --> 03:50:37,000
I put that task just to

3154
03:50:38,480 --> 03:50:42,600
and just so that you guys know
that we cannot have a static constructor.

3155
03:50:42,600 --> 03:50:49,240
Can you guys tell me why
we can not have a static constructor?

3156
03:50:49,240 --> 03:50:51,720
Can you. Can you guys explain the logic?

3157
03:50:52,960 --> 03:50:54,680
New guys already know the answer.

3158
03:50:54,680 --> 03:50:56,440
Think about this static matter.

3159
03:50:56,440 --> 03:51:10,400
What is the limitation of static method.

3160
03:51:10,400 --> 03:51:12,120
Static is immutable.

3161
03:51:12,120 --> 03:51:16,440
No accessibility.

3162
03:51:16,760 --> 03:51:20,400
Can I access instance fields inside

3163
03:51:20,400 --> 03:51:42,360
a static metabolic constructor? No.

3164
03:51:42,760 --> 03:51:46,000
My question is can I access instance

3165
03:51:47,400 --> 03:51:49,040
inside a method

3166
03:51:49,040 --> 03:52:02,560
or a constructor?

3167
03:52:02,560 --> 03:52:04,400
No, we cannot do that.

3168
03:52:04,400 --> 03:52:07,480
We cannot access instance fields

3169
03:52:07,760 --> 03:52:12,600
because for each object
they can be having different values.

3170
03:52:13,080 --> 03:52:16,080
But static means something common

3171
03:52:16,080 --> 03:52:19,360
for all the objects if we cannot exit.

3172
03:52:19,440 --> 03:52:21,520
And what is the purpose
of constructor guys

3173
03:52:28,200 --> 03:52:29,280
to initialize

3174
03:52:29,280 --> 03:52:32,240
to build the object,
to construct the object.

3175
03:52:32,640 --> 03:52:36,040
Now, if constructor is unable
to access the fields,

3176
03:52:36,360 --> 03:52:38,640
then how can it initialize
the field? Right?

3177
03:52:39,000 --> 03:52:41,160
The whole purpose of constructor is gone.

3178
03:52:41,720 --> 03:52:44,560
If we are having a static constructor.

3179
03:52:44,760 --> 03:52:47,400
All right. That's why it is not allowed.

3180
03:52:48,120 --> 03:52:51,320
How many of you have understood this point

3181
03:52:51,320 --> 03:52:55,320
that having a constructor
is something very logical

3182
03:52:55,320 --> 03:53:14,240
and this should not be allowed?

3183
03:53:14,240 --> 03:53:20,320
And if we cannot access the fields,
how can we initialize that part

3184
03:53:20,560 --> 03:53:23,320
and if we cannot initialize the fields,

3185
03:53:24,000 --> 03:53:26,400
then what is the point of constructor?

3186
03:53:26,400 --> 03:53:29,600
Constructors cannot, static constructor

3187
03:53:29,600 --> 03:53:32,280
cannot access instance fields.

3188
03:53:32,920 --> 03:53:37,240
If it cannot access the instance field,
it cannot initialize them.

3189
03:53:37,640 --> 03:53:40,240
And if a constructor can not initialize

3190
03:53:40,680 --> 03:53:44,040
the fields,
the whole purpose of constructor is gone.

3191
03:53:44,040 --> 03:53:44,320
Right?

3192
03:53:44,320 --> 03:53:48,240
This is why we are learning constructor
so that we can initialize the fields

3193
03:53:48,760 --> 03:53:51,240
so that the reason static is not allowed

3194
03:53:51,240 --> 03:54:03,480
with the constructor.

3195
03:54:03,480 --> 03:54:05,760
But we can use static in a matter.

3196
03:54:05,760 --> 03:54:06,600
Is that correct?

3197
03:54:06,600 --> 03:54:10,440
Yes. With the method
we can use the static or the limitations.

3198
03:54:10,440 --> 03:54:12,040
They are still there.

3199
03:54:12,040 --> 03:54:15,280
If you use this as a static
with the method, you cannot access

3200
03:54:15,280 --> 03:54:22,440
the instance fields inside that method.

3201
03:54:22,440 --> 03:54:26,200
If one want to use static
then must use method,

3202
03:54:26,200 --> 03:54:30,920
not constructors. Yes.

3203
03:54:30,920 --> 03:54:31,440
All right.

3204
03:54:31,440 --> 03:54:34,480
So this is how I understand it.

3205
03:54:34,480 --> 03:54:35,760
Tell me if I am wrong.

3206
03:54:35,760 --> 03:54:41,640
Static needs to have a fixed data
that is shared by all class.

3207
03:54:42,240 --> 03:54:44,320
The constructor resistance of the data.

3208
03:54:44,320 --> 03:54:49,120
Hence constructor cannot be static.

3209
03:54:49,120 --> 03:54:51,920
No Mohammad, this needs a correction.

3210
03:54:52,120 --> 03:54:55,360
First the keyword fixed.

3211
03:54:55,360 --> 03:54:59,800
You should not use that keyword with the
for the static keyword

3212
03:55:00,720 --> 03:55:03,720
static variables
they can have different values.

3213
03:55:04,440 --> 03:55:06,400
It's the only thing.

3214
03:55:06,400 --> 03:55:07,560
The only thing that

3215
03:55:09,360 --> 03:55:09,680
will.

3216
03:55:09,680 --> 03:55:13,160
And the reason why we use static
is because

3217
03:55:14,000 --> 03:55:18,480
it is declared inside a memory area
and that memory area

3218
03:55:19,080 --> 03:55:21,480
is called static and the property

3219
03:55:21,480 --> 03:55:26,440
of that memory area
is that the variables that you declare

3220
03:55:26,440 --> 03:55:30,280
in that memory area,
they are shared across all the classes.

3221
03:55:31,560 --> 03:55:34,040
So instance fields,

3222
03:55:34,560 --> 03:55:37,320
they can have a different value

3223
03:55:37,320 --> 03:55:40,200
for each instance that you create.

3224
03:55:40,840 --> 03:55:44,160
But static fields will always be

3225
03:55:44,160 --> 03:55:47,440
having same value for all objects.

3226
03:55:48,320 --> 03:55:50,760
So that's why we can not use

3227
03:55:50,760 --> 03:55:53,880
the constructors,

3228
03:55:54,120 --> 03:55:57,360
the static constructors, the,

3229
03:55:57,360 --> 03:56:02,440
the instance fields make all the static
mean something common,

3230
03:56:02,440 --> 03:56:07,360
while instance means something different
for each instance.

3231
03:56:07,720 --> 03:56:10,920
Okay, makes sense to me after
and what line things

3232
03:56:13,000 --> 03:56:16,920
3.14 mind blown

3233
03:56:16,960 --> 03:56:18,280
because I constructed

3234
03:56:18,280 --> 03:56:21,840
a reusable block of code
and static cannot be local.

3235
03:56:23,560 --> 03:56:24,320
Yes, this

3236
03:56:24,320 --> 03:56:27,480
this statement is true
that the static cannot be local.

3237
03:56:27,480 --> 03:56:30,000
And this statement is also true
that the constructor

3238
03:56:30,000 --> 03:56:35,680
is a reusable block of code,
so it will only work in the class.

3239
03:56:35,720 --> 03:56:38,760
The main name of a constructed
is to initialize in the class.

3240
03:56:38,840 --> 03:56:40,840
Static is common denominator,

3241
03:56:42,400 --> 03:56:43,680
but it's got to be changed.

3242
03:56:43,680 --> 03:56:47,000
No static can change

3243
03:56:47,920 --> 03:56:49,520
while we use constructor

3244
03:56:49,520 --> 03:56:53,600
in different classes.

3245
03:56:53,600 --> 03:56:54,160
All right.

3246
03:56:54,160 --> 03:56:57,360
So constructor definitions

3247
03:56:57,360 --> 03:56:59,480
should not be static

3248
03:57:01,200 --> 03:57:02,520
because

3249
03:57:04,200 --> 03:57:07,640
will be called each and every time.

3250
03:57:08,360 --> 03:57:12,480
Whenever an object is created okay.

3251
03:57:13,040 --> 03:57:16,920
So for each object
and they will be taking the data

3252
03:57:17,160 --> 03:57:21,360
and initializing
the figures for that object.

3253
03:57:21,360 --> 03:57:25,920
But if you make it static,
that means all the objects will be

3254
03:57:25,920 --> 03:57:28,960
give and will be having same values.

3255
03:57:28,960 --> 03:57:31,080
Right? We don't want to do that.

3256
03:57:31,080 --> 03:57:34,160
Each object has this flexibility
that it can have

3257
03:57:34,160 --> 03:57:37,320
its own values.

3258
03:57:38,720 --> 03:57:41,120
Yes, for car one car to call

3259
03:57:41,120 --> 03:57:44,960
one and car to construct,

3260
03:57:44,960 --> 03:57:48,000
but it should not be private provided

3261
03:57:48,000 --> 03:57:52,040
an object of one class is created
in another class.

3262
03:57:52,320 --> 03:57:55,760
If you are planning to create the object

3263
03:57:56,680 --> 03:58:00,440
of one class inside the other class,

3264
03:58:01,480 --> 03:58:04,320
you should not make your constructors
private.

3265
03:58:04,960 --> 03:58:07,560
What will happen guys,
if I make the constructor private

3266
03:58:07,560 --> 03:58:11,480
and if I try to create the object
of that class in a separate file,

3267
03:58:11,720 --> 03:58:19,160
in a different class,
I would not be able to access it.

3268
03:58:19,200 --> 03:58:20,120
Right?

3269
03:58:20,120 --> 03:58:24,200
If I cannot access it,
I can not create the object from it.

3270
03:58:24,200 --> 03:58:24,600
Right.

3271
03:58:24,600 --> 03:58:28,280
So that's why
I should not be making it private.

3272
03:58:28,800 --> 03:58:32,240
What if you think that only
you will only be

3273
03:58:32,240 --> 03:58:35,440
creating the objects
inside the same class?

3274
03:58:35,640 --> 03:58:40,560
Just maybe then you want to have
the constructor as private.

3275
03:58:40,560 --> 03:58:43,120
Yes. It defeats the
whole point of constructor.

3276
03:58:44,400 --> 03:58:46,120
Constructors

3277
03:58:46,120 --> 03:58:49,920
will not be inherited
from one class to another class.

3278
03:58:49,920 --> 03:58:53,160
This point is related to the next class,
so let's leave

3279
03:58:53,160 --> 03:58:57,280
this now.

3280
03:58:57,280 --> 03:59:00,720
In this slide
I have mentioned some differences

3281
03:59:00,720 --> 03:59:04,920
between constructor and method Method.

3282
03:59:04,920 --> 03:59:09,600
Can be
any method can have any user defined name.

3283
03:59:09,600 --> 03:59:11,760
Right. I can call my method method one.

3284
03:59:11,760 --> 03:59:12,280
Method two.

3285
03:59:12,280 --> 03:59:14,960
Method three but constructor

3286
03:59:16,080 --> 03:59:19,280
must be having a same name

3287
03:59:19,280 --> 03:59:23,400
as the name of the class.

3288
03:59:23,400 --> 03:59:28,080
Method should have returned type
like void, integer or string.

3289
03:59:29,800 --> 03:59:33,280
It should not have any return type
construct.

3290
03:59:33,280 --> 03:59:36,760
They should not have any return type.

3291
03:59:36,760 --> 03:59:39,720
Method should be called explicitly

3292
03:59:39,720 --> 03:59:44,000
either with object, preference or class.

3293
03:59:44,000 --> 03:59:48,560
So if I want the code
that is inside a method,

3294
03:59:48,600 --> 03:59:52,560
if I want that code to be executed,
I must call that method

3295
03:59:52,800 --> 03:59:55,280
explicitly by writing object name

3296
03:59:56,160 --> 03:59:58,320
not then method name.

3297
03:59:58,320 --> 04:00:02,800
If it is a static method,
I write the name of the class and doc

3298
04:00:02,880 --> 04:00:06,840
and the name of the method,
but for the constructors

3299
04:00:07,560 --> 04:00:11,520
it will be called automatically
when object is created.

3300
04:00:11,680 --> 04:00:17,240
This is part of object affiliation.

3301
04:00:17,240 --> 04:00:20,640
Method is not provided by compiler.

3302
04:00:20,640 --> 04:00:24,840
In any case you want to write,
you want to have a method you created.

3303
04:00:25,200 --> 04:00:30,920
If no compiler is not going to provide you
a method,

3304
04:00:31,800 --> 04:00:35,160
but Java compiler provides

3305
04:00:35,160 --> 04:00:37,360
a default constructor.

3306
04:00:38,160 --> 04:00:42,520
If we don't write
one constructor on our own

3307
04:00:44,280 --> 04:00:45,720
method, we can

3308
04:00:45,720 --> 04:00:51,080
non access modifier
such as static final abstract.

3309
04:00:51,720 --> 04:00:53,880
But we cannot do that
with the constructors.

3310
04:00:54,320 --> 04:00:55,320
Okay.

3311
04:00:55,320 --> 04:00:59,400
We cannot have a static keyword,
we cannot have a final and abstract.

3312
04:00:59,400 --> 04:01:02,240
You guys will learn about this later on,
but we cannot have this.

3313
04:01:03,720 --> 04:01:05,040
Yes. Non de format.

3314
04:01:05,040 --> 04:01:09,600
There.

3315
04:01:09,600 --> 04:01:14,720
So in simple word, when we use method
and when we use constructor

3316
04:01:14,720 --> 04:01:15,840
if it is possible.

3317
04:01:15,840 --> 04:01:20,640
Real life example elects
to initialize the fields of your class.

3318
04:01:20,880 --> 04:01:22,920
You should use it constructive

3319
04:01:23,960 --> 04:01:28,200
to write a piece of logic inside
your class.

3320
04:01:28,200 --> 04:01:30,560
You should write that there is a clear

3321
04:01:31,800 --> 04:01:33,640
constructor inside the constructor

3322
04:01:33,640 --> 04:01:37,640
you should only initialize the field
for everything.

3323
04:01:37,640 --> 04:01:40,040
You should create a method

3324
04:01:41,600 --> 04:01:45,240
and it is all sorted and constructors
are used to write the logic.

3325
04:01:45,240 --> 04:01:45,960
These logics.

3326
04:01:45,960 --> 04:01:50,280
Are you executed during the object
creation?

3327
04:01:50,280 --> 04:01:53,920
Okay, so whatever you will be putting
inside the constructor,

3328
04:01:54,360 --> 04:01:57,720
it will be executed
during the distribution method.

3329
04:01:57,720 --> 04:01:59,520
Also used to write the logic.

3330
04:01:59,520 --> 04:02:02,920
This logic are executed
when we call those matters.

3331
04:02:03,720 --> 04:02:09,280
They are not automatic like constructors.

3332
04:02:09,280 --> 04:02:14,000
Then we learned about the discovered.

3333
04:02:14,000 --> 04:02:14,920
Now this keyword

3334
04:02:18,000 --> 04:02:20,720
is a keyword in java

3335
04:02:20,720 --> 04:02:23,680
that refers to the current object.

3336
04:02:23,880 --> 04:02:25,800
Okay.

3337
04:02:25,800 --> 04:02:29,880
And this is used to access
current class instance members.

3338
04:02:30,640 --> 04:02:32,080
I can

3339
04:02:33,000 --> 04:02:37,160
call the constructor offer
using this keyword.

3340
04:02:37,320 --> 04:02:39,520
By specifying those parentheses,

3341
04:02:40,480 --> 04:02:43,200
I can access the instance fields

3342
04:02:43,440 --> 04:02:47,000
by writing this dot the name of the field,

3343
04:02:48,000 --> 04:02:50,680
and I can also call the method
from database

3344
04:02:53,240 --> 04:02:55,080
with variables I can use.

3345
04:02:55,080 --> 04:02:58,560
This can be used to refer
current class instance variables.

3346
04:02:58,960 --> 04:03:01,720
So let's say
if you are having a local variable

3347
04:03:02,720 --> 04:03:06,800
and an instance variable, and both of them
they have the same names,

3348
04:03:07,880 --> 04:03:11,000
you can distinguish
these two variables inside

3349
04:03:11,040 --> 04:03:16,000
a method or, inside a constructor
by specifying this keyword.

3350
04:03:16,440 --> 04:03:17,960
Okay, if you write this keyword in

3351
04:03:17,960 --> 04:03:21,720
Java knows that you are trying
to refer to an instance field

3352
04:03:24,080 --> 04:03:24,960
with the methods.

3353
04:03:24,960 --> 04:03:27,600
This can be
used to invoke the current class method.

3354
04:03:27,600 --> 04:03:28,080
Okay.

3355
04:03:29,240 --> 04:03:32,520
It does not make sense or it's kind of

3356
04:03:33,480 --> 04:03:36,240
not that important because even if you

3357
04:03:37,720 --> 04:03:39,120
do not

3358
04:03:39,720 --> 04:03:43,040
specify the this keyword,
you can still call the class meters

3359
04:03:43,320 --> 04:03:46,960
because there is no concept
of local methods or instance methods

3360
04:03:46,960 --> 04:03:48,480
or something like that.

3361
04:03:48,480 --> 04:03:48,880
Okay.

3362
04:03:48,960 --> 04:03:52,320
So it does not matter lot in this case

3363
04:03:55,640 --> 04:03:56,920
with constructor,

3364
04:03:56,920 --> 04:04:00,760
you specify this,
then you passed the parameters

3365
04:04:01,320 --> 04:04:06,240
and then Java searches
for best match inside your class.

3366
04:04:06,800 --> 04:04:12,440
If you have a constructor with those
parameters, If there is a constructor,

3367
04:04:12,560 --> 04:04:19,080
that constructor will be called,
this is just an example.

3368
04:04:19,080 --> 04:04:20,760
So I have this foreign class.

3369
04:04:20,760 --> 04:04:22,880
It has a rule number named V

3370
04:04:23,640 --> 04:04:30,000
and now I am having in local variables
the role number, name and fee.

3371
04:04:31,200 --> 04:04:33,520
So now if I want to distinguish

3372
04:04:33,520 --> 04:04:36,320
an instance variable, I write this keeper

3373
04:04:36,840 --> 04:04:37,720
in you

3374
04:04:44,160 --> 04:04:48,320
and yeah,

3375
04:04:48,560 --> 04:04:52,080
this is the example of this keyword.

3376
04:04:52,080 --> 04:04:56,680
When I use this keyword
to call the constructor of a class.

3377
04:04:56,680 --> 04:05:00,840
So I write this, then parentheses
and depending

3378
04:05:00,840 --> 04:05:05,440
upon the number of arguments
and type of arguments

3379
04:05:07,200 --> 04:05:09,440
and appropriate constructor,

3380
04:05:09,440 --> 04:05:12,640
if it exists,
it will be called from your class.

3381
04:05:12,640 --> 04:05:16,080
If it does not exist,
you will be getting edit

3382
04:05:21,360 --> 04:05:24,800
So this used to be the variables
and methods.

3383
04:05:25,920 --> 04:05:30,320
This with parentheses
is used with the constructors.

3384
04:05:30,320 --> 04:05:34,320
Only one of the uses is differentiating

3385
04:05:34,320 --> 04:05:37,680
between local and instance variables.

3386
04:05:37,680 --> 04:05:39,160
A method call

3387
04:05:39,840 --> 04:05:41,400
used to call one constructor

3388
04:05:41,400 --> 04:05:45,720
from another belonging to the same class.

3389
04:05:45,720 --> 04:05:48,280
These are the tasks

3390
04:05:48,280 --> 04:05:49,720
and super.

3391
04:05:49,720 --> 04:05:51,360
So on Tuesday

3392
04:05:53,880 --> 04:05:55,080
we will

3393
04:05:55,080 --> 04:06:01,680
be starting with the inheritance.

3394
04:06:01,680 --> 04:06:03,960
So I will share with you.

3395
04:06:03,960 --> 04:06:06,560
I will share this slide

3396
04:06:06,560 --> 04:06:08,720
right after this class

3397
04:06:08,720 --> 04:06:11,040
and I will more wrappers

3398
04:06:13,720 --> 04:06:16,400
then we have super easy peasy

3399
04:06:17,280 --> 04:06:19,400
method of uploading, easy peasy

3400
04:06:22,000 --> 04:06:24,000
method over to our being easy peasy

3401
04:06:29,360 --> 04:06:30,320
final keyword,

3402
04:06:30,320 --> 04:06:33,320
easy peasy or yes, I will be sharing

3403
04:06:33,320 --> 04:06:35,640
the videos of intelligent as

3404
04:06:38,040 --> 04:06:38,760
it's not easy

3405
04:06:38,760 --> 04:06:45,120
peasy for you.

3406
04:06:45,120 --> 04:06:48,480
So there is one more class
that is a little hard,

3407
04:06:49,680 --> 04:06:51,840
but other than that class,

3408
04:06:52,360 --> 04:06:56,040
most of the time
it will be some kinds of keywords

3409
04:06:56,800 --> 04:07:00,360
and the functionality of those keywords
like we have learned about

3410
04:07:00,680 --> 04:07:03,200
disclaimer today, or there will be some

3411
04:07:04,840 --> 04:07:07,920
logical concepts that will help

3412
04:07:07,920 --> 04:07:10,360
you write about record

3413
04:07:14,280 --> 04:07:16,560
also in person

3414
04:07:16,560 --> 04:07:18,200
you will be.

3415
04:07:19,080 --> 04:07:20,720
I thought it would be easy peasy.

3416
04:07:20,720 --> 04:07:22,640
So are the constructors not easy.

3417
04:07:22,640 --> 04:07:25,840
We need to work on theory side

3418
04:07:28,560 --> 04:07:31,200
like super and they are not easy peasy.

3419
04:07:32,200 --> 04:07:32,680
Okay.

3420
04:07:32,960 --> 04:07:35,640
Not very. You guys will learn about them.

3421
04:07:35,640 --> 04:07:40,280
The companies if they will be paying 8098,
they will make you work.

3422
04:07:40,320 --> 04:07:41,040
Don't worry.

3423
04:07:41,040 --> 04:07:44,240
They they know how to how to extract work

3424
04:07:44,240 --> 04:07:48,040
out of you.

3425
04:07:48,040 --> 04:07:59,560
Unfortunately,

3426
04:07:59,560 --> 04:08:01,600
all time you

3427
04:08:02,640 --> 04:08:05,080
please both to the notes.

3428
04:08:05,080 --> 04:08:05,480
Okay.

3429
04:08:05,480 --> 04:08:07,800
I will share the notes and the record.

3430
04:08:08,520 --> 04:08:11,000
And what is the highest salary

3431
04:08:11,000 --> 04:08:13,560
any student caught out of school.

3432
04:08:14,400 --> 04:08:16,880
So one of the students here, he

3433
04:08:16,880 --> 04:08:20,040
or she bought, I think around 150.

3434
04:08:20,040 --> 04:08:20,560
Okay.

3435
04:08:21,200 --> 04:08:23,320
How many? $76.

3436
04:08:23,320 --> 04:08:26,040
But are
then you guys translated that to random

3437
04:08:27,720 --> 04:08:29,080
$76 per hour?

3438
04:08:29,080 --> 04:08:32,920
How much is in front of

3439
04:08:40,240 --> 04:08:44,240
us from batch 8.3?

3440
04:08:44,280 --> 04:08:47,200
So totally depends on your on your luck.

3441
04:08:47,200 --> 04:08:49,680
And even if for the first time,
even if you guys

3442
04:08:50,480 --> 04:08:54,720
don't get 150, what you can do,

3443
04:08:54,720 --> 04:09:00,040
you can a stock from any job like 80 or 90

3444
04:09:00,600 --> 04:09:03,480
and then you can keep
on applying on other jobs

3445
04:09:03,480 --> 04:09:06,480
and once you have a good job,
you can switch anytime.

3446
04:09:06,600 --> 04:09:06,960
Okay.

3447
04:09:06,960 --> 04:09:10,440
There is no one who can restrict you
from switching your job.

3448
04:09:11,080 --> 04:09:14,360
So that way
you guys will also be getting paid.

3449
04:09:14,360 --> 04:09:14,640
Would

3450
04:09:19,480 --> 04:09:21,480
like what, 90

3451
04:09:24,080 --> 04:09:26,920
is. But obviously
if someone is paying you 150,

3452
04:09:27,120 --> 04:09:30,080
they will also be expecting
more work from you.

3453
04:09:30,280 --> 04:09:34,280
So depends how much,
how much piece you want

3454
04:09:34,280 --> 04:09:35,880
in your life

3455
04:09:37,320 --> 04:09:39,920
and you can switch any time
if it is not contract job.

3456
04:09:39,920 --> 04:09:40,280
Right.

3457
04:09:40,280 --> 04:09:43,040
I think you can even switch
if you have a contract.

3458
04:09:43,040 --> 04:09:46,040
I mean, don't sign such contracts
that you cannot leave

3459
04:09:46,040 --> 04:09:49,120
a job is never recommended, never do that.

3460
04:09:49,120 --> 04:10:03,520
Even if they are paying you on 50.

3461
04:10:03,520 --> 04:10:04,600
No, no, Katrina.

3462
04:10:04,600 --> 04:10:07,120
And don't tell this to control
to the companies.

3463
04:10:07,640 --> 04:10:09,480
I am ready to work for free.

3464
04:10:09,480 --> 04:10:13,360
If they know, believe me, they will never
be paying you any any money.

3465
04:10:13,680 --> 04:10:17,840
If they know and they can,
they can check it out from your behavior.

3466
04:10:17,840 --> 04:10:22,120
I mean, it's you who tells your
your managers

3467
04:10:22,120 --> 04:10:24,800
how much work they can get on that.

3468
04:10:24,800 --> 04:10:27,800
And from you right.

3469
04:10:27,800 --> 04:10:30,000
Imagine how many calls you can bias.

3470
04:10:30,080 --> 04:10:31,200
That will be 158.

3471
04:10:32,840 --> 04:10:34,760
I will have a village full of cows.

3472
04:10:34,760 --> 04:10:36,960
You will get rate from you. The manager.

3473
04:10:36,960 --> 04:10:38,160
I am down to anything.

3474
04:10:38,160 --> 04:10:40,920
Replace that some experience.

3475
04:10:40,920 --> 04:10:41,960
It's good, guys.

3476
04:10:41,960 --> 04:10:44,640
It's good.
But don't tell it. Don't tell it.

3477
04:10:44,640 --> 04:10:45,080
Okay.

3478
04:10:45,080 --> 04:10:49,240
It's good to start for,
but don't tell it to the companies.

3479
04:10:49,560 --> 04:10:50,360
Okay?

3480
04:10:50,720 --> 04:10:54,560
Once they know, once they know
that you are a guy who is ready to work

3481
04:10:54,560 --> 04:10:57,320
even for free,
they will never be paying you and

3482
04:10:59,520 --> 04:11:02,760
always know your work.

3483
04:11:02,760 --> 04:11:06,360
Half of one job will be fired for a year

3484
04:11:07,400 --> 04:11:10,760
for 200 K Yeah,
So that they never call you

3485
04:11:10,760 --> 04:11:12,480
back. Lugo

3486
04:11:22,680 --> 04:11:23,600
Yes. That hard.

3487
04:11:23,600 --> 04:11:33,560
You are right. Yes.

3488
04:11:33,560 --> 04:11:34,120
Very simple.

3489
04:11:34,120 --> 04:11:37,520
Guys,
I don't know about your current situation,

3490
04:11:37,560 --> 04:11:40,520
how much, how much you are getting paid.

3491
04:11:40,520 --> 04:11:43,480
How is your life right now? But I can tell

3492
04:11:44,920 --> 04:11:47,160
the students which have

3493
04:11:48,400 --> 04:11:51,880
completed this bootcamp
and they were on schedule,

3494
04:11:51,880 --> 04:11:55,880
they completed all their tasks
and they were on top of everything.

3495
04:11:56,360 --> 04:11:58,560
None of those students is

3496
04:11:59,640 --> 04:12:02,200
is without a job right?

3497
04:12:02,200 --> 04:12:03,440
Almost all of them.

3498
04:12:03,440 --> 04:12:08,400
They are getting paid more than 90
and you guys can.

3499
04:12:08,400 --> 04:12:11,960
So for example, I can literally show you.

3500
04:12:13,920 --> 04:12:16,800
So this is batch nine

3501
04:12:20,840 --> 04:12:23,760
technical jobs for

3502
04:12:24,480 --> 04:12:27,960
and so you guys can read
all these messages.

3503
04:12:28,600 --> 04:12:31,840
The students they are themselves
posting their these messages

3504
04:12:31,840 --> 04:12:34,920
once they get a job.

3505
04:12:34,920 --> 04:12:38,080
All of these congratulations
all of them they are from

3506
04:12:38,080 --> 04:12:50,640
page nine.

3507
04:12:50,640 --> 04:12:51,480
Oh, my God.

3508
04:12:51,480 --> 04:12:53,760
So the original message

3509
04:12:54,880 --> 04:12:57,040
you see, they are also

3510
04:12:57,040 --> 04:12:59,880
telling me, telling about my rappers,

3511
04:13:00,840 --> 04:13:03,240
all assignments,
including rapping for us, the

3512
04:13:06,520 --> 04:13:07,720
AC one,

3513
04:13:07,720 --> 04:13:11,040
two, three, four, five, six, seven,
eight students

3514
04:13:11,120 --> 04:13:15,920
got the job at once
and we are on the free version of Slack.

3515
04:13:15,920 --> 04:13:17,720
So these are the question.

3516
04:13:17,720 --> 04:13:25,080
These are the messages
that we can see in here.

3517
04:13:25,080 --> 04:13:35,720
So just keep on pushing
and it will all be fine.

3518
04:13:35,720 --> 04:13:38,160
When should we expect some girls
Next week.

3519
04:13:38,160 --> 04:13:40,680
Remind me on on Wednesday

3520
04:13:41,160 --> 04:13:44,040
and I will invite them
on on Saturday or Sunday.

3521
04:13:45,320 --> 04:13:47,040
But how about another

3522
04:13:47,040 --> 04:13:51,440
batch or nine was the best.

3523
04:13:51,440 --> 04:13:56,600
If you ask me about the best batch,
I would say A-plus.

3524
04:13:56,600 --> 04:13:58,440
Batch it for me.

3525
04:13:58,440 --> 04:13:59,600
I don't know.

3526
04:13:59,600 --> 04:14:01,800
It's different for different instructors

3527
04:14:02,480 --> 04:14:06,120
because I was able to show them
how to build

3528
04:14:08,720 --> 04:14:09,960
next job applications.

3529
04:14:09,960 --> 04:14:12,360
They were very curious,
They were very interested.

3530
04:14:12,360 --> 04:14:14,040
So they were always after me.

3531
04:14:14,040 --> 04:14:16,040
Hey, girl, can you can you show us this?

3532
04:14:16,040 --> 04:14:18,560
Can you show us this?
We want to learn this.

3533
04:14:18,560 --> 04:14:19,800
We want to do this.

3534
04:14:19,800 --> 04:14:22,720
And some of were ready to be a developer

3535
04:14:22,720 --> 04:14:25,680
B and they build some kind of games
and all that.

3536
04:14:26,040 --> 04:14:29,440
Okay, it's fine.

3537
04:14:29,840 --> 04:14:32,280
As far as you guys are looking for
testing jobs,

3538
04:14:32,800 --> 04:14:36,800
the material is more than enough material
that we are covering during the classes

3539
04:14:39,000 --> 04:14:39,600
as well.

3540
04:14:39,600 --> 04:14:41,280
Some party

3541
04:14:42,720 --> 04:14:44,960
already, it reminded me on on Wednesday

3542
04:14:44,960 --> 04:14:51,120
I and I will invite some girls
from the batch nine.

3543
04:14:51,120 --> 04:14:55,120
What about batch
11 will see after you guys are done

3544
04:14:55,920 --> 04:14:57,400
with Java

3545
04:14:58,760 --> 04:15:00,360
Loco. Thank you. Bye bye.

3546
04:15:00,360 --> 04:15:01,320
Take some rest.

3547
04:15:01,320 --> 04:15:05,480
And don't forget that you guys
should be revising these slides.

3548
04:15:06,200 --> 04:15:08,720
You guys should be revising me. Java

3549
04:15:10,840 --> 04:15:13,000
whereby.
