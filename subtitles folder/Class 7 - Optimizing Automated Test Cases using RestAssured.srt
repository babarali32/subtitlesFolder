1
00:00:42,120 --> 00:00:42,720
She's

2
00:00:51,680 --> 00:00:52,440
an everyone.

3
00:00:52,440 --> 00:01:13,040
Good morning.

4
00:01:14,400 --> 00:01:16,040
I am on or you go.

5
00:01:16,040 --> 00:01:18,440
Hello.

6
00:01:19,200 --> 00:01:21,800
So now then, we are going to start.

7
00:01:22,200 --> 00:01:25,360
First we'll go forward, Recap

8
00:01:26,040 --> 00:01:29,160
what we did in the last two classes.

9
00:01:30,120 --> 00:01:32,280
What we did in the last
two classes is correct.

10
00:01:32,880 --> 00:01:35,960
So let me open this.

11
00:01:35,960 --> 00:01:38,960
Let me go to nodes and open here.

12
00:01:39,840 --> 00:01:44,520
Class number seven.

13
00:01:47,280 --> 00:01:49,400
We should be good enough to get part.

14
00:01:50,400 --> 00:01:51,560
Anyways,

15
00:01:52,200 --> 00:01:54,440
what were the things we did

16
00:01:54,440 --> 00:02:03,160
in the last class?

17
00:02:06,000 --> 00:02:08,680
What was the first topic
we completed in the last class?

18
00:02:08,800 --> 00:02:11,240
What was that?

19
00:02:14,960 --> 00:02:16,960
Three operations from Greg.

20
00:02:16,960 --> 00:02:17,560
Right.

21
00:02:17,560 --> 00:02:20,520
So first
we understood what this Rest assured,

22
00:02:20,520 --> 00:02:23,440
Java does to short and how it worked.

23
00:02:23,800 --> 00:02:24,360
Right.

24
00:02:24,440 --> 00:02:25,440
How it worked.

25
00:02:25,440 --> 00:02:27,920
We understood this part.

26
00:02:28,200 --> 00:02:28,960
Cutting

27
00:02:30,520 --> 00:02:32,040
good. And then.

28
00:02:32,040 --> 00:02:33,840
Then the understood. One more thing.

29
00:02:33,840 --> 00:02:35,520
We had seen this part.

30
00:02:35,520 --> 00:02:39,720
How we can create request
all different operations.

31
00:02:40,080 --> 00:02:44,080
So when we talk about creating
the record in the database,

32
00:02:45,760 --> 00:02:47,160
meaning the record from the

33
00:02:47,160 --> 00:02:51,680
database, updating the record
in the database, right.

34
00:02:52,080 --> 00:02:56,040
These three operations
we provided widget, right?

35
00:02:56,520 --> 00:02:59,600
So then we decided in order what order?

36
00:02:59,600 --> 00:03:04,920
We decided first we created the employee.

37
00:03:05,320 --> 00:03:09,600
After creating the employee visit
with the same employee.

38
00:03:10,400 --> 00:03:14,560
Because it forced what we were doing,
we were creating a one employee

39
00:03:14,760 --> 00:03:19,000
and we were expecting some other employee
updating some other employees.

40
00:03:19,120 --> 00:03:19,720
Right.

41
00:03:19,760 --> 00:03:24,400
So that was not the exact with the actual
way of performing the operation.

42
00:03:25,280 --> 00:03:29,400
Then the gimmick would be approach
where we first created the employee

43
00:03:30,200 --> 00:03:33,240
with took the same employee
which we created,

44
00:03:33,560 --> 00:03:37,640
and then we update the data
against that particular employee.

45
00:03:38,120 --> 00:03:38,880
Right.

46
00:03:38,960 --> 00:03:39,960
How we did it.

47
00:03:39,960 --> 00:03:42,920
We made one variable employee I.D.

48
00:03:42,920 --> 00:03:44,440
instance. Right.

49
00:03:44,440 --> 00:03:47,640
And the same variable
we used in different request.

50
00:03:49,320 --> 00:03:49,760
Right.

51
00:03:50,160 --> 00:03:54,080
And then we retrieved the information
just to cross-check it.

52
00:03:54,080 --> 00:03:58,040
Or even if I updating the details
across this particular user,

53
00:03:58,440 --> 00:04:03,480
whether I'm getting the exact data
or not from the API part.

54
00:04:04,440 --> 00:04:06,960
So to maintain, to maintain

55
00:04:06,960 --> 00:04:11,280
the order of the execution,
we used one particular part.

56
00:04:11,280 --> 00:04:19,800
What is there?

57
00:04:21,920 --> 00:04:22,440
Things.

58
00:04:22,440 --> 00:04:26,080
Remember, we changed the order
of execution by default.

59
00:04:26,080 --> 00:04:28,040
It follows which one

60
00:04:29,440 --> 00:04:32,440
assuming order.

61
00:04:32,440 --> 00:04:35,840
We provided the order.

62
00:04:36,800 --> 00:04:38,760
Yes. Correct.

63
00:04:38,760 --> 00:04:40,600
Fix method order.

64
00:04:40,600 --> 00:04:43,240
So there be use mental disorders

65
00:04:43,880 --> 00:04:47,760
from the unique part, from unit part.

66
00:04:49,200 --> 00:04:49,640
Okay.

67
00:04:50,280 --> 00:04:54,120
So we changed the execution order
because by default it follows.

68
00:04:54,120 --> 00:04:55,320
Talk to what the.

69
00:04:55,320 --> 00:04:58,720
But you don't want that demon
to be executed

70
00:04:58,720 --> 00:05:01,800
in alphabetical order
or in ascending order music.

71
00:05:01,840 --> 00:05:04,080
Right. So we followed this particular one.

72
00:05:04,560 --> 00:05:05,280
You see here,

73
00:05:06,720 --> 00:05:08,640
this one is coming from this.

74
00:05:08,640 --> 00:05:11,760
And this particular part of method order
start ascending.

75
00:05:12,040 --> 00:05:14,520
It comes from my unit. And this option.

76
00:05:15,120 --> 00:05:15,720
Right.

77
00:05:15,720 --> 00:05:21,200
So how we can execute our discuses
using the you need for that.

78
00:05:21,200 --> 00:05:24,480
We have to use this method sort of.

79
00:05:26,280 --> 00:05:28,200
So according to this approach,

80
00:05:28,200 --> 00:05:32,240
what we are doing is to
we are creating the employee.

81
00:05:33,080 --> 00:05:37,000
Then we are retrieving the information
of the particular employee,

82
00:05:37,560 --> 00:05:40,360
then we are updating the same employee.

83
00:05:40,880 --> 00:05:44,160
And after updating again,
we are improving the information

84
00:05:46,200 --> 00:05:47,280
database.

85
00:05:47,320 --> 00:05:49,640
That is the cycle we are following.

86
00:05:49,640 --> 00:05:51,720
Correct?

87
00:05:53,400 --> 00:05:56,200
Is this correct on or to extend

88
00:06:06,560 --> 00:06:09,960
and really push

89
00:06:09,960 --> 00:06:13,040
this code? Yes.

90
00:06:15,160 --> 00:06:17,440
Code is already available in that class

91
00:06:17,440 --> 00:06:31,680
only output.

92
00:06:36,000 --> 00:06:39,080
Now, if I go into the notes again

93
00:06:39,480 --> 00:06:45,120
right here, guys,
we have already discussed one part,

94
00:06:46,320 --> 00:06:47,520
this one.

95
00:06:47,520 --> 00:06:50,880
And just what is the difference
in between these two based

96
00:06:51,040 --> 00:06:53,760
and why we use this part

97
00:06:54,720 --> 00:06:55,200
decent.

98
00:06:55,200 --> 00:06:57,240
But that is why we use this

99
00:06:59,480 --> 00:07:02,560
JSON.

100
00:07:02,560 --> 00:07:05,200
But it is a class.

101
00:07:05,960 --> 00:07:08,880
It is a class side.

102
00:07:08,880 --> 00:07:09,960
You get a correct.

103
00:07:09,960 --> 00:07:10,760
But why?

104
00:07:10,760 --> 00:07:14,560
Why we use this particular this book.

105
00:07:14,600 --> 00:07:17,280
What is the reason behind this

106
00:07:18,480 --> 00:07:20,760
and this JSON method

107
00:07:29,320 --> 00:07:31,400
to be able to use the methods object?

108
00:07:31,800 --> 00:07:32,520
All right.

109
00:07:32,520 --> 00:07:37,480
Because by default in Java, rest
assured, allows data

110
00:07:37,480 --> 00:07:44,440
to be sent in, which for me, in just one.

111
00:07:44,440 --> 00:07:45,040
Right.

112
00:07:45,040 --> 00:07:46,880
So to Z to cover everything,

113
00:07:46,880 --> 00:07:51,120
to retrieve everything in JSON,
we have to use the JSON.

114
00:07:51,440 --> 00:07:53,000
Right. We have to use this.

115
00:07:53,000 --> 00:07:54,480
Just not correct.

116
00:07:54,480 --> 00:07:58,120
From here,
we can collect the data monitor.

117
00:07:58,720 --> 00:08:00,400
We can collect the data.

118
00:08:00,400 --> 00:08:04,640
Whatever the body we are getting, whatever
the response we are getting, whatever

119
00:08:04,640 --> 00:08:09,600
the other things we are getting in order
to fetch the values either

120
00:08:09,840 --> 00:08:13,920
complete value or from one one value
from all these things.

121
00:08:13,920 --> 00:08:15,800
Right. So we can do all of these things.

122
00:08:15,800 --> 00:08:21,080
You can do this using this particular JSON
class or JSON, but method

123
00:08:21,480 --> 00:08:27,800
is that you?

124
00:08:27,800 --> 00:08:31,640
Morning Ziva.

125
00:08:35,960 --> 00:08:38,280
So now I told you one more thing

126
00:08:38,520 --> 00:08:43,680
while creating the request here in Java,
just a short API base.

127
00:08:43,680 --> 00:08:45,600
You are right. It is this.

128
00:08:45,600 --> 00:08:51,120
You are right means this you are
equivalent to what base you wanted, right?

129
00:08:51,160 --> 00:08:54,200
Basically what it simply means is
you are correct.

130
00:08:54,480 --> 00:08:56,000
And when we use given given.

131
00:08:56,000 --> 00:09:03,840
What is the reason why we use
given key words, why

132
00:09:04,160 --> 00:09:06,880
we use given key word
to prepare the request rate.

133
00:09:07,080 --> 00:09:11,960
So to prepare the request, we need to have
this particular particular base.

134
00:09:11,960 --> 00:09:12,920
You are

135
00:09:13,520 --> 00:09:16,880
right.

136
00:09:16,880 --> 00:09:18,320
Right. Next

137
00:09:22,720 --> 00:09:26,400
file simply then keyword we can use.

138
00:09:26,800 --> 00:09:29,880
So we use this when given to fit

139
00:09:29,960 --> 00:09:33,080
the and pointed to the end point.

140
00:09:33,080 --> 00:09:36,360
We need one keyword
and then the another keyword we use.

141
00:09:36,360 --> 00:09:37,880
Then for

142
00:09:41,120 --> 00:09:44,000
response or validation.

143
00:09:44,000 --> 00:09:48,120
Responsible validation, correct.

144
00:09:49,800 --> 00:09:52,040
Now let's do another thing here.

145
00:09:52,200 --> 00:09:53,280
Let's to another thing,

146
00:09:53,280 --> 00:09:57,240
just one operation here, and then we'll
proceed further to integrate.

147
00:09:57,440 --> 00:10:00,360
Are this particular part to integrate our

148
00:10:00,360 --> 00:10:04,920
Java session API with our framework,
because right now

149
00:10:05,160 --> 00:10:08,160
we are doing these hardcoded
exemplars, right?

150
00:10:08,320 --> 00:10:10,160
We should not do hardcoded examples.

151
00:10:10,160 --> 00:10:14,560
Instead we will go and we will use
all these things in our actual operation.

152
00:10:15,160 --> 00:10:16,280
Replace

153
00:10:18,000 --> 00:10:22,080
b c e with B would be fine,

154
00:10:23,920 --> 00:10:25,200
A, B, c,

155
00:10:25,200 --> 00:10:28,800
and D after this
I'm going to write another method.

156
00:10:28,800 --> 00:10:32,640
So in this method,
what I'm going to do is I'm going to

157
00:10:33,080 --> 00:10:36,040
I'm going to get all employees

158
00:10:37,880 --> 00:10:40,240
and all employees
after adding the employee,

159
00:10:40,520 --> 00:10:43,360
getting one data, and then I'm going
to get all the employees.

160
00:10:43,800 --> 00:10:44,320
So they

161
00:10:45,480 --> 00:10:45,800
tell me

162
00:10:45,800 --> 00:10:49,560
one thing in
order to get all the employees, in order

163
00:10:49,560 --> 00:10:53,760
to get all the employees,
do I have any end point

164
00:10:54,360 --> 00:11:12,360
in my swagger?

165
00:11:12,360 --> 00:11:13,320
We have it.

166
00:11:13,320 --> 00:11:14,520
We have it right.

167
00:11:14,520 --> 00:11:15,520
And also,

168
00:11:15,520 --> 00:11:19,400
I want to just see the total number
of employees, the employee count and

169
00:11:19,400 --> 00:11:23,400
the ideas of the employee, what all are
the ideas of these two things.

170
00:11:23,400 --> 00:11:25,080
I need data.

171
00:11:25,080 --> 00:11:30,120
So now, now to do this, we need to write
one particular test, right?

172
00:11:30,400 --> 00:11:34,360
We need to write one particular test
to perform this operation.

173
00:11:34,560 --> 00:11:37,120
How we can do it.

174
00:11:37,120 --> 00:11:40,440
First, I'm going to write public void

175
00:11:41,160 --> 00:11:43,560
E because D we don't get

176
00:11:44,640 --> 00:11:48,720
all employees,

177
00:11:50,280 --> 00:11:52,320
get all employees.

178
00:11:52,320 --> 00:11:54,480
So here first we have to make one

179
00:11:57,760 --> 00:11:58,360
vice versa.

180
00:11:58,360 --> 00:11:59,160
What we have to make

181
00:12:03,360 --> 00:12:04,520
request.

182
00:12:05,840 --> 00:12:07,880
Tell me this particular token.

183
00:12:07,880 --> 00:12:11,520
This particular token, what we are using
is it good

184
00:12:11,520 --> 00:12:16,200
or we have to change this token.

185
00:12:16,200 --> 00:12:18,560
No good. We have to change it. Fine.

186
00:12:19,320 --> 00:12:21,480
Nobody's in school here.

187
00:12:21,880 --> 00:12:25,520
Page 11 API General token bar.

188
00:12:27,200 --> 00:12:29,000
Send it

189
00:12:30,720 --> 00:12:33,520
generate new token.

190
00:12:33,880 --> 00:12:36,120
Simply update this

191
00:12:39,440 --> 00:12:39,960
simply

192
00:12:39,960 --> 00:12:54,960
we have to upgrade the token.

193
00:12:54,960 --> 00:12:57,400
This is the token I got right.

194
00:12:58,280 --> 00:12:59,840
So now, now here.

195
00:12:59,840 --> 00:13:02,000
First I'm going to meet that exist.

196
00:13:02,400 --> 00:13:04,440
So based on me which part we use

197
00:13:06,520 --> 00:13:09,600
to make the request,
what is the first thing?

198
00:13:09,600 --> 00:13:13,920
In order to prepare the request,
we have to call one particular class.

199
00:13:13,920 --> 00:13:15,320
What is this

200
00:13:16,080 --> 00:13:17,760
request?

201
00:13:17,760 --> 00:13:19,720
Specification.

202
00:13:19,880 --> 00:13:20,400
Right.

203
00:13:21,360 --> 00:13:23,440
So let me create the object.

204
00:13:24,000 --> 00:13:26,040
But it would be the variable prepared

205
00:13:26,840 --> 00:13:29,160
like is it was for which giveaways

206
00:13:34,320 --> 00:13:36,880
even start

207
00:13:36,880 --> 00:13:39,360
in order to get all the employees.

208
00:13:39,720 --> 00:13:46,560
Do we need a body?

209
00:13:46,560 --> 00:13:48,400
Do we need body bodies? Nobody. Right.

210
00:13:48,400 --> 00:13:49,720
But we need header.

211
00:13:49,720 --> 00:13:51,960
So first let's take the data.

212
00:13:51,960 --> 00:13:54,080
What should be the header

213
00:13:54,240 --> 00:13:57,600
should be mine or to write zation

214
00:13:58,680 --> 00:14:01,840
authorization, comma.

215
00:14:01,840 --> 00:14:03,280
You can really

216
00:14:04,320 --> 00:14:06,120
start another header.

217
00:14:06,120 --> 00:14:08,520
What is the database

218
00:14:12,760 --> 00:14:15,440
content type I'm going to provide?

219
00:14:15,440 --> 00:14:18,000
The value is

220
00:14:19,920 --> 00:14:23,880
application slash json

221
00:14:29,800 --> 00:14:32,120
database application slash JSON.

222
00:14:33,120 --> 00:14:35,880
So that's how I prepared to request.

223
00:14:35,880 --> 00:14:38,880
After preparing the request,
I'm going to say

224
00:14:39,880 --> 00:14:42,640
write this so I will get the response.

225
00:14:42,640 --> 00:14:46,040
And for that response
I have to create one variable.

226
00:14:46,800 --> 00:14:49,480
So prepared request dot

227
00:14:50,280 --> 00:14:52,480
which give advice to hit don't

228
00:14:52,680 --> 00:14:55,000
when keyword don't reach method

229
00:14:56,200 --> 00:14:58,320
to get all the employees which method

230
00:15:00,880 --> 00:15:03,040
get method don't get

231
00:15:04,560 --> 00:15:06,840
simply provide the end point here.

232
00:15:06,840 --> 00:15:09,120
So where can I get the end point from?

233
00:15:09,120 --> 00:15:11,640
I can get my end point

234
00:15:11,640 --> 00:15:14,360
from my swagger document.

235
00:15:15,600 --> 00:15:18,960
So this should be the end point.

236
00:15:18,960 --> 00:15:21,640
This should be the end point for

237
00:15:24,160 --> 00:15:26,280
no. Now, here's what I'm saying.

238
00:15:26,320 --> 00:15:29,840
It says Response not pretty Print

239
00:15:30,320 --> 00:15:33,200
guide Why redistribute

240
00:15:39,000 --> 00:15:39,960
students?

241
00:15:39,960 --> 00:15:42,520
Why we use preprint

242
00:15:46,520 --> 00:15:48,360
instead of the standard?

243
00:15:48,360 --> 00:15:50,560
Let divided response
start with the printed.

244
00:15:50,560 --> 00:15:53,960
We print everything in the console.

245
00:15:54,400 --> 00:15:55,080
Fine.

246
00:15:55,480 --> 00:15:56,320
Now tell me one thing.

247
00:15:56,320 --> 00:16:06,120
Easy.

248
00:16:06,120 --> 00:16:20,280
So. So let's here.

249
00:16:21,480 --> 00:16:25,640
When I'm talking about this
particular request to get all the employed

250
00:16:25,800 --> 00:16:29,760
right when I say get all the employees
so this particular body

251
00:16:29,760 --> 00:16:31,760
will tell me what

252
00:16:38,040 --> 00:16:38,440
it will do,

253
00:16:38,440 --> 00:16:42,960
then we want this particular response
for all the embroider to done something.

254
00:16:42,960 --> 00:16:43,600
What does that

255
00:16:46,560 --> 00:16:48,000
list of employees.

256
00:16:48,000 --> 00:16:48,440
Right.

257
00:16:48,440 --> 00:16:51,280
Misspoke employees in the body of the work
body.

258
00:16:51,280 --> 00:16:51,760
Right.

259
00:16:52,160 --> 00:16:54,040
It returns all the employees.

260
00:16:54,040 --> 00:16:58,840
So I'm going to get a string
called a string on

261
00:16:59,320 --> 00:17:03,880
all employees
where I'm going to see this response.

262
00:17:04,160 --> 00:17:05,800
I'm going to store this response.

263
00:17:05,800 --> 00:17:06,680
Right. Right.

264
00:17:06,680 --> 00:17:10,040
Because I will tell you
how I can use this particular response.

265
00:17:10,400 --> 00:17:11,080
Fine.

266
00:17:12,320 --> 00:17:12,840
Great.

267
00:17:14,520 --> 00:17:15,840
Now, easy

268
00:17:16,680 --> 00:17:20,040
decision, but class,

269
00:17:20,040 --> 00:17:22,680
decent part class
I'm going to use here. Why?

270
00:17:22,680 --> 00:17:25,400
Because it always allows us

271
00:17:25,840 --> 00:17:28,760
data to be sent in this environment.

272
00:17:29,040 --> 00:17:32,480
My data is also going to come in
JSON for me.

273
00:17:32,640 --> 00:17:37,360
So first I'm going to do
one thing is creating the object,

274
00:17:37,960 --> 00:17:41,640
the object of Jason for the class.

275
00:17:41,880 --> 00:17:44,800
No. See,
what I'm going to do is I'm going to write

276
00:17:46,280 --> 00:17:47,960
JSON, but

277
00:17:48,080 --> 00:17:51,600
it is is equals the new JSON button.

278
00:17:52,000 --> 00:17:55,200
And here I'm going to provide
this particular variable.

279
00:17:56,200 --> 00:17:59,520
So this part, whatever the data is coming

280
00:17:59,800 --> 00:18:03,840
in, JSON part or class object,
I'm going to use this data

281
00:18:04,080 --> 00:18:08,280
to perform further operation
to perform further operation.

282
00:18:08,520 --> 00:18:10,960
Now the point is, what is that operation?

283
00:18:11,240 --> 00:18:15,880
So I can change,
I can customize my output, which I want to

284
00:18:15,880 --> 00:18:22,360
bring in my console for API automation,
but I don't want every single thing.

285
00:18:22,760 --> 00:18:24,480
First of all,
I don't want every single thing.

286
00:18:24,480 --> 00:18:25,920
I need a couple of things.

287
00:18:25,920 --> 00:18:27,400
So what are these couple of things?

288
00:18:27,400 --> 00:18:29,600
So first, I have to take care of this
couple of things, right?

289
00:18:29,880 --> 00:18:33,640
First thing I need over on account
of the employee's

290
00:18:35,280 --> 00:18:36,240
what I would be based

291
00:18:41,040 --> 00:18:42,680
is what I would need

292
00:18:43,640 --> 00:18:47,640
the overall count of the employee.

293
00:18:47,840 --> 00:18:48,400
Right.

294
00:18:48,400 --> 00:18:51,040
So here I'm going to write it is start.

295
00:18:51,920 --> 00:18:54,120
It says get the string

296
00:18:54,120 --> 00:18:56,400
count is a string or what is

297
00:18:57,880 --> 00:19:00,920
this object is going to return me
the count.

298
00:19:01,000 --> 00:19:03,840
So count as a string or what
count doesn't.

299
00:19:04,200 --> 00:19:04,920
Right?

300
00:19:05,000 --> 00:19:08,680
So simply write gig and to get into work.

301
00:19:08,680 --> 00:19:12,600
So now see I'm going to you this

302
00:19:12,880 --> 00:19:13,160
here.

303
00:19:13,160 --> 00:19:17,640
If you go right here,
if you go use this token

304
00:19:19,600 --> 00:19:21,800
to your get on employee's demand.

305
00:19:22,320 --> 00:19:23,120
Right.

306
00:19:23,840 --> 00:19:25,560
And send it.

307
00:19:25,640 --> 00:19:28,080
When you see this employee big

308
00:19:55,200 --> 00:20:08,520
time, fine.

309
00:20:08,840 --> 00:20:13,720
So now if you see this employee's
this employee's object, right.

310
00:20:13,800 --> 00:20:16,680
This is the distant object, Right.

311
00:20:16,960 --> 00:20:20,880
And inside this employee object,
I'm going to get all the bodies.

312
00:20:20,880 --> 00:20:21,600
Correct.

313
00:20:22,000 --> 00:20:24,280
So it is returning what these employees

314
00:20:24,280 --> 00:20:28,440
object is returning to the overall list
of all the employees.

315
00:20:28,920 --> 00:20:30,360
Getting my point.

316
00:20:30,360 --> 00:20:34,840
Capital E place employees with capital E
right here.

317
00:20:34,840 --> 00:20:37,440
You see this employee in one employee.

318
00:20:37,600 --> 00:20:40,720
So these employees with small E,
that's their difference.

319
00:20:40,720 --> 00:20:46,160
If you get their detail of one particular
employee in returns and private small E

320
00:20:46,440 --> 00:20:50,320
and here it returns
employee with capital E, Right

321
00:20:50,520 --> 00:20:55,720
So this employee bit capital
is returning the list of all the employees

322
00:20:55,840 --> 00:21:00,960
where I'm having the information of all
the employees available in the database

323
00:21:01,920 --> 00:21:02,440
and that's from

324
00:21:02,440 --> 00:21:05,720
the concept
what employee is employee's with capital.

325
00:21:05,720 --> 00:21:10,480
He is going to return the list of all the
employee's available in their database.

326
00:21:10,680 --> 00:21:15,680
So now if I come here and we want think
what is the matter to be

327
00:21:15,680 --> 00:21:18,440
generally used to get the size of the list

328
00:21:23,200 --> 00:21:25,000
employees

329
00:21:25,360 --> 00:21:29,680
not sons, isn't it?

330
00:21:31,560 --> 00:21:33,920
That is or not

331
00:21:38,680 --> 00:21:39,600
not size matter

332
00:21:39,600 --> 00:21:47,480
we don't really use for work.

333
00:21:47,480 --> 00:21:50,280
And then here simply
I'm going to print one part.

334
00:21:50,280 --> 00:21:55,200
What is that I'm going to say
integer count is equals to this.

335
00:21:55,680 --> 00:21:58,320
So whatever the count,
whatever the size it

336
00:21:58,320 --> 00:22:02,280
going to return, I'm
going to bring that size here.

337
00:22:02,280 --> 00:22:05,760
Say come.

338
00:22:05,760 --> 00:22:08,560
Is that clear?

339
00:22:08,560 --> 00:22:10,800
With 800 leaving

340
00:22:12,960 --> 00:22:14,280
three B

341
00:22:14,640 --> 00:22:18,040
the number of

342
00:22:18,040 --> 00:22:21,600
employees in

343
00:22:21,720 --> 00:22:23,840
on spawn in response. What

344
00:22:25,520 --> 00:22:31,400
is this place?

345
00:22:31,400 --> 00:22:39,360
So to execute this part, I have to add.

346
00:22:39,360 --> 00:22:41,760
Now tell me one thing.

347
00:22:42,080 --> 00:22:44,120
Do I need to run all of this?

348
00:22:44,160 --> 00:22:47,920
Do I need to learn all of this
just to get all the employee?

349
00:22:48,000 --> 00:22:51,120
This is my this particular test relying

350
00:22:51,120 --> 00:22:55,640
on previous test.

351
00:22:55,640 --> 00:22:58,080
No district is not relying
on any other display.

352
00:22:58,400 --> 00:23:00,760
So let's run this one just to check

353
00:23:01,760 --> 00:23:03,960
is it getting better listed another list?

354
00:23:03,960 --> 00:23:05,280
It is list set.

355
00:23:05,280 --> 00:23:06,720
It is a list

356
00:23:19,120 --> 00:23:20,760
now you'll see

357
00:23:20,840 --> 00:23:23,560
because we provided predicted.

358
00:23:23,560 --> 00:23:25,800
We got all the data

359
00:23:25,800 --> 00:23:27,480
we got already tied.

360
00:23:27,480 --> 00:23:30,680
And after that, after that, in the end,
if you'll go,

361
00:23:30,920 --> 00:23:34,080
you'll see here 1113.

362
00:23:35,440 --> 00:23:36,360
Got it

363
00:23:37,000 --> 00:23:42,160
like this 1113 is coming from
where is 1113 is coming from.

364
00:23:42,160 --> 00:23:47,920
This particular account.

365
00:23:47,920 --> 00:23:50,960
Correct.

366
00:23:50,960 --> 00:23:52,320
Is this correct? This brings

367
00:23:55,480 --> 00:23:56,920
let's read some

368
00:23:56,920 --> 00:23:59,040
let's clear some

369
00:24:04,680 --> 00:24:05,760
copy.

370
00:24:06,480 --> 00:24:12,000
No, but you did not use it in this case.

371
00:24:12,400 --> 00:24:15,600
Even we use pretty print
to get all the response

372
00:24:16,240 --> 00:24:19,560
or to get a stable code so that good

373
00:24:19,560 --> 00:24:22,880
because we use a pretty print part
rated pretty pretty good.

374
00:24:22,880 --> 00:24:25,400
Print it every single thing
what we got in the body.

375
00:24:26,040 --> 00:24:28,960
So every single thing printed by print

376
00:24:53,160 --> 00:24:54,680
when you get this.

377
00:24:54,680 --> 00:24:56,240
There you go, sir.

378
00:24:57,120 --> 00:24:58,120
One one, one three.

379
00:24:58,120 --> 00:25:02,360
If you see here eight days don't get
we got this data

380
00:25:03,000 --> 00:25:05,720
I the looks like

381
00:25:05,720 --> 00:25:08,880
we did this Jason but glass object

382
00:25:09,600 --> 00:25:13,920
using this object
we got the total number of integers

383
00:25:13,920 --> 00:25:16,800
right to the number of employees
in digital form.

384
00:25:16,960 --> 00:25:20,920
So integer count
this is the size it is returning.

385
00:25:21,080 --> 00:25:22,600
I'm going to print distance

386
00:25:24,040 --> 00:25:28,080
one. I forgot to put this.

387
00:25:28,520 --> 00:25:30,240
No, is not.

388
00:25:30,240 --> 00:25:32,520
What is it now?

389
00:25:32,520 --> 00:25:35,080
Another thing Now another thing.

390
00:25:35,400 --> 00:25:36,760
We are going to do.

391
00:25:36,760 --> 00:25:39,560
What is that thing? If we show you,

392
00:25:39,560 --> 00:25:42,320
I'm going to write for No to

393
00:25:44,440 --> 00:25:45,400
bring

394
00:25:46,000 --> 00:25:50,360
all the employee ideas

395
00:25:50,960 --> 00:25:54,840
from response only employee I.D..

396
00:25:54,880 --> 00:25:57,720
I would need to. I'm going to print that.

397
00:25:57,800 --> 00:26:00,720
Is there a way to get one particular part

398
00:26:00,720 --> 00:26:02,240
from the body

399
00:26:03,920 --> 00:26:06,880
employee or token

400
00:26:06,880 --> 00:26:07,680
member?

401
00:26:07,800 --> 00:26:09,400
Body token?

402
00:26:09,400 --> 00:26:11,760
Something like this we got earlier also.

403
00:26:12,520 --> 00:26:15,960
So in order to get one particular value

404
00:26:15,960 --> 00:26:19,240
from the body,
we can use one particular part.

405
00:26:19,240 --> 00:26:20,520
What is the conclusion?

406
00:26:20,520 --> 00:26:25,400
First, because I'm going to get the
details right, I'm going to use for loop.

407
00:26:25,400 --> 00:26:30,000
Why do I read the values one by one,
one by one, one by one, All the things

408
00:26:30,400 --> 00:26:36,000
so very simple integer is equal to zero.

409
00:26:36,000 --> 00:26:39,520
I is less than my total count.

410
00:26:39,840 --> 00:26:42,560
Right.
The count I'm already getting here. I

411
00:26:43,600 --> 00:26:43,920
carried a

412
00:26:43,920 --> 00:26:48,360
statement which will execute
after my loop executes right here.

413
00:26:48,360 --> 00:26:51,840
I'm going to write again
the same object json part

414
00:26:51,840 --> 00:26:54,960
plus object is done.

415
00:26:55,680 --> 00:26:58,560
Now, earlier we were talking about

416
00:26:58,600 --> 00:27:01,600
total number of count,
total number of columns.

417
00:27:01,600 --> 00:27:03,000
It was integer.

418
00:27:03,000 --> 00:27:05,760
Now, if I talk about employing IDs,

419
00:27:06,360 --> 00:27:08,720
the IDs actually these are the integers,

420
00:27:09,960 --> 00:27:13,000
but these are ambiguous
or they are three to name

421
00:27:13,000 --> 00:27:16,000
e see something

422
00:27:16,280 --> 00:27:19,840
We can consider it as a string
variable characters write string.

423
00:27:20,120 --> 00:27:23,880
So let me write here to get the strength
gain is great.

424
00:27:24,120 --> 00:27:30,120
So from where I'm going to get this string
my employs with capital E object

425
00:27:30,880 --> 00:27:33,200
and here I'm going to see here

426
00:27:33,200 --> 00:27:35,440
I'm going to see in this particular one

427
00:27:36,320 --> 00:27:39,120
go and

428
00:27:39,120 --> 00:27:43,440
what I hear first, what I hear first. So I

429
00:27:44,600 --> 00:27:46,680
don't employ

430
00:27:48,400 --> 00:27:51,160
underscore i.t.

431
00:27:51,160 --> 00:28:03,360
What is the meaning of this days, guys?

432
00:28:03,480 --> 00:28:05,560
What is the meaning of it?

433
00:28:05,960 --> 00:28:07,760
It means employee's

434
00:28:07,760 --> 00:28:10,560
first like first of the employee object
you got

435
00:28:11,560 --> 00:28:15,480
in the employee
printed second, the employee reprinted.

436
00:28:15,680 --> 00:28:19,120
So how I'm going to print it first
time to put it somewhere

437
00:28:19,120 --> 00:28:24,600
so I'm going to write the employee
I these is equals to this.

438
00:28:24,960 --> 00:28:28,440
So simply
go here and bring them liabilities

439
00:28:29,400 --> 00:28:33,120
into my employees.

440
00:28:33,120 --> 00:28:33,840
Right.

441
00:28:34,920 --> 00:28:38,600
Using for loop integer
I is equals to zero.

442
00:28:38,600 --> 00:28:43,640
I is then then don't I plus plus
using the decent part class object.

443
00:28:43,640 --> 00:28:47,760
I'm going and I'm getting the string
because my employee ID is the string.

444
00:28:48,120 --> 00:28:48,840
Right?

445
00:28:48,840 --> 00:28:51,840
I'm reading employee 81
by to all the employees.

446
00:28:51,880 --> 00:28:55,920
The stores, All of this employer is in
one variable and printing that variable.

447
00:28:56,880 --> 00:28:57,720
All these things are

448
00:28:57,720 --> 00:29:01,960
happening inside for my
because one look complete, one look.

449
00:29:01,960 --> 00:29:04,800
It went to work like this is that here

450
00:29:06,640 --> 00:29:10,240
is that dear to everyone

451
00:29:11,320 --> 00:29:12,160
that's

452
00:29:31,040 --> 00:29:31,920
let's execute

453
00:29:31,920 --> 00:29:34,800
this part first execute this part

454
00:29:36,000 --> 00:29:38,520
and then if you guys have any question
you can ask

455
00:29:38,520 --> 00:29:42,080
so that we can proceed further.

456
00:29:42,080 --> 00:29:42,520
Yeah.

457
00:29:42,520 --> 00:29:46,560
So this, this is employee
I is the counter, right.

458
00:29:46,560 --> 00:29:49,760
I is the that you see everybody
one by running this

459
00:29:49,760 --> 00:29:53,040
printing printing and printing

460
00:29:53,040 --> 00:29:54,440
can you see this

461
00:30:07,080 --> 00:30:08,760
now. You'll see every single.

462
00:30:08,760 --> 00:30:10,520
Well you are just printing everything.

463
00:30:10,520 --> 00:30:13,080
It is printing. Go down, go down, go down.

464
00:30:13,880 --> 00:30:17,400
And from here it gets employ 80,
so it starts ticking.

465
00:30:17,400 --> 00:30:21,120
Where is the employer?

466
00:30:21,120 --> 00:30:22,040
There you go.

467
00:30:22,040 --> 00:30:26,600
This is the employee, 88
total employees, 1108.

468
00:30:26,840 --> 00:30:31,400
When we started the API classes
for the number of employees were just 43.

469
00:30:32,160 --> 00:30:35,800
We all are difficult place
to make this count this large.

470
00:30:36,840 --> 00:30:39,280
We have created 1000 employees here

471
00:30:40,560 --> 00:30:44,160
is still
if you say we don't know IBA shame on us.

472
00:30:44,680 --> 00:30:47,160
Believe me, we have created 1000 employees

473
00:30:47,160 --> 00:30:57,080
and we didn't learn anything,
so they missed this part.

474
00:30:57,080 --> 00:31:04,400
But you want me to explain it?

475
00:31:04,440 --> 00:31:07,480
It is a little bit

476
00:31:07,480 --> 00:31:08,560
by no

477
00:31:09,480 --> 00:31:12,520
more and as good

478
00:31:14,400 --> 00:31:15,960
would it be possible to understand?

479
00:31:15,960 --> 00:31:18,480
Yes, why not not console? Okay.

480
00:31:19,080 --> 00:31:22,200
Do you mean by why not by all?

481
00:31:22,200 --> 00:31:26,080
For you see, this is the only thing
we have written today.

482
00:31:26,400 --> 00:31:27,600
So if you want

483
00:31:28,200 --> 00:31:30,840
to look for the previous class,
I can do that

484
00:31:30,840 --> 00:31:34,560
also, it

485
00:31:34,680 --> 00:31:36,200
will be possible to understand

486
00:31:36,200 --> 00:31:40,320
your biggest possible
aim From today onwards the will noisy

487
00:31:40,320 --> 00:31:42,880
not use ordinance because rescheduling in

488
00:31:43,560 --> 00:31:55,840
some users.

489
00:31:55,840 --> 00:31:57,240
Can we go over this method?

490
00:31:58,920 --> 00:32:00,440
Yeah, sure.

491
00:32:00,440 --> 00:32:01,240
This is the method.

492
00:32:01,240 --> 00:32:03,840
You mean
this is the method to get all employees?

493
00:32:05,000 --> 00:32:07,680
So basically the intention is to print

494
00:32:07,680 --> 00:32:12,160
all the employees, print
all the IDs of the employees.

495
00:32:12,160 --> 00:32:12,960
Correct.

496
00:32:12,960 --> 00:32:16,680
So first of all, to print all
the employees, we need to get the response

497
00:32:17,640 --> 00:32:19,920
to get the response,
they need to send the request.

498
00:32:20,400 --> 00:32:21,400
To send the request.

499
00:32:21,400 --> 00:32:23,320
We need to prepare the request.

500
00:32:23,320 --> 00:32:24,560
To prepare the request.

501
00:32:24,560 --> 00:32:26,560
We need some components.

502
00:32:26,560 --> 00:32:27,960
What are those components?

503
00:32:27,960 --> 00:32:29,880
We need this. You want it?

504
00:32:29,880 --> 00:32:31,760
We need headers.

505
00:32:31,760 --> 00:32:33,800
We need end points. Right.

506
00:32:34,080 --> 00:32:36,520
So we created a request
to provide a request

507
00:32:36,920 --> 00:32:40,040
using when key word here using proper
method point.

508
00:32:40,360 --> 00:32:42,360
We hit the end point also.

509
00:32:42,360 --> 00:32:45,600
So we got the response
using this particular response.

510
00:32:45,600 --> 00:32:49,600
First we got all the employees
here, their data for all the employees

511
00:32:49,600 --> 00:32:56,880
available
here, read the data for all the employees.

512
00:32:56,880 --> 00:33:00,560
It was it is not for it is under the

513
00:33:00,560 --> 00:33:03,640
for loop where you're actually
passing the perimeter.

514
00:33:03,720 --> 00:33:05,160
So you are passing this writing is

515
00:33:06,400 --> 00:33:08,640
it is simply employee's comp, right.

516
00:33:09,960 --> 00:33:11,880
Maybe ever seen that we are passing
the part

517
00:33:11,880 --> 00:33:14,800
like this embroidered size
we are passing that also.

518
00:33:15,920 --> 00:33:17,280
So now here

519
00:33:17,280 --> 00:33:21,320
when you've got all the employee's details
in this particular string,

520
00:33:21,320 --> 00:33:25,480
we are going to use this class object line

521
00:33:25,680 --> 00:33:28,920
because we have already seen what
this particular object does.

522
00:33:29,080 --> 00:33:33,480
If you have any question in this part,
you go in here, you see the details.

523
00:33:33,480 --> 00:33:36,960
What I like, we use this and by the class
and we already discuss

524
00:33:36,960 --> 00:33:39,760
in the class number six, right from here.

525
00:33:40,040 --> 00:33:43,200
From here, when we created the object
of the decent part

526
00:33:43,200 --> 00:33:46,280
class here
we are calling this particular variable,

527
00:33:46,280 --> 00:33:50,520
having all the employee's data, right,
having all the employee's data.

528
00:33:50,760 --> 00:33:54,960
And then from here, I'm trying to retrieve
the total number of employees

529
00:33:54,960 --> 00:33:58,560
available in the database,
which is returning this particular list.

530
00:33:59,160 --> 00:34:02,320
So when I go there and object
that this capital

531
00:34:02,360 --> 00:34:06,440
E employs with capital E is returning
the list of all the employees.

532
00:34:06,640 --> 00:34:08,560
So when it is actually returning the list

533
00:34:08,560 --> 00:34:12,440
of all the employees, I'm going
to get the count of the particular list.

534
00:34:12,440 --> 00:34:16,320
You get the size to get the overall size
of the particular list.

535
00:34:16,320 --> 00:34:18,000
I have to use one particular

536
00:34:18,000 --> 00:34:21,960
method from the concept of collection,
that is Darden Sites.

537
00:34:21,960 --> 00:34:24,120
It returns the size of the list.

538
00:34:24,280 --> 00:34:27,600
So here I use this employees object,
which is returning the list.

539
00:34:27,720 --> 00:34:30,360
So my list is under employees dot sizes.

540
00:34:30,360 --> 00:34:33,480
The method I'm using using
which particular class object.

541
00:34:33,480 --> 00:34:35,280
Jason Park Class object.

542
00:34:35,280 --> 00:34:36,160
So just unpack.

543
00:34:36,160 --> 00:34:39,760
Class object is having this particular
method get integer

544
00:34:40,000 --> 00:34:42,040
when it is expecting it integer.

545
00:34:42,040 --> 00:34:44,120
We are providing this particular data

546
00:34:44,120 --> 00:34:46,720
now when it is returning one
particular integer.

547
00:34:46,720 --> 00:34:47,800
What is that integer?

548
00:34:47,800 --> 00:34:51,200
This is the overall count
of all the employees, right?

549
00:34:51,200 --> 00:34:52,760
Overall count of the employees.

550
00:34:52,760 --> 00:34:56,840
So I am going to see this particular count
in this particular variable

551
00:34:57,000 --> 00:35:00,080
and this variable
I'm going to print for this thing done

552
00:35:01,800 --> 00:35:03,120
first thing. Then

553
00:35:03,680 --> 00:35:06,640
I printed the count of all the employees.

554
00:35:06,920 --> 00:35:09,440
Fine. Now I don't want to print the count.

555
00:35:09,760 --> 00:35:13,360
I want to print every single employee ID
If there are 1000

556
00:35:13,360 --> 00:35:16,120
employees,
I want to print 1000 employee IDs.

557
00:35:16,360 --> 00:35:16,960
Fine.

558
00:35:16,960 --> 00:35:17,960
Do we have anything?

559
00:35:17,960 --> 00:35:20,040
Yes, we have one thing from column loops.

560
00:35:20,040 --> 00:35:22,680
What is that for? Look. For look is to.

561
00:35:22,800 --> 00:35:25,920
I tried to traverse the values
one by one from the list.

562
00:35:25,920 --> 00:35:29,000
Fine. So we go to the for an envelope.

563
00:35:29,000 --> 00:35:33,520
I'm seeing.

564
00:35:33,520 --> 00:35:34,400
Yes, the Bastian.

565
00:35:34,400 --> 00:35:35,280
Right. Right.

566
00:35:35,280 --> 00:35:38,160
Because someone named someone

567
00:35:38,160 --> 00:35:42,600
might be in some other class
someone is taking the database classes.

568
00:35:42,600 --> 00:35:45,560
Right. And they are hitting the employee.

569
00:35:45,560 --> 00:35:47,520
Someone is working in, let's say

570
00:35:47,520 --> 00:35:50,600
my sequel class,
someone is working in data science class.

571
00:35:50,600 --> 00:35:54,720
A lot of things are going on and everyone
is just projecting to the same database.

572
00:35:54,880 --> 00:35:57,120
So that's why data keeps changing.

573
00:35:57,120 --> 00:36:00,000
Tomorrow, maybe you'll see
just 200 employees, 800 deleted.

574
00:36:00,000 --> 00:36:01,440
Something like this happens, right?

575
00:36:01,440 --> 00:36:04,440
So despite
at least you are getting accused,

576
00:36:04,440 --> 00:36:07,800
you are getting this particular one,
the success message, right.

577
00:36:07,800 --> 00:36:11,640
The correct message with your API
part is working point

578
00:36:12,120 --> 00:36:16,320
right.

579
00:36:16,320 --> 00:36:18,440
So now now here here.

580
00:36:18,480 --> 00:36:22,920
If you see this particular version
using for the what I'm seeing, I'm saying

581
00:36:22,920 --> 00:36:28,080
this time I want to print employee IDs,
not account of all employees.

582
00:36:28,080 --> 00:36:28,720
Right.

583
00:36:28,720 --> 00:36:31,640
So here is the employee is the object.

584
00:36:31,640 --> 00:36:35,440
And notice there is a guy called employee
underscore ID

585
00:36:35,600 --> 00:36:39,080
it is returning employee every time
so you get one

586
00:36:39,080 --> 00:36:42,840
against an employee's employer
so it will return one employee.

587
00:36:43,160 --> 00:36:44,920
This is what we did in mind.

588
00:36:44,920 --> 00:36:45,920
This particular part

589
00:36:47,600 --> 00:36:53,800
here you see employee DOT employee ID

590
00:36:54,360 --> 00:36:58,800
because it is returning one.

591
00:36:58,800 --> 00:37:01,880
Is it possible that some of those contents
can be viewed on the employee?

592
00:37:02,120 --> 00:37:10,560
So we didn't get a complete list.

593
00:37:10,560 --> 00:37:12,600
Don't do Nicole, don't do this

594
00:37:17,600 --> 00:37:18,280
implicit.

595
00:37:18,280 --> 00:37:20,600
We should not get empty list from here.

596
00:37:20,600 --> 00:37:23,640
This would be very difficult.

597
00:37:23,640 --> 00:37:25,200
I see. But everything is possible.

598
00:37:25,200 --> 00:37:31,600
So we we need this, right?

599
00:37:34,200 --> 00:37:35,040
It is possible.

600
00:37:35,040 --> 00:37:36,120
Actually, it is possible.

601
00:37:36,120 --> 00:37:40,800
But generally, this kind of operation,
even for the admin people, are restricted.

602
00:37:41,520 --> 00:37:43,960
This type of operations are restricted
even for those roles.

603
00:37:45,680 --> 00:37:49,400
So now for one employee
against simply provide employees

604
00:37:49,400 --> 00:37:52,200
don't employ ID,
it will return one particular employee

605
00:37:52,480 --> 00:37:59,880
readiness.

606
00:37:59,880 --> 00:38:01,240
Yeah, correctly.

607
00:38:01,440 --> 00:38:02,320
That's what I'm seeing.

608
00:38:02,320 --> 00:38:05,040
See, I'm coming to that point also. Right.

609
00:38:05,520 --> 00:38:08,360
I got it partly
because I explained partly knowing key.

610
00:38:08,800 --> 00:38:11,560
So for one employee I complete employee's

611
00:38:11,560 --> 00:38:14,880
dot employee it will return one employee.

612
00:38:14,880 --> 00:38:17,640
But to get all the employees one by one.

613
00:38:17,680 --> 00:38:22,000
Okay closed employee,
get the 82nd and get the 80.

614
00:38:22,160 --> 00:38:26,800
So internally, internally,
when I'm seeing the entire list

615
00:38:26,800 --> 00:38:29,760
one by one, I'm providing the index

616
00:38:30,440 --> 00:38:33,720
of the employee,
I'm providing the index position.

617
00:38:33,960 --> 00:38:34,760
Third employee.

618
00:38:34,760 --> 00:38:35,280
Fine.

619
00:38:35,280 --> 00:38:38,000
Get the employee printed for the employee.

620
00:38:38,040 --> 00:38:41,440
If I get the employee printed, fifth
employee fine.

621
00:38:41,640 --> 00:38:43,680
Get the employee printed like this.

622
00:38:43,680 --> 00:38:46,040
We are doing So this is coming from where?

623
00:38:46,120 --> 00:38:47,880
From my no informant.

624
00:38:47,880 --> 00:38:50,120
I provided condition builder time.

625
00:38:50,320 --> 00:38:54,960
My counter is less
than the overall size of the list.

626
00:38:55,080 --> 00:38:57,440
You should print everything
one by one, one by one.

627
00:38:57,440 --> 00:39:00,640
Traverse all the employee,
get all the employees in.

628
00:39:00,640 --> 00:39:01,840
Pretty simple

629
00:39:03,600 --> 00:39:06,400
now understood such

630
00:39:11,680 --> 00:39:12,400
here.

631
00:39:12,400 --> 00:39:13,680
One more thing.

632
00:39:13,960 --> 00:39:18,000
It's completely a blue instead
of providing the employee ID,

633
00:39:18,480 --> 00:39:21,440
if you want to retrieve hostname,
you can do that.

634
00:39:21,840 --> 00:39:24,120
If you want to retrieve
last name, do that.

635
00:39:24,360 --> 00:39:27,360
If you want to retrieve the gender
of all the employees, do that

636
00:39:33,960 --> 00:39:36,480
right?

637
00:39:36,480 --> 00:39:39,520
Yes, I got it.

638
00:39:39,600 --> 00:39:40,320
Okay, let's.

639
00:39:40,320 --> 00:39:42,560
So data retrieval.

640
00:39:42,560 --> 00:39:46,000
Data retrieval can we've been in multiple
ways, right.

641
00:39:46,240 --> 00:39:49,600
It's not a come by rule
that you have to retrieve

642
00:39:49,600 --> 00:39:52,760
only the employee
you can retrieve all the first name.

643
00:39:52,760 --> 00:39:54,120
You can retrieve all the middle name.

644
00:39:54,120 --> 00:39:56,080
You can retrieve all the last name.

645
00:39:56,080 --> 00:39:56,880
Right.

646
00:39:57,880 --> 00:40:00,120
Not lot of things,
not of things are there.

647
00:40:00,120 --> 00:40:07,320
Correct.

648
00:40:07,320 --> 00:40:19,040
Funny. Now.

649
00:40:19,040 --> 00:40:24,840
So now let's proceed further
and this time we will integrate

650
00:40:25,200 --> 00:40:28,480
are particular API but integrate our

651
00:40:28,480 --> 00:40:31,520
Java A API. But

652
00:40:32,560 --> 00:40:34,600
can you remember understood

653
00:40:45,920 --> 00:40:48,720
both it.

654
00:40:48,720 --> 00:40:50,560
So first things

655
00:40:55,040 --> 00:40:56,760
you perform in the operation.

656
00:40:56,760 --> 00:40:59,520
Right now what we're doing,
we're manually creating a token.

657
00:40:59,520 --> 00:41:02,320
We are generating the token manually
and then we are using it

658
00:41:02,520 --> 00:41:05,520
because we know that okay,
it is valid for us

659
00:41:07,520 --> 00:41:09,120
since we are learning right now.

660
00:41:09,120 --> 00:41:11,120
It is a good approach going into it.

661
00:41:12,120 --> 00:41:14,680
But when you actually work
in the realtime industry,

662
00:41:14,920 --> 00:41:19,560
when you work in the industry,
it means at this point of time

663
00:41:19,560 --> 00:41:22,520
in the airline
industry, is it the right approach?

664
00:41:24,200 --> 00:41:26,120
Is it the right approach to go

665
00:41:26,120 --> 00:41:29,040
and create token
manually generate the token?

666
00:41:29,040 --> 00:41:32,960
And you know,
we should come up with the approach

667
00:41:33,120 --> 00:41:35,640
that can generate the token automatically.

668
00:41:36,320 --> 00:41:39,640
Any user token automatically voltage
generation

669
00:41:39,640 --> 00:41:43,960
and use of the token
automatically should be our priority.

670
00:41:45,040 --> 00:41:46,360
This should be our priority.

671
00:41:46,360 --> 00:41:49,760
Current. Correct. Good.

672
00:41:49,760 --> 00:41:53,040
I was thinking the second thing

673
00:41:56,560 --> 00:41:58,280
we are passing the end point.

674
00:41:58,280 --> 00:42:03,240
For example,
get all employees or get one employee

675
00:42:03,640 --> 00:42:05,640
or generate token

676
00:42:08,160 --> 00:42:09,000
something like this.

677
00:42:09,000 --> 00:42:12,000
Right?

678
00:42:12,000 --> 00:42:14,800
Or do your job provide you with token
Jimmy.

679
00:42:14,840 --> 00:42:17,200
They will not provide you the token.

680
00:42:17,440 --> 00:42:21,120
They will provide you just one thing
that is that credentials

681
00:42:21,120 --> 00:42:22,560
to generate the token.

682
00:42:22,560 --> 00:42:26,600
And then we have to make this collection
in most of it, or we have to put it

683
00:42:26,600 --> 00:42:29,960
in the script to generate this token
every time for every coin.

684
00:42:30,040 --> 00:42:34,840
Okay Fine.

685
00:42:35,040 --> 00:42:40,240
So now if I'm anytime soon,
if I'm providing this data hard

686
00:42:40,240 --> 00:42:43,800
coded, the way I'm creating it
here, here is the right

687
00:42:43,800 --> 00:42:57,600
approach.

688
00:42:57,600 --> 00:43:00,080
Is this right? Get passing
the body like this.

689
00:43:00,400 --> 00:43:02,320
We are providing their data like this.

690
00:43:02,320 --> 00:43:04,320
No, no. Right.

691
00:43:04,600 --> 00:43:09,480
So again, again,
we have already put enough cream in there.

692
00:43:09,480 --> 00:43:16,040
We know everything is.

693
00:43:16,040 --> 00:43:18,400
Every single thing is that I'm increased.

694
00:43:19,440 --> 00:43:22,120
But it it doesn't look professional.

695
00:43:22,120 --> 00:43:24,360
Everything should be parameterized, right?

696
00:43:24,520 --> 00:43:29,760
So then we use GIs everywhere
and we provide a value at one place.

697
00:43:30,120 --> 00:43:31,040
So every time

698
00:43:31,040 --> 00:43:34,120
if there is a change in the vendor,
we have to change it one place

699
00:43:34,120 --> 00:43:36,960
and you should always
get updated every bit.

700
00:43:38,600 --> 00:43:39,840
But it

701
00:43:45,640 --> 00:43:47,200
similarly similarly.

702
00:43:47,200 --> 00:43:48,800
Couple of things we need to check.

703
00:43:48,800 --> 00:43:50,640
What are those things?

704
00:43:50,640 --> 00:43:55,120
In a framework
we were using constants using constants.

705
00:43:55,120 --> 00:43:57,560
Part of this constants values are fine.

706
00:43:57,560 --> 00:43:59,840
That was values are fine.

707
00:43:59,840 --> 00:44:01,080
And these are constants.

708
00:44:01,080 --> 00:44:03,120
Current values are not going to change.

709
00:44:03,120 --> 00:44:04,920
So we provide constants.

710
00:44:04,920 --> 00:44:09,080
So similarly, some of the gods games,
some of the constants

711
00:44:09,080 --> 00:44:13,640
we will point in the agents
whose values are not going to change.

712
00:44:14,160 --> 00:44:18,200
We are going to work with
all of these things correct in our plane.

713
00:44:18,440 --> 00:44:21,600
So we have this functionality
available in our framework.

714
00:44:21,600 --> 00:44:26,920
We are just going to integrate
this existing functionality with an API.

715
00:44:26,920 --> 00:44:33,480
But here, Student Square

716
00:44:37,200 --> 00:44:41,400
Now, now tell me what is the first stage?

717
00:44:41,600 --> 00:44:45,480
What is the first step
to integrate API with Key?

718
00:44:46,000 --> 00:44:48,840
But what is the first thing we

719
00:45:01,360 --> 00:45:03,400
Yes, we create.

720
00:45:03,400 --> 00:45:05,280
First of all

721
00:45:10,080 --> 00:45:13,400
feature correct?

722
00:45:13,400 --> 00:45:15,880
First of all, we will create the feature.

723
00:45:15,880 --> 00:45:16,600
Fine.

724
00:45:16,920 --> 00:45:21,400
So now, now here I'm going
to create a feature right here, right?

725
00:45:21,840 --> 00:45:23,880
So I am writing in this feature like

726
00:45:25,000 --> 00:45:27,360
let me go

727
00:45:37,840 --> 00:45:41,600
and create my

728
00:45:45,680 --> 00:45:45,960
days.

729
00:45:45,960 --> 00:45:50,440
Everyone knows how to create feature
file, right?

730
00:45:50,440 --> 00:45:54,000
But still, is there any Einstein
who doesn't know how to create objects?

731
00:45:54,600 --> 00:46:07,720
If he is there, do let me API

732
00:46:09,440 --> 00:46:12,760
workflow dot feature

733
00:46:15,000 --> 00:46:17,520
correct?

734
00:46:17,520 --> 00:46:22,560
Correct.

735
00:46:22,560 --> 00:46:25,800
This is my API workflow feature
which I'm going to create.

736
00:46:25,800 --> 00:46:28,320
So first thing,
what we need to write in feature pages,

737
00:46:28,440 --> 00:46:30,320
what is the first thing
that I can feature based

738
00:46:34,480 --> 00:46:36,080
first thing that I do feature?

739
00:46:36,080 --> 00:46:40,640
So I'm going to write the same dates API

740
00:46:41,800 --> 00:46:44,240
workflow for

741
00:46:45,800 --> 00:46:47,120
each item.

742
00:46:48,000 --> 00:46:50,920
And under this feature,
under this feature,

743
00:46:51,320 --> 00:46:53,520
I'm going to write forced

744
00:46:54,880 --> 00:46:56,280
scenario.

745
00:46:56,960 --> 00:46:58,440
So scenario I'm going to write.

746
00:46:58,440 --> 00:47:04,160
Simple is let's see, generating

747
00:47:05,040 --> 00:47:09,080
the first thing I'm going to write
is generating the token, correct.

748
00:47:10,000 --> 00:47:12,640
So here I'm writing given given

749
00:47:13,120 --> 00:47:18,800
which type of you can use guys, guys,

750
00:47:18,800 --> 00:47:21,320
what type of token we use

751
00:47:28,680 --> 00:47:29,760
is it

752
00:47:34,280 --> 00:47:37,080
JWT token is

753
00:47:38,560 --> 00:47:39,720
generated.

754
00:47:39,720 --> 00:47:42,680
I'm going to write JWT Beer

755
00:47:42,680 --> 00:47:45,480
token is a generated fine.

756
00:47:46,000 --> 00:47:46,800
What is the next thing?

757
00:47:46,800 --> 00:47:55,480
Now this is

758
00:47:55,480 --> 00:47:57,120
what is the next thing

759
00:48:00,360 --> 00:48:02,160
when forced

760
00:48:02,160 --> 00:48:04,320
to generate the token
and then we will use it.

761
00:48:05,320 --> 00:48:05,920
Right?

762
00:48:06,640 --> 00:48:09,120
I started generating the token
as scenario need.

763
00:48:09,600 --> 00:48:12,920
So after generating the token,
is there anything else we need to do

764
00:48:13,240 --> 00:48:18,840
as of now,
we don't have to do anything else, right?

765
00:48:19,560 --> 00:48:22,800
So first I will go in my donor class

766
00:48:23,120 --> 00:48:27,080
and I will use a
new remote class here called

767
00:48:28,200 --> 00:48:30,000
API and

768
00:48:30,720 --> 00:48:32,360
call it bottom.

769
00:48:32,360 --> 00:48:33,080
Right.

770
00:48:33,320 --> 00:48:38,400
And in this API and I am going
to use the options from my smoke.

771
00:48:38,400 --> 00:48:39,360
One only

772
00:48:40,080 --> 00:48:42,640
from my smoke, one only.

773
00:48:42,640 --> 00:48:45,160
I hope everyone remembers this part guys.

774
00:48:45,240 --> 00:48:47,560
A direct run with the class.

775
00:48:47,880 --> 00:48:50,840
Given our options,
everyone knows it or not.

776
00:48:51,240 --> 00:48:52,000
Tell me

777
00:49:07,120 --> 00:49:10,680
I'm seeing API workflow
that features will be b.

778
00:49:10,680 --> 00:49:13,080
I like flow featured.

779
00:49:13,160 --> 00:49:14,400
Fine. Okay.

780
00:49:14,760 --> 00:49:16,240
Brian, we need this.

781
00:49:16,240 --> 00:49:19,240
We need tags, we need plugins, we need.

782
00:49:19,680 --> 00:49:21,320
We don't need this part.

783
00:49:21,320 --> 00:49:23,520
What is that reason?

784
00:49:23,520 --> 00:49:25,680
It is no option for reader Now.

785
00:49:25,680 --> 00:49:27,080
We are not using this.

786
00:49:27,080 --> 00:49:29,400
Find the rest of the things are working.

787
00:49:30,840 --> 00:49:32,640
List of the things are okay.

788
00:49:32,640 --> 00:49:35,320
So now now guys, tell me one thing

789
00:49:36,120 --> 00:49:40,040
who generate this particular part,
this particular step from here.

790
00:49:40,440 --> 00:49:43,440
First, I have to provide here one tag.

791
00:49:44,240 --> 00:49:46,080
So I'm writing here. Tag is work

792
00:49:48,520 --> 00:49:49,720
workflow,

793
00:49:50,160 --> 00:49:52,160
and I'm going to provide

794
00:49:52,160 --> 00:49:55,560
this particular tag here.

795
00:49:55,560 --> 00:49:56,240
Fine,

796
00:49:57,280 --> 00:49:58,000
fine.

797
00:49:58,000 --> 00:50:01,440
Now tell me to is to generate this,
get what I should do

798
00:50:01,440 --> 00:50:09,400
another class.

799
00:50:09,400 --> 00:50:10,040
Okay.

800
00:50:10,040 --> 00:50:18,920
Okay.

801
00:50:18,920 --> 00:50:19,920
I have to use try.

802
00:50:19,920 --> 00:50:22,720
It is equal to to

803
00:50:23,200 --> 00:50:24,200
the moment I need.

804
00:50:24,200 --> 00:50:28,000
Triton is equals to draw
and I am going to run this particular

805
00:50:28,000 --> 00:50:29,240
class and another class.

806
00:50:29,240 --> 00:50:41,160
See what would happen.

807
00:50:41,160 --> 00:50:46,040
It gave me this particular step is it
gave me this particular step.

808
00:50:46,040 --> 00:50:50,560
Correct?

809
00:50:50,560 --> 00:51:00,120
Correct.

810
00:51:00,120 --> 00:51:02,040
Let's copy this.

811
00:51:02,120 --> 00:51:04,600
When should I keep it? Was

812
00:51:05,200 --> 00:51:06,000
this the step?

813
00:51:06,000 --> 00:51:07,720
But should I keep it

814
00:51:13,120 --> 00:51:14,400
under steps?

815
00:51:14,400 --> 00:51:18,000
Okay, Now tell me one thing.

816
00:51:18,000 --> 00:51:20,040
In a sense. Great.

817
00:51:20,040 --> 00:51:22,440
I was just taking your knowledge.

818
00:51:22,440 --> 00:51:24,800
That's what I was expecting from you.

819
00:51:24,800 --> 00:51:25,640
In these steps.

820
00:51:25,640 --> 00:51:28,360
We have rules.

821
00:51:28,360 --> 00:51:34,480
What is rules?

822
00:51:34,480 --> 00:51:40,520
What is rules?

823
00:51:40,520 --> 00:51:43,200
Before? After?
It means opening the browser.

824
00:51:43,200 --> 00:51:45,320
Closing the browser precondition.

825
00:51:45,320 --> 00:51:48,760
Most condition. Do we need hooks here?

826
00:51:48,800 --> 00:51:51,440
An API?

827
00:51:51,440 --> 00:51:54,160
Do we need to open the browser?
Do we need to close the browser?

828
00:51:55,800 --> 00:51:57,360
So if I provide

829
00:51:57,360 --> 00:52:01,720
if I provide this particular steps
under my steps package, what would happen?

830
00:52:01,720 --> 00:52:03,960
It will automatically take the hooks.

831
00:52:04,320 --> 00:52:05,120
Correct.

832
00:52:05,120 --> 00:52:06,600
And I don't want this part.

833
00:52:06,600 --> 00:52:09,480
So what should I do?

834
00:52:09,480 --> 00:52:14,280
We will not bother
about these steps anymore.

835
00:52:14,280 --> 00:52:16,360
We will not bother about these steps
anymore.

836
00:52:16,800 --> 00:52:21,840
Indeed, in Java
we are going to create a new package

837
00:52:21,840 --> 00:52:25,880
called API.

838
00:52:25,880 --> 00:52:28,240
API steps one

839
00:52:28,880 --> 00:52:31,280
create another package, API steps.

840
00:52:31,760 --> 00:52:35,960
And inside these I'm going to create now
class go

841
00:52:37,120 --> 00:52:38,560
generate

842
00:52:38,880 --> 00:52:40,360
token

843
00:52:41,040 --> 00:52:46,440
generate token steps, generic steps.

844
00:52:48,000 --> 00:52:54,160
Is that clear?

845
00:52:54,160 --> 00:52:55,840
Is this clear

846
00:53:03,320 --> 00:53:07,160
now? Here provide this particular

847
00:53:07,640 --> 00:53:11,000
way, this particular import

848
00:53:22,120 --> 00:53:22,600
so fine.

849
00:53:22,600 --> 00:53:24,360
Clear. Everyone So far so good.

850
00:53:24,360 --> 00:53:25,280
Everyone

851
00:53:40,600 --> 00:53:44,120
Now now here I'm going to write this part.

852
00:53:44,160 --> 00:53:48,720
First element is in this in this part
in this part.

853
00:53:48,720 --> 00:53:50,840
What are the things I should write?

854
00:53:50,840 --> 00:53:52,000
I would want

855
00:53:52,000 --> 00:53:55,680
distance under the regular steps
because there is I just explained, right.

856
00:53:57,360 --> 00:53:59,400
If I create this particular

857
00:53:59,400 --> 00:54:03,240
steps class under my steps package,
then my steps back.

858
00:54:03,240 --> 00:54:05,760
It has already hooks. Right?

859
00:54:06,120 --> 00:54:10,040
This hooks is one precondition
in most condition, right?

860
00:54:10,280 --> 00:54:14,760
So precondition condition generally opens
the browser, close the browser,

861
00:54:14,920 --> 00:54:18,600
reading the report everything that we need
to open the browser.

862
00:54:18,640 --> 00:54:20,200
We need to close the browser.

863
00:54:20,200 --> 00:54:23,400
So we need to generate those reports
for the execution of that.

864
00:54:23,640 --> 00:54:25,680
No, we don't need them. Right.

865
00:54:25,680 --> 00:54:28,880
So unnecessarily,
if I put there, it will not work.

866
00:54:29,480 --> 00:54:31,440
Great. It'll create problem for us.

867
00:54:31,440 --> 00:54:32,600
So I have to.

868
00:54:32,600 --> 00:54:35,000
I have to be

869
00:54:39,400 --> 00:54:41,640
I have to be in the another package.

870
00:54:41,640 --> 00:54:41,880
Right.

871
00:54:41,880 --> 00:55:02,160
That's why I created API instance package
that is not clear.

872
00:55:02,160 --> 00:55:06,000
But let's go to the so guys must be

873
00:55:08,280 --> 00:55:09,880
first thing things here.

874
00:55:10,960 --> 00:55:12,880
We are going to prepare the

875
00:55:12,880 --> 00:55:17,800
request right so I'm going to write you
for generating the token guys.

876
00:55:17,800 --> 00:55:19,920
Generating the token what you need

877
00:55:21,160 --> 00:55:23,840
first we need here, if everyone

878
00:55:23,840 --> 00:55:26,760
remember is clean

879
00:55:26,880 --> 00:55:30,480
this you is equals to

880
00:55:34,080 --> 00:55:35,680
rest assured door.

881
00:55:35,680 --> 00:55:40,040
This is equals
to the value of my business.

882
00:55:40,040 --> 00:55:40,760
You want

883
00:55:41,560 --> 00:55:51,440
what is the value of my
Because you are engaged.

884
00:55:51,440 --> 00:55:54,920
This is the value of my base you have.

885
00:55:55,480 --> 00:55:58,840
I can provide this value here with base
to be a support

886
00:55:58,840 --> 00:56:02,640
editable slash right.

887
00:56:02,640 --> 00:56:07,400
Got it. GDP.

888
00:56:07,960 --> 00:56:13,160
So now, now here I'm going to write given

889
00:56:14,520 --> 00:56:18,120
given dot dot.

890
00:56:18,760 --> 00:56:25,680
I'm seeing here
what I request is specification

891
00:56:27,280 --> 00:56:28,840
generate

892
00:56:29,520 --> 00:56:31,080
token

893
00:56:31,800 --> 00:56:35,280
object request is equals to see

894
00:56:36,520 --> 00:56:38,760
given dot

895
00:56:43,000 --> 00:56:44,400
now where it is not taking

896
00:56:44,400 --> 00:56:53,280
the given part.

897
00:56:53,280 --> 00:56:53,600
Fine.

898
00:56:54,680 --> 00:56:56,160
Now look,

899
00:56:56,160 --> 00:56:59,960
so here I'm going to provide
first base then me

900
00:57:00,000 --> 00:57:01,600
what is the header

901
00:57:07,320 --> 00:57:07,560
base.

902
00:57:07,560 --> 00:57:15,720
What is there that I should provide here?

903
00:57:15,720 --> 00:57:16,800
Content.

904
00:57:17,400 --> 00:57:17,960
Right.

905
00:57:18,240 --> 00:57:20,600
And the value should be

906
00:57:20,600 --> 00:57:23,080
it should be application slash

907
00:57:23,360 --> 00:57:38,160
Jason Dot dot.

908
00:57:38,480 --> 00:57:44,440
What is the next thing I is, guys?

909
00:57:44,440 --> 00:57:45,640
What is the next thing?

910
00:57:45,640 --> 00:57:47,440
I should go here

911
00:57:49,560 --> 00:57:49,960
again.

912
00:57:49,960 --> 00:57:53,280
Here to my authorization.

913
00:57:53,360 --> 00:57:56,920
No, there is we are going
to generate the token this time the member

914
00:57:57,240 --> 00:57:59,840
so for generating the token we need body

915
00:58:00,560 --> 00:58:03,080
collect, we need body.

916
00:58:03,480 --> 00:58:06,360
So here, here
we will going to provide the body.

917
00:58:06,560 --> 00:58:07,280
Right.

918
00:58:07,560 --> 00:58:09,240
Which body

919
00:58:09,720 --> 00:58:12,040
now which body we are talking about here.

920
00:58:12,040 --> 00:58:17,040
This is the body which we provided
for generating the token.

921
00:58:17,400 --> 00:58:18,920
So this is the body we need.

922
00:58:18,920 --> 00:58:21,320
Well we have imminent password.

923
00:58:21,320 --> 00:58:23,400
Right. Dead body we need. Yes. Correct.

924
00:58:23,840 --> 00:58:26,160
So we provided this dead body here.

925
00:58:26,440 --> 00:58:27,720
Everyone understood this

926
00:58:29,320 --> 00:58:30,880
one had to be provided one

927
00:58:30,880 --> 00:58:36,280
dead body state.

928
00:58:36,280 --> 00:58:40,000
Is this clear why we provided this

929
00:58:46,240 --> 00:58:47,640
perfect

930
00:59:01,200 --> 00:59:02,000
guys?

931
00:59:02,120 --> 00:59:03,120
Yeah.

932
00:59:03,120 --> 00:59:04,560
It is not the same as yours.

933
00:59:04,560 --> 00:59:05,040
Your piece.

934
00:59:05,040 --> 00:59:08,520
This code is called Relations.

935
00:59:08,520 --> 00:59:10,040
Based on if.

936
00:59:10,040 --> 00:59:13,240
If there is some internet
connectivity issue, do let me know.

937
00:59:13,240 --> 00:59:13,800
Right.

938
00:59:13,840 --> 00:59:16,000
Because above
what is going on as you can see here.

939
00:59:16,400 --> 00:59:16,920
Got it.

940
00:59:16,920 --> 00:59:19,800
And it's raining crazy, obscene.

941
00:59:19,920 --> 00:59:21,920
I don't know where it started.

942
00:59:21,920 --> 00:59:22,520
It is raining.

943
00:59:22,520 --> 00:59:23,160
Please

944
00:59:30,920 --> 00:59:34,880
put the correct amount of

945
00:59:40,680 --> 00:59:41,800
this is not my problem.

946
00:59:41,800 --> 00:59:44,400
This is my U.P. is right because of that.

947
00:59:44,400 --> 00:59:47,520
I'm getting this temporary power
right now.

948
00:59:47,520 --> 00:59:52,800
So for some time it works.

949
00:59:52,800 --> 00:59:54,880
Yeah. One month cutting works.

950
00:59:54,880 --> 01:00:06,600
Now, congratulations to this.

951
01:00:06,600 --> 01:00:10,440
Our API knows that it should go to a text
rather than instead the end.

952
01:00:10,680 --> 01:00:12,160
We are coming to that point.

953
01:00:12,160 --> 01:00:13,560
We are coming to that point and we

954
01:00:15,200 --> 01:00:19,640
so far this part correct.

955
01:00:19,640 --> 01:00:22,280
This is how we are preparing the request.

956
01:00:22,680 --> 01:00:27,800
So now, now what I'm going to do
is to send this particular bar.

957
01:00:27,840 --> 01:00:30,200
I have to write generate,

958
01:00:31,560 --> 01:00:35,440
generate, token request dog, then

959
01:00:36,280 --> 01:00:40,200
dog post

960
01:00:40,800 --> 01:00:41,720
post.

961
01:00:41,720 --> 01:00:46,680
And here I have to provide
I have to provide this particular part

962
01:00:46,680 --> 01:00:49,080
for generating the token and point post

963
01:00:50,520 --> 01:00:52,960
I have to
provide is main point for us to select.

964
01:00:52,960 --> 01:00:54,960
We provide within 20. Correct.

965
01:00:55,560 --> 01:00:58,160
But it is going to generate the token

966
01:00:58,720 --> 01:01:02,640
the final point of my token
should be something like this.

967
01:01:03,360 --> 01:01:06,680
Viera Space plus this token

968
01:01:07,960 --> 01:01:10,720
BNA is based plus this particular token.

969
01:01:11,400 --> 01:01:12,200
Correct.

970
01:01:12,680 --> 01:01:15,240
So this token, this token,

971
01:01:15,600 --> 01:01:18,680
I'm going to see it somewhere.

972
01:01:18,680 --> 01:01:20,440
This particular already exist.

973
01:01:20,440 --> 01:01:23,640
We have, you know,
this is the email already.

974
01:01:24,240 --> 01:01:26,600
This is the email ADB had, right?

975
01:01:26,880 --> 01:01:28,560
Retirement It is this.

976
01:01:28,560 --> 01:01:30,160
This is a mini milady.

977
01:01:30,160 --> 01:01:32,440
I think. So
we have to use this particular email.

978
01:01:32,440 --> 01:01:34,560
I need to generate the token.

979
01:01:34,720 --> 01:01:38,440
Alright.

980
01:01:38,440 --> 01:01:39,360
All right.

981
01:01:39,360 --> 01:01:42,280
Understood.

982
01:01:42,280 --> 01:01:52,840
Fine.

983
01:01:52,840 --> 01:01:56,280
So now, now here
what I'm going to do is see.

984
01:01:57,800 --> 01:01:58,480
I am going

985
01:01:58,480 --> 01:02:02,280
to write here first my token rate.

986
01:02:02,280 --> 01:02:04,680
I need this string as token. Correct.

987
01:02:05,400 --> 01:02:06,640
Now tell me this.

988
01:02:06,640 --> 01:02:09,400
I'm going to use this token
only at one place

989
01:02:09,400 --> 01:02:12,440
ordered all the other places
where I will use this token.

990
01:02:13,200 --> 01:02:15,680
All this is So can I make it public?

991
01:02:17,000 --> 01:02:19,120
Can I make it public now?

992
01:02:19,120 --> 01:02:21,400
I don't want to create the object
of this class.

993
01:02:21,400 --> 01:02:23,960
Also, I want to use this token directly.

994
01:02:24,960 --> 01:02:27,080
So can I use this to you?

995
01:02:27,080 --> 01:02:28,560
Start you thinking, Great.

996
01:02:28,560 --> 01:02:33,760
So here, Nancy, whatever the venue
you're taking, just save these values.

997
01:02:33,760 --> 01:02:39,480
In this token, you would save this venue
in this token even right?

998
01:02:39,480 --> 01:02:40,120
Right.

999
01:02:42,960 --> 01:02:46,120
Thank you, guys.

1000
01:02:46,120 --> 01:02:50,960
So first first here was to see
what we are going to do.

1001
01:02:51,760 --> 01:02:53,160
This part.

1002
01:02:53,160 --> 01:02:55,000
This part when we're dating. Right.

1003
01:02:55,000 --> 01:02:56,280
Sorry. My right.

1004
01:02:56,280 --> 01:03:03,360
First we have to use our response.

1005
01:03:03,360 --> 01:03:07,200
Response I'm going to use
from my generate token part

1006
01:03:07,440 --> 01:03:10,480
like not when forced

1007
01:03:14,960 --> 01:03:16,680
first thing we are going to get it

1008
01:03:16,680 --> 01:03:24,400
like this. See?

1009
01:03:24,400 --> 01:03:27,960
And from this response from this response.

1010
01:03:28,080 --> 01:03:30,640
Sorry I should change this

1011
01:03:30,840 --> 01:03:32,760
from this particular response.

1012
01:03:32,760 --> 01:03:37,920
I'm going to get this token,
this token using JSON.

1013
01:03:37,920 --> 01:03:41,520
But is it isn't post

1014
01:03:41,520 --> 01:03:44,760
So the citizens of this should be my most

1015
01:03:45,840 --> 01:03:47,880
decent part object, right?

1016
01:03:47,880 --> 01:03:52,440
Because every time for retrieving
the value from the response body.

1017
01:03:52,440 --> 01:03:54,440
Yeah, right.

1018
01:03:54,480 --> 01:03:56,520
Just because I was just taking my control

1019
01:03:56,560 --> 01:04:00,160
is to put inside of wasp final.

1020
01:04:00,600 --> 01:04:03,640
So guys when I got this
response complete response.

1021
01:04:03,800 --> 01:04:07,240
So from the response body,
if I want to retrieve something,

1022
01:04:07,240 --> 01:04:11,160
I have to use this JSON,
but plus JSON part the method.

1023
01:04:11,360 --> 01:04:16,440
So I'm going to use
don't get string, get a stream of what

1024
01:04:17,440 --> 01:04:20,720
it's doing of my of my token.

1025
01:04:21,240 --> 01:04:22,720
So this token is available.

1026
01:04:22,720 --> 01:04:26,240
Well, if you see here in the body
you get a string

1027
01:04:26,240 --> 01:04:29,720
called token which might be remember this
this gives sensitive.

1028
01:04:29,880 --> 01:04:30,480
Right.

1029
01:04:30,480 --> 01:04:34,480
So whatever the value is available
against this key token,

1030
01:04:34,680 --> 01:04:39,000
it will be stored in this particular token
part.

1031
01:04:39,000 --> 01:04:41,120
It'll be stored in this particular
token part.

1032
01:04:41,280 --> 01:04:46,000
And here
I can simply print this tokenized.

1033
01:04:46,000 --> 01:04:51,480
There is any question in this part,
in this part,

1034
01:04:51,480 --> 01:04:52,880
any question is

1035
01:05:04,400 --> 01:05:05,120
here.

1036
01:05:05,320 --> 01:05:07,720
So firstly, everyone

1037
01:05:14,760 --> 01:05:18,640
now know what is broken
inside that gated string.

1038
01:05:18,960 --> 01:05:21,720
This token is coming under the body.

1039
01:05:22,120 --> 01:05:24,760
See, this is the body inside body.

1040
01:05:24,760 --> 01:05:26,320
This token is returning, right?

1041
01:05:26,320 --> 01:05:28,800
My request is returning, that is bonds.

1042
01:05:28,800 --> 01:05:30,760
So having the key token.

1043
01:05:30,760 --> 01:05:33,720
So that way we were using employee
not employ

1044
01:05:33,720 --> 01:05:37,120
a B to get one particular employed here.

1045
01:05:37,120 --> 01:05:39,640
We don't have anything like that.
We have simple tokens.

1046
01:05:39,640 --> 01:05:44,160
I'm providing token with good string
because in return it is returning.

1047
01:05:44,160 --> 01:05:48,600
Even if it was integer,
I should have gone get integer right.

1048
01:05:48,960 --> 01:05:50,640
And then we are storing it here.

1049
01:05:50,640 --> 01:05:51,800
So why Vienna?

1050
01:05:51,800 --> 01:05:55,320
Because my final value of token
is Vienna Space.

1051
01:05:55,320 --> 01:05:56,800
The value of token.

1052
01:05:56,800 --> 01:05:59,520
Can you copy? Best 18 to 23 for me.

1053
01:05:59,920 --> 01:06:01,240
18 to 23.

1054
01:06:01,240 --> 01:06:03,520
This particular part, this part.

1055
01:06:03,720 --> 01:06:06,160
So can someone please
copy and paste it here in the check?

1056
01:06:06,720 --> 01:06:07,920
But my dear friend Lou

1057
01:06:13,280 --> 01:06:15,760
offered.

1058
01:06:15,760 --> 01:06:23,360
Come on.

1059
01:06:23,360 --> 01:06:25,480
Yeah. Again, you just.

1060
01:06:25,480 --> 01:06:27,200
You just can't.

1061
01:06:27,400 --> 01:06:32,880
You just count this?

1062
01:06:32,880 --> 01:06:33,680
Fine.

1063
01:06:34,040 --> 01:06:39,240
Now, see, guys, if I go in my remote
class, if I go in my render class

1064
01:06:39,240 --> 01:06:43,160
here, instead of providing
this is dipped in glue.

1065
01:06:43,320 --> 01:06:45,360
Because why we provide glue.

1066
01:06:45,360 --> 01:06:48,800
Glue always provide
the part of the package we are here.

1067
01:06:48,800 --> 01:06:50,760
Define all the steps. Right.

1068
01:06:50,760 --> 01:06:54,520
So in our runner class,
instead of providing glue, it states

1069
01:06:54,720 --> 01:06:58,840
we are going to provide
this particular bar as

1070
01:06:59,760 --> 01:07:03,240
as API steps.

1071
01:07:03,960 --> 01:07:05,400
API steps.

1072
01:07:05,400 --> 01:07:09,720
So now, now instead of targeting
two steps folder,

1073
01:07:09,920 --> 01:07:13,680
it will target two API scripts
for API steps.

1074
01:07:13,680 --> 01:07:14,640
Package

1075
01:07:17,640 --> 01:07:20,040
video not working for you.

1076
01:07:20,040 --> 01:07:25,680
How about others?

1077
01:07:25,680 --> 01:07:49,280
See now?

1078
01:07:49,280 --> 01:07:55,120
Fine.

1079
01:07:55,120 --> 01:07:56,880
Now this time.

1080
01:07:56,880 --> 01:07:58,960
This time this time going to execute.

1081
01:07:59,160 --> 01:08:02,000
It will go to my API steps package.

1082
01:08:02,000 --> 01:08:07,600
It will go to my API steps package.

1083
01:08:07,600 --> 01:08:08,800
My favorite one by the way

1084
01:08:10,880 --> 01:08:12,680
positions because I don't go

1085
01:08:12,680 --> 01:08:15,760
out so there is nothing up is eight
based on good for me.

1086
01:08:16,520 --> 01:08:18,800
Now when I go out it's

1087
01:08:18,800 --> 01:08:32,520
what is correct.

1088
01:08:33,240 --> 01:08:35,800
So now this time being executed right?

1089
01:08:35,800 --> 01:08:40,200
It will execute my API steps package
under this EPA steps package.

1090
01:08:40,200 --> 01:08:42,720
Whatever the class
we have provided with this bag,

1091
01:08:42,800 --> 01:08:45,800
it will create
and it will make each event from this.

1092
01:08:45,800 --> 01:08:46,360
Right.

1093
01:08:46,360 --> 01:08:49,680
So let's run
this particular run of API, run from here.

1094
01:08:49,680 --> 01:08:57,560
This time
I hope everyone understood this point.

1095
01:08:57,560 --> 01:09:07,400
Let's run this.

1096
01:09:07,400 --> 01:09:10,400
See it says generating their token, right?

1097
01:09:11,080 --> 01:09:17,360
It says generating the token,
but it's not printing the token.

1098
01:09:17,360 --> 01:09:22,080
Oh, come on, I see your need.

1099
01:09:23,800 --> 01:09:24,480
You have to do.

1100
01:09:24,480 --> 01:09:25,920
You should have told me earlier.

1101
01:09:25,920 --> 01:09:28,000
You should have
informed me earlier. Right?

1102
01:09:29,040 --> 01:09:30,440
You're not.

1103
01:09:30,440 --> 01:09:35,240
You're not of any fastest pulling.

1104
01:09:35,240 --> 01:09:35,880
Just kidding.

1105
01:09:35,880 --> 01:09:45,520
Let me read it again.

1106
01:09:45,520 --> 01:09:47,440
Got it, guys.

1107
01:09:47,440 --> 01:09:50,080
Got this token or not,

1108
01:09:50,080 --> 01:09:51,600
we are able to generate the token.

1109
01:09:51,600 --> 01:10:01,440
No, I hope everybody's getting my point.

1110
01:10:02,000 --> 01:10:20,200
We are able to generate the token. No.

1111
01:10:20,200 --> 01:10:23,960
Any questions of our students?

1112
01:10:23,960 --> 01:10:26,000
Any confusion, anything?

1113
01:10:26,800 --> 01:10:31,560
This is our feature right.

1114
01:10:31,560 --> 01:10:33,560
Make sure the steps, please. For sure.

1115
01:10:33,560 --> 01:10:34,560
Why not?

1116
01:10:35,080 --> 01:10:39,040
This is the steps.

1117
01:10:39,040 --> 01:10:41,360
First, we simply create a request.

1118
01:10:41,760 --> 01:10:43,280
We hit the end point.

1119
01:10:43,280 --> 01:10:44,360
We got the response.

1120
01:10:44,360 --> 01:10:48,480
That is the only thing we and we have been
doing the same thing since now.

1121
01:10:49,200 --> 01:11:09,080
Correct.

1122
01:11:09,080 --> 01:11:10,280
Let me commit the code.

1123
01:11:10,280 --> 01:12:55,680
Meanwhile,

1124
01:12:55,680 --> 01:12:59,360
this code is committed to

1125
01:13:03,520 --> 01:13:05,520
whatever the things we doing so far.

1126
01:13:05,520 --> 01:13:08,240
It is committed already in the deposit
to get everyone.

1127
01:13:08,240 --> 01:13:09,840
Please check confirm this

1128
01:13:30,360 --> 01:13:30,960
so far.

1129
01:13:30,960 --> 01:13:50,880
Is this clear to everyone?

1130
01:13:50,880 --> 01:13:53,000
There is any question.

1131
01:13:53,000 --> 01:13:54,680
Please ask any question.

1132
01:13:54,680 --> 01:13:57,880
I know you guys busy in writing the code,
but please ask.

1133
01:13:58,080 --> 01:13:59,520
I'm giving your time. No issues.

1134
01:13:59,520 --> 01:14:01,560
I'll give you 40 minutes
to write everything.

1135
01:14:01,560 --> 01:14:02,480
Nobody

1136
01:14:14,640 --> 01:14:15,360
got it.

1137
01:14:15,360 --> 01:14:20,800
So the small chunk of code Benham writing
rate and developing this team code.

1138
01:14:20,880 --> 01:14:24,840
First, I'm committing to the repository
so that you can get the object code

1139
01:14:24,840 --> 01:14:26,680
from there,
and then we will proceed further.

1140
01:14:26,680 --> 01:14:30,640
There is a strategy of following them to

1141
01:14:36,120 --> 01:14:39,320
a legal target was
does not really provide this part.

1142
01:14:39,360 --> 01:14:50,920
Rest assured, this part redeployed.

1143
01:14:50,920 --> 01:14:53,520
Then why is this not
They should not be the

1144
01:15:00,480 --> 01:15:03,600
because there are just two things that
only just one thing actually we wrote.

1145
01:15:03,600 --> 01:15:07,440
One is that in feature
and we wrote this particular code

1146
01:15:07,440 --> 01:15:08,640
against that particular feature,

1147
01:15:08,640 --> 01:15:12,480
the exec window, and we didn't do anything
and we are not posting

1148
01:15:12,480 --> 01:15:13,520
anything from anywhere.

1149
01:15:13,520 --> 01:15:16,760
So why the most is that
can you please check this particular part?

1150
01:15:16,760 --> 01:15:20,080
Are you using a strip
club slash along with this

1151
01:15:25,600 --> 01:15:27,400
HTP colon double slash and

1152
01:15:27,400 --> 01:15:30,600
then the complete part used is complete,
but that would work.

1153
01:15:31,240 --> 01:15:33,480
That should work actually

1154
01:15:57,600 --> 01:15:58,840
is not so correct.

1155
01:15:58,840 --> 01:16:01,280
Now we have the formula, right?
We have the method.

1156
01:16:01,280 --> 01:16:05,760
This method generate token every time
before making any point rate.

1157
01:16:05,920 --> 01:16:08,680
So then we don't have to take care
of this thing, right?

1158
01:16:08,760 --> 01:16:10,680
It will generate token automatically.

1159
01:16:10,680 --> 01:16:12,560
It will use this token automatically.

1160
01:16:12,560 --> 01:16:16,440
Every regulator

1161
01:16:35,280 --> 01:16:37,720
or human

1162
01:16:37,720 --> 01:16:55,080
to set this peg workflow.

1163
01:16:55,080 --> 01:16:57,280
Yes. Correct.

1164
01:16:57,520 --> 01:16:58,200
Detect

1165
01:16:59,320 --> 01:17:02,520
who gender token
any what to do with that with this case.

1166
01:17:02,520 --> 01:17:03,840
Normally I was going to do that.

1167
01:17:03,840 --> 01:17:07,360
We should not provide this any tag
or anything between to automatically

1168
01:17:09,560 --> 01:17:11,400
use the feature of Kimber.

1169
01:17:11,400 --> 01:17:15,280
Remember the feature of Google,
but that always executes

1170
01:17:17,280 --> 01:17:19,080
two things in Kimber.

1171
01:17:19,080 --> 01:17:21,520
That always executes.
The first is big down under.

1172
01:17:21,520 --> 01:17:25,200
When these hooks hooks we will not use
because we don't have the condition.

1173
01:17:25,200 --> 01:17:25,920
What's the condition?

1174
01:17:25,920 --> 01:17:28,320
Big company does in background.

1175
01:17:28,320 --> 01:17:30,320
We can provide this just before token.

1176
01:17:30,320 --> 01:17:33,480
So before making any request posted
will generate the token,

1177
01:17:33,720 --> 01:17:37,320
then it will prepare the request
and then it will call rate.

1178
01:17:37,800 --> 01:17:40,120
Because in preparing the request
also we need token.

1179
01:17:40,320 --> 01:17:42,520
So first
we will generate the token in every become

1180
01:17:43,480 --> 01:17:44,560
one. But

1181
01:17:44,560 --> 01:17:47,120
can you open your console by anything?

1182
01:17:47,440 --> 01:17:53,440
This is my console one.

1183
01:17:53,480 --> 01:17:55,920
Check your off top question. No,

1184
01:17:57,360 --> 01:17:58,520
please ask if you have.

1185
01:17:58,520 --> 01:18:00,720
Yeah if you have is ask

1186
01:18:00,720 --> 01:18:04,160
a one that Please check
your Triton is equal to true or false.

1187
01:18:04,160 --> 01:18:12,920
If it is true, make it false
and then it will break.

1188
01:18:12,920 --> 01:18:14,640
You can always ask.

1189
01:18:14,640 --> 01:18:20,080
Please ask.

1190
01:18:20,080 --> 01:18:22,480
It depends. It completely depends.

1191
01:18:22,680 --> 01:18:26,200
There is always huge requirement
for that huge request.

1192
01:18:26,200 --> 01:18:29,240
We've always rate up,

1193
01:18:29,720 --> 01:18:32,920
but it depends how you can contribute it.

1194
01:18:32,960 --> 01:18:37,600
How much you know, because there is
it can never be a straightforward.

1195
01:18:37,600 --> 01:18:38,440
You could

1196
01:18:41,400 --> 01:18:43,800
al-Fadhli I'm talking about this guy

1197
01:18:45,000 --> 01:18:50,320
but one that yes.

1198
01:18:50,320 --> 01:18:51,800
Are you brothers?

1199
01:18:51,800 --> 01:18:53,760
Are you would brothers

1200
01:18:54,160 --> 01:18:58,000
even you you're not going to see

1201
01:18:59,280 --> 01:19:00,400
my given is right.

1202
01:19:00,400 --> 01:19:02,160
It's an import problem.

1203
01:19:02,160 --> 01:19:03,960
It's an import problem.

1204
01:19:03,960 --> 01:19:08,600
Just think the import raid rate like this.

1205
01:19:08,600 --> 01:19:10,960
Yeah,
just rate like this even could convert.

1206
01:19:10,960 --> 01:19:12,760
Or Java. Not this one. Sorry,

1207
01:19:13,720 --> 01:19:14,920
not this one.

1208
01:19:14,920 --> 01:19:16,720
See, this is the import problem.

1209
01:19:16,720 --> 01:19:19,080
Just this import to give a rate.

1210
01:19:19,720 --> 01:19:27,920
So rest assured, given this one.

1211
01:19:27,920 --> 01:19:30,000
All right

1212
01:19:38,840 --> 01:19:40,680
it would are brothers

1213
01:19:46,560 --> 01:19:48,600
you'll get it is the same repository.

1214
01:19:48,600 --> 01:19:51,400
It is the same repository

1215
01:19:52,640 --> 01:19:55,320
the Kimber 11 from Bahrain Elementary.

1216
01:19:55,360 --> 01:19:58,400
What we have it's the only

1217
01:19:59,360 --> 01:20:03,360
nice and then why are you asking one
can ask the question

1218
01:20:03,360 --> 01:20:06,520
and another
will automatically get answer say

1219
01:20:09,360 --> 01:20:10,680
but output is different.

1220
01:20:10,680 --> 01:20:18,000
No virus.

1221
01:20:18,000 --> 01:20:20,160
Are you printing this

1222
01:20:20,640 --> 01:20:24,960
because I don't see you provided us
with not well what did they jumpstarted?

1223
01:20:24,960 --> 01:20:26,880
It was this the host is none.

1224
01:20:26,880 --> 01:20:29,160
I just answer to this question.

1225
01:20:29,160 --> 01:20:31,640
I just answer to
this question is check your base.

1226
01:20:31,640 --> 01:20:32,080
You are right.

1227
01:20:32,080 --> 01:20:38,320
It is correct or not. Now.

1228
01:20:38,400 --> 01:20:40,400
Good. Please check your train.

1229
01:20:40,440 --> 01:20:44,400
And then is it to do first
or second thing?

1230
01:20:44,640 --> 01:20:45,600
Provide this part?

1231
01:20:46,760 --> 01:20:47,760
So the standard order

1232
01:20:47,760 --> 01:20:52,920
print, you know, if you go on a break

1233
01:20:53,240 --> 01:20:57,480
to meet owners, all their queries
boost their produce first rate

1234
01:20:58,040 --> 01:21:00,840
I was expecting from
you also to resolve this queries

1235
01:21:01,840 --> 01:21:04,480
on your intelligent

1236
01:21:04,480 --> 01:21:05,160
rate.

1237
01:21:05,880 --> 01:21:07,400
You should be the leader now.

1238
01:21:07,400 --> 01:21:10,560
You should be adhere to the class

1239
01:21:10,800 --> 01:21:11,560
is trained base.

1240
01:21:11,560 --> 01:21:14,960
You are as equal to this
this particular part it right?

1241
01:21:15,560 --> 01:21:17,120
Oh, it is what I'm going to write.

1242
01:21:17,120 --> 01:21:19,200
Not for me then you'll either perfect

1243
01:21:20,520 --> 01:21:21,720
or release

1244
01:21:22,920 --> 01:21:24,960
any question in this

1245
01:21:28,320 --> 01:21:29,400
business contract.

1246
01:21:29,400 --> 01:21:31,200
And is it cost control for omron.

1247
01:21:31,200 --> 01:21:35,680
Check your with your I
but anyone was still not able to do

1248
01:21:35,680 --> 01:21:37,600
libraries. None

1249
01:21:40,560 --> 01:21:42,480
Are you providing this token spin
incorrect?

1250
01:21:42,480 --> 01:21:45,640
Doesn't matter. Don't get this free token

1251
01:21:45,640 --> 01:21:48,160
right then take the object
quote from the repository.

1252
01:21:48,480 --> 01:21:55,240
It will work.

1253
01:21:55,240 --> 01:21:57,240
Take the ability
quote from the repository.

1254
01:21:57,240 --> 01:22:08,120
It will definitely work.

1255
01:22:08,120 --> 01:22:12,000
Check your blue. Oh,

1256
01:22:13,880 --> 01:22:15,920
it's just this is Boston.

1257
01:22:15,920 --> 01:22:17,400
So white blue

1258
01:22:21,840 --> 01:22:22,680
is what I'm saying.

1259
01:22:22,680 --> 01:22:24,360
You should have know.

1260
01:22:24,360 --> 01:22:27,720
I knew if you don't provide this token
for print

1261
01:22:27,880 --> 01:22:29,760
it will not work

1262
01:22:32,800 --> 01:22:33,280
already.

1263
01:22:33,280 --> 01:22:35,320
So let's take a break.

1264
01:22:35,640 --> 01:22:36,440
Let's take a break.

1265
01:22:36,440 --> 01:22:39,800
Think for 15 minutes
that be in after 15 minutes.

1266
01:22:39,800 --> 01:22:40,800
We've got it once.

1267
01:22:40,800 --> 01:22:46,320
Okay.

1268
01:22:46,320 --> 01:22:52,080
So now, guys, to get all the values
for all the end points, right?

1269
01:22:52,280 --> 01:22:55,320
We Are going to create constants

1270
01:22:55,320 --> 01:22:58,440
because these values are seen
in same values.

1271
01:22:58,440 --> 01:23:00,240
We should not. Plus hardcoded.

1272
01:23:00,240 --> 01:23:02,560
We have to parse these values.

1273
01:23:02,560 --> 01:23:04,760
Using are constants plus.

1274
01:23:05,120 --> 01:23:09,880
So in constants
I'm going to write public static

1275
01:23:11,160 --> 01:23:16,560
public static final public stating final.

1276
01:23:17,160 --> 01:23:19,360
So we write them with global variable.

1277
01:23:19,360 --> 01:23:19,920
Correct.

1278
01:23:19,920 --> 01:23:24,840
So all we need public is data final
and then is clean.

1279
01:23:24,840 --> 01:23:28,000
Because my BS you are

1280
01:23:28,040 --> 01:23:31,400
I is going to provide me this value.

1281
01:23:31,400 --> 01:23:32,440
So I'm going to write

1282
01:23:33,400 --> 01:23:36,280
this assured dot

1283
01:23:37,840 --> 01:23:38,240
base.

1284
01:23:38,240 --> 01:23:42,280
You are I is equals to my value my event.

1285
01:23:42,440 --> 01:23:43,200
Right.

1286
01:23:43,320 --> 01:23:47,280
So where is the value

1287
01:23:47,280 --> 01:23:48,280
that you

1288
01:23:52,400 --> 01:23:53,640
this is the host.

1289
01:23:53,640 --> 01:23:57,240
I'm going to provide the API constraints

1290
01:23:57,280 --> 01:24:00,840
which we going to use.

1291
01:24:00,840 --> 01:24:05,960
Then the next thing is next
thing is renewed want.

1292
01:24:06,480 --> 01:24:10,520
So guys remember complete complete base
you are

1293
01:24:10,560 --> 01:24:12,040
I see

1294
01:24:15,040 --> 01:24:18,320
when I need to call complete base
you are right

1295
01:24:18,800 --> 01:24:21,960
it is the combination of you
are plus end point or not

1296
01:24:23,720 --> 01:24:26,240
guys it is a combination of your illness

1297
01:24:26,280 --> 01:24:33,520
and or not.

1298
01:24:33,520 --> 01:24:34,120
Right.

1299
01:24:34,120 --> 01:24:38,560
So here when I provide this key gold base
you are I

1300
01:24:38,840 --> 01:24:42,720
if I add here, if I add here this endpoint

1301
01:24:42,880 --> 01:24:46,080
so it becomes my it becomes my final.

1302
01:24:46,080 --> 01:24:47,320
You are right. Right.

1303
01:24:47,320 --> 01:24:52,040
So it means at this point of time,
I don't need to create two parts.

1304
01:24:52,320 --> 01:24:55,800
Remember, I don't need to create two paths
given and went back to different parts.

1305
01:24:56,120 --> 01:25:00,360
So how I'm going to write
is let me show you in my constants.

1306
01:25:00,360 --> 01:25:02,640
I'm going to write public

1307
01:25:03,600 --> 01:25:08,640
static, public static final.

1308
01:25:08,640 --> 01:25:11,880
The string
I'm going to write for first create

1309
01:25:13,440 --> 01:25:16,080
employ underscore you on

1310
01:25:16,080 --> 01:25:19,080
I and here I'm to write this as base.

1311
01:25:19,080 --> 01:25:20,360
You are right

1312
01:25:20,840 --> 01:25:25,320
plus plus the endpoint of create employee.

1313
01:25:25,760 --> 01:25:29,760
So the end point of create employee is

1314
01:25:30,600 --> 01:25:32,040
let me check

1315
01:25:46,400 --> 01:25:48,760
create employment use this great.

1316
01:25:49,840 --> 01:25:52,240
So let me take this and I will start

1317
01:25:53,720 --> 01:25:57,160
now this particular part create
employ you are

1318
01:25:57,160 --> 01:26:01,360
I will return
my complete part will to my complete

1319
01:26:01,360 --> 01:26:07,160
pattern not based on me.

1320
01:26:07,160 --> 01:26:09,760
Similarly, I'm going to write a public

1321
01:26:10,840 --> 01:26:14,680
static find and string.

1322
01:26:14,680 --> 01:26:16,760
This time I'm going to write for the get

1323
01:26:20,280 --> 01:26:23,080
one. Okay,

1324
01:26:24,120 --> 01:26:28,720
you are again because you are a plus

1325
01:26:33,240 --> 01:26:33,840
for data.

1326
01:26:33,840 --> 01:26:35,760
One employee is this one.

1327
01:26:35,760 --> 01:26:37,920
So let me copy this.

1328
01:26:37,920 --> 01:26:41,760
And recitative.

1329
01:26:41,760 --> 01:26:43,680
Is this clear to everyone what I'm doing

1330
01:26:51,360 --> 01:26:52,160
right

1331
01:26:52,800 --> 01:26:55,440
then create employee,

1332
01:26:55,440 --> 01:26:59,640
get employee
then we will do for public static

1333
01:27:00,240 --> 01:27:03,720
final string

1334
01:27:04,840 --> 01:27:13,080
a B employee.

1335
01:27:13,080 --> 01:27:14,400
You are

1336
01:27:16,120 --> 01:27:19,960
you want a plus

1337
01:27:35,880 --> 01:27:37,720
is update employee

1338
01:27:37,720 --> 01:27:41,520
right this update employee and then public

1339
01:27:42,600 --> 01:27:47,800
static binder screen upgrade employee

1340
01:27:48,840 --> 01:27:52,600
get employee

1341
01:27:53,400 --> 01:28:12,720
you all employees

1342
01:28:13,160 --> 01:28:15,360
right then

1343
01:28:16,480 --> 01:28:18,600
public static

1344
01:28:19,760 --> 01:28:23,600
final screen

1345
01:28:25,080 --> 01:28:28,200
beat employee

1346
01:28:30,480 --> 01:28:31,880
you are

1347
01:28:50,160 --> 01:28:52,520
and then

1348
01:29:28,640 --> 01:29:30,960
generate to replace

1349
01:29:33,240 --> 01:29:35,160
days these all are

1350
01:29:35,160 --> 01:29:39,840
B these on are the main calls we have
right if you want to use you can add

1351
01:29:39,840 --> 01:29:44,080
badge can also get status
also lot of other things you can add

1352
01:29:44,400 --> 01:29:49,240
right now I'm going to use only the ones
which we will be using in our script.

1353
01:29:49,640 --> 01:29:49,920
Right?

1354
01:29:49,920 --> 01:29:51,320
Because rest are simple, normal.

1355
01:29:51,320 --> 01:29:53,280
Get once again take in Bachchan.

1356
01:29:53,280 --> 01:29:58,000
Also in our current operations,
either we create, we update right

1357
01:29:58,000 --> 01:29:59,240
with retrieve the data.

1358
01:29:59,240 --> 01:30:01,760
These all are the things we do. Fine.

1359
01:30:02,160 --> 01:30:05,320
Now this let's talk about another point

1360
01:30:05,320 --> 01:30:08,440
that these content type is means header

1361
01:30:08,760 --> 01:30:11,760
so that also I can provide
from here on the right.

1362
01:30:11,760 --> 01:30:14,520
So I'm going to right here stream.

1363
01:30:15,080 --> 01:30:17,600
The next is drink is I'm seeing the header

1364
01:30:20,520 --> 01:30:23,200
to contain.

1365
01:30:23,280 --> 01:30:25,800
I is equals to

1366
01:30:25,800 --> 01:30:29,040
the value of my header should be

1367
01:30:29,040 --> 01:30:31,440
contain.

1368
01:30:31,440 --> 01:30:35,480
So now we're not going to provide content
I we will simply provide this key.

1369
01:30:35,760 --> 01:30:39,400
So the model if things get changed
everything that I don't need

1370
01:30:39,400 --> 01:30:42,480
to change content type in the value
I will change it one place

1371
01:30:42,600 --> 01:30:47,040
and this will get a bit everywhere
right in here.

1372
01:30:47,040 --> 01:30:51,240
Public static final string.

1373
01:30:51,240 --> 01:30:54,320
And I'm seeing here right

1374
01:30:55,400 --> 01:30:56,800
content type of value.

1375
01:30:56,800 --> 01:30:58,080
So what is the value?

1376
01:30:58,080 --> 01:31:00,240
It is application

1377
01:31:01,800 --> 01:31:03,360
slash

1378
01:31:03,600 --> 01:31:09,600
slash, JSON.

1379
01:31:09,600 --> 01:31:13,320
Everyone getting my point

1380
01:31:15,720 --> 01:31:16,360
right

1381
01:31:17,120 --> 01:31:19,480
now, there is another header,

1382
01:31:19,480 --> 01:31:21,840
there is another headers
called authorization.

1383
01:31:22,200 --> 01:31:23,120
Remember that?

1384
01:31:23,120 --> 01:31:25,200
Another difficult authorization.

1385
01:31:25,200 --> 01:31:29,880
So I'm going to use bank header here
find and screen.

1386
01:31:29,920 --> 01:31:31,480
I'm seen

1387
01:31:31,800 --> 01:31:35,080
header and underscore or

1388
01:31:35,840 --> 01:31:36,800
authorization.

1389
01:31:36,800 --> 01:31:38,480
So what is the value of this?

1390
01:31:38,480 --> 01:31:41,440
The value is on to raise the

1391
01:31:42,120 --> 01:31:46,800
this is the new rate, right?

1392
01:31:47,680 --> 01:31:48,120
Everyone

1393
01:32:01,320 --> 01:32:01,680
everyone

1394
01:32:01,680 --> 01:32:08,600
got it.

1395
01:32:08,600 --> 01:32:10,080
Same thing. We're doing great.

1396
01:32:10,080 --> 01:32:13,920
Now tell me why I'm not going
to provide the value authorization here.

1397
01:32:14,320 --> 01:32:15,880
Why is it so

1398
01:32:21,240 --> 01:32:21,680
okay?

1399
01:32:22,400 --> 01:32:26,160
What is the value of authorization?

1400
01:32:26,160 --> 01:32:27,080
Yes. Correct.

1401
01:32:27,080 --> 01:32:32,720
Because every time every time
my token is changing paid, I will generate

1402
01:32:32,720 --> 01:32:37,520
new token for every single execution for,
every request I will generate new token

1403
01:32:37,880 --> 01:32:42,360
for that we already have that
functionalities integrate with us now.

1404
01:32:42,520 --> 01:32:46,320
Now, when we are done with this part,
when we are done with this part.

1405
01:32:46,320 --> 01:32:47,440
We proceed further.

1406
01:32:47,440 --> 01:32:49,480
What is the next thing we have to do?

1407
01:32:49,480 --> 01:32:50,880
So let's see

1408
01:33:11,160 --> 01:33:12,880
now, after this

1409
01:33:12,880 --> 01:33:16,440
I am going to write a simple scenario,
right?

1410
01:33:17,280 --> 01:33:19,080
I'm going to write a simple scenario.

1411
01:33:19,080 --> 01:33:22,080
So what is that scenario? See

1412
01:33:23,880 --> 01:33:24,520
here?

1413
01:33:24,520 --> 01:33:26,600
I will in my

1414
01:33:27,960 --> 01:33:32,160
feature by this is my feature first.

1415
01:33:32,160 --> 01:33:35,480
Now guys, there is a
do we have to declare it

1416
01:33:35,480 --> 01:33:37,160
final because the value gets changed.

1417
01:33:37,160 --> 01:33:38,640
Everything

1418
01:33:39,000 --> 01:33:43,560
final for what?

1419
01:33:43,560 --> 01:33:47,520
For token, not authorization.

1420
01:33:47,520 --> 01:33:49,480
Key is final.

1421
01:33:49,480 --> 01:33:49,760
Right?

1422
01:33:49,760 --> 01:33:54,320
See yet if you go
this authorization is the key.

1423
01:33:54,360 --> 01:33:58,000
This header authorization we believe so
this is final threaded.

1424
01:33:58,040 --> 01:34:01,640
This final authorization value
which we will going to provide

1425
01:34:01,680 --> 01:34:04,440
that is keys find final
when it was changing bait.

1426
01:34:04,640 --> 01:34:05,880
So we are making the key.

1427
01:34:05,880 --> 01:34:08,360
Find this key we are making find it

1428
01:34:09,240 --> 01:34:14,280
understood for us now.

1429
01:34:14,280 --> 01:34:15,200
So now here

1430
01:34:15,200 --> 01:34:19,120
I'm going to write once to evaluate
maybe having multiple scenarios for sure.

1431
01:34:19,680 --> 01:34:23,240
So no, not
when it comes to multiple employee rate.

1432
01:34:23,240 --> 01:34:28,400
When it comes to multiple employee,
if I need something that should execute

1433
01:34:28,440 --> 01:34:34,040
on always before execution of my scenario,
this particular feature find

1434
01:34:34,360 --> 01:34:38,160
what is the functionality here?

1435
01:34:38,160 --> 01:34:40,520
It is simple as before method.

1436
01:34:40,520 --> 01:34:42,280
Interestingly, we have something

1437
01:34:43,920 --> 01:34:46,840
perfect.

1438
01:34:46,840 --> 01:34:49,000
They count me here

1439
01:34:49,840 --> 01:34:51,000
background we have so

1440
01:34:51,000 --> 01:34:56,440
we can put this part in background,
maybe put this part in the grounds

1441
01:34:56,440 --> 01:34:59,200
because I'm going to execute this part
every everywhere.

1442
01:34:59,560 --> 01:35:01,920
So this is my background.

1443
01:35:01,920 --> 01:35:05,080
And this one,
the first one I'm going to work

1444
01:35:05,080 --> 01:35:07,680
is create an employee

1445
01:35:08,240 --> 01:35:13,400
via API.

1446
01:35:13,400 --> 01:35:17,280
The first thing I'm going to do
is I am going to create an employee

1447
01:35:18,120 --> 01:35:19,240
behavior

1448
01:35:20,520 --> 01:35:24,520
rate, clear student

1449
01:35:29,240 --> 01:35:33,240
Everyone.

1450
01:35:33,240 --> 01:35:36,120
So now here I am going to write

1451
01:35:36,120 --> 01:35:37,120
given

1452
01:35:38,720 --> 01:35:40,880
a request is prepared,

1453
01:35:41,280 --> 01:35:43,480
a request is prepared for

1454
01:35:45,320 --> 01:35:47,760
the acting employees

1455
01:35:48,200 --> 01:35:49,320
I'm seeing.

1456
01:35:49,320 --> 01:35:51,840
First we are going to prepare
the request replaced.

1457
01:35:53,280 --> 01:35:55,280
Remember one thing

1458
01:35:56,000 --> 01:35:59,480
when you are going to prepare request,
right?

1459
01:35:59,960 --> 01:36:04,440
So for preparing the request.

1460
01:36:04,440 --> 01:36:08,120
For preparing the request, we need a token

1461
01:36:09,560 --> 01:36:10,920
for token.

1462
01:36:10,920 --> 01:36:14,680
We already provided or JWT is generated.

1463
01:36:14,680 --> 01:36:17,160
So this particular step will return
the token

1464
01:36:17,760 --> 01:36:19,880
token really use in preparing the request

1465
01:36:20,920 --> 01:36:25,200
district and we will use implementing
the request that what we put JWT

1466
01:36:25,480 --> 01:36:27,840
token is generated on the upper site.

1467
01:36:29,040 --> 01:36:31,880
Okay.

1468
01:36:31,880 --> 01:36:38,160
All right, students,

1469
01:36:38,160 --> 01:36:39,360
let's

1470
01:36:41,560 --> 01:36:43,840
after this, we have to right here.

1471
01:36:45,000 --> 01:36:47,400
When I was going

1472
01:36:48,440 --> 01:36:50,440
to create the employee, we have to go.

1473
01:36:50,440 --> 01:36:53,880
We have to use
British method, also method, right?

1474
01:36:54,320 --> 01:36:58,600
So when a bold call is made to create,

1475
01:37:00,000 --> 01:37:04,200
create an employee to create an employee

1476
01:37:05,360 --> 01:37:09,000
in a post
call is made to create an employee,

1477
01:37:09,240 --> 01:37:12,600
then what would happen?

1478
01:37:12,600 --> 01:37:14,760
Then what would happen based

1479
01:37:17,760 --> 01:37:19,200
employee created,

1480
01:37:19,200 --> 01:37:24,680
then then the status, then the status code

1481
01:37:25,320 --> 01:37:30,880
for creating an employee is

1482
01:37:32,320 --> 01:37:33,640
what is the status quo. Today's

1483
01:37:36,440 --> 01:37:39,480
201 correct.

1484
01:37:40,240 --> 01:37:46,000
Their status code is 2012010.

1485
01:37:47,560 --> 01:37:51,720
Nice.

1486
01:37:51,720 --> 01:37:53,400
You created an employee.

1487
01:37:53,400 --> 01:38:06,880
They lose it.

1488
01:38:06,880 --> 01:38:08,520
No, this is not a string.

1489
01:38:08,520 --> 01:38:10,280
This is integer

1490
01:38:18,280 --> 01:38:19,000
moment.

1491
01:38:19,000 --> 01:38:20,560
This is a deja.

1492
01:38:20,560 --> 01:38:21,480
This is not interesting.

1493
01:38:21,480 --> 01:38:24,720
If it was a string,
we would have provided a value like this

1494
01:38:26,280 --> 01:38:27,440
Guinea for constants for us.

1495
01:38:27,440 --> 01:38:29,880
I can also
I will not show it for second time.

1496
01:38:29,880 --> 01:38:32,200
It should for I'm going to see

1497
01:38:41,040 --> 01:38:42,680
why my undefined steps

1498
01:38:42,680 --> 01:38:45,120
are not highlighted in my beta flight.

1499
01:38:46,920 --> 01:38:48,600
How would I know

1500
01:38:48,600 --> 01:38:50,880
this is something unusual, right?

1501
01:38:51,240 --> 01:38:53,840
Ideally they should highlight.

1502
01:38:54,000 --> 01:38:55,640
They should highlight

1503
01:39:00,000 --> 01:39:01,720
when we get a note.

1504
01:39:01,960 --> 01:39:03,480
We have already figured out great.

1505
01:39:03,480 --> 01:39:04,880
So many issues.

1506
01:39:04,880 --> 01:39:05,680
We figured it out.

1507
01:39:05,680 --> 01:39:07,920
This issue already

1508
01:39:08,760 --> 01:39:11,880
maybe need to go to sleep before

1509
01:39:11,880 --> 01:39:13,680
strange time.

1510
01:39:13,880 --> 01:39:15,680
Nice. See

1511
01:39:21,720 --> 01:39:23,960
I thought the United States

1512
01:39:23,960 --> 01:39:27,240
but good can misquoting the method as well
it's beautiful part coding it

1513
01:39:28,640 --> 01:39:33,560
expected it can be stored in the method
as well instead of hardcoded no one.

1514
01:39:33,560 --> 01:39:37,280
But I will tell you right Like I said,
hold your horses first.

1515
01:39:37,280 --> 01:39:40,600
We'll go with the basic one,
then we'll go with the advanced one.

1516
01:39:41,000 --> 01:39:43,360
Right. And then so
and so on and so on. Like this.

1517
01:39:43,480 --> 01:39:50,720
Okay, fine.

1518
01:39:51,720 --> 01:39:55,440
So now after this things creating
an employee is fine,

1519
01:39:56,320 --> 01:40:00,000
but anything that we have to get
a different call,

1520
01:40:00,120 --> 01:40:03,240
we have to use a different code
to retrieve the information

1521
01:40:04,160 --> 01:40:05,040
or one scenario.

1522
01:40:05,040 --> 01:40:09,000
I should do everything.

1523
01:40:09,000 --> 01:40:15,720
What do you think?

1524
01:40:15,720 --> 01:40:20,560
I am creating the employee and
then I'm getting the date of the employee

1525
01:40:22,320 --> 01:40:24,960
right in my automation script.

1526
01:40:25,440 --> 01:40:28,760
The standard sees
the moment you create the employee

1527
01:40:29,680 --> 01:40:32,920
trained, the moment
you create the employee, same employee

1528
01:40:33,080 --> 01:40:36,720
take and check whether the same employee
is reflecting in the database or not.

1529
01:40:36,720 --> 01:40:38,480
Using date method

1530
01:40:40,400 --> 01:40:43,840
or simply you have to provide
a verification validation point.

1531
01:40:43,840 --> 01:40:44,280
Right?

1532
01:40:44,280 --> 01:40:48,000
So let's forget about get method check
whether you are getting employee

1533
01:40:48,000 --> 01:40:50,440
created message in the response body
or not.

1534
01:40:50,760 --> 01:40:51,680
Verification point.

1535
01:40:51,680 --> 01:40:55,040
Remember testing in days

1536
01:40:55,120 --> 01:40:57,160
remember testing Postman Right.

1537
01:40:57,360 --> 01:40:59,960
So we have to check
whether this particular message

1538
01:40:59,960 --> 01:41:03,240
employing created available in response
body or not.

1539
01:41:03,400 --> 01:41:07,920
Okay fine
it is available fine now give me employ 80

1540
01:41:08,000 --> 01:41:11,120
because this particular isn't
it better to make that

1541
01:41:11,160 --> 01:41:15,000
then condition for generic
like status code should be to zero one

1542
01:41:15,000 --> 01:41:20,400
so that we can use
it is to make then condition more generic.

1543
01:41:21,760 --> 01:41:24,600
The status quo should be two zero ones.

1544
01:41:24,640 --> 01:41:27,600
Great, we can do the same and we doing
will do it.

1545
01:41:27,600 --> 01:41:31,080
Seven Nobody will do. Don't care.

1546
01:41:31,120 --> 01:41:37,320
You get it now we are just
we should have it.

1547
01:41:37,560 --> 01:41:40,000
201 and 201 maybe.

1548
01:41:40,000 --> 01:41:42,960
Yes, we should put like this 2011
like this.

1549
01:41:42,960 --> 01:41:45,840
As of now, let me just read this step
and then we'll see this.

1550
01:41:45,920 --> 01:41:46,320
Good.

1551
01:41:46,680 --> 01:41:49,960
Okay, So remember is here

1552
01:41:51,000 --> 01:41:53,520
as we write it just we wrote in the post,

1553
01:41:53,520 --> 01:41:58,560
women were validating the message,
validating the value right,

1554
01:41:58,800 --> 01:42:04,080
and then the in hard coded exemplars
for Java, just a short API.

1555
01:42:04,080 --> 01:42:09,400
Also, we used we created an employee
and used that employee ID

1556
01:42:09,480 --> 01:42:12,080
for updating their data,
for deleting their data,

1557
01:42:12,080 --> 01:42:14,160
for partially operating
and getting their return.

1558
01:42:14,160 --> 01:42:15,960
So the same idea.

1559
01:42:15,960 --> 01:42:17,160
So what does it mean?

1560
01:42:17,160 --> 01:42:21,800
It Means the employee in which
we are going to get after creating

1561
01:42:21,800 --> 01:42:26,720
an employee will make it global variable,
will store it in the global variable,

1562
01:42:26,720 --> 01:42:30,320
and then we will use this particular
employ and write.

1563
01:42:30,480 --> 01:42:33,760
The one which we are generating
using this particular scenario

1564
01:42:33,920 --> 01:42:39,920
will use this employee
for further operations.

1565
01:42:39,920 --> 01:42:44,600
So everything we are going to automate now
automatically generating the token

1566
01:42:45,120 --> 01:42:48,160
fine automatically, creating an employee
fine,

1567
01:42:48,360 --> 01:42:51,760
automatically getting the bot,
getting the employee

1568
01:42:51,760 --> 01:42:54,960
80 of the created employee
and use it for further operations.

1569
01:42:54,960 --> 01:42:58,080
Every single thing we are doing
where automation, we just need

1570
01:42:58,080 --> 01:43:01,440
to click on one command
and everything will be done automatically.

1571
01:43:02,480 --> 01:43:06,640
The is

1572
01:43:06,640 --> 01:43:08,560
this clears clearance

1573
01:43:12,120 --> 01:43:16,160
lines so here I'm going to write and

1574
01:43:17,400 --> 01:43:20,080
and the employee

1575
01:43:22,120 --> 01:43:25,160
data contains key.

1576
01:43:25,560 --> 01:43:26,920
What is the key?

1577
01:43:26,920 --> 01:43:29,960
Key should be my message.

1578
01:43:30,840 --> 01:43:33,480
I will show you this and value should be

1579
01:43:35,240 --> 01:43:40,440
the value should be.

1580
01:43:40,440 --> 01:43:42,640
And before

1581
01:43:44,480 --> 01:43:46,640
we get this value and this key message

1582
01:43:46,640 --> 01:43:50,880
or not, see, when you create the employee,

1583
01:43:51,120 --> 01:43:54,560
it gives you this particular part
message is the key, right?

1584
01:43:54,560 --> 01:43:56,960
And employee created is the value
we get you.

1585
01:43:57,080 --> 01:43:59,120
Not everything received it date

1586
01:44:01,920 --> 01:44:04,080
every time we received

1587
01:44:05,720 --> 01:44:07,280
one student's

1588
01:44:19,720 --> 01:44:21,920
now we generated the employee.

1589
01:44:22,200 --> 01:44:23,960
We modified history to school.

1590
01:44:23,960 --> 01:44:26,280
We go to the message employee created.

1591
01:44:26,280 --> 01:44:27,560
Now main point.

1592
01:44:27,560 --> 01:44:28,840
What is that point?

1593
01:44:28,840 --> 01:44:31,680
We will use this particular part.

1594
01:44:32,040 --> 01:44:32,880
Which part?

1595
01:44:32,880 --> 01:44:35,480
This particular part of employee I.D.,

1596
01:44:35,640 --> 01:44:38,520
which we have generated here,
which we have created here.

1597
01:44:38,760 --> 01:44:42,720
We will use this particular employee
for the further operations.

1598
01:44:42,720 --> 01:44:43,200
Right.

1599
01:44:43,200 --> 01:44:46,680
So that I'm going to write and be in the

1600
01:44:48,000 --> 01:44:49,960
employee I.D.

1601
01:44:49,960 --> 01:44:51,000
delegates.

1602
01:44:51,000 --> 01:44:54,000
How can we get the employee I.D.?

1603
01:44:54,000 --> 01:44:57,160
I give you a
we have already got this employee.

1604
01:44:57,480 --> 01:45:01,240
How we generally define the employee

1605
01:45:01,320 --> 01:45:04,000
that is be used in hard coded example

1606
01:45:04,000 --> 01:45:06,560
from the entire body.

1607
01:45:06,840 --> 01:45:10,320
If I need one particular value,
how we do it, how we get one

1608
01:45:10,320 --> 01:45:16,720
particular relief from the internally.

1609
01:45:16,720 --> 01:45:18,400
Exactly.

1610
01:45:18,880 --> 01:45:21,840
Employment capital you your small e guys

1611
01:45:26,280 --> 01:45:30,000
capital one small one

1612
01:45:30,960 --> 01:45:32,600
go and take here

1613
01:45:32,600 --> 01:45:37,800
this employee for create an employee right
Creating the body in the response

1614
01:45:37,800 --> 01:45:41,400
we are getting this employee with

1615
01:45:42,400 --> 01:45:44,200
this employee with

1616
01:45:45,160 --> 01:45:48,480
in Istanbul we call it small

1617
01:45:48,480 --> 01:45:50,760
in any in New York so we got it small

1618
01:45:51,600 --> 01:45:54,840
not it's like capital train

1619
01:45:54,840 --> 01:45:57,680
so right you just getting this getting

1620
01:45:59,640 --> 01:46:00,720
docked

1621
01:46:02,120 --> 01:46:04,680
employee underscore i.t.

1622
01:46:05,640 --> 01:46:09,040
Great employer
and employee underscore it correct

1623
01:46:10,120 --> 01:46:12,880
is stored

1624
01:46:12,880 --> 01:46:15,320
as a global

1625
01:46:16,320 --> 01:46:17,640
variable.

1626
01:46:18,400 --> 01:46:19,800
Variable

1627
01:46:20,880 --> 01:46:24,840
to be used for

1628
01:46:26,080 --> 01:46:28,880
those calls to be used for.

1629
01:46:29,600 --> 01:46:30,760
Of course

1630
01:46:34,400 --> 01:46:35,120
pays.

1631
01:46:35,640 --> 01:46:36,280
Is this clear?

1632
01:46:36,280 --> 01:46:40,720
Super.

1633
01:46:40,720 --> 01:46:43,760
When you look from standard
everything is small by

1634
01:46:43,760 --> 01:46:47,320
you look at it at this much height

1635
01:46:47,320 --> 01:46:51,120
you should be grounded and everything

1636
01:46:52,800 --> 01:46:53,640
right?

1637
01:46:53,640 --> 01:46:55,080
It's a sign up arrogance.

1638
01:46:55,080 --> 01:46:56,760
They should not be arrogant as a Neumann.

1639
01:46:56,760 --> 01:46:59,880
We think

1640
01:47:02,880 --> 01:47:06,440
if a location is like hired
or if they did you sustain a bet against

1641
01:47:06,920 --> 01:47:10,600
because everything looks a smile from
the see are India.

1642
01:47:10,640 --> 01:47:14,760
Come here we are 1.5 billion
everyone is of

1643
01:47:14,760 --> 01:47:18,280
same size is here also yet on

1644
01:47:26,240 --> 01:47:27,080
right

1645
01:47:29,040 --> 01:47:30,280
the people call

1646
01:47:30,280 --> 01:47:34,720
this is the university of religion
Some say this is a city of legends.

1647
01:47:34,720 --> 01:47:38,680
We said this is a country of religious
1.5 billion indigenous.

1648
01:47:38,680 --> 01:47:39,120
We have

1649
01:47:40,920 --> 01:47:42,560
the greatness of this stuff

1650
01:47:42,560 --> 01:47:45,720
or don't talk about greatness

1651
01:47:45,720 --> 01:47:47,400
and don't talk about greatness.

1652
01:47:47,400 --> 01:47:52,800
Here the greatness is blowing
in the river, in bones, in fountains.

1653
01:47:52,800 --> 01:47:56,040
Every greatness is you

1654
01:47:59,720 --> 01:48:00,600
engaged.

1655
01:48:00,840 --> 01:48:11,400
So now what is the next thing?

1656
01:48:11,400 --> 01:48:13,480
Be built from
the bottom. Wants to see the heavens.

1657
01:48:13,480 --> 01:48:15,120
What are the top

1658
01:48:18,000 --> 01:48:19,320
mice? But

1659
01:48:24,160 --> 01:48:27,480
when I came to the Empire State Building,
everyone looks like someone.

1660
01:48:27,720 --> 01:48:29,760
Why did you

1661
01:48:29,840 --> 01:48:31,640
claim That part? Why?

1662
01:48:31,640 --> 01:48:32,520
What was the reason?

1663
01:48:32,520 --> 01:48:33,720
Beings

1664
01:48:35,760 --> 01:48:37,680
better suited your

1665
01:48:37,680 --> 01:48:40,200
for it to go here and it

1666
01:48:44,680 --> 01:48:45,760
all relates.

1667
01:48:45,760 --> 01:48:46,600
So now.

1668
01:48:46,600 --> 01:48:49,080
Now we have to generate steps

1669
01:48:54,200 --> 01:48:56,240
and part is providing from then

1670
01:48:56,400 --> 01:48:58,520
see and why we use these empty word

1671
01:49:00,080 --> 01:49:03,280
case, why we use engagement

1672
01:49:05,520 --> 01:49:06,840
supporting degree.

1673
01:49:06,840 --> 01:49:14,880
So after then when Angular is coming,
what does it mean?

1674
01:49:14,880 --> 01:49:15,640
What does it mean?

1675
01:49:15,640 --> 01:49:18,800
It means multiple verification
validation points.

1676
01:49:18,800 --> 01:49:22,200
Are there rate, multiple verification,
whether should points.

1677
01:49:22,480 --> 01:49:24,240
So one it first.

1678
01:49:24,240 --> 01:49:28,480
I'm really fine Mike 201 status good
API status good.

1679
01:49:28,680 --> 01:49:30,360
In second one I am ready.

1680
01:49:30,360 --> 01:49:34,120
Find one message and value
both and in third one

1681
01:49:34,320 --> 01:49:38,440
I'm not only redefining
but also storing the embroidery

1682
01:49:38,440 --> 01:49:41,640
which we are getting from the response
so that we can use this

1683
01:49:41,640 --> 01:49:44,680
particular employ as the global variable
every bit.

1684
01:49:45,520 --> 01:49:50,680
Correct these three validation points,
verification check points be synthetic for

1685
01:49:52,640 --> 01:49:54,680
if you want to dispute this

1686
01:50:07,560 --> 01:50:08,320
final

1687
01:50:11,040 --> 01:50:13,200
now let's generate the steps.

1688
01:50:13,200 --> 01:50:15,880
So again, I would go in my iPad and

1689
01:50:17,560 --> 01:50:19,480
I will make it true.

1690
01:50:19,480 --> 01:50:20,400
Right.

1691
01:50:21,720 --> 01:50:43,200
And then I'm going to run it.

1692
01:50:43,200 --> 01:50:46,040
We copy all these steps

1693
01:50:46,040 --> 01:50:50,280
and here in my iPad steps,
I have to create another class.

1694
01:50:50,640 --> 01:50:53,400
What is the name of the class base?

1695
01:50:53,400 --> 01:50:56,240
I'm going to write it.

1696
01:50:56,240 --> 01:50:58,600
API workflows.

1697
01:50:58,680 --> 01:51:00,480
It's simple

1698
01:51:00,600 --> 01:51:03,600
API, but across all the APIs
I'm going to put here

1699
01:51:03,600 --> 01:51:07,920
because there is no module as right,
there is no module as such.

1700
01:51:08,320 --> 01:51:11,080
That's why I'm going to write
this particular part here.

1701
01:51:11,080 --> 01:51:12,040
So see,

1702
01:51:12,680 --> 01:51:14,760
this is something I've written over here

1703
01:51:24,600 --> 01:51:27,680
while we were discussing
something important or you were discussing

1704
01:51:27,680 --> 01:51:39,720
about Russia Ukraine by then, Sebastian
is busy editing the pics.

1705
01:51:39,720 --> 01:51:42,000
So now, now you'll see here, right?

1706
01:51:42,000 --> 01:51:43,720
I provided Andrei,

1707
01:51:43,720 --> 01:51:47,760
I provided and in my scenario
remember too, and I provided in mercenary

1708
01:51:48,840 --> 01:51:49,680
based

1709
01:51:51,520 --> 01:51:54,200
after
then I provided to end in my scenario.

1710
01:51:54,200 --> 01:51:55,520
But here it took all three.

1711
01:51:55,520 --> 01:51:58,240
Then how intelligent making Uber is.

1712
01:51:58,440 --> 01:52:01,560
Campbell knows
the combined knows that will find

1713
01:52:01,560 --> 01:52:04,680
this is the part in continuation of then
so I should put

1714
01:52:04,680 --> 01:52:07,240
then only adding

1715
01:52:07,840 --> 01:52:16,680
content.

1716
01:52:16,680 --> 01:52:18,040
Now guys see one thing.

1717
01:52:18,040 --> 01:52:19,560
Let's check your java knowledge.

1718
01:52:19,560 --> 01:52:21,320
Also very basic.

1719
01:52:21,320 --> 01:52:24,440
I'm going to write here
request specification.

1720
01:52:24,440 --> 01:52:26,880
What about if we just this everywhere

1721
01:52:27,440 --> 01:52:30,400
use everywhere no issues are does

1722
01:52:30,400 --> 01:52:33,400
no issues are not relatively which

1723
01:52:33,400 --> 01:52:35,720
I we have already discussed
this particular tool.

1724
01:52:37,160 --> 01:52:39,240
Again it will generate the steps
with the keywords.

1725
01:52:40,640 --> 01:52:43,800
One keyword will be everywhere that

1726
01:52:48,760 --> 01:52:50,000
simple. You

1727
01:52:51,200 --> 01:52:53,280
guys guys did me

1728
01:52:53,640 --> 01:52:57,120
for preparing the request
for preparing the request.

1729
01:52:57,120 --> 01:53:07,280
What is the keyword I should use here?

1730
01:53:07,280 --> 01:53:08,280
Given keyword

1731
01:53:09,280 --> 01:53:11,680
dart, I would need header or not race.

1732
01:53:12,200 --> 01:53:14,800
I would need header rate.

1733
01:53:14,800 --> 01:53:17,160
Make sure make sure what we are doing.

1734
01:53:17,280 --> 01:53:20,760
Keep your mind open now we are going
to work on something critical.

1735
01:53:21,200 --> 01:53:23,200
See header.

1736
01:53:23,200 --> 01:53:25,920
So in header, what is the first thing
that we are going to use?

1737
01:53:25,920 --> 01:53:28,960
Contain take rate

1738
01:53:28,960 --> 01:53:30,000
students?

1739
01:53:30,080 --> 01:53:32,560
We content type is the first header.

1740
01:53:32,840 --> 01:53:38,160
Now should that providing
double code content they know

1741
01:53:38,160 --> 01:53:40,080
what should happen. Wade

1742
01:53:43,680 --> 01:53:46,880
I have to call my

1743
01:53:47,400 --> 01:53:52,440
my API constants

1744
01:53:53,520 --> 01:53:55,800
API constants not your DO strategy

1745
01:53:55,960 --> 01:53:58,440
constant simple API constants dog

1746
01:54:00,000 --> 01:54:01,200
I need header content.

1747
01:54:01,200 --> 01:54:03,720
I will see header content data.

1748
01:54:03,720 --> 01:54:06,520
It says the value is content type.

1749
01:54:06,960 --> 01:54:07,760
Fine.

1750
01:54:07,960 --> 01:54:10,800
Let's take this content and correct.

1751
01:54:12,720 --> 01:54:14,800
Is this correct based

1752
01:54:18,160 --> 01:54:20,280
first you need to extend are.

1753
01:54:20,280 --> 01:54:24,800
No, we don't need to extend them
simply with using the class reference.

1754
01:54:24,800 --> 01:54:30,280
I can use it right
then the value I'm going to provide.

1755
01:54:30,280 --> 01:54:32,720
So again,
what is the value of my content type? This

1756
01:54:34,640 --> 01:54:35,840
is a static metrics

1757
01:54:35,840 --> 01:54:38,400
frame, so
we can directly call these metrics guys.

1758
01:54:38,840 --> 01:54:42,360
What is the value of my content? They

1759
01:54:45,080 --> 01:54:47,280
again, API constants

1760
01:54:47,280 --> 01:54:51,640
DART Dart

1761
01:54:52,920 --> 01:54:56,520
content, correct.

1762
01:54:56,520 --> 01:54:58,000
Is this correct

1763
01:54:59,880 --> 01:55:01,080
application slashed just

1764
01:55:01,080 --> 01:55:04,440
and we've already provided
100 API constant.

1765
01:55:04,440 --> 01:55:07,800
So from there we are calling this
particular percolate and just every one

1766
01:55:11,160 --> 01:55:15,960
by DART.

1767
01:55:15,960 --> 01:55:18,600
Another header.

1768
01:55:18,600 --> 01:55:31,200
What is the annotated another header
these on transition so again

1769
01:55:31,720 --> 01:55:34,240
API constants

1770
01:55:34,240 --> 01:55:36,960
dart, I need header authorization.

1771
01:55:37,680 --> 01:55:41,360
Is this correct, is this correct header

1772
01:55:41,360 --> 01:55:43,200
authorization is

1773
01:55:50,520 --> 01:55:53,000
now what is the value?

1774
01:55:53,000 --> 01:55:57,960
What is the value of this?

1775
01:55:57,960 --> 01:56:01,960
What is the value of token authorization
when your token value rate

1776
01:56:02,000 --> 01:56:03,240
or token is coming from here?

1777
01:56:03,240 --> 01:56:09,360
And what do we have
any token here in this page?

1778
01:56:09,360 --> 01:56:10,800
No, we have to go and

1779
01:56:11,840 --> 01:56:14,080
generate token steps.

1780
01:56:14,080 --> 01:56:17,080
DART token

1781
01:56:17,080 --> 01:56:21,000
dart token right.

1782
01:56:21,000 --> 01:56:31,680
We are preparing this request for what?

1783
01:56:31,680 --> 01:56:40,080
We are preparing this request for what?

1784
01:56:40,080 --> 01:56:41,680
Creating the employee.

1785
01:56:41,680 --> 01:56:47,120
So do we need body or not?

1786
01:56:47,120 --> 01:56:51,000
No, we need moderate an X, we need body.

1787
01:56:51,120 --> 01:56:52,240
So don't

1788
01:56:53,160 --> 01:56:56,840
worry, don't put

1789
01:56:58,920 --> 01:57:01,240
now holy point

1790
01:57:04,360 --> 01:57:06,600
renewed body rate

1791
01:57:08,840 --> 01:57:09,560
in me.

1792
01:57:09,560 --> 01:57:13,440
Is this the right approach
that we always provide body

1793
01:57:13,440 --> 01:57:17,920
that we always provide body
in our main method, in our function

1794
01:57:18,320 --> 01:57:21,800
or record this body
from one particular place

1795
01:57:24,680 --> 01:57:27,040
we can call the body
from one particular place, right?

1796
01:57:27,240 --> 01:57:31,080
So for that
another constraints I'm going to create

1797
01:57:31,080 --> 01:57:36,000
and the name of these constants is API

1798
01:57:38,680 --> 01:57:42,560
be constants.

1799
01:57:42,560 --> 01:57:45,720
Another is a pay below the constants clear

1800
01:57:47,720 --> 01:57:48,920
variable one

1801
01:57:51,320 --> 01:57:53,760
in constant rate, API preload constant.

1802
01:57:53,760 --> 01:57:58,240
So just to make it clear that okay, this
particular constraint classes for payload

1803
01:57:58,240 --> 01:58:02,160
constraint and this particular constraint
this for all the variables inability.

1804
01:58:02,440 --> 01:58:02,760
Right

1805
01:58:04,160 --> 01:58:11,320
right.

1806
01:58:11,320 --> 01:58:12,280
That is going to be my point.

1807
01:58:12,280 --> 01:58:13,040
Duty one

1808
01:58:14,440 --> 01:58:17,720
to constants
class this one for specific node

1809
01:58:18,000 --> 01:58:24,200
and one for every single other part. If I

1810
01:58:26,160 --> 01:58:28,040
So now now here I'm

1811
01:58:28,040 --> 01:58:34,360
going to write a method called public data
and this method will return my string

1812
01:58:34,520 --> 01:58:39,240
because I'm going to provide to my body
in the string form and I'm going

1813
01:58:39,240 --> 01:58:42,080
to provide my body in the spring form
or so I'm going to create

1814
01:58:43,920 --> 01:58:47,040
employ, be,

1815
01:58:49,600 --> 01:58:52,640
create, employ, build based

1816
01:58:54,000 --> 01:58:56,200
in this method,
I'm going to write the string.

1817
01:58:56,200 --> 01:59:07,360
My with

1818
01:59:09,480 --> 01:59:11,480
a loop is equals to

1819
01:59:15,000 --> 01:59:18,080
the value of my payload, right?

1820
01:59:18,560 --> 01:59:22,560
So let me just take the value
of the payload from here.

1821
01:59:22,560 --> 01:59:23,760
The body.

1822
01:59:23,760 --> 01:59:26,960
So for creating the employee,
I have this particular body.

1823
01:59:26,960 --> 01:59:28,000
Can I use this? What is

1824
01:59:30,440 --> 01:59:31,120
this?

1825
01:59:31,200 --> 01:59:33,840
One more place is there from where
I can get this data,

1826
01:59:34,360 --> 01:59:36,480
from where I can get this one place?

1827
01:59:36,480 --> 01:59:38,400
Is this one more?

1828
01:59:38,880 --> 01:59:41,880
Either I can take it from was to an
or I can take it from

1829
01:59:41,880 --> 01:59:45,120
my EPA Bible called swagger

1830
01:59:46,440 --> 01:59:46,880
from there.

1831
01:59:46,880 --> 01:59:48,920
Also I can do it right.

1832
01:59:48,920 --> 01:59:52,560
So our favorite activity go to me.

1833
01:59:53,880 --> 01:59:56,760
Christine in Nas Google

1834
01:59:57,040 --> 01:59:58,240
gives Google

1835
02:00:03,960 --> 02:00:06,600
by now

1836
02:00:12,840 --> 02:00:16,680
the money and you'll get back to

1837
02:00:18,120 --> 02:00:23,520
and then the middle name is here.

1838
02:00:23,520 --> 02:00:25,040
New well in Z model.

1839
02:00:25,040 --> 02:00:26,240
No, Mom,

1840
02:00:27,440 --> 02:00:30,240
I don't know what is the Genghis Khan
giving it me

1841
02:00:31,400 --> 02:00:35,000
by? This should be 1988

1842
02:00:36,040 --> 02:00:38,160
radiation with 28 of BAB

1843
02:00:39,640 --> 02:00:42,760
is status is employee cloud note

1844
02:00:42,840 --> 02:00:46,640
because with this name
a person can only be a google fi

1845
02:00:49,160 --> 02:00:51,560
I provided about you guys clear

1846
02:00:54,120 --> 02:01:00,320
students.

1847
02:01:00,320 --> 02:01:02,960
I provided the moderate

1848
02:01:07,800 --> 02:01:08,400
point.

1849
02:01:08,960 --> 02:01:13,680
No. Now here
this method is going to return a string.

1850
02:01:13,680 --> 02:01:14,720
So what is this string?

1851
02:01:14,720 --> 02:01:17,760
It is going to return
create employee preload.

1852
02:01:18,800 --> 02:01:20,320
Create employee beta.

1853
02:01:20,320 --> 02:01:23,800
Is this clear?

1854
02:01:23,800 --> 02:01:26,800
Is this player
everyone first pardon or not?

1855
02:01:28,080 --> 02:01:30,240
Any question in this

1856
02:01:30,360 --> 02:01:30,800
Anyone?

1857
02:01:30,800 --> 02:01:41,920
Any question in this part?

1858
02:01:41,920 --> 02:01:43,920
Then simple.

1859
02:01:43,920 --> 02:01:48,480
Why did we create a method
instead of a variable?

1860
02:01:48,480 --> 02:01:53,200
So if you create variable rate,
you have to call all the variables

1861
02:01:54,920 --> 02:01:57,000
one by one, all the variables
you have to call.

1862
02:01:57,000 --> 02:01:59,240
But if you create matter,
you call just one method.

1863
02:01:59,240 --> 02:02:02,320
The matter will automatically call
all the variables of anyone inside

1864
02:02:02,320 --> 02:02:03,200
to great

1865
02:02:07,600 --> 02:02:08,200
state.

1866
02:02:08,440 --> 02:02:12,760
It's simply like you're asking
why I am writing 1000 lines of code

1867
02:02:12,760 --> 02:02:17,680
in one method and can't write thousand
lines of code in a separate part through.

1868
02:02:17,680 --> 02:02:21,160
But it is one variable.

1869
02:02:21,160 --> 02:02:22,000
Which variable

1870
02:02:25,720 --> 02:02:26,560
which we have.

1871
02:02:26,560 --> 02:02:30,960
See employ me first name
we didn't name last name date of birth.

1872
02:02:30,960 --> 02:02:32,760
We have a job title.

1873
02:02:32,760 --> 02:02:33,920
We have employee.

1874
02:02:33,920 --> 02:02:37,080
Everything from parameters of our method
for other

1875
02:02:37,080 --> 02:02:40,240
is the next step,
which is to me it is coming.

1876
02:02:40,240 --> 02:02:41,680
This is the first feature.

1877
02:02:41,680 --> 02:02:44,920
Find also the scenario operating state.

1878
02:02:45,600 --> 02:02:47,920
This is not the end of this scenario.

1879
02:02:47,920 --> 02:02:50,520
This is just the beginning. Great.

1880
02:02:50,520 --> 02:02:51,760
And one more thing.

1881
02:02:51,760 --> 02:02:55,200
If you're gonna solve
for the explain next point,

1882
02:02:56,520 --> 02:03:00,000
you can run your horse and you name them.

1883
02:03:00,000 --> 02:03:02,360
You should run
because now you are in the market.

1884
02:03:02,360 --> 02:03:04,800
In just one month
you'll be in the market, right?

1885
02:03:05,640 --> 02:03:07,960
Your horses are not running
even at this point.

1886
02:03:08,120 --> 02:03:09,840
Your horses are baked.

1887
02:03:09,840 --> 02:03:11,960
Believe me, you have dead horses.

1888
02:03:12,560 --> 02:03:13,440
I see what you mean.

1889
02:03:13,440 --> 02:03:21,600
I created employee
build as a single variable.

1890
02:03:21,600 --> 02:03:22,120
No, no, no.

1891
02:03:22,120 --> 02:03:23,800
I'm talking about the method.

1892
02:03:23,800 --> 02:03:26,720
So extend the framework estate. Right.

1893
02:03:26,960 --> 02:03:30,480
You're calling the same method,
but in that material, changing the values,

1894
02:03:30,480 --> 02:03:30,960
just that.

1895
02:03:30,960 --> 02:03:32,040
So that's the only thing.

1896
02:03:32,040 --> 02:03:33,960
We are doing it from here. And

1897
02:03:38,840 --> 02:03:40,240
now. Now

1898
02:03:40,240 --> 02:03:43,960
let's go to our API workflows dead.

1899
02:03:43,960 --> 02:03:46,320
And here I'm dead body.

1900
02:03:46,320 --> 02:03:48,360
I'm going to provide the data.

1901
02:03:48,520 --> 02:03:51,280
So my data is API

1902
02:03:52,440 --> 02:03:54,840
workflow, API

1903
02:03:55,200 --> 02:03:58,760
build constraints,
dog start employee pay loop,

1904
02:04:00,120 --> 02:04:04,720
create employee field, correct.

1905
02:04:04,720 --> 02:04:06,440
My heart is converted to it.

1906
02:04:06,440 --> 02:04:07,600
That's fine.

1907
02:04:08,240 --> 02:04:09,960
It's totally fine.

1908
02:04:09,960 --> 02:04:13,680
It would help if you explain
what you are about to do all the way

1909
02:04:13,680 --> 02:04:16,680
so that we understand
that you are going to add more code

1910
02:04:18,000 --> 02:04:21,520
after we have already defined this part
here, that field.

1911
02:04:21,520 --> 02:04:25,040
First, we are going to make a request
creating the employee.

1912
02:04:25,320 --> 02:04:29,160
Then we are going to make a Borst call
to create the employee.

1913
02:04:29,360 --> 02:04:31,360
Then we are going to get the status quo.

1914
02:04:31,360 --> 02:04:35,000
Then we define it,
then we going to get the message and menu

1915
02:04:35,000 --> 02:04:39,240
key value to verify and then we will going
to redefine the employee.

1916
02:04:39,840 --> 02:04:44,320
So the scope is very clear to everyone.

1917
02:04:44,320 --> 02:04:48,480
The scope is very clear
to everyone or not.

1918
02:04:48,480 --> 02:04:52,560
So now after this,
we created the service inside this board.

1919
02:04:53,160 --> 02:04:57,800
We created steps
inside this particular part in steps.

1920
02:04:57,800 --> 02:04:59,280
I am writing the code.

1921
02:04:59,280 --> 02:05:03,720
So while writing the code,
when we came across this particular body

1922
02:05:03,720 --> 02:05:07,600
here,
I tried to explain that instead of passing

1923
02:05:07,600 --> 02:05:11,560
the body as a hard coded,
we get pass the body from somewhere else.

1924
02:05:11,880 --> 02:05:15,600
If I provided this particular
API below the constraints

1925
02:05:15,600 --> 02:05:18,720
class even before writing the scenario,
you got confused.

1926
02:05:18,840 --> 02:05:20,960
Why are we creating this particular class?

1927
02:05:22,000 --> 02:05:22,600
Right?

1928
02:05:22,600 --> 02:05:26,280
So the moment you are a crossing,
you are coming across the problem

1929
02:05:26,640 --> 02:05:29,040
solving the problem.
I am extending the things

1930
02:05:29,040 --> 02:05:31,320
which is important,
which is not important Character.

1931
02:05:32,600 --> 02:05:33,000
Right?

1932
02:05:33,080 --> 02:05:37,160
So when you say it would be helpful
to explain what you are about to do before

1933
02:05:37,160 --> 02:05:40,720
doing the things I am telling you
and then I'm doing it.

1934
02:05:41,200 --> 02:05:43,840
Guys,
is there any question about the scope,

1935
02:05:44,640 --> 02:05:49,040
the vision, the product, the approach
we are going to do, if you please ask?

1936
02:05:49,080 --> 02:05:50,240
That's a good question. Simon.

1937
02:05:50,240 --> 02:05:53,280
If I mean the question
that if other people

1938
02:05:53,280 --> 02:05:55,440
also have this question

1939
02:05:57,440 --> 02:05:58,160
correct, Jimi.

1940
02:05:58,160 --> 02:05:58,520
Correct.

1941
02:05:58,520 --> 02:06:00,680
Do we have to do
because we have seen this part,

1942
02:06:00,840 --> 02:06:05,320
if you are rely only on your API
status code, it is not a complete

1943
02:06:05,320 --> 02:06:10,760
verification invalidation, right?

1944
02:06:10,760 --> 02:06:13,440
Getting my point, Jimi,
because we have seen you,

1945
02:06:13,600 --> 02:06:17,040
you got to zero one
but the value was not operating correctly.

1946
02:06:17,240 --> 02:06:20,280
You got to double zero,
but value was not operating correctly.

1947
02:06:20,600 --> 02:06:21,240
Right.

1948
02:06:21,240 --> 02:06:23,160
So if we rely only on the status quo,

1949
02:06:23,160 --> 02:06:26,680
the validation, my verification validation
check points, I'm not completed.

1950
02:06:26,920 --> 02:06:29,080
My testing is not good grade.

1951
02:06:29,080 --> 02:06:30,480
We have to verify that.

1952
02:06:30,480 --> 02:06:32,880
Okay, we got this particular point. Fine.

1953
02:06:33,160 --> 02:06:33,920
In this body.

1954
02:06:33,920 --> 02:06:35,880
Are we getting this piece? Yes.

1955
02:06:35,880 --> 02:06:37,760
Against this is are we getting this?

1956
02:06:37,760 --> 02:06:40,560
Did the venue? Yes.
Then only I can see it.

1957
02:06:40,560 --> 02:06:44,040
My API is populating
correct the data with great response.

1958
02:06:45,400 --> 02:06:53,360
Right, Simon, Not clear

1959
02:06:53,360 --> 02:07:01,400
what we are going to do.

1960
02:07:01,400 --> 02:07:05,600
My intention is to make the things
crystal clear for every

1961
02:07:06,640 --> 02:07:06,960
line.

1962
02:07:06,960 --> 02:07:10,440
That's why I'm asking, is it clear now?

1963
02:07:10,440 --> 02:07:13,920
Otherwise, if I'm teaching and you guys
are not understanding, it is of no use,

1964
02:07:14,480 --> 02:07:15,520
it is of no use, There.

1965
02:07:15,520 --> 02:07:18,320
So I'm asking guys, please speak up.

1966
02:07:18,320 --> 02:07:19,520
It's for me.

1967
02:07:19,640 --> 02:07:20,600
Please take

1968
02:07:31,560 --> 02:07:32,720
your limit.

1969
02:07:32,760 --> 02:07:33,400
Limit. Right.

1970
02:07:33,400 --> 02:07:37,040
Intentionally we provide this database
like the Israeli private APIs

1971
02:07:37,040 --> 02:07:39,360
like this also so that you will see bugs.

1972
02:07:39,520 --> 02:07:40,320
Right.

1973
02:07:40,320 --> 02:07:44,320
And if you don't come across these things,
if you don't check this things

1974
02:07:44,360 --> 02:07:46,760
indefinitely just to join and things

1975
02:07:51,000 --> 02:07:52,680
will come back. Man,

1976
02:07:52,920 --> 02:08:00,320
where were you?

1977
02:08:00,320 --> 02:08:02,640
My other.

1978
02:08:02,640 --> 02:08:12,000
Wow. I've been using my show.

1979
02:08:12,000 --> 02:08:15,040
Your horse running do fast.

1980
02:08:15,600 --> 02:08:19,440
Multiple classes on weekends.

1981
02:08:19,440 --> 02:08:20,000
Amazing

1982
02:08:22,520 --> 02:08:23,400
Here, people.

1983
02:08:23,400 --> 02:08:25,320
Horses are dying in the class.

1984
02:08:25,320 --> 02:08:30,200
And you're taking two classes.

1985
02:08:30,200 --> 02:08:31,960
Could you do what you like to do that?

1986
02:08:31,960 --> 02:08:34,080
I'm going to

1987
02:08:34,520 --> 02:08:36,160
send the picture of your horses to.

1988
02:08:36,160 --> 02:08:38,880
All of this is training
so that they can practice the same horses

1989
02:08:38,880 --> 02:08:41,120
because they know it's
if third day in this one class

1990
02:08:44,080 --> 02:08:46,240
which Brigadier using tell them see

1991
02:08:46,240 --> 02:08:50,880
Maria was the first
one was going to buy binaries so now

1992
02:08:52,240 --> 02:08:53,240
what other classes.

1993
02:08:53,240 --> 02:08:56,400
The post is not good
since that's like in this nuclear weapon.

1994
02:08:56,640 --> 02:08:59,400
The third is hyperloop
and the fourth one is it's

1995
02:08:59,440 --> 02:09:01,640
import classes

1996
02:09:03,280 --> 02:09:07,040
by all

1997
02:09:07,360 --> 02:09:13,160
railways.

1998
02:09:13,160 --> 02:09:16,320
This this one we created a request rate.

1999
02:09:16,360 --> 02:09:17,600
We are preparing the request.

2000
02:09:17,600 --> 02:09:18,960
So this is my request.

2001
02:09:18,960 --> 02:09:20,360
Is this correct?

2002
02:09:21,560 --> 02:09:22,560
Is this correct? PACE

2003
02:09:23,680 --> 02:09:26,640
So now now to hit this request,

2004
02:09:27,000 --> 02:09:30,960
to hit this request, this time
I have to go in another method.

2005
02:09:31,720 --> 02:09:33,000
In another method.

2006
02:09:33,000 --> 02:09:36,720
But my this variable is a local variable
or instance.

2007
02:09:37,000 --> 02:09:39,880
But can I use this particular request

2008
02:09:39,880 --> 02:09:41,640
yet in this method

2009
02:09:44,120 --> 02:09:46,280
guys, can I use. No.

2010
02:09:46,320 --> 02:09:48,280
So what should I do?

2011
02:09:48,720 --> 02:09:50,840
I have to define it on a class level.

2012
02:09:51,560 --> 02:09:52,080
Right?

2013
02:09:52,080 --> 02:09:55,440
On a class given like this. Correct.

2014
02:09:55,440 --> 02:09:55,960
Then.

2015
02:09:57,040 --> 02:10:00,280
Now can I use this request here

2016
02:10:03,880 --> 02:10:06,200
when dark.

2017
02:10:06,200 --> 02:10:07,320
Which color

2018
02:10:10,360 --> 02:10:12,000
guys which calls

2019
02:10:15,560 --> 02:10:16,200
to create

2020
02:10:16,200 --> 02:10:19,080
an employ in the database
which call we need to make

2021
02:10:20,240 --> 02:10:22,520
get on put call

2022
02:10:23,840 --> 02:10:25,840
when calling amazing

2023
02:10:26,640 --> 02:10:29,440
or to call it Come on guys

2024
02:10:29,440 --> 02:10:32,880
post one thing forced one find.

2025
02:10:32,880 --> 02:10:36,400
So now see related to the API.

2026
02:10:36,840 --> 02:10:39,280
Related to the API endpoints.

2027
02:10:39,600 --> 02:10:40,800
Do we have any constants

2028
02:10:42,640 --> 02:10:43,440
for endpoints?

2029
02:10:43,440 --> 02:10:47,640
Do we have anything?

2030
02:10:47,640 --> 02:10:49,320
Yes, we do have

2031
02:10:50,120 --> 02:10:54,440
API constants. DOT

2032
02:10:56,200 --> 02:10:57,760
which one goes

2033
02:10:59,240 --> 02:11:00,240
create employ.

2034
02:11:00,240 --> 02:11:03,280
You are correct.

2035
02:11:03,280 --> 02:11:03,880
Correct.

2036
02:11:05,000 --> 02:11:09,000
And from here again
I will use the response.

2037
02:11:09,240 --> 02:11:13,200
So this response
I have to be clear on a class level.

2038
02:11:13,200 --> 02:11:15,840
On a class level,
I have to use this particular response.

2039
02:11:15,840 --> 02:11:16,240
Right?

2040
02:11:16,240 --> 02:11:21,240
Because in the next method, in mixed
method, I have to use this response.

2041
02:11:21,560 --> 02:11:26,880
So my response I'm going to get in this
particular variable and this variable

2042
02:11:26,880 --> 02:11:30,840
now I'm going to use here,
I'm going to use here.

2043
02:11:31,680 --> 02:11:32,880
So now guys, don't be forced.

2044
02:11:32,880 --> 02:11:35,640
The first thing, if you see

2045
02:11:36,200 --> 02:11:38,680
if you see guys, everyone,

2046
02:11:38,680 --> 02:11:43,200
when I provide it to zero one,
there it is coming integer

2047
02:11:43,200 --> 02:11:51,720
as a parameter or not,
it comes here as a parameter.

2048
02:11:51,720 --> 02:11:55,840
It doesn't
it didn't come as an hardcoded value.

2049
02:11:56,040 --> 02:11:56,560
One note

2050
02:11:58,080 --> 02:12:00,040
Walmart allegedly

2051
02:12:01,480 --> 02:12:07,160
now understood.

2052
02:12:07,160 --> 02:12:12,760
I knew.

2053
02:12:12,760 --> 02:12:16,200
Fine.
So now here I'm going to avoid status.

2054
02:12:16,200 --> 02:12:21,240
Could you both get share one system?

2055
02:12:21,240 --> 02:12:25,440
You also need to make a response and
request a request and response to stating

2056
02:12:27,400 --> 02:12:29,320
why is it so?

2057
02:12:30,160 --> 02:12:32,120
And we are using only one class

2058
02:12:32,120 --> 02:12:33,840
then by static

2059
02:12:37,360 --> 02:12:39,360
to use class level.

2060
02:12:39,680 --> 02:12:41,680
I think it should work.

2061
02:12:41,680 --> 02:12:49,200
I think this should work.

2062
02:12:49,200 --> 02:12:50,120
What do you think it is?

2063
02:12:50,120 --> 02:12:59,560
Will it work or not?

2064
02:12:59,560 --> 02:13:02,160
This will work nice. Come on.

2065
02:13:03,200 --> 02:13:04,640
This will work in the same class.

2066
02:13:04,640 --> 02:13:06,920
It will work in same class, right?

2067
02:13:06,960 --> 02:13:09,120
It will work definitely. Fine.

2068
02:13:09,480 --> 02:13:11,480
So now, see, guys, here, here.

2069
02:13:11,480 --> 02:13:14,640
I'm going to change this
name as the status school.

2070
02:13:15,080 --> 02:13:15,840
Right.

2071
02:13:15,840 --> 02:13:18,440
This value
particular part is a status court.

2072
02:13:18,480 --> 02:13:22,240
If you want, you can use the small
one integer as an status code

2073
02:13:23,200 --> 02:13:23,960
and then

2074
02:13:23,960 --> 02:13:26,400
to verify the status code, what we can do

2075
02:13:27,320 --> 02:13:31,040
response Dark

2076
02:13:32,040 --> 02:13:34,800
and dark Assert

2077
02:13:34,800 --> 02:13:41,080
their status code is your status.

2078
02:13:41,080 --> 02:13:42,960
If not, then we can enter static with it.

2079
02:13:42,960 --> 02:13:43,400
Nobody.

2080
02:13:43,400 --> 02:13:45,200
Yes, but I think this should work.

2081
02:13:45,200 --> 02:13:47,640
It will work in this particular part.

2082
02:13:47,640 --> 02:13:50,400
Clear everyone. How are we verifying?

2083
02:13:50,680 --> 02:13:52,720
So we are not passing the data.

2084
02:13:52,720 --> 02:13:54,280
We are not passing the data.

2085
02:13:54,280 --> 02:13:56,320
Anything hardcoded. Right.

2086
02:13:56,320 --> 02:13:59,560
The data is coming from my scenario
in terms of parameter only.

2087
02:14:01,120 --> 02:14:03,440
Next time you just change the parameter,

2088
02:14:03,680 --> 02:14:06,720
it will come here and it will change
the parameter automatically.

2089
02:14:06,960 --> 02:14:08,480
You just change for double zero.

2090
02:14:08,480 --> 02:14:09,960
It will come for double zero.

2091
02:14:09,960 --> 02:14:15,120
If you try to do double zero,
it will come to the right.

2092
02:14:15,120 --> 02:14:26,600
All right, guys.

2093
02:14:26,600 --> 02:14:27,760
So far, so good. Everyone

2094
02:14:28,920 --> 02:14:29,400
or any

2095
02:14:29,400 --> 02:14:45,760
question, no questions.

2096
02:14:46,200 --> 02:14:46,720
Perfect.

2097
02:14:46,720 --> 02:14:50,560
If anybody has any questions,
stop me in between also interrupting me.

2098
02:14:51,040 --> 02:14:52,760
I want you guys to interrupt me.

2099
02:14:52,760 --> 02:14:53,400
No issues.

2100
02:14:53,400 --> 02:14:55,000
All all good.

2101
02:14:55,000 --> 02:14:58,240
Both.

2102
02:14:58,240 --> 02:15:03,600
Now, here we have to really fight
another point that my response body

2103
02:15:03,720 --> 02:15:08,160
should contain key
and value should and Randy.

2104
02:15:08,400 --> 02:15:09,240
So now you'll see.

2105
02:15:09,240 --> 02:15:12,200
Here you'll see here
it says force the string.

2106
02:15:12,640 --> 02:15:14,560
First is what is

2107
02:15:14,960 --> 02:15:17,240
what is my force to string

2108
02:15:19,760 --> 02:15:21,360
T right for the message

2109
02:15:21,360 --> 02:15:23,720
basically in the second is

2110
02:15:25,960 --> 02:15:29,320
message created that

2111
02:15:29,320 --> 02:15:31,000
message created something like this.

2112
02:15:31,000 --> 02:15:35,920
Calvin Great.

2113
02:15:35,920 --> 02:15:40,160
So now to verify this Bach again,
we will use a response variable

2114
02:15:40,160 --> 02:15:43,680
because it contains my older
the value then keyword

2115
02:15:43,680 --> 02:15:46,320
for verification assert that

2116
02:15:47,360 --> 02:15:49,800
don't assert that DA

2117
02:16:06,600 --> 02:16:07,320
Right.

2118
02:16:07,440 --> 02:16:12,640
So now here after this assert
what I'm going to write is body right

2119
02:16:12,960 --> 02:16:17,040
and the body in the body
I'm seeing the first thing is my message.

2120
02:16:17,760 --> 02:16:19,920
Now see, remember this point

2121
02:16:20,640 --> 02:16:24,400
hardcoded examples
go here and check this part.

2122
02:16:24,480 --> 02:16:25,960
We have already verified this.

2123
02:16:25,960 --> 02:16:31,360
Can you see this type of situation
is equal to we are using from which class

2124
02:16:32,360 --> 02:16:33,680
guys equal to we are

2125
02:16:33,680 --> 02:16:37,960
using from here.

2126
02:16:37,960 --> 02:16:39,280
Students

2127
02:16:40,160 --> 02:16:42,760
from JD Hand Christa matures

2128
02:16:43,760 --> 02:16:46,480
handles dimensions right?

2129
02:16:46,480 --> 02:16:48,640
We are using hand Christian matter.

2130
02:16:48,640 --> 02:16:53,040
So from there we will use
this particular part called JSON.

2131
02:16:53,400 --> 02:16:56,040
So notice of code equal

2132
02:16:58,120 --> 02:17:21,240
to equal to

2133
02:17:21,640 --> 02:17:24,600
and then the values of values

2134
02:17:24,600 --> 02:17:26,600
message

2135
02:17:26,760 --> 02:17:29,360
created message communicate.

2136
02:17:29,880 --> 02:17:31,520
Why does it import even?

2137
02:17:31,520 --> 02:17:32,760
I don't know.

2138
02:17:33,360 --> 02:17:35,800
Even I thank you so much and

2139
02:17:35,800 --> 02:17:39,520
thank you so much.

2140
02:17:39,520 --> 02:17:41,640
I was about to tell this one.

2141
02:17:41,680 --> 02:17:42,760
Next point.

2142
02:17:43,640 --> 02:17:47,200
I was also trying to check
whether it was in that class or not,

2143
02:17:47,200 --> 02:17:52,680
so I was about to tell him that, hey,
please share this.

2144
02:17:52,680 --> 02:17:54,920
The menus

2145
02:18:00,280 --> 02:18:02,520
it is show given this is very bad.

2146
02:18:04,440 --> 02:18:05,960
This doesn't work

2147
02:18:05,960 --> 02:18:09,760
automatically by mistake and this is fine.

2148
02:18:09,840 --> 02:18:12,200
I need to check everyone's business
rate in the class.

2149
02:18:12,200 --> 02:18:14,160
That's
why on this call people here have this

2150
02:18:15,120 --> 02:18:16,760
nasty nasty.

2151
02:18:16,760 --> 02:18:20,640
The last point I'm the employ and whatever

2152
02:18:20,640 --> 02:18:23,760
the parameter is coming,
I'm providing this parameter here.

2153
02:18:23,760 --> 02:18:24,320
Right?

2154
02:18:24,320 --> 02:18:27,440
So I'm going to write the MP IED. Right.

2155
02:18:27,720 --> 02:18:30,680
So this IED is going to be retrieved.

2156
02:18:31,040 --> 02:18:34,040
So first I'm going to write
from my response,

2157
02:18:34,640 --> 02:18:39,000
not my decent part,
remember, is to retrieve the value.

2158
02:18:39,000 --> 02:18:44,040
We will use this apartment
that from this class object right dug

2159
02:18:44,440 --> 02:18:46,640
in, which for me am getting my employee.

2160
02:18:47,560 --> 02:18:50,040
Remember that they get all employees.

2161
02:18:50,200 --> 02:18:53,080
So we were getting all the employees
from their range.

2162
02:18:53,080 --> 02:18:57,640
So in which for me there
dream jetstream right.

2163
02:18:57,640 --> 02:19:01,760
And here this highly variable rate
I'm going to take.

2164
02:19:02,040 --> 02:19:05,280
Fine So now it's this data stream.

2165
02:19:05,840 --> 02:19:10,520
So this employed is good,
this is the value employee not employing.

2166
02:19:10,520 --> 02:19:14,360
But in this particular spring
we are passing from our speech high

2167
02:19:14,680 --> 02:19:18,120
and then we will going to store this part
in one variable.

2168
02:19:18,360 --> 02:19:23,760
So we will make we will make this variable
as as global one.

2169
02:19:23,760 --> 02:19:27,240
So I'm to write a public spending

2170
02:19:28,240 --> 02:19:29,320
spree

2171
02:19:30,720 --> 02:19:33,120
like the score by D.

2172
02:19:33,120 --> 02:19:35,520
So now this variable,

2173
02:19:35,520 --> 02:19:39,200
this variable employ underscore I.D.

2174
02:19:39,200 --> 02:19:42,240
is going to store this one, right?

2175
02:19:42,520 --> 02:19:44,600
So now this variable becomes global.

2176
02:19:44,600 --> 02:19:49,200
One read this variable
becomes the global variable everywhere.

2177
02:19:49,200 --> 02:19:51,600
I can use this particular variable
is that clear?

2178
02:19:52,200 --> 02:19:55,480
Everywhere I can use this particular

2179
02:19:57,160 --> 02:19:59,960
player to everyone

2180
02:20:05,720 --> 02:20:06,440
based.

2181
02:20:06,440 --> 02:20:10,840
First, have a look at these three points,
these three verification.

2182
02:20:10,840 --> 02:20:14,840
Is there any question please
us this school, this is the whole code.

2183
02:20:15,640 --> 02:20:20,800
See if there is any question.

2184
02:20:20,840 --> 02:20:22,360
Please ask

2185
02:20:42,000 --> 02:20:43,200
all clear

2186
02:20:48,680 --> 02:20:53,880
of it.

2187
02:20:53,880 --> 02:20:57,400
It's good to able to make it performance

2188
02:20:58,960 --> 02:21:00,920
right Make it for us.

2189
02:21:00,920 --> 02:21:03,280
And first let me print this employer also

2190
02:21:03,360 --> 02:21:05,640
so that you guys can see what we got

2191
02:21:07,680 --> 02:21:11,160
from final.

2192
02:21:11,280 --> 02:21:12,640
So now

2193
02:21:13,280 --> 02:21:29,840
I'm going to run this quick.

2194
02:21:29,840 --> 02:21:33,560
Now just compare
just compare this particular part guides

2195
02:21:33,680 --> 02:21:36,080
with your Selenium execution.

2196
02:21:36,800 --> 02:21:41,800
In the Selenium execution, consider
if you have to execute your scenario.

2197
02:21:42,080 --> 02:21:45,960
So to execute your scenario first,
you have to open the application.

2198
02:21:46,320 --> 02:21:49,920
You have to go to register user
to create user page.

2199
02:21:50,160 --> 02:21:53,840
In that page of the calendar data,
really find all the fields, click

2200
02:21:53,840 --> 02:21:57,040
on some button, really make the message
how much time it takes.

2201
02:21:57,360 --> 02:21:58,480
It does seem time.

2202
02:21:58,480 --> 02:22:02,440
If you do the same operation by an API,
how much time it is taking.

2203
02:22:03,760 --> 02:22:07,320
This is the employee we got right there.

2204
02:22:07,320 --> 02:22:09,560
Token was automatically generated.

2205
02:22:09,560 --> 02:22:12,680
So we use the automatically generated
token, right?

2206
02:22:12,920 --> 02:22:15,760
We get all these methods positive, right?

2207
02:22:15,800 --> 02:22:18,240
You see everything is passed.

2208
02:22:18,240 --> 02:22:19,080
Everything is passed.

2209
02:22:19,080 --> 02:22:23,040
Case messages this message
and this is employee created

2210
02:22:23,040 --> 02:22:24,480
we got correct

2211
02:22:29,240 --> 02:22:30,800
mine gives errors.

2212
02:22:30,800 --> 02:22:32,000
Okay so

2213
02:22:32,680 --> 02:22:34,760
a solution error

2214
02:22:35,200 --> 02:22:36,760
to zero one but was for double zero.

2215
02:22:36,760 --> 02:22:39,400
Something is a problem
with this particular part

2216
02:22:40,680 --> 02:22:43,560
when you are trying
to get this part of boost call method

2217
02:22:43,560 --> 02:22:47,160
because it says audibles
you know values generated.

2218
02:22:47,400 --> 02:22:49,760
So please check your code.

2219
02:22:50,120 --> 02:22:50,880
Same for me.

2220
02:22:50,880 --> 02:22:53,520
I haven't got an issue status code.

2221
02:22:54,640 --> 02:22:56,840
I got issue with status code.

2222
02:22:56,840 --> 02:22:57,320
Right.

2223
02:22:57,320 --> 02:22:58,440
Why is it a squad issue?

2224
02:22:58,440 --> 02:22:59,760
You got everyone,

2225
02:23:00,600 --> 02:23:01,240
my boss.

2226
02:23:01,240 --> 02:23:03,640
But it didn't get deployed in the console.

2227
02:23:03,640 --> 02:23:05,960
Zimmer, can you please.

2228
02:23:05,960 --> 02:23:09,280
Did you write this last line
system got out of print

2229
02:23:09,360 --> 02:23:14,840
and an employee? Yes.

2230
02:23:14,840 --> 02:23:17,280
Please write it
and then it will get printed.

2231
02:23:17,280 --> 02:23:22,040
Whoever got this problem clear,
this is great as you guys.

2232
02:23:22,040 --> 02:23:25,720
If this one is not correct,
please check this all our or

2233
02:23:25,840 --> 02:23:27,680
check this part create employee.

2234
02:23:27,680 --> 02:23:28,720
You are right.

2235
02:23:28,720 --> 02:23:31,920
Whether you are using
the correct part or not. Yes.

2236
02:23:32,120 --> 02:23:34,240
Then take the barcodes
for what you provided.

2237
02:23:34,280 --> 02:23:35,720
The end point there. Right.

2238
02:23:35,720 --> 02:23:37,600
This is something you need to check.

2239
02:23:37,600 --> 02:23:40,520
Also check this particular part in
and right below it

2240
02:23:40,520 --> 02:23:44,960
if you provide something right,
it is not correct because here we are

2241
02:23:44,960 --> 02:23:49,840
passing all the majority of time
we are passing get parameterized value.

2242
02:23:49,840 --> 02:23:50,440
Right?

2243
02:23:50,440 --> 02:23:53,400
So when we are passing, really
we get some mistakes.

2244
02:23:53,400 --> 02:23:53,600
Right.

2245
02:23:53,600 --> 02:23:58,600
And because of that mistake,
we are having the problem.

2246
02:23:58,600 --> 02:24:00,840
How many of you guys
are having the same error?

2247
02:24:01,480 --> 02:24:02,720
It works for our next grade.

2248
02:24:02,720 --> 02:24:05,040
It works for Zoom also, right?

2249
02:24:05,040 --> 02:24:09,120
Lupita, what you do means good one

2250
02:24:09,240 --> 02:24:12,000
and what can you share your API
constants, please?

2251
02:24:12,480 --> 02:24:14,160
My API constants.

2252
02:24:14,160 --> 02:24:16,440
These here. You see this

2253
02:24:19,560 --> 02:24:21,600
Zima, you have it start on the end.

2254
02:24:21,600 --> 02:24:23,520
But if it works fine, great.

2255
02:24:23,520 --> 02:24:26,400
Let me just commit this
so that everyone can go

2256
02:24:26,400 --> 02:24:43,680
to the code. Yes.

2257
02:24:44,520 --> 02:24:46,920
Good. Has been pushed to the repository.

2258
02:24:47,280 --> 02:24:48,280
Please check

2259
02:24:52,240 --> 02:24:53,680
while you're suspending

2260
02:24:53,680 --> 02:24:56,800
three times the same employee divide.

2261
02:24:56,800 --> 02:24:57,880
1920.

2262
02:24:57,880 --> 02:25:00,480
Yes, everyone is spending one
in my current mine.

2263
02:25:00,480 --> 02:25:04,040
One is also printing one employee
and this is the correct functionality.

2264
02:25:04,040 --> 02:25:07,080
It should be just one employee.

2265
02:25:07,080 --> 02:25:09,480
I rate three times minus

2266
02:25:10,040 --> 02:25:14,160
the negative three times for sure.

2267
02:25:14,160 --> 02:25:17,480
Easy to find
and you are making a that confused.

2268
02:25:17,760 --> 02:25:21,320
You're confusing what that is,
but that's not thinking like my

2269
02:25:21,320 --> 02:25:23,360
is getting one and he is getting three

2270
02:25:27,360 --> 02:25:29,480
Einstein rise

2271
02:25:30,640 --> 02:25:31,720
and we

2272
02:25:44,040 --> 02:25:46,600
so in our jobs
will be forced to execute objectives

2273
02:25:46,600 --> 02:25:51,000
To write this one you have to see
and what happens basically is

2274
02:25:51,000 --> 02:25:55,760
whenever we work in the application area
right so this API is great

2275
02:25:55,760 --> 02:25:58,520
when we talk about API,
this is the most easy part

2276
02:25:59,000 --> 02:26:03,320
for developing the API
and the most difficult challenge is there.

2277
02:26:03,320 --> 02:26:07,280
The challenging part is to create your UI
because this is a user interface for

2278
02:26:07,520 --> 02:26:08,320
training.

2279
02:26:08,320 --> 02:26:12,120
So when it comes to user interface,
they always go for changes,

2280
02:26:12,120 --> 02:26:13,560
they always change the feeds.

2281
02:26:13,560 --> 02:26:18,680
The colors are in so many selections
and using so many scrappy methods, right?

2282
02:26:18,680 --> 02:26:20,200
So many technologies.

2283
02:26:20,200 --> 02:26:22,360
And then the export database is fine.

2284
02:26:22,360 --> 02:26:26,040
You just put the database, you some,
you just dump some building over there

2285
02:26:26,200 --> 02:26:29,760
and then you create established link
from database to API.

2286
02:26:30,120 --> 02:26:33,760
So now here,
by the time developers are working on

2287
02:26:33,760 --> 02:26:37,520
the UI part, right,
it is someone's responsibility.

2288
02:26:37,520 --> 02:26:41,760
Check whether their data is that
it is coming from their database or not.

2289
02:26:42,760 --> 02:26:45,600
If their data is coming from the database
correctly.

2290
02:26:45,760 --> 02:26:50,680
In the end, once you write by visiting,
I will simply integrate these APIs

2291
02:26:50,680 --> 02:26:54,600
with my white bar
because it is going to convert this API.

2292
02:26:54,800 --> 02:26:56,960
So why can't I check API? As of now?

2293
02:26:57,040 --> 02:26:59,920
And then we can integrate it later
with the white, right?

2294
02:27:00,120 --> 02:27:03,840
So from UI to API to database,
every single thing is connected.

2295
02:27:04,080 --> 02:27:05,480
That's why we call API.

2296
02:27:05,480 --> 02:27:08,880
Testing is a really stage test
and it is the

2297
02:27:08,880 --> 02:27:11,920
the fastest mode of the city
was developers

2298
02:27:14,000 --> 02:27:15,600
with your naked eye is only

2299
02:27:15,600 --> 02:27:19,520
you guys can compare data
when we talk about creating an employ.

2300
02:27:19,680 --> 02:27:23,000
So here when we are creating an employee
basically

2301
02:27:23,160 --> 02:27:27,240
so for creating the employee,
how much time it takes just to say okay,

2302
02:27:27,840 --> 02:27:31,400
rate in one to boost
it gives hardly any gender.

2303
02:27:31,400 --> 02:27:34,480
It created the token rate, It brings

2304
02:27:34,480 --> 02:27:38,160
all the data into the database
and it gives us everything big validation,

2305
02:27:40,080 --> 02:27:42,520
basically doing the point with validation.

2306
02:27:42,520 --> 02:27:44,160
It provides us everything.

2307
02:27:44,160 --> 02:27:48,120
We didn't know time but did the same thing
to talk about using this because it's

2308
02:27:48,120 --> 02:27:53,640
how much time it takes for the same thing,
at least more than this.

2309
02:27:53,880 --> 02:27:56,160
At least more time than this
particular list.

2310
02:27:56,880 --> 02:27:58,280
Character. Not

2311
02:28:07,720 --> 02:28:08,160
emit.

2312
02:28:08,160 --> 02:28:08,880
What happens.

2313
02:28:08,880 --> 02:28:20,200
I'm explaining to you.

2314
02:28:20,200 --> 02:28:21,120
All right,

2315
02:28:21,760 --> 02:28:24,280
so there is any question, super,

2316
02:28:24,280 --> 02:28:28,400
any question, any issue, any confusion,
anything we did

2317
02:28:28,400 --> 02:28:36,440
and you didn't understand anything.

2318
02:28:36,440 --> 02:28:39,320
I think everyone is busy
fighting the good fight.

2319
02:28:39,840 --> 02:28:42,480
Let me give you some time.

2320
02:28:42,480 --> 02:28:44,520
You guys can compete

2321
02:28:50,640 --> 02:28:53,040
from a spirit standpoint.

2322
02:28:53,040 --> 02:28:54,600
Yeah, you can see.

2323
02:28:54,600 --> 02:28:57,120
So from Speedtest.net standpoint, great

2324
02:28:57,600 --> 02:28:59,720
API is the faster one, right?

2325
02:29:00,160 --> 02:29:03,280
To get the details and everything

2326
02:29:03,360 --> 02:29:05,320
on UI. Obviously you take time.

2327
02:29:05,320 --> 02:29:09,720
It takes, you know,
it gives a lot of upload on to the server.

2328
02:29:10,200 --> 02:29:11,720
API is a bit late.

2329
02:29:11,720 --> 02:29:15,200
This could lead to an estimate response
for some bytes.

2330
02:29:15,600 --> 02:29:19,400
Did you see the size of the body
we were going getting?

2331
02:29:19,520 --> 02:29:21,840
It is just in some bites.

2332
02:29:21,840 --> 02:29:30,560
It is just in some bytes.

2333
02:29:30,560 --> 02:29:33,000
We need to write code for both of them.

2334
02:29:33,240 --> 02:29:34,480
And when you write code

2335
02:29:34,480 --> 02:29:38,280
then famous for both of them,
it would just a few seconds for more.

2336
02:29:38,440 --> 02:29:41,600
8.6 and whenever we write the code,

2337
02:29:42,200 --> 02:29:44,480
this is the only time picking activity.

2338
02:29:44,880 --> 02:29:48,160
But when you will work
in the actual industry data, you will see

2339
02:29:48,640 --> 02:29:50,200
regression, best guesses.

2340
02:29:50,200 --> 02:29:52,960
The five were 6 hours, 7 hours.

2341
02:29:52,960 --> 02:29:57,600
But execution, they say we go
and we perform night job execution.

2342
02:29:57,840 --> 02:29:58,880
What does it mean?

2343
02:29:58,880 --> 02:30:02,840
My job execution simply means
when you go out of your office, right?

2344
02:30:02,840 --> 02:30:04,480
When you move. All right.

2345
02:30:04,480 --> 02:30:08,000
You schedule a job in Jenkins,
You should a job in Dockers

2346
02:30:08,160 --> 02:30:10,200
or in some cloud such as DevOps.

2347
02:30:10,200 --> 02:30:15,000
So at night from 11:11
p.m., let's say from 11 to morning

2348
02:30:15,000 --> 02:30:18,000
six, your test executes
every single test because

2349
02:30:19,800 --> 02:30:20,360
when you come

2350
02:30:20,360 --> 02:30:24,720
next day to the morning, right, you see
the reports will get out of this 800

2351
02:30:25,040 --> 02:30:28,200
cases, 500 feeds, 300 plus something

2352
02:30:28,200 --> 02:30:32,800
like this.

2353
02:30:32,800 --> 02:30:37,320
No, obviously the API testing
is for checking the connection of data

2354
02:30:37,600 --> 02:30:40,560
within the data
is coming from the database or not.

2355
02:30:40,720 --> 02:30:44,280
Any other testing is to verify the fields,
the visibility

2356
02:30:44,400 --> 02:30:46,560
and visibility user interface.

2357
02:30:46,800 --> 02:30:49,200
So these are two different forms of this
data.

2358
02:30:49,200 --> 02:30:51,640
We are verifying the data
that we are sending the data fine.

2359
02:30:51,680 --> 02:30:54,720
But the is also here and it is it is not.

2360
02:30:54,720 --> 02:30:55,680
You wait this thing.

2361
02:30:55,680 --> 02:31:00,160
So both are equally important,
but this is administration testing.

2362
02:31:00,320 --> 02:31:01,800
So by the time developers

2363
02:31:01,800 --> 02:31:04,840
are working on the white whiteboard,
you guys can start working on it.

2364
02:31:05,600 --> 02:31:08,720
That is the normal approach
that companies on our is

2365
02:31:10,360 --> 02:31:15,760
just produced.

2366
02:31:15,760 --> 02:31:28,800
Is this clear to everyone?

2367
02:31:28,800 --> 02:31:30,480
That was my question.

2368
02:31:30,480 --> 02:31:32,640
One of you. Just two months.

2369
02:31:32,640 --> 02:31:33,160
Yeah. Yeah.

2370
02:31:33,160 --> 02:31:34,840
I'm afraid we have to

2371
02:31:34,840 --> 02:31:39,000
if required, we have to go for database
testing as well every way if needed.

2372
02:31:39,680 --> 02:31:42,240
We have to go for that also.

2373
02:31:42,840 --> 02:31:43,520
Mostly.

2374
02:31:43,520 --> 02:31:46,400
Mostly we perform database
testing like a menu, right?

2375
02:31:46,400 --> 02:31:50,160
We go to give their names, dates,
what I have seen in my career.

2376
02:31:50,160 --> 02:31:53,840
So let's see what kind of opportunity
you guys will get in future

2377
02:31:58,760 --> 02:32:00,120
hundred based.

2378
02:32:01,320 --> 02:32:05,200
Now it's time to take completely.

2379
02:32:05,200 --> 02:32:07,600
Someone was about to ask before that.

2380
02:32:07,600 --> 02:32:08,400
I'm telling you.

2381
02:32:08,400 --> 02:32:12,360
Let's take a break.

2382
02:32:12,360 --> 02:32:16,760
So now what we are going to do
is we are going to create another example

2383
02:32:16,760 --> 02:32:19,800
in which we are going
to define the complete flow.

2384
02:32:20,160 --> 02:32:24,080
So the employer we created,
we will use that created

2385
02:32:24,080 --> 02:32:27,640
employed for our future purposes, Right?

2386
02:32:27,960 --> 02:32:30,640
So first what we will do, we will see how

2387
02:32:30,640 --> 02:32:34,280
we retrieve the information
from the database, right.

2388
02:32:34,560 --> 02:32:36,920
For the same employee which we created.

2389
02:32:37,240 --> 02:32:41,160
And then it's not only will verify
that the employer is correct,

2390
02:32:41,440 --> 02:32:43,760
but also the data, right?

2391
02:32:43,800 --> 02:32:45,960
The data which we are sending in the body.

2392
02:32:45,960 --> 02:32:51,040
We will verify that the data which we have
saved the same data is being populated

2393
02:32:51,080 --> 02:32:55,040
into the body
of the created employee using gate client.

2394
02:32:56,040 --> 02:32:58,600
And this is what we are going to do now.

2395
02:32:58,600 --> 02:33:00,600
Plus we will create the employee.

2396
02:33:00,600 --> 02:33:03,000
So we use one particular payload.

2397
02:33:03,000 --> 02:33:05,320
Now we are going to perform
a green operation

2398
02:33:05,600 --> 02:33:10,240
and here we will verify that the data
which we are getting is the same data

2399
02:33:10,440 --> 02:33:13,000
we provided by adding the employee and

2400
02:33:16,440 --> 02:33:19,000
let's go ahead and do it now.

2401
02:33:19,000 --> 02:33:21,280
So I'm going to write another scenario
here.

2402
02:33:22,000 --> 02:33:23,400
Scenario

2403
02:33:25,440 --> 02:33:27,440
retrieving

2404
02:33:29,600 --> 02:33:31,920
is simply

2405
02:33:32,840 --> 02:33:51,600
created, provide the same

2406
02:33:52,080 --> 02:33:55,920
on what?

2407
02:33:55,920 --> 02:33:56,520
Right.

2408
02:33:57,000 --> 02:33:59,680
So now I'm going to write here
this scenario as

2409
02:34:02,880 --> 02:34:03,840
in base,

2410
02:34:03,840 --> 02:34:06,520
even for data retrieval back

2411
02:34:06,600 --> 02:34:09,360
get operation for forget operation

2412
02:34:09,840 --> 02:34:18,720
the same background will work on month,

2413
02:34:18,720 --> 02:34:21,920
the same background admin, same

2414
02:34:21,920 --> 02:34:24,760
particular step will generate the token

2415
02:34:24,760 --> 02:34:27,680
and that will be used
in this particular part.

2416
02:34:28,200 --> 02:34:29,760
Retrieving recently created in

2417
02:34:31,200 --> 02:34:32,400
the same

2418
02:34:32,400 --> 02:34:38,440
token, it will work.

2419
02:34:38,600 --> 02:34:39,320
Right?

2420
02:34:39,720 --> 02:34:42,280
So they're trying and given

2421
02:34:42,720 --> 02:34:44,680
a request

2422
02:34:45,600 --> 02:34:50,760
is prepared.

2423
02:34:50,760 --> 02:34:54,920
Get the client

2424
02:34:54,920 --> 02:34:58,120
to use the API upon

2425
02:35:01,200 --> 02:35:02,160
using it.

2426
02:35:02,160 --> 02:35:03,360
All right.

2427
02:35:03,360 --> 02:35:06,880
So then what type of call guys
we are going to make it now,

2428
02:35:06,880 --> 02:35:07,880
which is stupid request.

2429
02:35:07,880 --> 02:35:15,640
We are going to make get.

2430
02:35:15,640 --> 02:35:20,760
So when a gate God is made to

2431
02:35:22,520 --> 02:35:24,480
retrieve

2432
02:35:25,120 --> 02:35:27,480
the employee,

2433
02:35:28,520 --> 02:35:32,480
then first thing what we really find is

2434
02:35:35,680 --> 02:35:40,080
what is the first thing we believe?

2435
02:35:40,080 --> 02:35:47,480
Then then

2436
02:35:48,840 --> 02:35:50,000
the best deepness.

2437
02:35:50,000 --> 02:35:54,080
Good for this

2438
02:35:55,440 --> 02:36:00,400
created employee For this employee

2439
02:36:01,440 --> 02:36:04,080
is 200.

2440
02:36:04,920 --> 02:36:05,720
Correct.

2441
02:36:06,240 --> 02:36:08,440
That this is the API is just code

2442
02:36:08,440 --> 02:36:14,440
we should expect, right?

2443
02:36:14,440 --> 02:36:24,480
We should expect this
particular statistical fire.

2444
02:36:24,480 --> 02:36:28,320
And like I said, the scope already aims
very right.

2445
02:36:28,720 --> 02:36:31,520
So first we will see when I'm

2446
02:36:31,520 --> 02:36:35,280
actually getting this data right,
then I'm actually providing

2447
02:36:35,280 --> 02:36:39,040
that quality parameter where we are going
to provide this employee ID.

2448
02:36:39,440 --> 02:36:43,320
So the body which I'm getting for one
particular employee

2449
02:36:43,560 --> 02:36:46,640
in this body,
also I should go to the same employee.

2450
02:36:47,280 --> 02:36:51,240
So first thing is, data is populated
against the same employee.

2451
02:36:51,480 --> 02:36:55,280
Secondly, the value of data should be same

2452
02:36:55,560 --> 02:36:59,400
as what we provided
earlier in the payload, right?

2453
02:37:01,520 --> 02:37:04,920
So now I'm going to write here and

2454
02:37:04,920 --> 02:37:07,800
the employee

2455
02:37:09,120 --> 02:37:11,880
data will be

2456
02:37:12,240 --> 02:37:13,200
heavy

2457
02:37:14,280 --> 02:37:16,680
saving IED.

2458
02:37:16,680 --> 02:37:19,440
So very nasty.

2459
02:37:19,440 --> 02:37:21,480
If I go here,

2460
02:37:21,520 --> 02:37:23,880
forget one employee

2461
02:37:23,880 --> 02:37:27,000
can to see this time
it is returning the object but small.

2462
02:37:27,000 --> 02:37:29,040
We employ the object with small.

2463
02:37:29,040 --> 02:37:37,760
You can see this.

2464
02:37:37,760 --> 02:37:41,800
It does returning this small object
employee object.

2465
02:37:41,800 --> 02:37:45,080
So I'm going to write here Employee dot.

2466
02:37:46,360 --> 02:37:48,200
Now you see I'm there.

2467
02:37:48,200 --> 02:37:52,320
This I'm getting this employee ID
So employee

2468
02:37:52,800 --> 02:37:58,040
DOD Employee Correct, Correct.

2469
02:37:58,800 --> 02:38:01,240
I mean, this employee

2470
02:38:01,240 --> 02:38:05,280
this should match with the

2471
02:38:06,960 --> 02:38:09,760
global food

2472
02:38:11,760 --> 02:38:14,440
Store Employee

2473
02:38:26,600 --> 02:38:27,840
So far, so good.

2474
02:38:27,840 --> 02:38:28,800
Everyone

2475
02:38:37,320 --> 02:38:47,880
nice.

2476
02:38:47,880 --> 02:38:48,440
Fine.

2477
02:38:49,400 --> 02:38:52,080
It is just part dignity trade.

2478
02:38:52,080 --> 02:38:54,960
And you shall should must do well.

2479
02:38:54,960 --> 02:38:58,080
Remember gave you that example

2480
02:38:58,200 --> 02:39:00,200
but I didn't give an example of it.

2481
02:39:00,200 --> 02:39:08,560
I already get I believe me,

2482
02:39:08,560 --> 02:39:11,600
everyone is busy in
writing the code store names

2483
02:39:13,840 --> 02:39:18,320
and here, right?

2484
02:39:18,440 --> 02:39:20,480
Yes. Mustard
is stronger than short. Right?

2485
02:39:20,480 --> 02:39:24,200
And then we embedded
we and there is no point of error

2486
02:39:24,200 --> 02:39:29,080
rate.

2487
02:39:29,080 --> 02:39:32,760
I will tell you one day like this.

2488
02:39:32,760 --> 02:39:33,200
Okay.

2489
02:39:33,200 --> 02:39:35,760
But I didn't electric

2490
02:39:38,280 --> 02:39:40,720
today I with also

2491
02:39:45,920 --> 02:39:47,760
so now here after this

2492
02:39:47,760 --> 02:39:52,440
I am going to write in another point and

2493
02:39:53,920 --> 02:39:57,000
then the data

2494
02:39:58,560 --> 02:40:01,840
victim data and this object

2495
02:40:02,080 --> 02:40:05,160
which object employee with small E Right.

2496
02:40:06,040 --> 02:40:09,240
This particular object

2497
02:40:09,600 --> 02:40:12,080
your second feature please.

2498
02:40:12,080 --> 02:40:14,400
Now let me complete my second feature

2499
02:40:15,800 --> 02:40:17,640
then only I will bring, then I will.

2500
02:40:17,640 --> 02:40:19,160
Then I can write.

2501
02:40:19,160 --> 02:40:20,640
Let me completely demonstrate.

2502
02:40:20,640 --> 02:40:30,840
I be.

2503
02:40:30,840 --> 02:40:31,840
Yeah.

2504
02:40:32,240 --> 02:40:40,640
Why you not typing by the end
without my completion?

2505
02:40:40,640 --> 02:40:43,680
How would you know that you are having an

2506
02:40:49,920 --> 02:40:51,640
I just to get back from break?

2507
02:40:51,640 --> 02:40:53,200
No issues so I will give you time.

2508
02:40:53,200 --> 02:40:54,920
Could they they would post

2509
02:40:57,000 --> 02:41:01,640
employee object. Yes.

2510
02:41:02,520 --> 02:41:04,720
Employee object

2511
02:41:05,800 --> 02:41:08,040
matches their data

2512
02:41:09,720 --> 02:41:12,400
used to create

2513
02:41:14,000 --> 02:41:15,920
employee

2514
02:41:16,200 --> 02:41:40,360
with employee IED.

2515
02:41:40,360 --> 02:41:43,000
Now see what I'm doing here.

2516
02:41:43,000 --> 02:41:44,320
I provided that.

2517
02:41:44,320 --> 02:41:46,560
Okay, this data should match.

2518
02:41:46,560 --> 02:41:47,760
So which data?

2519
02:41:47,760 --> 02:41:50,040
Which. Correct. I'm talking about here.

2520
02:41:50,040 --> 02:41:52,600
So remember there was a concept called

2521
02:41:52,600 --> 02:41:56,440
data table.

2522
02:41:56,440 --> 02:42:01,200
How many of you guys
remember this concept of data table?

2523
02:42:01,200 --> 02:42:04,200
Right.

2524
02:42:04,200 --> 02:42:07,480
Let's take the keys from here
one by one for anybody.

2525
02:42:08,040 --> 02:42:09,600
So now see what I will do.

2526
02:42:09,600 --> 02:42:11,960
I will go in payload constants right

2527
02:42:12,640 --> 02:42:15,200
in this being or the constants from here.

2528
02:42:15,600 --> 02:42:18,600
I would first rate this E and B force me

2529
02:42:28,400 --> 02:42:31,360
and be forced to.

2530
02:42:31,640 --> 02:42:33,600
Then I would need

2531
02:42:39,720 --> 02:42:47,320
this in last.

2532
02:42:47,320 --> 02:42:50,200
So let's create the new data.

2533
02:42:50,440 --> 02:42:52,920
I'm going to end this time.

2534
02:42:52,920 --> 02:42:54,280
I shall and

2535
02:42:55,720 --> 02:42:59,760
am. And this is the force to me.

2536
02:42:59,760 --> 02:43:03,400
I will provide here first name

2537
02:43:04,200 --> 02:43:06,280
and then last name.

2538
02:43:06,280 --> 02:43:08,160
So let me go here. I will.

2539
02:43:08,160 --> 02:43:10,920
Last name is only.

2540
02:43:10,920 --> 02:43:13,360
So this would be my doctor

2541
02:43:13,360 --> 02:43:16,160
and then I would need

2542
02:43:16,160 --> 02:43:27,640
to delete trade.

2543
02:43:27,640 --> 02:43:29,520
So this would be my meaning.

2544
02:43:29,520 --> 02:43:30,680
And this

2545
02:43:31,200 --> 02:43:33,480
I'm going to update here this name or

2546
02:43:33,520 --> 02:43:34,480
and this

2547
02:43:37,600 --> 02:43:41,240
then gender.

2548
02:43:41,240 --> 02:43:43,640
This should be to

2549
02:43:47,920 --> 02:43:49,920
the impact to the company.

2550
02:43:49,920 --> 02:43:52,080
DC as part of Victims Services

2551
02:43:53,400 --> 02:43:55,040
is one of the largest guy of this.

2552
02:43:55,040 --> 02:43:56,320
On this planning.

2553
02:43:56,320 --> 02:43:57,400
He owns that angel.

2554
02:43:57,400 --> 02:44:01,280
Well,
now he owns JC where he owns Landrover.

2555
02:44:01,480 --> 02:44:02,800
He owns Ford Motors.

2556
02:44:02,800 --> 02:44:05,520
Even now, he now he owns the in India.

2557
02:44:05,920 --> 02:44:10,880
Also he is having Tata Consultancy
Services in saving technologies.

2558
02:44:11,040 --> 02:44:12,480
Saving Tata Steel needs.

2559
02:44:12,480 --> 02:44:13,920
I mean, so many the things

2560
02:44:34,160 --> 02:44:37,080
I know

2561
02:44:37,480 --> 02:44:41,520
is a big, big company baseball's
largest I.T company entity

2562
02:44:42,120 --> 02:44:45,880
in terms of employs the most of employees
if any company has

2563
02:44:46,320 --> 02:44:48,960
and it is DC is

2564
02:44:56,200 --> 02:45:04,640
and then employee status.

2565
02:45:04,640 --> 02:45:07,680
So this is employee

2566
02:45:11,360 --> 02:45:13,040
and employee

2567
02:45:13,040 --> 02:45:19,680
job title.

2568
02:45:19,680 --> 02:45:25,320
They should be to.

2569
02:45:25,320 --> 02:45:29,400
If you are doing them regularly created
then why are people different data

2570
02:45:29,880 --> 02:45:33,240
are we are going
to get the mode calls together

2571
02:45:35,400 --> 02:45:38,320
so next time I'm going to generate
the employee

2572
02:45:39,000 --> 02:45:43,680
is I'm going to generate the employee
after completing I will verify.

2573
02:45:43,920 --> 02:45:48,240
So to generate new employee,
I'm going to use new data and that's good.

2574
02:45:48,240 --> 02:45:52,800
Now I will run both of them together
and the plan is to run both them together.

2575
02:45:53,080 --> 02:46:02,640
Understood.

2576
02:46:02,640 --> 02:46:04,600
So, Christine, what is the scenario?

2577
02:46:04,600 --> 02:46:08,120
What's to be told one scenario right now
in a longer run.

2578
02:46:08,400 --> 02:46:09,480
So what would we do?

2579
02:46:09,480 --> 02:46:11,720
Do would first clear the employer same.

2580
02:46:11,880 --> 02:46:14,360
Then we will retrieve their data
from their database are ready.

2581
02:46:14,360 --> 02:46:16,920
But whether the things are working
together or not, quick

2582
02:46:25,760 --> 02:46:26,400
scenario

2583
02:46:26,400 --> 02:46:28,880
outline means you use example statement.

2584
02:46:29,520 --> 02:46:31,000
This is not the examples table.

2585
02:46:31,000 --> 02:46:33,280
This is detective was

2586
02:46:34,080 --> 02:46:36,600
guys guys.

2587
02:46:36,720 --> 02:46:39,280
What is the difference in between examples
dividend deductible

2588
02:46:53,000 --> 02:46:55,160
detectable works only for one night.

2589
02:46:55,160 --> 02:46:57,960
However,
the examples were for the entire scenario.

2590
02:46:57,960 --> 02:46:58,560
Right?

2591
02:46:58,560 --> 02:47:02,040
And in data table
we never used the net you examples.

2592
02:47:02,040 --> 02:47:04,080
They will be used in any case.

2593
02:47:04,080 --> 02:47:06,160
That's
why I'm not writing scenario. Right.

2594
02:47:06,360 --> 02:47:10,160
I'm writing synergy.

2595
02:47:10,160 --> 02:47:16,680
Is this okay?

2596
02:47:16,680 --> 02:47:19,200
All right, let's make some time in grade
because I know

2597
02:47:19,200 --> 02:47:22,440
some experiments were delayed,
so let's take time to write this.

2598
02:47:22,440 --> 02:47:23,600
Write this in any.

2599
02:47:23,600 --> 02:47:25,400
I'm giving you time

2600
02:52:03,240 --> 02:52:04,440
That is done

2601
02:52:17,920 --> 02:52:19,360
so that anyone was left

2602
02:52:19,360 --> 02:52:27,880
with this.

2603
02:52:27,880 --> 02:52:35,960
Everyone completed sprints.

2604
02:52:35,960 --> 02:52:38,280
Nice. Five minute ago.

2605
02:52:39,160 --> 02:52:41,960
You don't need

2606
02:52:41,960 --> 02:52:43,000
buttons

2607
02:52:45,000 --> 02:52:47,360
right?

2608
02:52:47,360 --> 02:52:52,840
So now, now
see what we are going to do up to this.

2609
02:52:52,840 --> 02:52:59,000
Simply, we are going to create
first steps for all of this.

2610
02:52:59,200 --> 02:52:59,560
Great.

2611
02:53:00,840 --> 02:53:01,720
So create the

2612
02:53:01,720 --> 02:53:06,840
steps, boss, to let me just change one

2613
02:53:07,400 --> 02:53:12,040
and I will go here
and I'll make it just simple.

2614
02:53:12,040 --> 02:53:14,880
Brian is equal to

2615
02:53:15,640 --> 02:53:17,120
Brian is equal to two.

2616
02:53:17,120 --> 02:53:19,840
And then if I run by run

2617
02:53:30,240 --> 02:53:33,840
it, it generates all the step,

2618
02:53:33,840 --> 02:53:34,960
so don't change a thing.

2619
02:53:34,960 --> 02:53:38,040
So I already created the steps.

2620
02:53:38,040 --> 02:53:41,760
I changed their data to one place
because I want to clear the steps for one

2621
02:53:41,760 --> 02:53:44,040
particular scenario. Right?

2622
02:53:44,040 --> 02:53:47,440
So here, if you see
I changed the date for this one,

2623
02:53:47,440 --> 02:53:54,600
this one was same already, correct?

2624
02:53:54,600 --> 02:53:55,840
No, no, that's fine.

2625
02:53:55,840 --> 02:53:56,720
It's totally fine.

2626
02:53:56,720 --> 02:54:16,640
So I'm glad
that you are paying attention to this.

2627
02:54:16,640 --> 02:54:17,520
So now.

2628
02:54:17,520 --> 02:54:24,000
No, here, here we are going to add
the data for this particular.

2629
02:54:24,000 --> 02:54:24,600
Right.

2630
02:54:24,960 --> 02:54:30,320
So let's determine
what is the first thing?

2631
02:54:30,320 --> 02:54:37,320
What is the first thing we have to do
is, for instance, what is the first thing?

2632
02:54:38,160 --> 02:54:39,960
We have to prepare the request

2633
02:54:39,960 --> 02:54:43,760
so that we can send this request
and hit the end point.

2634
02:54:43,760 --> 02:54:44,880
So let's do it.

2635
02:54:44,880 --> 02:54:48,760
If request specification do is done

2636
02:54:49,880 --> 02:54:50,440
to make us.

2637
02:54:50,440 --> 02:54:53,280
But universal
is also running to pass to error.

2638
02:54:53,280 --> 02:54:55,680
Nice. Right.

2639
02:54:55,680 --> 02:54:58,240
So now let's do this request

2640
02:54:58,240 --> 02:55:00,800
is equals to given.

2641
02:55:01,920 --> 02:55:04,440
Give me some that I shares on fire.

2642
02:55:04,960 --> 02:55:07,240
Jimmy is very cool

2643
02:55:08,320 --> 02:55:11,400
given dark

2644
02:55:11,400 --> 02:55:12,240
header.

2645
02:55:13,080 --> 02:55:14,320
All right.

2646
02:55:14,400 --> 02:55:17,280
Now we are writing a request to retrieve

2647
02:55:17,480 --> 02:55:20,480
created employee from the array
to protect what we have

2648
02:55:20,480 --> 02:55:33,240
produced predates.

2649
02:55:33,240 --> 02:55:33,960
Right.

2650
02:55:34,240 --> 02:55:36,840
So now here we are going to add

2651
02:55:40,080 --> 02:55:40,480
store name.

2652
02:55:40,480 --> 02:55:44,800
So what we are going to add here API
not we are going to

2653
02:55:45,880 --> 02:55:49,080
you are your ability correct front.

2654
02:55:49,080 --> 02:55:53,040
So now here I'm going to add things
from my API constant class.

2655
02:55:53,400 --> 02:55:56,520
So the first thing is mine
to be discontinued.

2656
02:55:57,000 --> 02:56:00,640
So I've already provided my quantity
in the value.

2657
02:56:00,640 --> 02:56:04,240
Also, I'm going to go
from here only so it is mine.

2658
02:56:05,720 --> 02:56:08,000
Go content, correct?

2659
02:56:09,680 --> 02:56:10,440
Correct.

2660
02:56:11,600 --> 02:56:13,320
And there is another header I'm

2661
02:56:13,320 --> 02:56:14,960
going to provide

2662
02:56:16,600 --> 02:56:18,760
that is another that I'm going to provide.

2663
02:56:18,760 --> 02:56:21,280
What is the next database

2664
02:56:22,640 --> 02:56:25,920
Authorization API Constant start

2665
02:56:29,400 --> 02:56:30,640
header authorization,

2666
02:56:30,640 --> 02:56:34,360
comma,
the value of the authorization header.

2667
02:56:34,400 --> 02:56:37,760
This what is the value?

2668
02:56:37,760 --> 02:56:42,000
It's token.

2669
02:56:42,000 --> 02:56:45,160
What whatever

2670
02:56:48,720 --> 02:56:50,320
token rate.

2671
02:56:50,400 --> 02:56:51,440
And then

2672
02:56:52,560 --> 02:56:55,000
since we are going to identify

2673
02:56:55,280 --> 02:56:58,800
specific entry into the database,
we said anything

2674
02:56:58,800 --> 02:57:04,720
we have to make an API call with
get requests or develop call judgment.

2675
02:57:04,720 --> 02:57:06,280
It's query barometer.

2676
02:57:06,280 --> 02:57:10,040
It's I'm going to a dot dot query better.

2677
02:57:11,400 --> 02:57:13,440
That is what we need equilibrium

2678
02:57:13,440 --> 02:57:19,920
with.

2679
02:57:19,920 --> 02:57:22,080
First we have to pass the key.

2680
02:57:22,520 --> 02:57:25,960
So these employ

2681
02:57:25,960 --> 02:57:29,400
now remember this provider,
we talk about employee object

2682
02:57:29,400 --> 02:57:32,480
with capital E or we talk about an object

2683
02:57:32,480 --> 02:57:35,760
with small E under be just an object.

2684
02:57:35,760 --> 02:57:39,840
We are getting this employee i.t
with small E, right?

2685
02:57:40,120 --> 02:57:43,400
So when it comes to comparison,
when it comes to edification validation

2686
02:57:43,400 --> 02:57:46,840
part with whether we are retrieving
their data or we are creating their data

2687
02:57:46,840 --> 02:57:50,960
or we're updating the data,
make sure the key should always be same.

2688
02:57:50,960 --> 02:57:55,800
That is small E for employee
and then we have globally stored employee.

2689
02:57:56,880 --> 02:57:58,360
For the employee we are creating,

2690
02:57:58,360 --> 02:58:02,120
we have normally stored employee activity

2691
02:58:02,120 --> 02:58:03,480
variable that

2692
02:58:08,760 --> 02:58:11,120
what happened Noel

2693
02:58:11,120 --> 02:58:12,320
I'm a non

2694
02:58:12,880 --> 02:58:15,480
you'll be to Zima in all cases

2695
02:58:15,640 --> 02:58:17,720
Christina's golden is better you lose

2696
02:58:22,240 --> 02:58:23,120
oblique starting

2697
02:58:23,120 --> 02:58:27,240
spring employee here he had
he had nice so when you guys are here

2698
02:58:27,240 --> 02:58:30,560
why you're not speaking I'm going
to commit this code in that it wasn't

2699
02:58:30,600 --> 02:58:32,680
doing something right
the focus here on the good

2700
02:58:35,160 --> 02:58:37,200
it is in same class right exactly.

2701
02:58:37,200 --> 02:58:40,240
So I'm going to write a simple embroidery.

2702
02:58:40,240 --> 02:58:41,840
This is the pattern.
We're going to be hit.

2703
02:58:41,840 --> 02:58:45,480
We are done with the request
making, linguistic completion.

2704
02:58:45,480 --> 02:58:48,320
So now in this particular
variable request,

2705
02:58:48,320 --> 02:58:50,600
we had this particular request
which we prepared.

2706
02:58:50,840 --> 02:58:52,120
And when

2707
02:58:53,720 --> 02:58:56,280
in any environment

2708
02:58:57,000 --> 02:58:58,480
which environment you're talking about

2709
02:59:01,200 --> 02:59:02,760
utilitarian and

2710
02:59:02,760 --> 02:59:08,480
nice, now that's fine, that's fine.

2711
02:59:08,480 --> 02:59:12,520
The good elements.

2712
02:59:12,520 --> 02:59:17,640
So now the next thing is
we have to have the employee.

2713
02:59:17,640 --> 02:59:18,200
Great.

2714
02:59:18,200 --> 02:59:22,480
So to hit the endpoint,
we have another variable.

2715
02:59:22,480 --> 02:59:25,880
After hitting the end point
for the request we are making,

2716
02:59:25,880 --> 02:59:26,680
we get one thing.

2717
02:59:26,680 --> 02:59:27,880
What is that

2718
02:59:30,240 --> 02:59:31,160
response?

2719
02:59:31,160 --> 02:59:31,960
Correct

2720
02:59:32,680 --> 02:59:35,600
response equals to request

2721
02:59:37,800 --> 02:59:41,040
dart dart which call

2722
02:59:42,680 --> 02:59:43,880
get called

2723
02:59:45,280 --> 02:59:47,000
and better get going.

2724
02:59:47,000 --> 02:59:48,040
We will try it here.

2725
02:59:48,040 --> 02:59:51,480
API calls things dart

2726
02:59:52,840 --> 02:59:55,680
due to one employee you want to

2727
02:59:56,160 --> 02:59:57,920
do methods clear.

2728
02:59:58,480 --> 03:00:03,600
There is steps clear to everyone.

2729
03:00:03,600 --> 03:00:06,320
I would not say do things get clear.

2730
03:00:06,840 --> 03:00:09,160
I mean everyone's is nice.

2731
03:00:10,240 --> 03:00:15,040
Is there anyone who has type of confusion
what we are going to do or any scope

2732
03:00:15,040 --> 03:00:18,120
related problem, region related issue
that I don't know what we are

2733
03:00:18,120 --> 03:00:19,400
doing anything like this

2734
03:00:35,880 --> 03:00:37,400
scope is clear, sir.

2735
03:00:37,400 --> 03:00:38,240
Great.

2736
03:00:38,440 --> 03:00:39,360
Nice.

2737
03:00:40,680 --> 03:00:43,440
If anybody has any problem with the scope,
let me know.

2738
03:00:43,440 --> 03:00:45,320
I will check. You do person.

2739
03:00:45,320 --> 03:00:46,960
I will send you that.

2740
03:00:46,960 --> 03:00:48,840
What is the scope

2741
03:00:52,320 --> 03:00:52,680
like?

2742
03:00:53,040 --> 03:00:55,920
Okay, now, now here.

2743
03:00:57,800 --> 03:01:01,640
The next thing is the status code
for these employees.

2744
03:01:01,640 --> 03:01:04,600
Again, it sees in DG radio.

2745
03:01:04,600 --> 03:01:09,840
See again, it passed the argument so I'm
going to provide it is also status good

2746
03:01:12,160 --> 03:01:13,240
status Court Right.

2747
03:01:13,240 --> 03:01:16,600
So guys,
we know how to write this response.

2748
03:01:16,920 --> 03:01:20,520
Dart Then we use plug verification
and validation point

2749
03:01:20,960 --> 03:01:23,600
DART, a third date.

2750
03:01:23,600 --> 03:01:26,880
DART status code.

2751
03:01:26,920 --> 03:01:27,880
What is the value?

2752
03:01:27,880 --> 03:01:29,960
This is the betterment that we can pass
this particular

2753
03:01:31,800 --> 03:01:32,520
status.

2754
03:01:32,520 --> 03:01:36,000
Is this correct?

2755
03:01:36,000 --> 03:01:36,840
Is this correct?

2756
03:01:36,840 --> 03:01:37,960
Students

2757
03:01:41,720 --> 03:01:46,760
Fine.

2758
03:01:46,760 --> 03:01:51,040
Now the next thing after status code
is what we are going to evaluate.

2759
03:01:51,040 --> 03:01:51,400
Then we

2760
03:01:54,960 --> 03:01:58,000
we are checking
the content, including the employee.

2761
03:01:58,200 --> 03:02:03,280
Whatever the employee we created,
we got one employee so that employee

2762
03:02:03,280 --> 03:02:07,080
and should match with the employee
with the dream from the database.

2763
03:02:07,560 --> 03:02:08,160
Right.

2764
03:02:08,160 --> 03:02:10,920
So for both the user site
for the same user in one,

2765
03:02:10,960 --> 03:02:14,160
the operations one is for creating,
one is for retrieving.

2766
03:02:14,360 --> 03:02:17,080
So for creation,
it will be driven by the idea

2767
03:02:17,080 --> 03:02:20,160
should we see expected
data versus actual data.

2768
03:02:20,280 --> 03:02:23,760
Right. What should be seen point

2769
03:02:23,760 --> 03:02:26,760
these type of associates
guys, we did 1 billion times right

2770
03:02:26,760 --> 03:02:30,240
in case you were in testing D
so many times we test India session.

2771
03:02:30,240 --> 03:02:33,000
We did it between sessions and people.
We did it.

2772
03:02:33,240 --> 03:02:37,920
Now we're doing the same thing in API
also is did you guys have any issue?

2773
03:02:37,960 --> 03:02:39,240
There is barely begun

2774
03:02:40,920 --> 03:02:45,520
right?

2775
03:02:45,520 --> 03:02:46,000
Where

2776
03:02:46,960 --> 03:02:54,440
is Dennis?

2777
03:02:54,440 --> 03:02:56,440
Dennis is typing.

2778
03:02:56,440 --> 03:02:59,200
All right.

2779
03:02:59,200 --> 03:03:00,840
I again

2780
03:03:05,040 --> 03:03:07,360
I'm you gradient enough

2781
03:03:07,920 --> 03:03:10,200
nice Dennis I like your attitude.

2782
03:03:10,200 --> 03:03:13,920
Great by

2783
03:03:16,080 --> 03:03:19,280
the Zuma is just lapping Z by estimates
but you know

2784
03:03:19,280 --> 03:03:23,160
very garnishing food and well-maintained
kitchen and everything.

2785
03:03:23,160 --> 03:03:25,160
Zuma is famous for that.

2786
03:03:25,160 --> 03:03:29,520
A Lexus trying to have a Lexus trying
to get the position of business right.

2787
03:03:29,520 --> 03:03:32,640
So the industry comp competition
is going on in the glass

2788
03:03:33,240 --> 03:03:35,240
case, taking for by glasses.

2789
03:03:35,240 --> 03:03:37,880
Nobody's focusing only on knowledge.
Right.

2790
03:03:38,560 --> 03:03:47,640
Alex is trying to capture the disposition.

2791
03:03:47,640 --> 03:03:48,040
Yeah. No.

2792
03:03:48,040 --> 03:03:49,640
And you're also here. You're smiling.

2793
03:03:49,640 --> 03:03:50,360
I know

2794
03:03:51,040 --> 03:03:51,600
your job.

2795
03:03:51,600 --> 03:04:01,680
You're doing very good.

2796
03:04:01,680 --> 03:04:02,160
I'm sorry.

2797
03:04:02,160 --> 03:04:05,680
I'm not talking about school nozzle.

2798
03:04:05,680 --> 03:04:08,360
First we created employee or not, then

2799
03:04:12,680 --> 03:04:16,080
then after creating the employee,
what is the best thing?

2800
03:04:16,080 --> 03:04:19,120
The standard that is, is once we are done

2801
03:04:19,120 --> 03:04:21,600
with employed the and we have to test.

2802
03:04:22,160 --> 03:04:23,840
Yes, the scope is simple logic.

2803
03:04:23,840 --> 03:04:25,320
The the strategy.

2804
03:04:25,320 --> 03:04:26,840
What we are going to do in the scope,

2805
03:04:26,840 --> 03:04:30,880
what we are going to do in this scenario
that is a scope requesting scope.

2806
03:04:31,240 --> 03:04:34,480
So first, if we create any employee
knows what we have to do,

2807
03:04:34,680 --> 03:04:38,680
we have to retrieve the data, okay,
this is what we have created.

2808
03:04:38,800 --> 03:04:43,400
And now after retrieving this particular
data from the database, we have to match

2809
03:04:43,680 --> 03:04:48,160
whether this is the same data,
what we lost when creating the employee.

2810
03:04:48,320 --> 03:04:51,640
So now, when retrieving the employee
after creating it,

2811
03:04:51,800 --> 03:04:54,000
it should reflect the same data.

2812
03:04:54,000 --> 03:04:59,760
Isn't it
the correct approach of verification?

2813
03:04:59,760 --> 03:05:00,200
Right.

2814
03:05:00,200 --> 03:05:04,840
So enforce two scenario in first thing
that what we did, we created the employee.

2815
03:05:05,520 --> 03:05:10,560
Now in second scenario, what we are doing
we are simply retrieving the information

2816
03:05:10,560 --> 03:05:16,440
from the database for the employee
we created for the employee we created.

2817
03:05:16,560 --> 03:05:20,160
So once we are done
with writing this particular scenario here

2818
03:05:20,480 --> 03:05:24,240
for three, create the employee
and then we will retrieve the information

2819
03:05:24,240 --> 03:05:27,680
and then we provide some verification,
validation, check points trained

2820
03:05:33,200 --> 03:05:33,840
right

2821
03:05:35,720 --> 03:05:37,200
now. Understood.

2822
03:05:37,560 --> 03:05:39,640
Now, scope clearance

2823
03:05:46,720 --> 03:05:47,320
of fact.

2824
03:05:47,320 --> 03:05:48,880
You're welcome.

2825
03:05:49,080 --> 03:05:51,840
Now here today, see what I'm going to do

2826
03:05:53,000 --> 03:05:55,080
in order to get one particular

2827
03:05:55,080 --> 03:05:58,080
being from the entire responsibility
change

2828
03:05:59,160 --> 03:06:01,560
drink.

2829
03:06:01,560 --> 03:06:03,960
Are you writing this next
to make me confused?

2830
03:06:05,760 --> 03:06:08,360
Two words you type and in both words

2831
03:06:08,360 --> 03:06:10,800
you put spelling mistakes

2832
03:06:17,400 --> 03:06:20,200
and it's drunk yet and it's know late.

2833
03:06:20,400 --> 03:06:23,080
We don't know is testing.

2834
03:06:23,080 --> 03:06:26,880
You left the item spelling Alex.

2835
03:06:26,880 --> 03:06:27,600
I don't know.

2836
03:06:27,600 --> 03:06:30,440
I was thinking each to be honest
even his lap.

2837
03:06:30,440 --> 03:06:31,320
Is that all

2838
03:06:34,680 --> 03:06:37,840
the right But I'm going to

2839
03:06:38,400 --> 03:06:39,120
correct

2840
03:06:39,360 --> 03:06:42,600
he is lumping in Ukrainian language
you know this

2841
03:06:43,680 --> 03:06:45,840
beat what we know we know nothing.

2842
03:06:45,840 --> 03:06:49,880
He knows everything.

2843
03:06:49,880 --> 03:06:52,440
Okay, fine.

2844
03:06:52,560 --> 03:06:54,120
So now all the Einsteins.

2845
03:06:54,120 --> 03:06:55,960
Let's get back to work here.

2846
03:06:55,960 --> 03:06:57,960
We have to verify the employ 80.

2847
03:06:57,960 --> 03:07:01,960
So the member from the entire object
what we get from the response body.

2848
03:07:02,240 --> 03:07:04,920
If we get the body there,
we have multiple entries.

2849
03:07:05,120 --> 03:07:08,520
So from those entries,
if I want to retrieve one particular

2850
03:07:08,520 --> 03:07:13,640
information, we have to use one
Jason bot method, the member

2851
03:07:14,600 --> 03:07:16,600
that is Jason but method

2852
03:07:16,600 --> 03:07:20,360
not to get in Deja to get string
get get it right.

2853
03:07:20,360 --> 03:07:24,480
Yes got it later
you'll get that capability once

2854
03:07:25,320 --> 03:07:29,400
so let me right because it is going
to return one particular employ ID

2855
03:07:29,760 --> 03:07:33,520
so my employer is the string type
and writing temporary employee

2856
03:07:33,520 --> 03:07:36,600
be here like this and then from my rest

2857
03:07:38,360 --> 03:07:42,320
thought I'm seeing using JSON
but I could get string.

2858
03:07:43,440 --> 03:07:44,760
What is this pre.

2859
03:07:44,760 --> 03:07:47,520
So here let me use this one C,

2860
03:07:49,240 --> 03:07:52,880
E and B ied

2861
03:07:52,880 --> 03:07:57,280
employ temporary and beat IED.

2862
03:07:57,280 --> 03:07:59,800
This one I'm going to use here. Fine.

2863
03:08:00,960 --> 03:08:04,520
Now guys, to me,
one is the globally created

2864
03:08:04,520 --> 03:08:08,880
employer, globally stored employee
being employed here.

2865
03:08:09,880 --> 03:08:10,920
This one

2866
03:08:11,400 --> 03:08:15,760
and one is the employee
we are getting in this one right

2867
03:08:16,000 --> 03:08:19,680
So do verify
do employee eighties together what we use

2868
03:08:24,040 --> 03:08:25,560
assertions

2869
03:08:26,400 --> 03:08:28,840
assertions basically not assertions.

2870
03:08:29,480 --> 03:08:33,840
So assert doored

2871
03:08:34,680 --> 03:08:37,880
assert equals based.

2872
03:08:37,960 --> 03:08:40,400
Tell me this assert not assert equals.

2873
03:08:40,400 --> 03:08:42,480
You're taking from it

2874
03:08:47,800 --> 03:08:48,960
from deed assertions.

2875
03:08:48,960 --> 03:08:49,440
Right.

2876
03:08:49,440 --> 03:08:54,000
Because the main point
of creating our framework

2877
03:08:54,000 --> 03:08:59,160
and integrating API with that framework
is to use the facilities of our framework.

2878
03:08:59,160 --> 03:09:00,240
That's what we're doing.

2879
03:09:00,240 --> 03:09:03,160
So assert assert equals I'm seeing first

2880
03:09:03,160 --> 03:09:06,080
is my temporary employee I.D.

2881
03:09:06,480 --> 03:09:09,720
and then my globally created employee.

2882
03:09:10,160 --> 03:09:10,920
Right,

2883
03:09:12,280 --> 03:09:17,040
right.

2884
03:09:17,040 --> 03:09:19,680
This part will be one

2885
03:09:24,880 --> 03:09:25,320
scrutinize

2886
03:09:25,320 --> 03:09:35,440
despite clear will be or not.

2887
03:09:35,440 --> 03:09:38,800
Now now here you see

2888
03:09:38,800 --> 03:09:41,520
here you see it sees this particular part.

2889
03:09:41,520 --> 03:09:44,120
We need to generate data tables.

2890
03:09:44,120 --> 03:09:46,160
We need to generate data table. Right.

2891
03:09:46,520 --> 03:09:50,560
So here we are going to provide that data
in the detectible form.

2892
03:09:51,120 --> 03:09:53,040
So let's do this.

2893
03:09:53,080 --> 03:09:53,760
Let's do this.

2894
03:09:53,760 --> 03:09:57,880
How we are going to look initially?

2895
03:09:57,880 --> 03:10:02,320
First see, it is asking for how many
barometers, how many arguments the index

2896
03:10:05,440 --> 03:10:07,960
raised three arguments.

2897
03:10:07,960 --> 03:10:09,840
They forced its

2898
03:10:10,080 --> 03:10:12,680
employee object,

2899
03:10:12,680 --> 03:10:13,800
employee object.

2900
03:10:13,800 --> 03:10:16,320
Which employee object gets

2901
03:10:16,880 --> 03:10:18,360
this employee object?

2902
03:10:18,360 --> 03:10:20,040
Forgetting one employee.

2903
03:10:20,040 --> 03:10:22,200
This employee object is the first one,

2904
03:10:22,720 --> 03:10:27,000
then the second one I'm getting
is I'm getting this

2905
03:10:28,080 --> 03:10:30,600
response employee I.D.

2906
03:10:32,280 --> 03:10:34,440
response, employer.

2907
03:10:34,440 --> 03:10:36,480
And the third one is obviously detectible.

2908
03:10:37,000 --> 03:10:39,360
So you can provide this data table
like this one.

2909
03:10:39,360 --> 03:10:42,440
We simply import this party of data

2910
03:10:45,960 --> 03:10:48,720
tables like this,

2911
03:10:48,720 --> 03:10:49,760
Right? Like this, guys.

2912
03:10:49,760 --> 03:10:52,120
Data tables, simple.

2913
03:10:52,120 --> 03:10:53,120
These three things, please.

2914
03:10:53,120 --> 03:10:54,080
Straight

2915
03:10:54,600 --> 03:10:56,920
is right. District six, Get it.

2916
03:10:57,040 --> 03:10:59,120
So now you can understand it, Is it?

2917
03:11:00,480 --> 03:11:02,040
Let me remove this part

2918
03:11:02,040 --> 03:11:05,960
because we already discussed
these particular things multiple times.

2919
03:11:06,000 --> 03:11:07,880
So this

2920
03:11:10,240 --> 03:11:10,720
this part

2921
03:11:10,720 --> 03:11:20,760
clear to everyone.

2922
03:11:20,760 --> 03:11:24,240
If anybody has any question
in these three,

2923
03:11:24,800 --> 03:11:27,880
go to your feature file, you'll see

2924
03:11:29,520 --> 03:11:30,040
this is the

2925
03:11:30,040 --> 03:11:33,000
first employee object
we are talking about.

2926
03:11:33,600 --> 03:11:38,400
This is the employee ID we're
talking about, and this is their data.

2927
03:11:38,400 --> 03:11:40,000
People talking about.

2928
03:11:40,000 --> 03:11:45,400
This is their detective
that we are talking about right.

2929
03:11:45,400 --> 03:11:48,200
So one thing is this,
second thing is this.

2930
03:11:48,480 --> 03:11:50,560
And third thing is this.

2931
03:11:50,560 --> 03:11:55,120
Now, if you go here,
this is the object with small

2932
03:11:55,160 --> 03:11:59,520
E, this is the employee ADP are getting

2933
03:12:00,680 --> 03:12:01,960
and this is their data table.

2934
03:12:01,960 --> 03:12:07,920
We have generically right.

2935
03:12:07,920 --> 03:12:13,080
Is this clear?

2936
03:12:13,080 --> 03:12:15,480
No enemy from their data table.

2937
03:12:16,440 --> 03:12:18,840
By looking at this particular data table

2938
03:12:18,840 --> 03:12:21,160
in which form it is returning the value.

2939
03:12:22,480 --> 03:12:24,480
What type is this

2940
03:12:25,160 --> 03:12:27,200
maps conflict Eleanor

2941
03:12:28,480 --> 03:12:30,960
kind of data table gives error rate.

2942
03:12:31,000 --> 03:12:33,920
How soon do you change
it to this part? What I said,

2943
03:12:34,920 --> 03:12:35,560
did you change it

2944
03:12:35,560 --> 03:12:44,440
to like this?

2945
03:12:44,440 --> 03:13:00,600
I see.

2946
03:13:00,600 --> 03:13:02,800
Yes I did. I need to give that. All right.

2947
03:13:02,800 --> 03:13:04,480
And please check this particular part.

2948
03:13:04,480 --> 03:13:07,840
Are you using this input?

2949
03:13:07,840 --> 03:13:09,960
Can you please this input?

2950
03:13:09,960 --> 03:13:11,920
I ordered Googlebot not detected.

2951
03:13:11,920 --> 03:13:15,560
We don't get to be detected, but

2952
03:13:15,840 --> 03:13:19,160
please check this.

2953
03:13:19,160 --> 03:13:20,960
Also can x

2954
03:13:21,680 --> 03:13:24,040
someone will see give me some fire.

2955
03:13:24,040 --> 03:13:27,760
I would see Alexa is on fire

2956
03:13:34,920 --> 03:13:35,440
too much.

2957
03:13:35,440 --> 03:13:39,360
It it would be nice to get it

2958
03:13:40,560 --> 03:13:40,960
all right.

2959
03:13:40,960 --> 03:13:43,840
I think everyone now

2960
03:13:44,400 --> 03:13:47,560
wait for the leash.

2961
03:13:49,120 --> 03:13:51,440
Look, key item ultimately

2962
03:13:51,800 --> 03:13:54,400
are you guys are going to get this

2963
03:13:55,680 --> 03:13:56,640
Is it

2964
03:13:58,320 --> 03:14:06,600
is it?

2965
03:14:06,600 --> 03:14:11,760
Let me stop the recording for a moment.

2966
03:14:11,760 --> 03:14:14,800
Or is the. No,

2967
03:14:14,800 --> 03:14:15,440
no here.

2968
03:14:15,440 --> 03:14:19,480
See guys, at this point of time
when we are seeing the detected burn rate,

2969
03:14:19,480 --> 03:14:24,160
it is returning the maps, my maps
because firstname is the key

2970
03:14:24,320 --> 03:14:27,720
and the value we are pointing associated
to this particular key.

2971
03:14:28,000 --> 03:14:28,600
Right.

2972
03:14:28,600 --> 03:14:31,760
So whenever we talk about the requirement
that is returning key

2973
03:14:31,840 --> 03:14:35,120
and value bear,
we always consider these as

2974
03:14:36,960 --> 03:14:39,000
best maps, right?

2975
03:14:39,000 --> 03:14:42,600
And our detective will always ask that
this being our detective

2976
03:14:42,600 --> 03:14:45,560
will always ask what it ask it to ask.

2977
03:14:45,720 --> 03:14:49,320
You want this detective
to convert the values as mysteries.

2978
03:14:51,040 --> 03:14:52,640
Remember this case

2979
03:14:52,720 --> 03:14:57,640
we Bosner data from Excel file
so they're generating their data

2980
03:14:57,720 --> 03:15:01,520
the function right
converted maps right away

2981
03:15:01,560 --> 03:15:04,360
all the maps
one by one into the list rate.

2982
03:15:04,560 --> 03:15:07,400
But to compare by default
provide this parking meter.

2983
03:15:07,560 --> 03:15:10,440
But so here I'm going to write

2984
03:15:10,440 --> 03:15:13,120
my detective a dot

2985
03:15:13,440 --> 03:15:16,680
as it says list or maps on the IS maps

2986
03:15:17,760 --> 03:15:21,000
is maps
where my first value would be string.

2987
03:15:21,000 --> 03:15:25,360
It means my key would be history
and my value would also be street.

2988
03:15:26,960 --> 03:15:29,520
And this part, this part

2989
03:15:29,880 --> 03:15:34,080
I'm going to add in the list of maps,
so I'm going to write first

2990
03:15:35,480 --> 03:15:36,600
under the list.

2991
03:15:36,600 --> 03:15:40,120
That is a map and in this map
I'm going to provide a three

2992
03:15:40,280 --> 03:15:44,280
comma spring.

2993
03:15:44,280 --> 03:15:45,840
This is my

2994
03:15:46,520 --> 03:15:49,320
instability data

2995
03:16:02,880 --> 03:16:03,960
map of list with key.

2996
03:16:03,960 --> 03:16:06,680
And then now tell me,
guys, district is coming from where

2997
03:16:08,200 --> 03:16:11,560
this particular data is coming from here.

2998
03:16:11,560 --> 03:16:14,640
This line expected data

2999
03:16:14,640 --> 03:16:17,040
from a feature available right.

3000
03:16:17,040 --> 03:16:20,040
From what we find

3001
03:16:34,080 --> 03:16:35,920
now see what we are doing.

3002
03:16:35,920 --> 03:16:38,480
Expect predictability great feature.

3003
03:16:38,480 --> 03:16:42,400
But to compare this data,
we have to get another day.

3004
03:16:42,800 --> 03:16:44,800
It is coming from

3005
03:16:47,760 --> 03:16:49,880
what input should be used for list.

3006
03:16:50,320 --> 03:16:53,560
It is jolly good. It's simple.

3007
03:16:53,560 --> 03:16:56,200
This one would be great for map w would be

3008
03:16:59,800 --> 03:17:01,920
why we are doing a list of maps.

3009
03:17:02,160 --> 03:17:04,960
Find.

3010
03:17:04,960 --> 03:17:07,800
So right now

3011
03:17:07,960 --> 03:17:10,200
we are passing

3012
03:17:10,400 --> 03:17:12,600
the data like this in data table.

3013
03:17:12,600 --> 03:17:14,040
Right. This is my first name.

3014
03:17:14,040 --> 03:17:16,200
This is my middle name.
This is my last name.

3015
03:17:16,200 --> 03:17:17,400
This is my blood up.

3016
03:17:17,400 --> 03:17:18,720
So many things. Right?

3017
03:17:18,720 --> 03:17:21,240
And these are the values I getting

3018
03:17:22,400 --> 03:17:23,880
correct assignment.

3019
03:17:23,880 --> 03:17:26,200
What is this first name or the level last?

3020
03:17:26,200 --> 03:17:27,680
Then what is this

3021
03:17:33,600 --> 03:17:38,920
key and what is this here?

3022
03:17:38,920 --> 03:17:42,960
What are the value?

3023
03:17:44,720 --> 03:17:46,800
So when it returns together,
key and value,

3024
03:17:46,800 --> 03:17:55,080
what it makes, map.

3025
03:17:55,080 --> 03:17:58,480
So when you are getting the map,
it is having your key and value.

3026
03:17:58,480 --> 03:18:02,240
But if you have another value in future

3027
03:18:02,240 --> 03:18:05,040
to five legacy,
you're getting two employees.

3028
03:18:05,640 --> 03:18:08,040
Then one is returning one map,

3029
03:18:08,400 --> 03:18:12,040
another is returning another map,
another is returning, another maps.

3030
03:18:12,360 --> 03:18:12,880
Right?

3031
03:18:12,880 --> 03:18:18,240
So you have convert your data table first
as maps because it is returning the maps

3032
03:18:18,320 --> 03:18:21,240
and the one one draw
will returning one map.

3033
03:18:21,600 --> 03:18:23,760
Multiple rows
will be returning multiple maps.

3034
03:18:23,760 --> 03:18:25,920
So you have created a list of maps.

3035
03:18:27,120 --> 03:18:29,040
You have to create a list of maps.

3036
03:18:29,040 --> 03:18:32,320
But since it is an online,
you can only have one set of data.

3037
03:18:32,560 --> 03:18:34,800
So it could always be a map. No, no.

3038
03:18:34,800 --> 03:18:38,760
So right now,
the requirement defining the requirement,

3039
03:18:38,760 --> 03:18:40,840
which we are using
it is the smallest in any,

3040
03:18:40,840 --> 03:18:42,960
but we are talking
about the global scenario. Right?

3041
03:18:43,200 --> 03:18:47,120
So are getting from a bigger perspective
in real life examples,

3042
03:18:47,120 --> 03:18:48,120
when you go there,

3043
03:18:48,120 --> 03:18:52,960
you have to come up with an approach where
you can do this things in a batch right?

3044
03:18:52,960 --> 03:18:54,960
For the batch
kind of scenarios I'm going to put.

3045
03:18:55,680 --> 03:18:56,080
All right,

3046
03:18:57,720 --> 03:18:58,800
this is for one.

3047
03:18:58,800 --> 03:19:00,000
Since if we

3048
03:19:00,000 --> 03:19:03,480
do for multiple employees here,
we won't be having enough time to do that.

3049
03:19:03,760 --> 03:19:06,480
But that's why we are doing this.

3050
03:19:06,480 --> 03:19:09,360
We'll give you high level scenarios
that are low level information

3051
03:19:09,360 --> 03:19:11,480
will always be covered inside this.

3052
03:19:11,480 --> 03:19:13,440
Okay.

3053
03:19:13,440 --> 03:19:15,600
No, no, guys. Next thing.

3054
03:19:16,440 --> 03:19:17,440
Next thing,

3055
03:19:18,360 --> 03:19:31,320
I hope that this will break
What I'm seeing.

3056
03:19:31,320 --> 03:19:33,840
Noble Are you

3057
03:19:38,680 --> 03:19:41,040
know, was not yet in the class

3058
03:19:41,040 --> 03:19:43,880
gates Come on here

3059
03:19:44,880 --> 03:19:48,000
but right findable

3060
03:19:48,000 --> 03:19:50,360
so now it is
it is just kind of wakeup call

3061
03:19:50,360 --> 03:19:54,440
for all the alerts so they must know okay
you can call me on So

3062
03:19:57,640 --> 03:20:00,960
nuance is how it means
no one wants me to control.

3063
03:20:00,960 --> 03:20:01,680
It's great.

3064
03:20:01,680 --> 03:20:03,280
After 2 minutes, I'll check with it.

3065
03:20:03,280 --> 03:20:04,520
What is it in the class and not

3066
03:20:06,360 --> 03:20:08,200
I'm feeding my baby.

3067
03:20:08,200 --> 03:20:12,000
All right, all the best.

3068
03:20:12,000 --> 03:20:15,360
No, no, but.

3069
03:20:16,080 --> 03:20:19,440
All right,
so now, now for the actual data.

3070
03:20:19,600 --> 03:20:22,480
For the actual data,
what I'm going to do is see

3071
03:20:23,520 --> 03:20:26,880
in actually, like, here, make

3072
03:20:36,600 --> 03:20:38,640
I'm going to write from my response.

3073
03:20:39,600 --> 03:20:42,240
Dark body

3074
03:20:42,240 --> 03:20:44,280
in the body I will go in JSON.

3075
03:20:44,280 --> 03:20:47,760
But and from here I see get

3076
03:20:48,960 --> 03:20:51,600
simply get the object so which object

3077
03:20:52,200 --> 03:20:55,880
I'm going to employ object and this object

3078
03:20:56,040 --> 03:20:59,720
does this particular object

3079
03:20:59,960 --> 03:21:01,520
I'm here till the end of the session.

3080
03:21:01,520 --> 03:21:02,560
What is all right?

3081
03:21:02,560 --> 03:21:05,800
But my responsibility is to check
whether everyone is here or not.

3082
03:21:06,120 --> 03:21:09,720
Read them or not.

3083
03:21:09,720 --> 03:21:12,960
But see, it was a quick check.

3084
03:21:13,920 --> 03:21:16,560
I All right.

3085
03:21:17,000 --> 03:21:19,840
If you saw it getting out one

3086
03:21:24,600 --> 03:21:25,320
now, everyone

3087
03:21:25,320 --> 03:21:28,920
must be relieved
by being great great response them they

3088
03:21:30,560 --> 03:21:31,320
bindings.

3089
03:21:31,320 --> 03:21:36,680
So now see this particular employee object
grade this particular employee object.

3090
03:21:36,680 --> 03:21:39,920
If you see this is the employee object,
it is returning.

3091
03:21:39,920 --> 03:21:44,360
What goes in the body
of this employee object we are getting.

3092
03:21:44,360 --> 03:21:44,880
What?

3093
03:21:45,560 --> 03:21:46,320
Tell me

3094
03:21:49,200 --> 03:21:50,720
It's true.

3095
03:21:50,720 --> 03:21:55,160
This employee object is returning meet
all these keys and values are not

3096
03:21:57,200 --> 03:21:58,680
on. Read all this.

3097
03:21:58,680 --> 03:22:00,000
It is a map.

3098
03:22:00,000 --> 03:22:01,000
It is just a map.

3099
03:22:01,000 --> 03:22:04,240
This is not a list of maps
you guys remember.

3100
03:22:04,720 --> 03:22:07,240
This is one object. Come on.

3101
03:22:07,880 --> 03:22:10,480
This is one particular object. Right?

3102
03:22:10,680 --> 03:22:12,560
So these are keys and values.

3103
03:22:12,560 --> 03:22:17,440
These are keys and values.

3104
03:22:17,440 --> 03:22:22,240
That's not just with my bad guys, my back.

3105
03:22:22,680 --> 03:22:24,160
No issues. There is.

3106
03:22:24,160 --> 03:22:25,560
I understood

3107
03:22:26,160 --> 03:22:28,560
if multiple object, then list of maps.

3108
03:22:28,560 --> 03:22:31,560
Yes, I share one object.
Remember what we rate.

3109
03:22:31,560 --> 03:22:36,360
Map streaming is free and it is equal
to new hash or link dash with.

3110
03:22:36,960 --> 03:22:37,440
Great.

3111
03:22:37,440 --> 03:22:40,080
So how many object
which going to have just one for map?

3112
03:22:40,280 --> 03:22:43,560
And then we use map
and then we can provide any number of keys

3113
03:22:43,560 --> 03:22:47,400
and values together.

3114
03:22:47,400 --> 03:22:50,240
Jordan is I'm glad I'm glad you are here.

3115
03:22:50,240 --> 03:22:54,600
You're covered in nice I will come to you
is a great partner in crimes

3116
03:22:55,120 --> 03:22:59,040
so we can have multiple keys
and values in one object.

3117
03:22:59,040 --> 03:22:59,280
Right.

3118
03:22:59,280 --> 03:23:03,640
But if we have multiple objects, then
we can see only one object is returning.

3119
03:23:03,800 --> 03:23:05,240
One meant to object.

3120
03:23:05,240 --> 03:23:07,880
So returning to maps there,
we need to use documents.

3121
03:23:08,320 --> 03:23:11,880
Here it is getting just one as of now
according to the requirements.

3122
03:23:12,400 --> 03:23:18,000
But forget all employs in that community
list of maps right here.

3123
03:23:18,000 --> 03:23:19,760
We don't need just one.

3124
03:23:19,760 --> 03:23:21,760
So I'm going to get a map here.

3125
03:23:21,760 --> 03:23:24,920
So let me write a map.

3126
03:23:26,360 --> 03:23:27,720
In both keys and values

3127
03:23:27,720 --> 03:23:30,120
voters string on our index

3128
03:23:31,880 --> 03:23:33,520
keys, and then there's border string.

3129
03:23:33,520 --> 03:23:35,880
So I'm going to write here, This is mine.

3130
03:23:37,560 --> 03:23:39,360
I data.

3131
03:23:39,840 --> 03:23:43,200
This is my actually current

3132
03:23:55,320 --> 03:23:56,240
wrong place

3133
03:23:56,240 --> 03:23:57,200
or my

3134
03:24:03,320 --> 03:24:05,400
focus is gradient

3135
03:24:05,600 --> 03:24:10,000
focus.

3136
03:24:10,000 --> 03:24:11,160
Yeah, I got that.

3137
03:24:11,160 --> 03:24:13,560
I got Lukas studying school.

3138
03:24:14,840 --> 03:24:15,440
Fine.

3139
03:24:16,400 --> 03:24:19,800
So now, now see expected data.

3140
03:24:20,080 --> 03:24:21,240
Actually data.

3141
03:24:21,240 --> 03:24:26,800
But in actual data, remember
this particular part of map, right.

3142
03:24:26,800 --> 03:24:28,200
It really does key.

3143
03:24:28,200 --> 03:24:31,320
But when you add the one thing,
what is this one given value

3144
03:24:31,320 --> 03:24:35,720
means one being and one pair
means one set of values going to

3145
03:24:37,320 --> 03:24:39,720
that is one D, one value.

3146
03:24:39,720 --> 03:24:42,760
It means one belt, one permits
one set of building.

3147
03:24:42,760 --> 03:24:43,280
Right.

3148
03:24:43,280 --> 03:24:51,040
So how we read c
e and I'm going to write what

3149
03:24:54,280 --> 03:24:57,600
I am going to write

3150
03:24:57,600 --> 03:25:00,960
here for loop advanced for loop actually.

3151
03:25:01,680 --> 03:25:02,000
Right.

3152
03:25:02,000 --> 03:25:04,600
These are the ones for loop,
but it's a single class.

3153
03:25:04,600 --> 03:25:05,920
Again, please.

3154
03:25:05,920 --> 03:25:10,200
This one, this one,
because that's the default format

3155
03:25:10,200 --> 03:25:14,040
we use in data table.

3156
03:25:14,040 --> 03:25:19,920
Indestructible.

3157
03:25:19,920 --> 03:25:23,040
Now, I think I should,
I should explain to these particles to see

3158
03:25:25,040 --> 03:25:26,080
in math

3159
03:25:26,080 --> 03:25:29,800
if we write my break and value
add water is great

3160
03:25:29,800 --> 03:25:32,200
and is equal to the new

3161
03:25:32,800 --> 03:25:35,080
hash map, write something like evenly.

3162
03:25:35,520 --> 03:25:38,120
So here we write, for example,

3163
03:25:38,120 --> 03:25:40,280
and the output

3164
03:25:40,280 --> 03:25:42,960
we provide one key and one value, right?

3165
03:25:43,840 --> 03:25:48,240
Similarly And don't
put so many other things right now.

3166
03:25:48,720 --> 03:25:50,280
Who triggers these values?

3167
03:25:50,280 --> 03:25:52,240
What would happen here

3168
03:25:52,320 --> 03:25:55,680
in my detected Well, first,
because returning name in the value

3169
03:25:56,520 --> 03:25:58,520
it is not returning all the things
one by one,

3170
03:25:58,920 --> 03:26:02,280
but employ object
is having all these values together.

3171
03:26:02,640 --> 03:26:06,360
So I have to retrieve one key,
one value into one thing.

3172
03:26:06,840 --> 03:26:10,440
So to retrieve from five values
one by one, what I have to do,

3173
03:26:10,680 --> 03:26:14,160
I have to use for each loop even,
but advanced for loop.

3174
03:26:14,480 --> 03:26:17,880
So what these are the ones for loop
does from these multiple values.

3175
03:26:17,880 --> 03:26:19,680
It returns one value here

3176
03:26:19,680 --> 03:26:23,880
will compare this one value it is passed
will go to the counter and so on.

3177
03:26:23,880 --> 03:26:24,640
And let's put this

3178
03:26:28,920 --> 03:26:29,480
underscore

3179
03:26:29,480 --> 03:26:37,840
this.

3180
03:26:37,840 --> 03:26:43,800
I understood this method.

3181
03:26:43,800 --> 03:26:44,760
Nice.

3182
03:26:45,520 --> 03:26:49,000
So now here I'm going to write for my math

3183
03:26:50,720 --> 03:26:54,720
on my math,
which is having supreme comma string.

3184
03:26:55,600 --> 03:26:58,120
I'm going to use one key at one time.

3185
03:26:58,120 --> 03:27:00,840
We call it singular math.

3186
03:27:00,840 --> 03:27:04,680
And the value is coming
from my expected data.

3187
03:27:06,160 --> 03:27:08,120
From my expected data.

3188
03:27:08,120 --> 03:27:08,960
Right.

3189
03:27:09,000 --> 03:27:10,200
So they tell me one thing.

3190
03:27:10,200 --> 03:27:12,840
If I write this method,

3191
03:27:12,840 --> 03:27:15,480
he said, Why we use this key search

3192
03:27:15,480 --> 03:27:22,920
method, why

3193
03:27:22,920 --> 03:27:25,120
we use search method

3194
03:27:28,840 --> 03:27:32,000
once this year to get the key in value
as a sake.

3195
03:27:32,360 --> 03:27:36,720
Both candidates value out others
who a set of keys.

3196
03:27:37,200 --> 03:27:38,200
Right?

3197
03:27:38,200 --> 03:27:43,440
So I am seeing I am saying,
hey, I'm going to provide a set here

3198
03:27:43,800 --> 03:27:47,080
and in this scene
going to provide this name is the key

3199
03:27:48,360 --> 03:27:50,600
is name is key

3200
03:27:51,040 --> 03:27:53,480
important as a suit

3201
03:27:53,480 --> 03:27:55,720
anyone knows why embroider said

3202
03:28:01,920 --> 03:28:02,800
there is

3203
03:28:03,440 --> 03:28:05,520
any idea why I am providing said

3204
03:28:08,520 --> 03:28:13,240
because every single key
should provide a unique value.

3205
03:28:13,560 --> 03:28:15,440
If I provide a list, list

3206
03:28:15,440 --> 03:28:18,720
allows duplicates
but state never allows duplicate.

3207
03:28:19,000 --> 03:28:19,560
Right?

3208
03:28:19,560 --> 03:28:23,040
So we need set here
so we can avoid all the duplication.

3209
03:28:23,040 --> 03:28:26,520
We always get unique keys.

3210
03:28:26,520 --> 03:28:28,320
Amazing it or not.

3211
03:28:28,600 --> 03:28:29,840
Good job.

3212
03:28:30,040 --> 03:28:31,880
Good job. It was a minor one.

3213
03:28:31,880 --> 03:28:34,160
Good one.

3214
03:28:34,160 --> 03:28:36,000
No one was welcome.

3215
03:28:36,960 --> 03:28:37,640
Fine.

3216
03:28:39,120 --> 03:28:40,080
So we proceed for this.

3217
03:28:40,080 --> 03:28:40,720
Williams

3218
03:28:43,680 --> 03:28:46,200
Now from these keys not emigres

3219
03:28:46,200 --> 03:28:51,760
here here in this part
I should say keys from this map keys.

3220
03:28:51,760 --> 03:28:52,240
They're great.

3221
03:28:52,240 --> 03:28:55,200
I'm getting all the keys
here in the form of set.

3222
03:28:55,560 --> 03:28:57,880
So I'm having false
name with the name last name.

3223
03:28:57,880 --> 03:28:59,400
Every single thing available.

3224
03:28:59,400 --> 03:29:01,560
Every single thing available. Right.

3225
03:29:01,560 --> 03:29:02,920
I'm Going to right.

3226
03:29:02,920 --> 03:29:06,320
I am going to play this. I need 42

3227
03:29:07,440 --> 03:29:08,760
again, 42 bananas.

3228
03:29:08,760 --> 03:29:13,160
The string
key will be getting from the keys.

3229
03:29:14,720 --> 03:29:15,840
From the keys.

3230
03:29:15,840 --> 03:29:18,240
Now why is this to place
another for each loop?

3231
03:29:18,240 --> 03:29:21,840
What is the reason behind this?

3232
03:29:21,840 --> 03:29:32,520
Why another for each loops
tremendous. Why?

3233
03:29:32,520 --> 03:29:34,080
And then for each loop.

3234
03:29:34,080 --> 03:29:36,960
Who gave each key to blue
to look through the keys.

3235
03:29:36,960 --> 03:29:39,600
To traverse the key.
To isolate the key one by one.

3236
03:29:39,600 --> 03:29:41,000
To look through the key player.

3237
03:29:41,000 --> 03:29:43,160
So one key we will get one time.

3238
03:29:43,560 --> 03:29:44,760
Let's go ahead.

3239
03:29:44,920 --> 03:29:48,360
So I'm going to read first

3240
03:29:49,040 --> 03:29:53,520
Exit data value is equal to unseen map.

3241
03:29:54,600 --> 03:29:57,840
Don't get

3242
03:30:00,120 --> 03:30:01,440
map, don't get the key.

3243
03:30:01,440 --> 03:30:02,200
I'm going to

3244
03:30:04,840 --> 03:30:06,000
this clear

3245
03:30:08,160 --> 03:30:08,720
this part.

3246
03:30:08,720 --> 03:30:09,360
Clear.

3247
03:30:09,360 --> 03:30:13,280
This one is returning me
the map from that map, whatever the key

3248
03:30:13,280 --> 03:30:16,200
I'm getting and providing it here
from your Java concept

3249
03:30:17,080 --> 03:30:19,080
and string, I would see here

3250
03:30:20,120 --> 03:30:21,760
for my

3251
03:30:21,760 --> 03:30:24,720
bottom line actual value.

3252
03:30:24,720 --> 03:30:28,880
I'm going to write it

3253
03:30:28,880 --> 03:30:32,960
to do the right door and

3254
03:30:36,680 --> 03:30:41,040
expected value in actual value.

3255
03:30:41,040 --> 03:30:45,040
Looping all the keys
and finding my data. Yes.

3256
03:30:45,840 --> 03:30:47,280
Yes. Correct.

3257
03:30:47,280 --> 03:30:49,960
So now here there is when I'm having

3258
03:30:49,960 --> 03:30:53,160
expected value in actual value board.

3259
03:30:53,440 --> 03:30:57,480
So from here,
if I want to compare two things together

3260
03:30:57,600 --> 03:31:06,360
from J, you need what we have to use.

3261
03:31:06,360 --> 03:31:08,880
Again, assert, not

3262
03:31:09,600 --> 03:31:12,560
assert equals.

3263
03:31:12,560 --> 03:31:14,200
It should say expected value.

3264
03:31:14,200 --> 03:31:17,080
Gamma actually

3265
03:31:17,120 --> 03:31:20,040
expected comma actually value player

3266
03:31:24,240 --> 03:31:25,720
here this part of

3267
03:31:29,280 --> 03:31:31,400
outside the loop I'm going to write here

3268
03:31:32,440 --> 03:31:35,080
my another string

3269
03:31:35,080 --> 03:31:38,040
I notice frame called e and B ideas

3270
03:31:38,040 --> 03:31:41,760
equals to I'm going to provide my response

3271
03:31:44,040 --> 03:31:46,680
dark body

3272
03:31:47,560 --> 03:31:51,400
and from the body
I can get decent but dark from the

3273
03:31:51,480 --> 03:31:57,000
I get string in this string I'm
seeing from the response employ 80

3274
03:31:58,080 --> 03:32:00,240
response employ 80,

3275
03:32:00,240 --> 03:32:02,840
which is again, I'm going to provide a

3276
03:32:06,600 --> 03:32:09,600
equals to this employ 80

3277
03:32:09,600 --> 03:32:14,920
which I'm getting from here
to my global employer,

3278
03:32:14,920 --> 03:32:18,000
even though we have completed
this particular part earlier also.

3279
03:32:18,120 --> 03:32:19,000
Right.

3280
03:32:19,200 --> 03:32:22,440
We are again,
we defined it just for satisfaction

3281
03:32:25,560 --> 03:32:28,800
flagging any question in this podcast.

3282
03:32:29,560 --> 03:32:52,200
The main question is this expansion.

3283
03:32:52,200 --> 03:32:53,600
Clearly we want

3284
03:33:09,080 --> 03:33:09,920
it's possible for you

3285
03:33:09,920 --> 03:33:13,800
to give somehow to play with it.

3286
03:33:13,800 --> 03:33:16,720
Yeah, definitely.
I will give you the task today.

3287
03:33:16,720 --> 03:33:18,840
I will give you the task. Everyone.

3288
03:33:18,840 --> 03:33:21,600
Yes. I mean, is there, like you
said, the columns

3289
03:33:24,600 --> 03:33:25,680
column.

3290
03:33:26,760 --> 03:33:29,200
No. First
rendering the again values together.

3291
03:33:29,200 --> 03:33:35,000
Right.

3292
03:33:35,000 --> 03:33:38,160
And from that map only,
can you show your code for one second?

3293
03:33:39,040 --> 03:33:41,160
Sure. As they will.

3294
03:33:41,160 --> 03:33:44,400
This is the code.

3295
03:33:44,400 --> 03:33:45,000
And see this.

3296
03:33:46,920 --> 03:33:48,120
You see this is the code

3297
03:33:48,120 --> 03:33:53,480
on rank.

3298
03:33:53,480 --> 03:33:56,640
It is going to means

3299
03:33:59,880 --> 03:34:01,120
identical questions.

3300
03:34:01,120 --> 03:34:08,640
I want to be honest.

3301
03:34:08,640 --> 03:34:10,720
You mean to see this particular piece?

3302
03:34:10,960 --> 03:34:40,200
This one You are meaning?

3303
03:34:40,200 --> 03:34:43,120
Simon, Remember one thing
when we talk about this key

3304
03:34:43,760 --> 03:34:47,280
like language and only use this part

3305
03:34:47,280 --> 03:34:48,720
when you get a map.

3306
03:34:48,720 --> 03:34:49,240
Right?

3307
03:34:49,240 --> 03:34:51,840
See, we cannot change the structure
for us to.

3308
03:34:52,360 --> 03:34:54,560
Right. So we are getting a map.

3309
03:34:55,280 --> 03:34:58,560
So in map
we have find a way through region.

3310
03:34:58,560 --> 03:35:00,720
You can get one specific entity.

3311
03:35:00,720 --> 03:35:04,000
So what does the second we're using this
classic method,

3312
03:35:04,440 --> 03:35:09,000
we are using this to set out
one particular element.

3313
03:35:09,000 --> 03:35:09,720
Right.

3314
03:35:09,720 --> 03:35:12,440
Which is already having in the map. Right.

3315
03:35:12,600 --> 03:35:15,880
So which contains Indian hash map
or any other map.

3316
03:35:15,880 --> 03:35:22,040
If I want to get only one particular part
from there, we have to use key set.

3317
03:35:22,040 --> 03:35:22,720
Correct.

3318
03:35:22,720 --> 03:35:26,160
So that is the actual approach
we have to follow when we come across

3319
03:35:26,160 --> 03:35:30,720
any map since we are passing their data
in a key and the loop here

3320
03:35:30,720 --> 03:35:34,520
and we're getting the grid also performing
that is map.

3321
03:35:34,920 --> 03:35:36,760
So there we have to use keys to be

3322
03:35:38,560 --> 03:35:39,080
played.

3323
03:35:39,080 --> 03:35:42,800
And you say there's not
the column is it is basically a matter

3324
03:35:42,800 --> 03:35:48,880
which we generally use
to create a stick place.

3325
03:35:49,760 --> 03:35:53,480
If you if you go to the job,
if you revise the Java

3326
03:35:53,480 --> 03:35:56,720
you would see a key segment
that is used to identify

3327
03:35:56,720 --> 03:35:59,920
one particular component
from your complete the map,

3328
03:36:00,200 --> 03:36:06,320
right?

3329
03:36:06,320 --> 03:36:08,640
Fine. So let's run in this park.

3330
03:36:08,640 --> 03:36:10,000
Let's run this.

3331
03:36:10,000 --> 03:36:28,000
Let's see. Fine.

3332
03:36:29,000 --> 03:36:34,240
So now you see it says expected
and it got a unit mail.

3333
03:36:34,800 --> 03:36:35,040
Nice.

3334
03:36:35,040 --> 03:36:37,920
Can you see this?

3335
03:36:37,920 --> 03:36:38,600
Nice.

3336
03:36:39,000 --> 03:36:40,800
It says expected aim.

3337
03:36:40,800 --> 03:36:43,560
And it got actually me right.

3338
03:36:43,920 --> 03:36:48,600
So remember here, if you see
if you see here when you provide here

3339
03:36:49,400 --> 03:36:53,600
when you provide here
something in your create employee bar.

3340
03:36:53,760 --> 03:36:54,200
Right.

3341
03:36:54,200 --> 03:36:57,560
Is an F it provides here as in female.

3342
03:36:57,720 --> 03:36:58,040
Right.

3343
03:36:58,040 --> 03:37:00,920
You see it
provides yet as female. Correct.

3344
03:37:02,360 --> 03:37:07,480
Okay.

3345
03:37:07,480 --> 03:37:08,040
Correct.

3346
03:37:08,040 --> 03:37:11,480
So when you go here, when you go here

3347
03:37:11,480 --> 03:37:13,480
in your claim, what do you have to do

3348
03:37:15,120 --> 03:37:15,680
anyways?

3349
03:37:15,680 --> 03:37:18,720
What do you have to do
in order to make it possible?

3350
03:37:18,720 --> 03:37:20,840
Do you have to provide the

3351
03:37:27,120 --> 03:37:31,000
in studio and be able to place me

3352
03:37:32,640 --> 03:37:32,960
right.

3353
03:37:32,960 --> 03:37:35,000
It's been changed to me.

3354
03:37:35,000 --> 03:37:35,840
I already changed.

3355
03:37:35,840 --> 03:37:36,440
And then

3356
03:37:37,320 --> 03:37:39,120
let's run an API now.

3357
03:37:39,120 --> 03:37:41,600
This time it's running.

3358
03:37:41,600 --> 03:37:44,920
So now again,
it is going to generate a new token again,

3359
03:37:44,920 --> 03:37:46,920
it is going to generate a new employee

3360
03:37:46,920 --> 03:37:47,480
and again

3361
03:37:47,480 --> 03:37:49,960
it is going to get the new employee
only right

3362
03:37:49,960 --> 03:37:52,560
and it will compare their data against
with the employee.

3363
03:37:52,760 --> 03:37:55,320
So now see it is past

3364
03:37:55,600 --> 03:37:56,680
now, so it is positive.

3365
03:37:56,680 --> 03:37:59,280
Now let's read this console closely.

3366
03:37:59,280 --> 03:38:01,080
Let's read the console closely.

3367
03:38:01,080 --> 03:38:05,760
You'll see this is the employee
ID generated during the first date.

3368
03:38:06,520 --> 03:38:08,280
We generated this particular token

3369
03:38:09,240 --> 03:38:12,280
after reading the token added the employee

3370
03:38:12,840 --> 03:38:17,040
right after adding the employee,
we got this particular employee

3371
03:38:17,040 --> 03:38:20,400
and we have to put different
you know, we don't have the same data.

3372
03:38:20,400 --> 03:38:22,400
We look for one

3373
03:38:23,840 --> 03:38:26,520
simply to work measures.

3374
03:38:26,520 --> 03:38:30,560
So now here this employee,
it is stored as a global variable.

3375
03:38:30,560 --> 03:38:33,600
Now if you go here,
it says your status could be 200.

3376
03:38:34,040 --> 03:38:38,160
You got every single thing right
and it compares the values correct.

3377
03:38:38,680 --> 03:38:42,600
So see both values
equal make keys are equals.

3378
03:38:42,600 --> 03:38:46,200
You're getting the data are
equal is status code is 200.

3379
03:38:46,200 --> 03:38:47,520
Everything is fine.

3380
03:38:47,520 --> 03:38:51,240
That's why I would ask,
is this a lost associates are clear.

3381
03:38:52,800 --> 03:39:02,720
Is this clear to everyone?

3382
03:39:02,720 --> 03:39:24,000
Now the first thing I should do is
I should come with this code.

3383
03:39:24,000 --> 03:39:27,080
Gold has been pushed to the repository
now was to me.

3384
03:39:27,480 --> 03:39:29,520
How was the session? To me?

3385
03:39:29,520 --> 03:39:31,360
Wasn't clear.

3386
03:39:31,360 --> 03:39:31,920
Yes, I'm in.

3387
03:39:31,920 --> 03:39:42,680
Please ask another question.

3388
03:39:42,680 --> 03:39:44,480
Should a soft assert.

3389
03:39:44,480 --> 03:39:48,000
Oh, soft assert We use in testing due date

3390
03:39:54,680 --> 03:39:55,560
in the unit.

3391
03:39:55,560 --> 03:39:56,960
I never used.

3392
03:39:56,960 --> 03:40:00,320
We never used a sample despite
we never said so.

3393
03:40:00,320 --> 03:40:01,880
We are using the unique part. Right?

3394
03:40:01,880 --> 03:40:14,240
So here we don't use officer
for use on the assert.

3395
03:40:14,240 --> 03:40:15,600
It falls to them first.

3396
03:40:15,600 --> 03:40:17,960
And what go to second that is hard assert

3397
03:40:18,920 --> 03:40:21,720
soft assert
allows you to execute your code.

3398
03:40:21,720 --> 03:40:26,520
The last line right in the last line
that is the hard soft assert.

3399
03:40:27,160 --> 03:40:31,440
So here what we are using this is not
supposed to be this hard assert since.

3400
03:40:31,440 --> 03:40:33,520
It is a two different places. Right?

3401
03:40:34,080 --> 03:40:37,000
I must get 400 of these.

3402
03:40:37,000 --> 03:40:38,160
Check your point rate.

3403
03:40:38,160 --> 03:40:40,160
The one you expected is clear. Does good.

3404
03:40:40,400 --> 03:40:42,360
Check your get check.

3405
03:40:42,360 --> 03:40:42,960
You'll get called.

3406
03:40:42,960 --> 03:40:45,920
Then you will find the mistake
and you'll get Alex.

3407
03:40:45,960 --> 03:40:49,240
Whatever the endpoint
you're passing, check that you will find

3408
03:40:49,240 --> 03:40:54,240
the mistake there on. All

3409
03:40:55,960 --> 03:41:01,120
right on

3410
03:41:16,560 --> 03:41:18,640
grade checker API constant.

3411
03:41:18,640 --> 03:41:22,320
If we add more than one employee,
should we add that imprint constant again

3412
03:41:22,320 --> 03:41:26,160
to yes for more than one employee
of the multiple concentrate

3413
03:41:28,720 --> 03:41:30,120
if he had more than one employee.

3414
03:41:30,120 --> 03:41:32,360
Yes. Correct. In AP workflow steps.

3415
03:41:32,400 --> 03:41:35,960
No. Alex, in your constant
supposed to check the bot from here.

3416
03:41:36,440 --> 03:41:38,520
This particular part right?

3417
03:41:38,520 --> 03:41:41,880
Then whether you're calling this same key
in your call or not,

3418
03:41:42,240 --> 03:41:45,640
then going to your methods in your steps

3419
03:41:45,800 --> 03:41:48,960
right inside systems,
check this particular portion

3420
03:41:49,440 --> 03:41:53,600
because you're getting the added
here, 400 400 means bad request, right?

3421
03:41:53,800 --> 03:41:56,320
It means it is not identifying
the material on it.

3422
03:41:56,520 --> 03:41:58,200
So check this part.

3423
03:41:58,200 --> 03:42:04,320
Take your this part and check this mistake
is here in this truly is check this to

3424
03:42:06,320 --> 03:42:07,200
show your features.

3425
03:42:07,200 --> 03:42:08,760
I'll be sure my day.

3426
03:42:08,760 --> 03:42:20,400
This is my feature.

3427
03:42:20,400 --> 03:42:22,920
Alex understood what I'm saying.

3428
03:42:22,920 --> 03:42:24,920
Mistake is in the status. Good.

3429
03:42:24,920 --> 03:42:27,440
It means you're not getting 200.
You're waiting for night.

3430
03:42:27,720 --> 03:42:30,640
So 400 is more than 400
is the bad request.

3431
03:42:30,880 --> 03:42:33,400
Bad request
means you're trying to access something

3432
03:42:33,400 --> 03:42:36,200
which is not the industry
is not understanding your mistake.

3433
03:42:36,480 --> 03:42:39,240
So you request so good there. Jake.

3434
03:42:39,240 --> 03:42:54,360
What is the problem is with your request
and there you will find the error.

3435
03:42:54,360 --> 03:42:54,800
Yeah.

3436
03:42:54,880 --> 03:42:58,160
Still, if you if there's any problem,
then do let me know.

3437
03:42:58,160 --> 03:43:14,840
Okay.

3438
03:43:14,840 --> 03:43:15,480
All right, guys.

3439
03:43:15,480 --> 03:43:17,880
So I think I'm done from my side
for today's class.

3440
03:43:18,880 --> 03:43:20,880
If you guys are done
with your questions, then

3441
03:43:20,880 --> 03:43:23,960
when we begin decomposition. No.

3442
03:43:24,200 --> 03:43:25,200
Thank you so much, everyone.

3443
03:43:25,200 --> 03:43:27,560
Guys,
thank you so much. Thank you, everyone.
