1
00:00:15,160 --> 00:00:16,840
Ottawa Installing Intelligencer.

2
00:00:16,840 --> 00:00:22,680
Unfortunately,
the video for Mac users is not ready,

3
00:00:23,160 --> 00:00:27,960
and I want to record an additional video
in which I want to show you

4
00:00:27,960 --> 00:00:31,560
how to debug and navigate
through your intelligence that we do.

5
00:00:31,640 --> 00:00:36,000
It's not ready, but at the end of this
class, if we are left with some time,

6
00:00:36,360 --> 00:00:41,040
I will show you how to install it
and those who are eager to use it.

7
00:00:41,200 --> 00:00:44,120
You guys may start using it and the others

8
00:00:45,440 --> 00:00:48,760
most probably
at the end of today's class, or

9
00:00:50,160 --> 00:00:51,000
maybe

10
00:00:51,720 --> 00:00:53,640
by the end of next class

11
00:00:53,640 --> 00:00:56,040
I will share the videos care about

12
00:00:57,120 --> 00:00:59,600
in the end because I don't know
language discrimination

13
00:01:01,560 --> 00:01:07,120
16.11 Is it AM or am 16.11

14
00:01:10,400 --> 00:01:11,240
is the best.

15
00:01:11,240 --> 00:01:13,480
Alexi What do you mean by 16?

16
00:01:13,480 --> 00:01:16,480
Okay, so you mean.

17
00:01:16,480 --> 00:01:19,680
Yes, it it's, it should be if

18
00:01:20,960 --> 00:01:23,120
you are closely monitoring the canvas.

19
00:01:23,160 --> 00:01:24,080
Alexey

20
00:01:26,000 --> 00:01:27,640
whatever clouds from 7 a.m.

21
00:01:27,640 --> 00:01:29,640
in the morning till 10 p.m.

22
00:01:29,640 --> 00:01:31,040
in the evening

23
00:01:33,800 --> 00:01:37,120
somebody might read a lot about this
lives.

24
00:01:37,120 --> 00:01:38,400
I am little confused.

25
00:01:38,400 --> 00:01:42,000
Are we doing constructors
today are modified so we will be doing

26
00:01:42,000 --> 00:01:45,480
both.

27
00:01:45,480 --> 00:01:47,440
I am ready. Always.

28
00:01:47,440 --> 00:01:49,160
Okay. Is it okay now?

29
00:01:49,160 --> 00:01:52,200
Is the calendar perfect now

30
00:02:02,680 --> 00:02:05,840
this class and the the modified one.

31
00:02:05,880 --> 00:02:08,920
It was supposed to be part on weekdays,

32
00:02:09,720 --> 00:02:12,400
but we will be having additional 2 hours

33
00:02:12,480 --> 00:02:20,000
so we will start the constructors as well
today.

34
00:02:20,000 --> 00:02:22,440
I can plan something if we know before.

35
00:02:23,600 --> 00:02:27,360
Looks like we have a calendar
manager to. Yes.

36
00:02:28,000 --> 00:02:31,240
How many days off on Christmas
at most one.

37
00:02:32,480 --> 00:02:41,960
So you you can look at the calendar.

38
00:02:41,960 --> 00:02:45,040
So it's 31st is on Friday.

39
00:02:45,040 --> 00:02:46,600
Right. So

40
00:02:47,680 --> 00:02:50,360
there you have your day off

41
00:02:51,080 --> 00:02:52,760
it. Okay talk about New year.

42
00:02:52,760 --> 00:03:01,640
I mean one day is more than enough, right?

43
00:03:01,640 --> 00:03:03,840
So because we have to finish everything

44
00:03:04,920 --> 00:03:06,800
before in six months.

45
00:03:06,800 --> 00:03:09,120
So we will be

46
00:03:09,240 --> 00:03:11,480
always kind of on the part schedule

47
00:03:12,480 --> 00:03:12,840
maker.

48
00:03:12,840 --> 00:03:15,000
Then business is the time is flying.

49
00:03:15,440 --> 00:03:16,080
All right, guys.

50
00:03:16,080 --> 00:03:18,720
So have you guys watched the videos

51
00:03:19,400 --> 00:03:22,600
on Access Modified

52
00:03:22,600 --> 00:03:24,640
constructors and discovered

53
00:03:26,560 --> 00:03:28,960
did they make any sense this time?

54
00:03:28,960 --> 00:03:36,240
Oh, looks confusing. So.

55
00:03:36,280 --> 00:03:46,880
So. Okay, don't worry.

56
00:03:46,920 --> 00:03:47,920
That's why I'm here.

57
00:03:47,920 --> 00:03:51,040
I need more hands on

58
00:03:52,720 --> 00:03:53,280
immediate.

59
00:03:53,280 --> 00:03:54,880
Last year.

60
00:03:54,880 --> 00:03:59,040
All right, so let's let's go to this slide
because we were not able to do that.

61
00:03:59,600 --> 00:04:01,680
Make sense,
but don't have deep understanding.

62
00:04:02,400 --> 00:04:06,240
Okay, Alexa,
maybe videos are simpler, I think.

63
00:04:06,720 --> 00:04:08,320
Okay, you guys can

64
00:04:09,720 --> 00:04:11,800
so you guys can pick up the topics.

65
00:04:11,800 --> 00:04:16,200
So from the calendar
and then you can search the playlist

66
00:04:16,200 --> 00:04:18,320
from and actually on

67
00:04:19,680 --> 00:04:20,600
on those topics.

68
00:04:20,600 --> 00:04:27,920
If, if for you
the Alexa videos are simpler.

69
00:04:27,920 --> 00:04:28,640
All right, guys.

70
00:04:28,640 --> 00:04:38,320
So we discussed three types of variables.

71
00:04:38,320 --> 00:04:41,320
The first speaker very hard to understand

72
00:04:41,800 --> 00:04:44,440
he has very good videos.

73
00:04:44,440 --> 00:04:45,880
Okay.

74
00:04:46,600 --> 00:04:46,960
Okay.

75
00:04:46,960 --> 00:04:49,800
I will try to share videos
from Alexi three.

76
00:04:51,360 --> 00:04:53,160
So we discussed about

77
00:04:53,160 --> 00:04:56,040
about the three types of variables

78
00:04:57,680 --> 00:04:59,640
in the last class

79
00:05:00,480 --> 00:05:02,400
and those types.

80
00:05:02,400 --> 00:05:04,320
What you can tell about quizzes.

81
00:05:04,320 --> 00:05:07,280
So I will do is I will be releasing
one more quiz today.

82
00:05:07,520 --> 00:05:10,080
This is what I can tell you,

83
00:05:10,080 --> 00:05:12,080
and I hope you guys already know

84
00:05:12,120 --> 00:05:18,280
the answers right?

85
00:05:18,280 --> 00:05:22,280
So we discussed about
three types of variables

86
00:05:23,280 --> 00:05:25,800
in the last class, right?

87
00:05:25,800 --> 00:05:31,160
So two of them
you guys have been using heavily in like

88
00:05:31,160 --> 00:05:36,800
in last classes,
for example, the instance variables.

89
00:05:36,800 --> 00:05:40,800
The variables again, you guys
tell me what, what are the instance

90
00:05:40,800 --> 00:05:48,520
variables?

91
00:05:48,520 --> 00:05:53,200
Event variable values change inside class.

92
00:05:53,200 --> 00:05:57,400
Outside my third,
there's almost perfect definition.

93
00:05:57,400 --> 00:06:00,960
You'll get the outside of my third

94
00:06:06,240 --> 00:06:08,920
outside of the method and changeable.

95
00:06:08,920 --> 00:06:12,240
So guys, all the variables
that we have discussed

96
00:06:12,880 --> 00:06:15,280
till this point, they are changeable.

97
00:06:15,680 --> 00:06:17,560
We want the static variables.

98
00:06:17,560 --> 00:06:21,040
I guess I explained in the last class
that don't get confused

99
00:06:21,040 --> 00:06:27,240
by the name static static in here
does not mean that that be there.

100
00:06:27,280 --> 00:06:30,320
The value of that variable
cannot be changed.

101
00:06:30,480 --> 00:06:31,200
Okay.

102
00:06:31,440 --> 00:06:36,280
Static here in mean
a special area inside the memory

103
00:06:37,280 --> 00:06:40,280
and whichever
value you support in that area,

104
00:06:40,320 --> 00:06:44,240
that value is shared
across all the instances.

105
00:06:44,520 --> 00:06:46,600
Okay. Of of a specific class.

106
00:06:47,200 --> 00:06:49,320
So that's like static means in here.

107
00:06:50,400 --> 00:06:53,200
But in certain space of too much memory,

108
00:06:54,360 --> 00:06:56,400
it's not about making too much memory.

109
00:06:56,400 --> 00:06:58,680
They stay longer in the memory.

110
00:06:59,400 --> 00:07:03,160
Maybe you should say this,
that they stayed longer in the memory.

111
00:07:03,160 --> 00:07:06,760
What can you tell about because this

112
00:07:07,000 --> 00:07:08,720
what do you want to hear here

113
00:07:08,720 --> 00:07:15,480
about the quizzes?

114
00:07:15,480 --> 00:07:17,480
No time.

115
00:07:18,000 --> 00:07:19,880
No time.

116
00:07:20,240 --> 00:07:22,680
Yeah.
Can you write in your native language?

117
00:07:22,680 --> 00:07:25,400
Alex and I will try to translate it
on Google

118
00:07:27,360 --> 00:07:29,120
it. Writing a native language.

119
00:07:29,120 --> 00:07:29,720
What do you mean?

120
00:07:29,720 --> 00:07:31,600
What do you want to hear from me about?

121
00:07:31,600 --> 00:07:33,880
With is very fast.

122
00:07:33,880 --> 00:07:39,000
You want more time for the quiz?

123
00:07:39,000 --> 00:07:41,280
Like, for example,
I have given you seven days.

124
00:07:41,280 --> 00:07:42,360
You want ten days?

125
00:07:42,360 --> 00:07:48,200
15 days, or the time when you as you solve
that with which time is less

126
00:07:52,400 --> 00:07:54,000
the duration

127
00:07:55,840 --> 00:07:59,600
or the deadline,

128
00:07:59,600 --> 00:08:02,240
maybe three minute

129
00:08:04,120 --> 00:08:06,280
are not 40 minutes enough.

130
00:08:06,280 --> 00:08:09,400
I mean, even if you are
if you Google every concept

131
00:08:09,400 --> 00:08:12,720
on the Internet and you
you can just copy and paste the answer,

132
00:08:12,720 --> 00:08:15,440
I think then even then the 40 minutes,
nothing more than, you

133
00:08:16,560 --> 00:08:18,560
know, 40 minutes are not enough.

134
00:08:20,160 --> 00:08:22,800
How many of you think
that 40 minutes are not enough?

135
00:08:22,800 --> 00:08:29,120
I not Google.

136
00:08:29,120 --> 00:08:33,320
So this is the first time
I'm hearing from a student

137
00:08:33,320 --> 00:08:37,480
about about the time that the 40 minutes
they are not enough.

138
00:08:37,480 --> 00:08:38,680
How many questions were there?

139
00:08:38,680 --> 00:08:42,400
1520.

140
00:08:42,400 --> 00:08:44,880
I broke my brain. 25.

141
00:08:45,160 --> 00:08:47,360
So usually this is what happens, guys.

142
00:08:47,360 --> 00:08:51,960
So we are training you for real life
scenarios on your job interviews.

143
00:08:51,960 --> 00:08:54,960
For one question at Max,
you guys will be getting one minute

144
00:08:54,960 --> 00:08:57,360
on, maybe one minute, 10 seconds. Okay.

145
00:08:59,200 --> 00:09:00,760
So that's why we have

146
00:09:00,760 --> 00:09:03,120
40 minutes for 25 questions

147
00:09:07,120 --> 00:09:08,760
so that you guys get used to

148
00:09:08,760 --> 00:09:17,680
to use your brain faster.

149
00:09:17,680 --> 00:09:18,520
All right, guys.

150
00:09:18,520 --> 00:09:23,360
So instance, instance variables
are those variables

151
00:09:23,360 --> 00:09:26,560
which are so right now,
you guys only know about methods.

152
00:09:26,560 --> 00:09:30,920
So let's keep the discussion
only two methods.

153
00:09:30,920 --> 00:09:35,480
So if a variable is declared
outside of a method,

154
00:09:36,640 --> 00:09:39,680
and if it is inside a class

155
00:09:40,480 --> 00:09:43,200
and there is no static keyword

156
00:09:43,640 --> 00:09:47,000
with that variable,
which type of variable is disguised.

157
00:09:47,440 --> 00:09:50,040
So there are three conditions

158
00:09:51,920 --> 00:09:54,720
outside of method,

159
00:09:54,720 --> 00:09:57,000
inside of class

160
00:09:57,000 --> 00:10:02,240
and there should not be a static keyword
with that variable.

161
00:10:02,400 --> 00:10:08,440
If we meet these three conditions, then
we can say we have an instance variable.

162
00:10:08,440 --> 00:10:09,040
Right?

163
00:10:09,960 --> 00:10:12,920
And when should
I use the instance variables?

164
00:10:14,880 --> 00:10:15,720
When should I use

165
00:10:15,720 --> 00:10:19,520
the instance variables?

166
00:10:19,520 --> 00:10:20,280
In one minute.

167
00:10:20,280 --> 00:10:23,560
I have to find a way
to find the answer or solve the problem.

168
00:10:24,800 --> 00:10:28,320
Is there any job without interviews?

169
00:10:28,320 --> 00:10:31,000
No. At least one interview.

170
00:10:31,040 --> 00:10:34,880
Usually there are three, but
in some scenarios there is one interview

171
00:10:37,480 --> 00:10:40,520
when we know that every time value is nil.

172
00:10:40,560 --> 00:10:42,640
No, this is not correct.

173
00:10:42,640 --> 00:10:45,720
Variable to be used across. Yes.

174
00:10:46,160 --> 00:10:50,240
And then you can you complete that across.

175
00:10:50,240 --> 00:10:56,640
But for common features are.

176
00:10:56,880 --> 00:10:58,320
Yes. That is also correct.

177
00:10:58,320 --> 00:11:01,840
I show when the value will be different.

178
00:11:01,840 --> 00:11:04,440
Are different for what

179
00:11:04,440 --> 00:11:07,280
to call method on null.

180
00:11:07,480 --> 00:11:10,440
Then I have those with one across methods.

181
00:11:10,880 --> 00:11:12,120
Across methods, yes.

182
00:11:12,120 --> 00:11:16,040
So when I have to share
something across methods

183
00:11:16,840 --> 00:11:21,320
and when I know that for each instance

184
00:11:21,960 --> 00:11:25,040
the value of the
variable will be different.

185
00:11:26,000 --> 00:11:28,400
These are the two conditions

186
00:11:28,400 --> 00:11:32,160
when I should be going for the instance
variables.

187
00:11:32,160 --> 00:11:34,920
Are these two conditions clear? Right.

188
00:11:34,920 --> 00:11:38,520
Response variables are defined

189
00:11:40,280 --> 00:11:41,360
within methods.

190
00:11:41,360 --> 00:11:43,560
All this is not correct. Massive.

191
00:11:43,560 --> 00:11:45,600
Those are local variables.

192
00:11:45,600 --> 00:11:47,080
So let me repeat the conditions.

193
00:11:47,080 --> 00:11:51,240
When I have to share a value.

194
00:11:51,640 --> 00:12:04,880
So let me also show you
so that you guys can really see that.

195
00:12:04,880 --> 00:12:08,240
So when I have to share

196
00:12:09,120 --> 00:12:12,880
a value across different methods, okay,

197
00:12:12,880 --> 00:12:17,280
so I want to access this name inside
this sleep

198
00:12:17,280 --> 00:12:22,520
method as well as inside this name method.

199
00:12:22,520 --> 00:12:25,440
Okay, So this is one condition. Okay,

200
00:12:25,600 --> 00:12:30,560
So this is one condition where I should be
declaring the instance variables.

201
00:12:30,560 --> 00:12:34,920
The other condition is that
I know that this name,

202
00:12:36,000 --> 00:12:38,520
this name can be different

203
00:12:39,160 --> 00:12:42,440
for each type of object
that I will be creating.

204
00:12:42,440 --> 00:12:42,720
Right.

205
00:12:42,720 --> 00:12:51,960
So if I open the dog for class, I can see

206
00:12:52,480 --> 00:12:57,600
one dog is having a name Casper,
the other one is having Casper Sky.

207
00:12:57,600 --> 00:12:58,160
Right?

208
00:12:58,160 --> 00:13:02,120
So the value from object
to object is changing.

209
00:13:02,720 --> 00:13:05,960
So if I have these two conditions,

210
00:13:05,960 --> 00:13:09,600
then I should be going for the instance
variables.

211
00:13:09,800 --> 00:13:14,280
Is it clear now or is there still anyone
who still don't understand this

212
00:13:19,840 --> 00:13:22,520
that tag lags.

213
00:13:23,760 --> 00:13:25,880
We will discuss about the static as well.

214
00:13:25,880 --> 00:13:27,120
Okay. All right.

215
00:13:27,120 --> 00:13:30,800
Now, the second type of variables
that we discussed

216
00:13:31,040 --> 00:13:33,320
were local variables.

217
00:13:33,880 --> 00:13:36,320
You can you guys define what are the local

218
00:13:36,320 --> 00:13:37,760
variables

219
00:13:41,760 --> 00:13:44,880
inside class?

220
00:13:44,880 --> 00:13:46,920
Yes, they are inside class, but

221
00:13:48,360 --> 00:13:50,800
they are also inside and method.

222
00:13:51,360 --> 00:13:52,200
Okay.

223
00:13:52,560 --> 00:13:56,400
The more proper definition will be inside

224
00:13:56,400 --> 00:14:00,560
the method or we we are.

225
00:14:00,600 --> 00:14:11,560
Can I also have these variables
other than methods?

226
00:14:11,560 --> 00:14:13,960
Parameters? Yes. Parameters.

227
00:14:13,960 --> 00:14:16,320
They are also local variables.

228
00:14:16,320 --> 00:14:17,760
What about the loops?

229
00:14:17,760 --> 00:14:19,840
What about the effects conditions?

230
00:14:19,840 --> 00:14:24,040
What about switchgear statements?

231
00:14:24,040 --> 00:14:27,360
If I declare any variability inside a loop

232
00:14:27,360 --> 00:14:34,200
or inside a switch statement or inside
if health conditions are those variables

233
00:14:34,240 --> 00:14:39,520
also local variables.

234
00:14:39,520 --> 00:14:42,600
So they are all called block of course.

235
00:14:43,200 --> 00:14:44,200
BLOCK of world.

236
00:14:44,200 --> 00:14:49,440
So yes, the variables
they are all local variables.

237
00:14:49,440 --> 00:14:49,800
Okay,

238
00:14:51,600 --> 00:14:53,400
So can you guys tell me

239
00:14:53,400 --> 00:14:56,360
if this dog too is a local variable

240
00:14:56,400 --> 00:14:59,520
or instance variable or a static variable?

241
00:14:59,600 --> 00:15:00,920
Don't rush, don't rush.

242
00:15:00,920 --> 00:15:03,280
Take 2 minutes, take 2 minutes.

243
00:15:03,280 --> 00:15:07,440
Think about it
and then tell me which type of variable

244
00:15:07,440 --> 00:15:16,160
is this variable?

245
00:15:16,160 --> 00:15:18,800
It's a local variable, right? Why?

246
00:15:18,800 --> 00:15:21,480
It is a local variable
Because this variable

247
00:15:21,480 --> 00:15:25,680
I am declaring inside this main method.

248
00:15:25,680 --> 00:15:27,600
Right? This is also a method, right?

249
00:15:27,600 --> 00:15:33,680
So if it's also a local variable,
okay, it's also a local variable.

250
00:15:33,680 --> 00:15:36,240
What about this name? Variable?

251
00:15:36,240 --> 00:15:37,200
What about this name?

252
00:15:37,200 --> 00:15:40,160
Is it a local variable or instance
variable?

253
00:15:41,160 --> 00:15:45,840
Yes, because it's inside the mean method.

254
00:15:45,840 --> 00:15:49,200
Local instance instance instance. The Yes.

255
00:15:49,480 --> 00:15:53,840
It does not matter
where I am accessing that variable.

256
00:15:53,840 --> 00:15:57,920
What matters is that where I am
defining this variable,

257
00:15:57,960 --> 00:16:01,440
because I have defined this variable
inside

258
00:16:01,440 --> 00:16:04,400
a class and outside of the matter.

259
00:16:04,800 --> 00:16:07,120
So it's an instance variable.

260
00:16:07,680 --> 00:16:09,960
It's an instance variable.

261
00:16:09,960 --> 00:16:11,400
All right.

262
00:16:11,400 --> 00:16:16,120
Well,
when should I go for the local variables?

263
00:16:16,120 --> 00:16:19,480
We use it across the methods. Yes.

264
00:16:19,480 --> 00:16:21,600
If you are talking about the instances,

265
00:16:23,160 --> 00:16:26,520
when should I go for local variables?

266
00:16:26,520 --> 00:16:30,160
Can class
objects be called variable assignment?

267
00:16:30,160 --> 00:16:33,040
They are variable.
They are variable. Okay.

268
00:16:33,760 --> 00:16:38,400
So the more specific type is
that they are objects, they are variable.

269
00:16:38,400 --> 00:16:41,360
So this is the type of these variables
and these are the variables.

270
00:16:43,040 --> 00:16:46,840
Yes. When should I be using
the local variables? Yes.

271
00:16:46,840 --> 00:16:48,880
And I should ask

272
00:16:49,080 --> 00:16:51,840
now, I hope I'm
pronouncing your name correct.

273
00:16:52,000 --> 00:16:55,840
What that law
would not be using other objects

274
00:16:58,280 --> 00:17:01,400
when that variable
would not be used in other objects?

275
00:17:01,400 --> 00:17:03,600
No, that is not correct.

276
00:17:03,600 --> 00:17:07,320
So I clearly told
there is a condition when

277
00:17:09,080 --> 00:17:10,600
when I should be going for local

278
00:17:10,600 --> 00:17:17,680
variables.

279
00:17:17,680 --> 00:17:20,280
No. Two is not a object.

280
00:17:20,520 --> 00:17:23,640
Yes, it is or not. It is an object.

281
00:17:23,640 --> 00:17:26,760
But that variable would not be used
in another method.

282
00:17:26,840 --> 00:17:28,640
No, there is.

283
00:17:28,640 --> 00:17:33,560
There was something else
that I told you about the local variables.

284
00:17:33,880 --> 00:17:36,600
When it is specific to each object
or matters.

285
00:17:36,600 --> 00:17:42,680
Now you may also declare local variables
within blocks of code.

286
00:17:42,680 --> 00:17:43,400
Okay.

287
00:17:43,400 --> 00:17:45,720
Which variable should be
your favorite variable?

288
00:17:45,920 --> 00:17:47,240
Let me rephrase this question.

289
00:17:47,240 --> 00:17:50,560
Which variable should be
your favorite variable that you will be?

290
00:17:50,840 --> 00:17:52,280
You will always be declaring

291
00:17:53,720 --> 00:17:54,440
static.

292
00:17:54,440 --> 00:17:54,880
Local.

293
00:17:54,880 --> 00:17:58,480
Local, local variable.

294
00:17:58,480 --> 00:18:01,000
So the condition is is nothing.

295
00:18:01,000 --> 00:18:04,640
But you should always,
always go for a local variable.

296
00:18:06,120 --> 00:18:08,680
Why? We should always go
for local variables.

297
00:18:08,680 --> 00:18:09,440
Otherwise

298
00:18:10,840 --> 00:18:14,280
it is out of use
when you don't use less memory.

299
00:18:15,000 --> 00:18:17,800
They got destroyed
once the code is executed.

300
00:18:17,800 --> 00:18:21,480
Perfect on survived
so they all go by the memory

301
00:18:22,040 --> 00:18:25,160
the least amount of time

302
00:18:25,160 --> 00:18:27,760
as compared to instance
of static variables.

303
00:18:27,760 --> 00:18:28,320
Okay.

304
00:18:28,840 --> 00:18:31,800
So as soon as the execution is done,
for that matter,

305
00:18:32,240 --> 00:18:35,520
the way the memory is released
and it can be used

306
00:18:35,520 --> 00:18:39,720
by other variables or other programs
on your computer, okay, So that way,

307
00:18:39,720 --> 00:18:42,480
your programs,
they will not be taking too much memory.

308
00:18:43,920 --> 00:18:44,400
All right.

309
00:18:44,400 --> 00:18:47,920
And then the last type of variable
was static

310
00:18:47,920 --> 00:18:51,120
variable.

311
00:18:51,120 --> 00:18:53,800
Can you guys
tell me about this tactic variables

312
00:19:03,560 --> 00:19:04,560
all for

313
00:19:04,560 --> 00:19:07,320
one copy created in class is shared

314
00:19:09,320 --> 00:19:10,320
for one.

315
00:19:11,160 --> 00:19:13,080
Why You guys are thinking and still

316
00:19:13,080 --> 00:19:15,960
thinking about that
its value cannot be changed.

317
00:19:16,840 --> 00:19:17,120
And then.

318
00:19:17,120 --> 00:19:18,200
Did you join the class?

319
00:19:18,200 --> 00:19:20,240
Let's someone.

320
00:19:20,240 --> 00:19:22,680
It cannot be local. Yes, that is true.

321
00:19:23,400 --> 00:19:26,320
Static variables of same variables
for every object.

322
00:19:26,320 --> 00:19:34,080
That is true outside of my third
take is also true.

323
00:19:34,080 --> 00:19:36,680
The special area
inside the computer memory

324
00:19:36,680 --> 00:19:41,560
that holds values that are shared across
all variables, not all variables.

325
00:19:41,560 --> 00:19:44,000
All objects

326
00:19:44,000 --> 00:19:47,280
declared within class
does not need an object

327
00:19:47,280 --> 00:19:52,360
to access the variable it has static
world can share across all matters

328
00:19:52,360 --> 00:19:57,720
in a class common for all independent
can be accessed inside.

329
00:19:57,960 --> 00:19:59,640
So it's very simple.

330
00:19:59,640 --> 00:20:05,400
All the instance variables with a static
keyword are called static variables

331
00:20:07,320 --> 00:20:09,720
that has been allocated statistically.

332
00:20:09,720 --> 00:20:12,840
And by the way, all of your answers,
they are correct because they are

333
00:20:13,080 --> 00:20:17,360
they are some some types
of characteristics of that static variable

334
00:20:17,360 --> 00:20:20,760
that you guys are discussing.

335
00:20:20,760 --> 00:20:24,000
So a static variable is just an instance

336
00:20:24,000 --> 00:20:28,640
variable declared with a static DBA
and the properties of that

337
00:20:28,680 --> 00:20:33,640
static variables are those that you guys
have just discussed right there.

338
00:20:34,000 --> 00:20:37,280
The value is shared across all objects.

339
00:20:38,080 --> 00:20:42,880
Only one memory location is declared
for the instance variables

340
00:20:43,200 --> 00:20:48,120
for each object, but we create a separate
copy is created inside the memory.

341
00:20:48,120 --> 00:20:51,840
Okay, but for a static variable,
only one copy is created

342
00:20:51,840 --> 00:20:54,480
and that copy is shared
across all the objects

343
00:20:55,800 --> 00:20:57,680
and they can be accessed by

344
00:20:57,680 --> 00:21:03,000
the by just writing the name of the class
and then not in the name

345
00:21:03,000 --> 00:21:07,160
of that variable static
we can use when we know value is same.

346
00:21:07,160 --> 00:21:09,840
Most of the time
you can change if required

347
00:21:11,040 --> 00:21:14,640
and declared an instance variable
outside the method.

348
00:21:14,720 --> 00:21:16,680
Yes, that that is how to build

349
00:21:16,680 --> 00:21:20,000
a single copy to be shared across
all instances of the object.

350
00:21:20,000 --> 00:21:22,720
So let me tell you this instance
variable is

351
00:21:22,720 --> 00:21:26,120
that is when we share the values
across methods.

352
00:21:26,880 --> 00:21:30,560
Static variable is when you share
the value across objects.

353
00:21:31,040 --> 00:21:32,640
Is it better

354
00:21:32,960 --> 00:21:35,880
instant variable When you share the value

355
00:21:35,880 --> 00:21:39,160
across methods static variable.

356
00:21:39,160 --> 00:21:42,000
When you share the value across objects

357
00:21:44,000 --> 00:21:47,040
and you recommend us to use
local variables Most of the time, yes.

358
00:21:47,040 --> 00:21:48,000
Always. Always.

359
00:21:48,000 --> 00:21:53,040
Go for local variables.

360
00:21:53,040 --> 00:21:53,880
Can you make notes?

361
00:21:53,880 --> 00:21:55,720
So we will be going through the slides.

362
00:21:55,720 --> 00:21:57,680
Everything is written on this slide.

363
00:21:57,680 --> 00:22:01,080
If something is missing,
I will make the notes for back.

364
00:22:01,080 --> 00:22:03,160
Can you say one more time? Yes.

365
00:22:03,160 --> 00:22:05,960
So instance variables.

366
00:22:05,960 --> 00:22:08,360
We should be using the instance variables

367
00:22:08,400 --> 00:22:11,960
when we have to share
the value across methods,

368
00:22:13,080 --> 00:22:15,120
static variables.

369
00:22:15,120 --> 00:22:18,680
When we have to share the value across
objects.

370
00:22:19,800 --> 00:22:22,400
Okay.

371
00:22:22,400 --> 00:22:31,640
Is it
is it clear now, Maria, how many of you

372
00:22:31,680 --> 00:22:47,440
find it difficult to understand my accent?

373
00:22:47,440 --> 00:22:52,320
Okay,
so I want that's why I don't write notes.

374
00:22:52,320 --> 00:22:55,080
Because notes there,
they take a lot of time.

375
00:22:55,640 --> 00:22:59,080
And instead I want to show you

376
00:23:00,600 --> 00:23:04,560
as many examples
as as I can instead of writing the notes.

377
00:23:04,560 --> 00:23:10,200
Because note I am exactly retyping
whatever is written on the slides.

378
00:23:10,640 --> 00:23:14,640
Okay, So that's why I don't type
a lot of not a lot of notes.

379
00:23:16,240 --> 00:23:19,680
Okay, So static variable is for example,

380
00:23:20,480 --> 00:23:24,000
in this example, people

381
00:23:24,000 --> 00:23:28,200
with accent understand each other.

382
00:23:28,200 --> 00:23:30,480
So in here, so we are

383
00:23:31,640 --> 00:23:33,480
where we met one condition.

384
00:23:33,480 --> 00:23:35,720
The condition was that we

385
00:23:36,840 --> 00:23:41,080
we know that the value of this variable

386
00:23:41,960 --> 00:23:45,520
will be same, will be same

387
00:23:46,560 --> 00:23:48,520
for all the objects.

388
00:23:48,520 --> 00:23:50,120
Okay, so this is one condition

389
00:23:50,120 --> 00:23:53,480
when I should be going
for the static variable again.

390
00:23:54,000 --> 00:23:57,960
And if I declare this number of legs

391
00:23:58,600 --> 00:24:01,440
as the instance variable by doing this,

392
00:24:02,280 --> 00:24:05,160
how many copies of this variable
will be created

393
00:24:06,120 --> 00:24:09,680
for this example?

394
00:24:09,680 --> 00:24:13,440
So in here I am creating two

395
00:24:13,600 --> 00:24:15,360
two objects

396
00:24:16,080 --> 00:24:19,800
and now I have removed
that static keyword from here.

397
00:24:20,160 --> 00:24:25,600
So how many copies of this number of flags
variables will be created?

398
00:24:26,520 --> 00:24:28,760
They will be two. Right?

399
00:24:28,760 --> 00:24:34,000
So am I wasting some memory?

400
00:24:34,000 --> 00:24:35,880
Yes, because I can.

401
00:24:35,880 --> 00:24:40,640
But if I don't have to,
if I don't have this requirement that

402
00:24:41,680 --> 00:24:44,800
each object
will be having a different value

403
00:24:44,800 --> 00:24:49,640
for this variable,
I am wasting a lot of memory right?

404
00:24:49,640 --> 00:24:50,640
Because in real life

405
00:24:50,640 --> 00:24:54,160
you guys will be creating thousands
of objects of a class in different things

406
00:24:56,160 --> 00:24:57,080
scenarios.

407
00:24:57,080 --> 00:25:00,720
So I should
be going for the static variable.

408
00:25:00,960 --> 00:25:04,880
Now let's go through this lives
and then we will solve the homework

409
00:25:05,400 --> 00:25:08,040
and if something is still not clear,

410
00:25:08,640 --> 00:25:11,040
then we will do additional examples

411
00:25:12,160 --> 00:25:12,720
as well.

412
00:25:12,720 --> 00:25:16,520
Repeated again,
because this is where you guys

413
00:25:16,520 --> 00:25:20,640
will be spending most of your time,
then you will be preparing you

414
00:25:21,120 --> 00:25:24,480
when when you guys will be preparing
for the interviews.

415
00:25:24,480 --> 00:25:27,640
Testers will do that to do what I

416
00:25:34,120 --> 00:25:35,160
a variable

417
00:25:35,160 --> 00:25:38,400
that is declared inside the method is

418
00:25:38,400 --> 00:25:41,480
called a local variable,

419
00:25:41,480 --> 00:25:43,480
creating objects and variables. Yes.

420
00:25:43,480 --> 00:25:47,840
I mean if if something like if the ABC off

421
00:25:48,440 --> 00:25:50,840
of writing a program

422
00:25:50,960 --> 00:25:54,320
right in Java
because Java is object oriented programing

423
00:25:54,760 --> 00:25:58,520
99% of the time creating an object, then

424
00:25:59,600 --> 00:26:01,800
calling a method on that object,
that's what you guys

425
00:26:01,800 --> 00:26:07,160
will be doing.

426
00:26:07,160 --> 00:26:12,200
A variable that is declared inside this
method is called local variable, right?

427
00:26:12,240 --> 00:26:13,920
Very simple.

428
00:26:13,920 --> 00:26:17,040
A variable
that is declared inside the class,

429
00:26:17,760 --> 00:26:21,560
but outside of the method is,
for instance, variables.

430
00:26:21,600 --> 00:26:23,880
Okay,
just clarifying to wrap my head around.

431
00:26:24,480 --> 00:26:27,920
No way back.

432
00:26:27,920 --> 00:26:32,200
So the more you guys run from Java,
the more heavier it will see.

433
00:26:32,680 --> 00:26:33,720
You guys will see it.

434
00:26:33,720 --> 00:26:34,480
Okay.

435
00:26:34,480 --> 00:26:37,560
So, so to try to understand,
it's not that difficult.

436
00:26:38,640 --> 00:26:39,160
Okay.

437
00:26:39,280 --> 00:26:40,080
And if you find

438
00:26:40,080 --> 00:26:44,840
something difficult, I'm here and you guys
can always discuss with me a variable

439
00:26:44,840 --> 00:26:49,080
that is declared inside the class,
but outside the method is called

440
00:26:50,160 --> 00:26:52,560
Please explain more across method

441
00:26:53,200 --> 00:26:57,760
verses, across objects in terms
of what is happening in the background.

442
00:26:57,760 --> 00:26:59,920
Okay, so

443
00:27:04,120 --> 00:27:04,920
this is what I mean

444
00:27:04,920 --> 00:27:07,160
across the objects you see in here

445
00:27:08,960 --> 00:27:13,320
I am accessing this number of flags
in here.

446
00:27:13,880 --> 00:27:17,560
Okay, So

447
00:27:19,680 --> 00:27:21,400
I have this two.

448
00:27:21,400 --> 00:27:24,040
So there are five types of memory areas

449
00:27:27,080 --> 00:27:30,880
that JVM uses to execute your programs

450
00:27:30,880 --> 00:27:34,560
and all the
all the programs that you guys write.

451
00:27:34,720 --> 00:27:37,080
Most of the time they will be

452
00:27:38,640 --> 00:27:42,160
under the
the these type they will be involving

453
00:27:42,160 --> 00:27:45,520
these type of materials, but
you guys don't need to worry about them

454
00:27:46,080 --> 00:27:49,160
because those so there are special teams

455
00:27:49,520 --> 00:27:54,240
who fine tune your programs
when they are executing on servers.

456
00:27:55,000 --> 00:28:00,200
They find beyond these memory areas
how the variables are being declared,

457
00:28:00,200 --> 00:28:03,240
how much memory
one program is taking and all that

458
00:28:04,440 --> 00:28:06,560
they are required to performance scheme.

459
00:28:06,560 --> 00:28:11,280
So even even the developers, they don't
know much about this memory area.

460
00:28:11,280 --> 00:28:13,680
So they did it on very high level.

461
00:28:13,680 --> 00:28:16,200
There is this static area

462
00:28:18,080 --> 00:28:21,040
and this variable

463
00:28:22,080 --> 00:28:23,320
in here.

464
00:28:23,880 --> 00:28:28,000
It will actually be stored
inside this static area.

465
00:28:28,320 --> 00:28:29,000
Okay.

466
00:28:29,280 --> 00:28:33,120
But these two variables,
there is another memory area

467
00:28:33,120 --> 00:28:36,520
that is called a heap.

468
00:28:36,520 --> 00:28:39,800
All the objects that we create in Java,

469
00:28:40,800 --> 00:28:44,920
they are created inside this heap
memory area.

470
00:28:45,160 --> 00:28:48,960
Okay,
So first I will be having a bigger box.

471
00:28:49,880 --> 00:28:59,960
Let me make it bigger.

472
00:28:59,960 --> 00:29:06,400
So first there will be a bigger box
with the name of the to.

473
00:29:06,400 --> 00:29:11,400
And inside this doll too,
there will be two additional boxes.

474
00:29:11,760 --> 00:29:14,440
One will contain the value of name.

475
00:29:14,960 --> 00:29:17,880
The other one
will contain the value of color.

476
00:29:18,400 --> 00:29:21,840
Then when we will be declaring
and I've got a variable.

477
00:29:21,840 --> 00:29:24,960
So let's say this is for sorry,
this is for dog,

478
00:29:25,200 --> 00:29:29,720
then we will be creating another variable,
another box will be created

479
00:29:30,120 --> 00:29:33,280
and then inside of that box,
two memory locations will

480
00:29:33,280 --> 00:29:36,440
be created and then again

481
00:29:37,720 --> 00:29:38,840
in this name

482
00:29:38,840 --> 00:29:42,720
from here, the value of this spot
will be stored in here.

483
00:29:42,720 --> 00:29:45,320
The value of color will be so linear.

484
00:29:45,360 --> 00:29:48,920
And as we keep on creating new objects,
new and bigger boxes

485
00:29:48,920 --> 00:29:52,640
will keep on creating inside the heap
and then

486
00:29:54,120 --> 00:29:57,400
a separate copy for each
variable will keep on the player

487
00:29:58,000 --> 00:30:00,520
will keep on the job.

488
00:30:00,520 --> 00:30:02,800
I will keep on
creating the memory for you,

489
00:30:02,800 --> 00:30:08,000
and then you can have your own values
inside baseball to all.

490
00:30:08,000 --> 00:30:09,320
You can store the same values.

491
00:30:09,320 --> 00:30:11,760
I'll get about this static

492
00:30:11,760 --> 00:30:12,760
in here.

493
00:30:12,760 --> 00:30:15,240
It's common for all the objects.

494
00:30:15,240 --> 00:30:19,080
Even if you declare 1 million objects,
it will be same for all the objects.

495
00:30:19,920 --> 00:30:21,680
Every object can access it.

496
00:30:21,680 --> 00:30:23,080
Every object can change.

497
00:30:23,080 --> 00:30:27,120
It is something that is common
for all the objects.

498
00:30:27,120 --> 00:30:31,080
So if you have something common
in all the objects, you should be storing

499
00:30:31,960 --> 00:30:34,440
that inside this static area

500
00:30:34,440 --> 00:30:39,760
to save a memory.

501
00:30:39,760 --> 00:30:43,480
I about book and carry that with me
everywhere.

502
00:30:43,480 --> 00:30:46,120
A still I am forgetting things. Yes.

503
00:30:46,120 --> 00:30:50,360
Sorry if you will be forgetting things
because it requires a lot of practice.

504
00:30:51,000 --> 00:30:52,160
Just open your heart.

505
00:30:52,160 --> 00:30:55,560
A lot of java within that class. Only

506
00:30:57,240 --> 00:30:57,640
you'll get a.

507
00:30:57,640 --> 00:30:59,560
You mean this tactic is within the class?

508
00:30:59,560 --> 00:31:01,920
No, these are declared
outside of the class.

509
00:31:02,040 --> 00:31:02,520
So we are.

510
00:31:02,520 --> 00:31:05,880
We are where ever the values
for the instance variables

511
00:31:05,880 --> 00:31:09,240
will be created in this static variables.

512
00:31:09,240 --> 00:31:12,000
They are
they will be in a different memory area

513
00:31:12,280 --> 00:31:13,600
then those

514
00:31:24,480 --> 00:31:26,640
and for the methods.

515
00:31:26,640 --> 00:31:31,360
So I actually don't want to go into
the details, but this is how it works.

516
00:31:31,360 --> 00:31:34,920
There is an other memory area
that is called method area,

517
00:31:35,760 --> 00:31:38,800
whenever we call a method.

518
00:31:38,800 --> 00:31:42,200
So let's say for example,
I am calling this method creep in here.

519
00:31:43,320 --> 00:31:46,120
So this method

520
00:31:46,200 --> 00:31:50,360
I will quickly check how much memory
is required for this sleep method.

521
00:31:50,360 --> 00:31:52,760
So this is called stack

522
00:31:52,880 --> 00:31:56,920
method stack area, the value of the data.

523
00:31:57,600 --> 00:32:02,160
So for example, in here the sleep method
is having this one local variable, right?

524
00:32:02,560 --> 00:32:06,280
So a quickly
a memory, a portion from this stack

525
00:32:06,280 --> 00:32:10,320
area will be declared to hold the values
for these variables.

526
00:32:10,920 --> 00:32:12,560
And as soon as you are done

527
00:32:12,560 --> 00:32:16,680
executing this part,
the memory will be cleared for this method

528
00:32:19,040 --> 00:32:22,440
we will be needing more examples
regarding this variable.

529
00:32:22,440 --> 00:32:25,480
So Shreve. Throughout this course,

530
00:32:25,480 --> 00:32:29,360
we now will be creating
almost all of these variables

531
00:32:29,360 --> 00:32:35,320
and the moment you guys so is not actually
so I think there are 6 to 8 classes

532
00:32:35,320 --> 00:32:39,960
on Selenium right after the Selenium,
you guys will be creating your projects.

533
00:32:40,040 --> 00:32:40,760
Okay.

534
00:32:40,760 --> 00:32:43,640
And in your project
you guys will be using all types

535
00:32:43,640 --> 00:32:47,080
of matters, all types of variables,
all types of classes.

536
00:32:47,280 --> 00:32:48,840
So you guys will be able to

537
00:32:48,840 --> 00:32:51,600
then combine all the knowledge
that you are learning in here.

538
00:32:51,600 --> 00:32:53,520
So don't don't worry about that.

539
00:32:53,520 --> 00:32:56,640
Again, we only use static variables
within the same package

540
00:32:56,640 --> 00:32:58,520
or we can pilot in any package.

541
00:32:58,520 --> 00:33:01,520
So static is not related to calling it

542
00:33:01,560 --> 00:33:05,720
inside the method or inside the package
or outside of the package.

543
00:33:05,720 --> 00:33:07,920
Okay. The thing which is

544
00:33:09,320 --> 00:33:12,320
responsible for controlling this access

545
00:33:12,320 --> 00:33:16,600
that we I can call
something is called access modifiers.

546
00:33:16,600 --> 00:33:19,480
We will be discussing
those access modifiers in today's class.

547
00:33:19,480 --> 00:33:20,080
Okay.

548
00:33:20,160 --> 00:33:23,160
So no static has nothing to do with that

549
00:33:23,160 --> 00:33:32,040
access modification.

550
00:33:32,040 --> 00:33:32,760
Okay.

551
00:33:37,160 --> 00:33:40,080
So this is again, again,
another example of

552
00:33:41,520 --> 00:33:42,520
local variables.

553
00:33:42,520 --> 00:33:43,840
So this is the main method.

554
00:33:43,840 --> 00:33:46,200
I am declaring two variables.
Some very simple.

555
00:33:46,760 --> 00:33:49,920
They are local variables.

556
00:33:49,920 --> 00:33:52,080
So guys, they are

557
00:33:52,080 --> 00:33:54,680
don't think that you guys will be,

558
00:33:55,680 --> 00:34:00,400
for example, having specific
use cases for these variable types.

559
00:34:00,960 --> 00:34:04,040
It is just to tell you back

560
00:34:04,040 --> 00:34:07,080
how you guys can write better programs.

561
00:34:07,200 --> 00:34:07,520
Okay.

562
00:34:07,520 --> 00:34:11,280
So this is something that you guys will be
using in every single program.

563
00:34:11,360 --> 00:34:15,080
There are no specific examples
for these variables.

564
00:34:15,480 --> 00:34:20,760
You should be applying these concepts
in each program that you will be writing.

565
00:34:20,760 --> 00:34:24,480
Okay, So each program is an example
for these variables.

566
00:34:24,480 --> 00:34:25,040
Okay?

567
00:34:25,040 --> 00:34:29,320
This is to to, to make it clear
how to write better programs.

568
00:34:29,320 --> 00:34:32,720
Again, there are no specific scenarios

569
00:34:33,880 --> 00:34:36,400
or specific examples for these programs.

570
00:34:36,400 --> 00:34:40,360
If something very general OC applicable
to all the programs

571
00:34:40,360 --> 00:34:47,440
that you write.

572
00:34:47,440 --> 00:34:51,040
So it is possible to access
local variables

573
00:34:51,560 --> 00:34:54,800
only in side the method

574
00:34:54,960 --> 00:34:58,440
or constructor or block of code
if you try.

575
00:34:58,560 --> 00:35:03,920
So for example,
this method is outside of this method, and

576
00:35:05,080 --> 00:35:08,880
in here we are
declaring this integer variable.

577
00:35:08,880 --> 00:35:11,040
E Right.

578
00:35:11,040 --> 00:35:13,320
But the school of this method

579
00:35:13,320 --> 00:35:16,800
is start from this bracket
to this bracket.

580
00:35:17,040 --> 00:35:20,880
If we try to call this
in a different method,

581
00:35:20,880 --> 00:35:24,960
for example Mul method,
we will not be able to do that.

582
00:35:25,080 --> 00:35:25,480
Okay.

583
00:35:25,480 --> 00:35:27,440
We will be getting an edit

584
00:35:27,440 --> 00:35:33,000
because this is the limitation
of local variables, but it is not possible

585
00:35:33,000 --> 00:35:37,880
to call those methods outside of that
block where they are declared

586
00:35:43,800 --> 00:35:46,160
in this example.

587
00:35:46,600 --> 00:35:54,200
This is important.

588
00:35:54,200 --> 00:35:54,600
Okay.

589
00:35:54,600 --> 00:35:59,040
These are some additional points
about the local variable.

590
00:35:59,040 --> 00:36:02,880
So local variables are declared
in method constructor.

591
00:36:02,880 --> 00:36:06,160
The block of or local
variables are created

592
00:36:06,160 --> 00:36:09,720
when method constructor of block of bodies
entered.

593
00:36:09,800 --> 00:36:10,880
Okay, so when.

594
00:36:10,880 --> 00:36:13,480
So JVM is a program.

595
00:36:13,480 --> 00:36:17,040
So when you guys installed
Java before starting Java classes

596
00:36:17,440 --> 00:36:22,040
that Java also include a special program
that we called JVM.

597
00:36:22,040 --> 00:36:26,280
It's too short for Java Virtual Machine
back to Java.

598
00:36:26,520 --> 00:36:31,600
Virtual Machine is the program
that makes your Java code

599
00:36:32,880 --> 00:36:35,920
and it converts that water to something

600
00:36:36,400 --> 00:36:40,480
your windows can understand
or your Mac operating system

601
00:36:40,480 --> 00:36:43,720
can understand or your Linux
operating system can understand.

602
00:36:43,800 --> 00:36:48,600
Okay,
So all those programs, they are converted

603
00:36:49,120 --> 00:36:52,120
by the fact that

604
00:36:52,120 --> 00:36:56,600
are that JVM and compiler
and they are also executed here.

605
00:36:56,600 --> 00:37:01,800
So the JVM is the
is the program that executes your program.

606
00:37:01,800 --> 00:37:04,280
Okay. Who controls that you use currently?

607
00:37:04,280 --> 00:37:08,960
It's kind of the manager of Java
on your computers.

608
00:37:08,960 --> 00:37:12,400
So wherever you will be having
Java programs

609
00:37:12,400 --> 00:37:15,480
being executed
or you guys will be needing that gave you.

610
00:37:15,480 --> 00:37:20,840
And so that JVM is actually the program
which executes your matters.

611
00:37:21,880 --> 00:37:22,200
Okay.

612
00:37:22,200 --> 00:37:24,720
And then whatever those methods do, it

613
00:37:25,840 --> 00:37:30,400
returns the returns
or brings the output of those methods.

614
00:37:30,400 --> 00:37:34,240
So when the JVM starts

615
00:37:36,520 --> 00:37:37,800
the execution,

616
00:37:37,800 --> 00:37:41,880
only then the values
and the variables are declared.

617
00:37:42,480 --> 00:37:47,480
And as soon as the last line inside
that method is executed,

618
00:37:48,080 --> 00:37:52,200
all the variables
that were declared for dark matter,

619
00:37:52,200 --> 00:37:56,440
they are destroyed
and the memory is free again,

620
00:37:56,440 --> 00:38:00,640
access modifiers cannot be used
for local variables.

621
00:38:00,640 --> 00:38:04,840
Okay, so those access modifiers
that we will be learning today

622
00:38:05,760 --> 00:38:07,960
and the non access modifier, by the way,

623
00:38:07,960 --> 00:38:10,680
the static is the non access modifier,

624
00:38:11,920 --> 00:38:14,240
so they are not applicable
to local variables.

625
00:38:14,240 --> 00:38:17,000
We can all static with local variables.

626
00:38:17,000 --> 00:38:18,560
We cannot write

627
00:38:19,080 --> 00:38:21,560
private public
or other things with local variables.

628
00:38:21,560 --> 00:38:21,760
Okay.

629
00:38:21,760 --> 00:38:23,840
Only the type of variable.

630
00:38:23,840 --> 00:38:26,320
Then the variable name.

631
00:38:26,320 --> 00:38:31,280
A variable declared inside of the body
of method is called local variable.

632
00:38:31,280 --> 00:38:31,720
Again,

633
00:38:33,000 --> 00:38:34,360
you can use this variable

634
00:38:34,360 --> 00:38:38,560
only within that method
and other matters in the class

635
00:38:39,320 --> 00:38:41,760
are not even aware

636
00:38:41,760 --> 00:38:45,640
that the variable exists.

637
00:38:45,640 --> 00:38:50,120
A local variable cannot be defined
with static keyword.

638
00:38:50,400 --> 00:38:51,160
Okay.

639
00:38:52,200 --> 00:38:55,240
And does it make sense
why it's static is not allowed

640
00:38:55,240 --> 00:39:00,520
with local variables?

641
00:39:00,520 --> 00:39:02,360
Static local variables.

642
00:39:02,360 --> 00:39:05,000
They are not accessible outside of method,
right

643
00:39:06,120 --> 00:39:07,160
outside of method.

644
00:39:07,160 --> 00:39:10,360
If they are not accessible
outside of method, there is no point

645
00:39:10,880 --> 00:39:15,240
of declaring those variables
in the static area.

646
00:39:15,240 --> 00:39:18,480
Right. There is no need for that

647
00:39:18,560 --> 00:39:21,120
because they are not accessible.

648
00:39:21,120 --> 00:39:23,680
So Alexia, this is the example.

649
00:39:23,680 --> 00:39:25,560
This is the example

650
00:39:26,560 --> 00:39:29,320
we this my method

651
00:39:29,320 --> 00:39:30,480
and one question.

652
00:39:30,480 --> 00:39:34,800
So it's possible to create
both in the same dialog window.

653
00:39:35,000 --> 00:39:38,480
Not sure if I am asking this right.

654
00:39:38,480 --> 00:39:40,440
Silva What do you mean by Java window

655
00:39:42,040 --> 00:39:43,080
Static method can

656
00:39:43,080 --> 00:39:46,480
only can call only other static

657
00:39:46,480 --> 00:39:49,360
methods and cannot call in on static
method from it.

658
00:39:49,560 --> 00:39:53,640
So I said we will discuss
about that as well in today's class.

659
00:39:54,240 --> 00:39:57,240
Remind me after we are done doing

660
00:39:57,240 --> 00:40:01,160
the examples said remind me,
I will show you the static methods

661
00:40:01,160 --> 00:40:07,280
as well,

662
00:40:07,280 --> 00:40:13,720
like create a class first
and then public UPC, public UTC.

663
00:40:13,720 --> 00:40:15,840
Well, what do you mean by public?

664
00:40:15,840 --> 00:40:17,000
Is Silva

665
00:40:17,680 --> 00:40:22,080
in the same window?

666
00:40:22,080 --> 00:40:26,640
We cannot have two public classes
in the same file.

667
00:40:27,360 --> 00:40:33,720
If you if you are calling the editor
window in which we write the board

668
00:40:34,760 --> 00:40:39,400
and we are we declare the classes.

669
00:40:39,400 --> 00:40:43,600
I sorry if someone else has understood
the question

670
00:40:43,880 --> 00:40:56,840
can you guys can rephrase it.

671
00:40:56,840 --> 00:40:58,960
Public static word man she asks.

672
00:40:58,960 --> 00:41:02,040
I think, Oh, what does she want to ask?

673
00:41:02,240 --> 00:41:09,200
It's hard.

674
00:41:09,200 --> 00:41:12,640
So she is asking
if we can use the public keyword

675
00:41:12,640 --> 00:41:19,240
with the other methods
like we are using the demand method.

676
00:41:19,240 --> 00:41:25,200
No, it's okay.

677
00:41:25,200 --> 00:41:27,120
No, no, it's not okay. Silva

678
00:41:28,600 --> 00:41:28,920
Okay.

679
00:41:28,920 --> 00:41:34,560
Maybe because we will be using this public
and all those things in this class.

680
00:41:34,560 --> 00:41:36,640
If your questions, they don't get cleared

681
00:41:37,040 --> 00:41:39,840
at the end of this class,
then you can ask the question again.

682
00:41:40,600 --> 00:41:44,640
When you are trying to look at the code
you wrote a month ago or some kind of

683
00:41:44,800 --> 00:41:47,000
in which I can tell you did

684
00:41:48,400 --> 00:41:51,080
interpolate, we use same window.

685
00:41:51,520 --> 00:41:51,800
Okay.

686
00:41:51,800 --> 00:41:54,960
So first you have to tell me,
what do you mean by same window?

687
00:41:54,960 --> 00:41:59,360
Maybe if you can put, for example, dog and
dog catcher and the same window for us.

688
00:41:59,360 --> 00:42:00,360
Do you guys have problems?

689
00:42:00,360 --> 00:42:05,720
What do you mean by same window?

690
00:42:05,720 --> 00:42:08,320
Okay, so the example for you.

691
00:42:08,680 --> 00:42:10,800
Okay, plus and objects in

692
00:42:11,880 --> 00:42:13,240
in one

693
00:42:13,840 --> 00:42:15,600
like in one class, we can

694
00:42:15,600 --> 00:42:18,480
we can use two or three time public static

695
00:42:20,840 --> 00:42:22,640
public static with word, with

696
00:42:22,640 --> 00:42:25,680
method or with a variable

697
00:42:29,640 --> 00:42:31,440
we can use with both public

698
00:42:31,440 --> 00:42:34,600
and with with methods
and with with variables.

699
00:42:34,600 --> 00:42:38,040
We can use these public and static,
and we can use it multiple times.

700
00:42:38,040 --> 00:42:39,400
But that's what I'm saying.

701
00:42:39,400 --> 00:42:42,120
We will learn it about today.

702
00:42:42,480 --> 00:42:46,480
So let's discuss these things
after the after today's lecture.

703
00:42:46,480 --> 00:42:51,840
Class and objects together means yes,
they can be.

704
00:42:51,840 --> 00:42:52,960
Yes, they can be.

705
00:42:52,960 --> 00:42:55,120
But that that is something very old.

706
00:42:55,120 --> 00:43:04,320
We have done that thing multiple times.

707
00:43:04,320 --> 00:43:05,440
This is what we mean.

708
00:43:05,440 --> 00:43:09,240
And I said he is not he He is actually she

709
00:43:09,960 --> 00:43:12,000
if I am not wrong

710
00:43:12,360 --> 00:43:16,320
with static,

711
00:43:16,320 --> 00:43:18,880
recreate the class window
and a test window.

712
00:43:19,880 --> 00:43:20,960
Can we do both?

713
00:43:20,960 --> 00:43:25,680
And we create a class window
and a tester window.

714
00:43:25,680 --> 00:43:27,960
Can we do both in the same
without creating window?

715
00:43:27,960 --> 00:43:29,520
Yes, we can.

716
00:43:29,520 --> 00:43:31,160
We have done it multiple times.

717
00:43:31,160 --> 00:43:41,360
Yes, we can.

718
00:43:41,360 --> 00:43:42,600
Yes, we have done that.

719
00:43:42,600 --> 00:43:45,520
But you said
we should not prefer to use them.

720
00:43:45,520 --> 00:43:47,840
Yes, that is correct.

721
00:43:47,840 --> 00:43:50,240
In my school we did

722
00:43:50,240 --> 00:43:53,240
so what that Windows
politics called folder file on it

723
00:43:53,280 --> 00:43:57,360
called a class
Java double file on the Java class.

724
00:43:57,520 --> 00:44:00,800
We really need good explanation
regarding variables, please.

725
00:44:00,800 --> 00:44:04,440
Okay.

726
00:44:04,440 --> 00:44:07,800
So Serif asked me what is not clear

727
00:44:07,800 --> 00:44:10,480
about the about the variables.

728
00:44:11,400 --> 00:44:16,320
Okay, so in here
we have this method of my method

729
00:44:17,760 --> 00:44:20,160
and in here I am declaring a variable.

730
00:44:20,160 --> 00:44:20,520
Okay.

731
00:44:20,520 --> 00:44:22,760
For any reason, maybe I have.

732
00:44:22,760 --> 00:44:24,920
I am writing very complex logic.

733
00:44:24,920 --> 00:44:27,800
That logic requires

734
00:44:27,800 --> 00:44:30,160
to store the intermediate results

735
00:44:30,160 --> 00:44:33,440
and then maybe use those results

736
00:44:33,440 --> 00:44:37,000
in other parts of the code
when I am writing multiple loops.

737
00:44:37,000 --> 00:44:40,320
Or maybe I am calculating
the results of eddies

738
00:44:41,120 --> 00:44:43,000
roll by row and then column by column.

739
00:44:43,000 --> 00:44:46,280
So for any reason
I have to store the results in a method

740
00:44:46,760 --> 00:44:50,000
and if I have to store the results
I will be needing a variable.

741
00:44:50,000 --> 00:44:50,880
Right?

742
00:44:51,320 --> 00:44:53,640
So the result can be anything.

743
00:44:53,640 --> 00:44:55,600
Totally depends on your logic.

744
00:44:55,600 --> 00:44:59,280
So and if we are declaring a variable
for any reason,

745
00:44:59,280 --> 00:45:04,040
that variable will be called
a local variable.

746
00:45:04,040 --> 00:45:08,200
The difference between instance
and static variable main difference.

747
00:45:08,400 --> 00:45:12,160
The main difference, Alex,
is that static variable.

748
00:45:13,480 --> 00:45:15,240
We only

749
00:45:15,240 --> 00:45:19,560
have one copy that is shared across
all the objects.

750
00:45:20,160 --> 00:45:22,200
For the instance variable,

751
00:45:22,680 --> 00:45:25,160
every object has its own copy.

752
00:45:25,960 --> 00:45:30,960
This is the main difference.

753
00:45:30,960 --> 00:45:33,280
All right, so this is my matter, doc.

754
00:45:33,360 --> 00:45:36,000
For any reason, I have to

755
00:45:36,000 --> 00:45:37,040
declare a variable.

756
00:45:37,040 --> 00:45:42,240
So this variable that I am declaring,
it will be called a local variable.

757
00:45:42,280 --> 00:45:45,240
Okay, a local variable.

758
00:45:45,240 --> 00:45:48,240
And if I am declaring a variable

759
00:45:49,880 --> 00:45:52,320
outside of a method.

760
00:45:52,320 --> 00:45:55,440
So this variable is outside of this
method.

761
00:45:56,760 --> 00:46:01,120
This method and it is inside this class.

762
00:46:01,520 --> 00:46:06,880
So then this variable will be called
the instance variable.

763
00:46:07,080 --> 00:46:13,960
Okay, instance variable.

764
00:46:13,960 --> 00:46:14,280
Okay.

765
00:46:14,280 --> 00:46:18,480
So the points about the instance
variable methods

766
00:46:20,240 --> 00:46:22,320
and variables defined

767
00:46:23,280 --> 00:46:27,280
within
a class are called matters of that class.

768
00:46:27,280 --> 00:46:31,880
So the methods
they can also be instance and static.

769
00:46:32,040 --> 00:46:35,760
Okay, we will discuss once I show you

770
00:46:37,400 --> 00:46:39,920
the home,
but once I show you the homework,

771
00:46:41,480 --> 00:46:42,600
that's all examples.

772
00:46:42,600 --> 00:46:45,800
Okay,
so let me go through the slides, Alexi,

773
00:46:45,800 --> 00:46:47,160
and then I will show you the example.

774
00:46:47,160 --> 00:46:51,520
So methods and variables defined within

775
00:46:51,520 --> 00:46:55,640
a class are called members of that class.

776
00:46:55,680 --> 00:46:55,920
Okay?

777
00:46:55,920 --> 00:46:58,640
Now a variable which is declared

778
00:46:59,280 --> 00:47:01,480
inside the class,

779
00:47:02,960 --> 00:47:04,640
but outside

780
00:47:04,640 --> 00:47:08,480
the method is called instance variables.

781
00:47:08,480 --> 00:47:09,200
Okay.

782
00:47:09,880 --> 00:47:10,920
And one more thing.

783
00:47:10,920 --> 00:47:13,480
It is not declared as static.

784
00:47:13,720 --> 00:47:14,360
Okay.

785
00:47:15,280 --> 00:47:17,440
Why the name instance

786
00:47:17,440 --> 00:47:21,080
variables are defined within
a class are called

787
00:47:21,080 --> 00:47:24,960
instance variables
because each instance of the class

788
00:47:25,080 --> 00:47:29,040
that is each object of the class
that you will be creating

789
00:47:29,040 --> 00:47:34,120
contains its own copy of these variables.

790
00:47:34,920 --> 00:47:35,440
Okay.

791
00:47:35,520 --> 00:47:36,040
So that's why

792
00:47:36,040 --> 00:47:39,800
we also call them the instance variables
and the static variables.

793
00:47:39,800 --> 00:47:44,320
They are also called class variables
because they only have one value

794
00:47:46,720 --> 00:47:47,920
for all the objects.

795
00:47:47,920 --> 00:47:50,520
Okay, one value per class.

796
00:47:50,520 --> 00:47:53,240
Thus the data for one object is a separate

797
00:47:53,240 --> 00:47:57,000
and a unique from the data
for another object.

798
00:47:57,000 --> 00:47:59,240
So instance can be declared as static.

799
00:47:59,240 --> 00:48:01,800
If we are studying none of those,
then it will be a static.

800
00:48:02,240 --> 00:48:04,680
Then. Then it will be a static variable.

801
00:48:04,680 --> 00:48:09,040
If you write static keyword
with instance variable,

802
00:48:09,440 --> 00:48:12,480
then it will be a static variable.

803
00:48:12,640 --> 00:48:15,560
Okay.

804
00:48:15,560 --> 00:48:25,240
Is it clear LLC?

805
00:48:25,240 --> 00:48:30,800
Is it not clear
that if we write static keyword.

806
00:48:31,040 --> 00:48:32,160
Okay. No, no, it's fine.

807
00:48:32,160 --> 00:48:37,800
It's fine
if we write static keyword with a variable

808
00:48:38,040 --> 00:48:41,040
and let's see what type of variable
it will be.

809
00:48:41,400 --> 00:48:44,720
Will it be static or will it be instance

810
00:48:49,920 --> 00:48:50,520
static?

811
00:48:50,520 --> 00:48:53,040
Then that's what we are
discussing in here.

812
00:48:53,040 --> 00:48:54,520
Is it clear now? So

813
00:48:55,800 --> 00:48:58,200
if we write this static,

814
00:48:58,200 --> 00:49:01,880
if we are, can you repeat
or relative to the second paragraph.

815
00:49:01,880 --> 00:49:02,320
Okay. Yes.

816
00:49:02,320 --> 00:49:06,520
What I will do
so if we write this particular.

817
00:49:06,520 --> 00:49:06,800
Okay.

818
00:49:06,800 --> 00:49:10,680
So the condition is that
if you are declaring an instance variable,

819
00:49:10,680 --> 00:49:16,600
this static evokes
from not me with that variable, okay,

820
00:49:16,800 --> 00:49:21,200
we should not have this static keyword
with the instance variable.

821
00:49:21,360 --> 00:49:27,880
Otherwise they will be converted
to a static variable.

822
00:49:27,880 --> 00:49:30,240
And what type of variable is this?

823
00:49:30,240 --> 00:49:32,680
This sprinkler

824
00:49:47,960 --> 00:49:49,040
instance from the day.

825
00:49:49,040 --> 00:49:49,400
Right.

826
00:49:49,400 --> 00:49:53,560
And what type of the number of lines,
what type of variable is this

827
00:49:55,800 --> 00:50:02,880
static.

828
00:50:02,880 --> 00:50:06,320
Okay, so in my second paragraph,

829
00:50:07,080 --> 00:50:09,080
you mean this one

830
00:50:14,280 --> 00:50:16,680
one up, this one.

831
00:50:16,680 --> 00:50:17,080
Okay.

832
00:50:17,320 --> 00:50:21,480
A variable
which is declared inside the class,

833
00:50:21,840 --> 00:50:25,920
but outside the method is called instance
variable.

834
00:50:26,240 --> 00:50:27,920
It is not.

835
00:50:27,920 --> 00:50:30,840
It is not declared as static.

836
00:50:31,560 --> 00:50:40,800
Again, there is not, is there?

837
00:50:40,800 --> 00:50:42,240
That confused me.

838
00:50:43,320 --> 00:50:43,920
All right.

839
00:50:43,920 --> 00:50:46,600
It's fine. Okay.

840
00:50:46,640 --> 00:50:50,640
Does the data for one object is separated
and a unique

841
00:50:50,640 --> 00:50:53,880
for the data for another object

842
00:50:55,480 --> 00:50:57,360
it is called

843
00:50:57,720 --> 00:50:59,600
instance variable because

844
00:50:59,600 --> 00:51:02,040
it's value instance object

845
00:51:03,480 --> 00:51:06,160
specific and it is not shared

846
00:51:07,040 --> 00:51:09,440
among the instances.

847
00:51:09,480 --> 00:51:14,560
Okay, Each instance has its own value.

848
00:51:14,560 --> 00:51:18,720
Okay, we don't share instance
variables don't share their values

849
00:51:18,720 --> 00:51:30,480
across the objects.

850
00:51:30,480 --> 00:51:35,120
Again, instance variables are used
in a class but outside and not turned out

851
00:51:35,120 --> 00:51:38,200
and subtotal Any block is flawed

852
00:51:38,200 --> 00:51:40,760
for each instant variable

853
00:51:42,200 --> 00:51:44,840
value is created.

854
00:51:44,840 --> 00:51:47,760
I guess after access modifier
civil understand better.

855
00:51:49,120 --> 00:51:51,800
We have three types of variables.

856
00:51:51,800 --> 00:51:56,640
Instance
local static outside of my third local

857
00:51:57,040 --> 00:52:00,880
inside of my third and any variable
with given static is called static.

858
00:52:00,880 --> 00:52:03,880
Yes. That hard.
That is perfectly correct. This

859
00:52:04,960 --> 00:52:07,840
instance variable

860
00:52:07,840 --> 00:52:12,120
can be declared in class level
before or after you,

861
00:52:12,200 --> 00:52:16,400
so you can declare that before the method
or after being that person.

862
00:52:17,520 --> 00:52:20,920
Like, for example, I can declare these

863
00:52:21,840 --> 00:52:24,000
before the matters

864
00:52:24,280 --> 00:52:26,160
or off for the matter. Okay.

865
00:52:26,160 --> 00:52:28,320
But I will still be able to access them.

866
00:52:28,320 --> 00:52:29,000
Right.

867
00:52:29,040 --> 00:52:31,640
But can I do the same with local variables
guys?

868
00:52:31,960 --> 00:52:36,360
Can I use them first
and declare them after?

869
00:52:36,360 --> 00:52:37,200
No. Right.

870
00:52:37,200 --> 00:52:39,840
So this is one more property
of these variables.

871
00:52:39,880 --> 00:52:43,480
Even you can use them first
and you can declare them after.

872
00:52:43,680 --> 00:52:44,000
Okay.

873
00:52:44,000 --> 00:52:46,560
But we cannot do the same
with the local variables.

874
00:52:47,120 --> 00:52:50,280
So that's what that last line means.

875
00:52:50,600 --> 00:52:56,040
Instant variables can be declared
in the class level before or after use.

876
00:52:56,360 --> 00:53:01,800
You can use them first
and you can declare them off.

877
00:53:01,800 --> 00:53:04,920
Are all these all these three sentences

878
00:53:04,920 --> 00:53:16,440
are the clear.

879
00:53:16,440 --> 00:53:19,520
Okay, so

880
00:53:19,960 --> 00:53:23,160
this is an example of instance variable.

881
00:53:23,160 --> 00:53:25,240
Again, we are declaring in here.

882
00:53:25,600 --> 00:53:27,840
Then we are creating two objects

883
00:53:29,120 --> 00:53:31,480
object one, object two,

884
00:53:32,480 --> 00:53:35,880
and then we are printing their values

885
00:53:36,240 --> 00:53:38,920
and then we are changing the value

886
00:53:38,920 --> 00:53:42,400
for object to two

887
00:53:42,400 --> 00:53:44,880
and again displaying the results.

888
00:53:45,360 --> 00:53:51,320
So you see only, only the value for object
two is changed.

889
00:53:52,200 --> 00:53:55,440
The value for object one it stays same

890
00:53:55,920 --> 00:53:58,440
because each instance variable

891
00:53:58,440 --> 00:54:09,840
has its own copy.

892
00:54:09,840 --> 00:54:12,560
Maybe it's more clear at exemplars.

893
00:54:13,000 --> 00:54:15,320
MM Yes, it will be.

894
00:54:15,760 --> 00:54:19,200
So a public Publix name,
this instance variable.

895
00:54:20,160 --> 00:54:22,960
And then I have this method,

896
00:54:23,400 --> 00:54:26,400
I have a local variable. Okay.

897
00:54:26,560 --> 00:54:29,000
And then I have

898
00:54:32,320 --> 00:54:35,160
another variable
that is instance variable.

899
00:54:35,160 --> 00:54:37,800
Okay, so same name variable.

900
00:54:37,800 --> 00:54:41,520
So same name for an instance variable.

901
00:54:41,520 --> 00:54:43,920
And in here I am only accessing it. Okay.

902
00:54:44,520 --> 00:54:46,560
So sorry, not same name.

903
00:54:46,560 --> 00:54:50,640
So actually let me show you an example

904
00:54:52,440 --> 00:54:52,800
because

905
00:54:52,800 --> 00:54:55,560
this is something that you guys
I seen you guys

906
00:54:56,640 --> 00:54:59,840
in your API classes.

907
00:54:59,840 --> 00:55:12,720
So today is class number 16, right?

908
00:55:12,720 --> 00:55:13,680
Oops.

909
00:55:14,040 --> 00:55:17,160
You have to create a package first

910
00:55:31,320 --> 00:55:40,040
is next.

911
00:55:40,440 --> 00:55:43,600
Let me cap.

912
00:55:43,600 --> 00:55:48,240
And so if you guys have understood it,
maybe if more accurate

913
00:55:48,320 --> 00:56:04,120
example was why.

914
00:56:04,120 --> 00:56:08,400
I guess so.

915
00:56:08,400 --> 00:56:10,920
I have this number

916
00:56:14,320 --> 00:56:15,600
in here

917
00:57:12,600 --> 00:57:15,360
then we know once you guys have

918
00:57:15,360 --> 00:58:28,400
created these two classes,
I need an entity done.

919
00:58:28,800 --> 00:58:30,080
All right,

920
00:58:30,560 --> 00:58:33,920
So let's just create the object

921
00:58:34,320 --> 00:58:36,240
name multiclass

922
00:58:38,920 --> 00:58:42,680
if we're to sign new keyword again,

923
00:58:42,880 --> 00:58:53,120
name of the class.

924
00:58:53,120 --> 00:58:57,000
What will you get, guys,
if I execute this program

925
00:59:07,760 --> 00:59:08,560
and by the way,

926
00:59:08,560 --> 00:59:17,880
I will be getting 0bd

927
00:59:17,880 --> 00:59:21,280
for the value of appear

928
00:59:21,560 --> 00:59:25,320
default value is zero
because we going to declare a number here.

929
00:59:26,240 --> 00:59:30,800
Now we have declared the number,
but we have not initialized it.

930
00:59:30,800 --> 00:59:34,280
So guys, I want you to focus
on your terminologies as well.

931
00:59:34,320 --> 00:59:38,080
Okay, So try to use proper terminology.

932
00:59:38,280 --> 00:59:40,960
It is very important for you to introduce.

933
00:59:41,000 --> 00:59:41,400
Okay.

934
00:59:42,640 --> 00:59:45,200
So I don't want you to do this.

935
00:59:45,200 --> 00:59:49,040
If your interviewer
is asking about elephants, I don't want to

936
00:59:49,640 --> 00:59:53,760
that you guys are saying about
about fishes or dogs or pads.

937
00:59:53,760 --> 00:59:57,680
I, I want you to understand
the terminology is proper and the onset

938
00:59:57,680 --> 01:00:01,560
of the onset in the proper way

939
01:00:02,280 --> 01:00:06,120
because you have not called this set
constant number.

940
01:00:06,880 --> 01:00:07,320
Okay.

941
01:00:07,320 --> 01:00:09,600
Who is sending messages again and again?

942
01:00:09,600 --> 01:00:12,160
Let me flow it.

943
01:00:13,240 --> 01:00:18,080
So right now I have not initialized
this variable, okay?

944
01:00:18,080 --> 01:00:21,760
I have not set anywhere new
and I am trying to call it right

945
01:00:21,840 --> 01:00:24,840
because it's an instance variable.

946
01:00:24,840 --> 01:00:26,480
I can do that. Okay.

947
01:00:26,480 --> 01:00:28,440
I can use that variable.

948
01:00:28,440 --> 01:00:30,960
We will assign a value first.

949
01:00:31,320 --> 01:00:39,520
Can I do the same with local variable?

950
01:00:39,520 --> 01:00:42,120
No, I will be getting an error.

951
01:00:42,960 --> 01:00:45,160
So a default value
will be printed in here.

952
01:00:46,480 --> 01:00:51,680
Okay.

953
01:00:51,680 --> 01:00:54,720
And if I

954
01:00:54,720 --> 01:00:59,720
if I say number is equal to ten,

955
01:01:00,680 --> 01:01:13,240
then what output I will get. Ben

956
01:01:14,920 --> 01:01:15,200
Right.

957
01:01:15,240 --> 01:01:17,600
Alexi What output I will get

958
01:01:24,240 --> 01:01:26,280
and see, are you with us?

959
01:01:27,000 --> 01:01:30,600
And do you understand
why we are getting ten?

960
01:01:30,600 --> 01:01:36,720
Is there anyone who don't understand
why we are getting ten?

961
01:01:36,720 --> 01:01:44,160
You confused?

962
01:01:44,160 --> 01:01:45,440
Confused.

963
01:01:45,760 --> 01:01:46,360
All right.

964
01:01:46,360 --> 01:01:50,400
That's why I asked you
so what do you think,

965
01:01:51,720 --> 01:01:52,880
Alexi? What do you think?

966
01:01:52,880 --> 01:01:55,120
What output
should I get instead of this ten

967
01:01:59,200 --> 01:02:01,560
on line nine, we are calling a variable,

968
01:02:01,560 --> 01:02:03,520
so you'll get that
this is not the proper term.

969
01:02:03,520 --> 01:02:05,160
We don't call TV.

970
01:02:05,160 --> 01:02:07,040
We don't call the variables.

971
01:02:07,040 --> 01:02:09,360
We call methods

972
01:02:09,360 --> 01:02:09,960
online.

973
01:02:09,960 --> 01:02:12,720
Then we are accessing a variable.

974
01:02:12,720 --> 01:02:14,320
Okay, this is the proper terminology.

975
01:02:14,320 --> 01:02:17,000
We excessive variable we call a method.

976
01:02:17,960 --> 01:02:20,040
We initial we initialize.

977
01:02:20,040 --> 01:02:20,520
Okay.

978
01:02:20,520 --> 01:02:24,160
Do don't feel bad
if I am if I am telling you

979
01:02:24,160 --> 01:02:27,880
that you guys are not using
the proper terminology from now on

980
01:02:28,840 --> 01:02:31,160
because earlier
you guys were in the initial stages.

981
01:02:32,080 --> 01:02:36,200
Then you guys will be telling me and
that's why this interaction is important.

982
01:02:36,320 --> 01:02:40,480
So if you guys are writing something
and I know that you are not

983
01:02:40,480 --> 01:02:44,360
using the proper terminology, then
that's how you can get corrected, right?

984
01:02:44,400 --> 01:02:45,920
That's how I can guide you.

985
01:02:45,920 --> 01:02:48,960
But if you are sitting behind a screen
not interacting, I don't know

986
01:02:48,960 --> 01:02:51,040
if you are understanding it
properly or not,

987
01:02:52,440 --> 01:02:55,320
please keep correcting us
so that we can make it a habit.

988
01:02:55,320 --> 01:02:58,960
Yes, I don't want to be saying fish
when asked to say elephant.

989
01:02:59,040 --> 01:03:00,600
So let's see. What do you think?

990
01:03:00,600 --> 01:03:02,640
What output
should I get instead of this ten

991
01:03:16,200 --> 01:03:18,160
And then why you are confused.

992
01:03:18,160 --> 01:03:19,040
What is confusing?

993
01:03:19,040 --> 01:03:22,720
You tell me the line, Alexia.

994
01:03:22,720 --> 01:03:36,040
Tell me the line number which is not clear
or which is confusing. You.

995
01:03:36,040 --> 01:03:38,040
Is there anyone else who's confused?

996
01:03:38,040 --> 01:03:40,840
No, no, it's okay. All right.
That's great.

997
01:03:40,840 --> 01:03:41,440
All right.

998
01:03:41,440 --> 01:03:44,040
And if I say

999
01:03:44,880 --> 01:03:47,640
let me let me change it to 100

1000
01:03:47,640 --> 01:03:50,440
so that you guys can
can you can differentiate it.

1001
01:03:51,000 --> 01:03:53,640
If I say

1002
01:03:53,680 --> 01:03:56,760
Rick app dog start on start.

1003
01:03:58,560 --> 01:04:03,920
And then if I printed out

1004
01:04:03,960 --> 01:04:05,520
what I will get

1005
01:04:10,560 --> 01:04:14,360
and then and hundreds of you

1006
01:04:23,640 --> 01:04:24,400
everyone is

1007
01:04:24,400 --> 01:04:27,200
is clear on this
we will be getting handbook

1008
01:04:28,120 --> 01:04:31,480
here we go we have a word for ten

1009
01:04:31,480 --> 01:04:32,960
from Merriam

1010
01:04:33,680 --> 01:04:36,520
another word from Katrina

1011
01:04:36,520 --> 01:04:43,920
not hundreds.

1012
01:04:43,920 --> 01:04:47,640
Okay And then hundred so or so.

1013
01:04:47,680 --> 01:04:49,840
So we have a boat for ten and 100 as well.

1014
01:04:50,000 --> 01:04:51,240
I got ten.

1015
01:04:51,240 --> 01:04:53,040
So guys don't execute these calls.

1016
01:04:54,160 --> 01:04:55,480
That's where you

1017
01:04:55,480 --> 01:04:58,280
I that's where I want your brain to learn.

1018
01:04:58,400 --> 01:04:58,800
Right.

1019
01:04:58,800 --> 01:05:04,200
I want your brain to
to execute this code inside.

1020
01:05:04,200 --> 01:05:06,720
Right. And then tell me the output.

1021
01:05:06,720 --> 01:05:09,280
There is no learning
if you are just executing the code

1022
01:05:09,280 --> 01:05:13,200
that I am writing in here
and telling me the output.

1023
01:05:13,200 --> 01:05:14,440
So let me explain.

1024
01:05:14,440 --> 01:05:16,840
So yes, first we will be getting harder.

1025
01:05:18,720 --> 01:05:19,320
Okay.

1026
01:05:19,320 --> 01:05:22,880
And now let me explain why
we will be getting neck.

1027
01:05:23,320 --> 01:05:23,520
Right.

1028
01:05:23,520 --> 01:05:30,480
We we're going to be getting under.

1029
01:05:30,480 --> 01:05:34,680
So in here
we are creating an object, right?

1030
01:05:34,680 --> 01:05:36,000
This line is clear.

1031
01:05:36,000 --> 01:05:38,160
Super, super clear. No issues with that

1032
01:05:39,200 --> 01:05:41,920
on line number nine.

1033
01:05:41,920 --> 01:05:46,880
So what happens
is that when I create this object,

1034
01:05:46,880 --> 01:05:51,200
a box inside the memory, inside

1035
01:05:51,200 --> 01:05:53,480
the heap area

1036
01:05:55,560 --> 01:05:57,480
will be created.

1037
01:05:57,480 --> 01:05:59,880
Right? So let's say this is here.

1038
01:06:00,080 --> 01:06:03,800
This round center is a heap
I inside that heap

1039
01:06:03,800 --> 01:06:08,240
I have this box and this box is called

1040
01:06:09,760 --> 01:06:11,080
recap.

1041
01:06:11,520 --> 01:06:15,240
Okay, a box

1042
01:06:15,880 --> 01:06:18,680
to hold all the instance

1043
01:06:18,680 --> 01:06:23,560
variables, I get ten.

1044
01:06:24,720 --> 01:06:29,520
So, Katrina,
can you please post in this portion?

1045
01:06:29,520 --> 01:06:32,920
All right. And in here

1046
01:06:32,920 --> 01:06:36,920
and another box of type integer and number

1047
01:06:39,600 --> 01:06:40,960
will be declared.

1048
01:06:40,960 --> 01:06:43,440
Okay. Now this box is a specific.

1049
01:06:44,200 --> 01:06:47,680
So this recap object appeared.

1050
01:06:47,720 --> 01:06:52,360
This recap when I access this number
and I store ten

1051
01:06:53,440 --> 01:06:58,560
then will be stored inside in here again
inside.

1052
01:06:58,560 --> 01:07:01,560
In here.

1053
01:07:01,560 --> 01:07:04,160
Like when I call this method

1054
01:07:06,280 --> 01:07:09,000
if recapped or said constant.

1055
01:07:09,000 --> 01:07:11,840
So what will happen again,

1056
01:07:11,840 --> 01:07:16,320
I am accessing this same memory area,
this number.

1057
01:07:17,200 --> 01:07:18,040
Okay.

1058
01:07:18,080 --> 01:07:20,720
And this time I'm saving

1059
01:07:21,400 --> 01:07:23,920
hundreds inside this variable.

1060
01:07:23,960 --> 01:07:28,120
Now the the value of that variable
has been updated.

1061
01:07:28,480 --> 01:07:31,000
Okay, has been updated.

1062
01:07:31,000 --> 01:07:36,280
If now I tried to print it,
then I will be getting a hundred.

1063
01:07:36,480 --> 01:07:37,160
Right.

1064
01:07:37,320 --> 01:07:40,680
Because one way variable at a time

1065
01:07:41,040 --> 01:07:44,880
can only hold one value right.

1066
01:07:44,880 --> 01:07:51,000
And in here this number was updated
when I called this method.

1067
01:07:51,560 --> 01:07:54,560
That's why instead of 1000

1068
01:07:54,960 --> 01:07:57,800
was stored inside this memory location.

1069
01:07:57,800 --> 01:07:58,760
And I got

1070
01:08:00,600 --> 01:08:01,480
hundreds.

1071
01:08:01,680 --> 01:08:03,840
You can also verified by debugging. Right?

1072
01:08:03,840 --> 01:08:06,160
So I place this table point

1073
01:08:07,600 --> 01:08:10,760
and then I right click and I saved debug

1074
01:08:10,760 --> 01:08:17,160
as Java application.

1075
01:08:17,160 --> 01:08:17,720
Okay.

1076
01:08:17,720 --> 01:08:20,240
So guys, I don't see my variables window.

1077
01:08:20,360 --> 01:08:29,360
What should I do?

1078
01:08:29,360 --> 01:08:31,680
But you called two methods.

1079
01:08:31,680 --> 01:08:33,880
Yes, I called two matters.

1080
01:08:34,600 --> 01:08:37,000
So I go in here I solved

1081
01:08:37,000 --> 01:08:40,120
and the last effective
they are already in here.

1082
01:08:40,960 --> 01:08:43,400
Then I can drag and drop it in here. Okay.

1083
01:08:43,800 --> 01:08:48,080
So this video, this recap,
this recap object

1084
01:08:48,080 --> 01:08:51,840
has been created.

1085
01:08:51,840 --> 01:08:52,840
It's a recap.

1086
01:08:52,840 --> 01:08:56,480
And inside this recap guide,
you see one memory

1087
01:08:56,480 --> 01:09:01,200
location for the number
variable has been created right

1088
01:09:02,080 --> 01:09:04,080
when I say a recap

1089
01:09:04,320 --> 01:09:08,040
and then when I execute this line

1090
01:09:08,480 --> 01:09:12,640
you see it then has been stored
inside the number variable.

1091
01:09:13,480 --> 01:09:14,640
Okay.

1092
01:09:14,640 --> 01:09:20,280
And then I call this
set the constant number.

1093
01:09:20,280 --> 01:09:22,280
Right? I want to see nice.

1094
01:09:22,280 --> 01:09:26,040
I want to see what is happening
inside this method, which button

1095
01:09:26,040 --> 01:09:30,120
I should use the step
in to or the step over. So

1096
01:09:34,120 --> 01:09:35,200
Sebastian,

1097
01:09:35,520 --> 01:09:38,520
I have already cried for eight years. So.

1098
01:09:38,960 --> 01:09:43,760
So time for
my crying is gone and time to the

1099
01:09:43,800 --> 01:09:47,560
your time to cry is start now
or has already started

1100
01:09:51,760 --> 01:09:54,640
so I call the step into right

1101
01:09:55,760 --> 01:09:59,480
then it takes me inside inside the method

1102
01:09:59,880 --> 01:10:02,200
in here and again

1103
01:10:03,440 --> 01:10:05,760
if I say if I expand

1104
01:10:07,560 --> 01:10:10,080
if by expand this number in here,

1105
01:10:11,080 --> 01:10:14,320
you guys will see right now
expanding here.

1106
01:10:15,600 --> 01:10:20,720
But as soon as I exit you,
this number is equal to 100.

1107
01:10:20,720 --> 01:10:23,640
You see,
the number of variable has been updated.

1108
01:10:24,800 --> 01:10:27,920
Again, the number value has been updated.

1109
01:10:27,920 --> 01:10:30,680
And now

1110
01:10:31,280 --> 01:10:35,120
I come in here,
I call the the number again,

1111
01:10:35,800 --> 01:10:38,160
I call this step into

1112
01:10:38,160 --> 01:10:40,720
and I am printing this number right.

1113
01:10:40,720 --> 01:10:47,280
So the number it contains hundred because
previous method it updated that number.

1114
01:10:48,680 --> 01:10:49,240
So is

1115
01:10:49,240 --> 01:10:53,360
it clear, guys, why we got 110

1116
01:10:54,920 --> 01:10:57,120
Alexi The clear

1117
01:11:07,080 --> 01:11:07,760
Okay.

1118
01:11:07,840 --> 01:11:12,640
And if let's say if I call

1119
01:11:12,640 --> 01:11:17,120
and either my third recapped or oops,

1120
01:11:18,200 --> 01:11:20,520
that number why

1121
01:11:20,520 --> 01:11:25,160
we get only one two out
so we get only one to start

1122
01:11:25,160 --> 01:11:29,280
because there is only one result inside
this print number.

1123
01:11:29,280 --> 01:11:32,920
There is notice out insert constant
that is not a solid insert number.

1124
01:11:33,320 --> 01:11:36,080
That's we get only one

1125
01:11:37,400 --> 01:11:39,320
insert

1126
01:11:39,600 --> 01:11:40,440
number.

1127
01:11:40,440 --> 01:11:43,880
And if by force 50 in here

1128
01:11:44,240 --> 01:11:54,600
what output by will get based,

1129
01:11:54,600 --> 01:11:57,680
I will be getting a 50.

1130
01:11:58,160 --> 01:11:58,880
Okay.

1131
01:11:59,640 --> 01:12:14,640
Is there anyone who don't understand
why will be getting 50?

1132
01:12:14,640 --> 01:12:17,400
Everyone understand why we get 50.

1133
01:12:18,400 --> 01:12:20,480
You should decide first what number

1134
01:12:20,480 --> 01:12:23,480
you want to get.

1135
01:12:23,480 --> 01:12:26,640
Why not hundreds of dollars
saying Why not 100?

1136
01:12:26,640 --> 01:12:29,640
Can someone explain, Bill,
why we are not getting hundred

1137
01:12:36,440 --> 01:12:40,960
number plus none plus equal to.

1138
01:12:40,960 --> 01:12:55,680
Yes, Alexi, you can write any expression
inside those methods.

1139
01:12:55,680 --> 01:12:59,360
So under we passed this 15 here

1140
01:13:00,240 --> 01:13:02,360
and we call

1141
01:13:03,240 --> 01:13:10,280
the oops, we call this set number.

1142
01:13:10,280 --> 01:13:10,920
Right.

1143
01:13:11,440 --> 01:13:14,000
So this second number in here,

1144
01:13:14,080 --> 01:13:17,280
this 50 will be copied

1145
01:13:18,240 --> 01:13:20,680
inside this number.

1146
01:13:21,400 --> 01:13:22,120
Okay?

1147
01:13:22,240 --> 01:13:25,920
And from inside this method,
what I am saying, I am saying

1148
01:13:26,520 --> 01:13:31,000
assign the value of number
to number to number.

1149
01:13:31,880 --> 01:13:35,880
So this 50 will get stored
inside this number.

1150
01:13:35,880 --> 01:13:39,240
Right. And then we are printing it. Okay.

1151
01:13:39,400 --> 01:13:41,760
And then we follow this method.

1152
01:13:41,880 --> 01:13:43,560
That's why we get 50.

1153
01:13:43,560 --> 01:13:46,680
Is it clear now?

1154
01:13:46,680 --> 01:13:47,360
Okay,

1155
01:13:49,080 --> 01:13:51,040
so an assignment in one method

1156
01:13:51,040 --> 01:13:55,880
can variable again
variable values for many objects.

1157
01:13:56,520 --> 01:13:59,200
You mean can vary the value
for many objects?

1158
01:13:59,640 --> 01:14:03,520
No, no, no, Anabel,
It's only for bad object for,

1159
01:14:03,520 --> 01:14:10,800
let's say
for if I, if I create another object.

1160
01:14:12,080 --> 01:14:14,760
Recap, recap. Do

1161
01:14:21,880 --> 01:14:22,920
nothing that

1162
01:14:22,920 --> 01:14:25,640
I do with this object

1163
01:14:26,320 --> 01:14:29,280
will effect this object.

1164
01:14:29,280 --> 01:14:35,000
Okay?

1165
01:14:35,000 --> 01:14:38,040
So this object,
it has its own separate copy

1166
01:14:39,120 --> 01:14:43,240
zoom working
override times as you are long gone.

1167
01:14:43,240 --> 01:14:46,800
But we can change value
and it will replace the previous one.

1168
01:14:46,800 --> 01:14:48,000
Yes, we can replace.

1169
01:14:48,000 --> 01:14:52,760
But remember, guys, it's
only for that specific object

1170
01:14:53,400 --> 01:14:55,880
on which I am calling those methods.

1171
01:14:55,880 --> 01:14:59,720
Right?

1172
01:14:59,720 --> 01:15:03,760
Like, for example, if I say if I say

1173
01:15:06,240 --> 01:15:11,120
if I say recap dot set number
and I pass 50

1174
01:15:11,760 --> 01:15:15,280
and I say recap, do not print

1175
01:15:16,280 --> 01:15:18,360
but output,
I will get five this print number.

1176
01:15:18,360 --> 01:15:21,080
Guys, let me let me comment this out,

1177
01:15:21,600 --> 01:15:23,600
but I will get

1178
01:15:24,720 --> 01:15:27,240
I will be getting zero

1179
01:15:27,240 --> 01:15:29,440
because I am setting

1180
01:15:29,440 --> 01:15:32,040
the value on the cap variable,

1181
01:15:32,920 --> 01:15:36,320
but I am getting value from recap to that.

1182
01:15:36,320 --> 01:15:39,200
Recap to if it has its own memory,

1183
01:15:39,520 --> 01:15:41,800
it has nothing to do with recap.

1184
01:15:42,400 --> 01:15:45,040
That's why we have static variables.

1185
01:15:45,240 --> 01:15:48,720
If you want this communication
between two objects,

1186
01:15:49,360 --> 01:15:51,960
then you need that static variable.

1187
01:15:51,960 --> 01:15:55,200
That's why I was saying
that when you have to communicate,

1188
01:15:55,200 --> 01:16:00,920
when you have to pass some information
between objects, we use static variables.

1189
01:16:01,320 --> 01:16:04,800
When we have pass pass information
between methods,

1190
01:16:05,080 --> 01:16:11,040
we use instance variables.

1191
01:16:11,040 --> 01:16:12,600
Maybe we need to break

1192
01:16:14,360 --> 01:16:15,600
well, more minutes.

1193
01:16:15,600 --> 01:16:18,560
Let's see and then we can have break

1194
01:16:19,080 --> 01:16:22,440
and we will be getting zero.

1195
01:16:22,440 --> 01:16:23,000
Is it clear?

1196
01:16:23,000 --> 01:16:28,040
Right.

1197
01:16:28,040 --> 01:16:39,000
You need to ask global.

1198
01:16:39,000 --> 01:16:43,200
All right, guys, if you guys
have understood it properly, tell me.

1199
01:16:44,400 --> 01:16:49,640
Tell me, how can I pass this 50

1200
01:16:50,880 --> 01:16:53,640
to this recap to object

1201
01:16:53,640 --> 01:16:56,400
so that when I call this number,

1202
01:16:56,640 --> 01:16:59,400
I get this 50 from this object

1203
01:16:59,760 --> 01:17:03,680
to this object.

1204
01:17:03,680 --> 01:17:09,360
What should I do?

1205
01:17:09,360 --> 01:17:11,320
So I remove this line.

1206
01:17:11,320 --> 01:17:13,520
Okay, So I

1207
01:17:16,000 --> 01:17:17,760
okay, so the value

1208
01:17:17,760 --> 01:17:21,600
that I set inside this number,

1209
01:17:22,800 --> 01:17:25,400
I want to get that number

1210
01:17:25,920 --> 01:17:30,040
when I call this
print the number on object recap.

1211
01:17:31,640 --> 01:17:33,840
So I want to start something on recap

1212
01:17:34,200 --> 01:17:37,000
and I want to
I should be able to get that thing

1213
01:17:37,160 --> 01:17:41,640
from that recap
to when I call the recap to print object.

1214
01:17:42,000 --> 01:17:44,600
So tell me, what should I change?
So let me execute this

1215
01:17:46,680 --> 01:17:47,960
instead of zero.

1216
01:17:47,960 --> 01:17:49,120
I should see 50.

1217
01:17:49,120 --> 01:17:53,080
What should I change?

1218
01:17:53,080 --> 01:17:53,760
No, no, no.

1219
01:17:53,760 --> 01:17:56,040
I don't want to start it on object too.

1220
01:17:56,600 --> 01:18:00,240
I don't want to set it on object to.

1221
01:18:00,240 --> 01:18:04,240
I want to set something on object
one using object one

1222
01:18:04,800 --> 01:18:07,800
and I want to get that thing
using object to

1223
01:18:16,520 --> 01:18:19,840
number plus 40 on line

1224
01:18:19,840 --> 01:18:23,440
nine static making number start date.

1225
01:18:24,000 --> 01:18:25,280
Jane did

1226
01:18:32,520 --> 01:18:34,120
it. It's very simple.

1227
01:18:34,120 --> 01:18:38,280
Why are you guys are confused about recap
don't certain number 50

1228
01:18:38,800 --> 01:18:43,680
and then recap don't start number
and recap to recap

1229
01:18:43,680 --> 01:18:50,720
one don't start a number
and I don't know what else.

1230
01:18:50,720 --> 01:18:51,600
It's very simple.

1231
01:18:51,600 --> 01:18:54,360
I have to share something
between different objects.

1232
01:18:54,360 --> 01:18:56,280
I make a static

1233
01:18:56,640 --> 01:18:58,480
and make it static

1234
01:18:59,560 --> 01:19:06,960
because we want problems.

1235
01:19:06,960 --> 01:19:15,560
Do you guys understand
now how starting work?

1236
01:19:15,560 --> 01:19:18,840
We will do more examples
about the static and static work.

1237
01:19:18,840 --> 01:19:22,600
But I want to explain actually one concept
because before I

1238
01:19:22,600 --> 01:19:27,040
before we can dig down,

1239
01:19:27,040 --> 01:19:31,200
but I still don't know how we
got to zero in last example.

1240
01:19:33,120 --> 01:19:33,680
Maryam You

1241
01:19:33,680 --> 01:19:37,560
mean if I remove the static,
why we get to zero?

1242
01:19:37,560 --> 01:19:44,800
You don't understand in this part.

1243
01:19:44,800 --> 01:19:50,200
How did you guys,
how have you guys done your homework?

1244
01:19:50,560 --> 01:19:53,000
If you don't understand the static part?

1245
01:19:53,000 --> 01:19:56,360
Because the last example requires
this this concept of static

1246
01:20:00,600 --> 01:20:01,040
force, then

1247
01:20:01,040 --> 01:20:04,800
can we also do recap, do not start number
instead of making sense?

1248
01:20:04,800 --> 01:20:07,200
Yes, give me we can do that.

1249
01:20:07,200 --> 01:20:09,040
No, it's not Google.

1250
01:20:09,040 --> 01:20:12,560
Are you guys getting this homework
from your seniors or somewhere else?

1251
01:20:13,440 --> 01:20:17,160
Tell me, tell me honestly,

1252
01:20:17,160 --> 01:20:28,560
most probably we did it wrong.

1253
01:20:28,560 --> 01:20:30,960
I brought in what order.

1254
01:20:30,960 --> 01:20:34,320
The class and classes are triggered.

1255
01:20:34,320 --> 01:20:38,520
Classes are triggered.

1256
01:20:38,520 --> 01:20:39,080
Alexa.

1257
01:20:39,080 --> 01:20:45,000
You mean my grandmother had me?

1258
01:20:45,000 --> 01:20:48,080
Can we get feedback on our solutions?

1259
01:20:48,080 --> 01:20:50,680
Yes. Automate. I have shared
the solutions. Build rapport.

1260
01:20:50,720 --> 01:20:55,880
Number 50 on on canvas
so you guys can compare your solutions

1261
01:20:55,880 --> 01:21:01,640
with with my solution.

1262
01:21:01,640 --> 01:21:02,000
Maybe.

1263
01:21:02,040 --> 01:21:03,760
But sometimes it passes.

1264
01:21:03,760 --> 01:21:05,720
But maybe our solution is different.

1265
01:21:05,720 --> 01:21:07,280
I have shared it.

1266
01:21:07,280 --> 01:21:09,400
Okay, so Alexa you mean the property?

1267
01:21:09,680 --> 01:21:12,680
So the line that we
write first executes first,

1268
01:21:13,840 --> 01:21:15,280
this will be executed first.

1269
01:21:15,280 --> 01:21:17,560
And then this one. Then this one.
Then this one.

1270
01:21:17,560 --> 01:21:19,280
And this one. That's one bottom.

1271
01:21:19,280 --> 01:21:20,600
Did you get to your answer? Why?

1272
01:21:20,600 --> 01:21:32,520
We are getting zero.

1273
01:21:32,520 --> 01:21:32,960
Okay.

1274
01:21:34,800 --> 01:21:35,520
Okay.

1275
01:21:35,520 --> 01:21:38,360
So we have 6 minutes

1276
01:21:39,600 --> 01:21:45,120
and let's finish this slide.

1277
01:21:45,120 --> 01:21:48,360
The static variable variable,
which is declared as

1278
01:21:48,360 --> 01:21:50,760
static is called static variable.

1279
01:21:51,640 --> 01:21:55,280
Static variables are declared
with static keyword in a class,

1280
01:21:56,200 --> 01:22:00,640
but outside a metadata constructor

1281
01:22:00,640 --> 01:22:05,880
or a block of four,
it cannot be local static.

1282
01:22:05,880 --> 01:22:07,880
They cannot be local.

1283
01:22:08,120 --> 01:22:11,080
You can create a single copy
of static variable

1284
01:22:11,080 --> 01:22:14,520
and share
among all the instances of that class.

1285
01:22:16,200 --> 01:22:18,960
Memory allocation
for static variable happens

1286
01:22:18,960 --> 01:22:22,440
only once when class is loaded inside.

1287
01:22:22,440 --> 01:22:27,720
The memory.

1288
01:22:27,720 --> 01:22:29,520
These are some more wires. Weird.

1289
01:22:29,520 --> 01:22:31,280
How do we add value?

1290
01:22:31,280 --> 01:22:34,680
To recap to using recap one
although we make it

1291
01:22:34,680 --> 01:22:38,040
static, we are not adding value.

1292
01:22:38,040 --> 01:22:39,440
We are assigning value

1293
01:22:44,280 --> 01:22:48,480
static odd in the know it can be anything.

1294
01:22:48,480 --> 01:22:49,680
It can be a string.

1295
01:22:49,680 --> 01:22:55,160
It can be a double, it can be anything.

1296
01:22:55,160 --> 01:23:01,520
It can be anything.

1297
01:23:01,520 --> 01:23:04,680
No, I mean a not local but international.

1298
01:23:04,680 --> 01:23:09,960
In this case.

1299
01:23:09,960 --> 01:23:13,360
And so by international you mean

1300
01:23:13,480 --> 01:23:15,600
you mean instance

1301
01:23:25,960 --> 01:23:26,960
of somebody

1302
01:23:26,960 --> 01:23:30,840
speaking and challenging
is that is gradually it is gold.

1303
01:23:31,200 --> 01:23:33,320
So you guys will not even realize

1304
01:23:34,120 --> 01:23:38,080
international here I am.

1305
01:23:38,080 --> 01:23:41,040
Okay static are here

1306
01:23:41,640 --> 01:23:44,680
it's all over so you can think of local

1307
01:23:44,680 --> 01:23:47,080
as maybe at city level

1308
01:23:47,920 --> 01:23:50,280
instance as country level

1309
01:23:50,280 --> 01:23:53,400
and then static as international level

1310
01:23:53,400 --> 01:23:57,600
if that helps.

1311
01:23:57,600 --> 01:23:59,640
That they got here all over us.

1312
01:23:59,640 --> 01:24:03,720
You can use a static inside them
at third outside of in that third

1313
01:24:03,720 --> 01:24:07,960
class, static

1314
01:24:07,960 --> 01:24:10,960
variables are also known
as class variable.

1315
01:24:11,200 --> 01:24:11,960
This is another

1316
01:24:13,360 --> 01:24:16,560
terminology that is used

1317
01:24:16,560 --> 01:24:19,920
because they are associated with the class

1318
01:24:20,640 --> 01:24:25,960
and common
for all the instances of that class.

1319
01:24:25,960 --> 01:24:31,000
Static variables and stored values
for variables in a common memory location.

1320
01:24:32,200 --> 01:24:36,160
Because of this common memory location,

1321
01:24:36,160 --> 01:24:39,960
if one object changes
the value of a static variable,

1322
01:24:40,440 --> 01:24:46,320
all objects of the same class
are affected.

1323
01:24:46,320 --> 01:24:51,840
Use this static variable for the property
that is common to all the objects.

1324
01:24:52,560 --> 01:24:56,520
For example, in the class student
all student shares

1325
01:24:56,520 --> 01:25:00,520
the same college name
if they belong to the same quality.

1326
01:25:01,320 --> 01:25:06,080
Use the static methods for changing
a static variable in this part.

1327
01:25:06,080 --> 01:25:08,880
We will discuss after the break.

1328
01:25:08,880 --> 01:25:12,000
So these are the static
variable of matters.

1329
01:25:12,000 --> 01:25:14,040
These are the static memory locations.

1330
01:25:14,040 --> 01:25:17,640
So we have two objects, one in here,

1331
01:25:19,120 --> 01:25:20,440
one in here.

1332
01:25:20,440 --> 01:25:22,440
This is object here.

1333
01:25:22,440 --> 01:25:26,160
This is object B,
We have a static variable

1334
01:25:27,320 --> 01:25:28,600
as to static variable.

1335
01:25:28,600 --> 01:25:32,000
So the memory for the static variables
is same.

1336
01:25:32,680 --> 01:25:35,040
It's being shear

1337
01:25:36,240 --> 01:25:37,040
static variable.

1338
01:25:37,040 --> 01:25:40,320
So the values for variables
end share a common memory location

1339
01:25:40,320 --> 01:25:43,600
for all the objects.

1340
01:25:43,600 --> 01:25:45,480
This is just another example.

1341
01:25:45,480 --> 01:25:47,680
This is static interior I.D.

1342
01:25:47,920 --> 01:25:49,800
so it will be same for student zero.

1343
01:25:49,800 --> 01:25:51,120
So one

1344
01:25:55,320 --> 01:25:58,040
student a static is not x non

1345
01:25:58,040 --> 01:26:01,920
axis modified, so you will learn
about the access modifiers today.

1346
01:26:01,920 --> 01:26:04,520
What are they?

1347
01:26:04,520 --> 01:26:07,920
Static
B word can be used to be the variables

1348
01:26:08,280 --> 01:26:11,160
matter so we can also have static methods.

1349
01:26:11,520 --> 01:26:14,400
We will discuss about blocks
and nested classes

1350
01:26:15,480 --> 01:26:18,600
particular
to being also d class than an instance.

1351
01:26:18,600 --> 01:26:19,920
Again, same thing.

1352
01:26:19,920 --> 01:26:23,920
Static methods can access
all static variables.

1353
01:26:23,920 --> 01:26:27,000
We will discuss this about the deliberate

1354
01:26:29,440 --> 01:26:30,920
and this last block.

1355
01:26:30,920 --> 01:26:31,560
Okay.

1356
01:26:31,920 --> 01:26:32,960
And also remind me.

1357
01:26:32,960 --> 01:26:35,040
So after the break,
we will go through the homework

1358
01:26:35,040 --> 01:26:37,280
and then we will discuss this.

1359
01:26:37,280 --> 01:26:40,720
So static methods could have been used to.

1360
01:26:41,160 --> 01:26:44,240
Yes. Now, Will, we're going to discuss
about the static methods in detail

1361
01:26:44,280 --> 01:26:48,560
after the break.

1362
01:26:48,560 --> 01:26:51,000
Are there any questions

1363
01:26:54,640 --> 01:26:56,720
Then please go back to the equal

1364
01:26:56,720 --> 01:27:01,800
40 ish or more.

1365
01:27:01,800 --> 01:27:02,880
Really, Sebastian?

1366
01:27:02,880 --> 01:27:03,480
No means.

1367
01:27:03,480 --> 01:27:07,000
Today.

1368
01:27:07,000 --> 01:27:09,240
How about Public-Private Default? Yes.

1369
01:27:09,240 --> 01:27:12,000
That is also the topic of today's class.

1370
01:27:13,720 --> 01:27:16,040
I don't know that you have static in

1371
01:27:16,200 --> 01:27:20,240
in class, but you change in in class test.

1372
01:27:20,760 --> 01:27:23,680
It turns out you can change every static.

1373
01:27:23,680 --> 01:27:27,400
Yes, we can change this static.

1374
01:27:27,400 --> 01:27:32,160
Yes, we can change this static inside
the methods, inside the test class.

1375
01:27:32,160 --> 01:27:34,320
Everywhere. Everywhere.

1376
01:27:35,160 --> 01:27:37,480
But Breaking Bad.

1377
01:27:37,480 --> 01:27:40,280
How do you guys know what to do
and hence do so well?

1378
01:27:40,680 --> 01:27:44,640
So. So I have I have noticed this
all the all the neighboring countries

1379
01:27:44,640 --> 01:27:49,240
like Tajikistan, Afghanistan,
Nepal, Bangladesh.

1380
01:27:49,960 --> 01:27:51,840
Is it because of movies?

1381
01:27:51,840 --> 01:27:53,080
No, no, no.

1382
01:27:53,240 --> 01:27:56,720
Then how how do you learn it
on the first place like you have?

1383
01:27:56,800 --> 01:28:04,800
If you are watching a movie, you have to
understand that language right?

1384
01:28:04,800 --> 01:28:05,520
Buddy? Is

1385
01:28:08,000 --> 01:28:09,040
the handbrake about.

1386
01:28:09,040 --> 01:28:13,520
And again, it's perfect.

1387
01:28:13,520 --> 01:28:18,560
I mean, you don't
even if you guys are learning it

1388
01:28:18,560 --> 01:28:20,960
from the subtitles

1389
01:28:23,320 --> 01:28:24,440
from childhood,

1390
01:28:24,440 --> 01:28:26,480
I understand the most commonly used words

1391
01:28:34,080 --> 01:28:36,360
I know do better than my native language

1392
01:28:38,280 --> 01:28:44,280
or low down the whole.

1393
01:28:44,280 --> 01:28:45,240
No, no, I'm not.

1394
01:28:45,240 --> 01:29:02,760
You are right.

1395
01:29:02,760 --> 01:29:03,720
You are right.

1396
01:29:03,720 --> 01:29:05,360
It's a very famous movie.

1397
01:29:05,360 --> 01:29:08,320
I know Punjabi as well from my sir.

1398
01:29:08,320 --> 01:29:11,520
Oh, that's their big.

1399
01:29:11,520 --> 01:29:14,120
And we start because we are

1400
01:29:14,120 --> 01:29:16,760
just like people from most Soviet

1401
01:29:16,760 --> 01:29:21,040
countries.

1402
01:29:21,040 --> 01:29:27,000
I think they all know Russian
or at least understand it's all.

1403
01:29:27,000 --> 01:29:29,400
It's because of that water.

1404
01:29:29,400 --> 01:29:32,760
And every Persian grape is deep white

1405
01:29:35,120 --> 01:29:35,920
European features.

1406
01:29:35,920 --> 01:29:39,160
Indian or the.

1407
01:29:39,160 --> 01:29:42,040
We won't know that Sergei

1408
01:29:43,040 --> 01:29:48,640
I love Alex
and I'm going to have the mommy.

1409
01:29:48,640 --> 01:29:53,160
Sebastian when you and in those memes
why there is this blurring kind

1410
01:29:53,200 --> 01:29:54,120
kind of effect

1411
01:29:58,440 --> 01:30:00,720
make it perfect man

1412
01:30:07,560 --> 01:30:08,360
some app

1413
01:30:08,360 --> 01:30:12,840
on my iPhone so I will share you
I will share you an app in the break.

1414
01:30:12,840 --> 01:30:15,600
I'm getting that there is a very good app
for editing

1415
01:30:18,400 --> 01:30:20,360
one video as but

1416
01:30:22,560 --> 01:30:26,800
all right, guys, please be back.

1417
01:30:26,800 --> 01:30:27,120
Okay.

1418
01:30:27,120 --> 01:30:31,000
So this time let's have a shorter break.

1419
01:30:31,000 --> 01:30:34,040
The next break we will be having a longer
one and I will give you the

1420
01:30:34,040 --> 01:30:37,800
tasks as well.

1421
01:30:37,800 --> 01:30:49,160
Only for 15 minutes.

1422
01:30:49,160 --> 01:30:54,280
Let's do time for Alexa
to call the grandma who we speaks Persian.

1423
01:30:54,280 --> 01:30:56,400
Farsi, the Tajik.

1424
01:30:56,400 --> 01:30:59,200
They can learn all very easy.

1425
01:31:00,600 --> 01:31:01,880
I want to learn Persian.

1426
01:31:01,880 --> 01:31:03,080
I don't know why.

1427
01:31:03,080 --> 01:31:07,080
Because there is a great history
involved around that Persia.

1428
01:31:07,080 --> 01:31:10,320
All that other guys reminded me
about the recording.

1429
01:31:10,320 --> 01:31:13,400
And please be back in 15

1430
01:31:13,400 --> 01:31:16,680
minutes.

1431
01:31:16,680 --> 01:31:18,960
Familiar with Banjo. If an English thief

1432
01:31:26,040 --> 01:31:28,120
was not recording

1433
01:31:38,640 --> 01:31:39,280
Despacito,

1434
01:31:39,280 --> 01:31:48,040
what does it mean?

1435
01:31:48,040 --> 01:31:48,480
Modern?

1436
01:31:48,480 --> 01:31:49,680
What does it mean?

1437
01:31:49,680 --> 01:31:53,880
Slowly I

1438
01:32:00,520 --> 01:32:01,360
So the name of

1439
01:32:01,360 --> 01:32:07,960
the class is Employ.

1440
01:32:07,960 --> 01:32:16,000
And then we have to create the variables.

1441
01:32:16,000 --> 01:32:18,120
What one should be the employed.

1442
01:32:18,120 --> 01:32:20,720
So guys, tell me about the employed.

1443
01:32:21,000 --> 01:32:30,360
Should it be started instead or local?

1444
01:32:30,360 --> 01:32:37,920
It should be instance right.

1445
01:32:37,920 --> 01:32:45,680
And what about the salary?

1446
01:32:45,680 --> 01:32:49,720
Yes, it should be double
and it should also be instead.

1447
01:32:50,200 --> 01:32:55,440
So in here we are specifically talking
about the syntax employed.

1448
01:32:55,560 --> 01:32:58,960
So what should be the type of that

1449
01:32:58,960 --> 01:33:03,080
CEO variable?

1450
01:33:03,080 --> 01:33:04,880
It should be

1451
01:33:06,280 --> 01:33:23,280
static.

1452
01:33:23,280 --> 01:33:28,800
Okay.

1453
01:33:28,800 --> 01:33:32,880
And then we have to assign these values
to these variables

1454
01:33:32,880 --> 01:33:34,800
and then

1455
01:33:36,360 --> 01:33:37,760
create three variables.

1456
01:33:37,760 --> 01:33:41,000
Create two objects of this class 70

1457
01:33:41,000 --> 01:33:44,160
value of the ID salary
for each of the objects.

1458
01:33:44,160 --> 01:33:46,840
Print out the and feel for

1459
01:33:47,880 --> 01:33:50,280
all the objects

1460
01:33:53,120 --> 01:33:53,520
out there.

1461
01:33:53,520 --> 01:33:55,680
So let's build

1462
01:33:55,680 --> 01:33:57,760
the employee aster

1463
01:34:15,920 --> 01:34:17,200
And you guys done and done

1464
01:34:17,200 --> 01:34:29,840
typing this call.

1465
01:34:29,840 --> 01:34:32,160
So create three variables, right?

1466
01:34:32,320 --> 01:34:33,360
It's very simple.

1467
01:34:33,360 --> 01:34:34,720
We say

1468
01:34:36,480 --> 01:34:39,600
employ, employ one

1469
01:34:43,360 --> 01:34:44,800
or let's say

1470
01:34:48,520 --> 01:34:50,000
a new viewer

1471
01:34:50,000 --> 01:34:58,600
and then name must be class.

1472
01:34:58,600 --> 01:35:00,240
Then we set the values.

1473
01:35:00,240 --> 01:35:03,680
So we say empty already the.

1474
01:35:03,680 --> 01:35:11,480
First, let's say one, two, three,
and then not

1475
01:35:12,600 --> 01:35:14,840
then read the first

1476
01:35:21,360 --> 01:35:22,080
hundred

1477
01:35:23,880 --> 01:35:26,000
and then we create another object.

1478
01:35:26,000 --> 01:35:28,160
So let me quickly copy

1479
01:35:30,360 --> 01:35:31,200
this forward.

1480
01:35:31,200 --> 01:35:33,720
And the second

1481
01:35:40,160 --> 01:35:43,320
code, five, six,

1482
01:35:43,320 --> 01:35:46,720
and then one.

1483
01:35:48,480 --> 01:35:50,320
And then now

1484
01:35:51,120 --> 01:35:52,440
I have

1485
01:35:53,000 --> 01:35:53,640
lost it.

1486
01:35:53,640 --> 01:35:55,920
Anyone who was unable to solve question

1487
01:36:13,960 --> 01:36:14,560
And why now?

1488
01:36:14,560 --> 01:36:26,280
You and I were unable to solve this,

1489
01:36:26,280 --> 01:36:30,160
make it employed to

1490
01:36:47,640 --> 01:36:48,840
and now

1491
01:36:48,920 --> 01:36:53,000
I have to print out the value,
this static variable.

1492
01:36:53,000 --> 01:36:54,640
How should I print out the value? Guys

1493
01:37:05,080 --> 01:37:09,480
who will tell me the best practice?

1494
01:37:10,400 --> 01:37:13,560
Tell me the best practice.

1495
01:37:13,560 --> 01:37:16,040
What is the best practice
to call a static variable

1496
01:37:28,000 --> 01:37:30,600
as I did?

1497
01:37:31,240 --> 01:37:33,240
What is the best practice?
Should I call it?

1498
01:37:33,240 --> 01:37:43,840
Will name of the class
or with the name of the object?

1499
01:37:43,840 --> 01:37:46,320
The best practice is to call this tactic.

1500
01:37:46,320 --> 01:37:51,920
We do both on the name of the class,
not on the

1501
01:37:54,120 --> 01:38:12,960
and if you do this intelligently,

1502
01:38:12,960 --> 01:38:18,480
you will not follow the suggestion
to call it with the name of the object.

1503
01:38:18,480 --> 01:38:25,960
But any place that as so

1504
01:38:27,480 --> 01:38:30,000
we get this math

1505
01:38:31,200 --> 01:38:34,400
and we don't need to call it
we should not be calling it

1506
01:38:34,400 --> 01:38:39,080
with the name of the object
because the value is always same for

1507
01:38:40,320 --> 01:38:42,880
all the objects of a class vessel.

1508
01:38:43,000 --> 01:38:48,440
To always use the name of the class.

1509
01:38:48,440 --> 01:38:49,040
Okay.

1510
01:38:49,040 --> 01:39:01,120
Are there any questions from this task?

1511
01:39:01,120 --> 01:39:02,880
Is it only for static? Yes.

1512
01:39:02,880 --> 01:39:06,680
It will only work for static
because objects

1513
01:39:06,680 --> 01:39:09,720
they have their own own locations.

1514
01:39:09,720 --> 01:39:12,400
They can have their own values. Right?

1515
01:39:12,400 --> 01:39:15,400
So if we are always calling it
with the name of the class,

1516
01:39:15,400 --> 01:39:18,840
then how do Java knows
which value we are trying to refer

1517
01:39:39,360 --> 01:39:42,720
in? Let me put the question in here

1518
01:39:55,800 --> 01:39:58,040
on like

1519
01:40:03,440 --> 01:40:16,280
ask was to create a new class.

1520
01:40:16,280 --> 01:40:18,040
Are you guys done typing this?

1521
01:40:18,040 --> 01:40:21,480
All of this in both the classes

1522
01:40:21,840 --> 01:40:23,880
system do not print alone.

1523
01:40:23,880 --> 01:40:25,280
See, it also works.

1524
01:40:25,280 --> 01:40:27,720
No, it should not work

1525
01:40:28,840 --> 01:40:30,200
without

1526
01:40:30,640 --> 01:40:33,760
the name of the class.

1527
01:40:33,760 --> 01:40:35,440
It should not work.

1528
01:40:35,440 --> 01:40:39,200
I think you are creating the

1529
01:40:39,200 --> 01:40:41,240
DC out inside this class

1530
01:40:41,240 --> 01:40:52,200
then that's why it is working.

1531
01:40:52,200 --> 01:41:08,440
If the name of the class is mandatory,
if you are outside of that.

1532
01:41:08,440 --> 01:41:10,080
Yes Alex,

1533
01:41:10,320 --> 01:41:11,040
you object.

1534
01:41:11,040 --> 01:41:11,960
Add a

1535
01:41:13,800 --> 01:41:15,600
Is it okay if we call with the object?

1536
01:41:15,600 --> 01:41:19,280
Yes, you can call with the object,
but it is not recommended approach.

1537
01:41:19,920 --> 01:41:22,400
It's not the best practice

1538
01:41:22,400 --> 01:41:25,200
everywhere where you will be seeing
the professional code,

1539
01:41:25,200 --> 01:41:39,080
you will see that they will be calling it
with the name of the class. So

1540
01:41:40,080 --> 01:41:43,800
yes, because you are writing the main
method inside the same class

1541
01:41:43,800 --> 01:41:48,000
and that's why you are able to call it
without the object

1542
01:41:48,000 --> 01:41:58,120
name.

1543
01:41:58,120 --> 01:42:19,600
Welcome.

1544
01:42:19,600 --> 01:42:21,800
Yeah, because I, I was on mute

1545
01:42:31,560 --> 01:42:32,160
on Mondays.

1546
01:42:32,160 --> 01:42:34,760
Can I close these files

1547
01:43:00,080 --> 01:43:03,720
and create a class called a student

1548
01:43:04,800 --> 01:43:06,560
did three variables.

1549
01:43:06,560 --> 01:43:08,520
Student name, student I.D.

1550
01:43:08,520 --> 01:43:14,760
and number of students.

1551
01:43:14,760 --> 01:43:17,160
So what should be the default student
name? Guys

1552
01:43:24,760 --> 01:43:25,560
instance.

1553
01:43:25,560 --> 01:43:25,800
Right.

1554
01:43:25,800 --> 01:43:28,200
And because every student
can have its own name

1555
01:43:32,320 --> 01:43:35,480
and then student I.D.

1556
01:43:40,720 --> 01:43:42,360
again, same.

1557
01:43:42,400 --> 01:43:44,680
The number of students, on

1558
01:43:44,680 --> 01:43:47,360
the other hand, like, for example, if we

1559
01:43:47,920 --> 01:43:51,600
if we will be using this student class
to represent

1560
01:43:51,600 --> 01:43:56,320
the represent
the number of students in that class.

1561
01:43:56,320 --> 01:44:00,160
So we should be creating adds static.

1562
01:44:00,280 --> 01:44:03,400
Okay. Otherwise we can have it as instance

1563
01:44:07,120 --> 01:44:10,080
the static

1564
01:44:10,760 --> 01:44:12,840
number of

1565
01:44:13,720 --> 01:44:14,720
swallows.

1566
01:44:14,720 --> 01:44:15,240
Okay.

1567
01:44:17,840 --> 01:44:19,320
And then

1568
01:44:21,480 --> 01:44:24,840
create three objects

1569
01:44:24,920 --> 01:44:27,200
of this order class.

1570
01:44:27,200 --> 01:44:30,160
Start a p value class student name and.

1571
01:44:30,160 --> 01:44:33,600
Increment
the number of students for each object.

1572
01:44:33,600 --> 01:44:38,400
So that way we keep track
of how many students have been registered.

1573
01:44:38,400 --> 01:44:40,080
Okay.

1574
01:44:40,080 --> 01:44:42,360
And then print out
the total number of students.

1575
01:44:42,480 --> 01:45:03,520
So the

1576
01:45:03,640 --> 01:45:05,480
there is no life

1577
01:45:06,720 --> 01:45:07,120
question.

1578
01:45:07,120 --> 01:45:08,520
There is no life

1579
01:45:23,200 --> 01:45:27,400
and test.

1580
01:45:27,400 --> 01:45:30,520
No, it's like Mr. Beans

1581
01:45:30,520 --> 01:45:32,760
or Charlie Chaplin.

1582
01:45:33,000 --> 01:45:35,720
He made it as a gift

1583
01:45:38,600 --> 01:45:40,920
or student test.

1584
01:45:41,400 --> 01:45:43,280
And three, the main

1585
01:45:43,280 --> 01:45:49,440
method.

1586
01:45:49,440 --> 01:45:52,680
Okay, so again,

1587
01:45:52,800 --> 01:45:57,080
we create the object down

1588
01:45:58,440 --> 01:46:00,120
all done before.

1589
01:46:00,120 --> 01:46:08,840
We've done all new student

1590
01:46:13,680 --> 01:46:16,720
and then we see

1591
01:46:19,400 --> 01:46:21,760
student or

1592
01:46:26,400 --> 01:46:27,480
name.

1593
01:46:28,680 --> 01:46:30,480
Okay.

1594
01:46:30,480 --> 01:46:36,800
I think the variable names will be better
if we only call them name and i.t

1595
01:46:55,480 --> 01:46:56,520
because they are already

1596
01:46:56,520 --> 01:47:12,040
inside the student class.

1597
01:47:12,040 --> 01:47:40,080
All right.

1598
01:47:40,080 --> 01:47:42,320
And I see

1599
01:47:43,280 --> 01:47:45,920
who none of

1600
01:47:46,400 --> 01:47:48,000
school in the classroom.

1601
01:47:48,000 --> 01:47:56,760
Okay, But I created one student,
so I increase the counter by one.

1602
01:47:56,760 --> 01:48:00,640
Then let me quickly copy
and paste this code

1603
01:48:00,760 --> 01:48:02,400
three times

1604
01:48:21,920 --> 01:48:27,320
as not as.

1605
01:48:27,320 --> 01:48:30,360
Can you tell me the line number

1606
01:48:31,680 --> 01:48:33,200
the inner

1607
01:49:05,880 --> 01:49:06,800
order base.

1608
01:49:06,800 --> 01:49:08,160
So what are we going for?

1609
01:49:08,160 --> 01:49:09,880
The number of students

1610
01:49:12,320 --> 01:49:17,760
after this?

1611
01:49:17,760 --> 01:49:23,400
It will be three right?

1612
01:49:23,400 --> 01:49:25,400
Because I have three student solve.

1613
01:49:25,400 --> 01:49:29,760
So this way you guys can keep
track of the number of objects

1614
01:49:29,760 --> 01:49:31,800
that you have created of your class.

1615
01:49:32,280 --> 01:49:36,120
So what and why this is important.

1616
01:49:36,200 --> 01:49:37,440
So have you guys noticed

1617
01:49:37,440 --> 01:49:40,760
that on Black Friday is

1618
01:49:40,760 --> 01:49:42,840
the e-commerce websites.

1619
01:49:42,840 --> 01:49:45,480
If there is too
much load, they get crashed

1620
01:49:47,040 --> 01:49:48,800
or some other websites

1621
01:49:48,800 --> 01:49:51,480
and during their peak times
they don't work properly.

1622
01:49:52,080 --> 01:49:56,160
So it's because of the resources, it's
because of the hardware

1623
01:49:56,160 --> 01:50:02,400
that is handling the number of customers
and we have two separate computers,

1624
01:50:03,720 --> 01:50:05,880
one that displays the information.

1625
01:50:05,880 --> 01:50:10,400
We call that the application server
and the other server

1626
01:50:10,400 --> 01:50:14,160
that is called the database server
where we store that information

1627
01:50:14,800 --> 01:50:17,880
and we create a connection
between these two servers,

1628
01:50:17,880 --> 01:50:20,040
application server
and the database server.

1629
01:50:20,040 --> 01:50:24,920
Now this creation of connection between

1630
01:50:27,240 --> 01:50:30,080
application server and database server,

1631
01:50:30,080 --> 01:50:34,440
you create object of that connection class
and that is a connection class.

1632
01:50:35,000 --> 01:50:38,880
And then you intertwine one customer,
if you have an entertainer,

1633
01:50:38,880 --> 01:50:42,520
another customer in parallel, you create
another object and another connection

1634
01:50:42,760 --> 01:50:45,760
and then you build
X. Now when the number of

1635
01:50:47,040 --> 01:50:48,800
customers are too much and

1636
01:50:48,800 --> 01:50:53,040
you try to create more connections,
but there are not enough resources,

1637
01:50:54,120 --> 01:50:56,760
then these applications and they crash,
they get this

1638
01:50:57,880 --> 01:51:01,440
error or exception behind the scenes.

1639
01:51:01,440 --> 01:51:04,160
So sometimes you guys want to add

1640
01:51:04,160 --> 01:51:06,600
because you guys will be dealing
with that database server.

1641
01:51:08,320 --> 01:51:09,800
So, so you guys,

1642
01:51:09,800 --> 01:51:12,520
we might want to keep track of how many

1643
01:51:13,560 --> 01:51:17,400
objects you have created
of a specific class to avoid that.

1644
01:51:18,720 --> 01:51:21,440
Yes. Or limit the traffic on the server.

1645
01:51:21,440 --> 01:51:24,200
So this is how you directly traffic.

1646
01:51:24,200 --> 01:51:26,000
But this is one of the ways to do that.

1647
01:51:26,000 --> 01:51:26,840
The traffic.

1648
01:51:26,840 --> 01:51:29,880
How many requests are being entertained

1649
01:51:29,880 --> 01:51:33,960
in parallel?

1650
01:51:33,960 --> 01:51:38,680
Are there any questions guides
from these classes,

1651
01:51:38,680 --> 01:51:40,200
these tasks

1652
01:51:49,280 --> 01:51:50,200
or alerts?

1653
01:51:50,200 --> 01:51:57,880
Are you guys done typing this code?

1654
01:51:57,880 --> 01:51:59,920
Let's discuss about this tactic.

1655
01:51:59,920 --> 01:52:02,440
Methods.

1656
01:52:02,440 --> 01:53:03,840
So I'm closing this.

1657
01:53:03,840 --> 01:53:18,440
Actually, let me.

1658
01:53:18,440 --> 01:53:21,240
We already have a student class.

1659
01:53:21,240 --> 01:53:28,760
We already have an employee class.

1660
01:53:28,760 --> 01:53:30,760
Oh, here we go next to this.

1661
01:53:31,200 --> 01:53:33,240
Let's call this a dog class.

1662
01:53:33,240 --> 01:53:36,160
Our favorite class. Still name

1663
01:53:45,080 --> 01:53:48,600
and in here

1664
01:53:48,600 --> 01:53:51,720
works in my name

1665
01:53:52,320 --> 01:53:55,400
and works

1666
01:53:58,360 --> 01:54:00,600
a lot of flags is equal to

1667
01:54:06,880 --> 01:54:10,120
or if only

1668
01:54:10,680 --> 01:54:22,680
name.

1669
01:54:22,680 --> 01:54:25,840
And that deep

1670
01:54:25,840 --> 01:54:27,400
broad

1671
01:54:31,720 --> 01:54:34,040
display next

1672
01:54:54,880 --> 01:54:58,840
and looks created to

1673
01:55:21,240 --> 01:55:23,640
okay that we know

1674
01:55:23,640 --> 01:55:27,200
once you guys have this code

1675
01:55:34,080 --> 01:56:11,400
in order for fact.

1676
01:56:11,400 --> 01:56:16,040
So guys
this is how we can create a static map

1677
01:56:16,080 --> 01:56:20,720
here okay
this is how we can create a static method.

1678
01:56:20,720 --> 01:56:21,720
And the

1679
01:56:23,280 --> 01:56:25,320
and the properties, they are

1680
01:56:25,320 --> 01:56:28,520
same as off as

1681
01:56:30,200 --> 01:56:33,360
as we have the properties
for this static variables.

1682
01:56:34,080 --> 01:56:38,040
So I can call this static method

1683
01:56:39,920 --> 01:56:42,480
by just writing the name of the class.

1684
01:56:43,440 --> 01:56:46,800
Okay. And

1685
01:56:48,240 --> 01:56:54,520
what output I will let.

1686
01:56:54,520 --> 01:56:57,840
But when it was not static,
it was giving out.

1687
01:56:57,960 --> 01:57:00,840
Yes, I will explain that as I would expand

1688
01:57:01,000 --> 01:57:04,560
type.

1689
01:57:04,560 --> 01:57:07,520
Okay. So we get for now, let's do this,

1690
01:57:08,600 --> 01:57:09,240
let's do this.

1691
01:57:09,240 --> 01:57:23,000
So we create an object.

1692
01:57:23,000 --> 01:57:26,960
We say dog one, not name

1693
01:57:28,720 --> 01:57:39,480
equal to Casper.

1694
01:57:39,480 --> 01:57:41,760
Then we create another object

1695
01:57:48,240 --> 01:57:49,440
of blue

1696
01:57:50,160 --> 01:57:51,280
bubbly.

1697
01:57:51,880 --> 01:57:53,960
Okay, I put in a corner

1698
01:57:54,000 --> 01:57:58,600
object.

1699
01:57:58,600 --> 01:58:06,480
Now give me a name for a dog.

1700
01:58:06,480 --> 01:58:13,640
One. Okay.

1701
01:58:14,760 --> 01:58:18,800
And then I call

1702
01:58:21,280 --> 01:58:26,880
dog one or oops, buddy.

1703
01:58:27,120 --> 01:58:59,920
How was your review class?

1704
01:58:59,920 --> 01:59:02,640
It was great and was super total

1705
01:59:03,400 --> 01:59:06,000
screwed.

1706
01:59:06,000 --> 01:59:10,320
All right, guys, so I have three objects.

1707
01:59:11,280 --> 01:59:15,520
I have access the field

1708
01:59:17,880 --> 01:59:20,120
and I have set some values.

1709
01:59:21,080 --> 01:59:23,880
Then I am calling an instance man Pair

1710
01:59:24,480 --> 01:59:27,440
these methods to the static.

1711
01:59:27,440 --> 01:59:32,080
They are called instance meters
and I am displaying the information.

1712
01:59:32,680 --> 01:59:33,400
Okay,

1713
01:59:34,200 --> 01:59:36,080
everything should be clear
about this, right?

1714
01:59:36,080 --> 01:59:39,600
So far the slopes for this dog one.

1715
01:59:39,600 --> 01:59:42,040
I will be getting this name for this dog
though.

1716
01:59:42,080 --> 01:59:43,160
I will be getting this

1717
01:59:44,760 --> 01:59:45,960
for the dog three.

1718
01:59:45,960 --> 01:59:48,800
I will be getting the last name. Right.

1719
01:59:48,800 --> 01:59:49,800
And the number two floors.

1720
01:59:49,800 --> 01:59:52,320
Now think about this, guys,

1721
01:59:52,320 --> 01:59:54,160
and tell me

1722
01:59:56,160 --> 01:59:57,960
and I call

1723
01:59:57,960 --> 02:00:00,480
can I print out

1724
02:00:01,160 --> 02:00:02,760
And I print out.

1725
02:00:02,760 --> 02:00:05,320
So this is a static method. Okay.

1726
02:00:05,400 --> 02:00:09,360
Static method or static keyword means

1727
02:00:09,600 --> 02:00:12,760
that thing belong to the class, right?

1728
02:00:13,200 --> 02:00:17,760
We can call that thing
even without creating an object.

1729
02:00:18,280 --> 02:00:23,960
And even if we create object instance
fears, they will be having big

1730
02:00:23,960 --> 02:00:28,720
and we are having different values
for each object.

1731
02:00:29,280 --> 02:00:37,080
So if I display this,
if I try to display this instance

1732
02:00:37,080 --> 02:00:41,560
field inside this static method,
I get an error.

1733
02:00:42,240 --> 02:00:45,880
Now think about this
and tell me why I'm getting this as well.

1734
02:00:45,880 --> 02:00:47,640
What is the reason

1735
02:00:54,280 --> 02:00:55,400
it is local? No

1736
02:01:00,240 --> 02:01:01,800
name is an instance variable.

1737
02:01:01,800 --> 02:01:02,960
Yes, but.

1738
02:01:02,960 --> 02:01:03,520
But why?

1739
02:01:03,520 --> 02:01:07,400
I cannot call an instance
variable inside this

1740
02:01:07,400 --> 02:01:18,280
static method.

1741
02:01:18,280 --> 02:01:20,960
The name can be edited.

1742
02:01:20,960 --> 02:01:22,480
They are a source.

1743
02:01:22,480 --> 02:01:26,240
We cannot use the instance
variable outside of method

1744
02:01:28,320 --> 02:01:31,560
because it is instance
an outside thing method

1745
02:01:31,800 --> 02:01:34,120
and we change any time

1746
02:01:37,920 --> 02:01:39,880
you need to change it.

1747
02:01:39,880 --> 02:01:41,760
The public

1748
02:01:41,800 --> 02:01:43,720
in Java looks confused.

1749
02:01:43,720 --> 02:01:46,440
Here we go. Perfect answer. I

1750
02:01:46,440 --> 02:01:48,040
Java gets confused.

1751
02:01:48,040 --> 02:01:50,920
So let me do this guys,

1752
02:01:51,280 --> 02:01:52,200
let me do this.

1753
02:01:52,200 --> 02:01:53,520
So this is the perfect answer.

1754
02:01:53,520 --> 02:01:56,880
Gallagher's confused
what I am doing in here

1755
02:01:58,800 --> 02:02:01,760
and here I am setting the value of name.

1756
02:02:02,280 --> 02:02:05,760
So this caspir in here
I am sending it to bubbly.

1757
02:02:05,760 --> 02:02:08,400
In here I am starting to open right?

1758
02:02:08,400 --> 02:02:11,160
And then using the class name

1759
02:02:11,760 --> 02:02:14,880
I am printing display legs. Now

1760
02:02:15,960 --> 02:02:18,360
Java is confused back where that is.

1761
02:02:18,360 --> 02:02:24,720
Should print this value or it should print
this value or should print this value

1762
02:02:24,960 --> 02:02:30,720
because a static static
they belong to the class, right?

1763
02:02:30,840 --> 02:02:34,200
Static variables or static matters.

1764
02:02:35,720 --> 02:02:37,760
They have common things.

1765
02:02:37,760 --> 02:02:39,840
The things which are shared. Right.

1766
02:02:40,200 --> 02:02:42,480
But if we try to print

1767
02:02:43,000 --> 02:02:49,080
something that can have different value
for each object

1768
02:02:50,160 --> 02:02:54,600
now Java is confused
that which name is should print.

1769
02:02:54,600 --> 02:02:58,200
Can you guys tell me
which name this method should print?

1770
02:02:58,200 --> 02:02:58,800
How, how, how.

1771
02:02:58,800 --> 02:03:07,480
How can this method decide
which value should print?

1772
02:03:07,480 --> 02:03:09,160
It's confused, right?

1773
02:03:09,160 --> 02:03:13,160
Because I can have
I can have 1 million objects

1774
02:03:13,800 --> 02:03:17,640
and each object can can have its own name.

1775
02:03:17,920 --> 02:03:18,840
Right?

1776
02:03:19,200 --> 02:03:21,360
This method is confused, so

1777
02:03:21,520 --> 02:03:24,320
it is not giving an ETA
on the static value.

1778
02:03:24,720 --> 02:03:25,920
While why does not give

1779
02:03:26,880 --> 02:03:29,760
error on the static value lies

1780
02:03:36,640 --> 02:03:38,760
because it knows

1781
02:03:38,760 --> 02:03:42,280
that it will always be having one value.

1782
02:03:42,360 --> 02:03:43,440
Right.

1783
02:03:44,120 --> 02:03:45,880
These static variables,

1784
02:03:45,880 --> 02:03:50,840
they always always
they will be having one value at a time.

1785
02:03:50,840 --> 02:03:51,720
Right?

1786
02:03:51,720 --> 02:03:55,000
So it knows that
it always have to print out

1787
02:03:56,040 --> 02:03:56,880
this value.

1788
02:03:56,880 --> 02:03:57,720
Right?

1789
02:03:59,000 --> 02:04:01,560
Because a static variable is

1790
02:04:01,960 --> 02:04:07,080
only only has one copy per class.

1791
02:04:07,880 --> 02:04:12,240
Well static method knows that
which value it has to print.

1792
02:04:12,720 --> 02:04:16,360
But for the instance fields,

1793
02:04:16,360 --> 02:04:19,720
each object can have its own value.

1794
02:04:19,720 --> 02:04:20,160
Right.

1795
02:04:20,160 --> 02:04:23,880
So starting my is confused
static method is saying

1796
02:04:24,320 --> 02:04:27,560
I don't know about the object information.

1797
02:04:27,600 --> 02:04:28,480
Right?

1798
02:04:28,560 --> 02:04:31,560
You are calling me
using the name of this class.

1799
02:04:32,120 --> 02:04:34,200
This class can have thousand objects.

1800
02:04:34,400 --> 02:04:36,440
Each object can have its own value.

1801
02:04:36,480 --> 02:04:39,320
I don't know which value I should print.

1802
02:04:40,560 --> 02:04:41,880
How come it's not getting

1803
02:04:41,880 --> 02:04:44,920
confused when we use the name
in the display method?

1804
02:04:44,920 --> 02:04:49,600
So display
method is an instance method, an email.

1805
02:04:50,240 --> 02:04:52,800
We cannot call this plane name

1806
02:04:52,800 --> 02:04:56,320
method using the name of the class,

1807
02:04:56,320 --> 02:05:00,720
we must create an object first
and then only.

1808
02:05:00,720 --> 02:05:02,840
We can call this display method.

1809
02:05:02,960 --> 02:05:05,240
If we try.

1810
02:05:05,240 --> 02:05:08,440
If we try to call an instance method

1811
02:05:14,240 --> 02:05:15,840
by only specifying

1812
02:05:15,840 --> 02:05:20,600
your class name,
we will be getting an error.

1813
02:05:20,600 --> 02:05:22,680
So that's how it is. Not confused.

1814
02:05:22,680 --> 02:05:28,200
That's how it knows that
if this method is being called on dog

1815
02:05:28,240 --> 02:05:31,760
to object,
it knows that it has to print this value.

1816
02:05:32,800 --> 02:05:36,400
If the display name is called an object,
learn this dog.

1817
02:05:36,400 --> 02:05:39,880
Once it knows that
it has to print this value,

1818
02:05:39,880 --> 02:05:42,720
but for the display lacks

1819
02:05:43,080 --> 02:05:45,760
right display legs.

1820
02:05:45,960 --> 02:05:47,960
Sorry, this display legs.

1821
02:05:47,960 --> 02:05:51,240
If I put any instance field in here

1822
02:05:52,400 --> 02:05:53,920
now, we don't have

1823
02:05:53,920 --> 02:05:57,240
any information about the object.

1824
02:05:57,760 --> 02:05:58,520
Right.

1825
02:05:58,680 --> 02:06:03,080
I am simply calling the method
on the class name.

1826
02:06:03,080 --> 02:06:06,840
There is no information about the object.

1827
02:06:07,120 --> 02:06:12,480
If there is no information about the
how do I know which value to display?

1828
02:06:12,480 --> 02:06:13,440
Right.

1829
02:06:13,560 --> 02:06:18,080
So there slide on inside
this static matters.

1830
02:06:18,400 --> 02:06:20,920
We can only only call

1831
02:06:21,680 --> 02:06:25,080
static value static variables.

1832
02:06:26,000 --> 02:06:28,520
What will happen if you add spec

1833
02:06:29,080 --> 02:06:33,120
static in front of instance,
think string name in here

1834
02:06:34,080 --> 02:06:36,960
and then we will not be getting any
any issue.

1835
02:06:37,760 --> 02:06:40,320
Okay.
Then we will not be getting any error.

1836
02:06:40,520 --> 02:06:44,480
And the last value
that we are storing in here,

1837
02:06:44,840 --> 02:06:48,200
it will be printed on the console.

1838
02:06:48,200 --> 02:06:50,880
Yes, it will be same name for every dog

1839
02:06:54,880 --> 02:06:55,440
all our days.

1840
02:06:55,440 --> 02:06:58,800
Now think about this and tell me
can I call

1841
02:06:59,040 --> 02:07:02,320
static values inside instance

1842
02:07:26,320 --> 02:07:27,880
so I can call, right?

1843
02:07:27,880 --> 02:07:30,640
I can call No issues.

1844
02:07:30,640 --> 02:07:32,960
Well, why? There is noise. You guys.

1845
02:07:32,960 --> 02:07:37,600
Why there is no issue
when I am calling a static variable,

1846
02:07:37,600 --> 02:07:41,520
when I'm using a static variable
inside an instance method, why

1847
02:07:41,520 --> 02:07:50,600
there is no issue.

1848
02:07:50,600 --> 02:07:52,960
Java is not confused, right?

1849
02:07:52,960 --> 02:07:56,400
Because there is only one value

1850
02:07:57,200 --> 02:08:01,440
that this number of legs
can have at a time.

1851
02:08:01,640 --> 02:08:02,280
Right.

1852
02:08:02,280 --> 02:08:09,560
And don't know
that this value should print.

1853
02:08:09,560 --> 02:08:12,920
So d this is how the static

1854
02:08:12,920 --> 02:08:16,560
methods and static variables
work with each.

1855
02:08:16,560 --> 02:08:17,160
Okay.

1856
02:08:18,000 --> 02:08:21,840
And so we can only only call static.

1857
02:08:22,560 --> 02:08:24,960
We can only use we can only

1858
02:08:26,840 --> 02:08:32,280
access the static variables inside.

1859
02:08:33,600 --> 02:08:35,760
So we can access this static variable

1860
02:08:35,760 --> 02:08:39,440
inside static methods
and a non static matter.

1861
02:08:39,920 --> 02:08:45,840
But we cannot do we cannot access instance

1862
02:08:46,440 --> 02:08:49,880
mesh feels inside

1863
02:08:50,720 --> 02:08:54,880
static matters because each instance

1864
02:08:56,080 --> 02:08:59,160
can have its own value like its own.

1865
02:08:59,160 --> 02:09:02,280
Well, it is not something universal,
nor something

1866
02:09:02,280 --> 02:09:05,320
that is shared across all the objects.

1867
02:09:05,320 --> 02:09:08,200
So Java is confused and Java gets confused

1868
02:09:09,240 --> 02:09:11,400
which value it should print.

1869
02:09:11,400 --> 02:09:14,520
That's why it is not allowed

1870
02:09:16,040 --> 02:09:21,840
all life.

1871
02:09:21,840 --> 02:09:23,840
It's just like with blood types.

1872
02:09:23,840 --> 02:09:26,960
All can go to every block,
but those who have

1873
02:09:26,960 --> 02:09:30,120
or can only take or

1874
02:09:30,120 --> 02:09:32,880
or all negative or positive

1875
02:09:40,080 --> 02:09:46,160
or positive.

1876
02:09:46,160 --> 02:09:46,720
Okay.

1877
02:09:48,200 --> 02:09:50,160
Is it the guys why we cannot

1878
02:09:50,160 --> 02:09:53,520
call, in instance

1879
02:09:53,520 --> 02:09:54,880
clears

1880
02:09:55,320 --> 02:09:58,640
what's already why
we cannot access instance fields

1881
02:09:59,280 --> 02:10:07,720
inside a static method.

1882
02:10:07,720 --> 02:10:10,840
And same is the case with the
with the methods.

1883
02:10:10,840 --> 02:10:14,320
You guys so

1884
02:10:14,400 --> 02:10:17,120
I can let's say

1885
02:10:17,560 --> 02:10:21,240
if I have one more

1886
02:10:23,080 --> 02:10:30,440
variable,

1887
02:10:30,440 --> 02:10:32,520
we've got a

1888
02:10:34,600 --> 02:10:43,560
I and

1889
02:10:45,480 --> 02:10:47,120
I said they are terrible.

1890
02:10:47,120 --> 02:10:52,200
And only once she has learned
Java again, maybe that will help you

1891
02:10:53,960 --> 02:10:54,360
if she is

1892
02:10:54,360 --> 02:11:17,760
good in Java.

1893
02:11:17,760 --> 02:11:19,920
All right. So that's what I can do.

1894
02:11:19,920 --> 02:11:24,640
I can call a method inside another method.

1895
02:11:24,640 --> 02:11:24,960
Okay.

1896
02:11:24,960 --> 02:11:28,240
So for example, I can see display.

1897
02:11:29,600 --> 02:11:33,000
I can see inside a display color or

1898
02:11:35,880 --> 02:11:37,320
display

1899
02:11:37,800 --> 02:11:38,480
name.

1900
02:11:39,080 --> 02:11:41,160
But think about this, guys.

1901
02:11:41,160 --> 02:11:43,840
Can I call this method inside the static

1902
02:11:43,840 --> 02:11:53,080
method as well?

1903
02:11:53,080 --> 02:11:54,960
No. Right.

1904
02:11:54,960 --> 02:11:56,920
The reason is again same.

1905
02:11:56,920 --> 02:12:02,120
I can be using it inside an instance.

1906
02:12:02,120 --> 02:12:05,600
Fear Inside a method. Right.

1907
02:12:05,840 --> 02:12:07,920
And inside an instance method.

1908
02:12:07,920 --> 02:12:10,320
I again, I can use an instance field.

1909
02:12:10,320 --> 02:12:15,120
Now if instance fields are directly
not allowed

1910
02:12:15,960 --> 02:12:18,320
to be used inside static method,

1911
02:12:18,320 --> 02:12:20,880
the methods should also be not allowed.

1912
02:12:20,880 --> 02:12:21,240
Right?

1913
02:12:21,240 --> 02:12:24,720
Because the instance method
can be having these instance fields.

1914
02:12:25,120 --> 02:12:25,880
Right.

1915
02:12:25,880 --> 02:12:31,200
So is is same the same same thing,
but in a different way.

1916
02:12:31,200 --> 02:12:32,920
Right.

1917
02:12:32,920 --> 02:12:36,000
If I am allowed to use this

1918
02:12:36,000 --> 02:12:38,880
display name, it can again be problematic

1919
02:12:39,200 --> 02:12:43,720
because the display name
contains this instance.

1920
02:12:43,720 --> 02:12:45,400
Field Right.

1921
02:12:45,400 --> 02:12:49,880
So the instance methods, they are also not

1922
02:12:49,880 --> 02:12:53,680
allowed to be called inside

1923
02:12:55,160 --> 02:12:57,120
static methods.

1924
02:12:57,120 --> 02:12:59,880
Okay. And I do the reverse.

1925
02:12:59,880 --> 02:13:00,560
Nice.

1926
02:13:00,880 --> 02:13:05,200
Can I call a static method
inside the instance

1927
02:13:05,200 --> 02:13:10,920
method? Yes.

1928
02:13:11,320 --> 02:13:15,160
So against the same is the case with the
as the case with variable.

1929
02:13:15,840 --> 02:13:17,840
I can call this display lens

1930
02:13:21,080 --> 02:13:22,040
in here.

1931
02:13:22,240 --> 02:13:22,840
Right.

1932
02:13:22,840 --> 02:13:25,680
No issues because I always know that

1933
02:13:26,240 --> 02:13:31,600
it will only be allowing
to have static variables.

1934
02:13:31,600 --> 02:13:33,320
Right. And static variables.

1935
02:13:33,320 --> 02:13:39,000
Will they always be having same value
for all the objects?

1936
02:13:39,000 --> 02:13:41,560
Okay, so no issue in here.

1937
02:13:42,120 --> 02:13:42,480
Okay.

1938
02:13:42,480 --> 02:13:46,240
So these were the point.

1939
02:13:46,240 --> 02:13:49,680
These were the last two parts
that were written here.

1940
02:13:49,680 --> 02:13:54,680
Static
methods can access all static variables

1941
02:13:56,080 --> 02:14:00,160
and other static methods.

1942
02:14:00,160 --> 02:14:03,720
Static methods cannot access instance

1943
02:14:04,720 --> 02:14:08,640
non-strategic variables
and a method static

1944
02:14:09,040 --> 02:14:12,320
may need some object preference
from do that.

1945
02:14:12,320 --> 02:14:15,480
Okay, so instance fields or instance

1946
02:14:15,480 --> 02:14:19,320
methods, they always always need an object
preference.

1947
02:14:19,320 --> 02:14:19,960
Okay.

1948
02:14:20,280 --> 02:14:23,640
But these that big fields and static
methods

1949
02:14:23,960 --> 02:14:27,360
big can be called by the name of the class

1950
02:14:28,760 --> 02:14:31,560
and they will always be having same value

1951
02:14:32,120 --> 02:14:36,120
for all the instances.

1952
02:14:36,120 --> 02:14:38,880
What is object in our case?

1953
02:14:38,880 --> 02:14:41,480
So in our case,

1954
02:14:42,560 --> 02:14:44,480
this dog one is an object.

1955
02:14:44,480 --> 02:14:48,720
Start with an object
this dog treats an object.

1956
02:14:52,680 --> 02:14:53,040
Are there

1957
02:14:53,040 --> 02:15:03,760
other questions, guys?

1958
02:15:03,760 --> 02:15:06,080
And let me show you what kind of

1959
02:15:08,880 --> 02:15:09,400
energy

1960
02:15:09,400 --> 02:15:12,560
we'll be getting
if you're trying to build that

1961
02:15:12,560 --> 02:15:15,120
cannot make a static reference

1962
02:15:15,120 --> 02:15:18,120
to non static field

1963
02:15:18,760 --> 02:15:22,560
or light.

1964
02:15:22,560 --> 02:15:25,440
So now let's discuss about.

1965
02:15:26,040 --> 02:15:29,240
Now tell me guys,
are there any questions related to

1966
02:15:29,960 --> 02:15:32,960
types of variable? Was

1967
02:15:36,840 --> 02:15:38,080
what are these

1968
02:15:38,080 --> 02:15:45,000
when you should use them?

1969
02:15:45,000 --> 02:15:49,320
But you can insert dog
one dog name their diameter.

1970
02:15:49,320 --> 02:15:55,680
You mean inside this static? Yes.

1971
02:15:55,680 --> 02:16:06,680
If you have an object,
you can do that. Yes.

1972
02:16:06,680 --> 02:16:09,800
So more another you.

1973
02:16:09,840 --> 02:16:13,160
Your number of legs
variable is not static.

1974
02:16:14,080 --> 02:16:25,760
That's why you are getting better.

1975
02:16:25,760 --> 02:16:26,280
All right, guys.

1976
02:16:26,280 --> 02:16:30,360
So you guys have watched
the videos on access modifiers.

1977
02:16:30,560 --> 02:16:39,240
Can you guys tell me,
what are these access modifiers?

1978
02:16:39,240 --> 02:16:51,960
What are the access modifiers in Java?

1979
02:16:51,960 --> 02:16:53,280
No clue. Sorry.

1980
02:16:53,280 --> 02:16:58,960
It's fine.

1981
02:16:58,960 --> 02:17:02,000
Default. Public. Private. Protected. Yes.

1982
02:17:02,000 --> 02:17:08,280
These are the types of access modifiers,
but what are access modifiers

1983
02:17:09,160 --> 02:17:11,720
and control Access to that

1984
02:17:12,120 --> 02:17:15,840
perfect answer
Not only data but the methods

1985
02:17:17,200 --> 02:17:18,080
as well.

1986
02:17:18,080 --> 02:17:19,160
It is specific.

1987
02:17:19,160 --> 02:17:21,640
You can access different class or package

1988
02:17:22,800 --> 02:17:27,000
control or die.

1989
02:17:27,000 --> 02:17:53,280
They are across the package.

1990
02:17:53,280 --> 02:17:55,480
They put restriction to them

1991
02:17:56,360 --> 02:17:58,760
across the class or matter.

1992
02:17:58,760 --> 02:18:01,080
So first let me show you

1993
02:18:01,080 --> 02:18:04,160
what are access modifiers

1994
02:18:05,840 --> 02:18:54,680
and then we will discuss the APD.

1995
02:18:54,680 --> 02:18:56,880
So access modifiers.

1996
02:18:58,040 --> 02:19:02,200
So you guys have already noticed that

1997
02:19:04,960 --> 02:19:07,320
you can use the code

1998
02:19:07,320 --> 02:19:10,280
that is written
by other developers, right?

1999
02:19:10,440 --> 02:19:13,720
So for example, you guys have used

2000
02:19:14,040 --> 02:19:16,920
so many methods
from this string class, right?

2001
02:19:17,320 --> 02:19:19,720
So many useful methods.

2002
02:19:19,720 --> 02:19:21,640
You guys have used the scanner class

2003
02:19:21,640 --> 02:19:24,200
to read the data from the keyboard, right?

2004
02:19:25,640 --> 02:19:28,880
You guys can use the arrays
class to print.

2005
02:19:28,880 --> 02:19:32,480
The add is on the console
without the loop.

2006
02:19:34,200 --> 02:19:38,680
Now, these methods
that you guys are using,

2007
02:19:38,680 --> 02:19:41,760
this field that you are using,

2008
02:19:41,760 --> 02:19:44,280
if you want to have more control

2009
02:19:45,120 --> 02:19:48,040
over those fields and methods,

2010
02:19:49,080 --> 02:19:52,520
you can restrict the

2011
02:19:52,520 --> 02:19:54,520
who will be using your code.

2012
02:19:54,520 --> 02:19:57,480
So let's say, for example,
you are writing a method

2013
02:19:58,160 --> 02:20:00,600
or you are declaring a field

2014
02:20:02,280 --> 02:20:04,600
inside your class

2015
02:20:04,600 --> 02:20:08,440
and you don't want others to use it.

2016
02:20:08,480 --> 02:20:11,000
Okay, then what you can do?

2017
02:20:11,000 --> 02:20:15,920
You can use access modifiers
to restrict others.

2018
02:20:15,920 --> 02:20:16,560
Okay.

2019
02:20:16,760 --> 02:20:21,040
Or maybe you want them to be accessible

2020
02:20:22,280 --> 02:20:24,720
only inside

2021
02:20:25,760 --> 02:20:27,720
that package

2022
02:20:28,160 --> 02:20:30,480
where your class resides.

2023
02:20:30,480 --> 02:20:31,280
Okay.

2024
02:20:31,520 --> 02:20:35,520
Then you have another access modifier,
special access

2025
02:20:35,520 --> 02:20:39,360
modifier keyword
that will allow you to do that.

2026
02:20:39,360 --> 02:20:44,400
And then you have the third type
in which everyone can access your fields

2027
02:20:45,560 --> 02:20:48,600
and your methods.

2028
02:20:48,600 --> 02:20:50,520
So let's discuss about them.

2029
02:20:50,520 --> 02:20:58,440
So the fourth type

2030
02:20:59,480 --> 02:21:01,920
is the private.

2031
02:21:02,000 --> 02:21:05,760
So if write this private keyword

2032
02:21:07,080 --> 02:21:09,680
with any variable or any

2033
02:21:09,680 --> 02:21:19,640
method, then this sphere

2034
02:21:22,120 --> 02:21:24,520
will only be accessible

2035
02:21:26,200 --> 02:21:28,600
to the methods

2036
02:21:29,400 --> 02:21:34,200
of this class.

2037
02:21:34,200 --> 02:21:43,440
So I can write the method,

2038
02:21:43,440 --> 02:21:47,160
I can print it out, okay,
I can print it out.

2039
02:21:47,760 --> 02:21:50,560
And then the second type

2040
02:21:52,080 --> 02:21:54,880
is not having any type.

2041
02:21:55,600 --> 02:21:59,400
So if we don't want to specify any keyword

2042
02:22:00,360 --> 02:22:02,880
with any variable or any method

2043
02:22:04,400 --> 02:22:07,240
of that

2044
02:22:07,240 --> 02:22:10,840
variable, our method is only available

2045
02:22:11,840 --> 02:22:17,680
to the classes
that are inside this package.

2046
02:22:19,080 --> 02:22:20,640
And then

2047
02:22:22,600 --> 02:22:25,240
we have the card type,

2048
02:22:25,240 --> 02:22:27,120
which is public.

2049
02:22:27,120 --> 02:22:31,600
Public means this is salary variable.

2050
02:22:31,600 --> 02:22:35,400
It can be accessed inside this class
package

2051
02:22:35,400 --> 02:22:43,640
15 inside this package, 14.

2052
02:22:43,640 --> 02:22:48,040
Basically, it means accessible everywhere
inside this project,

2053
02:22:48,600 --> 02:22:51,160
open for all.

2054
02:22:51,160 --> 02:22:54,720
And they can also be used

2055
02:22:54,720 --> 02:23:00,560
inside.

2056
02:23:00,560 --> 02:23:01,320
All right.

2057
02:23:01,320 --> 02:23:46,200
Let me let me clear the display.

2058
02:23:46,200 --> 02:23:49,920
So if we don't specify any keyword
so first

2059
02:23:49,960 --> 02:23:52,840
let me show then then I will explain.

2060
02:23:52,840 --> 02:23:54,120
Then I will discuss the table.

2061
02:23:56,800 --> 02:23:59,480
So meanwhile, you guys can type with me.

2062
02:23:59,520 --> 02:24:05,720
Maybe.

2063
02:24:05,720 --> 02:24:06,480
Okay,

2064
02:24:07,520 --> 02:24:11,880
so what I can do,

2065
02:24:11,880 --> 02:25:56,240
I can have a mean method in here.

2066
02:25:56,240 --> 02:26:01,680
So this private means guys,

2067
02:26:02,600 --> 02:26:05,560
I can access

2068
02:26:05,560 --> 02:26:08,520
this name field only.

2069
02:26:08,520 --> 02:26:10,960
Only inside this class.

2070
02:26:11,560 --> 02:26:12,000
Okay?

2071
02:26:12,120 --> 02:26:16,520
Only and only inside this class,
I can create an object

2072
02:26:25,440 --> 02:26:27,200
and I can assign the values.

2073
02:26:27,200 --> 02:26:31,320
But if I try to do this

2074
02:26:32,600 --> 02:26:38,520
in a separate in a different class,

2075
02:26:38,520 --> 02:26:43,080
I will not be able to do that
for the name period.

2076
02:26:43,640 --> 02:26:45,400
So this is private.

2077
02:26:45,400 --> 02:26:51,480
So this private keyword, what it is doing,
it is making sure that this field name

2078
02:26:52,120 --> 02:26:55,080
is only and only accessible

2079
02:26:55,080 --> 02:26:58,120
inside this class.

2080
02:26:58,120 --> 02:27:00,080
Once you move

2081
02:27:00,240 --> 02:27:04,200
outside of this class to any other class,

2082
02:27:05,040 --> 02:27:11,520
this name field will not be able you guys
will not be able to access this, okay?

2083
02:27:11,600 --> 02:27:16,760
This is what this private means because
we have written this private keyword.

2084
02:27:16,760 --> 02:27:20,000
Now, we cannot access this name

2085
02:27:20,400 --> 02:27:27,000
because this is a different class
and this is in different.

2086
02:27:27,000 --> 02:27:27,720
Okay.

2087
02:27:27,920 --> 02:27:30,840
But I can still access the edge

2088
02:27:31,200 --> 02:27:36,960
because it has the default access modifier
by default access modifier we mean that

2089
02:27:36,960 --> 02:27:41,920
if we don't specify any modifier
and then the public one.

2090
02:27:41,920 --> 02:27:46,040
So the default one and the public one,
they are accessible

2091
02:27:46,560 --> 02:27:51,080
this same class, they are accessible
outside of that class. So

2092
02:27:53,120 --> 02:27:55,600
now not

2093
02:27:55,880 --> 02:28:00,480
able to change the private
variable are not able to even access. Yes.

2094
02:28:00,720 --> 02:28:05,360
So only
and only you can change and access it

2095
02:28:05,360 --> 02:28:08,560
if you are inside of these parentheses

2096
02:28:08,560 --> 02:28:11,560
starting from here to here,

2097
02:28:11,560 --> 02:28:12,760
not outside.

2098
02:28:12,760 --> 02:28:17,040
Now, right now, guys,
I am inside this package.

2099
02:28:17,040 --> 02:28:18,480
Class 16.

2100
02:28:18,480 --> 02:28:21,480
Okay, let me go to the class

2101
02:28:22,960 --> 02:28:24,480
and let me go to the package.

2102
02:28:24,480 --> 02:28:26,120
Class 15

2103
02:28:26,920 --> 02:28:30,080
and let me try to create this

2104
02:28:30,080 --> 02:28:34,760
class.

2105
02:28:34,760 --> 02:28:37,280
Line 22 would need to write

2106
02:28:38,920 --> 02:28:39,600
semicolon.

2107
02:28:39,600 --> 02:28:41,240
Thank you.

2108
02:28:41,240 --> 02:28:44,000
So, new class

2109
02:28:47,000 --> 02:28:48,840
access modifier test

2110
02:28:48,840 --> 02:29:04,760
mean matter. Yes.

2111
02:29:06,360 --> 02:29:09,680
Actually you guys will be needing this so

2112
02:29:12,400 --> 02:29:14,280
let me copy this code

2113
02:29:14,280 --> 02:29:16,600
and let me paste it in here.

2114
02:29:18,000 --> 02:29:25,000
Okay.

2115
02:29:25,000 --> 02:29:29,400
So in here, guys,
I was in this same package.

2116
02:29:29,440 --> 02:29:33,400
Okay, so the class
in which I have defined the variables

2117
02:29:33,640 --> 02:29:36,000
this access modifier demo one

2118
02:29:36,480 --> 02:29:39,840
this class and then and the class in which

2119
02:29:39,840 --> 02:29:45,000
I am trying to access
those fields were in the same package.

2120
02:29:45,000 --> 02:29:47,800
So I was able to access this edge.

2121
02:29:47,920 --> 02:29:52,440
But what, what happens when I move
to a different package in here?

2122
02:29:52,440 --> 02:29:55,040
I am an inside a different package now.

2123
02:29:55,440 --> 02:29:58,320
The edge is also not accessible.

2124
02:29:58,960 --> 02:30:02,000
The edge is also not accessible, right?

2125
02:30:02,080 --> 02:30:04,360
It is not accessible now.

2126
02:30:04,360 --> 02:30:07,280
Default is also not accessible. Now.

2127
02:30:07,280 --> 02:30:12,400
We only have the salary variable
which is accessible in here. So

2128
02:30:13,880 --> 02:30:17,800
how the access is controlled, if we have a

2129
02:30:18,480 --> 02:30:22,920
if we are using the private keyword, yes,

2130
02:30:22,920 --> 02:30:27,200
if we are using the private keyword,
we are going to access that filter method.

2131
02:30:27,200 --> 02:30:28,480
Guys only.

2132
02:30:28,480 --> 02:30:31,440
Where can I access that field

2133
02:30:32,040 --> 02:30:34,760
inside that class only.

2134
02:30:35,160 --> 02:30:36,000
Okay.

2135
02:30:36,120 --> 02:30:38,840
If the access is default,

2136
02:30:38,880 --> 02:30:41,680
which means I am not specifying
any keyword,

2137
02:30:42,720 --> 02:30:45,560
where I can access that field,

2138
02:30:45,560 --> 02:30:49,320
I can access that in see inside
that class,

2139
02:30:49,720 --> 02:30:52,800
I can access that any other class

2140
02:30:53,520 --> 02:30:56,160
inside same package.

2141
02:30:56,680 --> 02:30:59,160
Okay, inside same package.

2142
02:30:59,280 --> 02:31:01,280
But the package should not be different.

2143
02:31:01,880 --> 02:31:07,040
And if we have a public field,
it is accessible

2144
02:31:07,040 --> 02:31:12,320
inside that class, inside the same package
and outside of that package.

2145
02:31:12,320 --> 02:31:15,480
Okay, outside of that package.

2146
02:31:15,800 --> 02:31:17,720
And same

2147
02:31:18,000 --> 02:31:22,520
is applicable for matters,
but the same is applicable for method.

2148
02:31:22,680 --> 02:31:26,160
It's pretty much same
as we have things in real life.

2149
02:31:26,560 --> 02:31:31,560
Again, private means only belongs
to that specific person.

2150
02:31:32,160 --> 02:31:34,880
Public means accessible to everyone.

2151
02:31:35,040 --> 02:31:35,600
Okay.

2152
02:31:35,600 --> 02:31:38,640
And then we have this default one,
which is kind of intermediate

2153
02:31:39,480 --> 02:31:41,920
outside of project pool. Okay?

2154
02:31:41,920 --> 02:31:46,000
So if you have to access it
outside of Project Muhammad, No,

2155
02:31:46,200 --> 02:31:50,560
the public is not accessible,
then you have to make your file

2156
02:31:50,560 --> 02:31:51,800
from your source code

2157
02:31:51,800 --> 02:31:55,640
and you have to import those data files
and then you can access it.

2158
02:31:55,640 --> 02:31:58,360
But then there's
something radical outside.

2159
02:31:58,440 --> 02:32:00,160
Also the scope of this class

2160
02:32:01,680 --> 02:32:02,280
already.

2161
02:32:02,280 --> 02:32:04,200
So that was today's class.

2162
02:32:04,200 --> 02:32:11,760
I hope you guys have enjoyed this
and I will see you tomorrow.

2163
02:32:11,760 --> 02:32:23,000
What is the best practice like?

2164
02:32:23,000 --> 02:32:25,040
Are not big classes easy?

2165
02:32:25,040 --> 02:32:29,040
I mean easier than the first part?

2166
02:32:29,040 --> 02:32:29,520
Literally.

2167
02:32:29,520 --> 02:32:32,240
This is this is literally
this is the today's class.

2168
02:32:32,240 --> 02:32:35,520
Believe me, it

2169
02:32:36,920 --> 02:32:43,680
is. Okay.

2170
02:32:43,760 --> 02:32:46,400
Now we will discuss
about the constructors.

2171
02:32:46,640 --> 02:32:47,360
Okay.

2172
02:32:47,360 --> 02:32:51,040
So it is really this
this is this is all about today's

2173
02:32:51,040 --> 02:32:54,360
class and that.

2174
02:32:54,360 --> 02:32:57,840
So let let's go through the theory
and then we again

2175
02:32:57,840 --> 02:33:02,200
we will do another example.

2176
02:33:02,200 --> 02:33:05,480
Let everyone have a test

2177
02:33:05,480 --> 02:33:08,800
20 of time
to catch up on wrappers and liquids.

2178
02:33:08,800 --> 02:33:09,720
Today

2179
02:33:13,640 --> 02:33:17,760
after ten lines of coding.

2180
02:33:17,760 --> 02:33:18,560
All right.

2181
02:33:18,560 --> 02:33:27,480
So I was getting let's
get back to the class.

2182
02:33:27,480 --> 02:33:28,120
Okay.

2183
02:33:28,160 --> 02:33:31,960
So access modifiers.

2184
02:33:31,960 --> 02:33:34,560
Yes, we will discuss
the constructors as well.

2185
02:33:36,080 --> 02:33:39,760
Back to the reality.

2186
02:33:39,760 --> 02:33:42,880
So and there are two types

2187
02:33:42,880 --> 02:33:46,000
of modifiers in Java.

2188
02:33:47,800 --> 02:33:51,200
One of them,
they are called access modifiers.

2189
02:33:51,480 --> 02:33:54,680
They they control the access.

2190
02:33:54,880 --> 02:33:56,760
So we have public

2191
02:33:56,760 --> 02:33:59,440
protected by the this protected well.

2192
02:34:00,000 --> 02:34:02,800
We will discuss it
when we start the inheritance.

2193
02:34:02,800 --> 02:34:05,600
We will be starting the inheritance
in nest in next week,

2194
02:34:06,160 --> 02:34:07,920
maybe on Tuesday or Wednesday.

2195
02:34:07,920 --> 02:34:10,600
So then it will make sense.

2196
02:34:10,600 --> 02:34:14,000
Then we have the default one
and then we have the private one

2197
02:34:14,920 --> 02:34:17,640
and then there are

2198
02:34:17,640 --> 02:34:19,800
non-actors modifiers

2199
02:34:19,800 --> 02:34:23,960
out of which you guys
already know about this static one.

2200
02:34:23,960 --> 02:34:29,160
So okay, this final abstract and
synchronize they are for future classes.

2201
02:34:29,160 --> 02:34:38,160
We will discuss about these in the future
classes.

2202
02:34:38,160 --> 02:34:40,840
Access modifiers in Java help

2203
02:34:42,240 --> 02:34:43,880
to restrict

2204
02:34:43,880 --> 02:34:46,680
the scope of a class

2205
02:34:46,760 --> 02:34:51,240
so we can write these access modifiers
like private,

2206
02:34:51,240 --> 02:34:54,800
public protected and default with classes.

2207
02:34:54,800 --> 02:34:56,880
We can write them with methods.

2208
02:34:57,080 --> 02:34:59,240
We can write them with the fields.

2209
02:34:59,240 --> 02:35:02,160
Okay.

2210
02:35:02,160 --> 02:35:07,080
Restrict the scope of a class constructor
to that we will learn about it.

2211
02:35:07,800 --> 02:35:08,800
Variable

2212
02:35:09,840 --> 02:35:13,080
method or any other that I remember.

2213
02:35:13,080 --> 02:35:17,040
Okay, so there are more types of things
that you guys can have

2214
02:35:17,040 --> 02:35:20,880
inside the class.

2215
02:35:20,880 --> 02:35:25,280
These are used to control access

2216
02:35:26,880 --> 02:35:29,880
to that members or matters.

2217
02:35:29,880 --> 02:35:31,960
Now these that are members in here.

2218
02:35:31,960 --> 02:35:34,480
I am referring to the fields
actually. Okay.

2219
02:35:34,680 --> 02:35:36,720
So they are also part that are members

2220
02:35:39,080 --> 02:35:42,080
in Java programing.

2221
02:35:42,440 --> 02:35:44,680
These are classified into four types.

2222
02:35:45,000 --> 02:35:48,520
So private native class and by native.

2223
02:35:48,520 --> 02:35:52,680
I mean in which these fields or methods

2224
02:35:52,680 --> 02:35:56,280
or constructors are created,

2225
02:35:56,280 --> 02:35:58,800
then we have the default one

2226
02:35:58,800 --> 02:36:04,360
and if we have the default one,
that thing is accessible everywhere.

2227
02:36:05,120 --> 02:36:07,680
Inside that package

2228
02:36:07,920 --> 02:36:10,120
which we are writing that class

2229
02:36:12,320 --> 02:36:17,400
is protected when we don't discuss it now
and then we have the public one

2230
02:36:17,720 --> 02:36:20,280
which is universally accessible

2231
02:36:20,600 --> 02:36:25,440
everywhere.

2232
02:36:25,440 --> 02:36:30,960
Access
modifiers are always used to control

2233
02:36:32,600 --> 02:36:35,080
the reuse of features

2234
02:36:35,880 --> 02:36:39,960
within a package and access
between a class.

2235
02:36:39,960 --> 02:36:42,080
Okay, so say

2236
02:36:42,600 --> 02:36:47,560
you guys have written a piece of code
right?

2237
02:36:47,560 --> 02:36:50,600
And you,
you don't want others to copy it, right?

2238
02:36:51,000 --> 02:36:53,160
So what you can do,
you can make it private.

2239
02:36:53,840 --> 02:36:57,840
Now they will not be able to access
your fears, your methods.

2240
02:36:58,120 --> 02:36:58,920
Okay.

2241
02:36:59,560 --> 02:37:01,720
Spend, spend half the class

2242
02:37:01,720 --> 02:37:04,520
going over something very complicated

2243
02:37:05,480 --> 02:37:07,880
that nobody gets, or you guys

2244
02:37:07,880 --> 02:37:10,320
don't actually need to know
that I was just

2245
02:37:11,480 --> 02:37:12,720
put over in the equation.

2246
02:37:12,720 --> 02:37:17,400
I am about to give you.

2247
02:37:17,400 --> 02:37:18,240
All right.

2248
02:37:18,520 --> 02:37:21,240
Access modifiers,

2249
02:37:21,240 --> 02:37:24,160
but alive features

2250
02:37:24,840 --> 02:37:27,680
accessing and controlling

2251
02:37:27,680 --> 02:37:31,040
mechanism
among the classes and interfaces.

2252
02:37:31,400 --> 02:37:34,160
This interfaces, they are
they are something similar

2253
02:37:34,160 --> 02:37:36,720
to classes that you guys will learn later.

2254
02:37:37,320 --> 02:37:41,040
So they they, they provide us
the mechanism to control the access.

2255
02:37:41,280 --> 02:37:45,800
Not default is not
a keyword like public private

2256
02:37:47,000 --> 02:37:47,520
the keyword.

2257
02:37:47,520 --> 02:37:59,640
So default is when you don't specify
any keyword.

2258
02:37:59,640 --> 02:38:01,320
Everyone is learning Java.

2259
02:38:01,320 --> 02:38:03,240
I was also thinking about this.

2260
02:38:03,240 --> 02:38:07,080
Sebastian
tried to focus on the class as well and

2261
02:38:08,120 --> 02:38:12,480
at the end said that I was busy
making the means throughout the course

2262
02:38:12,480 --> 02:38:22,080
and now I don't understand anything.

2263
02:38:22,080 --> 02:38:24,520
All right, so this is just a table

2264
02:38:25,680 --> 02:38:27,800
that am sure

2265
02:38:28,800 --> 02:38:30,320
it will confuse you.

2266
02:38:30,320 --> 02:38:34,240
99% of you will be confused
if you try to leave this table.

2267
02:38:34,800 --> 02:38:39,080
So I will highly encourage you
to not not try to understand.

2268
02:38:39,080 --> 02:38:39,800
Okay.

2269
02:38:39,800 --> 02:38:42,760
But it is the same information
I represented

2270
02:38:42,760 --> 02:38:47,240
in the form of a table.

2271
02:38:47,240 --> 02:38:53,000
So in here we have this public keyword
and this public keyword.

2272
02:38:53,000 --> 02:38:56,200
It is telling us that be paying with

2273
02:38:56,200 --> 02:38:58,880
which we specify this public keyword.

2274
02:38:59,400 --> 02:39:01,920
Will it be accessible within the class?

2275
02:39:02,880 --> 02:39:05,280
Yes, it
will be accessible within the class

2276
02:39:05,280 --> 02:39:10,200
Will it be accessible from any other class
inside the same package?

2277
02:39:10,360 --> 02:39:14,080
Yes. If you specify publicly, yes,
it will be accessible

2278
02:39:16,880 --> 02:39:19,920
if you are accessing from any class

2279
02:39:19,920 --> 02:39:23,880
from different package
and if you have specified public.

2280
02:39:24,080 --> 02:39:27,000
Yes, you be able to access it from

2281
02:39:27,240 --> 02:39:31,240
any class in different package.

2282
02:39:31,240 --> 02:39:31,960
Okay.

2283
02:39:32,000 --> 02:39:34,600
Now there is there is this different that.

2284
02:39:34,600 --> 02:39:36,960
If you are accessing something

2285
02:39:38,560 --> 02:39:40,320
from a class

2286
02:39:40,320 --> 02:39:45,760
by creating its object
and without creating a subject.

2287
02:39:45,760 --> 02:39:46,280
Okay.

2288
02:39:46,400 --> 02:39:51,360
That difference we will learn later.

2289
02:39:51,360 --> 02:39:53,120
And then we have this private.

2290
02:39:53,120 --> 02:39:55,880
Is it accessible
within the same class? Yes.

2291
02:39:56,400 --> 02:39:59,240
Is it accessible in the same package?

2292
02:39:59,240 --> 02:40:02,480
Not from any other class.
Different package.

2293
02:40:02,520 --> 02:40:05,440
Not from any other class
in different package? No.

2294
02:40:06,840 --> 02:40:07,720
The last two.

2295
02:40:07,720 --> 02:40:08,880
They are not.

2296
02:40:08,880 --> 02:40:12,080
Then they are also not clear to me,
you know, it's so it's

2297
02:40:12,080 --> 02:40:16,680
fine.

2298
02:40:16,680 --> 02:40:17,080
Actually.

2299
02:40:17,080 --> 02:40:21,240
This class today involve something
that I will be teaching you later.

2300
02:40:21,640 --> 02:40:25,000
Okay, So let's this course.

2301
02:40:25,080 --> 02:40:38,680
Until then. So

2302
02:40:41,040 --> 02:40:44,280
if multiplication table was enough for us.

2303
02:40:45,040 --> 02:40:47,640
So if we are not using

2304
02:40:47,640 --> 02:40:53,520
private protected aid or public,
so if we are not explicitly writing

2305
02:40:53,520 --> 02:40:57,360
these three keywords, JVM is by default

2306
02:40:57,360 --> 02:41:01,160
taking as default access modifiers.

2307
02:41:01,200 --> 02:41:01,440
Okay.

2308
02:41:01,440 --> 02:41:05,600
And that means you can access these things
inside the same package.

2309
02:41:07,400 --> 02:41:11,400
Yes. So up till now, you guys were using
the default access modifiers.

2310
02:41:11,400 --> 02:41:15,000
Have you guys tried to access your things
outside of that package?

2311
02:41:16,560 --> 02:41:21,760
Maybe accidentally.

2312
02:41:21,760 --> 02:41:22,440
Okay,

2313
02:41:23,640 --> 02:41:26,160
the scope of this modifier.

2314
02:41:26,880 --> 02:41:29,960
So right now we are discussing discussing
about the default.

2315
02:41:30,480 --> 02:41:35,480
The scope of this modified
is limited to the package only.

2316
02:41:35,720 --> 02:41:36,080
Okay.

2317
02:41:37,240 --> 02:41:40,560
This means that if we have a class

2318
02:41:40,560 --> 02:41:44,600
with the default access modifier
in a package,

2319
02:41:45,600 --> 02:41:47,760
only those classes that

2320
02:41:48,240 --> 02:41:51,600
in this package can access that class.

2321
02:41:51,600 --> 02:41:52,240
Okay.

2322
02:41:52,600 --> 02:41:56,920
No other class outside
this package can access this class.

2323
02:41:56,920 --> 02:41:57,880
I guess what

2324
02:41:59,280 --> 02:42:02,280
if you guys don't understand, understand
this part,

2325
02:42:02,280 --> 02:42:05,760
it's fine because you will hardly

2326
02:42:05,760 --> 02:42:09,120
create a class inside another class.

2327
02:42:09,240 --> 02:42:09,800
Okay.

2328
02:42:09,800 --> 02:42:15,000
But it is treated
the same as variables that matters.

2329
02:42:15,000 --> 02:42:18,920
Similarly, if we have a am I right?

2330
02:42:18,920 --> 02:42:22,760
We have four type of modifiers be followed

2331
02:42:22,760 --> 02:42:27,320
by weird oblique protected
default is accessible

2332
02:42:27,320 --> 02:42:31,360
within the same package.

2333
02:42:31,360 --> 02:42:33,200
Publicly accessible everywhere.

2334
02:42:33,200 --> 02:42:36,440
Private is accessible
within the same class only.

2335
02:42:37,440 --> 02:42:39,600
Yes, for Hardy. All right.

2336
02:42:39,600 --> 02:42:44,040
So similarly, if we have a default method

2337
02:42:44,040 --> 02:42:46,440
or data member in a class

2338
02:42:47,160 --> 02:42:52,000
that I member again means fields,

2339
02:42:52,000 --> 02:42:56,240
it would not be visible in the class off
and other package.

2340
02:42:56,240 --> 02:43:00,680
Okay. So if we are accessing it in a different package, we not be able to do that

2341
02:43:02,560 --> 02:43:05,280
in that our members class are matters

2342
02:43:05,280 --> 02:43:09,640
which are not declared
using any access modifier.

2343
02:43:09,640 --> 02:43:14,400
They have the default access modifier
and they are accessible to the classes

2344
02:43:15,280 --> 02:43:21,280
which are defined in the same package.

2345
02:43:21,280 --> 02:43:22,000
Okay.

2346
02:43:22,360 --> 02:43:26,640
So in here
the packages ABC package, in here,

2347
02:43:26,720 --> 02:43:30,920
the packages x, y, z package.

2348
02:43:30,920 --> 02:43:31,640
Okay.

2349
02:43:33,240 --> 02:43:34,720
And then

2350
02:43:38,040 --> 02:43:42,160
we have this method add two numbers

2351
02:43:43,720 --> 02:43:46,760
and we are trying to this add

2352
02:43:46,800 --> 02:43:49,760
two numbers method

2353
02:43:49,760 --> 02:43:51,600
in a different package.

2354
02:43:51,600 --> 02:43:53,680
Can I do that guys?

2355
02:43:54,280 --> 02:43:55,760
But this is a different package.

2356
02:43:55,760 --> 02:43:57,200
This is a different package.

2357
02:43:57,200 --> 02:43:59,400
I have the default access.

2358
02:43:59,400 --> 02:44:02,120
Can I call this add two numbers

2359
02:44:02,120 --> 02:44:04,400
in a different package

2360
02:44:07,680 --> 02:44:19,480
and no, no, no.

2361
02:44:19,480 --> 02:44:21,480
The method that. Mm.

2362
02:44:21,480 --> 02:44:25,080
The method is having a default access

2363
02:44:25,080 --> 02:44:28,160
this integer default add two numbers.

2364
02:44:28,640 --> 02:44:36,200
I am trying to call this method.

2365
02:44:36,200 --> 02:44:38,480
No, not even if we import the package.

2366
02:44:38,760 --> 02:44:44,000
Even if we import the package,
the method has default access.

2367
02:44:45,480 --> 02:44:47,720
Again, I call

2368
02:44:47,720 --> 02:44:51,000
a method having a default access

2369
02:44:51,320 --> 02:44:55,800
in a different package.

2370
02:44:55,800 --> 02:45:01,400
No, we cannot do.

2371
02:45:01,400 --> 02:45:04,880
We can only access public matters

2372
02:45:04,880 --> 02:45:06,960
in different packages. Yes,

2373
02:45:08,200 --> 02:45:10,920
we can only it within the same package.

2374
02:45:11,640 --> 02:45:13,040
It should be in the same package.

2375
02:45:13,040 --> 02:45:16,320
Yes. Yes.

2376
02:45:16,320 --> 02:45:18,840
So that's why we got this add an exception

2377
02:45:19,200 --> 02:45:22,000
walang undesired compilation
program, blah blah

2378
02:45:22,000 --> 02:45:25,200
blah.

2379
02:45:25,200 --> 02:45:27,400
Addition. Being public is not enough.

2380
02:45:27,640 --> 02:45:30,320
Then yes, this public keyword

2381
02:45:31,320 --> 02:45:36,240
with this class
is defining the access of this class,

2382
02:45:36,240 --> 02:45:39,440
not the access of this method.

2383
02:45:40,760 --> 02:45:43,080
Okay, so in here,

2384
02:45:43,320 --> 02:45:47,240
my class, it was also public, right?

2385
02:45:47,400 --> 02:45:51,920
This access modifier demo
in which I created primarily for public.

2386
02:45:51,960 --> 02:45:55,560
It was also public,
but it does not mean that

2387
02:45:55,760 --> 02:46:00,480
all the variables or the methods
they will be having the public access.

2388
02:46:00,520 --> 02:46:06,040
Okay, each variable
and the method have its own access

2389
02:46:06,040 --> 02:46:12,840
modifier.

2390
02:46:12,840 --> 02:46:15,240
Okay, then we have the public.

2391
02:46:15,240 --> 02:46:19,000
If a variable is set to the public,
it can be accessed

2392
02:46:19,000 --> 02:46:22,240
from any class available in the Java.

2393
02:46:22,320 --> 02:46:26,480
Any method in any class
can access the given variable via

2394
02:46:26,480 --> 02:46:28,480
the instance or direct access.

2395
02:46:28,480 --> 02:46:31,320
I was kind of relating this
to Google shares

2396
02:46:31,680 --> 02:46:36,240
or docs.

2397
02:46:36,240 --> 02:46:39,720
So yes, this class
in which these variables

2398
02:46:39,720 --> 02:46:43,360
or methods are present,
it must be a public class, right?

2399
02:46:43,360 --> 02:46:45,840
It is the first requirement
that we should meet.

2400
02:46:46,360 --> 02:46:51,200
If the class itself is not public,
that means we cannot access the class.

2401
02:46:51,200 --> 02:46:54,240
And if we cannot access the cloud,
then makes sense

2402
02:46:54,240 --> 02:46:57,880
that the variables and the methods
will also not be accessible.

2403
02:46:57,880 --> 02:47:00,400
Right. So class is public.

2404
02:47:00,920 --> 02:47:05,360
And then we have these
different levels that class,

2405
02:47:06,720 --> 02:47:09,120
private and

2406
02:47:09,280 --> 02:47:11,880
public, and then default

2407
02:47:11,880 --> 02:47:18,880
and then protected.

2408
02:47:18,880 --> 02:47:19,240
Okay.

2409
02:47:19,240 --> 02:47:24,040
So again, again, same example.

2410
02:47:24,040 --> 02:47:26,160
Yes, it depends on

2411
02:47:27,000 --> 02:47:30,000
what is the access modifier of each

2412
02:47:30,000 --> 02:47:34,880
method and each variable
in order to access modify

2413
02:47:34,880 --> 02:47:39,800
not only the access modifier of class,

2414
02:47:39,800 --> 02:47:42,520
but I am trying to do the same thing,
same example.

2415
02:47:43,040 --> 02:47:46,560
But this time
I have placed this public keyword

2416
02:47:47,040 --> 02:47:50,160
before the name of the class

2417
02:47:50,160 --> 02:47:51,840
again before the name of the class. So.

2418
02:47:51,840 --> 02:47:54,240
So this time I don't get any errors.

2419
02:47:55,400 --> 02:48:05,680
I don't get any.

2420
02:48:05,680 --> 02:48:12,480
Yes, I will be having public access.

2421
02:48:12,480 --> 02:48:14,520
Okay. Then we have the particular one.

2422
02:48:14,520 --> 02:48:19,120
We are skipping the slide for now.

2423
02:48:19,120 --> 02:48:21,680
We will discuss it
when we discuss the inheritance.

2424
02:48:21,680 --> 02:48:24,000
So because this protected

2425
02:48:25,040 --> 02:48:27,040
is related to the inheritance.

2426
02:48:27,440 --> 02:48:30,320
Okay.

2427
02:48:30,320 --> 02:48:33,360
And it will only make sense if you know

2428
02:48:33,360 --> 02:48:40,840
about the inheritance.

2429
02:48:40,840 --> 02:48:42,680
And then we have a variable

2430
02:48:43,640 --> 02:48:45,920
defined as private.

2431
02:48:45,920 --> 02:48:49,680
Private will be accessible
only from within the class

2432
02:48:49,800 --> 02:48:52,680
in which it is defined.

2433
02:48:52,680 --> 02:48:55,440
Such variables are not accessible from

2434
02:48:56,160 --> 02:48:58,800
outside the defined class,

2435
02:49:00,040 --> 02:49:02,760
not even in its subclass.

2436
02:49:03,480 --> 02:49:06,760
Can you make package public
to make your metadata?

2437
02:49:06,760 --> 02:49:10,240
No, but in packages
they don't have these access modifiers

2438
02:49:10,240 --> 02:49:12,320
like public, private
or something like that.

2439
02:49:13,320 --> 02:49:15,480
Packages don't have these access modifiers

2440
02:49:18,640 --> 02:49:20,800
made it clear

2441
02:49:21,440 --> 02:49:25,400
packages don't have access modifiers

2442
02:49:30,840 --> 02:49:32,400
private that are members

2443
02:49:32,400 --> 02:49:35,600
and matters are only accessible.

2444
02:49:35,600 --> 02:49:40,240
The class, class and interface
cannot be declared as private,

2445
02:49:40,480 --> 02:49:43,280
trying to see
if there are any shortcuts. No,

2446
02:49:44,360 --> 02:49:46,440
that's why.
We have these access modifiers.

2447
02:49:46,440 --> 02:49:48,400
We don't want the access.

2448
02:49:48,400 --> 02:49:54,440
If we have any shortcut,
then then there is no point of it right?

2449
02:49:54,440 --> 02:49:58,440
If a class has private constructor,
then you cannot create the object

2450
02:49:58,440 --> 02:49:59,560
of that class.

2451
02:49:59,560 --> 02:50:01,560
This is related to the next class.

2452
02:50:02,000 --> 02:50:04,800
Any other class of the same package
not be able

2453
02:50:04,800 --> 02:50:08,080
to access these members.

2454
02:50:08,080 --> 02:50:12,760
So even if there is a class inside
the same package, that class cannot

2455
02:50:12,840 --> 02:50:18,600
also access this.

2456
02:50:18,600 --> 02:50:20,960
So this classes class ABC.

2457
02:50:20,960 --> 02:50:23,400
This class is class example.

2458
02:50:23,400 --> 02:50:26,320
I have a private member double name

2459
02:50:27,280 --> 02:50:30,400
and if I try to access this now in here

2460
02:50:30,520 --> 02:50:33,760
I get a compile time that is

2461
02:50:34,880 --> 02:50:35,160
okay.

2462
02:50:35,160 --> 02:50:36,720
So this class for this class.

2463
02:50:36,720 --> 02:50:39,000
Now let's do more examples

2464
02:50:40,440 --> 02:50:44,160
and then we will be having a longer break.

2465
02:50:44,160 --> 02:50:46,400
Then you guys will be solving
these examples.

2466
02:50:47,880 --> 02:50:55,920
So, so this access about the

2467
02:50:57,800 --> 02:50:59,960
about the fields in the clear guys

2468
02:51:00,000 --> 02:51:05,720
that I access these fields.

2469
02:51:05,720 --> 02:51:11,160
So if it is clear, then tell me, let's

2470
02:51:11,280 --> 02:51:15,320
see if I make the assignment of private,

2471
02:51:17,160 --> 02:51:23,760
if I'm creating this method private,

2472
02:51:23,760 --> 02:51:27,840
so can I call this method inside this
same class?

2473
02:51:27,960 --> 02:51:29,680
So this method is private.

2474
02:51:29,680 --> 02:51:34,920
This display name can I call it in here?

2475
02:51:34,920 --> 02:51:38,280
Okay, so yes, I can call it

2476
02:51:41,400 --> 02:51:41,920
here.

2477
02:51:43,320 --> 02:51:46,360
Can I also can I also call these other

2478
02:51:46,360 --> 02:51:51,840
two methods inside this class? Yes.

2479
02:51:51,840 --> 02:51:54,200
No issues, right? No issues.

2480
02:51:55,240 --> 02:51:57,280
So this has the default access.

2481
02:51:57,280 --> 02:51:59,400
Let's make this

2482
02:52:01,720 --> 02:52:03,240
public one.

2483
02:52:04,200 --> 02:52:29,640
Okay so I can call the exploit age

2484
02:52:31,920 --> 02:52:37,800
and then I can do the same for this place.

2485
02:52:38,760 --> 02:52:40,680
No issues with there.

2486
02:52:40,680 --> 02:52:42,960
If I am inside this same class, no issues.

2487
02:52:44,040 --> 02:52:46,840
Okay, so

2488
02:52:47,720 --> 02:52:50,440
this class is inside the package.

2489
02:52:50,440 --> 02:52:52,200
Class 16.

2490
02:52:52,200 --> 02:52:55,120
Okay, this class is inside the package 16.

2491
02:52:56,400 --> 02:52:59,680
So class is also inside the same package.

2492
02:52:59,680 --> 02:53:01,080
So let's left.

2493
02:53:01,080 --> 02:53:04,040
So tell me guys, tell me which method

2494
02:53:04,040 --> 02:53:07,920
I can call in here
and which method I cannot find in here.

2495
02:53:08,160 --> 02:53:10,520
Can I call the

2496
02:53:10,880 --> 02:53:12,800
different matter

2497
02:53:13,040 --> 02:53:14,720
in a different class?

2498
02:53:14,720 --> 02:53:17,040
But I am still inside the same package.

2499
02:53:17,040 --> 02:53:22,600
Can I call this method? Yes.

2500
02:53:22,600 --> 02:53:28,400
Within the same class
you can call any type of modifiers.

2501
02:53:28,400 --> 02:53:30,880
So the one is saying yes. Really?

2502
02:53:30,920 --> 02:53:39,560
If you're saying yes,
can I call the display name at third

2503
02:53:40,680 --> 02:53:43,280
inside this

2504
02:53:43,280 --> 02:53:45,440
class it's a different class,

2505
02:53:46,040 --> 02:53:51,520
but it is inside the same package.

2506
02:53:51,520 --> 02:53:54,400
No. Okay. So the one we cannot call it.

2507
02:53:54,400 --> 02:53:56,480
Okay, because it pairs

2508
02:53:57,400 --> 02:54:00,600
B, it has private access here.

2509
02:54:00,680 --> 02:54:02,320
It has private access.

2510
02:54:02,320 --> 02:54:14,520
Can I call the displayed?

2511
02:54:14,520 --> 02:54:18,160
Yes, because I am inside

2512
02:54:19,800 --> 02:54:22,240
the same package.

2513
02:54:22,240 --> 02:54:22,800
Okay.

2514
02:54:23,000 --> 02:54:32,360
And what about this display, Sally?

2515
02:54:32,360 --> 02:54:35,040
It's also possible. Also possible.

2516
02:54:35,880 --> 02:54:37,520
Okay. And

2517
02:54:38,280 --> 02:54:43,680
I move to a different package if.

2518
02:54:44,520 --> 02:54:46,240
Yes, but not a good idea.

2519
02:54:46,240 --> 02:54:53,120
You know why it is not a good idea?

2520
02:54:53,120 --> 02:54:56,920
If we can call Edge
and you see I'm calling this edge.

2521
02:54:57,080 --> 02:54:58,560
No, no issues.

2522
02:54:58,560 --> 02:55:01,000
No, no, it's not.

2523
02:55:01,000 --> 02:55:02,160
This is not private.

2524
02:55:02,160 --> 02:55:04,600
And I am able to call it

2525
02:55:09,520 --> 02:55:14,880
okay, if I am in a different package.

2526
02:55:14,880 --> 02:55:16,680
Can I call this display name?

2527
02:55:17,760 --> 02:55:18,360
If I am in a

2528
02:55:18,360 --> 02:55:23,280
different package?

2529
02:55:23,280 --> 02:55:24,360
No. Right.

2530
02:55:24,360 --> 02:55:26,160
Yes. Not even possible.

2531
02:55:26,160 --> 02:55:27,720
Inside the same package.

2532
02:55:27,720 --> 02:55:31,000
Then how we can call it
in a different package.

2533
02:55:31,000 --> 02:55:39,680
All right, well,
what about this display edge?

2534
02:55:39,680 --> 02:55:41,040
What about this display edge?

2535
02:55:41,040 --> 02:55:44,800
Can I call it in a different package

2536
02:55:48,920 --> 02:55:51,320
for one again? Yes.

2537
02:55:51,520 --> 02:55:51,840
Again?

2538
02:55:51,840 --> 02:55:56,280
Yes, I am in a different package.

2539
02:55:57,520 --> 02:56:00,720
Can I call it method or a field

2540
02:56:00,720 --> 02:56:05,800
that has the default access? No.

2541
02:56:07,320 --> 02:56:10,400
Default access means only

2542
02:56:10,440 --> 02:56:15,120
call label inside the same package.

2543
02:56:15,600 --> 02:56:18,480
Okay.
Only callable inside the same package.

2544
02:56:18,480 --> 02:56:32,400
Is it close over saying yes.

2545
02:56:32,400 --> 02:56:43,280
And can I call this display salary?

2546
02:56:43,280 --> 02:56:45,440
Yes, because it's public, right?

2547
02:56:45,480 --> 02:56:48,240
Public means I can call it anywhere.

2548
02:56:48,560 --> 02:56:54,000
Yeah, I can call it anywhere.

2549
02:56:54,000 --> 02:56:55,560
Okay, let's do one more example.

2550
02:56:55,560 --> 02:57:30,000
Let me know what you guys are done typing
this for.

2551
02:57:30,000 --> 02:57:51,000
Is there anyone who's still typing?

2552
02:57:51,000 --> 02:57:53,600
Maybe. Sebastian,
If you are done typing, maybe.

2553
02:57:53,600 --> 02:58:33,840
Meanwhile, I create another
you can work on your been.

2554
02:58:33,840 --> 02:58:34,160
Okay.

2555
02:58:34,160 --> 02:58:45,960
Let me close this.

2556
02:58:45,960 --> 02:58:47,560
So I was not joking.

2557
02:58:47,560 --> 02:58:53,880
This this is literally day to this class.

2558
02:58:53,880 --> 02:58:55,480
I mean

2559
02:58:59,720 --> 02:59:02,120
no but we will be learning

2560
02:59:02,120 --> 02:59:03,360
more stuff

2561
02:59:08,360 --> 02:59:11,040
something about constructors

2562
02:59:11,160 --> 02:59:13,560
and we just go over their tasks together.

2563
02:59:13,560 --> 02:59:16,160
Yes I will. Going over the tasks together.

2564
02:59:16,200 --> 02:59:24,600
But first
you guys have to try them on your own.

2565
02:59:24,600 --> 02:59:26,320
When will you do two lessons?

2566
02:59:26,320 --> 02:59:29,560
In one day
And I will do half of the lesson today.

2567
02:59:29,680 --> 02:59:32,880
Simon And Half of the lesson tomorrow

2568
02:59:36,120 --> 02:59:39,360
is this is where
we will be having two classes.

2569
02:59:40,200 --> 02:59:44,520
So we are still we still have 2 hours
and we don't have any homework.

2570
02:59:44,520 --> 02:59:49,400
Usually we spend revising the concepts
and doing the homework one not on that.

2571
02:59:49,800 --> 02:59:53,600
So we can call it another class

2572
02:59:53,600 --> 02:59:56,920
and it's of the change of schedule.

2573
02:59:56,920 --> 02:59:58,760
So this class was

2574
02:59:58,880 --> 03:00:00,960
supposed to be taught on a weekday,

2575
03:00:01,800 --> 03:00:09,040
but because we have a change of schedule,
that's why we are covering two classes

2576
03:00:20,960 --> 03:00:23,160
and don't understand.

2577
03:00:23,160 --> 03:00:27,080
The secret is still showing me
an error on this line.

2578
03:00:27,080 --> 03:00:32,800
Anyways.

2579
03:00:32,800 --> 03:00:39,360
So let's say guys now.

2580
03:00:39,960 --> 03:00:45,520
Sorry I should wait in this class.

2581
03:00:45,520 --> 03:00:49,320
So let's say I am creating a bank account
application.

2582
03:00:49,320 --> 03:00:54,040
Okay.

2583
03:00:54,040 --> 03:00:58,360
So if I am developing some kind

2584
03:00:58,360 --> 03:01:02,760
of banking application, oops.

2585
03:01:02,760 --> 03:01:05,280
And if I have to store

2586
03:01:07,800 --> 03:01:10,920
the username in here

2587
03:01:11,440 --> 03:01:16,200
so they make it public, private
or be followed or paid

2588
03:01:16,240 --> 03:01:23,640
what, what I make it.

2589
03:01:23,640 --> 03:01:25,720
It should be private. Right?

2590
03:01:26,520 --> 03:01:29,080
We don't want this behavior that.

2591
03:01:29,080 --> 03:01:33,400
Any other class is creating an object
of this class

2592
03:01:33,720 --> 03:01:38,840
and accessing these sensitive data right.

2593
03:01:38,840 --> 03:01:41,840
So whenever you are dealing
with these types also,

2594
03:01:42,040 --> 03:01:45,000
by the way, the best practice

2595
03:01:45,360 --> 03:01:48,360
is to always, always

2596
03:01:50,320 --> 03:01:52,200
your fields

2597
03:01:52,200 --> 03:01:56,120
as private entity for any type of field.

2598
03:01:57,400 --> 03:01:58,200
If you

2599
03:01:58,200 --> 03:02:01,320
not planning to explicitly share the info

2600
03:02:01,320 --> 03:02:03,680
that is being stored in that field,

2601
03:02:04,360 --> 03:02:08,600
you should always,
always create the fears as private.

2602
03:02:08,760 --> 03:02:13,240
Okay.

2603
03:02:13,240 --> 03:02:13,960
Okay.

2604
03:02:14,120 --> 03:02:17,160
What about the password field?

2605
03:02:17,760 --> 03:02:18,400
Should it be?

2606
03:02:18,400 --> 03:02:25,280
Should it also be private?

2607
03:02:25,280 --> 03:02:26,640
Private. All right.

2608
03:02:26,640 --> 03:02:28,400
First and

2609
03:02:30,560 --> 03:02:33,720
what about the name field?

2610
03:02:33,720 --> 03:02:35,880
Is there any harm if I. If I.

2611
03:02:36,160 --> 03:02:36,680
If I.

2612
03:02:36,680 --> 03:02:39,080
If I share the name

2613
03:02:39,080 --> 03:02:42,440
of of of the person Whose account is this

2614
03:02:45,720 --> 03:02:46,080
number?

2615
03:02:46,280 --> 03:02:48,600
It can be public, It can be difficult.

2616
03:02:49,080 --> 03:02:50,800
It can be public, it can be flooded.

2617
03:02:50,800 --> 03:02:53,880
But again, the best practice is to make it

2618
03:02:56,040 --> 03:03:24,480
private.

2619
03:03:24,480 --> 03:03:26,320
All right.

2620
03:03:26,320 --> 03:03:28,600
So now I have a question for you guys.

2621
03:03:28,600 --> 03:03:36,640
If I have made these fields as private
and this is the best practice,

2622
03:03:36,640 --> 03:03:40,640
if this is the best practice,
then how can I excel this year?

2623
03:03:40,640 --> 03:03:45,240
I have I have to store the data as well
inside these fields, right?

2624
03:03:46,440 --> 03:03:49,200
When I am creating the

2625
03:03:49,200 --> 03:03:54,160
object of this class,
I have to store the data as well, right?

2626
03:03:54,160 --> 03:03:56,640
I have to initialize these fields as well

2627
03:03:57,720 --> 03:03:58,880
with index

2628
03:04:15,040 --> 03:04:16,360
within the same class.

2629
03:04:16,360 --> 03:04:19,320
But again, you go within the same classes.

2630
03:04:19,320 --> 03:04:21,640
Again, not in best practice

2631
03:04:21,640 --> 03:04:24,200
using protected.

2632
03:04:24,200 --> 03:04:28,160
So here is a trick really
the kind of shortcut dummy.

2633
03:04:28,400 --> 03:04:28,720
Maybe.

2634
03:04:28,720 --> 03:04:31,480
And this is what you were looking for.

2635
03:04:31,480 --> 03:04:33,400
Extend their size for individual.

2636
03:04:33,400 --> 03:04:35,520
Yeah, that's great.

2637
03:04:35,520 --> 03:04:37,320
You can extend it.

2638
03:04:37,320 --> 03:04:41,760
So what I can do,

2639
03:04:41,760 --> 03:04:45,000
I can make

2640
03:04:45,240 --> 03:04:49,680
my method public, okay?

2641
03:04:49,760 --> 03:05:39,320
I can make my method of public.

2642
03:05:39,320 --> 03:05:41,880
So this field is private.

2643
03:05:42,040 --> 03:05:43,160
Yes. Right.

2644
03:05:43,160 --> 03:05:43,800
And this is field.

2645
03:05:43,800 --> 03:05:47,040
It's private, but can I access it inside?

2646
03:05:47,040 --> 03:05:51,480
Hide this thing inside a method
that is inside the same class.

2647
03:05:51,720 --> 03:05:52,120
Right.

2648
03:05:53,200 --> 03:05:55,560
Well, if this field is private,

2649
03:05:55,560 --> 03:06:01,240
I can still access inside a method
which is inside that class.

2650
03:06:01,240 --> 03:06:01,960
Right.

2651
03:06:02,040 --> 03:06:05,320
But what I can do, I can change it.

2652
03:06:05,320 --> 03:06:09,080
The access, modify of that method.

2653
03:06:10,080 --> 03:06:14,280
Now, this field is still private,

2654
03:06:15,200 --> 03:06:20,400
but I can all this
method to set its value.

2655
03:06:21,040 --> 03:06:21,520
Okay.

2656
03:06:21,520 --> 03:06:25,320
Does it make sense?

2657
03:06:25,320 --> 03:06:29,720
The value of this field
can be set from anywhere.

2658
03:06:30,200 --> 03:06:32,600
But now you have another confusion.

2659
03:06:32,600 --> 03:06:34,240
If I, i.

2660
03:06:34,240 --> 03:06:36,520
If I am setting the value of this field,

2661
03:06:37,520 --> 03:06:40,000
then what's the point of having this
method?

2662
03:06:40,000 --> 03:06:43,920
Let's make this public
and anyone can set this field right.

2663
03:06:43,920 --> 03:06:46,080
Well, what is the benefit of doing this?

2664
03:06:46,080 --> 03:06:48,360
Anyone can think of any benefit

2665
03:06:59,200 --> 03:07:02,080
hide bid

2666
03:07:05,040 --> 03:07:05,400
errors

2667
03:07:05,400 --> 03:07:09,280
like you can access a private data type
to a public method.

2668
03:07:09,320 --> 03:07:17,040
Yes, but access method
we can use it in other classes.

2669
03:07:17,080 --> 03:07:22,240
Don't have to create a method to gain.

2670
03:07:22,240 --> 03:07:24,480
All right. Let me.
Let me tell you the better.

2671
03:07:25,080 --> 03:07:30,200
So what do you guys can now
do is that you can

2672
03:07:30,200 --> 03:07:33,440
write many, many sets of rules.

2673
03:07:33,840 --> 03:07:35,760
Have you guys noticed this?

2674
03:07:35,760 --> 03:07:41,520
That when we tried to sign up for banks,
they have this restriction.

2675
03:07:41,520 --> 03:07:43,280
You cannot set this password.

2676
03:07:44,280 --> 03:07:45,000
Your username

2677
03:07:45,000 --> 03:07:47,080
cannot be more than these characters.

2678
03:07:48,200 --> 03:07:52,320
And then you have proper mechanisms
through which you can deposit and be money

2679
03:07:52,320 --> 03:07:55,360
in your account,
proper mechanism through which you can

2680
03:07:55,360 --> 03:07:57,840
withdraw money from your account.

2681
03:07:58,920 --> 03:08:03,040
Now I can write all those rules

2682
03:08:04,520 --> 03:08:08,160
inside this method, and only

2683
03:08:08,160 --> 03:08:12,280
if all of the rules are passed, then

2684
03:08:12,280 --> 03:08:15,480
the value to my field will be assigned.

2685
03:08:15,480 --> 03:08:18,800
Right? For example, I can see.

2686
03:08:18,800 --> 03:08:23,080
I can see.

2687
03:08:23,080 --> 03:08:25,280
I can see

2688
03:08:26,800 --> 03:08:31,760
only and only if our account user names

2689
03:08:32,720 --> 03:08:37,560
if it if the length is less 16 characters

2690
03:08:38,040 --> 03:08:42,600
only and only then I want to set

2691
03:08:43,560 --> 03:08:46,080
this username in here.

2692
03:08:46,080 --> 03:08:47,480
Otherwise.

2693
03:08:47,480 --> 03:08:50,280
Otherwise I want to print on the screen.

2694
03:08:50,400 --> 03:09:01,600
I want to print on this thing. So

2695
03:09:13,200 --> 03:09:16,200
username or this link

2696
03:09:17,200 --> 03:09:19,600
is allowed.

2697
03:09:19,640 --> 03:09:21,240
You guys remember that? That

2698
03:09:22,440 --> 03:09:23,360
when we were

2699
03:09:23,360 --> 03:09:26,800
learning about this string class
and we did that task

2700
03:09:27,240 --> 03:09:31,640
and we in which we checked for many,
many steps before can

2701
03:09:32,680 --> 03:09:34,800
we can allow the user to sign up.

2702
03:09:35,200 --> 03:09:40,080
We can put all those rules,
we can put any other rules in here

2703
03:09:41,400 --> 03:09:44,880
before we set the value to this variable.

2704
03:09:44,880 --> 03:09:45,560
Right.

2705
03:09:45,560 --> 03:09:47,520
I can

2706
03:09:48,960 --> 03:09:51,560
I can have it

2707
03:09:51,760 --> 03:09:55,320
with a variable right now.

2708
03:09:55,680 --> 03:10:02,760
If I am allowing to set this edge value,
if I am making it public or private,

2709
03:10:03,240 --> 03:10:06,800
anyone can set any value to this age
variable, right?

2710
03:10:07,320 --> 03:10:09,160
They can set negative numbers.

2711
03:10:09,160 --> 03:10:11,640
They can set 200 or 300, 400.

2712
03:10:12,080 --> 03:10:13,800
I don't want to allow that.

2713
03:10:13,800 --> 03:10:18,960
It corrupts the data of my class
and because methods

2714
03:10:19,200 --> 03:10:23,520
they operate on this data,
they can also misbehave.

2715
03:10:24,080 --> 03:10:29,640
So I am controlling the flow
of information on to my class

2716
03:10:30,680 --> 03:10:32,480
with the help of access

2717
03:10:32,480 --> 03:10:37,200
modifiers and methods
so that collect ever logic.

2718
03:10:37,200 --> 03:10:40,160
I write inside the method.

2719
03:10:40,160 --> 03:10:41,920
It does not misbehave.

2720
03:10:41,920 --> 03:10:42,760
Does it make sense?

2721
03:10:42,760 --> 03:10:45,480
Guys?

2722
03:10:45,480 --> 03:10:48,600
So it's like you can access
your private data if you can.

2723
03:10:48,840 --> 03:10:49,440
The condition?

2724
03:10:49,440 --> 03:10:54,520
Yes. Only
and only if you meet the condition.

2725
03:10:54,520 --> 03:10:57,880
If you made the rules that I am writing.

2726
03:10:58,800 --> 03:11:02,040
So now I have more control over my data.

2727
03:11:03,120 --> 03:11:06,800
Okay.

2728
03:11:06,800 --> 03:11:10,080
And what I can also do,

2729
03:11:10,080 --> 03:11:13,840
I can also write another method,

2730
03:11:13,840 --> 03:11:18,000
and that method can also object
for additional things.

2731
03:11:18,440 --> 03:11:19,280
Right?

2732
03:11:19,440 --> 03:11:24,480
For example, let's say I have fear

2733
03:11:30,120 --> 03:11:31,840
account balance.

2734
03:11:31,840 --> 03:11:36,000
So in your real life,
guys, can we access the account balance

2735
03:11:36,000 --> 03:11:44,520
without the username and password? No.

2736
03:11:44,960 --> 03:11:48,560
So I can write

2737
03:11:48,560 --> 03:11:50,880
another matter

2738
03:11:50,880 --> 03:11:55,400
that will only,
only it will only only return

2739
03:11:56,800 --> 03:11:58,840
the balance

2740
03:12:01,040 --> 03:12:03,640
If someone is providing

2741
03:12:05,040 --> 03:12:07,560
the correct the username

2742
03:12:11,520 --> 03:12:13,400
and password,

2743
03:12:13,400 --> 03:12:15,800
I can so I am controlling

2744
03:12:16,520 --> 03:12:18,960
the access to write the data

2745
03:12:19,960 --> 03:12:24,200
and now I am controlling the access
to read the data.

2746
03:12:24,240 --> 03:12:27,000
Okay. I can see.

2747
03:12:27,000 --> 03:12:30,600
I can see.

2748
03:12:30,600 --> 03:12:31,920
I will not see.

2749
03:12:31,920 --> 03:12:34,320
I will not tell you about the

2750
03:12:35,560 --> 03:12:44,640
I will not tell you
about the account balance.

2751
03:12:44,640 --> 03:12:47,520
I will only tell you about the account
balance

2752
03:12:48,120 --> 03:12:52,040
if you username that you are.

2753
03:12:52,320 --> 03:12:56,840
Oops.

2754
03:12:56,840 --> 03:13:00,800
If the username is equal
to the username that you are passing

2755
03:13:04,480 --> 03:13:09,360
and if you are also also providing

2756
03:13:11,040 --> 03:13:13,360
the proper

2757
03:13:13,520 --> 03:13:14,600
password.

2758
03:13:14,600 --> 03:13:18,400
If you are not providing
the proper password,

2759
03:13:20,040 --> 03:13:23,080
I. I will tell you about

2760
03:13:24,800 --> 03:13:26,520
the account balance.

2761
03:13:26,520 --> 03:13:29,840
Yeah.

2762
03:13:29,840 --> 03:13:33,360
So if these two things, if they match

2763
03:13:34,240 --> 03:13:38,040
to the username
and password of the user, then only

2764
03:13:39,200 --> 03:13:42,080
I will return

2765
03:13:42,440 --> 03:13:44,520
this account.

2766
03:13:44,520 --> 03:13:45,560
Goodness.

2767
03:13:46,760 --> 03:13:48,440
Otherwise

2768
03:13:48,800 --> 03:13:52,240
I can read and maybe, maybe like this one.

2769
03:13:52,240 --> 03:13:52,880
Right.

2770
03:13:52,880 --> 03:13:55,560
To indicate that the username and password

2771
03:13:55,560 --> 03:13:58,560
are not correct.

2772
03:13:58,560 --> 03:13:59,280
Okay.

2773
03:13:59,920 --> 03:14:02,400
And maybe we can make it a while method.

2774
03:14:02,560 --> 03:14:04,560
Okay.
And then let's make it a wild matter.

2775
03:14:04,880 --> 03:14:08,000
So I only display

2776
03:14:08,200 --> 03:14:18,320
the account balance if.

2777
03:14:19,040 --> 03:14:19,680
Yeah,

2778
03:14:20,400 --> 03:14:22,560
proper username

2779
03:14:23,520 --> 03:14:25,720
and password is provided to me.

2780
03:14:25,720 --> 03:14:28,960
Otherwise I can see

2781
03:14:31,560 --> 03:14:34,160
username or

2782
03:14:34,640 --> 03:14:37,400
password is not

2783
03:14:38,920 --> 03:14:41,280
on it.

2784
03:14:41,280 --> 03:14:42,360
Making more sense guys.

2785
03:14:42,360 --> 03:14:46,920
Now how we can use these access

2786
03:14:46,920 --> 03:14:49,560
modifiers and methods

2787
03:14:50,640 --> 03:14:53,760
to control the flow of information

2788
03:14:54,440 --> 03:14:58,480
towards the class
and from outside of class.

2789
03:14:58,480 --> 03:15:00,520
Okay.

2790
03:15:00,520 --> 03:15:02,760
Should be public void that balance?

2791
03:15:02,800 --> 03:15:04,160
Yes, it should be relaxed.

2792
03:15:04,160 --> 03:15:06,440
Let's make it public.

2793
03:15:06,960 --> 03:15:09,800
So yes, everyone can access your

2794
03:15:10,920 --> 03:15:15,720
but only and only
if they know the username and password.

2795
03:15:15,800 --> 03:15:18,000
Right.
This is how things work in a real life.

2796
03:15:18,240 --> 03:15:24,200
Everyone can see your balance, but
if they know the username and password you

2797
03:15:25,840 --> 03:15:28,920
everyone can sign up depending upon.

2798
03:15:28,920 --> 03:15:32,760
They don't have any other requirements
that we have to fulfill

2799
03:15:32,760 --> 03:15:35,040
the requirements of the banks

2800
03:15:37,040 --> 03:15:39,440
before we can sign them.

2801
03:15:39,440 --> 03:15:42,840
Before we can sign.

2802
03:15:42,840 --> 03:15:46,760
So now I am inside the same class.

2803
03:15:46,760 --> 03:15:51,280
Now I can.

2804
03:15:51,280 --> 03:15:52,760
I can create this class.

2805
03:15:52,760 --> 03:15:54,400
I've got all

2806
03:15:58,800 --> 03:16:01,800
round one is equal to

2807
03:16:02,640 --> 03:16:03,640
account.

2808
03:16:03,640 --> 03:16:04,120
Okay?

2809
03:16:04,800 --> 03:16:08,280
If I try to access

2810
03:16:09,840 --> 03:16:12,720
the balance directly,

2811
03:16:14,080 --> 03:16:15,880
I will be able to do that.

2812
03:16:15,880 --> 03:16:16,240
Okay?

2813
03:16:16,240 --> 03:16:24,880
I will not be able to do that.

2814
03:16:24,880 --> 03:16:39,880
So if is not allowed.

2815
03:16:39,880 --> 03:16:40,520
Okay.

2816
03:16:40,520 --> 03:16:42,840
But can

2817
03:16:42,840 --> 03:16:44,960
and I

2818
03:16:47,600 --> 03:16:50,880
and I said so first
I need to select at this time.

2819
03:16:50,920 --> 03:16:53,560
At this point I am signing up for my

2820
03:16:54,600 --> 03:16:56,480
username and password. Okay.

2821
03:16:56,480 --> 03:16:58,480
So I pass

2822
03:17:01,440 --> 03:17:02,160
password

2823
03:17:02,160 --> 03:17:05,360
and let's say
let me quickly create a method

2824
03:17:10,480 --> 03:17:11,160
set and

2825
03:17:11,160 --> 03:17:43,200
the password as well.

2826
03:17:43,200 --> 03:17:47,160
So now I have a proper check mechanism

2827
03:17:48,600 --> 03:17:53,000
before I assign values to my field.

2828
03:17:54,480 --> 03:17:57,840
And then maybe, let's say account
balance is

2829
03:17:59,760 --> 03:18:01,240
then. Yeah.

2830
03:18:01,240 --> 03:18:07,040
And then if I want to get the balance

2831
03:18:07,840 --> 03:18:10,000
and if I don't pass the

2832
03:18:11,160 --> 03:18:14,520
proper username and password

2833
03:18:16,560 --> 03:18:19,240
for now, I will get guys

2834
03:18:22,840 --> 03:18:26,920
if I ask a billion here and we didn't
create balance should account.

2835
03:18:27,080 --> 03:18:29,880
Yes, you guys can create more methods.

2836
03:18:30,960 --> 03:18:35,040
By the way,
there is a special name on this.

2837
03:18:35,200 --> 03:18:37,640
There is a special name for these matters.
Okay.

2838
03:18:37,640 --> 03:18:42,480
This sector, the method through
which we set to be valued,

2839
03:18:42,480 --> 03:18:45,640
they are called centers
and the method through

2840
03:18:45,640 --> 03:18:50,040
which we get the values
they are called getter matters.

2841
03:18:50,040 --> 03:18:53,080
I mean, line number nine in

2842
03:18:53,080 --> 03:18:57,720
here, all of the okay

2843
03:18:59,360 --> 03:19:01,120
there.

2844
03:19:01,120 --> 03:19:08,280
Come on.

2845
03:19:08,280 --> 03:19:10,320
That password in is it okay now

2846
03:19:20,240 --> 03:19:22,560
what does your name mean?

2847
03:19:22,560 --> 03:19:24,520
It means

2848
03:19:25,280 --> 03:19:28,440
so there are two brothers

2849
03:19:30,000 --> 03:19:31,560
and a sister

2850
03:19:31,560 --> 03:19:33,920
in Karbala, if you guys know about that.

2851
03:19:33,920 --> 03:19:43,320
So it means small, so younger.

2852
03:19:43,320 --> 03:19:49,640
So what are you guys?

2853
03:19:49,640 --> 03:19:51,840
Yes. Is the youngest son

2854
03:19:52,920 --> 03:19:55,280
was also my grandfather's name.

2855
03:19:55,760 --> 03:19:57,840
Please repeat
what our setters aren't exactly.

2856
03:19:58,320 --> 03:20:01,960
So the method through
which we certainly value

2857
03:20:03,400 --> 03:20:06,240
they are called setters

2858
03:20:06,240 --> 03:20:10,440
and. The method through
which we get the information

2859
03:20:10,440 --> 03:20:21,720
out of that class are called
getters methods.

2860
03:20:21,720 --> 03:20:24,640
I thought it was folder

2861
03:20:24,960 --> 03:20:29,520
Oscar in my language.

2862
03:20:29,520 --> 03:20:34,240
Okay, so I get the user
name on password is not correct.

2863
03:20:34,240 --> 03:20:34,840
Okay.

2864
03:20:34,920 --> 03:20:37,800
If I passed the proper information

2865
03:20:39,880 --> 03:20:45,280
then I see my account balance.

2866
03:20:45,280 --> 03:20:46,080
Okay.

2867
03:20:46,080 --> 03:20:48,720
I see my contacts in the clear. Now guys,

2868
03:20:49,800 --> 03:20:51,400
how we can control

2869
03:20:51,400 --> 03:21:28,320
the flow of information.

2870
03:21:28,320 --> 03:21:42,480
Are there any questions?

2871
03:21:42,480 --> 03:21:46,480
So if you guys have understood it

2872
03:21:46,480 --> 03:21:53,320
properly, can I get more confirmations?

2873
03:21:53,320 --> 03:21:56,480
And then everyone tell me
if you have understood it more

2874
03:21:56,520 --> 03:21:59,840
technically scrolling down?

2875
03:21:59,840 --> 03:22:10,320
Yes, sure.

2876
03:22:10,320 --> 03:22:12,800
It's also. Yes, I think so.

2877
03:22:13,480 --> 03:22:15,920
So congratulation, guys.

2878
03:22:15,920 --> 03:22:21,360
We have covered another class.

2879
03:22:21,360 --> 03:22:24,720
I want to write it down, please.

2880
03:22:24,720 --> 03:22:26,320
I understood the logic. What?

2881
03:22:26,320 --> 03:22:27,120
I got lost.

2882
03:22:27,120 --> 03:22:31,280
I tried danger syntax down.

2883
03:22:31,280 --> 03:22:31,680
What?

2884
03:22:31,880 --> 03:22:37,480
What is my mistake? Yes.

2885
03:22:37,560 --> 03:22:39,480
Maybe with more task, it will be clear.

2886
03:22:39,480 --> 03:22:42,000
Yes, I will be giving you the tasks.

2887
03:22:42,000 --> 03:22:43,680
So I'm not joking.

2888
03:22:43,680 --> 03:22:46,040
Literally. You guys.

2889
03:22:46,040 --> 03:22:46,840
You guys have.

2890
03:22:46,840 --> 03:22:52,200
I think when someone is typing,
long as their heart starts hurting.

2891
03:22:53,560 --> 03:22:57,400
Yes. And then if you are like

2892
03:22:58,760 --> 03:22:59,680
so technically,

2893
03:22:59,680 --> 03:23:03,000
if you guys so
because you guys don't have access

2894
03:23:05,920 --> 03:23:09,520
to these classes

2895
03:23:13,480 --> 03:23:15,720
of learning

2896
03:23:21,160 --> 03:23:25,080
overwriting so can make private first
and then converting

2897
03:23:25,080 --> 03:23:28,160
to public with conditions
and then call on start to see it.

2898
03:23:28,160 --> 03:23:31,280
Yes. Now, are you are you are
you are right

2899
03:23:38,280 --> 03:23:40,920
it is
that class that we have or what I hope

2900
03:23:40,920 --> 03:23:43,200
you guys will forget about this class.

2901
03:23:43,840 --> 03:23:47,280
So we have discovered these concepts.

2902
03:23:47,280 --> 03:23:49,320
They are called encapsulation.

2903
03:23:49,960 --> 03:23:51,200
It is called encapsulation.

2904
03:23:51,200 --> 03:23:52,680
One of the pillars.

2905
03:23:52,680 --> 03:23:55,880
Technically, you guys have covered
a complete pillar of object

2906
03:23:55,880 --> 03:24:00,160
oriented programing.

2907
03:24:00,160 --> 03:24:00,720
Okay,

2908
03:24:01,440 --> 03:24:04,400
So let's let's start the class

2909
03:24:04,400 --> 03:24:10,120
number three.

2910
03:24:10,120 --> 03:24:11,520
Right? Look at you typing.

2911
03:24:11,520 --> 03:24:18,320
I am a little slow
so you guys can always stop me. No.

2912
03:24:18,720 --> 03:24:21,360
So you are not you happy

2913
03:24:21,360 --> 03:24:26,080
that you have covered like, two classes
and now we are about to learn

2914
03:24:26,880 --> 03:24:33,640
the third class?

2915
03:24:33,640 --> 03:24:35,960
Yes. Let's have a break as well. Okay.

2916
03:24:36,920 --> 03:24:39,600
Now I
think it's better to do more examples.

2917
03:24:39,600 --> 03:24:41,240
Going to next class?

2918
03:24:41,240 --> 03:24:45,200
Yes, we will be doing examples.

2919
03:24:45,760 --> 03:24:48,360
So here are three examples.

2920
03:24:48,360 --> 03:24:53,680
Let's so try to follow them.

2921
03:24:53,680 --> 03:24:57,280
And then after the break,
I will follow them with you.

2922
03:24:58,920 --> 03:25:01,680
What is my error

2923
03:25:03,040 --> 03:25:03,680
account?

2924
03:25:03,680 --> 03:25:11,120
Lunch or set password? Oh,

2925
03:25:12,600 --> 03:25:14,880
it is the start password method.

2926
03:25:14,880 --> 03:25:18,840
You don't have your defined
that start password matter.

2927
03:25:18,840 --> 03:25:21,880
I am confused with Lobo

2928
03:25:22,440 --> 03:25:31,400
so let me post this tasks in here.

2929
03:25:31,400 --> 03:25:36,640
So first is create a matter
that will accept an array as parameters.

2930
03:25:36,640 --> 03:25:40,400
It will return
is sum of all elements from that adding

2931
03:25:41,400 --> 03:25:45,760
method is sure to be visible
only within same package

2932
03:25:46,000 --> 03:25:48,960
and accessible by creating an instance.

2933
03:25:50,000 --> 03:25:52,840
Create a matter
that will take a staying as parameter

2934
03:25:52,840 --> 03:25:54,640
and return the reverse strings.

2935
03:25:54,640 --> 03:25:55,920
So you guys have already

2936
03:25:56,880 --> 03:25:59,040
created these methods.

2937
03:25:59,040 --> 03:26:02,920
So we are just retyping these methods
with,

2938
03:26:04,680 --> 03:26:06,600
with these access

2939
03:26:08,720 --> 03:26:10,920
methods should be available to all classes

2940
03:26:10,920 --> 03:26:14,960
within your project
and accessible by class name.

2941
03:26:15,080 --> 03:26:15,480
Okay.

2942
03:26:15,480 --> 03:26:19,720
I should be able to call that method
by only class name

2943
03:26:20,920 --> 03:26:25,640
creating method
that will spring as AP parameter

2944
03:26:26,320 --> 03:26:30,400
and return
your string that consists only of vowels.

2945
03:26:30,880 --> 03:26:34,440
Method should be available
inside the class only where it is

2946
03:26:34,440 --> 03:26:42,160
declared and executed by calling its name.

2947
03:26:42,160 --> 03:26:45,360
So let's have a 30 minute break.

2948
03:26:46,920 --> 03:26:47,520
Okay.

2949
03:26:47,520 --> 03:26:51,680
And after the break, I try to complete

2950
03:26:51,680 --> 03:26:53,960
as many tasks as you guys can.

2951
03:26:54,680 --> 03:26:58,000
And then after the break, I will be going
these tasks

2952
03:26:58,680 --> 03:27:01,200
and then if we are left with time.

2953
03:27:01,200 --> 03:27:03,120
So I was just kidding.

2954
03:27:03,120 --> 03:27:06,560
Then if we are left with time,
then we will start of the next class.

2955
03:27:06,560 --> 03:27:08,680
Okay, We are still on the class.

2956
03:27:08,680 --> 03:27:13,680
Same class that we were supposed to learn
can please display the account page

2957
03:27:17,280 --> 03:27:23,160
s okay.

2958
03:27:23,200 --> 03:27:24,520
Can we be on break?

2959
03:27:24,520 --> 03:27:38,640
Any questions?

2960
03:27:38,640 --> 03:27:42,120
There's almost 147 so

2961
03:27:43,680 --> 03:27:46,120
we'll be back by one p

2962
03:27:48,000 --> 03:28:55,040
in try to solve these tasks.

2963
03:28:55,040 --> 03:28:57,360
I am missing some words for the account.

2964
03:28:57,360 --> 03:29:00,400
Can you extend the page so I can copy?

2965
03:29:00,440 --> 03:29:07,240
Yes Yes.

2966
03:29:07,240 --> 03:29:19,040
Is it better now?

2967
03:29:19,040 --> 03:29:21,360
Maybe it is back now.

2968
03:29:22,720 --> 03:29:24,920
Then I see the entire account page.

2969
03:29:25,480 --> 03:29:43,080
Yes Yes, all our days.

2970
03:29:43,320 --> 03:29:46,440
So try to see all these examples
and then we will be back

2971
03:29:48,000 --> 03:29:51,440
and remind you about the recording

2972
03:29:53,120 --> 03:29:58,640
I'm recording out.

2973
03:29:58,640 --> 03:30:00,720
So who was that?

2974
03:30:01,040 --> 03:30:05,440
Who was the guy that should remind me
about the recording?

2975
03:30:05,440 --> 03:30:07,000
We want to focus

2976
03:30:10,480 --> 03:30:11,960
fired over

2977
03:30:11,960 --> 03:30:16,800
and over should remind me.

2978
03:30:16,800 --> 03:30:19,040
James Bagels. So

2979
03:30:21,600 --> 03:30:22,080
tangled

2980
03:30:22,080 --> 03:30:25,720
we were all this use less memory
than a loop.

2981
03:30:25,720 --> 03:30:33,240
Yes, less memory and less CPU power.

2982
03:30:33,240 --> 03:30:37,880
So on this line, guys,
what I am doing on this line.

2983
03:30:38,520 --> 03:30:41,960
So the part that I have highlighted here,
what I am doing in here,

2984
03:30:42,000 --> 03:30:43,680
what do we call this? So

2985
03:30:52,200 --> 03:30:54,280
I am writing new keyword,

2986
03:30:54,280 --> 03:30:58,120
the name of the class and parentheses,

2987
03:30:58,120 --> 03:31:00,040
what do we call it

2988
03:31:07,200 --> 03:31:08,800
matter?

2989
03:31:08,800 --> 03:31:12,360
How do we create an object

2990
03:31:13,080 --> 03:31:16,920
builder?

2991
03:31:16,920 --> 03:31:21,320
Oh, I think I need to go through
all the concepts.

2992
03:31:21,320 --> 03:31:23,240
If you guys

2993
03:31:23,440 --> 03:31:26,680
want to remember how to create the object

2994
03:31:26,680 --> 03:31:29,520
So remember
whenever we add will be a new keyword.

2995
03:31:29,520 --> 03:31:31,040
You are

2996
03:31:32,400 --> 03:31:35,120
you are creating object.

2997
03:31:35,120 --> 03:31:36,160
No, nobody is.

2998
03:31:36,160 --> 03:31:38,360
Nobody is. All right.

2999
03:31:39,880 --> 03:31:44,120
So once I have the object, okay, once
I have the object,

3000
03:31:44,640 --> 03:31:47,280
then I am calling

3001
03:31:47,280 --> 03:31:51,400
this reverse method on that object.

3002
03:31:51,400 --> 03:31:52,240
Okay.

3003
03:31:52,400 --> 03:31:56,040
And then using the method gaining,
I am calling another method

3004
03:31:56,040 --> 03:31:59,360
that will convert the resource
to the whole thing.

3005
03:31:59,360 --> 03:32:02,960
Is there anyone who don't understand
how this is working

3006
03:32:04,560 --> 03:32:05,520
but maybe want to?

3007
03:32:05,520 --> 03:32:07,720
Maybe you want me to write it

3008
03:32:08,440 --> 03:32:12,480
in a simpler way, the way that you guys
have been writing code

3009
03:32:12,720 --> 03:32:14,800
so that you guys can compare
what is going on?

3010
03:32:14,840 --> 03:32:18,360
Do you guys want me to write it in
in an open, simpler way

3011
03:32:19,320 --> 03:32:21,600
so that you guys can understand
what is on?

3012
03:32:22,120 --> 03:32:22,720
All right.

3013
03:32:22,880 --> 03:32:26,400
So if you are not using the method
chaining, this is how you guys

3014
03:32:26,400 --> 03:32:27,600
will be doing it.

3015
03:32:27,600 --> 03:32:31,080
You guys will be
writing a lot of code string

3016
03:32:32,160 --> 03:32:37,200
builder. So

3017
03:32:38,440 --> 03:32:40,400
if you don't understand
something you guys have

3018
03:32:40,400 --> 03:32:43,760
prepared, are

3019
03:32:46,960 --> 03:32:49,800
there is to the new

3020
03:32:51,760 --> 03:32:56,880
thing builder then say and then you pass

3021
03:32:58,400 --> 03:33:00,520
this SDR in here

3022
03:33:01,280 --> 03:33:03,480
and then you see SDR

3023
03:33:05,080 --> 03:33:07,800
build a lot of the words

3024
03:33:08,000 --> 03:33:10,840
All right And you store back

3025
03:33:12,040 --> 03:33:12,600
Sorry.

3026
03:33:12,600 --> 03:33:14,320
And then

3027
03:33:14,920 --> 03:33:16,600
you see

3028
03:33:21,360 --> 03:33:22,520
being

3029
03:33:25,480 --> 03:33:28,240
your SDR is equal to

3030
03:33:31,040 --> 03:33:33,920
the are builder

3031
03:33:35,640 --> 03:33:38,480
board to being

3032
03:33:38,520 --> 03:33:41,400
and then you say, well return

3033
03:33:43,520 --> 03:33:46,080
new SDR.

3034
03:33:46,160 --> 03:33:56,280
Okay, so this is how you guys will do it.

3035
03:33:56,280 --> 03:33:59,800
And if you guys are not using method

3036
03:33:59,840 --> 03:34:00,800
changing

3037
03:34:09,840 --> 03:34:12,480
like this, it's better now,

3038
03:34:13,200 --> 03:34:17,240
then you check line,
then the reverse spelling.

3039
03:34:17,240 --> 03:34:20,520
If okay

3040
03:34:21,960 --> 03:34:23,960
line, then

3041
03:34:24,240 --> 03:34:29,960
this one.

3042
03:34:29,960 --> 03:34:33,240
Do you sure that we will unders understand

3043
03:34:33,480 --> 03:34:36,880
what is going on

3044
03:34:36,880 --> 03:34:38,760
already? Then if you are asking me

3045
03:34:39,920 --> 03:34:45,600
if I if I
am sure if you guys understand it or not.

3046
03:34:45,800 --> 03:34:49,680
So I get it from your responses there,
how I do it.

3047
03:34:49,680 --> 03:34:54,560
If you guys are understanding
something or not, you are missing an E

3048
03:34:54,600 --> 03:34:59,800
in reverse.

3049
03:34:59,800 --> 03:35:03,280
You guys are talking to me
or I'm replying to

3050
03:35:03,360 --> 03:35:07,200
someone on internet
or something like that.

3051
03:35:07,200 --> 03:35:11,080
Or you mean the name of the method?

3052
03:35:11,080 --> 03:35:16,680
Oh my God, you guys are so perfect, man.

3053
03:35:16,680 --> 03:35:20,240
This is just a method
like where I want you to focus.

3054
03:35:20,280 --> 03:35:23,440
You guys are not focusing on it
and you are all focusing

3055
03:35:23,440 --> 03:35:35,400
on the name of that method.

3056
03:35:35,400 --> 03:35:36,320
All right, Perfect.

3057
03:35:36,320 --> 03:35:45,480
Brad, let me.

3058
03:35:45,480 --> 03:35:50,560
It is better now.

3059
03:35:50,560 --> 03:35:55,640
This is I see a lot of grammar police
on Facebook as well, too.

3060
03:35:55,640 --> 03:35:58,280
People are fighting
on a long, long connect.

3061
03:35:59,800 --> 03:36:00,840
We want

3062
03:36:00,840 --> 03:36:04,440
to make sure you're still working the.

3063
03:36:04,440 --> 03:36:05,240
All right.

3064
03:36:05,240 --> 03:36:08,520
So let me

3065
03:36:10,160 --> 03:36:12,200
the unit

3066
03:36:15,320 --> 03:36:17,760
ask the tool.

3067
03:36:18,160 --> 03:36:31,760
Okay.

3068
03:36:31,760 --> 03:36:35,280
How can we pass the interviews?

3069
03:36:35,280 --> 03:36:37,480
So you you look in ahead.

3070
03:36:37,480 --> 03:36:41,040
I think if you still have
to learn the performance,

3071
03:36:41,400 --> 03:36:45,400
okay, then you have to do so many things.

3072
03:36:45,400 --> 03:36:47,760
Then you will be filling ten interviews

3073
03:36:48,320 --> 03:36:51,120
and then you will know
how to pass the interview.

3074
03:36:51,320 --> 03:36:54,480
Okay.

3075
03:36:54,480 --> 03:36:56,960
So you are to pass the interview, right?

3076
03:36:56,960 --> 03:37:02,480
Right now you are you don't even know
about selenium cucumber test and.

3077
03:37:02,480 --> 03:37:07,120
The databases API is a w as

3078
03:37:08,280 --> 03:37:10,680
not with this performance for sure.

3079
03:37:10,720 --> 03:37:13,560
Only ten years on average, only ten

3080
03:37:16,760 --> 03:37:19,720
so fast to

3081
03:37:19,720 --> 03:37:22,840
ask for it. So

3082
03:37:26,000 --> 03:37:28,360
and then I can

3083
03:37:32,240 --> 03:37:34,760
two or

3084
03:37:35,040 --> 03:37:39,760
three works of string.

3085
03:37:39,760 --> 03:37:41,760
And at the moment it made a small

3086
03:37:52,320 --> 03:37:55,480
Asia. So

3087
03:37:55,480 --> 03:37:56,680
let me tell you this.

3088
03:37:56,680 --> 03:37:58,760
The students believe me, the students

3089
03:37:59,800 --> 03:38:02,760
actually,
I don't want to tell you guys this because

3090
03:38:03,040 --> 03:38:07,560
then you guys will not be focusing.

3091
03:38:07,560 --> 03:38:10,800
But sometimes what happens is that

3092
03:38:11,200 --> 03:38:13,680
some of the companies,
they they will not be asking you

3093
03:38:13,680 --> 03:38:18,280
about decoding test, but definitely
they will be interviewing you.

3094
03:38:19,040 --> 03:38:23,520
And you guys don't have the right and
it goes and then you can also get a job.

3095
03:38:23,880 --> 03:38:24,360
Okay.

3096
03:38:25,040 --> 03:38:29,880
But indefinitely, even if you get a job
and if you are unable to perform

3097
03:38:29,880 --> 03:38:32,280
on their job, then then there is no point

3098
03:38:33,040 --> 03:38:38,760
that they will find you.

3099
03:38:38,760 --> 03:38:44,120
And I have seen that as well.

3100
03:38:44,120 --> 03:38:44,520
Yeah.

3101
03:38:45,360 --> 03:38:47,760
Are there any questions from this
task to guys

3102
03:38:53,640 --> 03:38:54,400
here to face

3103
03:38:54,400 --> 03:38:58,240
and voice change
by the time it is my interview time?

3104
03:38:58,920 --> 03:39:05,840
Yes. Maybe I have to contact my six.

3105
03:39:05,840 --> 03:39:09,240
We will send me that list of jobs better

3106
03:39:09,240 --> 03:39:13,960
if with article and no questions about me.

3107
03:39:13,960 --> 03:39:16,000
Your robotics project

3108
03:39:22,320 --> 03:39:24,600
now. Yes, guys, it's not about

3109
03:39:25,200 --> 03:39:29,000
get your the job, it's
about sustain doing their job as well.

3110
03:39:29,560 --> 03:39:34,560
Can you tell some people from previous
batch again and talk about interviews?

3111
03:39:35,040 --> 03:39:37,120
Yes, maybe.

3112
03:39:37,120 --> 03:39:38,360
Okay. So tomorrow.

3113
03:39:38,360 --> 03:39:41,240
So maybe we remind me
we can invite some students

3114
03:39:42,560 --> 03:39:44,880
in the next week, especially the ladies

3115
03:39:46,440 --> 03:39:46,840
out there.

3116
03:39:46,840 --> 03:39:50,400
Any questions from the staff guys?

3117
03:39:50,400 --> 03:39:58,400
I am.

3118
03:39:58,400 --> 03:40:01,480
And at this time,
I will be giving you at least one hour.

3119
03:40:01,560 --> 03:40:02,040
Okay.

3120
03:40:02,040 --> 03:40:05,560
So last time I was feeling,
I was bothering, actually,

3121
03:40:06,000 --> 03:40:09,520
and I had to close that class.

3122
03:40:10,080 --> 03:40:13,560
So no questions.

3123
03:40:13,600 --> 03:40:19,960
All right,
let's let's move to their next. Yes.

3124
03:40:20,400 --> 03:40:23,560
Like when you deliver a five hour plus,

3125
03:40:23,560 --> 03:40:28,560
even if you eat before the class,
all that is gone.

3126
03:40:30,240 --> 03:40:34,200
I eat before and after the class.

3127
03:40:34,200 --> 03:40:40,200
And at least three, 3
to 4 liters of water.

3128
03:40:40,200 --> 03:40:46,920
Speaking for 5 hours is not easy,

3129
03:40:46,920 --> 03:40:52,080
especially when the grammar masters
are sitting in front of you again.

3130
03:40:52,080 --> 03:40:57,560
Who can in seconds can detect if you are
making a spelling mistake or not.

3131
03:40:57,560 --> 03:40:59,480
Right. We have to be very

3132
03:41:00,840 --> 03:41:01,440
attentive.

3133
03:41:01,440 --> 03:41:02,280
As with

3134
03:41:06,720 --> 03:41:08,920
all like so

3135
03:41:09,640 --> 03:41:23,320
let me close this task.

3136
03:41:23,320 --> 03:41:24,480
All right?

3137
03:41:25,320 --> 03:41:27,320
So don't worry about it.

3138
03:41:27,320 --> 03:41:30,320
I loved how you said all my

3139
03:41:33,880 --> 03:41:36,040
grammar will be good

3140
03:41:36,720 --> 03:41:38,560
during the interviews.

3141
03:41:38,560 --> 03:41:39,560
All right.

3142
03:41:39,560 --> 03:41:42,120
So create a method

3143
03:41:42,720 --> 03:41:46,640
that will accept string as a parameter
and return

3144
03:41:46,840 --> 03:41:50,120
new string that consists only of flowers.

3145
03:41:51,040 --> 03:41:55,320
Method should be available
inside the class.

3146
03:41:55,320 --> 03:41:56,520
Only.

3147
03:41:56,520 --> 03:41:59,520
So what should be the

3148
03:42:03,400 --> 03:42:04,320
up? Please don't.

3149
03:42:04,320 --> 03:42:06,400
Don't talk about food.

3150
03:42:06,520 --> 03:42:09,160
Believe me, right now I am again.

3151
03:42:09,160 --> 03:42:10,800
It's like 10 minutes.

3152
03:42:10,800 --> 03:42:14,400
My food is ready and it's in front of me.

3153
03:42:15,560 --> 03:42:19,280
So let me please complete this task
and then we can discuss

3154
03:42:19,280 --> 03:42:21,720
about peas and burgers and all that.

3155
03:42:23,520 --> 03:42:28,440
So what should be the excess modifier?

3156
03:42:28,440 --> 03:42:31,200
It should be private, right?

3157
03:42:31,320 --> 03:42:35,320
Because we want it
to be only, only accessible

3158
03:42:37,880 --> 03:42:39,600
inside the class.

3159
03:42:39,600 --> 03:42:41,040
Again, lunch break.

3160
03:42:41,040 --> 03:42:41,880
Take us out.

3161
03:42:41,880 --> 03:42:45,280
No, but the muscle.

3162
03:42:45,880 --> 03:42:47,160
But I can't

3163
03:42:48,960 --> 03:42:50,240
get GI.

3164
03:42:50,240 --> 03:42:50,920
Okay.

3165
03:42:50,920 --> 03:42:54,120
If that's the study and guys

3166
03:42:54,160 --> 03:42:57,840
don't want to understand it.

3167
03:42:57,840 --> 03:42:58,200
All right.

3168
03:42:58,200 --> 03:43:02,680
So private and then method
should be available inside the class

3169
03:43:02,680 --> 03:43:06,880
only where it was declared
and executing by calling

3170
03:43:08,640 --> 03:43:09,960
it its name.

3171
03:43:09,960 --> 03:43:14,880
So should I make it static
or should I make it instance

3172
03:43:15,960 --> 03:43:18,880
s out translate.

3173
03:43:18,880 --> 03:43:22,400
So, Sebastian,
do you know about cracker and B?

3174
03:43:22,400 --> 03:43:25,760
It's is almost all the Asian countries
they have

3175
03:43:25,880 --> 03:43:28,360
this standard breakfast

3176
03:43:28,880 --> 03:43:32,640
in which they take the bread,
they put some oil,

3177
03:43:32,840 --> 03:43:37,160
and then they kind of put
that bread, that oil,

3178
03:43:37,320 --> 03:43:40,440
they cook it for 5 to 10 minutes
and then they make

3179
03:43:40,440 --> 03:43:43,240
they make David did

3180
03:43:43,440 --> 03:43:44,440
not garlic

3181
03:43:45,400 --> 03:43:49,840
and then they enjoyed a lot.

3182
03:43:49,840 --> 03:43:50,280
Yeah.

3183
03:43:50,280 --> 03:43:56,040
Here we go.

3184
03:43:56,040 --> 03:44:01,280
And sometimes they stuff it with potatoes
and other vegetables.

3185
03:44:01,560 --> 03:44:04,920
Oh, my God. It's so tasty.

3186
03:44:04,920 --> 03:44:08,360
Oh, so what should be the non

3187
03:44:08,360 --> 03:44:11,880
excess modified guys.

3188
03:44:11,880 --> 03:44:14,120
Should I put static
or there should be instance

3189
03:44:19,080 --> 03:44:20,520
remember guys.

3190
03:44:20,520 --> 03:44:23,360
So if I am calling this method

3191
03:44:23,360 --> 03:44:26,920
inside this class, what do I need?

3192
03:44:27,360 --> 03:44:35,640
Do I need a main method inside this class?

3193
03:44:35,640 --> 03:44:39,480
If I am going to call this method inside

3194
03:44:39,480 --> 03:44:42,640
this class, will
I be needing the main method?

3195
03:44:43,560 --> 03:44:49,440
Yes, I will be needing.

3196
03:44:49,440 --> 03:44:52,640
I will be needing.

3197
03:44:52,640 --> 03:44:54,040
Not again.

3198
03:44:54,640 --> 03:44:57,000
Oh, because there is this private

3199
03:44:58,480 --> 03:45:02,440
well and place.

3200
03:45:02,440 --> 03:45:03,120
Thank you.

3201
03:45:03,800 --> 03:45:09,480
So this main method is a static method.

3202
03:45:10,560 --> 03:45:12,640
This main method is a starting method

3203
03:45:12,640 --> 03:45:16,960
and I want to call this method
by calling its name.

3204
03:45:16,960 --> 03:45:21,600
Can I call the instance method by its name

3205
03:45:21,600 --> 03:45:30,480
only inside the static method? No.

3206
03:45:30,480 --> 03:45:39,400
So what should I do then?

3207
03:45:39,400 --> 03:45:42,960
I should make that method

3208
03:45:45,120 --> 03:45:47,440
static as well.

3209
03:45:47,440 --> 03:45:50,040
Okay.

3210
03:45:50,040 --> 03:45:51,840
And then

3211
03:46:02,480 --> 03:46:03,560
all loop

3212
03:46:05,040 --> 03:46:08,040
process string

3213
03:46:11,160 --> 03:46:13,600
or turbidity parameters, get it in here.

3214
03:46:13,600 --> 03:46:26,520
So it should be a string

3215
03:46:26,800 --> 03:46:30,760
here.

3216
03:46:30,760 --> 03:46:33,560
And again,

3217
03:46:33,560 --> 03:46:36,200
see was method changing.

3218
03:46:36,680 --> 03:46:40,440
I was said at one
that I was not able to do this task, but

3219
03:46:40,440 --> 03:46:43,560
I am going to happy, which was complicated
for the entire class.

3220
03:46:44,760 --> 03:46:46,640
The written

3221
03:46:46,640 --> 03:46:50,200
SDR thought which method I should use

3222
03:46:50,200 --> 03:46:53,800
if I only launched the was from that

3223
03:46:54,240 --> 03:46:59,640
that string.

3224
03:46:59,640 --> 03:47:02,600
Oh yes. The data type as well. Right.

3225
03:47:02,600 --> 03:47:05,760
I should be having the string replace
or replace

3226
03:47:05,760 --> 03:47:37,480
all the replace or

3227
03:47:41,880 --> 03:47:42,680
no the me.

3228
03:47:42,680 --> 03:47:46,040
I cannot use both
because I want to process

3229
03:47:46,040 --> 03:47:49,320
the individual characters.

3230
03:47:49,320 --> 03:47:52,680
I mean you will be
you have the right to a lot of method

3231
03:47:52,680 --> 03:47:56,640
changing
if you are using the replacement card.

3232
03:47:57,240 --> 03:48:00,000
Okay so how do I

3233
03:48:00,600 --> 03:48:04,800
what do I specify in
as the first parameter?

3234
03:48:04,800 --> 03:48:05,720
What is it called?

3235
03:48:05,720 --> 03:48:09,160
Life? Yes.

3236
03:48:09,400 --> 03:48:17,840
Next we can use the lowercase.

3237
03:48:17,840 --> 03:48:19,720
What do we call this frog?

3238
03:48:19,720 --> 03:48:25,560
What is the term for this?

3239
03:48:25,560 --> 03:48:27,840
So we want to replace

3240
03:48:29,520 --> 03:48:31,720
everything

3241
03:48:33,560 --> 03:48:35,360
other than

3242
03:48:43,920 --> 03:48:49,240
lowercase AP, IOU and uppercase IOU.

3243
03:48:49,320 --> 03:48:51,320
So this is called

3244
03:48:52,240 --> 03:48:53,880
the regular expression.

3245
03:48:53,880 --> 03:48:56,600
Okay, So this thing that I am passing as

3246
03:48:57,080 --> 03:49:00,400
the first parameter,
it's the regular expression, right?

3247
03:49:00,760 --> 03:49:04,280
And I am replace everything

3248
03:49:05,080 --> 03:49:08,480
other than lowercase and uppercase.

3249
03:49:08,480 --> 03:49:14,280
E I also like inside this string
that I am passing in here.

3250
03:49:14,400 --> 03:49:17,880
Okay, that's it.

3251
03:49:18,640 --> 03:49:20,920
Does it make sense
or do you guys want me to

3252
03:49:22,440 --> 03:49:25,200
rewrite the logic for this method

3253
03:49:27,720 --> 03:49:28,760
in a different way?

3254
03:49:28,760 --> 03:49:30,160
Is it understandable?

3255
03:49:30,160 --> 03:49:31,320
The method

3256
03:49:31,760 --> 03:49:45,840
that I am using in here?

3257
03:49:45,840 --> 03:49:48,200
Oh, replace with nothing.

3258
03:49:48,440 --> 03:49:55,240
This. Yes.

3259
03:49:55,240 --> 03:49:57,880
Write it in a different way.

3260
03:49:57,880 --> 03:50:00,840
So, Lenny, what should I write in
and in different way?

3261
03:50:00,840 --> 03:50:04,120
I declare a variable and store the results
and then return it

3262
03:50:06,560 --> 03:50:10,520
like this.

3263
03:50:10,520 --> 03:50:13,200
Because that's what we are doing.

3264
03:50:14,200 --> 03:50:17,600
Saying new SDR is equal to this.

3265
03:50:18,440 --> 03:50:19,640
Okay?

3266
03:50:19,640 --> 03:50:21,720
And then we return

3267
03:50:23,240 --> 03:50:30,520
a string after
they're set on only one line.

3268
03:50:30,520 --> 03:50:34,360
And now I can call this method

3269
03:50:35,200 --> 03:50:38,760
with by just typing its name.

3270
03:50:38,760 --> 03:50:59,440
Okay.

3271
03:50:59,440 --> 03:51:00,360
All right.

3272
03:51:00,360 --> 03:51:02,760
So we get a box and look easy.

3273
03:51:03,320 --> 03:51:06,160
Is it does it make sense?

3274
03:51:06,160 --> 03:51:08,080
You used

3275
03:51:10,480 --> 03:51:11,600
square brackets. So.

3276
03:51:11,600 --> 03:51:15,120
Muhammad, these square brackets,
they are used to specify

3277
03:51:15,120 --> 03:51:20,440
a regular expressions,
these square brackets in here.

3278
03:51:21,040 --> 03:51:23,520
I hope you guys
have not forget about this.

3279
03:51:24,160 --> 03:51:32,400
They are the syntax
of regular expressions.

3280
03:51:32,400 --> 03:51:35,400
Is it clear now, Muhammad

3281
03:51:45,400 --> 03:51:47,080
defined regular expression?

3282
03:51:47,080 --> 03:51:48,760
Please, please.

3283
03:51:49,040 --> 03:51:51,240
Did you did you attend the class on Sphinx

3284
03:51:55,680 --> 03:51:55,920
then?

3285
03:51:55,920 --> 03:52:12,480
Then why are you don't remember
about the regular expressions?

3286
03:52:12,480 --> 03:52:14,240
That's they're alarming, by the way.

3287
03:52:14,240 --> 03:52:17,880
I think the regular expressions
were just like two classes before.

3288
03:52:19,440 --> 03:52:22,080
Okay, clearly we don't remember anything.

3289
03:52:23,120 --> 03:52:26,600
So that means you guys are not not paying

3290
03:52:26,600 --> 03:52:30,320
the attention.

3291
03:52:30,320 --> 03:52:38,000
I could blame my own surprise party.

3292
03:52:38,000 --> 03:52:41,560
Or you could also execute this method
in at best, the class.

3293
03:52:41,560 --> 03:52:44,040
No, we cannot do that.

3294
03:52:44,040 --> 03:52:48,080
And let because the access modifier

3295
03:52:48,080 --> 03:52:51,520
it is private.

3296
03:52:51,520 --> 03:52:54,480
Seems like I follow
that regular expression too.

3297
03:52:55,360 --> 03:52:58,080
So this is where
you guys have to be efforts.

3298
03:52:58,080 --> 03:53:07,800
I think we need to get starting
and read them all lowercase,

3299
03:53:07,800 --> 03:53:13,680
so try to spend some time on the slides
guys.

3300
03:53:13,680 --> 03:53:16,160
I understand to ask in a different way.

3301
03:53:17,080 --> 03:53:19,680
That's fine. Alex

3302
03:53:22,560 --> 03:53:23,560
Are there any questions,

3303
03:53:23,560 --> 03:53:45,560
guys, I don't understand.

3304
03:53:45,720 --> 03:53:47,800
It works. So, Alex,

3305
03:53:48,480 --> 03:53:51,160
in here, in the regular expressions,

3306
03:53:51,160 --> 03:53:55,000
we are saying that if this string

3307
03:53:56,640 --> 03:54:00,360
has any of these letters,

3308
03:54:01,800 --> 03:54:03,840
don't replace them

3309
03:54:03,840 --> 03:54:06,200
otherwise replace all the letter.

3310
03:54:06,200 --> 03:54:08,280
So there's no sign.

3311
03:54:08,280 --> 03:54:13,280
It means replace everything,
but not these characters.

3312
03:54:13,280 --> 03:54:15,560
So in my name there was this error.

3313
03:54:15,600 --> 03:54:19,640
So I specified this in here,
I specified this

3314
03:54:19,800 --> 03:54:23,360
lowercase a, but there was no s d and odd.

3315
03:54:23,800 --> 03:54:26,600
So those s d at

3316
03:54:26,640 --> 03:54:29,040
the end are have been replaced

3317
03:54:29,640 --> 03:54:31,800
by nothing in here

3318
03:54:32,200 --> 03:54:35,640
and therefore I get this uppercase A
and see

3319
03:54:36,720 --> 03:54:39,440
where it was declared
and executed by calling its name.

3320
03:54:39,440 --> 03:54:43,720
Can you elaborate more on this part
from task three?

3321
03:54:43,720 --> 03:54:49,840
So you guys see, I am only calling this
method by specifying its name.

3322
03:54:49,880 --> 03:54:52,320
I'm not using the class
name. I'm not using.

3323
03:54:52,320 --> 03:54:54,400
I'm not creating any object.

3324
03:54:54,400 --> 03:54:56,440
This is what it means.

3325
03:54:56,720 --> 03:55:04,880
So that's why I created this static.

3326
03:55:04,880 --> 03:55:09,480
Where is the mean from Merriam?

3327
03:55:09,480 --> 03:55:13,200
But can't we go it
like private and then make it public,

3328
03:55:15,080 --> 03:55:18,000
make it fast, make it private,
then make it public

3329
03:55:18,520 --> 03:55:22,520
with default condition
and then call it Why, why, why?

3330
03:55:22,520 --> 03:55:24,480
If those conditions

3331
03:55:39,320 --> 03:55:40,680
like we learned before

3332
03:55:40,680 --> 03:55:45,200
and use the name now,
that was far variables.

3333
03:55:45,400 --> 03:55:48,120
Some method that was for variables.

3334
03:55:48,120 --> 03:55:49,800
It's a method

3335
03:56:05,560 --> 03:56:06,440
so mirror

3336
03:56:06,440 --> 03:56:10,000
you have forgot to specify the scatter
symbol.

3337
03:56:11,560 --> 03:56:13,840
Make sure you have the scattered

3338
03:56:18,440 --> 03:56:18,840
and x.

3339
03:56:18,840 --> 03:56:20,440
Do you understand it now?

3340
03:56:20,440 --> 03:56:23,360
Why on ripple are not tasked with

3341
03:56:24,560 --> 03:56:27,200
lot or types and access modifiers?

3342
03:56:27,440 --> 03:56:29,080
So because we have learned it today.

3343
03:56:29,080 --> 03:56:32,160
So now I will be releasing the labels

3344
03:56:32,160 --> 03:56:36,320
related to variables and access modifiers.

3345
03:56:36,320 --> 03:56:39,440
Not in make sure you have this
scattered symbol, not symbol

3346
03:56:40,080 --> 03:56:53,680
in here.

3347
03:56:53,680 --> 03:56:56,040
Please tell me what task that was about.

3348
03:56:56,040 --> 03:57:03,560
What we need to be done so Task
three was about replacing everything

3349
03:57:03,560 --> 03:57:06,720
inside a string, but not

3350
03:57:07,560 --> 03:57:10,320
D is electives, naughties marbles.

3351
03:57:10,360 --> 03:57:11,520
That was the task. Three.

3352
03:57:12,840 --> 03:57:13,160
I'm going

3353
03:57:13,160 --> 03:57:33,560
to share the screenshot again.

3354
03:57:33,560 --> 03:57:41,400
Yes. All right.

3355
03:57:41,640 --> 03:57:47,640
Oh, so those we want to leave.

3356
03:57:47,640 --> 03:57:51,360
You guys can leave those who have
some questions that you guys can stay.

3357
03:57:51,360 --> 03:57:53,840
We will not be learning new things.

3358
03:57:53,840 --> 03:57:57,120
I will only be answering the questions
if you guys have any.

3359
03:57:57,120 --> 03:57:58,560
It was the task and we are.

3360
03:57:58,560 --> 03:58:00,600
It's info about this letter.

3361
03:58:00,640 --> 03:58:03,240
Oh, so, Alex,
these letters, they are called

3362
03:58:04,560 --> 03:58:05,560
these letters.

3363
03:58:05,560 --> 03:58:20,520
They are called vowels in English.

3364
03:58:20,520 --> 03:58:23,040
These letters, they are always

3365
03:58:23,040 --> 03:58:25,320
made by

3366
03:58:25,560 --> 03:58:26,240
Owen.

3367
03:58:26,240 --> 03:58:29,880
Is it, is it clear now
prior to circuit test, prior to search.

3368
03:58:29,880 --> 03:58:32,360
What are what was in English

3369
03:58:51,120 --> 03:58:52,440
thou borrowed from me?

3370
03:58:52,440 --> 03:58:53,080
Alex.

3371
03:58:53,080 --> 03:58:58,800
I don't know what the word it means,

3372
03:58:58,800 --> 03:59:03,960
but I take some last guys
and try to revise the concepts.

3373
03:59:04,080 --> 03:59:04,520
Okay?

3374
03:59:05,720 --> 03:59:06,880
To get rid

3375
03:59:06,880 --> 03:59:10,800
to me.

3376
03:59:10,800 --> 03:59:13,600
Like, I mean,

3377
03:59:13,600 --> 03:59:16,360
I do have this symbol,
but it prints again.

3378
03:59:16,360 --> 03:59:18,280
All are all online.

3379
03:59:18,280 --> 03:59:18,600
That's it.

3380
03:59:18,600 --> 03:59:20,400
Boston, This board and

3381
03:59:20,600 --> 03:59:22,280
I will help you out

3382
03:59:23,000 --> 03:59:25,000
what is being imported. And from there.

3383
03:59:25,040 --> 03:59:27,720
Oh, it's just a mistake. Let me move it.

3384
03:59:28,240 --> 03:59:35,520
Then you'll know
you guys don't have any homework,

3385
03:59:35,760 --> 03:59:39,400
so try to revise the concepts
from previous.

3386
03:59:39,400 --> 03:59:41,760
It's very, very important.

3387
03:59:41,760 --> 03:59:45,440
Otherwise there all will be there.

3388
03:59:45,480 --> 03:59:47,680
There will be no benefit of spending.

3389
03:59:48,200 --> 03:59:50,640
These hours in in classes.

3390
03:59:50,720 --> 04:00:00,840
If you guys are not revising,
where do I have error?

3391
04:00:02,040 --> 04:00:04,560
So, Elinor,
you are creating the main method

3392
04:00:04,560 --> 04:00:08,280
inside that other method

3393
04:00:09,000 --> 04:00:11,160
and you master

3394
04:00:11,480 --> 04:00:17,640
all right, Bye bye.

3395
04:00:17,640 --> 04:00:18,320
Awesome.

3396
04:00:18,320 --> 04:00:21,920
See this word? Flowers.

3397
04:00:21,920 --> 04:00:25,560
All right. Anybody, guys?
